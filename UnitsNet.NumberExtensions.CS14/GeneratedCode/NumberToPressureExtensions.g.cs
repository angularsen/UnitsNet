//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToPressure
{
    /// <summary>
    /// A number to Pressure Extensions
    /// </summary>
    public static class NumberToPressureExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Pressure.FromAtmospheres(QuantityValue)" />
            public Pressure Atmospheres
#if NET7_0_OR_GREATER
                => Pressure.FromAtmospheres(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromAtmospheres(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromBars(QuantityValue)" />
            public Pressure Bars
#if NET7_0_OR_GREATER
                => Pressure.FromBars(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromBars(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromCentibars(QuantityValue)" />
            public Pressure Centibars
#if NET7_0_OR_GREATER
                => Pressure.FromCentibars(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromCentibars(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromCentimetersOfWaterColumn(QuantityValue)" />
            public Pressure CentimetersOfWaterColumn
#if NET7_0_OR_GREATER
                => Pressure.FromCentimetersOfWaterColumn(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromCentimetersOfWaterColumn(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromDecapascals(QuantityValue)" />
            public Pressure Decapascals
#if NET7_0_OR_GREATER
                => Pressure.FromDecapascals(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromDecapascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromDecibars(QuantityValue)" />
            public Pressure Decibars
#if NET7_0_OR_GREATER
                => Pressure.FromDecibars(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromDecibars(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromDynesPerSquareCentimeter(QuantityValue)" />
            public Pressure DynesPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Pressure.FromDynesPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromDynesPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromFeetOfHead(QuantityValue)" />
            public Pressure FeetOfHead
#if NET7_0_OR_GREATER
                => Pressure.FromFeetOfHead(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromFeetOfHead(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromGigapascals(QuantityValue)" />
            public Pressure Gigapascals
#if NET7_0_OR_GREATER
                => Pressure.FromGigapascals(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromGigapascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromHectopascals(QuantityValue)" />
            public Pressure Hectopascals
#if NET7_0_OR_GREATER
                => Pressure.FromHectopascals(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromHectopascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromInchesOfMercury(QuantityValue)" />
            public Pressure InchesOfMercury
#if NET7_0_OR_GREATER
                => Pressure.FromInchesOfMercury(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromInchesOfMercury(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromInchesOfWaterColumn(QuantityValue)" />
            public Pressure InchesOfWaterColumn
#if NET7_0_OR_GREATER
                => Pressure.FromInchesOfWaterColumn(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromInchesOfWaterColumn(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilobars(QuantityValue)" />
            public Pressure Kilobars
#if NET7_0_OR_GREATER
                => Pressure.FromKilobars(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilobars(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareCentimeter(QuantityValue)" />
            public Pressure KilogramsForcePerSquareCentimeter
#if NET7_0_OR_GREATER
                => Pressure.FromKilogramsForcePerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilogramsForcePerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMeter(QuantityValue)" />
            public Pressure KilogramsForcePerSquareMeter
#if NET7_0_OR_GREATER
                => Pressure.FromKilogramsForcePerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilogramsForcePerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilogramsForcePerSquareMillimeter(QuantityValue)" />
            public Pressure KilogramsForcePerSquareMillimeter
#if NET7_0_OR_GREATER
                => Pressure.FromKilogramsForcePerSquareMillimeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilogramsForcePerSquareMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareCentimeter(QuantityValue)" />
            public Pressure KilonewtonsPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Pressure.FromKilonewtonsPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilonewtonsPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMeter(QuantityValue)" />
            public Pressure KilonewtonsPerSquareMeter
#if NET7_0_OR_GREATER
                => Pressure.FromKilonewtonsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilonewtonsPerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilonewtonsPerSquareMillimeter(QuantityValue)" />
            public Pressure KilonewtonsPerSquareMillimeter
#if NET7_0_OR_GREATER
                => Pressure.FromKilonewtonsPerSquareMillimeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilonewtonsPerSquareMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilopascals(QuantityValue)" />
            public Pressure Kilopascals
#if NET7_0_OR_GREATER
                => Pressure.FromKilopascals(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilopascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareFoot(QuantityValue)" />
            public Pressure KilopoundsForcePerSquareFoot
#if NET7_0_OR_GREATER
                => Pressure.FromKilopoundsForcePerSquareFoot(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilopoundsForcePerSquareFoot(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareInch(QuantityValue)" />
            public Pressure KilopoundsForcePerSquareInch
#if NET7_0_OR_GREATER
                => Pressure.FromKilopoundsForcePerSquareInch(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilopoundsForcePerSquareInch(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromKilopoundsForcePerSquareMil(QuantityValue)" />
            public Pressure KilopoundsForcePerSquareMil
#if NET7_0_OR_GREATER
                => Pressure.FromKilopoundsForcePerSquareMil(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromKilopoundsForcePerSquareMil(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMegabars(QuantityValue)" />
            public Pressure Megabars
#if NET7_0_OR_GREATER
                => Pressure.FromMegabars(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMegabars(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMeganewtonsPerSquareMeter(QuantityValue)" />
            public Pressure MeganewtonsPerSquareMeter
#if NET7_0_OR_GREATER
                => Pressure.FromMeganewtonsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMeganewtonsPerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMegapascals(QuantityValue)" />
            public Pressure Megapascals
#if NET7_0_OR_GREATER
                => Pressure.FromMegapascals(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMegapascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMetersOfHead(QuantityValue)" />
            public Pressure MetersOfHead
#if NET7_0_OR_GREATER
                => Pressure.FromMetersOfHead(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMetersOfHead(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMetersOfWaterColumn(QuantityValue)" />
            public Pressure MetersOfWaterColumn
#if NET7_0_OR_GREATER
                => Pressure.FromMetersOfWaterColumn(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMetersOfWaterColumn(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMicrobars(QuantityValue)" />
            public Pressure Microbars
#if NET7_0_OR_GREATER
                => Pressure.FromMicrobars(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMicrobars(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMicropascals(QuantityValue)" />
            public Pressure Micropascals
#if NET7_0_OR_GREATER
                => Pressure.FromMicropascals(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMicropascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMillibars(QuantityValue)" />
            public Pressure Millibars
#if NET7_0_OR_GREATER
                => Pressure.FromMillibars(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMillibars(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMillimetersOfMercury(QuantityValue)" />
            public Pressure MillimetersOfMercury
#if NET7_0_OR_GREATER
                => Pressure.FromMillimetersOfMercury(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMillimetersOfMercury(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMillimetersOfWaterColumn(QuantityValue)" />
            public Pressure MillimetersOfWaterColumn
#if NET7_0_OR_GREATER
                => Pressure.FromMillimetersOfWaterColumn(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMillimetersOfWaterColumn(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMillipascals(QuantityValue)" />
            public Pressure Millipascals
#if NET7_0_OR_GREATER
                => Pressure.FromMillipascals(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMillipascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromMillitorrs(QuantityValue)" />
            public Pressure Millitorrs
#if NET7_0_OR_GREATER
                => Pressure.FromMillitorrs(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromMillitorrs(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromNewtonsPerSquareCentimeter(QuantityValue)" />
            public Pressure NewtonsPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Pressure.FromNewtonsPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromNewtonsPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMeter(QuantityValue)" />
            public Pressure NewtonsPerSquareMeter
#if NET7_0_OR_GREATER
                => Pressure.FromNewtonsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromNewtonsPerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromNewtonsPerSquareMillimeter(QuantityValue)" />
            public Pressure NewtonsPerSquareMillimeter
#if NET7_0_OR_GREATER
                => Pressure.FromNewtonsPerSquareMillimeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromNewtonsPerSquareMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromPascals(QuantityValue)" />
            public Pressure Pascals
#if NET7_0_OR_GREATER
                => Pressure.FromPascals(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromPascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareFoot(QuantityValue)" />
            public Pressure PoundsForcePerSquareFoot
#if NET7_0_OR_GREATER
                => Pressure.FromPoundsForcePerSquareFoot(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromPoundsForcePerSquareFoot(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareInch(QuantityValue)" />
            public Pressure PoundsForcePerSquareInch
#if NET7_0_OR_GREATER
                => Pressure.FromPoundsForcePerSquareInch(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromPoundsForcePerSquareInch(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromPoundsForcePerSquareMil(QuantityValue)" />
            public Pressure PoundsForcePerSquareMil
#if NET7_0_OR_GREATER
                => Pressure.FromPoundsForcePerSquareMil(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromPoundsForcePerSquareMil(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromPoundsPerInchSecondSquared(QuantityValue)" />
            public Pressure PoundsPerInchSecondSquared
#if NET7_0_OR_GREATER
                => Pressure.FromPoundsPerInchSecondSquared(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromPoundsPerInchSecondSquared(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromTechnicalAtmospheres(QuantityValue)" />
            public Pressure TechnicalAtmospheres
#if NET7_0_OR_GREATER
                => Pressure.FromTechnicalAtmospheres(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromTechnicalAtmospheres(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareCentimeter(QuantityValue)" />
            public Pressure TonnesForcePerSquareCentimeter
#if NET7_0_OR_GREATER
                => Pressure.FromTonnesForcePerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromTonnesForcePerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMeter(QuantityValue)" />
            public Pressure TonnesForcePerSquareMeter
#if NET7_0_OR_GREATER
                => Pressure.FromTonnesForcePerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromTonnesForcePerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromTonnesForcePerSquareMillimeter(QuantityValue)" />
            public Pressure TonnesForcePerSquareMillimeter
#if NET7_0_OR_GREATER
                => Pressure.FromTonnesForcePerSquareMillimeter(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromTonnesForcePerSquareMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Pressure.FromTorrs(QuantityValue)" />
            public Pressure Torrs
#if NET7_0_OR_GREATER
                => Pressure.FromTorrs(QuantityValue.CreateChecked(value));
#else
                => Pressure.FromTorrs(value.ToQuantityValue());
#endif

        }
    }
}
