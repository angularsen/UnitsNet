//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Compressibility.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class CompressibilityTestsBase : QuantityTestsBase
    {
        protected abstract double InverseAtmospheresInOneInversePascal { get; }
        protected abstract double InverseBarsInOneInversePascal { get; }
        protected abstract double InverseKilopascalsInOneInversePascal { get; }
        protected abstract double InverseMegapascalsInOneInversePascal { get; }
        protected abstract double InverseMillibarsInOneInversePascal { get; }
        protected abstract double InversePascalsInOneInversePascal { get; }
        protected abstract double InversePoundsForcePerSquareInchInOneInversePascal { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double InverseAtmospheresTolerance { get { return 1e-5; } }
        protected virtual double InverseBarsTolerance { get { return 1e-5; } }
        protected virtual double InverseKilopascalsTolerance { get { return 1e-5; } }
        protected virtual double InverseMegapascalsTolerance { get { return 1e-5; } }
        protected virtual double InverseMillibarsTolerance { get { return 1e-5; } }
        protected virtual double InversePascalsTolerance { get { return 1e-5; } }
        protected virtual double InversePoundsForcePerSquareInchTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(CompressibilityUnit unit)
        {
            return unit switch
            {
                CompressibilityUnit.InverseAtmosphere => (InverseAtmospheresInOneInversePascal, InverseAtmospheresTolerance),
                CompressibilityUnit.InverseBar => (InverseBarsInOneInversePascal, InverseBarsTolerance),
                CompressibilityUnit.InverseKilopascal => (InverseKilopascalsInOneInversePascal, InverseKilopascalsTolerance),
                CompressibilityUnit.InverseMegapascal => (InverseMegapascalsInOneInversePascal, InverseMegapascalsTolerance),
                CompressibilityUnit.InverseMillibar => (InverseMillibarsInOneInversePascal, InverseMillibarsTolerance),
                CompressibilityUnit.InversePascal => (InversePascalsInOneInversePascal, InversePascalsTolerance),
                CompressibilityUnit.InversePoundForcePerSquareInch => (InversePoundsForcePerSquareInchInOneInversePascal, InversePoundsForcePerSquareInchTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { CompressibilityUnit.InverseAtmosphere },
            new object[] { CompressibilityUnit.InverseBar },
            new object[] { CompressibilityUnit.InverseKilopascal },
            new object[] { CompressibilityUnit.InverseMegapascal },
            new object[] { CompressibilityUnit.InverseMillibar },
            new object[] { CompressibilityUnit.InversePascal },
            new object[] { CompressibilityUnit.InversePoundForcePerSquareInch },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Compressibility();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(CompressibilityUnit.InversePascal, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Compressibility(double.PositiveInfinity, CompressibilityUnit.InversePascal));
            var exception2 = Record.Exception(() => new Compressibility(double.NegativeInfinity, CompressibilityUnit.InversePascal));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Compressibility(double.NaN, CompressibilityUnit.InversePascal));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Compressibility(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Compressibility(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Compressibility(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Compressibility_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Compressibility(1, CompressibilityUnit.InversePascal);

            QuantityInfo<CompressibilityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Compressibility.Zero, quantityInfo.Zero);
            Assert.Equal("Compressibility", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<CompressibilityUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void InversePascalToCompressibilityUnits()
        {
            Compressibility inversepascal = Compressibility.FromInversePascals(1);
            AssertEx.EqualTolerance(InverseAtmospheresInOneInversePascal, inversepascal.InverseAtmospheres, InverseAtmospheresTolerance);
            AssertEx.EqualTolerance(InverseBarsInOneInversePascal, inversepascal.InverseBars, InverseBarsTolerance);
            AssertEx.EqualTolerance(InverseKilopascalsInOneInversePascal, inversepascal.InverseKilopascals, InverseKilopascalsTolerance);
            AssertEx.EqualTolerance(InverseMegapascalsInOneInversePascal, inversepascal.InverseMegapascals, InverseMegapascalsTolerance);
            AssertEx.EqualTolerance(InverseMillibarsInOneInversePascal, inversepascal.InverseMillibars, InverseMillibarsTolerance);
            AssertEx.EqualTolerance(InversePascalsInOneInversePascal, inversepascal.InversePascals, InversePascalsTolerance);
            AssertEx.EqualTolerance(InversePoundsForcePerSquareInchInOneInversePascal, inversepascal.InversePoundsForcePerSquareInch, InversePoundsForcePerSquareInchTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Compressibility.From(1, CompressibilityUnit.InverseAtmosphere);
            AssertEx.EqualTolerance(1, quantity00.InverseAtmospheres, InverseAtmospheresTolerance);
            Assert.Equal(CompressibilityUnit.InverseAtmosphere, quantity00.Unit);

            var quantity01 = Compressibility.From(1, CompressibilityUnit.InverseBar);
            AssertEx.EqualTolerance(1, quantity01.InverseBars, InverseBarsTolerance);
            Assert.Equal(CompressibilityUnit.InverseBar, quantity01.Unit);

            var quantity02 = Compressibility.From(1, CompressibilityUnit.InverseKilopascal);
            AssertEx.EqualTolerance(1, quantity02.InverseKilopascals, InverseKilopascalsTolerance);
            Assert.Equal(CompressibilityUnit.InverseKilopascal, quantity02.Unit);

            var quantity03 = Compressibility.From(1, CompressibilityUnit.InverseMegapascal);
            AssertEx.EqualTolerance(1, quantity03.InverseMegapascals, InverseMegapascalsTolerance);
            Assert.Equal(CompressibilityUnit.InverseMegapascal, quantity03.Unit);

            var quantity04 = Compressibility.From(1, CompressibilityUnit.InverseMillibar);
            AssertEx.EqualTolerance(1, quantity04.InverseMillibars, InverseMillibarsTolerance);
            Assert.Equal(CompressibilityUnit.InverseMillibar, quantity04.Unit);

            var quantity05 = Compressibility.From(1, CompressibilityUnit.InversePascal);
            AssertEx.EqualTolerance(1, quantity05.InversePascals, InversePascalsTolerance);
            Assert.Equal(CompressibilityUnit.InversePascal, quantity05.Unit);

            var quantity06 = Compressibility.From(1, CompressibilityUnit.InversePoundForcePerSquareInch);
            AssertEx.EqualTolerance(1, quantity06.InversePoundsForcePerSquareInch, InversePoundsForcePerSquareInchTolerance);
            Assert.Equal(CompressibilityUnit.InversePoundForcePerSquareInch, quantity06.Unit);

        }

        [Fact]
        public void FromInversePascals_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Compressibility.FromInversePascals(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Compressibility.FromInversePascals(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromInversePascals_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Compressibility.FromInversePascals(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var inversepascal = Compressibility.FromInversePascals(1);
            AssertEx.EqualTolerance(InverseAtmospheresInOneInversePascal, inversepascal.As(CompressibilityUnit.InverseAtmosphere), InverseAtmospheresTolerance);
            AssertEx.EqualTolerance(InverseBarsInOneInversePascal, inversepascal.As(CompressibilityUnit.InverseBar), InverseBarsTolerance);
            AssertEx.EqualTolerance(InverseKilopascalsInOneInversePascal, inversepascal.As(CompressibilityUnit.InverseKilopascal), InverseKilopascalsTolerance);
            AssertEx.EqualTolerance(InverseMegapascalsInOneInversePascal, inversepascal.As(CompressibilityUnit.InverseMegapascal), InverseMegapascalsTolerance);
            AssertEx.EqualTolerance(InverseMillibarsInOneInversePascal, inversepascal.As(CompressibilityUnit.InverseMillibar), InverseMillibarsTolerance);
            AssertEx.EqualTolerance(InversePascalsInOneInversePascal, inversepascal.As(CompressibilityUnit.InversePascal), InversePascalsTolerance);
            AssertEx.EqualTolerance(InversePoundsForcePerSquareInchInOneInversePascal, inversepascal.As(CompressibilityUnit.InversePoundForcePerSquareInch), InversePoundsForcePerSquareInchTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Compressibility.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
            var expectedValue = quantity.As(Compressibility.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
            var expectedUnit = Compressibility.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Compressibility quantityToConvert = quantity;

                Compressibility convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<CompressibilityUnit> quantityToConvert = quantity;

                IQuantity<CompressibilityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<CompressibilityUnit> quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<CompressibilityUnit> quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Compressibility(value: 1, unit: Compressibility.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Compressibility.Parse("1 atm⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseAtmospheres, InverseAtmospheresTolerance);
                Assert.Equal(CompressibilityUnit.InverseAtmosphere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 1/atm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseAtmospheres, InverseAtmospheresTolerance);
                Assert.Equal(CompressibilityUnit.InverseAtmosphere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 bar⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseBars, InverseBarsTolerance);
                Assert.Equal(CompressibilityUnit.InverseBar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 1/bar", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseBars, InverseBarsTolerance);
                Assert.Equal(CompressibilityUnit.InverseBar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 kPa⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseKilopascals, InverseKilopascalsTolerance);
                Assert.Equal(CompressibilityUnit.InverseKilopascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 1/kPa", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseKilopascals, InverseKilopascalsTolerance);
                Assert.Equal(CompressibilityUnit.InverseKilopascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 MPa⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMegapascals, InverseMegapascalsTolerance);
                Assert.Equal(CompressibilityUnit.InverseMegapascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 1/MPa", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMegapascals, InverseMegapascalsTolerance);
                Assert.Equal(CompressibilityUnit.InverseMegapascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 mbar⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMillibars, InverseMillibarsTolerance);
                Assert.Equal(CompressibilityUnit.InverseMillibar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 1/mbar", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMillibars, InverseMillibarsTolerance);
                Assert.Equal(CompressibilityUnit.InverseMillibar, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 Pa⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InversePascals, InversePascalsTolerance);
                Assert.Equal(CompressibilityUnit.InversePascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 1/Pa", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InversePascals, InversePascalsTolerance);
                Assert.Equal(CompressibilityUnit.InversePascal, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 psi⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InversePoundsForcePerSquareInch, InversePoundsForcePerSquareInchTolerance);
                Assert.Equal(CompressibilityUnit.InversePoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Compressibility.Parse("1 1/psi", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InversePoundsForcePerSquareInch, InversePoundsForcePerSquareInchTolerance);
                Assert.Equal(CompressibilityUnit.InversePoundForcePerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Compressibility.TryParse("1 atm⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseAtmospheres, InverseAtmospheresTolerance);
                Assert.Equal(CompressibilityUnit.InverseAtmosphere, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 1/atm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseAtmospheres, InverseAtmospheresTolerance);
                Assert.Equal(CompressibilityUnit.InverseAtmosphere, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 bar⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseBars, InverseBarsTolerance);
                Assert.Equal(CompressibilityUnit.InverseBar, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 1/bar", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseBars, InverseBarsTolerance);
                Assert.Equal(CompressibilityUnit.InverseBar, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 kPa⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseKilopascals, InverseKilopascalsTolerance);
                Assert.Equal(CompressibilityUnit.InverseKilopascal, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 1/kPa", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseKilopascals, InverseKilopascalsTolerance);
                Assert.Equal(CompressibilityUnit.InverseKilopascal, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 MPa⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMegapascals, InverseMegapascalsTolerance);
                Assert.Equal(CompressibilityUnit.InverseMegapascal, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 1/MPa", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMegapascals, InverseMegapascalsTolerance);
                Assert.Equal(CompressibilityUnit.InverseMegapascal, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 mbar⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMillibars, InverseMillibarsTolerance);
                Assert.Equal(CompressibilityUnit.InverseMillibar, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 1/mbar", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMillibars, InverseMillibarsTolerance);
                Assert.Equal(CompressibilityUnit.InverseMillibar, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 Pa⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InversePascals, InversePascalsTolerance);
                Assert.Equal(CompressibilityUnit.InversePascal, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 1/Pa", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InversePascals, InversePascalsTolerance);
                Assert.Equal(CompressibilityUnit.InversePascal, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 psi⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InversePoundsForcePerSquareInch, InversePoundsForcePerSquareInchTolerance);
                Assert.Equal(CompressibilityUnit.InversePoundForcePerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Compressibility.TryParse("1 1/psi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InversePoundsForcePerSquareInch, InversePoundsForcePerSquareInchTolerance);
                Assert.Equal(CompressibilityUnit.InversePoundForcePerSquareInch, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("atm⁻¹", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("1/atm", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("bar⁻¹", CompressibilityUnit.InverseBar)]
        [InlineData("1/bar", CompressibilityUnit.InverseBar)]
        [InlineData("kPa⁻¹", CompressibilityUnit.InverseKilopascal)]
        [InlineData("1/kPa", CompressibilityUnit.InverseKilopascal)]
        [InlineData("MPa⁻¹", CompressibilityUnit.InverseMegapascal)]
        [InlineData("1/MPa", CompressibilityUnit.InverseMegapascal)]
        [InlineData("mbar⁻¹", CompressibilityUnit.InverseMillibar)]
        [InlineData("1/mbar", CompressibilityUnit.InverseMillibar)]
        [InlineData("Pa⁻¹", CompressibilityUnit.InversePascal)]
        [InlineData("1/Pa", CompressibilityUnit.InversePascal)]
        [InlineData("psi⁻¹", CompressibilityUnit.InversePoundForcePerSquareInch)]
        [InlineData("1/psi", CompressibilityUnit.InversePoundForcePerSquareInch)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, CompressibilityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            CompressibilityUnit parsedUnit = Compressibility.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("atm⁻¹", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("1/atm", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("bar⁻¹", CompressibilityUnit.InverseBar)]
        [InlineData("1/bar", CompressibilityUnit.InverseBar)]
        [InlineData("kPa⁻¹", CompressibilityUnit.InverseKilopascal)]
        [InlineData("1/kPa", CompressibilityUnit.InverseKilopascal)]
        [InlineData("MPa⁻¹", CompressibilityUnit.InverseMegapascal)]
        [InlineData("1/MPa", CompressibilityUnit.InverseMegapascal)]
        [InlineData("mbar⁻¹", CompressibilityUnit.InverseMillibar)]
        [InlineData("1/mbar", CompressibilityUnit.InverseMillibar)]
        [InlineData("Pa⁻¹", CompressibilityUnit.InversePascal)]
        [InlineData("1/Pa", CompressibilityUnit.InversePascal)]
        [InlineData("psi⁻¹", CompressibilityUnit.InversePoundForcePerSquareInch)]
        [InlineData("1/psi", CompressibilityUnit.InversePoundForcePerSquareInch)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, CompressibilityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            CompressibilityUnit parsedUnit = Compressibility.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm⁻¹", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("en-US", "1/atm", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("en-US", "bar⁻¹", CompressibilityUnit.InverseBar)]
        [InlineData("en-US", "1/bar", CompressibilityUnit.InverseBar)]
        [InlineData("en-US", "kPa⁻¹", CompressibilityUnit.InverseKilopascal)]
        [InlineData("en-US", "1/kPa", CompressibilityUnit.InverseKilopascal)]
        [InlineData("en-US", "MPa⁻¹", CompressibilityUnit.InverseMegapascal)]
        [InlineData("en-US", "1/MPa", CompressibilityUnit.InverseMegapascal)]
        [InlineData("en-US", "mbar⁻¹", CompressibilityUnit.InverseMillibar)]
        [InlineData("en-US", "1/mbar", CompressibilityUnit.InverseMillibar)]
        [InlineData("en-US", "Pa⁻¹", CompressibilityUnit.InversePascal)]
        [InlineData("en-US", "1/Pa", CompressibilityUnit.InversePascal)]
        [InlineData("en-US", "psi⁻¹", CompressibilityUnit.InversePoundForcePerSquareInch)]
        [InlineData("en-US", "1/psi", CompressibilityUnit.InversePoundForcePerSquareInch)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, CompressibilityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            CompressibilityUnit parsedUnit = Compressibility.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm⁻¹", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("en-US", "1/atm", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("en-US", "bar⁻¹", CompressibilityUnit.InverseBar)]
        [InlineData("en-US", "1/bar", CompressibilityUnit.InverseBar)]
        [InlineData("en-US", "kPa⁻¹", CompressibilityUnit.InverseKilopascal)]
        [InlineData("en-US", "1/kPa", CompressibilityUnit.InverseKilopascal)]
        [InlineData("en-US", "MPa⁻¹", CompressibilityUnit.InverseMegapascal)]
        [InlineData("en-US", "1/MPa", CompressibilityUnit.InverseMegapascal)]
        [InlineData("en-US", "mbar⁻¹", CompressibilityUnit.InverseMillibar)]
        [InlineData("en-US", "1/mbar", CompressibilityUnit.InverseMillibar)]
        [InlineData("en-US", "Pa⁻¹", CompressibilityUnit.InversePascal)]
        [InlineData("en-US", "1/Pa", CompressibilityUnit.InversePascal)]
        [InlineData("en-US", "psi⁻¹", CompressibilityUnit.InversePoundForcePerSquareInch)]
        [InlineData("en-US", "1/psi", CompressibilityUnit.InversePoundForcePerSquareInch)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, CompressibilityUnit expectedUnit)
        {
            CompressibilityUnit parsedUnit = Compressibility.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("atm⁻¹", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("1/atm", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("bar⁻¹", CompressibilityUnit.InverseBar)]
        [InlineData("1/bar", CompressibilityUnit.InverseBar)]
        [InlineData("kPa⁻¹", CompressibilityUnit.InverseKilopascal)]
        [InlineData("1/kPa", CompressibilityUnit.InverseKilopascal)]
        [InlineData("MPa⁻¹", CompressibilityUnit.InverseMegapascal)]
        [InlineData("1/MPa", CompressibilityUnit.InverseMegapascal)]
        [InlineData("mbar⁻¹", CompressibilityUnit.InverseMillibar)]
        [InlineData("1/mbar", CompressibilityUnit.InverseMillibar)]
        [InlineData("Pa⁻¹", CompressibilityUnit.InversePascal)]
        [InlineData("1/Pa", CompressibilityUnit.InversePascal)]
        [InlineData("psi⁻¹", CompressibilityUnit.InversePoundForcePerSquareInch)]
        [InlineData("1/psi", CompressibilityUnit.InversePoundForcePerSquareInch)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, CompressibilityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Compressibility.TryParseUnit(abbreviation, out CompressibilityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("atm⁻¹", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("1/atm", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("bar⁻¹", CompressibilityUnit.InverseBar)]
        [InlineData("1/bar", CompressibilityUnit.InverseBar)]
        [InlineData("kPa⁻¹", CompressibilityUnit.InverseKilopascal)]
        [InlineData("1/kPa", CompressibilityUnit.InverseKilopascal)]
        [InlineData("MPa⁻¹", CompressibilityUnit.InverseMegapascal)]
        [InlineData("1/MPa", CompressibilityUnit.InverseMegapascal)]
        [InlineData("mbar⁻¹", CompressibilityUnit.InverseMillibar)]
        [InlineData("1/mbar", CompressibilityUnit.InverseMillibar)]
        [InlineData("Pa⁻¹", CompressibilityUnit.InversePascal)]
        [InlineData("1/Pa", CompressibilityUnit.InversePascal)]
        [InlineData("psi⁻¹", CompressibilityUnit.InversePoundForcePerSquareInch)]
        [InlineData("1/psi", CompressibilityUnit.InversePoundForcePerSquareInch)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, CompressibilityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Compressibility.TryParseUnit(abbreviation, out CompressibilityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm⁻¹", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("en-US", "1/atm", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("en-US", "bar⁻¹", CompressibilityUnit.InverseBar)]
        [InlineData("en-US", "1/bar", CompressibilityUnit.InverseBar)]
        [InlineData("en-US", "kPa⁻¹", CompressibilityUnit.InverseKilopascal)]
        [InlineData("en-US", "1/kPa", CompressibilityUnit.InverseKilopascal)]
        [InlineData("en-US", "MPa⁻¹", CompressibilityUnit.InverseMegapascal)]
        [InlineData("en-US", "1/MPa", CompressibilityUnit.InverseMegapascal)]
        [InlineData("en-US", "mbar⁻¹", CompressibilityUnit.InverseMillibar)]
        [InlineData("en-US", "1/mbar", CompressibilityUnit.InverseMillibar)]
        [InlineData("en-US", "Pa⁻¹", CompressibilityUnit.InversePascal)]
        [InlineData("en-US", "1/Pa", CompressibilityUnit.InversePascal)]
        [InlineData("en-US", "psi⁻¹", CompressibilityUnit.InversePoundForcePerSquareInch)]
        [InlineData("en-US", "1/psi", CompressibilityUnit.InversePoundForcePerSquareInch)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, CompressibilityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Compressibility.TryParseUnit(abbreviation, out CompressibilityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm⁻¹", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("en-US", "1/atm", CompressibilityUnit.InverseAtmosphere)]
        [InlineData("en-US", "bar⁻¹", CompressibilityUnit.InverseBar)]
        [InlineData("en-US", "1/bar", CompressibilityUnit.InverseBar)]
        [InlineData("en-US", "kPa⁻¹", CompressibilityUnit.InverseKilopascal)]
        [InlineData("en-US", "1/kPa", CompressibilityUnit.InverseKilopascal)]
        [InlineData("en-US", "MPa⁻¹", CompressibilityUnit.InverseMegapascal)]
        [InlineData("en-US", "1/MPa", CompressibilityUnit.InverseMegapascal)]
        [InlineData("en-US", "mbar⁻¹", CompressibilityUnit.InverseMillibar)]
        [InlineData("en-US", "1/mbar", CompressibilityUnit.InverseMillibar)]
        [InlineData("en-US", "Pa⁻¹", CompressibilityUnit.InversePascal)]
        [InlineData("en-US", "1/Pa", CompressibilityUnit.InversePascal)]
        [InlineData("en-US", "psi⁻¹", CompressibilityUnit.InversePoundForcePerSquareInch)]
        [InlineData("en-US", "1/psi", CompressibilityUnit.InversePoundForcePerSquareInch)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, CompressibilityUnit expectedUnit)
        {
            Assert.True(Compressibility.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out CompressibilityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(CompressibilityUnit unit)
        {
            var inBaseUnits = Compressibility.From(1.0, Compressibility.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(CompressibilityUnit unit)
        {
            var quantity = Compressibility.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(CompressibilityUnit unit)
        {
            Assert.All(Compressibility.Units.Where(u => u != Compressibility.BaseUnit), fromUnit =>
            {
                var quantity = Compressibility.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(CompressibilityUnit unit)
        {
            var quantity = default(Compressibility);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(CompressibilityUnit unit)
        {
            var quantity = Compressibility.From(3, Compressibility.BaseUnit);
            Compressibility expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<CompressibilityUnit> quantityToConvert = quantity;
                IQuantity<CompressibilityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Compressibility inversepascal = Compressibility.FromInversePascals(1);
            AssertEx.EqualTolerance(1, Compressibility.FromInverseAtmospheres(inversepascal.InverseAtmospheres).InversePascals, InverseAtmospheresTolerance);
            AssertEx.EqualTolerance(1, Compressibility.FromInverseBars(inversepascal.InverseBars).InversePascals, InverseBarsTolerance);
            AssertEx.EqualTolerance(1, Compressibility.FromInverseKilopascals(inversepascal.InverseKilopascals).InversePascals, InverseKilopascalsTolerance);
            AssertEx.EqualTolerance(1, Compressibility.FromInverseMegapascals(inversepascal.InverseMegapascals).InversePascals, InverseMegapascalsTolerance);
            AssertEx.EqualTolerance(1, Compressibility.FromInverseMillibars(inversepascal.InverseMillibars).InversePascals, InverseMillibarsTolerance);
            AssertEx.EqualTolerance(1, Compressibility.FromInversePascals(inversepascal.InversePascals).InversePascals, InversePascalsTolerance);
            AssertEx.EqualTolerance(1, Compressibility.FromInversePoundsForcePerSquareInch(inversepascal.InversePoundsForcePerSquareInch).InversePascals, InversePoundsForcePerSquareInchTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Compressibility v = Compressibility.FromInversePascals(1);
            AssertEx.EqualTolerance(-1, -v.InversePascals, InversePascalsTolerance);
            AssertEx.EqualTolerance(2, (Compressibility.FromInversePascals(3)-v).InversePascals, InversePascalsTolerance);
            AssertEx.EqualTolerance(2, (v + v).InversePascals, InversePascalsTolerance);
            AssertEx.EqualTolerance(10, (v*10).InversePascals, InversePascalsTolerance);
            AssertEx.EqualTolerance(10, (10*v).InversePascals, InversePascalsTolerance);
            AssertEx.EqualTolerance(2, (Compressibility.FromInversePascals(10)/5).InversePascals, InversePascalsTolerance);
            AssertEx.EqualTolerance(2, Compressibility.FromInversePascals(10)/Compressibility.FromInversePascals(5), InversePascalsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Compressibility oneInversePascal = Compressibility.FromInversePascals(1);
            Compressibility twoInversePascals = Compressibility.FromInversePascals(2);

            Assert.True(oneInversePascal < twoInversePascals);
            Assert.True(oneInversePascal <= twoInversePascals);
            Assert.True(twoInversePascals > oneInversePascal);
            Assert.True(twoInversePascals >= oneInversePascal);

            Assert.False(oneInversePascal > twoInversePascals);
            Assert.False(oneInversePascal >= twoInversePascals);
            Assert.False(twoInversePascals < oneInversePascal);
            Assert.False(twoInversePascals <= oneInversePascal);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Compressibility inversepascal = Compressibility.FromInversePascals(1);
            Assert.Equal(0, inversepascal.CompareTo(inversepascal));
            Assert.True(inversepascal.CompareTo(Compressibility.Zero) > 0);
            Assert.True(Compressibility.Zero.CompareTo(inversepascal) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Compressibility inversepascal = Compressibility.FromInversePascals(1);
            Assert.Throws<ArgumentException>(() => inversepascal.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Compressibility inversepascal = Compressibility.FromInversePascals(1);
            Assert.Throws<ArgumentNullException>(() => inversepascal.CompareTo(null));
        }

        [Theory]
        [InlineData(1, CompressibilityUnit.InversePascal, 1, CompressibilityUnit.InversePascal, true)]  // Same value and unit.
        [InlineData(1, CompressibilityUnit.InversePascal, 2, CompressibilityUnit.InversePascal, false)] // Different value.
        [InlineData(2, CompressibilityUnit.InversePascal, 1, CompressibilityUnit.InverseAtmosphere, false)] // Different value and unit.
        [InlineData(1, CompressibilityUnit.InversePascal, 1, CompressibilityUnit.InverseAtmosphere, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, CompressibilityUnit unitA, double valueB, CompressibilityUnit unitB, bool expectEqual)
        {
            var a = new Compressibility(valueA, unitA);
            var b = new Compressibility(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Compressibility.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Compressibility.FromInversePascals(1);
            Assert.True(v.Equals(Compressibility.FromInversePascals(1), InversePascalsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Compressibility.Zero, InversePascalsTolerance, ComparisonType.Relative));
            Assert.True(Compressibility.FromInversePascals(100).Equals(Compressibility.FromInversePascals(120), 0.3, ComparisonType.Relative));
            Assert.False(Compressibility.FromInversePascals(100).Equals(Compressibility.FromInversePascals(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Compressibility.FromInversePascals(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Compressibility.FromInversePascals(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Compressibility inversepascal = Compressibility.FromInversePascals(1);
            Assert.False(inversepascal.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Compressibility inversepascal = Compressibility.FromInversePascals(1);
            Assert.False(inversepascal.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelpers.GetValues<CompressibilityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Compressibility.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 atm⁻¹", new Compressibility(1, CompressibilityUnit.InverseAtmosphere).ToString());
            Assert.Equal("1 bar⁻¹", new Compressibility(1, CompressibilityUnit.InverseBar).ToString());
            Assert.Equal("1 kPa⁻¹", new Compressibility(1, CompressibilityUnit.InverseKilopascal).ToString());
            Assert.Equal("1 MPa⁻¹", new Compressibility(1, CompressibilityUnit.InverseMegapascal).ToString());
            Assert.Equal("1 mbar⁻¹", new Compressibility(1, CompressibilityUnit.InverseMillibar).ToString());
            Assert.Equal("1 Pa⁻¹", new Compressibility(1, CompressibilityUnit.InversePascal).ToString());
            Assert.Equal("1 psi⁻¹", new Compressibility(1, CompressibilityUnit.InversePoundForcePerSquareInch).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 atm⁻¹", new Compressibility(1, CompressibilityUnit.InverseAtmosphere).ToString(swedishCulture));
            Assert.Equal("1 bar⁻¹", new Compressibility(1, CompressibilityUnit.InverseBar).ToString(swedishCulture));
            Assert.Equal("1 kPa⁻¹", new Compressibility(1, CompressibilityUnit.InverseKilopascal).ToString(swedishCulture));
            Assert.Equal("1 MPa⁻¹", new Compressibility(1, CompressibilityUnit.InverseMegapascal).ToString(swedishCulture));
            Assert.Equal("1 mbar⁻¹", new Compressibility(1, CompressibilityUnit.InverseMillibar).ToString(swedishCulture));
            Assert.Equal("1 Pa⁻¹", new Compressibility(1, CompressibilityUnit.InversePascal).ToString(swedishCulture));
            Assert.Equal("1 psi⁻¹", new Compressibility(1, CompressibilityUnit.InversePoundForcePerSquareInch).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Pa⁻¹", new Compressibility(0.123456, CompressibilityUnit.InversePascal).ToString("s1"));
            Assert.Equal("0.12 Pa⁻¹", new Compressibility(0.123456, CompressibilityUnit.InversePascal).ToString("s2"));
            Assert.Equal("0.123 Pa⁻¹", new Compressibility(0.123456, CompressibilityUnit.InversePascal).ToString("s3"));
            Assert.Equal("0.1235 Pa⁻¹", new Compressibility(0.123456, CompressibilityUnit.InversePascal).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Pa⁻¹", new Compressibility(0.123456, CompressibilityUnit.InversePascal).ToString("s1", culture));
            Assert.Equal("0.12 Pa⁻¹", new Compressibility(0.123456, CompressibilityUnit.InversePascal).ToString("s2", culture));
            Assert.Equal("0.123 Pa⁻¹", new Compressibility(0.123456, CompressibilityUnit.InversePascal).ToString("s3", culture));
            Assert.Equal("0.1235 Pa⁻¹", new Compressibility(0.123456, CompressibilityUnit.InversePascal).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Compressibility.FromInversePascals(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Compressibility.FromInversePascals(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Compressibility.FromInversePascals(1.0);
            Assert.Equal(new {Compressibility.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Compressibility.FromInversePascals(value);
            Assert.Equal(Compressibility.FromInversePascals(-value), -quantity);
        }
    }
}
