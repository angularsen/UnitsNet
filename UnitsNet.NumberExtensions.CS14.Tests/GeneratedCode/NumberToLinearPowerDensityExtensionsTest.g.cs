//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToLinearPowerDensity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToLinearPowerDensityExtensionsTests
    {
        [Fact]
        public void NumberToGigawattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromGigawattsPerCentimeter(2), 2.GigawattsPerCentimeter);

        [Fact]
        public void NumberToGigawattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity.FromGigawattsPerFoot(2), 2.GigawattsPerFoot);

        [Fact]
        public void NumberToGigawattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity.FromGigawattsPerInch(2), 2.GigawattsPerInch);

        [Fact]
        public void NumberToGigawattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity.FromGigawattsPerMeter(2), 2.GigawattsPerMeter);

        [Fact]
        public void NumberToGigawattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromGigawattsPerMillimeter(2), 2.GigawattsPerMillimeter);

        [Fact]
        public void NumberToKilowattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromKilowattsPerCentimeter(2), 2.KilowattsPerCentimeter);

        [Fact]
        public void NumberToKilowattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity.FromKilowattsPerFoot(2), 2.KilowattsPerFoot);

        [Fact]
        public void NumberToKilowattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity.FromKilowattsPerInch(2), 2.KilowattsPerInch);

        [Fact]
        public void NumberToKilowattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity.FromKilowattsPerMeter(2), 2.KilowattsPerMeter);

        [Fact]
        public void NumberToKilowattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromKilowattsPerMillimeter(2), 2.KilowattsPerMillimeter);

        [Fact]
        public void NumberToMegawattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromMegawattsPerCentimeter(2), 2.MegawattsPerCentimeter);

        [Fact]
        public void NumberToMegawattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity.FromMegawattsPerFoot(2), 2.MegawattsPerFoot);

        [Fact]
        public void NumberToMegawattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity.FromMegawattsPerInch(2), 2.MegawattsPerInch);

        [Fact]
        public void NumberToMegawattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity.FromMegawattsPerMeter(2), 2.MegawattsPerMeter);

        [Fact]
        public void NumberToMegawattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromMegawattsPerMillimeter(2), 2.MegawattsPerMillimeter);

        [Fact]
        public void NumberToMilliwattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromMilliwattsPerCentimeter(2), 2.MilliwattsPerCentimeter);

        [Fact]
        public void NumberToMilliwattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity.FromMilliwattsPerFoot(2), 2.MilliwattsPerFoot);

        [Fact]
        public void NumberToMilliwattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity.FromMilliwattsPerInch(2), 2.MilliwattsPerInch);

        [Fact]
        public void NumberToMilliwattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity.FromMilliwattsPerMeter(2), 2.MilliwattsPerMeter);

        [Fact]
        public void NumberToMilliwattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromMilliwattsPerMillimeter(2), 2.MilliwattsPerMillimeter);

        [Fact]
        public void NumberToWattsPerCentimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromWattsPerCentimeter(2), 2.WattsPerCentimeter);

        [Fact]
        public void NumberToWattsPerFootTest() =>
            Assert.Equal(LinearPowerDensity.FromWattsPerFoot(2), 2.WattsPerFoot);

        [Fact]
        public void NumberToWattsPerInchTest() =>
            Assert.Equal(LinearPowerDensity.FromWattsPerInch(2), 2.WattsPerInch);

        [Fact]
        public void NumberToWattsPerMeterTest() =>
            Assert.Equal(LinearPowerDensity.FromWattsPerMeter(2), 2.WattsPerMeter);

        [Fact]
        public void NumberToWattsPerMillimeterTest() =>
            Assert.Equal(LinearPowerDensity.FromWattsPerMillimeter(2), 2.WattsPerMillimeter);

    }
}
