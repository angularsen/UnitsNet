//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Thermal resistance (R) measures the opposition to the heat current in a material or system. It is measured in units of kelvins per watt (K/W) and indicates how much temperature difference (in kelvins) is required to transfer a unit of heat current (in watts) through the material or object. It is essential to optimize the building insulation, evaluate the efficiency of electronic devices, and enhance the performance of heat sinks in various applications.
    /// </summary>
    public struct  ThermalResistance
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ThermalResistanceUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public ThermalResistanceUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public ThermalResistance(double value, ThermalResistanceUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of ThermalResistance, which is Second. All conversions go via this value.
        /// </summary>
        public static ThermalResistanceUnit BaseUnit { get; } = ThermalResistanceUnit.KelvinPerWatt;

        /// <summary>
        /// Represents the largest possible value of ThermalResistance.
        /// </summary>
        public static ThermalResistance MaxValue { get; } = new ThermalResistance(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of ThermalResistance.
        /// </summary>
        public static ThermalResistance MinValue { get; } = new ThermalResistance(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static ThermalResistance Zero { get; } = new ThermalResistance(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ThermalResistanceUnit.DegreeCelsiusPerWatt"/>
        /// </summary>
        public double DegreesCelsiusPerWatt => As(ThermalResistanceUnit.DegreeCelsiusPerWatt);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ThermalResistanceUnit.KelvinPerWatt"/>
        /// </summary>
        public double KelvinsPerWatt => As(ThermalResistanceUnit.KelvinPerWatt);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ThermalResistance"/> from <see cref="ThermalResistanceUnit.DegreeCelsiusPerWatt"/>.
        /// </summary>
        public static ThermalResistance FromDegreesCelsiusPerWatt(double degreescelsiusperwatt) => new ThermalResistance(degreescelsiusperwatt, ThermalResistanceUnit.DegreeCelsiusPerWatt);

        /// <summary>
        ///     Creates a <see cref="ThermalResistance"/> from <see cref="ThermalResistanceUnit.KelvinPerWatt"/>.
        /// </summary>
        public static ThermalResistance FromKelvinsPerWatt(double kelvinsperwatt) => new ThermalResistance(kelvinsperwatt, ThermalResistanceUnit.KelvinPerWatt);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ThermalResistanceUnit" /> to <see cref="ThermalResistance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ThermalResistance unit value.</returns>
        public static ThermalResistance From(double value, ThermalResistanceUnit fromUnit)
        {
            return new ThermalResistance(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(ThermalResistanceUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this ThermalResistance to another ThermalResistance with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A ThermalResistance with the specified unit.</returns>
                public ThermalResistance ToUnit(ThermalResistanceUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new ThermalResistance(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        ThermalResistanceUnit.DegreeCelsiusPerWatt => _value,
                        ThermalResistanceUnit.KelvinPerWatt => _value,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(ThermalResistanceUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        ThermalResistanceUnit.DegreeCelsiusPerWatt => baseUnitValue,
                        ThermalResistanceUnit.KelvinPerWatt => baseUnitValue,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

