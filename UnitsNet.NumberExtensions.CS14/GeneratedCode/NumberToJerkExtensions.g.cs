//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToJerk
{
    /// <summary>
    /// A number to Jerk Extensions
    /// </summary>
    public static class NumberToJerkExtensions
    {
        extension<T>(T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Jerk.FromCentimetersPerSecondCubed(double)" />
            public Jerk CentimetersPerSecondCubed
#if NET7_0_OR_GREATER
                => Jerk.FromCentimetersPerSecondCubed(double.CreateChecked(value));
#else
                => Jerk.FromCentimetersPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromDecimetersPerSecondCubed(double)" />
            public Jerk DecimetersPerSecondCubed
#if NET7_0_OR_GREATER
                => Jerk.FromDecimetersPerSecondCubed(double.CreateChecked(value));
#else
                => Jerk.FromDecimetersPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromFeetPerSecondCubed(double)" />
            public Jerk FeetPerSecondCubed
#if NET7_0_OR_GREATER
                => Jerk.FromFeetPerSecondCubed(double.CreateChecked(value));
#else
                => Jerk.FromFeetPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromInchesPerSecondCubed(double)" />
            public Jerk InchesPerSecondCubed
#if NET7_0_OR_GREATER
                => Jerk.FromInchesPerSecondCubed(double.CreateChecked(value));
#else
                => Jerk.FromInchesPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromKilometersPerSecondCubed(double)" />
            public Jerk KilometersPerSecondCubed
#if NET7_0_OR_GREATER
                => Jerk.FromKilometersPerSecondCubed(double.CreateChecked(value));
#else
                => Jerk.FromKilometersPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromMetersPerSecondCubed(double)" />
            public Jerk MetersPerSecondCubed
#if NET7_0_OR_GREATER
                => Jerk.FromMetersPerSecondCubed(double.CreateChecked(value));
#else
                => Jerk.FromMetersPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromMicrometersPerSecondCubed(double)" />
            public Jerk MicrometersPerSecondCubed
#if NET7_0_OR_GREATER
                => Jerk.FromMicrometersPerSecondCubed(double.CreateChecked(value));
#else
                => Jerk.FromMicrometersPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromMillimetersPerSecondCubed(double)" />
            public Jerk MillimetersPerSecondCubed
#if NET7_0_OR_GREATER
                => Jerk.FromMillimetersPerSecondCubed(double.CreateChecked(value));
#else
                => Jerk.FromMillimetersPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromMillistandardGravitiesPerSecond(double)" />
            public Jerk MillistandardGravitiesPerSecond
#if NET7_0_OR_GREATER
                => Jerk.FromMillistandardGravitiesPerSecond(double.CreateChecked(value));
#else
                => Jerk.FromMillistandardGravitiesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromNanometersPerSecondCubed(double)" />
            public Jerk NanometersPerSecondCubed
#if NET7_0_OR_GREATER
                => Jerk.FromNanometersPerSecondCubed(double.CreateChecked(value));
#else
                => Jerk.FromNanometersPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Jerk.FromStandardGravitiesPerSecond(double)" />
            public Jerk StandardGravitiesPerSecond
#if NET7_0_OR_GREATER
                => Jerk.FromStandardGravitiesPerSecond(double.CreateChecked(value));
#else
                => Jerk.FromStandardGravitiesPerSecond(value.ToDouble(null));
#endif

        }
    }
}
