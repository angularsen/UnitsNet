//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToForcePerLength
{
    /// <summary>
    /// A number to ForcePerLength Extensions
    /// </summary>
    public static class NumberToForcePerLengthExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="ForcePerLength.FromCentinewtonsPerCentimeter(QuantityValue)" />
            public ForcePerLength CentinewtonsPerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromCentinewtonsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromCentinewtonsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromCentinewtonsPerMeter(QuantityValue)" />
            public ForcePerLength CentinewtonsPerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromCentinewtonsPerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromCentinewtonsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromCentinewtonsPerMillimeter(QuantityValue)" />
            public ForcePerLength CentinewtonsPerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromCentinewtonsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromCentinewtonsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromDecanewtonsPerCentimeter(QuantityValue)" />
            public ForcePerLength DecanewtonsPerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromDecanewtonsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromDecanewtonsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromDecanewtonsPerMeter(QuantityValue)" />
            public ForcePerLength DecanewtonsPerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromDecanewtonsPerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromDecanewtonsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromDecanewtonsPerMillimeter(QuantityValue)" />
            public ForcePerLength DecanewtonsPerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromDecanewtonsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromDecanewtonsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromDecinewtonsPerCentimeter(QuantityValue)" />
            public ForcePerLength DecinewtonsPerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromDecinewtonsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromDecinewtonsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromDecinewtonsPerMeter(QuantityValue)" />
            public ForcePerLength DecinewtonsPerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromDecinewtonsPerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromDecinewtonsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromDecinewtonsPerMillimeter(QuantityValue)" />
            public ForcePerLength DecinewtonsPerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromDecinewtonsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromDecinewtonsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromKilogramsForcePerCentimeter(QuantityValue)" />
            public ForcePerLength KilogramsForcePerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromKilogramsForcePerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromKilogramsForcePerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromKilogramsForcePerMeter(QuantityValue)" />
            public ForcePerLength KilogramsForcePerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromKilogramsForcePerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromKilogramsForcePerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromKilogramsForcePerMillimeter(QuantityValue)" />
            public ForcePerLength KilogramsForcePerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromKilogramsForcePerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromKilogramsForcePerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromKilonewtonsPerCentimeter(QuantityValue)" />
            public ForcePerLength KilonewtonsPerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromKilonewtonsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromKilonewtonsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromKilonewtonsPerMeter(QuantityValue)" />
            public ForcePerLength KilonewtonsPerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromKilonewtonsPerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromKilonewtonsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromKilonewtonsPerMillimeter(QuantityValue)" />
            public ForcePerLength KilonewtonsPerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromKilonewtonsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromKilonewtonsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromKilopoundsForcePerFoot(QuantityValue)" />
            public ForcePerLength KilopoundsForcePerFoot
#if NET7_0_OR_GREATER
                => ForcePerLength.FromKilopoundsForcePerFoot(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromKilopoundsForcePerFoot(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromKilopoundsForcePerInch(QuantityValue)" />
            public ForcePerLength KilopoundsForcePerInch
#if NET7_0_OR_GREATER
                => ForcePerLength.FromKilopoundsForcePerInch(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromKilopoundsForcePerInch(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromMeganewtonsPerCentimeter(QuantityValue)" />
            public ForcePerLength MeganewtonsPerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromMeganewtonsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromMeganewtonsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromMeganewtonsPerMeter(QuantityValue)" />
            public ForcePerLength MeganewtonsPerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromMeganewtonsPerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromMeganewtonsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromMeganewtonsPerMillimeter(QuantityValue)" />
            public ForcePerLength MeganewtonsPerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromMeganewtonsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromMeganewtonsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromMicronewtonsPerCentimeter(QuantityValue)" />
            public ForcePerLength MicronewtonsPerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromMicronewtonsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromMicronewtonsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromMicronewtonsPerMeter(QuantityValue)" />
            public ForcePerLength MicronewtonsPerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromMicronewtonsPerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromMicronewtonsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromMicronewtonsPerMillimeter(QuantityValue)" />
            public ForcePerLength MicronewtonsPerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromMicronewtonsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromMicronewtonsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromMillinewtonsPerCentimeter(QuantityValue)" />
            public ForcePerLength MillinewtonsPerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromMillinewtonsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromMillinewtonsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromMillinewtonsPerMeter(QuantityValue)" />
            public ForcePerLength MillinewtonsPerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromMillinewtonsPerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromMillinewtonsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromMillinewtonsPerMillimeter(QuantityValue)" />
            public ForcePerLength MillinewtonsPerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromMillinewtonsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromMillinewtonsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromNanonewtonsPerCentimeter(QuantityValue)" />
            public ForcePerLength NanonewtonsPerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromNanonewtonsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromNanonewtonsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromNanonewtonsPerMeter(QuantityValue)" />
            public ForcePerLength NanonewtonsPerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromNanonewtonsPerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromNanonewtonsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromNanonewtonsPerMillimeter(QuantityValue)" />
            public ForcePerLength NanonewtonsPerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromNanonewtonsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromNanonewtonsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromNewtonsPerCentimeter(QuantityValue)" />
            public ForcePerLength NewtonsPerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromNewtonsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromNewtonsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromNewtonsPerMeter(QuantityValue)" />
            public ForcePerLength NewtonsPerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromNewtonsPerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromNewtonsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromNewtonsPerMillimeter(QuantityValue)" />
            public ForcePerLength NewtonsPerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromNewtonsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromNewtonsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromPoundsForcePerFoot(QuantityValue)" />
            public ForcePerLength PoundsForcePerFoot
#if NET7_0_OR_GREATER
                => ForcePerLength.FromPoundsForcePerFoot(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromPoundsForcePerFoot(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromPoundsForcePerInch(QuantityValue)" />
            public ForcePerLength PoundsForcePerInch
#if NET7_0_OR_GREATER
                => ForcePerLength.FromPoundsForcePerInch(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromPoundsForcePerInch(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromPoundsForcePerYard(QuantityValue)" />
            public ForcePerLength PoundsForcePerYard
#if NET7_0_OR_GREATER
                => ForcePerLength.FromPoundsForcePerYard(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromPoundsForcePerYard(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromTonnesForcePerCentimeter(QuantityValue)" />
            public ForcePerLength TonnesForcePerCentimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromTonnesForcePerCentimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromTonnesForcePerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromTonnesForcePerMeter(QuantityValue)" />
            public ForcePerLength TonnesForcePerMeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromTonnesForcePerMeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromTonnesForcePerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForcePerLength.FromTonnesForcePerMillimeter(QuantityValue)" />
            public ForcePerLength TonnesForcePerMillimeter
#if NET7_0_OR_GREATER
                => ForcePerLength.FromTonnesForcePerMillimeter(QuantityValue.CreateChecked(value));
#else
                => ForcePerLength.FromTonnesForcePerMillimeter(value.ToQuantityValue());
#endif

        }
    }
}
