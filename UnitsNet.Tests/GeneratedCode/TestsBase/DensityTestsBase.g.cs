//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Density.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DensityTestsBase : QuantityTestsBase
    {
        protected abstract double CentigramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double CentigramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double CentigramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double FemtogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double FemtogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double FemtogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicYardInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicYardInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerImperialGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerUSGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicMillimeterInOneKilogramPerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double FemtogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double FemtogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double FemtogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicYardTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicYardTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerImperialGallonTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerUSGallonTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicMillimeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(DensityUnit unit)
        {
            return unit switch
            {
                DensityUnit.CentigramPerDeciliter => (CentigramsPerDeciliterInOneKilogramPerCubicMeter, CentigramsPerDeciliterTolerance),
                DensityUnit.CentigramPerLiter => (CentigramsPerLiterInOneKilogramPerCubicMeter, CentigramsPerLiterTolerance),
                DensityUnit.CentigramPerMilliliter => (CentigramsPerMilliliterInOneKilogramPerCubicMeter, CentigramsPerMilliliterTolerance),
                DensityUnit.DecigramPerDeciliter => (DecigramsPerDeciliterInOneKilogramPerCubicMeter, DecigramsPerDeciliterTolerance),
                DensityUnit.DecigramPerLiter => (DecigramsPerLiterInOneKilogramPerCubicMeter, DecigramsPerLiterTolerance),
                DensityUnit.DecigramPerMilliliter => (DecigramsPerMilliliterInOneKilogramPerCubicMeter, DecigramsPerMilliliterTolerance),
                DensityUnit.FemtogramPerDeciliter => (FemtogramsPerDeciliterInOneKilogramPerCubicMeter, FemtogramsPerDeciliterTolerance),
                DensityUnit.FemtogramPerLiter => (FemtogramsPerLiterInOneKilogramPerCubicMeter, FemtogramsPerLiterTolerance),
                DensityUnit.FemtogramPerMilliliter => (FemtogramsPerMilliliterInOneKilogramPerCubicMeter, FemtogramsPerMilliliterTolerance),
                DensityUnit.GramPerCubicCentimeter => (GramsPerCubicCentimeterInOneKilogramPerCubicMeter, GramsPerCubicCentimeterTolerance),
                DensityUnit.GramPerCubicFoot => (GramsPerCubicFootInOneKilogramPerCubicMeter, GramsPerCubicFootTolerance),
                DensityUnit.GramPerCubicInch => (GramsPerCubicInchInOneKilogramPerCubicMeter, GramsPerCubicInchTolerance),
                DensityUnit.GramPerCubicMeter => (GramsPerCubicMeterInOneKilogramPerCubicMeter, GramsPerCubicMeterTolerance),
                DensityUnit.GramPerCubicMillimeter => (GramsPerCubicMillimeterInOneKilogramPerCubicMeter, GramsPerCubicMillimeterTolerance),
                DensityUnit.GramPerDeciliter => (GramsPerDeciliterInOneKilogramPerCubicMeter, GramsPerDeciliterTolerance),
                DensityUnit.GramPerLiter => (GramsPerLiterInOneKilogramPerCubicMeter, GramsPerLiterTolerance),
                DensityUnit.GramPerMilliliter => (GramsPerMilliliterInOneKilogramPerCubicMeter, GramsPerMilliliterTolerance),
                DensityUnit.KilogramPerCubicCentimeter => (KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, KilogramsPerCubicCentimeterTolerance),
                DensityUnit.KilogramPerCubicMeter => (KilogramsPerCubicMeterInOneKilogramPerCubicMeter, KilogramsPerCubicMeterTolerance),
                DensityUnit.KilogramPerCubicMillimeter => (KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, KilogramsPerCubicMillimeterTolerance),
                DensityUnit.KilogramPerLiter => (KilogramsPerLiterInOneKilogramPerCubicMeter, KilogramsPerLiterTolerance),
                DensityUnit.KilopoundPerCubicFoot => (KilopoundsPerCubicFootInOneKilogramPerCubicMeter, KilopoundsPerCubicFootTolerance),
                DensityUnit.KilopoundPerCubicInch => (KilopoundsPerCubicInchInOneKilogramPerCubicMeter, KilopoundsPerCubicInchTolerance),
                DensityUnit.KilopoundPerCubicYard => (KilopoundsPerCubicYardInOneKilogramPerCubicMeter, KilopoundsPerCubicYardTolerance),
                DensityUnit.MicrogramPerCubicMeter => (MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, MicrogramsPerCubicMeterTolerance),
                DensityUnit.MicrogramPerDeciliter => (MicrogramsPerDeciliterInOneKilogramPerCubicMeter, MicrogramsPerDeciliterTolerance),
                DensityUnit.MicrogramPerLiter => (MicrogramsPerLiterInOneKilogramPerCubicMeter, MicrogramsPerLiterTolerance),
                DensityUnit.MicrogramPerMilliliter => (MicrogramsPerMilliliterInOneKilogramPerCubicMeter, MicrogramsPerMilliliterTolerance),
                DensityUnit.MilligramPerCubicMeter => (MilligramsPerCubicMeterInOneKilogramPerCubicMeter, MilligramsPerCubicMeterTolerance),
                DensityUnit.MilligramPerDeciliter => (MilligramsPerDeciliterInOneKilogramPerCubicMeter, MilligramsPerDeciliterTolerance),
                DensityUnit.MilligramPerLiter => (MilligramsPerLiterInOneKilogramPerCubicMeter, MilligramsPerLiterTolerance),
                DensityUnit.MilligramPerMilliliter => (MilligramsPerMilliliterInOneKilogramPerCubicMeter, MilligramsPerMilliliterTolerance),
                DensityUnit.NanogramPerDeciliter => (NanogramsPerDeciliterInOneKilogramPerCubicMeter, NanogramsPerDeciliterTolerance),
                DensityUnit.NanogramPerLiter => (NanogramsPerLiterInOneKilogramPerCubicMeter, NanogramsPerLiterTolerance),
                DensityUnit.NanogramPerMilliliter => (NanogramsPerMilliliterInOneKilogramPerCubicMeter, NanogramsPerMilliliterTolerance),
                DensityUnit.PicogramPerDeciliter => (PicogramsPerDeciliterInOneKilogramPerCubicMeter, PicogramsPerDeciliterTolerance),
                DensityUnit.PicogramPerLiter => (PicogramsPerLiterInOneKilogramPerCubicMeter, PicogramsPerLiterTolerance),
                DensityUnit.PicogramPerMilliliter => (PicogramsPerMilliliterInOneKilogramPerCubicMeter, PicogramsPerMilliliterTolerance),
                DensityUnit.PoundPerCubicCentimeter => (PoundsPerCubicCentimeterInOneKilogramPerCubicMeter, PoundsPerCubicCentimeterTolerance),
                DensityUnit.PoundPerCubicFoot => (PoundsPerCubicFootInOneKilogramPerCubicMeter, PoundsPerCubicFootTolerance),
                DensityUnit.PoundPerCubicInch => (PoundsPerCubicInchInOneKilogramPerCubicMeter, PoundsPerCubicInchTolerance),
                DensityUnit.PoundPerCubicMeter => (PoundsPerCubicMeterInOneKilogramPerCubicMeter, PoundsPerCubicMeterTolerance),
                DensityUnit.PoundPerCubicMillimeter => (PoundsPerCubicMillimeterInOneKilogramPerCubicMeter, PoundsPerCubicMillimeterTolerance),
                DensityUnit.PoundPerCubicYard => (PoundsPerCubicYardInOneKilogramPerCubicMeter, PoundsPerCubicYardTolerance),
                DensityUnit.PoundPerImperialGallon => (PoundsPerImperialGallonInOneKilogramPerCubicMeter, PoundsPerImperialGallonTolerance),
                DensityUnit.PoundPerUSGallon => (PoundsPerUSGallonInOneKilogramPerCubicMeter, PoundsPerUSGallonTolerance),
                DensityUnit.SlugPerCubicCentimeter => (SlugsPerCubicCentimeterInOneKilogramPerCubicMeter, SlugsPerCubicCentimeterTolerance),
                DensityUnit.SlugPerCubicFoot => (SlugsPerCubicFootInOneKilogramPerCubicMeter, SlugsPerCubicFootTolerance),
                DensityUnit.SlugPerCubicInch => (SlugsPerCubicInchInOneKilogramPerCubicMeter, SlugsPerCubicInchTolerance),
                DensityUnit.SlugPerCubicMeter => (SlugsPerCubicMeterInOneKilogramPerCubicMeter, SlugsPerCubicMeterTolerance),
                DensityUnit.SlugPerCubicMillimeter => (SlugsPerCubicMillimeterInOneKilogramPerCubicMeter, SlugsPerCubicMillimeterTolerance),
                DensityUnit.TonnePerCubicCentimeter => (TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, TonnesPerCubicCentimeterTolerance),
                DensityUnit.TonnePerCubicFoot => (TonnesPerCubicFootInOneKilogramPerCubicMeter, TonnesPerCubicFootTolerance),
                DensityUnit.TonnePerCubicInch => (TonnesPerCubicInchInOneKilogramPerCubicMeter, TonnesPerCubicInchTolerance),
                DensityUnit.TonnePerCubicMeter => (TonnesPerCubicMeterInOneKilogramPerCubicMeter, TonnesPerCubicMeterTolerance),
                DensityUnit.TonnePerCubicMillimeter => (TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, TonnesPerCubicMillimeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { DensityUnit.CentigramPerDeciliter },
            new object[] { DensityUnit.CentigramPerLiter },
            new object[] { DensityUnit.CentigramPerMilliliter },
            new object[] { DensityUnit.DecigramPerDeciliter },
            new object[] { DensityUnit.DecigramPerLiter },
            new object[] { DensityUnit.DecigramPerMilliliter },
            new object[] { DensityUnit.FemtogramPerDeciliter },
            new object[] { DensityUnit.FemtogramPerLiter },
            new object[] { DensityUnit.FemtogramPerMilliliter },
            new object[] { DensityUnit.GramPerCubicCentimeter },
            new object[] { DensityUnit.GramPerCubicFoot },
            new object[] { DensityUnit.GramPerCubicInch },
            new object[] { DensityUnit.GramPerCubicMeter },
            new object[] { DensityUnit.GramPerCubicMillimeter },
            new object[] { DensityUnit.GramPerDeciliter },
            new object[] { DensityUnit.GramPerLiter },
            new object[] { DensityUnit.GramPerMilliliter },
            new object[] { DensityUnit.KilogramPerCubicCentimeter },
            new object[] { DensityUnit.KilogramPerCubicMeter },
            new object[] { DensityUnit.KilogramPerCubicMillimeter },
            new object[] { DensityUnit.KilogramPerLiter },
            new object[] { DensityUnit.KilopoundPerCubicFoot },
            new object[] { DensityUnit.KilopoundPerCubicInch },
            new object[] { DensityUnit.KilopoundPerCubicYard },
            new object[] { DensityUnit.MicrogramPerCubicMeter },
            new object[] { DensityUnit.MicrogramPerDeciliter },
            new object[] { DensityUnit.MicrogramPerLiter },
            new object[] { DensityUnit.MicrogramPerMilliliter },
            new object[] { DensityUnit.MilligramPerCubicMeter },
            new object[] { DensityUnit.MilligramPerDeciliter },
            new object[] { DensityUnit.MilligramPerLiter },
            new object[] { DensityUnit.MilligramPerMilliliter },
            new object[] { DensityUnit.NanogramPerDeciliter },
            new object[] { DensityUnit.NanogramPerLiter },
            new object[] { DensityUnit.NanogramPerMilliliter },
            new object[] { DensityUnit.PicogramPerDeciliter },
            new object[] { DensityUnit.PicogramPerLiter },
            new object[] { DensityUnit.PicogramPerMilliliter },
            new object[] { DensityUnit.PoundPerCubicCentimeter },
            new object[] { DensityUnit.PoundPerCubicFoot },
            new object[] { DensityUnit.PoundPerCubicInch },
            new object[] { DensityUnit.PoundPerCubicMeter },
            new object[] { DensityUnit.PoundPerCubicMillimeter },
            new object[] { DensityUnit.PoundPerCubicYard },
            new object[] { DensityUnit.PoundPerImperialGallon },
            new object[] { DensityUnit.PoundPerUSGallon },
            new object[] { DensityUnit.SlugPerCubicCentimeter },
            new object[] { DensityUnit.SlugPerCubicFoot },
            new object[] { DensityUnit.SlugPerCubicInch },
            new object[] { DensityUnit.SlugPerCubicMeter },
            new object[] { DensityUnit.SlugPerCubicMillimeter },
            new object[] { DensityUnit.TonnePerCubicCentimeter },
            new object[] { DensityUnit.TonnePerCubicFoot },
            new object[] { DensityUnit.TonnePerCubicInch },
            new object[] { DensityUnit.TonnePerCubicMeter },
            new object[] { DensityUnit.TonnePerCubicMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Density();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(DensityUnit.KilogramPerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Density(double.PositiveInfinity, DensityUnit.KilogramPerCubicMeter));
            var exception2 = Record.Exception(() => new Density(double.NegativeInfinity, DensityUnit.KilogramPerCubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Density(double.NaN, DensityUnit.KilogramPerCubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Density(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Density(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Density(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Density_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Density(1, DensityUnit.KilogramPerCubicMeter);

            QuantityInfo<DensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Density.Zero, quantityInfo.Zero);
            Assert.Equal("Density", quantityInfo.Name);

            var units = Enum.GetValues<DensityUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void KilogramPerCubicMeterToDensityUnits()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(CentigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerDeciliter, CentigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(CentigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerLiter, CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerMilliliter, CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerDeciliter, DecigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerLiter, DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerMilliliter, DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.FemtogramsPerDeciliter, FemtogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.FemtogramsPerLiter, FemtogramsPerLiterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.FemtogramsPerMilliliter, FemtogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicCentimeter, GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicFoot, GramsPerCubicFootTolerance);
            AssertEx.EqualTolerance(GramsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicInch, GramsPerCubicInchTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicMillimeter, GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(GramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerDeciliter, GramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(GramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerLiter, GramsPerLiterTolerance);
            AssertEx.EqualTolerance(GramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerMilliliter, GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicCentimeter, KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicMillimeter, KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerLiter, KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicFoot, KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicInch, KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicYardInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicYard, KilopoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerDeciliter, MicrogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerLiter, MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerMilliliter, MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerDeciliter, MilligramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerLiter, MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerMilliliter, MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerDeciliter, NanogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerLiter, NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerMilliliter, NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerDeciliter, PicogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerLiter, PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerMilliliter, PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicCentimeter, PoundsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicFoot, PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicInch, PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicMeter, PoundsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicMillimeter, PoundsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicYardInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicYard, PoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(PoundsPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerImperialGallon, PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(PoundsPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerUSGallon, PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicCentimeter, SlugsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicFoot, SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicInch, SlugsPerCubicInchTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicMeter, SlugsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicMillimeter, SlugsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicCentimeter, TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicFoot, TonnesPerCubicFootTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicInch, TonnesPerCubicInchTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicMeter, TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicMillimeter, TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Density.From(1, DensityUnit.CentigramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity00.CentigramsPerDeciliter, CentigramsPerDeciliterTolerance);
            Assert.Equal(DensityUnit.CentigramPerDeciliter, quantity00.Unit);

            var quantity01 = Density.From(1, DensityUnit.CentigramPerLiter);
            AssertEx.EqualTolerance(1, quantity01.CentigramsPerLiter, CentigramsPerLiterTolerance);
            Assert.Equal(DensityUnit.CentigramPerLiter, quantity01.Unit);

            var quantity02 = Density.From(1, DensityUnit.CentigramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity02.CentigramsPerMilliliter, CentigramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.CentigramPerMilliliter, quantity02.Unit);

            var quantity03 = Density.From(1, DensityUnit.DecigramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity03.DecigramsPerDeciliter, DecigramsPerDeciliterTolerance);
            Assert.Equal(DensityUnit.DecigramPerDeciliter, quantity03.Unit);

            var quantity04 = Density.From(1, DensityUnit.DecigramPerLiter);
            AssertEx.EqualTolerance(1, quantity04.DecigramsPerLiter, DecigramsPerLiterTolerance);
            Assert.Equal(DensityUnit.DecigramPerLiter, quantity04.Unit);

            var quantity05 = Density.From(1, DensityUnit.DecigramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity05.DecigramsPerMilliliter, DecigramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.DecigramPerMilliliter, quantity05.Unit);

            var quantity06 = Density.From(1, DensityUnit.FemtogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity06.FemtogramsPerDeciliter, FemtogramsPerDeciliterTolerance);
            Assert.Equal(DensityUnit.FemtogramPerDeciliter, quantity06.Unit);

            var quantity07 = Density.From(1, DensityUnit.FemtogramPerLiter);
            AssertEx.EqualTolerance(1, quantity07.FemtogramsPerLiter, FemtogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.FemtogramPerLiter, quantity07.Unit);

            var quantity08 = Density.From(1, DensityUnit.FemtogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity08.FemtogramsPerMilliliter, FemtogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.FemtogramPerMilliliter, quantity08.Unit);

            var quantity09 = Density.From(1, DensityUnit.GramPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity09.GramsPerCubicCentimeter, GramsPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.GramPerCubicCentimeter, quantity09.Unit);

            var quantity10 = Density.From(1, DensityUnit.GramPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity10.GramsPerCubicFoot, GramsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.GramPerCubicFoot, quantity10.Unit);

            var quantity11 = Density.From(1, DensityUnit.GramPerCubicInch);
            AssertEx.EqualTolerance(1, quantity11.GramsPerCubicInch, GramsPerCubicInchTolerance);
            Assert.Equal(DensityUnit.GramPerCubicInch, quantity11.Unit);

            var quantity12 = Density.From(1, DensityUnit.GramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity12.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.GramPerCubicMeter, quantity12.Unit);

            var quantity13 = Density.From(1, DensityUnit.GramPerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity13.GramsPerCubicMillimeter, GramsPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.GramPerCubicMillimeter, quantity13.Unit);

            var quantity14 = Density.From(1, DensityUnit.GramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity14.GramsPerDeciliter, GramsPerDeciliterTolerance);
            Assert.Equal(DensityUnit.GramPerDeciliter, quantity14.Unit);

            var quantity15 = Density.From(1, DensityUnit.GramPerLiter);
            AssertEx.EqualTolerance(1, quantity15.GramsPerLiter, GramsPerLiterTolerance);
            Assert.Equal(DensityUnit.GramPerLiter, quantity15.Unit);

            var quantity16 = Density.From(1, DensityUnit.GramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity16.GramsPerMilliliter, GramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.GramPerMilliliter, quantity16.Unit);

            var quantity17 = Density.From(1, DensityUnit.KilogramPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity17.KilogramsPerCubicCentimeter, KilogramsPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicCentimeter, quantity17.Unit);

            var quantity18 = Density.From(1, DensityUnit.KilogramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity18.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicMeter, quantity18.Unit);

            var quantity19 = Density.From(1, DensityUnit.KilogramPerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity19.KilogramsPerCubicMillimeter, KilogramsPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.KilogramPerCubicMillimeter, quantity19.Unit);

            var quantity20 = Density.From(1, DensityUnit.KilogramPerLiter);
            AssertEx.EqualTolerance(1, quantity20.KilogramsPerLiter, KilogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.KilogramPerLiter, quantity20.Unit);

            var quantity21 = Density.From(1, DensityUnit.KilopoundPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity21.KilopoundsPerCubicFoot, KilopoundsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.KilopoundPerCubicFoot, quantity21.Unit);

            var quantity22 = Density.From(1, DensityUnit.KilopoundPerCubicInch);
            AssertEx.EqualTolerance(1, quantity22.KilopoundsPerCubicInch, KilopoundsPerCubicInchTolerance);
            Assert.Equal(DensityUnit.KilopoundPerCubicInch, quantity22.Unit);

            var quantity23 = Density.From(1, DensityUnit.KilopoundPerCubicYard);
            AssertEx.EqualTolerance(1, quantity23.KilopoundsPerCubicYard, KilopoundsPerCubicYardTolerance);
            Assert.Equal(DensityUnit.KilopoundPerCubicYard, quantity23.Unit);

            var quantity24 = Density.From(1, DensityUnit.MicrogramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity24.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerCubicMeter, quantity24.Unit);

            var quantity25 = Density.From(1, DensityUnit.MicrogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity25.MicrogramsPerDeciliter, MicrogramsPerDeciliterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerDeciliter, quantity25.Unit);

            var quantity26 = Density.From(1, DensityUnit.MicrogramPerLiter);
            AssertEx.EqualTolerance(1, quantity26.MicrogramsPerLiter, MicrogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerLiter, quantity26.Unit);

            var quantity27 = Density.From(1, DensityUnit.MicrogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity27.MicrogramsPerMilliliter, MicrogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.MicrogramPerMilliliter, quantity27.Unit);

            var quantity28 = Density.From(1, DensityUnit.MilligramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity28.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.MilligramPerCubicMeter, quantity28.Unit);

            var quantity29 = Density.From(1, DensityUnit.MilligramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity29.MilligramsPerDeciliter, MilligramsPerDeciliterTolerance);
            Assert.Equal(DensityUnit.MilligramPerDeciliter, quantity29.Unit);

            var quantity30 = Density.From(1, DensityUnit.MilligramPerLiter);
            AssertEx.EqualTolerance(1, quantity30.MilligramsPerLiter, MilligramsPerLiterTolerance);
            Assert.Equal(DensityUnit.MilligramPerLiter, quantity30.Unit);

            var quantity31 = Density.From(1, DensityUnit.MilligramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity31.MilligramsPerMilliliter, MilligramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.MilligramPerMilliliter, quantity31.Unit);

            var quantity32 = Density.From(1, DensityUnit.NanogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity32.NanogramsPerDeciliter, NanogramsPerDeciliterTolerance);
            Assert.Equal(DensityUnit.NanogramPerDeciliter, quantity32.Unit);

            var quantity33 = Density.From(1, DensityUnit.NanogramPerLiter);
            AssertEx.EqualTolerance(1, quantity33.NanogramsPerLiter, NanogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.NanogramPerLiter, quantity33.Unit);

            var quantity34 = Density.From(1, DensityUnit.NanogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity34.NanogramsPerMilliliter, NanogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.NanogramPerMilliliter, quantity34.Unit);

            var quantity35 = Density.From(1, DensityUnit.PicogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity35.PicogramsPerDeciliter, PicogramsPerDeciliterTolerance);
            Assert.Equal(DensityUnit.PicogramPerDeciliter, quantity35.Unit);

            var quantity36 = Density.From(1, DensityUnit.PicogramPerLiter);
            AssertEx.EqualTolerance(1, quantity36.PicogramsPerLiter, PicogramsPerLiterTolerance);
            Assert.Equal(DensityUnit.PicogramPerLiter, quantity36.Unit);

            var quantity37 = Density.From(1, DensityUnit.PicogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity37.PicogramsPerMilliliter, PicogramsPerMilliliterTolerance);
            Assert.Equal(DensityUnit.PicogramPerMilliliter, quantity37.Unit);

            var quantity38 = Density.From(1, DensityUnit.PoundPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity38.PoundsPerCubicCentimeter, PoundsPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicCentimeter, quantity38.Unit);

            var quantity39 = Density.From(1, DensityUnit.PoundPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity39.PoundsPerCubicFoot, PoundsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicFoot, quantity39.Unit);

            var quantity40 = Density.From(1, DensityUnit.PoundPerCubicInch);
            AssertEx.EqualTolerance(1, quantity40.PoundsPerCubicInch, PoundsPerCubicInchTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicInch, quantity40.Unit);

            var quantity41 = Density.From(1, DensityUnit.PoundPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity41.PoundsPerCubicMeter, PoundsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicMeter, quantity41.Unit);

            var quantity42 = Density.From(1, DensityUnit.PoundPerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity42.PoundsPerCubicMillimeter, PoundsPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicMillimeter, quantity42.Unit);

            var quantity43 = Density.From(1, DensityUnit.PoundPerCubicYard);
            AssertEx.EqualTolerance(1, quantity43.PoundsPerCubicYard, PoundsPerCubicYardTolerance);
            Assert.Equal(DensityUnit.PoundPerCubicYard, quantity43.Unit);

            var quantity44 = Density.From(1, DensityUnit.PoundPerImperialGallon);
            AssertEx.EqualTolerance(1, quantity44.PoundsPerImperialGallon, PoundsPerImperialGallonTolerance);
            Assert.Equal(DensityUnit.PoundPerImperialGallon, quantity44.Unit);

            var quantity45 = Density.From(1, DensityUnit.PoundPerUSGallon);
            AssertEx.EqualTolerance(1, quantity45.PoundsPerUSGallon, PoundsPerUSGallonTolerance);
            Assert.Equal(DensityUnit.PoundPerUSGallon, quantity45.Unit);

            var quantity46 = Density.From(1, DensityUnit.SlugPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity46.SlugsPerCubicCentimeter, SlugsPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.SlugPerCubicCentimeter, quantity46.Unit);

            var quantity47 = Density.From(1, DensityUnit.SlugPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity47.SlugsPerCubicFoot, SlugsPerCubicFootTolerance);
            Assert.Equal(DensityUnit.SlugPerCubicFoot, quantity47.Unit);

            var quantity48 = Density.From(1, DensityUnit.SlugPerCubicInch);
            AssertEx.EqualTolerance(1, quantity48.SlugsPerCubicInch, SlugsPerCubicInchTolerance);
            Assert.Equal(DensityUnit.SlugPerCubicInch, quantity48.Unit);

            var quantity49 = Density.From(1, DensityUnit.SlugPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity49.SlugsPerCubicMeter, SlugsPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.SlugPerCubicMeter, quantity49.Unit);

            var quantity50 = Density.From(1, DensityUnit.SlugPerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity50.SlugsPerCubicMillimeter, SlugsPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.SlugPerCubicMillimeter, quantity50.Unit);

            var quantity51 = Density.From(1, DensityUnit.TonnePerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity51.TonnesPerCubicCentimeter, TonnesPerCubicCentimeterTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicCentimeter, quantity51.Unit);

            var quantity52 = Density.From(1, DensityUnit.TonnePerCubicFoot);
            AssertEx.EqualTolerance(1, quantity52.TonnesPerCubicFoot, TonnesPerCubicFootTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicFoot, quantity52.Unit);

            var quantity53 = Density.From(1, DensityUnit.TonnePerCubicInch);
            AssertEx.EqualTolerance(1, quantity53.TonnesPerCubicInch, TonnesPerCubicInchTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicInch, quantity53.Unit);

            var quantity54 = Density.From(1, DensityUnit.TonnePerCubicMeter);
            AssertEx.EqualTolerance(1, quantity54.TonnesPerCubicMeter, TonnesPerCubicMeterTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicMeter, quantity54.Unit);

            var quantity55 = Density.From(1, DensityUnit.TonnePerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity55.TonnesPerCubicMillimeter, TonnesPerCubicMillimeterTolerance);
            Assert.Equal(DensityUnit.TonnePerCubicMillimeter, quantity55.Unit);

        }

        [Fact]
        public void FromKilogramsPerCubicMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Density.FromKilogramsPerCubicMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Density.FromKilogramsPerCubicMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromKilogramsPerCubicMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Density.FromKilogramsPerCubicMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(CentigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.CentigramPerDeciliter), CentigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(CentigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.CentigramPerLiter), CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.CentigramPerMilliliter), CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.DecigramPerDeciliter), DecigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.DecigramPerLiter), DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.DecigramPerMilliliter), DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.FemtogramPerDeciliter), FemtogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.FemtogramPerLiter), FemtogramsPerLiterTolerance);
            AssertEx.EqualTolerance(FemtogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.FemtogramPerMilliliter), FemtogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicCentimeter), GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicFoot), GramsPerCubicFootTolerance);
            AssertEx.EqualTolerance(GramsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicInch), GramsPerCubicInchTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicMeter), GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerCubicMillimeter), GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(GramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerDeciliter), GramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(GramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerLiter), GramsPerLiterTolerance);
            AssertEx.EqualTolerance(GramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.GramPerMilliliter), GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicCentimeter), KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicMeter), KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerCubicMillimeter), KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilogramPerLiter), KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilopoundPerCubicFoot), KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilopoundPerCubicInch), KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicYardInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.KilopoundPerCubicYard), KilopoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerCubicMeter), MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerDeciliter), MicrogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerLiter), MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MicrogramPerMilliliter), MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerCubicMeter), MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerDeciliter), MilligramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerLiter), MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.MilligramPerMilliliter), MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.NanogramPerDeciliter), NanogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.NanogramPerLiter), NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.NanogramPerMilliliter), NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PicogramPerDeciliter), PicogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PicogramPerLiter), PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PicogramPerMilliliter), PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicCentimeter), PoundsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicFoot), PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicInch), PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicMeter), PoundsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicMillimeter), PoundsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicYardInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerCubicYard), PoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(PoundsPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerImperialGallon), PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(PoundsPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.PoundPerUSGallon), PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicCentimeter), SlugsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicFoot), SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicInch), SlugsPerCubicInchTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicMeter), SlugsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.SlugPerCubicMillimeter), SlugsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicCentimeter), TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicFoot), TonnesPerCubicFootTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicInch), TonnesPerCubicInchTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicMeter), TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(DensityUnit.TonnePerCubicMillimeter), TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Density.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Density(value: 1, unit: Density.BaseUnit);
            var expectedValue = quantity.As(Density.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Density(value: 1, unit: Density.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Density(value: 1, unit: Density.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Density(value: 1, unit: Density.BaseUnit);
            var expectedUnit = Density.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Density quantityToConvert = quantity;

                Density convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<DensityUnit> quantityToConvert = quantity;

                IQuantity<DensityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Density(value: 1, unit: Density.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<DensityUnit> quantity = new Density(value: 1, unit: Density.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Density(value: 1, unit: Density.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Density(value: 1, unit: Density.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<DensityUnit> quantity = new Density(value: 1, unit: Density.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Density(value: 1, unit: Density.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cg/dl", DensityUnit.CentigramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 cg/l", DensityUnit.CentigramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 cg/ml", DensityUnit.CentigramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 dg/dl", DensityUnit.DecigramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 dg/l", DensityUnit.DecigramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 dg/ml", DensityUnit.DecigramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 fg/dl", DensityUnit.FemtogramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 fg/l", DensityUnit.FemtogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 fg/ml", DensityUnit.FemtogramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 g/cm³", DensityUnit.GramPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 g/ft³", DensityUnit.GramPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 g/in³", DensityUnit.GramPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 g/m³", DensityUnit.GramPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 g/mm³", DensityUnit.GramPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 g/dl", DensityUnit.GramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 g/l", DensityUnit.GramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 g/ml", DensityUnit.GramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 kg/cm³", DensityUnit.KilogramPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kg/m³", DensityUnit.KilogramPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 kg/mm³", DensityUnit.KilogramPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kg/l", DensityUnit.KilogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 kip/ft³", DensityUnit.KilopoundPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 kip/in³", DensityUnit.KilopoundPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 kip/yd³", DensityUnit.KilopoundPerCubicYard, 4.2)]
        [InlineData("en-US", "4.2 µg/m³", DensityUnit.MicrogramPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 µg/dl", DensityUnit.MicrogramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 µg/l", DensityUnit.MicrogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 µg/ml", DensityUnit.MicrogramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 mg/m³", DensityUnit.MilligramPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mg/dl", DensityUnit.MilligramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 mg/l", DensityUnit.MilligramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 mg/ml", DensityUnit.MilligramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 ng/dl", DensityUnit.NanogramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 ng/l", DensityUnit.NanogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 ng/ml", DensityUnit.NanogramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 pg/dl", DensityUnit.PicogramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 pg/l", DensityUnit.PicogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 pg/ml", DensityUnit.PicogramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 lb/cm³", DensityUnit.PoundPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 lbm/cm³", DensityUnit.PoundPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 lb/ft³", DensityUnit.PoundPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 lbm/ft³", DensityUnit.PoundPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 lb/in³", DensityUnit.PoundPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 lbm/in³", DensityUnit.PoundPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 lb/m³", DensityUnit.PoundPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 lbm/m³", DensityUnit.PoundPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 lb/mm³", DensityUnit.PoundPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lbm/mm³", DensityUnit.PoundPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lb/yd³", DensityUnit.PoundPerCubicYard, 4.2)]
        [InlineData("en-US", "4.2 lbm/yd³", DensityUnit.PoundPerCubicYard, 4.2)]
        [InlineData("en-US", "4.2 ppg (imp.)", DensityUnit.PoundPerImperialGallon, 4.2)]
        [InlineData("en-US", "4.2 ppg (U.S.)", DensityUnit.PoundPerUSGallon, 4.2)]
        [InlineData("en-US", "4.2 slug/cm³", DensityUnit.SlugPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 slug/ft³", DensityUnit.SlugPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 slug/in³", DensityUnit.SlugPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 slug/m³", DensityUnit.SlugPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 slug/mm³", DensityUnit.SlugPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 t/cm³", DensityUnit.TonnePerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 t/ft³", DensityUnit.TonnePerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 t/in³", DensityUnit.TonnePerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 t/m³", DensityUnit.TonnePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 t/mm³", DensityUnit.TonnePerCubicMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 г/м³", DensityUnit.GramPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 кг/м³", DensityUnit.KilogramPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкг/м³", DensityUnit.MicrogramPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мг/м³", DensityUnit.MilligramPerCubicMeter, 4.2)]
        public void Parse(string culture, string quantityString, DensityUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Density.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 cg/dl", DensityUnit.CentigramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 cg/l", DensityUnit.CentigramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 cg/ml", DensityUnit.CentigramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 dg/dl", DensityUnit.DecigramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 dg/l", DensityUnit.DecigramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 dg/ml", DensityUnit.DecigramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 fg/dl", DensityUnit.FemtogramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 fg/l", DensityUnit.FemtogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 fg/ml", DensityUnit.FemtogramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 g/cm³", DensityUnit.GramPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 g/ft³", DensityUnit.GramPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 g/in³", DensityUnit.GramPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 g/m³", DensityUnit.GramPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 g/mm³", DensityUnit.GramPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 g/dl", DensityUnit.GramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 g/l", DensityUnit.GramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 g/ml", DensityUnit.GramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 kg/cm³", DensityUnit.KilogramPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kg/m³", DensityUnit.KilogramPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 kg/mm³", DensityUnit.KilogramPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kg/l", DensityUnit.KilogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 kip/ft³", DensityUnit.KilopoundPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 kip/in³", DensityUnit.KilopoundPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 kip/yd³", DensityUnit.KilopoundPerCubicYard, 4.2)]
        [InlineData("en-US", "4.2 µg/m³", DensityUnit.MicrogramPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 µg/dl", DensityUnit.MicrogramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 µg/l", DensityUnit.MicrogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 µg/ml", DensityUnit.MicrogramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 mg/m³", DensityUnit.MilligramPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mg/dl", DensityUnit.MilligramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 mg/l", DensityUnit.MilligramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 mg/ml", DensityUnit.MilligramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 ng/dl", DensityUnit.NanogramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 ng/l", DensityUnit.NanogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 ng/ml", DensityUnit.NanogramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 pg/dl", DensityUnit.PicogramPerDeciliter, 4.2)]
        [InlineData("en-US", "4.2 pg/l", DensityUnit.PicogramPerLiter, 4.2)]
        [InlineData("en-US", "4.2 pg/ml", DensityUnit.PicogramPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 lb/cm³", DensityUnit.PoundPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 lbm/cm³", DensityUnit.PoundPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 lb/ft³", DensityUnit.PoundPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 lbm/ft³", DensityUnit.PoundPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 lb/in³", DensityUnit.PoundPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 lbm/in³", DensityUnit.PoundPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 lb/m³", DensityUnit.PoundPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 lbm/m³", DensityUnit.PoundPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 lb/mm³", DensityUnit.PoundPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lbm/mm³", DensityUnit.PoundPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lb/yd³", DensityUnit.PoundPerCubicYard, 4.2)]
        [InlineData("en-US", "4.2 lbm/yd³", DensityUnit.PoundPerCubicYard, 4.2)]
        [InlineData("en-US", "4.2 ppg (imp.)", DensityUnit.PoundPerImperialGallon, 4.2)]
        [InlineData("en-US", "4.2 ppg (U.S.)", DensityUnit.PoundPerUSGallon, 4.2)]
        [InlineData("en-US", "4.2 slug/cm³", DensityUnit.SlugPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 slug/ft³", DensityUnit.SlugPerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 slug/in³", DensityUnit.SlugPerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 slug/m³", DensityUnit.SlugPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 slug/mm³", DensityUnit.SlugPerCubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 t/cm³", DensityUnit.TonnePerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 t/ft³", DensityUnit.TonnePerCubicFoot, 4.2)]
        [InlineData("en-US", "4.2 t/in³", DensityUnit.TonnePerCubicInch, 4.2)]
        [InlineData("en-US", "4.2 t/m³", DensityUnit.TonnePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 t/mm³", DensityUnit.TonnePerCubicMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 г/м³", DensityUnit.GramPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 кг/м³", DensityUnit.KilogramPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкг/м³", DensityUnit.MicrogramPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мг/м³", DensityUnit.MilligramPerCubicMeter, 4.2)]
        public void TryParse(string culture, string quantityString, DensityUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Density.TryParse(quantityString, out Density parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("cg/dl", DensityUnit.CentigramPerDeciliter)]
        [InlineData("cg/l", DensityUnit.CentigramPerLiter)]
        [InlineData("cg/ml", DensityUnit.CentigramPerMilliliter)]
        [InlineData("dg/dl", DensityUnit.DecigramPerDeciliter)]
        [InlineData("dg/l", DensityUnit.DecigramPerLiter)]
        [InlineData("dg/ml", DensityUnit.DecigramPerMilliliter)]
        [InlineData("fg/dl", DensityUnit.FemtogramPerDeciliter)]
        [InlineData("fg/l", DensityUnit.FemtogramPerLiter)]
        [InlineData("fg/ml", DensityUnit.FemtogramPerMilliliter)]
        [InlineData("g/cm³", DensityUnit.GramPerCubicCentimeter)]
        [InlineData("g/ft³", DensityUnit.GramPerCubicFoot)]
        [InlineData("g/in³", DensityUnit.GramPerCubicInch)]
        [InlineData("g/m³", DensityUnit.GramPerCubicMeter)]
        [InlineData("g/mm³", DensityUnit.GramPerCubicMillimeter)]
        [InlineData("g/dl", DensityUnit.GramPerDeciliter)]
        [InlineData("g/l", DensityUnit.GramPerLiter)]
        [InlineData("g/ml", DensityUnit.GramPerMilliliter)]
        [InlineData("kg/cm³", DensityUnit.KilogramPerCubicCentimeter)]
        [InlineData("kg/m³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("kg/mm³", DensityUnit.KilogramPerCubicMillimeter)]
        [InlineData("kg/l", DensityUnit.KilogramPerLiter)]
        [InlineData("kip/ft³", DensityUnit.KilopoundPerCubicFoot)]
        [InlineData("kip/in³", DensityUnit.KilopoundPerCubicInch)]
        [InlineData("kip/yd³", DensityUnit.KilopoundPerCubicYard)]
        [InlineData("µg/m³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("µg/dl", DensityUnit.MicrogramPerDeciliter)]
        [InlineData("µg/l", DensityUnit.MicrogramPerLiter)]
        [InlineData("µg/ml", DensityUnit.MicrogramPerMilliliter)]
        [InlineData("mg/m³", DensityUnit.MilligramPerCubicMeter)]
        [InlineData("mg/dl", DensityUnit.MilligramPerDeciliter)]
        [InlineData("mg/l", DensityUnit.MilligramPerLiter)]
        [InlineData("mg/ml", DensityUnit.MilligramPerMilliliter)]
        [InlineData("ng/dl", DensityUnit.NanogramPerDeciliter)]
        [InlineData("ng/l", DensityUnit.NanogramPerLiter)]
        [InlineData("ng/ml", DensityUnit.NanogramPerMilliliter)]
        [InlineData("pg/dl", DensityUnit.PicogramPerDeciliter)]
        [InlineData("pg/l", DensityUnit.PicogramPerLiter)]
        [InlineData("pg/ml", DensityUnit.PicogramPerMilliliter)]
        [InlineData("lb/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("lbm/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("lb/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("lbm/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("lb/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("lbm/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("lb/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("lbm/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("lb/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("lbm/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("lb/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("lbm/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("ppg (imp.)", DensityUnit.PoundPerImperialGallon)]
        [InlineData("ppg (U.S.)", DensityUnit.PoundPerUSGallon)]
        [InlineData("slug/cm³", DensityUnit.SlugPerCubicCentimeter)]
        [InlineData("slug/ft³", DensityUnit.SlugPerCubicFoot)]
        [InlineData("slug/in³", DensityUnit.SlugPerCubicInch)]
        [InlineData("slug/m³", DensityUnit.SlugPerCubicMeter)]
        [InlineData("slug/mm³", DensityUnit.SlugPerCubicMillimeter)]
        [InlineData("t/cm³", DensityUnit.TonnePerCubicCentimeter)]
        [InlineData("t/ft³", DensityUnit.TonnePerCubicFoot)]
        [InlineData("t/in³", DensityUnit.TonnePerCubicInch)]
        [InlineData("t/m³", DensityUnit.TonnePerCubicMeter)]
        [InlineData("t/mm³", DensityUnit.TonnePerCubicMillimeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, DensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            DensityUnit parsedUnit = Density.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg/dl", DensityUnit.CentigramPerDeciliter)]
        [InlineData("cg/l", DensityUnit.CentigramPerLiter)]
        [InlineData("cg/ml", DensityUnit.CentigramPerMilliliter)]
        [InlineData("dg/dl", DensityUnit.DecigramPerDeciliter)]
        [InlineData("dg/l", DensityUnit.DecigramPerLiter)]
        [InlineData("dg/ml", DensityUnit.DecigramPerMilliliter)]
        [InlineData("fg/dl", DensityUnit.FemtogramPerDeciliter)]
        [InlineData("fg/l", DensityUnit.FemtogramPerLiter)]
        [InlineData("fg/ml", DensityUnit.FemtogramPerMilliliter)]
        [InlineData("g/cm³", DensityUnit.GramPerCubicCentimeter)]
        [InlineData("g/ft³", DensityUnit.GramPerCubicFoot)]
        [InlineData("g/in³", DensityUnit.GramPerCubicInch)]
        [InlineData("g/m³", DensityUnit.GramPerCubicMeter)]
        [InlineData("g/mm³", DensityUnit.GramPerCubicMillimeter)]
        [InlineData("g/dl", DensityUnit.GramPerDeciliter)]
        [InlineData("g/l", DensityUnit.GramPerLiter)]
        [InlineData("g/ml", DensityUnit.GramPerMilliliter)]
        [InlineData("kg/cm³", DensityUnit.KilogramPerCubicCentimeter)]
        [InlineData("kg/m³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("kg/mm³", DensityUnit.KilogramPerCubicMillimeter)]
        [InlineData("kg/l", DensityUnit.KilogramPerLiter)]
        [InlineData("kip/ft³", DensityUnit.KilopoundPerCubicFoot)]
        [InlineData("kip/in³", DensityUnit.KilopoundPerCubicInch)]
        [InlineData("kip/yd³", DensityUnit.KilopoundPerCubicYard)]
        [InlineData("µg/m³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("µg/dl", DensityUnit.MicrogramPerDeciliter)]
        [InlineData("µg/l", DensityUnit.MicrogramPerLiter)]
        [InlineData("µg/ml", DensityUnit.MicrogramPerMilliliter)]
        [InlineData("mg/m³", DensityUnit.MilligramPerCubicMeter)]
        [InlineData("mg/dl", DensityUnit.MilligramPerDeciliter)]
        [InlineData("mg/l", DensityUnit.MilligramPerLiter)]
        [InlineData("mg/ml", DensityUnit.MilligramPerMilliliter)]
        [InlineData("ng/dl", DensityUnit.NanogramPerDeciliter)]
        [InlineData("ng/l", DensityUnit.NanogramPerLiter)]
        [InlineData("ng/ml", DensityUnit.NanogramPerMilliliter)]
        [InlineData("pg/dl", DensityUnit.PicogramPerDeciliter)]
        [InlineData("pg/l", DensityUnit.PicogramPerLiter)]
        [InlineData("pg/ml", DensityUnit.PicogramPerMilliliter)]
        [InlineData("lb/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("lbm/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("lb/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("lbm/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("lb/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("lbm/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("lb/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("lbm/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("lb/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("lbm/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("lb/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("lbm/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("ppg (imp.)", DensityUnit.PoundPerImperialGallon)]
        [InlineData("ppg (U.S.)", DensityUnit.PoundPerUSGallon)]
        [InlineData("slug/cm³", DensityUnit.SlugPerCubicCentimeter)]
        [InlineData("slug/ft³", DensityUnit.SlugPerCubicFoot)]
        [InlineData("slug/in³", DensityUnit.SlugPerCubicInch)]
        [InlineData("slug/m³", DensityUnit.SlugPerCubicMeter)]
        [InlineData("slug/mm³", DensityUnit.SlugPerCubicMillimeter)]
        [InlineData("t/cm³", DensityUnit.TonnePerCubicCentimeter)]
        [InlineData("t/ft³", DensityUnit.TonnePerCubicFoot)]
        [InlineData("t/in³", DensityUnit.TonnePerCubicInch)]
        [InlineData("t/m³", DensityUnit.TonnePerCubicMeter)]
        [InlineData("t/mm³", DensityUnit.TonnePerCubicMillimeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, DensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            DensityUnit parsedUnit = Density.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/dl", DensityUnit.CentigramPerDeciliter)]
        [InlineData("en-US", "cg/l", DensityUnit.CentigramPerLiter)]
        [InlineData("en-US", "cg/ml", DensityUnit.CentigramPerMilliliter)]
        [InlineData("en-US", "dg/dl", DensityUnit.DecigramPerDeciliter)]
        [InlineData("en-US", "dg/l", DensityUnit.DecigramPerLiter)]
        [InlineData("en-US", "dg/ml", DensityUnit.DecigramPerMilliliter)]
        [InlineData("en-US", "fg/dl", DensityUnit.FemtogramPerDeciliter)]
        [InlineData("en-US", "fg/l", DensityUnit.FemtogramPerLiter)]
        [InlineData("en-US", "fg/ml", DensityUnit.FemtogramPerMilliliter)]
        [InlineData("en-US", "g/cm³", DensityUnit.GramPerCubicCentimeter)]
        [InlineData("en-US", "g/ft³", DensityUnit.GramPerCubicFoot)]
        [InlineData("en-US", "g/in³", DensityUnit.GramPerCubicInch)]
        [InlineData("en-US", "g/m³", DensityUnit.GramPerCubicMeter)]
        [InlineData("en-US", "g/mm³", DensityUnit.GramPerCubicMillimeter)]
        [InlineData("en-US", "g/dl", DensityUnit.GramPerDeciliter)]
        [InlineData("en-US", "g/l", DensityUnit.GramPerLiter)]
        [InlineData("en-US", "g/ml", DensityUnit.GramPerMilliliter)]
        [InlineData("en-US", "kg/cm³", DensityUnit.KilogramPerCubicCentimeter)]
        [InlineData("en-US", "kg/m³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("en-US", "kg/mm³", DensityUnit.KilogramPerCubicMillimeter)]
        [InlineData("en-US", "kg/l", DensityUnit.KilogramPerLiter)]
        [InlineData("en-US", "kip/ft³", DensityUnit.KilopoundPerCubicFoot)]
        [InlineData("en-US", "kip/in³", DensityUnit.KilopoundPerCubicInch)]
        [InlineData("en-US", "kip/yd³", DensityUnit.KilopoundPerCubicYard)]
        [InlineData("en-US", "µg/m³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("en-US", "µg/dl", DensityUnit.MicrogramPerDeciliter)]
        [InlineData("en-US", "µg/l", DensityUnit.MicrogramPerLiter)]
        [InlineData("en-US", "µg/ml", DensityUnit.MicrogramPerMilliliter)]
        [InlineData("en-US", "mg/m³", DensityUnit.MilligramPerCubicMeter)]
        [InlineData("en-US", "mg/dl", DensityUnit.MilligramPerDeciliter)]
        [InlineData("en-US", "mg/l", DensityUnit.MilligramPerLiter)]
        [InlineData("en-US", "mg/ml", DensityUnit.MilligramPerMilliliter)]
        [InlineData("en-US", "ng/dl", DensityUnit.NanogramPerDeciliter)]
        [InlineData("en-US", "ng/l", DensityUnit.NanogramPerLiter)]
        [InlineData("en-US", "ng/ml", DensityUnit.NanogramPerMilliliter)]
        [InlineData("en-US", "pg/dl", DensityUnit.PicogramPerDeciliter)]
        [InlineData("en-US", "pg/l", DensityUnit.PicogramPerLiter)]
        [InlineData("en-US", "pg/ml", DensityUnit.PicogramPerMilliliter)]
        [InlineData("en-US", "lb/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("en-US", "lbm/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("en-US", "lb/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lbm/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lb/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("en-US", "lbm/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("en-US", "lb/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("en-US", "lbm/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("en-US", "lb/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("en-US", "lbm/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("en-US", "lb/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("en-US", "lbm/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("en-US", "ppg (imp.)", DensityUnit.PoundPerImperialGallon)]
        [InlineData("en-US", "ppg (U.S.)", DensityUnit.PoundPerUSGallon)]
        [InlineData("en-US", "slug/cm³", DensityUnit.SlugPerCubicCentimeter)]
        [InlineData("en-US", "slug/ft³", DensityUnit.SlugPerCubicFoot)]
        [InlineData("en-US", "slug/in³", DensityUnit.SlugPerCubicInch)]
        [InlineData("en-US", "slug/m³", DensityUnit.SlugPerCubicMeter)]
        [InlineData("en-US", "slug/mm³", DensityUnit.SlugPerCubicMillimeter)]
        [InlineData("en-US", "t/cm³", DensityUnit.TonnePerCubicCentimeter)]
        [InlineData("en-US", "t/ft³", DensityUnit.TonnePerCubicFoot)]
        [InlineData("en-US", "t/in³", DensityUnit.TonnePerCubicInch)]
        [InlineData("en-US", "t/m³", DensityUnit.TonnePerCubicMeter)]
        [InlineData("en-US", "t/mm³", DensityUnit.TonnePerCubicMillimeter)]
        [InlineData("ru-RU", "г/м³", DensityUnit.GramPerCubicMeter)]
        [InlineData("ru-RU", "кг/м³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("ru-RU", "мкг/м³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("ru-RU", "мг/м³", DensityUnit.MilligramPerCubicMeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, DensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            DensityUnit parsedUnit = Density.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/dl", DensityUnit.CentigramPerDeciliter)]
        [InlineData("en-US", "cg/l", DensityUnit.CentigramPerLiter)]
        [InlineData("en-US", "cg/ml", DensityUnit.CentigramPerMilliliter)]
        [InlineData("en-US", "dg/dl", DensityUnit.DecigramPerDeciliter)]
        [InlineData("en-US", "dg/l", DensityUnit.DecigramPerLiter)]
        [InlineData("en-US", "dg/ml", DensityUnit.DecigramPerMilliliter)]
        [InlineData("en-US", "fg/dl", DensityUnit.FemtogramPerDeciliter)]
        [InlineData("en-US", "fg/l", DensityUnit.FemtogramPerLiter)]
        [InlineData("en-US", "fg/ml", DensityUnit.FemtogramPerMilliliter)]
        [InlineData("en-US", "g/cm³", DensityUnit.GramPerCubicCentimeter)]
        [InlineData("en-US", "g/ft³", DensityUnit.GramPerCubicFoot)]
        [InlineData("en-US", "g/in³", DensityUnit.GramPerCubicInch)]
        [InlineData("en-US", "g/m³", DensityUnit.GramPerCubicMeter)]
        [InlineData("en-US", "g/mm³", DensityUnit.GramPerCubicMillimeter)]
        [InlineData("en-US", "g/dl", DensityUnit.GramPerDeciliter)]
        [InlineData("en-US", "g/l", DensityUnit.GramPerLiter)]
        [InlineData("en-US", "g/ml", DensityUnit.GramPerMilliliter)]
        [InlineData("en-US", "kg/cm³", DensityUnit.KilogramPerCubicCentimeter)]
        [InlineData("en-US", "kg/m³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("en-US", "kg/mm³", DensityUnit.KilogramPerCubicMillimeter)]
        [InlineData("en-US", "kg/l", DensityUnit.KilogramPerLiter)]
        [InlineData("en-US", "kip/ft³", DensityUnit.KilopoundPerCubicFoot)]
        [InlineData("en-US", "kip/in³", DensityUnit.KilopoundPerCubicInch)]
        [InlineData("en-US", "kip/yd³", DensityUnit.KilopoundPerCubicYard)]
        [InlineData("en-US", "µg/m³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("en-US", "µg/dl", DensityUnit.MicrogramPerDeciliter)]
        [InlineData("en-US", "µg/l", DensityUnit.MicrogramPerLiter)]
        [InlineData("en-US", "µg/ml", DensityUnit.MicrogramPerMilliliter)]
        [InlineData("en-US", "mg/m³", DensityUnit.MilligramPerCubicMeter)]
        [InlineData("en-US", "mg/dl", DensityUnit.MilligramPerDeciliter)]
        [InlineData("en-US", "mg/l", DensityUnit.MilligramPerLiter)]
        [InlineData("en-US", "mg/ml", DensityUnit.MilligramPerMilliliter)]
        [InlineData("en-US", "ng/dl", DensityUnit.NanogramPerDeciliter)]
        [InlineData("en-US", "ng/l", DensityUnit.NanogramPerLiter)]
        [InlineData("en-US", "ng/ml", DensityUnit.NanogramPerMilliliter)]
        [InlineData("en-US", "pg/dl", DensityUnit.PicogramPerDeciliter)]
        [InlineData("en-US", "pg/l", DensityUnit.PicogramPerLiter)]
        [InlineData("en-US", "pg/ml", DensityUnit.PicogramPerMilliliter)]
        [InlineData("en-US", "lb/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("en-US", "lbm/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("en-US", "lb/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lbm/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lb/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("en-US", "lbm/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("en-US", "lb/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("en-US", "lbm/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("en-US", "lb/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("en-US", "lbm/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("en-US", "lb/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("en-US", "lbm/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("en-US", "ppg (imp.)", DensityUnit.PoundPerImperialGallon)]
        [InlineData("en-US", "ppg (U.S.)", DensityUnit.PoundPerUSGallon)]
        [InlineData("en-US", "slug/cm³", DensityUnit.SlugPerCubicCentimeter)]
        [InlineData("en-US", "slug/ft³", DensityUnit.SlugPerCubicFoot)]
        [InlineData("en-US", "slug/in³", DensityUnit.SlugPerCubicInch)]
        [InlineData("en-US", "slug/m³", DensityUnit.SlugPerCubicMeter)]
        [InlineData("en-US", "slug/mm³", DensityUnit.SlugPerCubicMillimeter)]
        [InlineData("en-US", "t/cm³", DensityUnit.TonnePerCubicCentimeter)]
        [InlineData("en-US", "t/ft³", DensityUnit.TonnePerCubicFoot)]
        [InlineData("en-US", "t/in³", DensityUnit.TonnePerCubicInch)]
        [InlineData("en-US", "t/m³", DensityUnit.TonnePerCubicMeter)]
        [InlineData("en-US", "t/mm³", DensityUnit.TonnePerCubicMillimeter)]
        [InlineData("ru-RU", "г/м³", DensityUnit.GramPerCubicMeter)]
        [InlineData("ru-RU", "кг/м³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("ru-RU", "мкг/м³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("ru-RU", "мг/м³", DensityUnit.MilligramPerCubicMeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, DensityUnit expectedUnit)
        {
            DensityUnit parsedUnit = Density.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg/dl", DensityUnit.CentigramPerDeciliter)]
        [InlineData("cg/l", DensityUnit.CentigramPerLiter)]
        [InlineData("cg/ml", DensityUnit.CentigramPerMilliliter)]
        [InlineData("dg/dl", DensityUnit.DecigramPerDeciliter)]
        [InlineData("dg/l", DensityUnit.DecigramPerLiter)]
        [InlineData("dg/ml", DensityUnit.DecigramPerMilliliter)]
        [InlineData("fg/dl", DensityUnit.FemtogramPerDeciliter)]
        [InlineData("fg/l", DensityUnit.FemtogramPerLiter)]
        [InlineData("fg/ml", DensityUnit.FemtogramPerMilliliter)]
        [InlineData("g/cm³", DensityUnit.GramPerCubicCentimeter)]
        [InlineData("g/ft³", DensityUnit.GramPerCubicFoot)]
        [InlineData("g/in³", DensityUnit.GramPerCubicInch)]
        [InlineData("g/m³", DensityUnit.GramPerCubicMeter)]
        [InlineData("g/mm³", DensityUnit.GramPerCubicMillimeter)]
        [InlineData("g/dl", DensityUnit.GramPerDeciliter)]
        [InlineData("g/l", DensityUnit.GramPerLiter)]
        [InlineData("g/ml", DensityUnit.GramPerMilliliter)]
        [InlineData("kg/cm³", DensityUnit.KilogramPerCubicCentimeter)]
        [InlineData("kg/m³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("kg/mm³", DensityUnit.KilogramPerCubicMillimeter)]
        [InlineData("kg/l", DensityUnit.KilogramPerLiter)]
        [InlineData("kip/ft³", DensityUnit.KilopoundPerCubicFoot)]
        [InlineData("kip/in³", DensityUnit.KilopoundPerCubicInch)]
        [InlineData("kip/yd³", DensityUnit.KilopoundPerCubicYard)]
        [InlineData("µg/m³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("µg/dl", DensityUnit.MicrogramPerDeciliter)]
        [InlineData("µg/l", DensityUnit.MicrogramPerLiter)]
        [InlineData("µg/ml", DensityUnit.MicrogramPerMilliliter)]
        [InlineData("mg/m³", DensityUnit.MilligramPerCubicMeter)]
        [InlineData("mg/dl", DensityUnit.MilligramPerDeciliter)]
        [InlineData("mg/l", DensityUnit.MilligramPerLiter)]
        [InlineData("mg/ml", DensityUnit.MilligramPerMilliliter)]
        [InlineData("ng/dl", DensityUnit.NanogramPerDeciliter)]
        [InlineData("ng/l", DensityUnit.NanogramPerLiter)]
        [InlineData("ng/ml", DensityUnit.NanogramPerMilliliter)]
        [InlineData("pg/dl", DensityUnit.PicogramPerDeciliter)]
        [InlineData("pg/l", DensityUnit.PicogramPerLiter)]
        [InlineData("pg/ml", DensityUnit.PicogramPerMilliliter)]
        [InlineData("lb/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("lbm/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("lb/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("lbm/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("lb/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("lbm/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("lb/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("lbm/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("lb/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("lbm/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("lb/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("lbm/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("ppg (imp.)", DensityUnit.PoundPerImperialGallon)]
        [InlineData("ppg (U.S.)", DensityUnit.PoundPerUSGallon)]
        [InlineData("slug/cm³", DensityUnit.SlugPerCubicCentimeter)]
        [InlineData("slug/ft³", DensityUnit.SlugPerCubicFoot)]
        [InlineData("slug/in³", DensityUnit.SlugPerCubicInch)]
        [InlineData("slug/m³", DensityUnit.SlugPerCubicMeter)]
        [InlineData("slug/mm³", DensityUnit.SlugPerCubicMillimeter)]
        [InlineData("t/cm³", DensityUnit.TonnePerCubicCentimeter)]
        [InlineData("t/ft³", DensityUnit.TonnePerCubicFoot)]
        [InlineData("t/in³", DensityUnit.TonnePerCubicInch)]
        [InlineData("t/m³", DensityUnit.TonnePerCubicMeter)]
        [InlineData("t/mm³", DensityUnit.TonnePerCubicMillimeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, DensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Density.TryParseUnit(abbreviation, out DensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg/dl", DensityUnit.CentigramPerDeciliter)]
        [InlineData("cg/l", DensityUnit.CentigramPerLiter)]
        [InlineData("cg/ml", DensityUnit.CentigramPerMilliliter)]
        [InlineData("dg/dl", DensityUnit.DecigramPerDeciliter)]
        [InlineData("dg/l", DensityUnit.DecigramPerLiter)]
        [InlineData("dg/ml", DensityUnit.DecigramPerMilliliter)]
        [InlineData("fg/dl", DensityUnit.FemtogramPerDeciliter)]
        [InlineData("fg/l", DensityUnit.FemtogramPerLiter)]
        [InlineData("fg/ml", DensityUnit.FemtogramPerMilliliter)]
        [InlineData("g/cm³", DensityUnit.GramPerCubicCentimeter)]
        [InlineData("g/ft³", DensityUnit.GramPerCubicFoot)]
        [InlineData("g/in³", DensityUnit.GramPerCubicInch)]
        [InlineData("g/m³", DensityUnit.GramPerCubicMeter)]
        [InlineData("g/mm³", DensityUnit.GramPerCubicMillimeter)]
        [InlineData("g/dl", DensityUnit.GramPerDeciliter)]
        [InlineData("g/l", DensityUnit.GramPerLiter)]
        [InlineData("g/ml", DensityUnit.GramPerMilliliter)]
        [InlineData("kg/cm³", DensityUnit.KilogramPerCubicCentimeter)]
        [InlineData("kg/m³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("kg/mm³", DensityUnit.KilogramPerCubicMillimeter)]
        [InlineData("kg/l", DensityUnit.KilogramPerLiter)]
        [InlineData("kip/ft³", DensityUnit.KilopoundPerCubicFoot)]
        [InlineData("kip/in³", DensityUnit.KilopoundPerCubicInch)]
        [InlineData("kip/yd³", DensityUnit.KilopoundPerCubicYard)]
        [InlineData("µg/m³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("µg/dl", DensityUnit.MicrogramPerDeciliter)]
        [InlineData("µg/l", DensityUnit.MicrogramPerLiter)]
        [InlineData("µg/ml", DensityUnit.MicrogramPerMilliliter)]
        [InlineData("mg/m³", DensityUnit.MilligramPerCubicMeter)]
        [InlineData("mg/dl", DensityUnit.MilligramPerDeciliter)]
        [InlineData("mg/l", DensityUnit.MilligramPerLiter)]
        [InlineData("mg/ml", DensityUnit.MilligramPerMilliliter)]
        [InlineData("ng/dl", DensityUnit.NanogramPerDeciliter)]
        [InlineData("ng/l", DensityUnit.NanogramPerLiter)]
        [InlineData("ng/ml", DensityUnit.NanogramPerMilliliter)]
        [InlineData("pg/dl", DensityUnit.PicogramPerDeciliter)]
        [InlineData("pg/l", DensityUnit.PicogramPerLiter)]
        [InlineData("pg/ml", DensityUnit.PicogramPerMilliliter)]
        [InlineData("lb/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("lbm/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("lb/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("lbm/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("lb/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("lbm/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("lb/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("lbm/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("lb/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("lbm/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("lb/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("lbm/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("ppg (imp.)", DensityUnit.PoundPerImperialGallon)]
        [InlineData("ppg (U.S.)", DensityUnit.PoundPerUSGallon)]
        [InlineData("slug/cm³", DensityUnit.SlugPerCubicCentimeter)]
        [InlineData("slug/ft³", DensityUnit.SlugPerCubicFoot)]
        [InlineData("slug/in³", DensityUnit.SlugPerCubicInch)]
        [InlineData("slug/m³", DensityUnit.SlugPerCubicMeter)]
        [InlineData("slug/mm³", DensityUnit.SlugPerCubicMillimeter)]
        [InlineData("t/cm³", DensityUnit.TonnePerCubicCentimeter)]
        [InlineData("t/ft³", DensityUnit.TonnePerCubicFoot)]
        [InlineData("t/in³", DensityUnit.TonnePerCubicInch)]
        [InlineData("t/m³", DensityUnit.TonnePerCubicMeter)]
        [InlineData("t/mm³", DensityUnit.TonnePerCubicMillimeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, DensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Density.TryParseUnit(abbreviation, out DensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/dl", DensityUnit.CentigramPerDeciliter)]
        [InlineData("en-US", "cg/l", DensityUnit.CentigramPerLiter)]
        [InlineData("en-US", "cg/ml", DensityUnit.CentigramPerMilliliter)]
        [InlineData("en-US", "dg/dl", DensityUnit.DecigramPerDeciliter)]
        [InlineData("en-US", "dg/l", DensityUnit.DecigramPerLiter)]
        [InlineData("en-US", "dg/ml", DensityUnit.DecigramPerMilliliter)]
        [InlineData("en-US", "fg/dl", DensityUnit.FemtogramPerDeciliter)]
        [InlineData("en-US", "fg/l", DensityUnit.FemtogramPerLiter)]
        [InlineData("en-US", "fg/ml", DensityUnit.FemtogramPerMilliliter)]
        [InlineData("en-US", "g/cm³", DensityUnit.GramPerCubicCentimeter)]
        [InlineData("en-US", "g/ft³", DensityUnit.GramPerCubicFoot)]
        [InlineData("en-US", "g/in³", DensityUnit.GramPerCubicInch)]
        [InlineData("en-US", "g/m³", DensityUnit.GramPerCubicMeter)]
        [InlineData("en-US", "g/mm³", DensityUnit.GramPerCubicMillimeter)]
        [InlineData("en-US", "g/dl", DensityUnit.GramPerDeciliter)]
        [InlineData("en-US", "g/l", DensityUnit.GramPerLiter)]
        [InlineData("en-US", "g/ml", DensityUnit.GramPerMilliliter)]
        [InlineData("en-US", "kg/cm³", DensityUnit.KilogramPerCubicCentimeter)]
        [InlineData("en-US", "kg/m³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("en-US", "kg/mm³", DensityUnit.KilogramPerCubicMillimeter)]
        [InlineData("en-US", "kg/l", DensityUnit.KilogramPerLiter)]
        [InlineData("en-US", "kip/ft³", DensityUnit.KilopoundPerCubicFoot)]
        [InlineData("en-US", "kip/in³", DensityUnit.KilopoundPerCubicInch)]
        [InlineData("en-US", "kip/yd³", DensityUnit.KilopoundPerCubicYard)]
        [InlineData("en-US", "µg/m³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("en-US", "µg/dl", DensityUnit.MicrogramPerDeciliter)]
        [InlineData("en-US", "µg/l", DensityUnit.MicrogramPerLiter)]
        [InlineData("en-US", "µg/ml", DensityUnit.MicrogramPerMilliliter)]
        [InlineData("en-US", "mg/m³", DensityUnit.MilligramPerCubicMeter)]
        [InlineData("en-US", "mg/dl", DensityUnit.MilligramPerDeciliter)]
        [InlineData("en-US", "mg/l", DensityUnit.MilligramPerLiter)]
        [InlineData("en-US", "mg/ml", DensityUnit.MilligramPerMilliliter)]
        [InlineData("en-US", "ng/dl", DensityUnit.NanogramPerDeciliter)]
        [InlineData("en-US", "ng/l", DensityUnit.NanogramPerLiter)]
        [InlineData("en-US", "ng/ml", DensityUnit.NanogramPerMilliliter)]
        [InlineData("en-US", "pg/dl", DensityUnit.PicogramPerDeciliter)]
        [InlineData("en-US", "pg/l", DensityUnit.PicogramPerLiter)]
        [InlineData("en-US", "pg/ml", DensityUnit.PicogramPerMilliliter)]
        [InlineData("en-US", "lb/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("en-US", "lbm/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("en-US", "lb/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lbm/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lb/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("en-US", "lbm/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("en-US", "lb/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("en-US", "lbm/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("en-US", "lb/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("en-US", "lbm/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("en-US", "lb/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("en-US", "lbm/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("en-US", "ppg (imp.)", DensityUnit.PoundPerImperialGallon)]
        [InlineData("en-US", "ppg (U.S.)", DensityUnit.PoundPerUSGallon)]
        [InlineData("en-US", "slug/cm³", DensityUnit.SlugPerCubicCentimeter)]
        [InlineData("en-US", "slug/ft³", DensityUnit.SlugPerCubicFoot)]
        [InlineData("en-US", "slug/in³", DensityUnit.SlugPerCubicInch)]
        [InlineData("en-US", "slug/m³", DensityUnit.SlugPerCubicMeter)]
        [InlineData("en-US", "slug/mm³", DensityUnit.SlugPerCubicMillimeter)]
        [InlineData("en-US", "t/cm³", DensityUnit.TonnePerCubicCentimeter)]
        [InlineData("en-US", "t/ft³", DensityUnit.TonnePerCubicFoot)]
        [InlineData("en-US", "t/in³", DensityUnit.TonnePerCubicInch)]
        [InlineData("en-US", "t/m³", DensityUnit.TonnePerCubicMeter)]
        [InlineData("en-US", "t/mm³", DensityUnit.TonnePerCubicMillimeter)]
        [InlineData("ru-RU", "г/м³", DensityUnit.GramPerCubicMeter)]
        [InlineData("ru-RU", "кг/м³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("ru-RU", "мкг/м³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("ru-RU", "мг/м³", DensityUnit.MilligramPerCubicMeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, DensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Density.TryParseUnit(abbreviation, out DensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/dl", DensityUnit.CentigramPerDeciliter)]
        [InlineData("en-US", "cg/l", DensityUnit.CentigramPerLiter)]
        [InlineData("en-US", "cg/ml", DensityUnit.CentigramPerMilliliter)]
        [InlineData("en-US", "dg/dl", DensityUnit.DecigramPerDeciliter)]
        [InlineData("en-US", "dg/l", DensityUnit.DecigramPerLiter)]
        [InlineData("en-US", "dg/ml", DensityUnit.DecigramPerMilliliter)]
        [InlineData("en-US", "fg/dl", DensityUnit.FemtogramPerDeciliter)]
        [InlineData("en-US", "fg/l", DensityUnit.FemtogramPerLiter)]
        [InlineData("en-US", "fg/ml", DensityUnit.FemtogramPerMilliliter)]
        [InlineData("en-US", "g/cm³", DensityUnit.GramPerCubicCentimeter)]
        [InlineData("en-US", "g/ft³", DensityUnit.GramPerCubicFoot)]
        [InlineData("en-US", "g/in³", DensityUnit.GramPerCubicInch)]
        [InlineData("en-US", "g/m³", DensityUnit.GramPerCubicMeter)]
        [InlineData("en-US", "g/mm³", DensityUnit.GramPerCubicMillimeter)]
        [InlineData("en-US", "g/dl", DensityUnit.GramPerDeciliter)]
        [InlineData("en-US", "g/l", DensityUnit.GramPerLiter)]
        [InlineData("en-US", "g/ml", DensityUnit.GramPerMilliliter)]
        [InlineData("en-US", "kg/cm³", DensityUnit.KilogramPerCubicCentimeter)]
        [InlineData("en-US", "kg/m³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("en-US", "kg/mm³", DensityUnit.KilogramPerCubicMillimeter)]
        [InlineData("en-US", "kg/l", DensityUnit.KilogramPerLiter)]
        [InlineData("en-US", "kip/ft³", DensityUnit.KilopoundPerCubicFoot)]
        [InlineData("en-US", "kip/in³", DensityUnit.KilopoundPerCubicInch)]
        [InlineData("en-US", "kip/yd³", DensityUnit.KilopoundPerCubicYard)]
        [InlineData("en-US", "µg/m³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("en-US", "µg/dl", DensityUnit.MicrogramPerDeciliter)]
        [InlineData("en-US", "µg/l", DensityUnit.MicrogramPerLiter)]
        [InlineData("en-US", "µg/ml", DensityUnit.MicrogramPerMilliliter)]
        [InlineData("en-US", "mg/m³", DensityUnit.MilligramPerCubicMeter)]
        [InlineData("en-US", "mg/dl", DensityUnit.MilligramPerDeciliter)]
        [InlineData("en-US", "mg/l", DensityUnit.MilligramPerLiter)]
        [InlineData("en-US", "mg/ml", DensityUnit.MilligramPerMilliliter)]
        [InlineData("en-US", "ng/dl", DensityUnit.NanogramPerDeciliter)]
        [InlineData("en-US", "ng/l", DensityUnit.NanogramPerLiter)]
        [InlineData("en-US", "ng/ml", DensityUnit.NanogramPerMilliliter)]
        [InlineData("en-US", "pg/dl", DensityUnit.PicogramPerDeciliter)]
        [InlineData("en-US", "pg/l", DensityUnit.PicogramPerLiter)]
        [InlineData("en-US", "pg/ml", DensityUnit.PicogramPerMilliliter)]
        [InlineData("en-US", "lb/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("en-US", "lbm/cm³", DensityUnit.PoundPerCubicCentimeter)]
        [InlineData("en-US", "lb/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lbm/ft³", DensityUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lb/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("en-US", "lbm/in³", DensityUnit.PoundPerCubicInch)]
        [InlineData("en-US", "lb/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("en-US", "lbm/m³", DensityUnit.PoundPerCubicMeter)]
        [InlineData("en-US", "lb/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("en-US", "lbm/mm³", DensityUnit.PoundPerCubicMillimeter)]
        [InlineData("en-US", "lb/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("en-US", "lbm/yd³", DensityUnit.PoundPerCubicYard)]
        [InlineData("en-US", "ppg (imp.)", DensityUnit.PoundPerImperialGallon)]
        [InlineData("en-US", "ppg (U.S.)", DensityUnit.PoundPerUSGallon)]
        [InlineData("en-US", "slug/cm³", DensityUnit.SlugPerCubicCentimeter)]
        [InlineData("en-US", "slug/ft³", DensityUnit.SlugPerCubicFoot)]
        [InlineData("en-US", "slug/in³", DensityUnit.SlugPerCubicInch)]
        [InlineData("en-US", "slug/m³", DensityUnit.SlugPerCubicMeter)]
        [InlineData("en-US", "slug/mm³", DensityUnit.SlugPerCubicMillimeter)]
        [InlineData("en-US", "t/cm³", DensityUnit.TonnePerCubicCentimeter)]
        [InlineData("en-US", "t/ft³", DensityUnit.TonnePerCubicFoot)]
        [InlineData("en-US", "t/in³", DensityUnit.TonnePerCubicInch)]
        [InlineData("en-US", "t/m³", DensityUnit.TonnePerCubicMeter)]
        [InlineData("en-US", "t/mm³", DensityUnit.TonnePerCubicMillimeter)]
        [InlineData("ru-RU", "г/м³", DensityUnit.GramPerCubicMeter)]
        [InlineData("ru-RU", "кг/м³", DensityUnit.KilogramPerCubicMeter)]
        [InlineData("ru-RU", "мкг/м³", DensityUnit.MicrogramPerCubicMeter)]
        [InlineData("ru-RU", "мг/м³", DensityUnit.MilligramPerCubicMeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, DensityUnit expectedUnit)
        {
            Assert.True(Density.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out DensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", DensityUnit.CentigramPerDeciliter, "cg/dl")]
        [InlineData("en-US", DensityUnit.CentigramPerLiter, "cg/l")]
        [InlineData("en-US", DensityUnit.CentigramPerMilliliter, "cg/ml")]
        [InlineData("en-US", DensityUnit.DecigramPerDeciliter, "dg/dl")]
        [InlineData("en-US", DensityUnit.DecigramPerLiter, "dg/l")]
        [InlineData("en-US", DensityUnit.DecigramPerMilliliter, "dg/ml")]
        [InlineData("en-US", DensityUnit.FemtogramPerDeciliter, "fg/dl")]
        [InlineData("en-US", DensityUnit.FemtogramPerLiter, "fg/l")]
        [InlineData("en-US", DensityUnit.FemtogramPerMilliliter, "fg/ml")]
        [InlineData("en-US", DensityUnit.GramPerCubicCentimeter, "g/cm³")]
        [InlineData("en-US", DensityUnit.GramPerCubicFoot, "g/ft³")]
        [InlineData("en-US", DensityUnit.GramPerCubicInch, "g/in³")]
        [InlineData("en-US", DensityUnit.GramPerCubicMeter, "g/m³")]
        [InlineData("en-US", DensityUnit.GramPerCubicMillimeter, "g/mm³")]
        [InlineData("en-US", DensityUnit.GramPerDeciliter, "g/dl")]
        [InlineData("en-US", DensityUnit.GramPerLiter, "g/l")]
        [InlineData("en-US", DensityUnit.GramPerMilliliter, "g/ml")]
        [InlineData("en-US", DensityUnit.KilogramPerCubicCentimeter, "kg/cm³")]
        [InlineData("en-US", DensityUnit.KilogramPerCubicMeter, "kg/m³")]
        [InlineData("en-US", DensityUnit.KilogramPerCubicMillimeter, "kg/mm³")]
        [InlineData("en-US", DensityUnit.KilogramPerLiter, "kg/l")]
        [InlineData("en-US", DensityUnit.KilopoundPerCubicFoot, "kip/ft³")]
        [InlineData("en-US", DensityUnit.KilopoundPerCubicInch, "kip/in³")]
        [InlineData("en-US", DensityUnit.KilopoundPerCubicYard, "kip/yd³")]
        [InlineData("en-US", DensityUnit.MicrogramPerCubicMeter, "µg/m³")]
        [InlineData("en-US", DensityUnit.MicrogramPerDeciliter, "µg/dl")]
        [InlineData("en-US", DensityUnit.MicrogramPerLiter, "µg/l")]
        [InlineData("en-US", DensityUnit.MicrogramPerMilliliter, "µg/ml")]
        [InlineData("en-US", DensityUnit.MilligramPerCubicMeter, "mg/m³")]
        [InlineData("en-US", DensityUnit.MilligramPerDeciliter, "mg/dl")]
        [InlineData("en-US", DensityUnit.MilligramPerLiter, "mg/l")]
        [InlineData("en-US", DensityUnit.MilligramPerMilliliter, "mg/ml")]
        [InlineData("en-US", DensityUnit.NanogramPerDeciliter, "ng/dl")]
        [InlineData("en-US", DensityUnit.NanogramPerLiter, "ng/l")]
        [InlineData("en-US", DensityUnit.NanogramPerMilliliter, "ng/ml")]
        [InlineData("en-US", DensityUnit.PicogramPerDeciliter, "pg/dl")]
        [InlineData("en-US", DensityUnit.PicogramPerLiter, "pg/l")]
        [InlineData("en-US", DensityUnit.PicogramPerMilliliter, "pg/ml")]
        [InlineData("en-US", DensityUnit.PoundPerCubicCentimeter, "lb/cm³")]
        [InlineData("en-US", DensityUnit.PoundPerCubicFoot, "lb/ft³")]
        [InlineData("en-US", DensityUnit.PoundPerCubicInch, "lb/in³")]
        [InlineData("en-US", DensityUnit.PoundPerCubicMeter, "lb/m³")]
        [InlineData("en-US", DensityUnit.PoundPerCubicMillimeter, "lb/mm³")]
        [InlineData("en-US", DensityUnit.PoundPerCubicYard, "lb/yd³")]
        [InlineData("en-US", DensityUnit.PoundPerImperialGallon, "ppg (imp.)")]
        [InlineData("en-US", DensityUnit.PoundPerUSGallon, "ppg (U.S.)")]
        [InlineData("en-US", DensityUnit.SlugPerCubicCentimeter, "slug/cm³")]
        [InlineData("en-US", DensityUnit.SlugPerCubicFoot, "slug/ft³")]
        [InlineData("en-US", DensityUnit.SlugPerCubicInch, "slug/in³")]
        [InlineData("en-US", DensityUnit.SlugPerCubicMeter, "slug/m³")]
        [InlineData("en-US", DensityUnit.SlugPerCubicMillimeter, "slug/mm³")]
        [InlineData("en-US", DensityUnit.TonnePerCubicCentimeter, "t/cm³")]
        [InlineData("en-US", DensityUnit.TonnePerCubicFoot, "t/ft³")]
        [InlineData("en-US", DensityUnit.TonnePerCubicInch, "t/in³")]
        [InlineData("en-US", DensityUnit.TonnePerCubicMeter, "t/m³")]
        [InlineData("en-US", DensityUnit.TonnePerCubicMillimeter, "t/mm³")]
        [InlineData("ru-RU", DensityUnit.GramPerCubicMeter, "г/м³")]
        [InlineData("ru-RU", DensityUnit.KilogramPerCubicMeter, "кг/м³")]
        [InlineData("ru-RU", DensityUnit.MicrogramPerCubicMeter, "мкг/м³")]
        [InlineData("ru-RU", DensityUnit.MilligramPerCubicMeter, "мг/м³")]
        public void GetAbbreviationForCulture(string culture, DensityUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Density.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Density.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Density.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(DensityUnit unit)
        {
            var inBaseUnits = Density.From(1.0, Density.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(DensityUnit unit)
        {
            var quantity = Density.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(DensityUnit unit)
        {
            Assert.All(Density.Units.Where(u => u != Density.BaseUnit), fromUnit =>
            {
                var quantity = Density.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(DensityUnit unit)
        {
            var quantity = default(Density);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(DensityUnit unit)
        {
            var quantity = Density.From(3, Density.BaseUnit);
            Density expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<DensityUnit> quantityToConvert = quantity;
                IQuantity<DensityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(1, Density.FromCentigramsPerDeciliter(kilogrampercubicmeter.CentigramsPerDeciliter).KilogramsPerCubicMeter, CentigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromCentigramsPerLiter(kilogrampercubicmeter.CentigramsPerLiter).KilogramsPerCubicMeter, CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromCentigramsPerMilliliter(kilogrampercubicmeter.CentigramsPerMilliliter).KilogramsPerCubicMeter, CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromDecigramsPerDeciliter(kilogrampercubicmeter.DecigramsPerDeciliter).KilogramsPerCubicMeter, DecigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromDecigramsPerLiter(kilogrampercubicmeter.DecigramsPerLiter).KilogramsPerCubicMeter, DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromDecigramsPerMilliliter(kilogrampercubicmeter.DecigramsPerMilliliter).KilogramsPerCubicMeter, DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromFemtogramsPerDeciliter(kilogrampercubicmeter.FemtogramsPerDeciliter).KilogramsPerCubicMeter, FemtogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromFemtogramsPerLiter(kilogrampercubicmeter.FemtogramsPerLiter).KilogramsPerCubicMeter, FemtogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromFemtogramsPerMilliliter(kilogrampercubicmeter.FemtogramsPerMilliliter).KilogramsPerCubicMeter, FemtogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerCubicCentimeter(kilogrampercubicmeter.GramsPerCubicCentimeter).KilogramsPerCubicMeter, GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerCubicFoot(kilogrampercubicmeter.GramsPerCubicFoot).KilogramsPerCubicMeter, GramsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerCubicInch(kilogrampercubicmeter.GramsPerCubicInch).KilogramsPerCubicMeter, GramsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerCubicMeter(kilogrampercubicmeter.GramsPerCubicMeter).KilogramsPerCubicMeter, GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerCubicMillimeter(kilogrampercubicmeter.GramsPerCubicMillimeter).KilogramsPerCubicMeter, GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerDeciliter(kilogrampercubicmeter.GramsPerDeciliter).KilogramsPerCubicMeter, GramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerLiter(kilogrampercubicmeter.GramsPerLiter).KilogramsPerCubicMeter, GramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromGramsPerMilliliter(kilogrampercubicmeter.GramsPerMilliliter).KilogramsPerCubicMeter, GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilogramsPerCubicCentimeter(kilogrampercubicmeter.KilogramsPerCubicCentimeter).KilogramsPerCubicMeter, KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilogramsPerCubicMeter(kilogrampercubicmeter.KilogramsPerCubicMeter).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilogramsPerCubicMillimeter(kilogrampercubicmeter.KilogramsPerCubicMillimeter).KilogramsPerCubicMeter, KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilogramsPerLiter(kilogrampercubicmeter.KilogramsPerLiter).KilogramsPerCubicMeter, KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilopoundsPerCubicFoot(kilogrampercubicmeter.KilopoundsPerCubicFoot).KilogramsPerCubicMeter, KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilopoundsPerCubicInch(kilogrampercubicmeter.KilopoundsPerCubicInch).KilogramsPerCubicMeter, KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, Density.FromKilopoundsPerCubicYard(kilogrampercubicmeter.KilopoundsPerCubicYard).KilogramsPerCubicMeter, KilopoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(1, Density.FromMicrogramsPerCubicMeter(kilogrampercubicmeter.MicrogramsPerCubicMeter).KilogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMicrogramsPerDeciliter(kilogrampercubicmeter.MicrogramsPerDeciliter).KilogramsPerCubicMeter, MicrogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMicrogramsPerLiter(kilogrampercubicmeter.MicrogramsPerLiter).KilogramsPerCubicMeter, MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMicrogramsPerMilliliter(kilogrampercubicmeter.MicrogramsPerMilliliter).KilogramsPerCubicMeter, MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMilligramsPerCubicMeter(kilogrampercubicmeter.MilligramsPerCubicMeter).KilogramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMilligramsPerDeciliter(kilogrampercubicmeter.MilligramsPerDeciliter).KilogramsPerCubicMeter, MilligramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMilligramsPerLiter(kilogrampercubicmeter.MilligramsPerLiter).KilogramsPerCubicMeter, MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromMilligramsPerMilliliter(kilogrampercubicmeter.MilligramsPerMilliliter).KilogramsPerCubicMeter, MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromNanogramsPerDeciliter(kilogrampercubicmeter.NanogramsPerDeciliter).KilogramsPerCubicMeter, NanogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromNanogramsPerLiter(kilogrampercubicmeter.NanogramsPerLiter).KilogramsPerCubicMeter, NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromNanogramsPerMilliliter(kilogrampercubicmeter.NanogramsPerMilliliter).KilogramsPerCubicMeter, NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPicogramsPerDeciliter(kilogrampercubicmeter.PicogramsPerDeciliter).KilogramsPerCubicMeter, PicogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPicogramsPerLiter(kilogrampercubicmeter.PicogramsPerLiter).KilogramsPerCubicMeter, PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPicogramsPerMilliliter(kilogrampercubicmeter.PicogramsPerMilliliter).KilogramsPerCubicMeter, PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerCubicCentimeter(kilogrampercubicmeter.PoundsPerCubicCentimeter).KilogramsPerCubicMeter, PoundsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerCubicFoot(kilogrampercubicmeter.PoundsPerCubicFoot).KilogramsPerCubicMeter, PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerCubicInch(kilogrampercubicmeter.PoundsPerCubicInch).KilogramsPerCubicMeter, PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerCubicMeter(kilogrampercubicmeter.PoundsPerCubicMeter).KilogramsPerCubicMeter, PoundsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerCubicMillimeter(kilogrampercubicmeter.PoundsPerCubicMillimeter).KilogramsPerCubicMeter, PoundsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerCubicYard(kilogrampercubicmeter.PoundsPerCubicYard).KilogramsPerCubicMeter, PoundsPerCubicYardTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerImperialGallon(kilogrampercubicmeter.PoundsPerImperialGallon).KilogramsPerCubicMeter, PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(1, Density.FromPoundsPerUSGallon(kilogrampercubicmeter.PoundsPerUSGallon).KilogramsPerCubicMeter, PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(1, Density.FromSlugsPerCubicCentimeter(kilogrampercubicmeter.SlugsPerCubicCentimeter).KilogramsPerCubicMeter, SlugsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromSlugsPerCubicFoot(kilogrampercubicmeter.SlugsPerCubicFoot).KilogramsPerCubicMeter, SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, Density.FromSlugsPerCubicInch(kilogrampercubicmeter.SlugsPerCubicInch).KilogramsPerCubicMeter, SlugsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, Density.FromSlugsPerCubicMeter(kilogrampercubicmeter.SlugsPerCubicMeter).KilogramsPerCubicMeter, SlugsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromSlugsPerCubicMillimeter(kilogrampercubicmeter.SlugsPerCubicMillimeter).KilogramsPerCubicMeter, SlugsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromTonnesPerCubicCentimeter(kilogrampercubicmeter.TonnesPerCubicCentimeter).KilogramsPerCubicMeter, TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromTonnesPerCubicFoot(kilogrampercubicmeter.TonnesPerCubicFoot).KilogramsPerCubicMeter, TonnesPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, Density.FromTonnesPerCubicInch(kilogrampercubicmeter.TonnesPerCubicInch).KilogramsPerCubicMeter, TonnesPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, Density.FromTonnesPerCubicMeter(kilogrampercubicmeter.TonnesPerCubicMeter).KilogramsPerCubicMeter, TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, Density.FromTonnesPerCubicMillimeter(kilogrampercubicmeter.TonnesPerCubicMillimeter).KilogramsPerCubicMeter, TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Density v = Density.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(-1, -v.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (Density.FromKilogramsPerCubicMeter(3)-v).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (Density.FromKilogramsPerCubicMeter(10)/5).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, Density.FromKilogramsPerCubicMeter(10)/Density.FromKilogramsPerCubicMeter(5), KilogramsPerCubicMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Density oneKilogramPerCubicMeter = Density.FromKilogramsPerCubicMeter(1);
            Density twoKilogramsPerCubicMeter = Density.FromKilogramsPerCubicMeter(2);

            Assert.True(oneKilogramPerCubicMeter < twoKilogramsPerCubicMeter);
            Assert.True(oneKilogramPerCubicMeter <= twoKilogramsPerCubicMeter);
            Assert.True(twoKilogramsPerCubicMeter > oneKilogramPerCubicMeter);
            Assert.True(twoKilogramsPerCubicMeter >= oneKilogramPerCubicMeter);

            Assert.False(oneKilogramPerCubicMeter > twoKilogramsPerCubicMeter);
            Assert.False(oneKilogramPerCubicMeter >= twoKilogramsPerCubicMeter);
            Assert.False(twoKilogramsPerCubicMeter < oneKilogramPerCubicMeter);
            Assert.False(twoKilogramsPerCubicMeter <= oneKilogramPerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Equal(0, kilogrampercubicmeter.CompareTo(kilogrampercubicmeter));
            Assert.True(kilogrampercubicmeter.CompareTo(Density.Zero) > 0);
            Assert.True(Density.Zero.CompareTo(kilogrampercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => kilogrampercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => kilogrampercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, DensityUnit.KilogramPerCubicMeter, 1, DensityUnit.KilogramPerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, DensityUnit.KilogramPerCubicMeter, 2, DensityUnit.KilogramPerCubicMeter, false)] // Different value.
        [InlineData(2, DensityUnit.KilogramPerCubicMeter, 1, DensityUnit.CentigramPerDeciliter, false)] // Different value and unit.
        [InlineData(1, DensityUnit.KilogramPerCubicMeter, 1, DensityUnit.CentigramPerDeciliter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, DensityUnit unitA, double valueB, DensityUnit unitB, bool expectEqual)
        {
            var a = new Density(valueA, unitA);
            var b = new Density(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Density.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Density.FromKilogramsPerCubicMeter(1);
            Assert.True(v.Equals(Density.FromKilogramsPerCubicMeter(1), KilogramsPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Density.Zero, KilogramsPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.True(Density.FromKilogramsPerCubicMeter(100).Equals(Density.FromKilogramsPerCubicMeter(120), 0.3, ComparisonType.Relative));
            Assert.False(Density.FromKilogramsPerCubicMeter(100).Equals(Density.FromKilogramsPerCubicMeter(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Density.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Density.FromKilogramsPerCubicMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.False(kilogrampercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Density kilogrampercubicmeter = Density.FromKilogramsPerCubicMeter(1);
            Assert.False(kilogrampercubicmeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<DensityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Density.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cg/dl", new Density(1, DensityUnit.CentigramPerDeciliter).ToString());
            Assert.Equal("1 cg/l", new Density(1, DensityUnit.CentigramPerLiter).ToString());
            Assert.Equal("1 cg/ml", new Density(1, DensityUnit.CentigramPerMilliliter).ToString());
            Assert.Equal("1 dg/dl", new Density(1, DensityUnit.DecigramPerDeciliter).ToString());
            Assert.Equal("1 dg/l", new Density(1, DensityUnit.DecigramPerLiter).ToString());
            Assert.Equal("1 dg/ml", new Density(1, DensityUnit.DecigramPerMilliliter).ToString());
            Assert.Equal("1 fg/dl", new Density(1, DensityUnit.FemtogramPerDeciliter).ToString());
            Assert.Equal("1 fg/l", new Density(1, DensityUnit.FemtogramPerLiter).ToString());
            Assert.Equal("1 fg/ml", new Density(1, DensityUnit.FemtogramPerMilliliter).ToString());
            Assert.Equal("1 g/cm³", new Density(1, DensityUnit.GramPerCubicCentimeter).ToString());
            Assert.Equal("1 g/ft³", new Density(1, DensityUnit.GramPerCubicFoot).ToString());
            Assert.Equal("1 g/in³", new Density(1, DensityUnit.GramPerCubicInch).ToString());
            Assert.Equal("1 g/m³", new Density(1, DensityUnit.GramPerCubicMeter).ToString());
            Assert.Equal("1 g/mm³", new Density(1, DensityUnit.GramPerCubicMillimeter).ToString());
            Assert.Equal("1 g/dl", new Density(1, DensityUnit.GramPerDeciliter).ToString());
            Assert.Equal("1 g/l", new Density(1, DensityUnit.GramPerLiter).ToString());
            Assert.Equal("1 g/ml", new Density(1, DensityUnit.GramPerMilliliter).ToString());
            Assert.Equal("1 kg/cm³", new Density(1, DensityUnit.KilogramPerCubicCentimeter).ToString());
            Assert.Equal("1 kg/m³", new Density(1, DensityUnit.KilogramPerCubicMeter).ToString());
            Assert.Equal("1 kg/mm³", new Density(1, DensityUnit.KilogramPerCubicMillimeter).ToString());
            Assert.Equal("1 kg/l", new Density(1, DensityUnit.KilogramPerLiter).ToString());
            Assert.Equal("1 kip/ft³", new Density(1, DensityUnit.KilopoundPerCubicFoot).ToString());
            Assert.Equal("1 kip/in³", new Density(1, DensityUnit.KilopoundPerCubicInch).ToString());
            Assert.Equal("1 kip/yd³", new Density(1, DensityUnit.KilopoundPerCubicYard).ToString());
            Assert.Equal("1 µg/m³", new Density(1, DensityUnit.MicrogramPerCubicMeter).ToString());
            Assert.Equal("1 µg/dl", new Density(1, DensityUnit.MicrogramPerDeciliter).ToString());
            Assert.Equal("1 µg/l", new Density(1, DensityUnit.MicrogramPerLiter).ToString());
            Assert.Equal("1 µg/ml", new Density(1, DensityUnit.MicrogramPerMilliliter).ToString());
            Assert.Equal("1 mg/m³", new Density(1, DensityUnit.MilligramPerCubicMeter).ToString());
            Assert.Equal("1 mg/dl", new Density(1, DensityUnit.MilligramPerDeciliter).ToString());
            Assert.Equal("1 mg/l", new Density(1, DensityUnit.MilligramPerLiter).ToString());
            Assert.Equal("1 mg/ml", new Density(1, DensityUnit.MilligramPerMilliliter).ToString());
            Assert.Equal("1 ng/dl", new Density(1, DensityUnit.NanogramPerDeciliter).ToString());
            Assert.Equal("1 ng/l", new Density(1, DensityUnit.NanogramPerLiter).ToString());
            Assert.Equal("1 ng/ml", new Density(1, DensityUnit.NanogramPerMilliliter).ToString());
            Assert.Equal("1 pg/dl", new Density(1, DensityUnit.PicogramPerDeciliter).ToString());
            Assert.Equal("1 pg/l", new Density(1, DensityUnit.PicogramPerLiter).ToString());
            Assert.Equal("1 pg/ml", new Density(1, DensityUnit.PicogramPerMilliliter).ToString());
            Assert.Equal("1 lb/cm³", new Density(1, DensityUnit.PoundPerCubicCentimeter).ToString());
            Assert.Equal("1 lb/ft³", new Density(1, DensityUnit.PoundPerCubicFoot).ToString());
            Assert.Equal("1 lb/in³", new Density(1, DensityUnit.PoundPerCubicInch).ToString());
            Assert.Equal("1 lb/m³", new Density(1, DensityUnit.PoundPerCubicMeter).ToString());
            Assert.Equal("1 lb/mm³", new Density(1, DensityUnit.PoundPerCubicMillimeter).ToString());
            Assert.Equal("1 lb/yd³", new Density(1, DensityUnit.PoundPerCubicYard).ToString());
            Assert.Equal("1 ppg (imp.)", new Density(1, DensityUnit.PoundPerImperialGallon).ToString());
            Assert.Equal("1 ppg (U.S.)", new Density(1, DensityUnit.PoundPerUSGallon).ToString());
            Assert.Equal("1 slug/cm³", new Density(1, DensityUnit.SlugPerCubicCentimeter).ToString());
            Assert.Equal("1 slug/ft³", new Density(1, DensityUnit.SlugPerCubicFoot).ToString());
            Assert.Equal("1 slug/in³", new Density(1, DensityUnit.SlugPerCubicInch).ToString());
            Assert.Equal("1 slug/m³", new Density(1, DensityUnit.SlugPerCubicMeter).ToString());
            Assert.Equal("1 slug/mm³", new Density(1, DensityUnit.SlugPerCubicMillimeter).ToString());
            Assert.Equal("1 t/cm³", new Density(1, DensityUnit.TonnePerCubicCentimeter).ToString());
            Assert.Equal("1 t/ft³", new Density(1, DensityUnit.TonnePerCubicFoot).ToString());
            Assert.Equal("1 t/in³", new Density(1, DensityUnit.TonnePerCubicInch).ToString());
            Assert.Equal("1 t/m³", new Density(1, DensityUnit.TonnePerCubicMeter).ToString());
            Assert.Equal("1 t/mm³", new Density(1, DensityUnit.TonnePerCubicMillimeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg/dl", new Density(1, DensityUnit.CentigramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 cg/l", new Density(1, DensityUnit.CentigramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 cg/ml", new Density(1, DensityUnit.CentigramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 dg/dl", new Density(1, DensityUnit.DecigramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 dg/l", new Density(1, DensityUnit.DecigramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 dg/ml", new Density(1, DensityUnit.DecigramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 fg/dl", new Density(1, DensityUnit.FemtogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 fg/l", new Density(1, DensityUnit.FemtogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 fg/ml", new Density(1, DensityUnit.FemtogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 g/cm³", new Density(1, DensityUnit.GramPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 g/ft³", new Density(1, DensityUnit.GramPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 g/in³", new Density(1, DensityUnit.GramPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 g/m³", new Density(1, DensityUnit.GramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 g/mm³", new Density(1, DensityUnit.GramPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 g/dl", new Density(1, DensityUnit.GramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 g/l", new Density(1, DensityUnit.GramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 g/ml", new Density(1, DensityUnit.GramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 kg/cm³", new Density(1, DensityUnit.KilogramPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/m³", new Density(1, DensityUnit.KilogramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kg/mm³", new Density(1, DensityUnit.KilogramPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/l", new Density(1, DensityUnit.KilogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 kip/ft³", new Density(1, DensityUnit.KilopoundPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 kip/in³", new Density(1, DensityUnit.KilopoundPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 kip/yd³", new Density(1, DensityUnit.KilopoundPerCubicYard).ToString(swedishCulture));
            Assert.Equal("1 µg/m³", new Density(1, DensityUnit.MicrogramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µg/dl", new Density(1, DensityUnit.MicrogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 µg/l", new Density(1, DensityUnit.MicrogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 µg/ml", new Density(1, DensityUnit.MicrogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 mg/m³", new Density(1, DensityUnit.MilligramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mg/dl", new Density(1, DensityUnit.MilligramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 mg/l", new Density(1, DensityUnit.MilligramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 mg/ml", new Density(1, DensityUnit.MilligramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 ng/dl", new Density(1, DensityUnit.NanogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 ng/l", new Density(1, DensityUnit.NanogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 ng/ml", new Density(1, DensityUnit.NanogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 pg/dl", new Density(1, DensityUnit.PicogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 pg/l", new Density(1, DensityUnit.PicogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 pg/ml", new Density(1, DensityUnit.PicogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 lb/cm³", new Density(1, DensityUnit.PoundPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 lb/ft³", new Density(1, DensityUnit.PoundPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 lb/in³", new Density(1, DensityUnit.PoundPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 lb/m³", new Density(1, DensityUnit.PoundPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 lb/mm³", new Density(1, DensityUnit.PoundPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 lb/yd³", new Density(1, DensityUnit.PoundPerCubicYard).ToString(swedishCulture));
            Assert.Equal("1 ppg (imp.)", new Density(1, DensityUnit.PoundPerImperialGallon).ToString(swedishCulture));
            Assert.Equal("1 ppg (U.S.)", new Density(1, DensityUnit.PoundPerUSGallon).ToString(swedishCulture));
            Assert.Equal("1 slug/cm³", new Density(1, DensityUnit.SlugPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 slug/ft³", new Density(1, DensityUnit.SlugPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 slug/in³", new Density(1, DensityUnit.SlugPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 slug/m³", new Density(1, DensityUnit.SlugPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 slug/mm³", new Density(1, DensityUnit.SlugPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 t/cm³", new Density(1, DensityUnit.TonnePerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 t/ft³", new Density(1, DensityUnit.TonnePerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 t/in³", new Density(1, DensityUnit.TonnePerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 t/m³", new Density(1, DensityUnit.TonnePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 t/mm³", new Density(1, DensityUnit.TonnePerCubicMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s1"));
            Assert.Equal("0.12 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s2"));
            Assert.Equal("0.123 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s3"));
            Assert.Equal("0.1235 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 kg/m³", new Density(0.123456, DensityUnit.KilogramPerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Density.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(new {Density.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Density.FromKilogramsPerCubicMeter(value);
            Assert.Equal(Density.FromKilogramsPerCubicMeter(-value), -quantity);
        }
    }
}
