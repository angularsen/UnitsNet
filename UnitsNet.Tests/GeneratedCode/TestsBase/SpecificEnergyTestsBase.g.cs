//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of SpecificEnergy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpecificEnergyTestsBase : QuantityTestsBase
    {
        protected abstract double BtuPerPoundInOneJoulePerKilogram { get; }
        protected abstract double CaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double GigawattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double GigawattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double GigawattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double GigawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double GigawattHoursPerPoundInOneJoulePerKilogram { get; }
        protected abstract double JoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilocaloriesPerGramInOneJoulePerKilogram { get; }
        protected abstract double KilojoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilowattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilowattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double KilowattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double KilowattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double KilowattHoursPerPoundInOneJoulePerKilogram { get; }
        protected abstract double MegajoulesPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MegajoulesPerTonneInOneJoulePerKilogram { get; }
        protected abstract double MegawattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MegawattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double MegawattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double MegawattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double MegawattHoursPerPoundInOneJoulePerKilogram { get; }
        protected abstract double TerawattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double TerawattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double TerawattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double WattDaysPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double WattDaysPerShortTonInOneJoulePerKilogram { get; }
        protected abstract double WattDaysPerTonneInOneJoulePerKilogram { get; }
        protected abstract double WattHoursPerKilogramInOneJoulePerKilogram { get; }
        protected abstract double WattHoursPerPoundInOneJoulePerKilogram { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BtuPerPoundTolerance { get { return 1e-5; } }
        protected virtual double CaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double GigawattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double GigawattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double GigawattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursPerPoundTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesPerGramTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilowattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilowattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double KilowattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerPoundTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerTonneTolerance { get { return 1e-5; } }
        protected virtual double MegawattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegawattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double MegawattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursPerPoundTolerance { get { return 1e-5; } }
        protected virtual double TerawattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double TerawattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double TerawattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double WattDaysPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double WattDaysPerShortTonTolerance { get { return 1e-5; } }
        protected virtual double WattDaysPerTonneTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerPoundTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(SpecificEnergyUnit unit)
        {
            return unit switch
            {
                SpecificEnergyUnit.BtuPerPound => (BtuPerPoundInOneJoulePerKilogram, BtuPerPoundTolerance),
                SpecificEnergyUnit.CaloriePerGram => (CaloriesPerGramInOneJoulePerKilogram, CaloriesPerGramTolerance),
                SpecificEnergyUnit.GigawattDayPerKilogram => (GigawattDaysPerKilogramInOneJoulePerKilogram, GigawattDaysPerKilogramTolerance),
                SpecificEnergyUnit.GigawattDayPerShortTon => (GigawattDaysPerShortTonInOneJoulePerKilogram, GigawattDaysPerShortTonTolerance),
                SpecificEnergyUnit.GigawattDayPerTonne => (GigawattDaysPerTonneInOneJoulePerKilogram, GigawattDaysPerTonneTolerance),
                SpecificEnergyUnit.GigawattHourPerKilogram => (GigawattHoursPerKilogramInOneJoulePerKilogram, GigawattHoursPerKilogramTolerance),
                SpecificEnergyUnit.GigawattHourPerPound => (GigawattHoursPerPoundInOneJoulePerKilogram, GigawattHoursPerPoundTolerance),
                SpecificEnergyUnit.JoulePerKilogram => (JoulesPerKilogramInOneJoulePerKilogram, JoulesPerKilogramTolerance),
                SpecificEnergyUnit.KilocaloriePerGram => (KilocaloriesPerGramInOneJoulePerKilogram, KilocaloriesPerGramTolerance),
                SpecificEnergyUnit.KilojoulePerKilogram => (KilojoulesPerKilogramInOneJoulePerKilogram, KilojoulesPerKilogramTolerance),
                SpecificEnergyUnit.KilowattDayPerKilogram => (KilowattDaysPerKilogramInOneJoulePerKilogram, KilowattDaysPerKilogramTolerance),
                SpecificEnergyUnit.KilowattDayPerShortTon => (KilowattDaysPerShortTonInOneJoulePerKilogram, KilowattDaysPerShortTonTolerance),
                SpecificEnergyUnit.KilowattDayPerTonne => (KilowattDaysPerTonneInOneJoulePerKilogram, KilowattDaysPerTonneTolerance),
                SpecificEnergyUnit.KilowattHourPerKilogram => (KilowattHoursPerKilogramInOneJoulePerKilogram, KilowattHoursPerKilogramTolerance),
                SpecificEnergyUnit.KilowattHourPerPound => (KilowattHoursPerPoundInOneJoulePerKilogram, KilowattHoursPerPoundTolerance),
                SpecificEnergyUnit.MegajoulePerKilogram => (MegajoulesPerKilogramInOneJoulePerKilogram, MegajoulesPerKilogramTolerance),
                SpecificEnergyUnit.MegajoulePerTonne => (MegajoulesPerTonneInOneJoulePerKilogram, MegajoulesPerTonneTolerance),
                SpecificEnergyUnit.MegawattDayPerKilogram => (MegawattDaysPerKilogramInOneJoulePerKilogram, MegawattDaysPerKilogramTolerance),
                SpecificEnergyUnit.MegawattDayPerShortTon => (MegawattDaysPerShortTonInOneJoulePerKilogram, MegawattDaysPerShortTonTolerance),
                SpecificEnergyUnit.MegawattDayPerTonne => (MegawattDaysPerTonneInOneJoulePerKilogram, MegawattDaysPerTonneTolerance),
                SpecificEnergyUnit.MegawattHourPerKilogram => (MegawattHoursPerKilogramInOneJoulePerKilogram, MegawattHoursPerKilogramTolerance),
                SpecificEnergyUnit.MegawattHourPerPound => (MegawattHoursPerPoundInOneJoulePerKilogram, MegawattHoursPerPoundTolerance),
                SpecificEnergyUnit.TerawattDayPerKilogram => (TerawattDaysPerKilogramInOneJoulePerKilogram, TerawattDaysPerKilogramTolerance),
                SpecificEnergyUnit.TerawattDayPerShortTon => (TerawattDaysPerShortTonInOneJoulePerKilogram, TerawattDaysPerShortTonTolerance),
                SpecificEnergyUnit.TerawattDayPerTonne => (TerawattDaysPerTonneInOneJoulePerKilogram, TerawattDaysPerTonneTolerance),
                SpecificEnergyUnit.WattDayPerKilogram => (WattDaysPerKilogramInOneJoulePerKilogram, WattDaysPerKilogramTolerance),
                SpecificEnergyUnit.WattDayPerShortTon => (WattDaysPerShortTonInOneJoulePerKilogram, WattDaysPerShortTonTolerance),
                SpecificEnergyUnit.WattDayPerTonne => (WattDaysPerTonneInOneJoulePerKilogram, WattDaysPerTonneTolerance),
                SpecificEnergyUnit.WattHourPerKilogram => (WattHoursPerKilogramInOneJoulePerKilogram, WattHoursPerKilogramTolerance),
                SpecificEnergyUnit.WattHourPerPound => (WattHoursPerPoundInOneJoulePerKilogram, WattHoursPerPoundTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { SpecificEnergyUnit.BtuPerPound },
            new object[] { SpecificEnergyUnit.CaloriePerGram },
            new object[] { SpecificEnergyUnit.GigawattDayPerKilogram },
            new object[] { SpecificEnergyUnit.GigawattDayPerShortTon },
            new object[] { SpecificEnergyUnit.GigawattDayPerTonne },
            new object[] { SpecificEnergyUnit.GigawattHourPerKilogram },
            new object[] { SpecificEnergyUnit.GigawattHourPerPound },
            new object[] { SpecificEnergyUnit.JoulePerKilogram },
            new object[] { SpecificEnergyUnit.KilocaloriePerGram },
            new object[] { SpecificEnergyUnit.KilojoulePerKilogram },
            new object[] { SpecificEnergyUnit.KilowattDayPerKilogram },
            new object[] { SpecificEnergyUnit.KilowattDayPerShortTon },
            new object[] { SpecificEnergyUnit.KilowattDayPerTonne },
            new object[] { SpecificEnergyUnit.KilowattHourPerKilogram },
            new object[] { SpecificEnergyUnit.KilowattHourPerPound },
            new object[] { SpecificEnergyUnit.MegajoulePerKilogram },
            new object[] { SpecificEnergyUnit.MegajoulePerTonne },
            new object[] { SpecificEnergyUnit.MegawattDayPerKilogram },
            new object[] { SpecificEnergyUnit.MegawattDayPerShortTon },
            new object[] { SpecificEnergyUnit.MegawattDayPerTonne },
            new object[] { SpecificEnergyUnit.MegawattHourPerKilogram },
            new object[] { SpecificEnergyUnit.MegawattHourPerPound },
            new object[] { SpecificEnergyUnit.TerawattDayPerKilogram },
            new object[] { SpecificEnergyUnit.TerawattDayPerShortTon },
            new object[] { SpecificEnergyUnit.TerawattDayPerTonne },
            new object[] { SpecificEnergyUnit.WattDayPerKilogram },
            new object[] { SpecificEnergyUnit.WattDayPerShortTon },
            new object[] { SpecificEnergyUnit.WattDayPerTonne },
            new object[] { SpecificEnergyUnit.WattHourPerKilogram },
            new object[] { SpecificEnergyUnit.WattHourPerPound },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new SpecificEnergy();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(SpecificEnergyUnit.JoulePerKilogram, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new SpecificEnergy(double.PositiveInfinity, SpecificEnergyUnit.JoulePerKilogram));
            var exception2 = Record.Exception(() => new SpecificEnergy(double.NegativeInfinity, SpecificEnergyUnit.JoulePerKilogram));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new SpecificEnergy(double.NaN, SpecificEnergyUnit.JoulePerKilogram));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new SpecificEnergy(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new SpecificEnergy(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new SpecificEnergy(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void SpecificEnergy_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            SpecificEnergyUnit[] unitsOrderedByName = EnumHelper.GetValues<SpecificEnergyUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new SpecificEnergy(1, SpecificEnergyUnit.JoulePerKilogram);

            QuantityInfo<SpecificEnergy, SpecificEnergyUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("SpecificEnergy", quantityInfo.Name);
            Assert.Equal(SpecificEnergy.Zero, quantityInfo.Zero);
            Assert.Equal(SpecificEnergy.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(SpecificEnergy.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<SpecificEnergyUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void JoulePerKilogramToSpecificEnergyUnits()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(BtuPerPoundInOneJoulePerKilogram, jouleperkilogram.BtuPerPound, BtuPerPoundTolerance);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.CaloriesPerGram, CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.GigawattDaysPerKilogram, GigawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.GigawattDaysPerShortTon, GigawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.GigawattDaysPerTonne, GigawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.GigawattHoursPerKilogram, GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.GigawattHoursPerPound, GigawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.KilocaloriesPerGram, KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.KilojoulesPerKilogram, KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.KilowattDaysPerKilogram, KilowattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.KilowattDaysPerShortTon, KilowattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.KilowattDaysPerTonne, KilowattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.KilowattHoursPerKilogram, KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.KilowattHoursPerPound, KilowattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.MegajoulesPerKilogram, MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MegajoulesPerTonneInOneJoulePerKilogram, jouleperkilogram.MegajoulesPerTonne, MegajoulesPerTonneTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.MegawattDaysPerKilogram, MegawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.MegawattDaysPerShortTon, MegawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.MegawattDaysPerTonne, MegawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.MegawattHoursPerKilogram, MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.MegawattHoursPerPound, MegawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.TerawattDaysPerKilogram, TerawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.TerawattDaysPerShortTon, TerawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.TerawattDaysPerTonne, TerawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(WattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.WattDaysPerKilogram, WattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(WattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.WattDaysPerShortTon, WattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(WattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.WattDaysPerTonne, WattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(WattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.WattHoursPerKilogram, WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(WattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.WattHoursPerPound, WattHoursPerPoundTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<SpecificEnergyUnit>(), unit =>
            {
                var quantity = SpecificEnergy.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromJoulesPerKilogram_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => SpecificEnergy.FromJoulesPerKilogram(double.PositiveInfinity));
            var exception2 = Record.Exception(() => SpecificEnergy.FromJoulesPerKilogram(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromJoulesPerKilogram_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => SpecificEnergy.FromJoulesPerKilogram(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(BtuPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.BtuPerPound), BtuPerPoundTolerance);
            AssertEx.EqualTolerance(CaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.CaloriePerGram), CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattDayPerKilogram), GigawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattDayPerShortTon), GigawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(GigawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattDayPerTonne), GigawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattHourPerKilogram), GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.GigawattHourPerPound), GigawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(JoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.JoulePerKilogram), JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerGramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilocaloriePerGram), KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(KilojoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilojoulePerKilogram), KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattDayPerKilogram), KilowattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattDayPerShortTon), KilowattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(KilowattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattDayPerTonne), KilowattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattHourPerKilogram), KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.KilowattHourPerPound), KilowattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(MegajoulesPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegajoulePerKilogram), MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(MegajoulesPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegajoulePerTonne), MegajoulesPerTonneTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattDayPerKilogram), MegawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattDayPerShortTon), MegawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(MegawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattDayPerTonne), MegawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattHourPerKilogram), MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.MegawattHourPerPound), MegawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.TerawattDayPerKilogram), TerawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.TerawattDayPerShortTon), TerawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(TerawattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.TerawattDayPerTonne), TerawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(WattDaysPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattDayPerKilogram), WattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(WattDaysPerShortTonInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattDayPerShortTon), WattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(WattDaysPerTonneInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattDayPerTonne), WattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(WattHoursPerKilogramInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattHourPerKilogram), WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(WattHoursPerPoundInOneJoulePerKilogram, jouleperkilogram.As(SpecificEnergyUnit.WattHourPerPound), WattHoursPerPoundTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = SpecificEnergy.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
            var expectedValue = quantity.As(SpecificEnergy.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
            var expectedUnit = SpecificEnergy.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                SpecificEnergy quantityToConvert = quantity;

                SpecificEnergy convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<SpecificEnergyUnit> quantityToConvert = quantity;

                IQuantity<SpecificEnergyUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<SpecificEnergyUnit> quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<SpecificEnergyUnit> quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new SpecificEnergy(value: 1, unit: SpecificEnergy.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 btu/lb", SpecificEnergyUnit.BtuPerPound, 4.2)]
        [InlineData("en-US", "4.2 cal/g", SpecificEnergyUnit.CaloriePerGram, 4.2)]
        [InlineData("en-US", "4.2 GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 GWd/t", SpecificEnergyUnit.GigawattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound, 4.2)]
        [InlineData("en-US", "4.2 J/kg", SpecificEnergyUnit.JoulePerKilogram, 4.2)]
        [InlineData("en-US", "4.2 kcal/g", SpecificEnergyUnit.KilocaloriePerGram, 4.2)]
        [InlineData("en-US", "4.2 kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram, 4.2)]
        [InlineData("en-US", "4.2 kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 kWd/t", SpecificEnergyUnit.KilowattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound, 4.2)]
        [InlineData("en-US", "4.2 MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram, 4.2)]
        [InlineData("en-US", "4.2 MJ/t", SpecificEnergyUnit.MegajoulePerTonne, 4.2)]
        [InlineData("en-US", "4.2 MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 MWd/t", SpecificEnergyUnit.MegawattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound, 4.2)]
        [InlineData("en-US", "4.2 TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 TWd/t", SpecificEnergyUnit.TerawattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 Wd/kg", SpecificEnergyUnit.WattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 Wd/ST", SpecificEnergyUnit.WattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 Wd/t", SpecificEnergyUnit.WattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 Wh/kg", SpecificEnergyUnit.WattHourPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 Wh/lbs", SpecificEnergyUnit.WattHourPerPound, 4.2)]
        public void Parse(string culture, string quantityString, SpecificEnergyUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = SpecificEnergy.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 btu/lb", SpecificEnergyUnit.BtuPerPound, 4.2)]
        [InlineData("en-US", "4.2 cal/g", SpecificEnergyUnit.CaloriePerGram, 4.2)]
        [InlineData("en-US", "4.2 GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 GWd/t", SpecificEnergyUnit.GigawattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound, 4.2)]
        [InlineData("en-US", "4.2 J/kg", SpecificEnergyUnit.JoulePerKilogram, 4.2)]
        [InlineData("en-US", "4.2 kcal/g", SpecificEnergyUnit.KilocaloriePerGram, 4.2)]
        [InlineData("en-US", "4.2 kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram, 4.2)]
        [InlineData("en-US", "4.2 kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 kWd/t", SpecificEnergyUnit.KilowattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound, 4.2)]
        [InlineData("en-US", "4.2 MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram, 4.2)]
        [InlineData("en-US", "4.2 MJ/t", SpecificEnergyUnit.MegajoulePerTonne, 4.2)]
        [InlineData("en-US", "4.2 MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 MWd/t", SpecificEnergyUnit.MegawattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound, 4.2)]
        [InlineData("en-US", "4.2 TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 TWd/t", SpecificEnergyUnit.TerawattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 Wd/kg", SpecificEnergyUnit.WattDayPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 Wd/ST", SpecificEnergyUnit.WattDayPerShortTon, 4.2)]
        [InlineData("en-US", "4.2 Wd/t", SpecificEnergyUnit.WattDayPerTonne, 4.2)]
        [InlineData("en-US", "4.2 Wh/kg", SpecificEnergyUnit.WattHourPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 Wh/lbs", SpecificEnergyUnit.WattHourPerPound, 4.2)]
        public void TryParse(string culture, string quantityString, SpecificEnergyUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(SpecificEnergy.TryParse(quantityString, out SpecificEnergy parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("btu/lb", SpecificEnergyUnit.BtuPerPound)]
        [InlineData("cal/g", SpecificEnergyUnit.CaloriePerGram)]
        [InlineData("GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram)]
        [InlineData("GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon)]
        [InlineData("GWd/t", SpecificEnergyUnit.GigawattDayPerTonne)]
        [InlineData("GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram)]
        [InlineData("GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound)]
        [InlineData("J/kg", SpecificEnergyUnit.JoulePerKilogram)]
        [InlineData("kcal/g", SpecificEnergyUnit.KilocaloriePerGram)]
        [InlineData("kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram)]
        [InlineData("kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram)]
        [InlineData("kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon)]
        [InlineData("kWd/t", SpecificEnergyUnit.KilowattDayPerTonne)]
        [InlineData("kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram)]
        [InlineData("kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound)]
        [InlineData("MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram)]
        [InlineData("MJ/t", SpecificEnergyUnit.MegajoulePerTonne)]
        [InlineData("MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram)]
        [InlineData("MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon)]
        [InlineData("MWd/t", SpecificEnergyUnit.MegawattDayPerTonne)]
        [InlineData("MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram)]
        [InlineData("MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound)]
        [InlineData("TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram)]
        [InlineData("TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon)]
        [InlineData("TWd/t", SpecificEnergyUnit.TerawattDayPerTonne)]
        [InlineData("Wd/kg", SpecificEnergyUnit.WattDayPerKilogram)]
        [InlineData("Wd/ST", SpecificEnergyUnit.WattDayPerShortTon)]
        [InlineData("Wd/t", SpecificEnergyUnit.WattDayPerTonne)]
        [InlineData("Wh/kg", SpecificEnergyUnit.WattHourPerKilogram)]
        [InlineData("Wh/lbs", SpecificEnergyUnit.WattHourPerPound)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, SpecificEnergyUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            SpecificEnergyUnit parsedUnit = SpecificEnergy.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("btu/lb", SpecificEnergyUnit.BtuPerPound)]
        [InlineData("cal/g", SpecificEnergyUnit.CaloriePerGram)]
        [InlineData("GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram)]
        [InlineData("GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon)]
        [InlineData("GWd/t", SpecificEnergyUnit.GigawattDayPerTonne)]
        [InlineData("GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram)]
        [InlineData("GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound)]
        [InlineData("J/kg", SpecificEnergyUnit.JoulePerKilogram)]
        [InlineData("kcal/g", SpecificEnergyUnit.KilocaloriePerGram)]
        [InlineData("kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram)]
        [InlineData("kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram)]
        [InlineData("kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon)]
        [InlineData("kWd/t", SpecificEnergyUnit.KilowattDayPerTonne)]
        [InlineData("kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram)]
        [InlineData("kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound)]
        [InlineData("MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram)]
        [InlineData("MJ/t", SpecificEnergyUnit.MegajoulePerTonne)]
        [InlineData("MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram)]
        [InlineData("MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon)]
        [InlineData("MWd/t", SpecificEnergyUnit.MegawattDayPerTonne)]
        [InlineData("MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram)]
        [InlineData("MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound)]
        [InlineData("TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram)]
        [InlineData("TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon)]
        [InlineData("TWd/t", SpecificEnergyUnit.TerawattDayPerTonne)]
        [InlineData("Wd/kg", SpecificEnergyUnit.WattDayPerKilogram)]
        [InlineData("Wd/ST", SpecificEnergyUnit.WattDayPerShortTon)]
        [InlineData("Wd/t", SpecificEnergyUnit.WattDayPerTonne)]
        [InlineData("Wh/kg", SpecificEnergyUnit.WattHourPerKilogram)]
        [InlineData("Wh/lbs", SpecificEnergyUnit.WattHourPerPound)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, SpecificEnergyUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            SpecificEnergyUnit parsedUnit = SpecificEnergy.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "btu/lb", SpecificEnergyUnit.BtuPerPound)]
        [InlineData("en-US", "cal/g", SpecificEnergyUnit.CaloriePerGram)]
        [InlineData("en-US", "GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram)]
        [InlineData("en-US", "GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon)]
        [InlineData("en-US", "GWd/t", SpecificEnergyUnit.GigawattDayPerTonne)]
        [InlineData("en-US", "GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram)]
        [InlineData("en-US", "GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound)]
        [InlineData("en-US", "J/kg", SpecificEnergyUnit.JoulePerKilogram)]
        [InlineData("en-US", "kcal/g", SpecificEnergyUnit.KilocaloriePerGram)]
        [InlineData("en-US", "kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram)]
        [InlineData("en-US", "kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram)]
        [InlineData("en-US", "kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon)]
        [InlineData("en-US", "kWd/t", SpecificEnergyUnit.KilowattDayPerTonne)]
        [InlineData("en-US", "kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram)]
        [InlineData("en-US", "kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound)]
        [InlineData("en-US", "MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram)]
        [InlineData("en-US", "MJ/t", SpecificEnergyUnit.MegajoulePerTonne)]
        [InlineData("en-US", "MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram)]
        [InlineData("en-US", "MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon)]
        [InlineData("en-US", "MWd/t", SpecificEnergyUnit.MegawattDayPerTonne)]
        [InlineData("en-US", "MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram)]
        [InlineData("en-US", "MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound)]
        [InlineData("en-US", "TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram)]
        [InlineData("en-US", "TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon)]
        [InlineData("en-US", "TWd/t", SpecificEnergyUnit.TerawattDayPerTonne)]
        [InlineData("en-US", "Wd/kg", SpecificEnergyUnit.WattDayPerKilogram)]
        [InlineData("en-US", "Wd/ST", SpecificEnergyUnit.WattDayPerShortTon)]
        [InlineData("en-US", "Wd/t", SpecificEnergyUnit.WattDayPerTonne)]
        [InlineData("en-US", "Wh/kg", SpecificEnergyUnit.WattHourPerKilogram)]
        [InlineData("en-US", "Wh/lbs", SpecificEnergyUnit.WattHourPerPound)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, SpecificEnergyUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            SpecificEnergyUnit parsedUnit = SpecificEnergy.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "btu/lb", SpecificEnergyUnit.BtuPerPound)]
        [InlineData("en-US", "cal/g", SpecificEnergyUnit.CaloriePerGram)]
        [InlineData("en-US", "GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram)]
        [InlineData("en-US", "GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon)]
        [InlineData("en-US", "GWd/t", SpecificEnergyUnit.GigawattDayPerTonne)]
        [InlineData("en-US", "GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram)]
        [InlineData("en-US", "GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound)]
        [InlineData("en-US", "J/kg", SpecificEnergyUnit.JoulePerKilogram)]
        [InlineData("en-US", "kcal/g", SpecificEnergyUnit.KilocaloriePerGram)]
        [InlineData("en-US", "kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram)]
        [InlineData("en-US", "kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram)]
        [InlineData("en-US", "kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon)]
        [InlineData("en-US", "kWd/t", SpecificEnergyUnit.KilowattDayPerTonne)]
        [InlineData("en-US", "kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram)]
        [InlineData("en-US", "kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound)]
        [InlineData("en-US", "MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram)]
        [InlineData("en-US", "MJ/t", SpecificEnergyUnit.MegajoulePerTonne)]
        [InlineData("en-US", "MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram)]
        [InlineData("en-US", "MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon)]
        [InlineData("en-US", "MWd/t", SpecificEnergyUnit.MegawattDayPerTonne)]
        [InlineData("en-US", "MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram)]
        [InlineData("en-US", "MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound)]
        [InlineData("en-US", "TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram)]
        [InlineData("en-US", "TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon)]
        [InlineData("en-US", "TWd/t", SpecificEnergyUnit.TerawattDayPerTonne)]
        [InlineData("en-US", "Wd/kg", SpecificEnergyUnit.WattDayPerKilogram)]
        [InlineData("en-US", "Wd/ST", SpecificEnergyUnit.WattDayPerShortTon)]
        [InlineData("en-US", "Wd/t", SpecificEnergyUnit.WattDayPerTonne)]
        [InlineData("en-US", "Wh/kg", SpecificEnergyUnit.WattHourPerKilogram)]
        [InlineData("en-US", "Wh/lbs", SpecificEnergyUnit.WattHourPerPound)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, SpecificEnergyUnit expectedUnit)
        {
            SpecificEnergyUnit parsedUnit = SpecificEnergy.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("btu/lb", SpecificEnergyUnit.BtuPerPound)]
        [InlineData("cal/g", SpecificEnergyUnit.CaloriePerGram)]
        [InlineData("GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram)]
        [InlineData("GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon)]
        [InlineData("GWd/t", SpecificEnergyUnit.GigawattDayPerTonne)]
        [InlineData("GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram)]
        [InlineData("GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound)]
        [InlineData("J/kg", SpecificEnergyUnit.JoulePerKilogram)]
        [InlineData("kcal/g", SpecificEnergyUnit.KilocaloriePerGram)]
        [InlineData("kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram)]
        [InlineData("kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram)]
        [InlineData("kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon)]
        [InlineData("kWd/t", SpecificEnergyUnit.KilowattDayPerTonne)]
        [InlineData("kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram)]
        [InlineData("kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound)]
        [InlineData("MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram)]
        [InlineData("MJ/t", SpecificEnergyUnit.MegajoulePerTonne)]
        [InlineData("MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram)]
        [InlineData("MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon)]
        [InlineData("MWd/t", SpecificEnergyUnit.MegawattDayPerTonne)]
        [InlineData("MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram)]
        [InlineData("MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound)]
        [InlineData("TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram)]
        [InlineData("TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon)]
        [InlineData("TWd/t", SpecificEnergyUnit.TerawattDayPerTonne)]
        [InlineData("Wd/kg", SpecificEnergyUnit.WattDayPerKilogram)]
        [InlineData("Wd/ST", SpecificEnergyUnit.WattDayPerShortTon)]
        [InlineData("Wd/t", SpecificEnergyUnit.WattDayPerTonne)]
        [InlineData("Wh/kg", SpecificEnergyUnit.WattHourPerKilogram)]
        [InlineData("Wh/lbs", SpecificEnergyUnit.WattHourPerPound)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, SpecificEnergyUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(SpecificEnergy.TryParseUnit(abbreviation, out SpecificEnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("btu/lb", SpecificEnergyUnit.BtuPerPound)]
        [InlineData("cal/g", SpecificEnergyUnit.CaloriePerGram)]
        [InlineData("GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram)]
        [InlineData("GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon)]
        [InlineData("GWd/t", SpecificEnergyUnit.GigawattDayPerTonne)]
        [InlineData("GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram)]
        [InlineData("GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound)]
        [InlineData("J/kg", SpecificEnergyUnit.JoulePerKilogram)]
        [InlineData("kcal/g", SpecificEnergyUnit.KilocaloriePerGram)]
        [InlineData("kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram)]
        [InlineData("kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram)]
        [InlineData("kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon)]
        [InlineData("kWd/t", SpecificEnergyUnit.KilowattDayPerTonne)]
        [InlineData("kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram)]
        [InlineData("kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound)]
        [InlineData("MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram)]
        [InlineData("MJ/t", SpecificEnergyUnit.MegajoulePerTonne)]
        [InlineData("MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram)]
        [InlineData("MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon)]
        [InlineData("MWd/t", SpecificEnergyUnit.MegawattDayPerTonne)]
        [InlineData("MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram)]
        [InlineData("MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound)]
        [InlineData("TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram)]
        [InlineData("TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon)]
        [InlineData("TWd/t", SpecificEnergyUnit.TerawattDayPerTonne)]
        [InlineData("Wd/kg", SpecificEnergyUnit.WattDayPerKilogram)]
        [InlineData("Wd/ST", SpecificEnergyUnit.WattDayPerShortTon)]
        [InlineData("Wd/t", SpecificEnergyUnit.WattDayPerTonne)]
        [InlineData("Wh/kg", SpecificEnergyUnit.WattHourPerKilogram)]
        [InlineData("Wh/lbs", SpecificEnergyUnit.WattHourPerPound)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, SpecificEnergyUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(SpecificEnergy.TryParseUnit(abbreviation, out SpecificEnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "btu/lb", SpecificEnergyUnit.BtuPerPound)]
        [InlineData("en-US", "cal/g", SpecificEnergyUnit.CaloriePerGram)]
        [InlineData("en-US", "GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram)]
        [InlineData("en-US", "GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon)]
        [InlineData("en-US", "GWd/t", SpecificEnergyUnit.GigawattDayPerTonne)]
        [InlineData("en-US", "GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram)]
        [InlineData("en-US", "GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound)]
        [InlineData("en-US", "J/kg", SpecificEnergyUnit.JoulePerKilogram)]
        [InlineData("en-US", "kcal/g", SpecificEnergyUnit.KilocaloriePerGram)]
        [InlineData("en-US", "kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram)]
        [InlineData("en-US", "kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram)]
        [InlineData("en-US", "kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon)]
        [InlineData("en-US", "kWd/t", SpecificEnergyUnit.KilowattDayPerTonne)]
        [InlineData("en-US", "kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram)]
        [InlineData("en-US", "kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound)]
        [InlineData("en-US", "MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram)]
        [InlineData("en-US", "MJ/t", SpecificEnergyUnit.MegajoulePerTonne)]
        [InlineData("en-US", "MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram)]
        [InlineData("en-US", "MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon)]
        [InlineData("en-US", "MWd/t", SpecificEnergyUnit.MegawattDayPerTonne)]
        [InlineData("en-US", "MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram)]
        [InlineData("en-US", "MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound)]
        [InlineData("en-US", "TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram)]
        [InlineData("en-US", "TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon)]
        [InlineData("en-US", "TWd/t", SpecificEnergyUnit.TerawattDayPerTonne)]
        [InlineData("en-US", "Wd/kg", SpecificEnergyUnit.WattDayPerKilogram)]
        [InlineData("en-US", "Wd/ST", SpecificEnergyUnit.WattDayPerShortTon)]
        [InlineData("en-US", "Wd/t", SpecificEnergyUnit.WattDayPerTonne)]
        [InlineData("en-US", "Wh/kg", SpecificEnergyUnit.WattHourPerKilogram)]
        [InlineData("en-US", "Wh/lbs", SpecificEnergyUnit.WattHourPerPound)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, SpecificEnergyUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(SpecificEnergy.TryParseUnit(abbreviation, out SpecificEnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "btu/lb", SpecificEnergyUnit.BtuPerPound)]
        [InlineData("en-US", "cal/g", SpecificEnergyUnit.CaloriePerGram)]
        [InlineData("en-US", "GWd/kg", SpecificEnergyUnit.GigawattDayPerKilogram)]
        [InlineData("en-US", "GWd/ST", SpecificEnergyUnit.GigawattDayPerShortTon)]
        [InlineData("en-US", "GWd/t", SpecificEnergyUnit.GigawattDayPerTonne)]
        [InlineData("en-US", "GWh/kg", SpecificEnergyUnit.GigawattHourPerKilogram)]
        [InlineData("en-US", "GWh/lbs", SpecificEnergyUnit.GigawattHourPerPound)]
        [InlineData("en-US", "J/kg", SpecificEnergyUnit.JoulePerKilogram)]
        [InlineData("en-US", "kcal/g", SpecificEnergyUnit.KilocaloriePerGram)]
        [InlineData("en-US", "kJ/kg", SpecificEnergyUnit.KilojoulePerKilogram)]
        [InlineData("en-US", "kWd/kg", SpecificEnergyUnit.KilowattDayPerKilogram)]
        [InlineData("en-US", "kWd/ST", SpecificEnergyUnit.KilowattDayPerShortTon)]
        [InlineData("en-US", "kWd/t", SpecificEnergyUnit.KilowattDayPerTonne)]
        [InlineData("en-US", "kWh/kg", SpecificEnergyUnit.KilowattHourPerKilogram)]
        [InlineData("en-US", "kWh/lbs", SpecificEnergyUnit.KilowattHourPerPound)]
        [InlineData("en-US", "MJ/kg", SpecificEnergyUnit.MegajoulePerKilogram)]
        [InlineData("en-US", "MJ/t", SpecificEnergyUnit.MegajoulePerTonne)]
        [InlineData("en-US", "MWd/kg", SpecificEnergyUnit.MegawattDayPerKilogram)]
        [InlineData("en-US", "MWd/ST", SpecificEnergyUnit.MegawattDayPerShortTon)]
        [InlineData("en-US", "MWd/t", SpecificEnergyUnit.MegawattDayPerTonne)]
        [InlineData("en-US", "MWh/kg", SpecificEnergyUnit.MegawattHourPerKilogram)]
        [InlineData("en-US", "MWh/lbs", SpecificEnergyUnit.MegawattHourPerPound)]
        [InlineData("en-US", "TWd/kg", SpecificEnergyUnit.TerawattDayPerKilogram)]
        [InlineData("en-US", "TWd/ST", SpecificEnergyUnit.TerawattDayPerShortTon)]
        [InlineData("en-US", "TWd/t", SpecificEnergyUnit.TerawattDayPerTonne)]
        [InlineData("en-US", "Wd/kg", SpecificEnergyUnit.WattDayPerKilogram)]
        [InlineData("en-US", "Wd/ST", SpecificEnergyUnit.WattDayPerShortTon)]
        [InlineData("en-US", "Wd/t", SpecificEnergyUnit.WattDayPerTonne)]
        [InlineData("en-US", "Wh/kg", SpecificEnergyUnit.WattHourPerKilogram)]
        [InlineData("en-US", "Wh/lbs", SpecificEnergyUnit.WattHourPerPound)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, SpecificEnergyUnit expectedUnit)
        {
            Assert.True(SpecificEnergy.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out SpecificEnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", SpecificEnergyUnit.BtuPerPound, "btu/lb")]
        [InlineData("en-US", SpecificEnergyUnit.CaloriePerGram, "cal/g")]
        [InlineData("en-US", SpecificEnergyUnit.GigawattDayPerKilogram, "GWd/kg")]
        [InlineData("en-US", SpecificEnergyUnit.GigawattDayPerShortTon, "GWd/ST")]
        [InlineData("en-US", SpecificEnergyUnit.GigawattDayPerTonne, "GWd/t")]
        [InlineData("en-US", SpecificEnergyUnit.GigawattHourPerKilogram, "GWh/kg")]
        [InlineData("en-US", SpecificEnergyUnit.GigawattHourPerPound, "GWh/lbs")]
        [InlineData("en-US", SpecificEnergyUnit.JoulePerKilogram, "J/kg")]
        [InlineData("en-US", SpecificEnergyUnit.KilocaloriePerGram, "kcal/g")]
        [InlineData("en-US", SpecificEnergyUnit.KilojoulePerKilogram, "kJ/kg")]
        [InlineData("en-US", SpecificEnergyUnit.KilowattDayPerKilogram, "kWd/kg")]
        [InlineData("en-US", SpecificEnergyUnit.KilowattDayPerShortTon, "kWd/ST")]
        [InlineData("en-US", SpecificEnergyUnit.KilowattDayPerTonne, "kWd/t")]
        [InlineData("en-US", SpecificEnergyUnit.KilowattHourPerKilogram, "kWh/kg")]
        [InlineData("en-US", SpecificEnergyUnit.KilowattHourPerPound, "kWh/lbs")]
        [InlineData("en-US", SpecificEnergyUnit.MegajoulePerKilogram, "MJ/kg")]
        [InlineData("en-US", SpecificEnergyUnit.MegajoulePerTonne, "MJ/t")]
        [InlineData("en-US", SpecificEnergyUnit.MegawattDayPerKilogram, "MWd/kg")]
        [InlineData("en-US", SpecificEnergyUnit.MegawattDayPerShortTon, "MWd/ST")]
        [InlineData("en-US", SpecificEnergyUnit.MegawattDayPerTonne, "MWd/t")]
        [InlineData("en-US", SpecificEnergyUnit.MegawattHourPerKilogram, "MWh/kg")]
        [InlineData("en-US", SpecificEnergyUnit.MegawattHourPerPound, "MWh/lbs")]
        [InlineData("en-US", SpecificEnergyUnit.TerawattDayPerKilogram, "TWd/kg")]
        [InlineData("en-US", SpecificEnergyUnit.TerawattDayPerShortTon, "TWd/ST")]
        [InlineData("en-US", SpecificEnergyUnit.TerawattDayPerTonne, "TWd/t")]
        [InlineData("en-US", SpecificEnergyUnit.WattDayPerKilogram, "Wd/kg")]
        [InlineData("en-US", SpecificEnergyUnit.WattDayPerShortTon, "Wd/ST")]
        [InlineData("en-US", SpecificEnergyUnit.WattDayPerTonne, "Wd/t")]
        [InlineData("en-US", SpecificEnergyUnit.WattHourPerKilogram, "Wh/kg")]
        [InlineData("en-US", SpecificEnergyUnit.WattHourPerPound, "Wh/lbs")]
        public void GetAbbreviationForCulture(string culture, SpecificEnergyUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = SpecificEnergy.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(SpecificEnergy.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = SpecificEnergy.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(SpecificEnergyUnit unit)
        {
            var inBaseUnits = SpecificEnergy.From(1.0, SpecificEnergy.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(SpecificEnergyUnit unit)
        {
            var quantity = SpecificEnergy.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(SpecificEnergyUnit unit)
        {
            Assert.All(SpecificEnergy.Units.Where(u => u != SpecificEnergy.BaseUnit), fromUnit =>
            {
                var quantity = SpecificEnergy.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(SpecificEnergyUnit unit)
        {
            var quantity = default(SpecificEnergy);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(SpecificEnergyUnit unit)
        {
            var quantity = SpecificEnergy.From(3, SpecificEnergy.BaseUnit);
            SpecificEnergy expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<SpecificEnergyUnit> quantityToConvert = quantity;
                IQuantity<SpecificEnergyUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromBtuPerPound(jouleperkilogram.BtuPerPound).JoulesPerKilogram, BtuPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromCaloriesPerGram(jouleperkilogram.CaloriesPerGram).JoulesPerKilogram, CaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattDaysPerKilogram(jouleperkilogram.GigawattDaysPerKilogram).JoulesPerKilogram, GigawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattDaysPerShortTon(jouleperkilogram.GigawattDaysPerShortTon).JoulesPerKilogram, GigawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattDaysPerTonne(jouleperkilogram.GigawattDaysPerTonne).JoulesPerKilogram, GigawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattHoursPerKilogram(jouleperkilogram.GigawattHoursPerKilogram).JoulesPerKilogram, GigawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromGigawattHoursPerPound(jouleperkilogram.GigawattHoursPerPound).JoulesPerKilogram, GigawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromJoulesPerKilogram(jouleperkilogram.JoulesPerKilogram).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilocaloriesPerGram(jouleperkilogram.KilocaloriesPerGram).JoulesPerKilogram, KilocaloriesPerGramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilojoulesPerKilogram(jouleperkilogram.KilojoulesPerKilogram).JoulesPerKilogram, KilojoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattDaysPerKilogram(jouleperkilogram.KilowattDaysPerKilogram).JoulesPerKilogram, KilowattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattDaysPerShortTon(jouleperkilogram.KilowattDaysPerShortTon).JoulesPerKilogram, KilowattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattDaysPerTonne(jouleperkilogram.KilowattDaysPerTonne).JoulesPerKilogram, KilowattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattHoursPerKilogram(jouleperkilogram.KilowattHoursPerKilogram).JoulesPerKilogram, KilowattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromKilowattHoursPerPound(jouleperkilogram.KilowattHoursPerPound).JoulesPerKilogram, KilowattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegajoulesPerKilogram(jouleperkilogram.MegajoulesPerKilogram).JoulesPerKilogram, MegajoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegajoulesPerTonne(jouleperkilogram.MegajoulesPerTonne).JoulesPerKilogram, MegajoulesPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattDaysPerKilogram(jouleperkilogram.MegawattDaysPerKilogram).JoulesPerKilogram, MegawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattDaysPerShortTon(jouleperkilogram.MegawattDaysPerShortTon).JoulesPerKilogram, MegawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattDaysPerTonne(jouleperkilogram.MegawattDaysPerTonne).JoulesPerKilogram, MegawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattHoursPerKilogram(jouleperkilogram.MegawattHoursPerKilogram).JoulesPerKilogram, MegawattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromMegawattHoursPerPound(jouleperkilogram.MegawattHoursPerPound).JoulesPerKilogram, MegawattHoursPerPoundTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromTerawattDaysPerKilogram(jouleperkilogram.TerawattDaysPerKilogram).JoulesPerKilogram, TerawattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromTerawattDaysPerShortTon(jouleperkilogram.TerawattDaysPerShortTon).JoulesPerKilogram, TerawattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromTerawattDaysPerTonne(jouleperkilogram.TerawattDaysPerTonne).JoulesPerKilogram, TerawattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattDaysPerKilogram(jouleperkilogram.WattDaysPerKilogram).JoulesPerKilogram, WattDaysPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattDaysPerShortTon(jouleperkilogram.WattDaysPerShortTon).JoulesPerKilogram, WattDaysPerShortTonTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattDaysPerTonne(jouleperkilogram.WattDaysPerTonne).JoulesPerKilogram, WattDaysPerTonneTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattHoursPerKilogram(jouleperkilogram.WattHoursPerKilogram).JoulesPerKilogram, WattHoursPerKilogramTolerance);
            AssertEx.EqualTolerance(1, SpecificEnergy.FromWattHoursPerPound(jouleperkilogram.WattHoursPerPound).JoulesPerKilogram, WattHoursPerPoundTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            SpecificEnergy v = SpecificEnergy.FromJoulesPerKilogram(1);
            AssertEx.EqualTolerance(-1, -v.JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (SpecificEnergy.FromJoulesPerKilogram(3)-v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (v + v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (v*10).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(10, (10*v).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, (SpecificEnergy.FromJoulesPerKilogram(10)/5).JoulesPerKilogram, JoulesPerKilogramTolerance);
            AssertEx.EqualTolerance(2, SpecificEnergy.FromJoulesPerKilogram(10)/SpecificEnergy.FromJoulesPerKilogram(5), JoulesPerKilogramTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            SpecificEnergy oneJoulePerKilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            SpecificEnergy twoJoulesPerKilogram = SpecificEnergy.FromJoulesPerKilogram(2);

            Assert.True(oneJoulePerKilogram < twoJoulesPerKilogram);
            Assert.True(oneJoulePerKilogram <= twoJoulesPerKilogram);
            Assert.True(twoJoulesPerKilogram > oneJoulePerKilogram);
            Assert.True(twoJoulesPerKilogram >= oneJoulePerKilogram);

            Assert.False(oneJoulePerKilogram > twoJoulesPerKilogram);
            Assert.False(oneJoulePerKilogram >= twoJoulesPerKilogram);
            Assert.False(twoJoulesPerKilogram < oneJoulePerKilogram);
            Assert.False(twoJoulesPerKilogram <= oneJoulePerKilogram);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Equal(0, jouleperkilogram.CompareTo(jouleperkilogram));
            Assert.True(jouleperkilogram.CompareTo(SpecificEnergy.Zero) > 0);
            Assert.True(SpecificEnergy.Zero.CompareTo(jouleperkilogram) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentException>(() => jouleperkilogram.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.Throws<ArgumentNullException>(() => jouleperkilogram.CompareTo(null));
        }

        [Theory]
        [InlineData(1, SpecificEnergyUnit.JoulePerKilogram, 1, SpecificEnergyUnit.JoulePerKilogram, true)]  // Same value and unit.
        [InlineData(1, SpecificEnergyUnit.JoulePerKilogram, 2, SpecificEnergyUnit.JoulePerKilogram, false)] // Different value.
        [InlineData(2, SpecificEnergyUnit.JoulePerKilogram, 1, SpecificEnergyUnit.BtuPerPound, false)] // Different value and unit.
        [InlineData(1, SpecificEnergyUnit.JoulePerKilogram, 1, SpecificEnergyUnit.BtuPerPound, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, SpecificEnergyUnit unitA, double valueB, SpecificEnergyUnit unitB, bool expectEqual)
        {
            var a = new SpecificEnergy(valueA, unitA);
            var b = new SpecificEnergy(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = SpecificEnergy.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.False(jouleperkilogram.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            SpecificEnergy jouleperkilogram = SpecificEnergy.FromJoulesPerKilogram(1);
            Assert.False(jouleperkilogram.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(firstValue);
            var otherQuantity = SpecificEnergy.FromJoulesPerKilogram(secondValue);
            SpecificEnergy maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, SpecificEnergy.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1);
            var negativeTolerance = SpecificEnergy.FromJoulesPerKilogram(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<SpecificEnergyUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(SpecificEnergy.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 btu/lb", new SpecificEnergy(1, SpecificEnergyUnit.BtuPerPound).ToString());
            Assert.Equal("1 cal/g", new SpecificEnergy(1, SpecificEnergyUnit.CaloriePerGram).ToString());
            Assert.Equal("1 GWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerKilogram).ToString());
            Assert.Equal("1 GWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerShortTon).ToString());
            Assert.Equal("1 GWd/t", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerTonne).ToString());
            Assert.Equal("1 GWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.GigawattHourPerKilogram).ToString());
            Assert.Equal("1 GWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.GigawattHourPerPound).ToString());
            Assert.Equal("1 J/kg", new SpecificEnergy(1, SpecificEnergyUnit.JoulePerKilogram).ToString());
            Assert.Equal("1 kcal/g", new SpecificEnergy(1, SpecificEnergyUnit.KilocaloriePerGram).ToString());
            Assert.Equal("1 kJ/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilojoulePerKilogram).ToString());
            Assert.Equal("1 kWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerKilogram).ToString());
            Assert.Equal("1 kWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerShortTon).ToString());
            Assert.Equal("1 kWd/t", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerTonne).ToString());
            Assert.Equal("1 kWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilowattHourPerKilogram).ToString());
            Assert.Equal("1 kWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.KilowattHourPerPound).ToString());
            Assert.Equal("1 MJ/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegajoulePerKilogram).ToString());
            Assert.Equal("1 MJ/t", new SpecificEnergy(1, SpecificEnergyUnit.MegajoulePerTonne).ToString());
            Assert.Equal("1 MWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerKilogram).ToString());
            Assert.Equal("1 MWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerShortTon).ToString());
            Assert.Equal("1 MWd/t", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerTonne).ToString());
            Assert.Equal("1 MWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegawattHourPerKilogram).ToString());
            Assert.Equal("1 MWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.MegawattHourPerPound).ToString());
            Assert.Equal("1 TWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerKilogram).ToString());
            Assert.Equal("1 TWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerShortTon).ToString());
            Assert.Equal("1 TWd/t", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerTonne).ToString());
            Assert.Equal("1 Wd/kg", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerKilogram).ToString());
            Assert.Equal("1 Wd/ST", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerShortTon).ToString());
            Assert.Equal("1 Wd/t", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerTonne).ToString());
            Assert.Equal("1 Wh/kg", new SpecificEnergy(1, SpecificEnergyUnit.WattHourPerKilogram).ToString());
            Assert.Equal("1 Wh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.WattHourPerPound).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 btu/lb", new SpecificEnergy(1, SpecificEnergyUnit.BtuPerPound).ToString(swedishCulture));
            Assert.Equal("1 cal/g", new SpecificEnergy(1, SpecificEnergyUnit.CaloriePerGram).ToString(swedishCulture));
            Assert.Equal("1 GWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 GWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 GWd/t", new SpecificEnergy(1, SpecificEnergyUnit.GigawattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 GWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.GigawattHourPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 GWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.GigawattHourPerPound).ToString(swedishCulture));
            Assert.Equal("1 J/kg", new SpecificEnergy(1, SpecificEnergyUnit.JoulePerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kcal/g", new SpecificEnergy(1, SpecificEnergyUnit.KilocaloriePerGram).ToString(swedishCulture));
            Assert.Equal("1 kJ/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilojoulePerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 kWd/t", new SpecificEnergy(1, SpecificEnergyUnit.KilowattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 kWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.KilowattHourPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 kWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.KilowattHourPerPound).ToString(swedishCulture));
            Assert.Equal("1 MJ/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegajoulePerKilogram).ToString(swedishCulture));
            Assert.Equal("1 MJ/t", new SpecificEnergy(1, SpecificEnergyUnit.MegajoulePerTonne).ToString(swedishCulture));
            Assert.Equal("1 MWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 MWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 MWd/t", new SpecificEnergy(1, SpecificEnergyUnit.MegawattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 MWh/kg", new SpecificEnergy(1, SpecificEnergyUnit.MegawattHourPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 MWh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.MegawattHourPerPound).ToString(swedishCulture));
            Assert.Equal("1 TWd/kg", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 TWd/ST", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 TWd/t", new SpecificEnergy(1, SpecificEnergyUnit.TerawattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 Wd/kg", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 Wd/ST", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerShortTon).ToString(swedishCulture));
            Assert.Equal("1 Wd/t", new SpecificEnergy(1, SpecificEnergyUnit.WattDayPerTonne).ToString(swedishCulture));
            Assert.Equal("1 Wh/kg", new SpecificEnergy(1, SpecificEnergyUnit.WattHourPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 Wh/lbs", new SpecificEnergy(1, SpecificEnergyUnit.WattHourPerPound).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s1"));
            Assert.Equal("0.12 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s2"));
            Assert.Equal("0.123 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s3"));
            Assert.Equal("0.1235 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s1", culture));
            Assert.Equal("0.12 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s2", culture));
            Assert.Equal("0.123 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s3", culture));
            Assert.Equal("0.1235 J/kg", new SpecificEnergy(0.123456, SpecificEnergyUnit.JoulePerKilogram).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = SpecificEnergy.FromJoulesPerKilogram(value);
            Assert.Equal(SpecificEnergy.FromJoulesPerKilogram(-value), -quantity);
        }
    }
}
