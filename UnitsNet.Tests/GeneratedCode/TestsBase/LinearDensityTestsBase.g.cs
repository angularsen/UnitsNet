//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of LinearDensity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LinearDensityTestsBase : QuantityTestsBase
    {
        protected abstract double GramsPerCentimeterInOneKilogramPerMeter { get; }
        protected abstract double GramsPerFootInOneKilogramPerMeter { get; }
        protected abstract double GramsPerMeterInOneKilogramPerMeter { get; }
        protected abstract double GramsPerMillimeterInOneKilogramPerMeter { get; }
        protected abstract double KilogramsPerCentimeterInOneKilogramPerMeter { get; }
        protected abstract double KilogramsPerFootInOneKilogramPerMeter { get; }
        protected abstract double KilogramsPerMeterInOneKilogramPerMeter { get; }
        protected abstract double KilogramsPerMillimeterInOneKilogramPerMeter { get; }
        protected abstract double MicrogramsPerCentimeterInOneKilogramPerMeter { get; }
        protected abstract double MicrogramsPerFootInOneKilogramPerMeter { get; }
        protected abstract double MicrogramsPerMeterInOneKilogramPerMeter { get; }
        protected abstract double MicrogramsPerMillimeterInOneKilogramPerMeter { get; }
        protected abstract double MilligramsPerCentimeterInOneKilogramPerMeter { get; }
        protected abstract double MilligramsPerFootInOneKilogramPerMeter { get; }
        protected abstract double MilligramsPerMeterInOneKilogramPerMeter { get; }
        protected abstract double MilligramsPerMillimeterInOneKilogramPerMeter { get; }
        protected abstract double PoundsPerFootInOneKilogramPerMeter { get; }
        protected abstract double PoundsPerInchInOneKilogramPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GramsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerFootTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerFootTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerFootTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerFootTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerInchTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(LinearDensityUnit unit)
        {
            return unit switch
            {
                LinearDensityUnit.GramPerCentimeter => (GramsPerCentimeterInOneKilogramPerMeter, GramsPerCentimeterTolerance),
                LinearDensityUnit.GramPerFoot => (GramsPerFootInOneKilogramPerMeter, GramsPerFootTolerance),
                LinearDensityUnit.GramPerMeter => (GramsPerMeterInOneKilogramPerMeter, GramsPerMeterTolerance),
                LinearDensityUnit.GramPerMillimeter => (GramsPerMillimeterInOneKilogramPerMeter, GramsPerMillimeterTolerance),
                LinearDensityUnit.KilogramPerCentimeter => (KilogramsPerCentimeterInOneKilogramPerMeter, KilogramsPerCentimeterTolerance),
                LinearDensityUnit.KilogramPerFoot => (KilogramsPerFootInOneKilogramPerMeter, KilogramsPerFootTolerance),
                LinearDensityUnit.KilogramPerMeter => (KilogramsPerMeterInOneKilogramPerMeter, KilogramsPerMeterTolerance),
                LinearDensityUnit.KilogramPerMillimeter => (KilogramsPerMillimeterInOneKilogramPerMeter, KilogramsPerMillimeterTolerance),
                LinearDensityUnit.MicrogramPerCentimeter => (MicrogramsPerCentimeterInOneKilogramPerMeter, MicrogramsPerCentimeterTolerance),
                LinearDensityUnit.MicrogramPerFoot => (MicrogramsPerFootInOneKilogramPerMeter, MicrogramsPerFootTolerance),
                LinearDensityUnit.MicrogramPerMeter => (MicrogramsPerMeterInOneKilogramPerMeter, MicrogramsPerMeterTolerance),
                LinearDensityUnit.MicrogramPerMillimeter => (MicrogramsPerMillimeterInOneKilogramPerMeter, MicrogramsPerMillimeterTolerance),
                LinearDensityUnit.MilligramPerCentimeter => (MilligramsPerCentimeterInOneKilogramPerMeter, MilligramsPerCentimeterTolerance),
                LinearDensityUnit.MilligramPerFoot => (MilligramsPerFootInOneKilogramPerMeter, MilligramsPerFootTolerance),
                LinearDensityUnit.MilligramPerMeter => (MilligramsPerMeterInOneKilogramPerMeter, MilligramsPerMeterTolerance),
                LinearDensityUnit.MilligramPerMillimeter => (MilligramsPerMillimeterInOneKilogramPerMeter, MilligramsPerMillimeterTolerance),
                LinearDensityUnit.PoundPerFoot => (PoundsPerFootInOneKilogramPerMeter, PoundsPerFootTolerance),
                LinearDensityUnit.PoundPerInch => (PoundsPerInchInOneKilogramPerMeter, PoundsPerInchTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { LinearDensityUnit.GramPerCentimeter },
            new object[] { LinearDensityUnit.GramPerFoot },
            new object[] { LinearDensityUnit.GramPerMeter },
            new object[] { LinearDensityUnit.GramPerMillimeter },
            new object[] { LinearDensityUnit.KilogramPerCentimeter },
            new object[] { LinearDensityUnit.KilogramPerFoot },
            new object[] { LinearDensityUnit.KilogramPerMeter },
            new object[] { LinearDensityUnit.KilogramPerMillimeter },
            new object[] { LinearDensityUnit.MicrogramPerCentimeter },
            new object[] { LinearDensityUnit.MicrogramPerFoot },
            new object[] { LinearDensityUnit.MicrogramPerMeter },
            new object[] { LinearDensityUnit.MicrogramPerMillimeter },
            new object[] { LinearDensityUnit.MilligramPerCentimeter },
            new object[] { LinearDensityUnit.MilligramPerFoot },
            new object[] { LinearDensityUnit.MilligramPerMeter },
            new object[] { LinearDensityUnit.MilligramPerMillimeter },
            new object[] { LinearDensityUnit.PoundPerFoot },
            new object[] { LinearDensityUnit.PoundPerInch },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new LinearDensity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(LinearDensityUnit.KilogramPerMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new LinearDensity(double.PositiveInfinity, LinearDensityUnit.KilogramPerMeter));
            var exception2 = Record.Exception(() => new LinearDensity(double.NegativeInfinity, LinearDensityUnit.KilogramPerMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new LinearDensity(double.NaN, LinearDensityUnit.KilogramPerMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new LinearDensity(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new LinearDensity(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new LinearDensity(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void LinearDensity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new LinearDensity(1, LinearDensityUnit.KilogramPerMeter);

            QuantityInfo<LinearDensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(LinearDensity.Zero, quantityInfo.Zero);
            Assert.Equal("LinearDensity", quantityInfo.Name);

            var units = Enum.GetValues<LinearDensityUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void KilogramPerMeterToLinearDensityUnits()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            AssertEx.EqualTolerance(GramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.GramsPerCentimeter, GramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerFootInOneKilogramPerMeter, kilogrampermeter.GramsPerFoot, GramsPerFootTolerance);
            AssertEx.EqualTolerance(GramsPerMeterInOneKilogramPerMeter, kilogrampermeter.GramsPerMeter, GramsPerMeterTolerance);
            AssertEx.EqualTolerance(GramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.GramsPerMillimeter, GramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.KilogramsPerCentimeter, KilogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerFootInOneKilogramPerMeter, kilogrampermeter.KilogramsPerFoot, KilogramsPerFootTolerance);
            AssertEx.EqualTolerance(KilogramsPerMeterInOneKilogramPerMeter, kilogrampermeter.KilogramsPerMeter, KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.KilogramsPerMillimeter, KilogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.MicrogramsPerCentimeter, MicrogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerFootInOneKilogramPerMeter, kilogrampermeter.MicrogramsPerFoot, MicrogramsPerFootTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMeterInOneKilogramPerMeter, kilogrampermeter.MicrogramsPerMeter, MicrogramsPerMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.MicrogramsPerMillimeter, MicrogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.MilligramsPerCentimeter, MilligramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerFootInOneKilogramPerMeter, kilogrampermeter.MilligramsPerFoot, MilligramsPerFootTolerance);
            AssertEx.EqualTolerance(MilligramsPerMeterInOneKilogramPerMeter, kilogrampermeter.MilligramsPerMeter, MilligramsPerMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.MilligramsPerMillimeter, MilligramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerFootInOneKilogramPerMeter, kilogrampermeter.PoundsPerFoot, PoundsPerFootTolerance);
            AssertEx.EqualTolerance(PoundsPerInchInOneKilogramPerMeter, kilogrampermeter.PoundsPerInch, PoundsPerInchTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = LinearDensity.From(1, LinearDensityUnit.GramPerCentimeter);
            AssertEx.EqualTolerance(1, quantity00.GramsPerCentimeter, GramsPerCentimeterTolerance);
            Assert.Equal(LinearDensityUnit.GramPerCentimeter, quantity00.Unit);

            var quantity01 = LinearDensity.From(1, LinearDensityUnit.GramPerFoot);
            AssertEx.EqualTolerance(1, quantity01.GramsPerFoot, GramsPerFootTolerance);
            Assert.Equal(LinearDensityUnit.GramPerFoot, quantity01.Unit);

            var quantity02 = LinearDensity.From(1, LinearDensityUnit.GramPerMeter);
            AssertEx.EqualTolerance(1, quantity02.GramsPerMeter, GramsPerMeterTolerance);
            Assert.Equal(LinearDensityUnit.GramPerMeter, quantity02.Unit);

            var quantity03 = LinearDensity.From(1, LinearDensityUnit.GramPerMillimeter);
            AssertEx.EqualTolerance(1, quantity03.GramsPerMillimeter, GramsPerMillimeterTolerance);
            Assert.Equal(LinearDensityUnit.GramPerMillimeter, quantity03.Unit);

            var quantity04 = LinearDensity.From(1, LinearDensityUnit.KilogramPerCentimeter);
            AssertEx.EqualTolerance(1, quantity04.KilogramsPerCentimeter, KilogramsPerCentimeterTolerance);
            Assert.Equal(LinearDensityUnit.KilogramPerCentimeter, quantity04.Unit);

            var quantity05 = LinearDensity.From(1, LinearDensityUnit.KilogramPerFoot);
            AssertEx.EqualTolerance(1, quantity05.KilogramsPerFoot, KilogramsPerFootTolerance);
            Assert.Equal(LinearDensityUnit.KilogramPerFoot, quantity05.Unit);

            var quantity06 = LinearDensity.From(1, LinearDensityUnit.KilogramPerMeter);
            AssertEx.EqualTolerance(1, quantity06.KilogramsPerMeter, KilogramsPerMeterTolerance);
            Assert.Equal(LinearDensityUnit.KilogramPerMeter, quantity06.Unit);

            var quantity07 = LinearDensity.From(1, LinearDensityUnit.KilogramPerMillimeter);
            AssertEx.EqualTolerance(1, quantity07.KilogramsPerMillimeter, KilogramsPerMillimeterTolerance);
            Assert.Equal(LinearDensityUnit.KilogramPerMillimeter, quantity07.Unit);

            var quantity08 = LinearDensity.From(1, LinearDensityUnit.MicrogramPerCentimeter);
            AssertEx.EqualTolerance(1, quantity08.MicrogramsPerCentimeter, MicrogramsPerCentimeterTolerance);
            Assert.Equal(LinearDensityUnit.MicrogramPerCentimeter, quantity08.Unit);

            var quantity09 = LinearDensity.From(1, LinearDensityUnit.MicrogramPerFoot);
            AssertEx.EqualTolerance(1, quantity09.MicrogramsPerFoot, MicrogramsPerFootTolerance);
            Assert.Equal(LinearDensityUnit.MicrogramPerFoot, quantity09.Unit);

            var quantity10 = LinearDensity.From(1, LinearDensityUnit.MicrogramPerMeter);
            AssertEx.EqualTolerance(1, quantity10.MicrogramsPerMeter, MicrogramsPerMeterTolerance);
            Assert.Equal(LinearDensityUnit.MicrogramPerMeter, quantity10.Unit);

            var quantity11 = LinearDensity.From(1, LinearDensityUnit.MicrogramPerMillimeter);
            AssertEx.EqualTolerance(1, quantity11.MicrogramsPerMillimeter, MicrogramsPerMillimeterTolerance);
            Assert.Equal(LinearDensityUnit.MicrogramPerMillimeter, quantity11.Unit);

            var quantity12 = LinearDensity.From(1, LinearDensityUnit.MilligramPerCentimeter);
            AssertEx.EqualTolerance(1, quantity12.MilligramsPerCentimeter, MilligramsPerCentimeterTolerance);
            Assert.Equal(LinearDensityUnit.MilligramPerCentimeter, quantity12.Unit);

            var quantity13 = LinearDensity.From(1, LinearDensityUnit.MilligramPerFoot);
            AssertEx.EqualTolerance(1, quantity13.MilligramsPerFoot, MilligramsPerFootTolerance);
            Assert.Equal(LinearDensityUnit.MilligramPerFoot, quantity13.Unit);

            var quantity14 = LinearDensity.From(1, LinearDensityUnit.MilligramPerMeter);
            AssertEx.EqualTolerance(1, quantity14.MilligramsPerMeter, MilligramsPerMeterTolerance);
            Assert.Equal(LinearDensityUnit.MilligramPerMeter, quantity14.Unit);

            var quantity15 = LinearDensity.From(1, LinearDensityUnit.MilligramPerMillimeter);
            AssertEx.EqualTolerance(1, quantity15.MilligramsPerMillimeter, MilligramsPerMillimeterTolerance);
            Assert.Equal(LinearDensityUnit.MilligramPerMillimeter, quantity15.Unit);

            var quantity16 = LinearDensity.From(1, LinearDensityUnit.PoundPerFoot);
            AssertEx.EqualTolerance(1, quantity16.PoundsPerFoot, PoundsPerFootTolerance);
            Assert.Equal(LinearDensityUnit.PoundPerFoot, quantity16.Unit);

            var quantity17 = LinearDensity.From(1, LinearDensityUnit.PoundPerInch);
            AssertEx.EqualTolerance(1, quantity17.PoundsPerInch, PoundsPerInchTolerance);
            Assert.Equal(LinearDensityUnit.PoundPerInch, quantity17.Unit);

        }

        [Fact]
        public void FromKilogramsPerMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => LinearDensity.FromKilogramsPerMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => LinearDensity.FromKilogramsPerMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromKilogramsPerMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => LinearDensity.FromKilogramsPerMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            AssertEx.EqualTolerance(GramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.GramPerCentimeter), GramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.GramPerFoot), GramsPerFootTolerance);
            AssertEx.EqualTolerance(GramsPerMeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.GramPerMeter), GramsPerMeterTolerance);
            AssertEx.EqualTolerance(GramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.GramPerMillimeter), GramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.KilogramPerCentimeter), KilogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.KilogramPerFoot), KilogramsPerFootTolerance);
            AssertEx.EqualTolerance(KilogramsPerMeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.KilogramPerMeter), KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.KilogramPerMillimeter), KilogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MicrogramPerCentimeter), MicrogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MicrogramPerFoot), MicrogramsPerFootTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MicrogramPerMeter), MicrogramsPerMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MicrogramPerMillimeter), MicrogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCentimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MilligramPerCentimeter), MilligramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MilligramPerFoot), MilligramsPerFootTolerance);
            AssertEx.EqualTolerance(MilligramsPerMeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MilligramPerMeter), MilligramsPerMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMillimeterInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.MilligramPerMillimeter), MilligramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsPerFootInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.PoundPerFoot), PoundsPerFootTolerance);
            AssertEx.EqualTolerance(PoundsPerInchInOneKilogramPerMeter, kilogrampermeter.As(LinearDensityUnit.PoundPerInch), PoundsPerInchTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = LinearDensity.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
            var expectedValue = quantity.As(LinearDensity.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
            var expectedUnit = LinearDensity.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                LinearDensity quantityToConvert = quantity;

                LinearDensity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<LinearDensityUnit> quantityToConvert = quantity;

                IQuantity<LinearDensityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<LinearDensityUnit> quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<LinearDensityUnit> quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new LinearDensity(value: 1, unit: LinearDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 g/cm", LinearDensityUnit.GramPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 g/ft", LinearDensityUnit.GramPerFoot, 4.2)]
        [InlineData("en-US", "4.2 g/m", LinearDensityUnit.GramPerMeter, 4.2)]
        [InlineData("en-US", "4.2 g/mm", LinearDensityUnit.GramPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kg/cm", LinearDensityUnit.KilogramPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kg/ft", LinearDensityUnit.KilogramPerFoot, 4.2)]
        [InlineData("en-US", "4.2 kg/m", LinearDensityUnit.KilogramPerMeter, 4.2)]
        [InlineData("en-US", "4.2 kg/mm", LinearDensityUnit.KilogramPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 µg/cm", LinearDensityUnit.MicrogramPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 µg/ft", LinearDensityUnit.MicrogramPerFoot, 4.2)]
        [InlineData("en-US", "4.2 µg/m", LinearDensityUnit.MicrogramPerMeter, 4.2)]
        [InlineData("en-US", "4.2 µg/mm", LinearDensityUnit.MicrogramPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mg/cm", LinearDensityUnit.MilligramPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mg/ft", LinearDensityUnit.MilligramPerFoot, 4.2)]
        [InlineData("en-US", "4.2 mg/m", LinearDensityUnit.MilligramPerMeter, 4.2)]
        [InlineData("en-US", "4.2 mg/mm", LinearDensityUnit.MilligramPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lb/ft", LinearDensityUnit.PoundPerFoot, 4.2)]
        [InlineData("en-US", "4.2 lb/in", LinearDensityUnit.PoundPerInch, 4.2)]
        public void Parse(string culture, string quantityString, LinearDensityUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = LinearDensity.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 g/cm", LinearDensityUnit.GramPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 g/ft", LinearDensityUnit.GramPerFoot, 4.2)]
        [InlineData("en-US", "4.2 g/m", LinearDensityUnit.GramPerMeter, 4.2)]
        [InlineData("en-US", "4.2 g/mm", LinearDensityUnit.GramPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kg/cm", LinearDensityUnit.KilogramPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kg/ft", LinearDensityUnit.KilogramPerFoot, 4.2)]
        [InlineData("en-US", "4.2 kg/m", LinearDensityUnit.KilogramPerMeter, 4.2)]
        [InlineData("en-US", "4.2 kg/mm", LinearDensityUnit.KilogramPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 µg/cm", LinearDensityUnit.MicrogramPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 µg/ft", LinearDensityUnit.MicrogramPerFoot, 4.2)]
        [InlineData("en-US", "4.2 µg/m", LinearDensityUnit.MicrogramPerMeter, 4.2)]
        [InlineData("en-US", "4.2 µg/mm", LinearDensityUnit.MicrogramPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mg/cm", LinearDensityUnit.MilligramPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mg/ft", LinearDensityUnit.MilligramPerFoot, 4.2)]
        [InlineData("en-US", "4.2 mg/m", LinearDensityUnit.MilligramPerMeter, 4.2)]
        [InlineData("en-US", "4.2 mg/mm", LinearDensityUnit.MilligramPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lb/ft", LinearDensityUnit.PoundPerFoot, 4.2)]
        [InlineData("en-US", "4.2 lb/in", LinearDensityUnit.PoundPerInch, 4.2)]
        public void TryParse(string culture, string quantityString, LinearDensityUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(LinearDensity.TryParse(quantityString, out LinearDensity parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("g/cm", LinearDensityUnit.GramPerCentimeter)]
        [InlineData("g/ft", LinearDensityUnit.GramPerFoot)]
        [InlineData("g/m", LinearDensityUnit.GramPerMeter)]
        [InlineData("g/mm", LinearDensityUnit.GramPerMillimeter)]
        [InlineData("kg/cm", LinearDensityUnit.KilogramPerCentimeter)]
        [InlineData("kg/ft", LinearDensityUnit.KilogramPerFoot)]
        [InlineData("kg/m", LinearDensityUnit.KilogramPerMeter)]
        [InlineData("kg/mm", LinearDensityUnit.KilogramPerMillimeter)]
        [InlineData("µg/cm", LinearDensityUnit.MicrogramPerCentimeter)]
        [InlineData("µg/ft", LinearDensityUnit.MicrogramPerFoot)]
        [InlineData("µg/m", LinearDensityUnit.MicrogramPerMeter)]
        [InlineData("µg/mm", LinearDensityUnit.MicrogramPerMillimeter)]
        [InlineData("mg/cm", LinearDensityUnit.MilligramPerCentimeter)]
        [InlineData("mg/ft", LinearDensityUnit.MilligramPerFoot)]
        [InlineData("mg/m", LinearDensityUnit.MilligramPerMeter)]
        [InlineData("mg/mm", LinearDensityUnit.MilligramPerMillimeter)]
        [InlineData("lb/ft", LinearDensityUnit.PoundPerFoot)]
        [InlineData("lb/in", LinearDensityUnit.PoundPerInch)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, LinearDensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            LinearDensityUnit parsedUnit = LinearDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("g/cm", LinearDensityUnit.GramPerCentimeter)]
        [InlineData("g/ft", LinearDensityUnit.GramPerFoot)]
        [InlineData("g/m", LinearDensityUnit.GramPerMeter)]
        [InlineData("g/mm", LinearDensityUnit.GramPerMillimeter)]
        [InlineData("kg/cm", LinearDensityUnit.KilogramPerCentimeter)]
        [InlineData("kg/ft", LinearDensityUnit.KilogramPerFoot)]
        [InlineData("kg/m", LinearDensityUnit.KilogramPerMeter)]
        [InlineData("kg/mm", LinearDensityUnit.KilogramPerMillimeter)]
        [InlineData("µg/cm", LinearDensityUnit.MicrogramPerCentimeter)]
        [InlineData("µg/ft", LinearDensityUnit.MicrogramPerFoot)]
        [InlineData("µg/m", LinearDensityUnit.MicrogramPerMeter)]
        [InlineData("µg/mm", LinearDensityUnit.MicrogramPerMillimeter)]
        [InlineData("mg/cm", LinearDensityUnit.MilligramPerCentimeter)]
        [InlineData("mg/ft", LinearDensityUnit.MilligramPerFoot)]
        [InlineData("mg/m", LinearDensityUnit.MilligramPerMeter)]
        [InlineData("mg/mm", LinearDensityUnit.MilligramPerMillimeter)]
        [InlineData("lb/ft", LinearDensityUnit.PoundPerFoot)]
        [InlineData("lb/in", LinearDensityUnit.PoundPerInch)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, LinearDensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            LinearDensityUnit parsedUnit = LinearDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "g/cm", LinearDensityUnit.GramPerCentimeter)]
        [InlineData("en-US", "g/ft", LinearDensityUnit.GramPerFoot)]
        [InlineData("en-US", "g/m", LinearDensityUnit.GramPerMeter)]
        [InlineData("en-US", "g/mm", LinearDensityUnit.GramPerMillimeter)]
        [InlineData("en-US", "kg/cm", LinearDensityUnit.KilogramPerCentimeter)]
        [InlineData("en-US", "kg/ft", LinearDensityUnit.KilogramPerFoot)]
        [InlineData("en-US", "kg/m", LinearDensityUnit.KilogramPerMeter)]
        [InlineData("en-US", "kg/mm", LinearDensityUnit.KilogramPerMillimeter)]
        [InlineData("en-US", "µg/cm", LinearDensityUnit.MicrogramPerCentimeter)]
        [InlineData("en-US", "µg/ft", LinearDensityUnit.MicrogramPerFoot)]
        [InlineData("en-US", "µg/m", LinearDensityUnit.MicrogramPerMeter)]
        [InlineData("en-US", "µg/mm", LinearDensityUnit.MicrogramPerMillimeter)]
        [InlineData("en-US", "mg/cm", LinearDensityUnit.MilligramPerCentimeter)]
        [InlineData("en-US", "mg/ft", LinearDensityUnit.MilligramPerFoot)]
        [InlineData("en-US", "mg/m", LinearDensityUnit.MilligramPerMeter)]
        [InlineData("en-US", "mg/mm", LinearDensityUnit.MilligramPerMillimeter)]
        [InlineData("en-US", "lb/ft", LinearDensityUnit.PoundPerFoot)]
        [InlineData("en-US", "lb/in", LinearDensityUnit.PoundPerInch)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, LinearDensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            LinearDensityUnit parsedUnit = LinearDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "g/cm", LinearDensityUnit.GramPerCentimeter)]
        [InlineData("en-US", "g/ft", LinearDensityUnit.GramPerFoot)]
        [InlineData("en-US", "g/m", LinearDensityUnit.GramPerMeter)]
        [InlineData("en-US", "g/mm", LinearDensityUnit.GramPerMillimeter)]
        [InlineData("en-US", "kg/cm", LinearDensityUnit.KilogramPerCentimeter)]
        [InlineData("en-US", "kg/ft", LinearDensityUnit.KilogramPerFoot)]
        [InlineData("en-US", "kg/m", LinearDensityUnit.KilogramPerMeter)]
        [InlineData("en-US", "kg/mm", LinearDensityUnit.KilogramPerMillimeter)]
        [InlineData("en-US", "µg/cm", LinearDensityUnit.MicrogramPerCentimeter)]
        [InlineData("en-US", "µg/ft", LinearDensityUnit.MicrogramPerFoot)]
        [InlineData("en-US", "µg/m", LinearDensityUnit.MicrogramPerMeter)]
        [InlineData("en-US", "µg/mm", LinearDensityUnit.MicrogramPerMillimeter)]
        [InlineData("en-US", "mg/cm", LinearDensityUnit.MilligramPerCentimeter)]
        [InlineData("en-US", "mg/ft", LinearDensityUnit.MilligramPerFoot)]
        [InlineData("en-US", "mg/m", LinearDensityUnit.MilligramPerMeter)]
        [InlineData("en-US", "mg/mm", LinearDensityUnit.MilligramPerMillimeter)]
        [InlineData("en-US", "lb/ft", LinearDensityUnit.PoundPerFoot)]
        [InlineData("en-US", "lb/in", LinearDensityUnit.PoundPerInch)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, LinearDensityUnit expectedUnit)
        {
            LinearDensityUnit parsedUnit = LinearDensity.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("g/cm", LinearDensityUnit.GramPerCentimeter)]
        [InlineData("g/ft", LinearDensityUnit.GramPerFoot)]
        [InlineData("g/m", LinearDensityUnit.GramPerMeter)]
        [InlineData("g/mm", LinearDensityUnit.GramPerMillimeter)]
        [InlineData("kg/cm", LinearDensityUnit.KilogramPerCentimeter)]
        [InlineData("kg/ft", LinearDensityUnit.KilogramPerFoot)]
        [InlineData("kg/m", LinearDensityUnit.KilogramPerMeter)]
        [InlineData("kg/mm", LinearDensityUnit.KilogramPerMillimeter)]
        [InlineData("µg/cm", LinearDensityUnit.MicrogramPerCentimeter)]
        [InlineData("µg/ft", LinearDensityUnit.MicrogramPerFoot)]
        [InlineData("µg/m", LinearDensityUnit.MicrogramPerMeter)]
        [InlineData("µg/mm", LinearDensityUnit.MicrogramPerMillimeter)]
        [InlineData("mg/cm", LinearDensityUnit.MilligramPerCentimeter)]
        [InlineData("mg/ft", LinearDensityUnit.MilligramPerFoot)]
        [InlineData("mg/m", LinearDensityUnit.MilligramPerMeter)]
        [InlineData("mg/mm", LinearDensityUnit.MilligramPerMillimeter)]
        [InlineData("lb/ft", LinearDensityUnit.PoundPerFoot)]
        [InlineData("lb/in", LinearDensityUnit.PoundPerInch)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, LinearDensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(LinearDensity.TryParseUnit(abbreviation, out LinearDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("g/cm", LinearDensityUnit.GramPerCentimeter)]
        [InlineData("g/ft", LinearDensityUnit.GramPerFoot)]
        [InlineData("g/m", LinearDensityUnit.GramPerMeter)]
        [InlineData("g/mm", LinearDensityUnit.GramPerMillimeter)]
        [InlineData("kg/cm", LinearDensityUnit.KilogramPerCentimeter)]
        [InlineData("kg/ft", LinearDensityUnit.KilogramPerFoot)]
        [InlineData("kg/m", LinearDensityUnit.KilogramPerMeter)]
        [InlineData("kg/mm", LinearDensityUnit.KilogramPerMillimeter)]
        [InlineData("µg/cm", LinearDensityUnit.MicrogramPerCentimeter)]
        [InlineData("µg/ft", LinearDensityUnit.MicrogramPerFoot)]
        [InlineData("µg/m", LinearDensityUnit.MicrogramPerMeter)]
        [InlineData("µg/mm", LinearDensityUnit.MicrogramPerMillimeter)]
        [InlineData("mg/cm", LinearDensityUnit.MilligramPerCentimeter)]
        [InlineData("mg/ft", LinearDensityUnit.MilligramPerFoot)]
        [InlineData("mg/m", LinearDensityUnit.MilligramPerMeter)]
        [InlineData("mg/mm", LinearDensityUnit.MilligramPerMillimeter)]
        [InlineData("lb/ft", LinearDensityUnit.PoundPerFoot)]
        [InlineData("lb/in", LinearDensityUnit.PoundPerInch)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, LinearDensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(LinearDensity.TryParseUnit(abbreviation, out LinearDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "g/cm", LinearDensityUnit.GramPerCentimeter)]
        [InlineData("en-US", "g/ft", LinearDensityUnit.GramPerFoot)]
        [InlineData("en-US", "g/m", LinearDensityUnit.GramPerMeter)]
        [InlineData("en-US", "g/mm", LinearDensityUnit.GramPerMillimeter)]
        [InlineData("en-US", "kg/cm", LinearDensityUnit.KilogramPerCentimeter)]
        [InlineData("en-US", "kg/ft", LinearDensityUnit.KilogramPerFoot)]
        [InlineData("en-US", "kg/m", LinearDensityUnit.KilogramPerMeter)]
        [InlineData("en-US", "kg/mm", LinearDensityUnit.KilogramPerMillimeter)]
        [InlineData("en-US", "µg/cm", LinearDensityUnit.MicrogramPerCentimeter)]
        [InlineData("en-US", "µg/ft", LinearDensityUnit.MicrogramPerFoot)]
        [InlineData("en-US", "µg/m", LinearDensityUnit.MicrogramPerMeter)]
        [InlineData("en-US", "µg/mm", LinearDensityUnit.MicrogramPerMillimeter)]
        [InlineData("en-US", "mg/cm", LinearDensityUnit.MilligramPerCentimeter)]
        [InlineData("en-US", "mg/ft", LinearDensityUnit.MilligramPerFoot)]
        [InlineData("en-US", "mg/m", LinearDensityUnit.MilligramPerMeter)]
        [InlineData("en-US", "mg/mm", LinearDensityUnit.MilligramPerMillimeter)]
        [InlineData("en-US", "lb/ft", LinearDensityUnit.PoundPerFoot)]
        [InlineData("en-US", "lb/in", LinearDensityUnit.PoundPerInch)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, LinearDensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(LinearDensity.TryParseUnit(abbreviation, out LinearDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "g/cm", LinearDensityUnit.GramPerCentimeter)]
        [InlineData("en-US", "g/ft", LinearDensityUnit.GramPerFoot)]
        [InlineData("en-US", "g/m", LinearDensityUnit.GramPerMeter)]
        [InlineData("en-US", "g/mm", LinearDensityUnit.GramPerMillimeter)]
        [InlineData("en-US", "kg/cm", LinearDensityUnit.KilogramPerCentimeter)]
        [InlineData("en-US", "kg/ft", LinearDensityUnit.KilogramPerFoot)]
        [InlineData("en-US", "kg/m", LinearDensityUnit.KilogramPerMeter)]
        [InlineData("en-US", "kg/mm", LinearDensityUnit.KilogramPerMillimeter)]
        [InlineData("en-US", "µg/cm", LinearDensityUnit.MicrogramPerCentimeter)]
        [InlineData("en-US", "µg/ft", LinearDensityUnit.MicrogramPerFoot)]
        [InlineData("en-US", "µg/m", LinearDensityUnit.MicrogramPerMeter)]
        [InlineData("en-US", "µg/mm", LinearDensityUnit.MicrogramPerMillimeter)]
        [InlineData("en-US", "mg/cm", LinearDensityUnit.MilligramPerCentimeter)]
        [InlineData("en-US", "mg/ft", LinearDensityUnit.MilligramPerFoot)]
        [InlineData("en-US", "mg/m", LinearDensityUnit.MilligramPerMeter)]
        [InlineData("en-US", "mg/mm", LinearDensityUnit.MilligramPerMillimeter)]
        [InlineData("en-US", "lb/ft", LinearDensityUnit.PoundPerFoot)]
        [InlineData("en-US", "lb/in", LinearDensityUnit.PoundPerInch)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, LinearDensityUnit expectedUnit)
        {
            Assert.True(LinearDensity.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out LinearDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", LinearDensityUnit.GramPerCentimeter, "g/cm")]
        [InlineData("en-US", LinearDensityUnit.GramPerFoot, "g/ft")]
        [InlineData("en-US", LinearDensityUnit.GramPerMeter, "g/m")]
        [InlineData("en-US", LinearDensityUnit.GramPerMillimeter, "g/mm")]
        [InlineData("en-US", LinearDensityUnit.KilogramPerCentimeter, "kg/cm")]
        [InlineData("en-US", LinearDensityUnit.KilogramPerFoot, "kg/ft")]
        [InlineData("en-US", LinearDensityUnit.KilogramPerMeter, "kg/m")]
        [InlineData("en-US", LinearDensityUnit.KilogramPerMillimeter, "kg/mm")]
        [InlineData("en-US", LinearDensityUnit.MicrogramPerCentimeter, "µg/cm")]
        [InlineData("en-US", LinearDensityUnit.MicrogramPerFoot, "µg/ft")]
        [InlineData("en-US", LinearDensityUnit.MicrogramPerMeter, "µg/m")]
        [InlineData("en-US", LinearDensityUnit.MicrogramPerMillimeter, "µg/mm")]
        [InlineData("en-US", LinearDensityUnit.MilligramPerCentimeter, "mg/cm")]
        [InlineData("en-US", LinearDensityUnit.MilligramPerFoot, "mg/ft")]
        [InlineData("en-US", LinearDensityUnit.MilligramPerMeter, "mg/m")]
        [InlineData("en-US", LinearDensityUnit.MilligramPerMillimeter, "mg/mm")]
        [InlineData("en-US", LinearDensityUnit.PoundPerFoot, "lb/ft")]
        [InlineData("en-US", LinearDensityUnit.PoundPerInch, "lb/in")]
        public void GetAbbreviationForCulture(string culture, LinearDensityUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = LinearDensity.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(LinearDensity.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = LinearDensity.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(LinearDensityUnit unit)
        {
            var inBaseUnits = LinearDensity.From(1.0, LinearDensity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(LinearDensityUnit unit)
        {
            var quantity = LinearDensity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(LinearDensityUnit unit)
        {
            Assert.All(LinearDensity.Units.Where(u => u != LinearDensity.BaseUnit), fromUnit =>
            {
                var quantity = LinearDensity.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(LinearDensityUnit unit)
        {
            var quantity = default(LinearDensity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(LinearDensityUnit unit)
        {
            var quantity = LinearDensity.From(3, LinearDensity.BaseUnit);
            LinearDensity expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<LinearDensityUnit> quantityToConvert = quantity;
                IQuantity<LinearDensityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            AssertEx.EqualTolerance(1, LinearDensity.FromGramsPerCentimeter(kilogrampermeter.GramsPerCentimeter).KilogramsPerMeter, GramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromGramsPerFoot(kilogrampermeter.GramsPerFoot).KilogramsPerMeter, GramsPerFootTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromGramsPerMeter(kilogrampermeter.GramsPerMeter).KilogramsPerMeter, GramsPerMeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromGramsPerMillimeter(kilogrampermeter.GramsPerMillimeter).KilogramsPerMeter, GramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromKilogramsPerCentimeter(kilogrampermeter.KilogramsPerCentimeter).KilogramsPerMeter, KilogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromKilogramsPerFoot(kilogrampermeter.KilogramsPerFoot).KilogramsPerMeter, KilogramsPerFootTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromKilogramsPerMeter(kilogrampermeter.KilogramsPerMeter).KilogramsPerMeter, KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromKilogramsPerMillimeter(kilogrampermeter.KilogramsPerMillimeter).KilogramsPerMeter, KilogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromMicrogramsPerCentimeter(kilogrampermeter.MicrogramsPerCentimeter).KilogramsPerMeter, MicrogramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromMicrogramsPerFoot(kilogrampermeter.MicrogramsPerFoot).KilogramsPerMeter, MicrogramsPerFootTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromMicrogramsPerMeter(kilogrampermeter.MicrogramsPerMeter).KilogramsPerMeter, MicrogramsPerMeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromMicrogramsPerMillimeter(kilogrampermeter.MicrogramsPerMillimeter).KilogramsPerMeter, MicrogramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromMilligramsPerCentimeter(kilogrampermeter.MilligramsPerCentimeter).KilogramsPerMeter, MilligramsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromMilligramsPerFoot(kilogrampermeter.MilligramsPerFoot).KilogramsPerMeter, MilligramsPerFootTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromMilligramsPerMeter(kilogrampermeter.MilligramsPerMeter).KilogramsPerMeter, MilligramsPerMeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromMilligramsPerMillimeter(kilogrampermeter.MilligramsPerMillimeter).KilogramsPerMeter, MilligramsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromPoundsPerFoot(kilogrampermeter.PoundsPerFoot).KilogramsPerMeter, PoundsPerFootTolerance);
            AssertEx.EqualTolerance(1, LinearDensity.FromPoundsPerInch(kilogrampermeter.PoundsPerInch).KilogramsPerMeter, PoundsPerInchTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            LinearDensity v = LinearDensity.FromKilogramsPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.KilogramsPerMeter, KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (LinearDensity.FromKilogramsPerMeter(3)-v).KilogramsPerMeter, KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).KilogramsPerMeter, KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).KilogramsPerMeter, KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).KilogramsPerMeter, KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (LinearDensity.FromKilogramsPerMeter(10)/5).KilogramsPerMeter, KilogramsPerMeterTolerance);
            AssertEx.EqualTolerance(2, LinearDensity.FromKilogramsPerMeter(10)/LinearDensity.FromKilogramsPerMeter(5), KilogramsPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            LinearDensity oneKilogramPerMeter = LinearDensity.FromKilogramsPerMeter(1);
            LinearDensity twoKilogramsPerMeter = LinearDensity.FromKilogramsPerMeter(2);

            Assert.True(oneKilogramPerMeter < twoKilogramsPerMeter);
            Assert.True(oneKilogramPerMeter <= twoKilogramsPerMeter);
            Assert.True(twoKilogramsPerMeter > oneKilogramPerMeter);
            Assert.True(twoKilogramsPerMeter >= oneKilogramPerMeter);

            Assert.False(oneKilogramPerMeter > twoKilogramsPerMeter);
            Assert.False(oneKilogramPerMeter >= twoKilogramsPerMeter);
            Assert.False(twoKilogramsPerMeter < oneKilogramPerMeter);
            Assert.False(twoKilogramsPerMeter <= oneKilogramPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.Equal(0, kilogrampermeter.CompareTo(kilogrampermeter));
            Assert.True(kilogrampermeter.CompareTo(LinearDensity.Zero) > 0);
            Assert.True(LinearDensity.Zero.CompareTo(kilogrampermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.Throws<ArgumentException>(() => kilogrampermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => kilogrampermeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, LinearDensityUnit.KilogramPerMeter, 1, LinearDensityUnit.KilogramPerMeter, true)]  // Same value and unit.
        [InlineData(1, LinearDensityUnit.KilogramPerMeter, 2, LinearDensityUnit.KilogramPerMeter, false)] // Different value.
        [InlineData(2, LinearDensityUnit.KilogramPerMeter, 1, LinearDensityUnit.GramPerCentimeter, false)] // Different value and unit.
        [InlineData(1, LinearDensityUnit.KilogramPerMeter, 1, LinearDensityUnit.GramPerCentimeter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, LinearDensityUnit unitA, double valueB, LinearDensityUnit unitB, bool expectEqual)
        {
            var a = new LinearDensity(valueA, unitA);
            var b = new LinearDensity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = LinearDensity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.False(kilogrampermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            LinearDensity kilogrampermeter = LinearDensity.FromKilogramsPerMeter(1);
            Assert.False(kilogrampermeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(firstValue);
            var otherQuantity = LinearDensity.FromKilogramsPerMeter(secondValue);
            LinearDensity maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, LinearDensity.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1);
            var negativeTolerance = LinearDensity.FromKilogramsPerMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<LinearDensityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(LinearDensity.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 g/cm", new LinearDensity(1, LinearDensityUnit.GramPerCentimeter).ToString());
            Assert.Equal("1 g/ft", new LinearDensity(1, LinearDensityUnit.GramPerFoot).ToString());
            Assert.Equal("1 g/m", new LinearDensity(1, LinearDensityUnit.GramPerMeter).ToString());
            Assert.Equal("1 g/mm", new LinearDensity(1, LinearDensityUnit.GramPerMillimeter).ToString());
            Assert.Equal("1 kg/cm", new LinearDensity(1, LinearDensityUnit.KilogramPerCentimeter).ToString());
            Assert.Equal("1 kg/ft", new LinearDensity(1, LinearDensityUnit.KilogramPerFoot).ToString());
            Assert.Equal("1 kg/m", new LinearDensity(1, LinearDensityUnit.KilogramPerMeter).ToString());
            Assert.Equal("1 kg/mm", new LinearDensity(1, LinearDensityUnit.KilogramPerMillimeter).ToString());
            Assert.Equal("1 µg/cm", new LinearDensity(1, LinearDensityUnit.MicrogramPerCentimeter).ToString());
            Assert.Equal("1 µg/ft", new LinearDensity(1, LinearDensityUnit.MicrogramPerFoot).ToString());
            Assert.Equal("1 µg/m", new LinearDensity(1, LinearDensityUnit.MicrogramPerMeter).ToString());
            Assert.Equal("1 µg/mm", new LinearDensity(1, LinearDensityUnit.MicrogramPerMillimeter).ToString());
            Assert.Equal("1 mg/cm", new LinearDensity(1, LinearDensityUnit.MilligramPerCentimeter).ToString());
            Assert.Equal("1 mg/ft", new LinearDensity(1, LinearDensityUnit.MilligramPerFoot).ToString());
            Assert.Equal("1 mg/m", new LinearDensity(1, LinearDensityUnit.MilligramPerMeter).ToString());
            Assert.Equal("1 mg/mm", new LinearDensity(1, LinearDensityUnit.MilligramPerMillimeter).ToString());
            Assert.Equal("1 lb/ft", new LinearDensity(1, LinearDensityUnit.PoundPerFoot).ToString());
            Assert.Equal("1 lb/in", new LinearDensity(1, LinearDensityUnit.PoundPerInch).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 g/cm", new LinearDensity(1, LinearDensityUnit.GramPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 g/ft", new LinearDensity(1, LinearDensityUnit.GramPerFoot).ToString(swedishCulture));
            Assert.Equal("1 g/m", new LinearDensity(1, LinearDensityUnit.GramPerMeter).ToString(swedishCulture));
            Assert.Equal("1 g/mm", new LinearDensity(1, LinearDensityUnit.GramPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/cm", new LinearDensity(1, LinearDensityUnit.KilogramPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/ft", new LinearDensity(1, LinearDensityUnit.KilogramPerFoot).ToString(swedishCulture));
            Assert.Equal("1 kg/m", new LinearDensity(1, LinearDensityUnit.KilogramPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kg/mm", new LinearDensity(1, LinearDensityUnit.KilogramPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 µg/cm", new LinearDensity(1, LinearDensityUnit.MicrogramPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µg/ft", new LinearDensity(1, LinearDensityUnit.MicrogramPerFoot).ToString(swedishCulture));
            Assert.Equal("1 µg/m", new LinearDensity(1, LinearDensityUnit.MicrogramPerMeter).ToString(swedishCulture));
            Assert.Equal("1 µg/mm", new LinearDensity(1, LinearDensityUnit.MicrogramPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 mg/cm", new LinearDensity(1, LinearDensityUnit.MilligramPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mg/ft", new LinearDensity(1, LinearDensityUnit.MilligramPerFoot).ToString(swedishCulture));
            Assert.Equal("1 mg/m", new LinearDensity(1, LinearDensityUnit.MilligramPerMeter).ToString(swedishCulture));
            Assert.Equal("1 mg/mm", new LinearDensity(1, LinearDensityUnit.MilligramPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 lb/ft", new LinearDensity(1, LinearDensityUnit.PoundPerFoot).ToString(swedishCulture));
            Assert.Equal("1 lb/in", new LinearDensity(1, LinearDensityUnit.PoundPerInch).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s1"));
            Assert.Equal("0.12 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s2"));
            Assert.Equal("0.123 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s3"));
            Assert.Equal("0.1235 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 kg/m", new LinearDensity(0.123456, LinearDensityUnit.KilogramPerMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = LinearDensity.FromKilogramsPerMeter(value);
            Assert.Equal(LinearDensity.FromKilogramsPerMeter(-value), -quantity);
        }
    }
}
