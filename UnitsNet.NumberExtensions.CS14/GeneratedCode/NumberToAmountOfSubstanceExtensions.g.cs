//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToAmountOfSubstance
{
    /// <summary>
    /// A number to AmountOfSubstance Extensions
    /// </summary>
    public static class NumberToAmountOfSubstanceExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="AmountOfSubstance.FromCentimoles(QuantityValue)" />
            public AmountOfSubstance Centimoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromCentimoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromCentimoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromCentipoundMoles(QuantityValue)" />
            public AmountOfSubstance CentipoundMoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromCentipoundMoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromCentipoundMoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromDecimoles(QuantityValue)" />
            public AmountOfSubstance Decimoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromDecimoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromDecimoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromDecipoundMoles(QuantityValue)" />
            public AmountOfSubstance DecipoundMoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromDecipoundMoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromDecipoundMoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromFemtomoles(QuantityValue)" />
            public AmountOfSubstance Femtomoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromFemtomoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromFemtomoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromKilomoles(QuantityValue)" />
            public AmountOfSubstance Kilomoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromKilomoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromKilomoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromKilopoundMoles(QuantityValue)" />
            public AmountOfSubstance KilopoundMoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromKilopoundMoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromKilopoundMoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromMegamoles(QuantityValue)" />
            public AmountOfSubstance Megamoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromMegamoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromMegamoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromMicromoles(QuantityValue)" />
            public AmountOfSubstance Micromoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromMicromoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromMicromoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromMicropoundMoles(QuantityValue)" />
            public AmountOfSubstance MicropoundMoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromMicropoundMoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromMicropoundMoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromMillimoles(QuantityValue)" />
            public AmountOfSubstance Millimoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromMillimoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromMillimoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromMillipoundMoles(QuantityValue)" />
            public AmountOfSubstance MillipoundMoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromMillipoundMoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromMillipoundMoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromMoles(QuantityValue)" />
            public AmountOfSubstance Moles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromMoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromMoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromNanomoles(QuantityValue)" />
            public AmountOfSubstance Nanomoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromNanomoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromNanomoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromNanopoundMoles(QuantityValue)" />
            public AmountOfSubstance NanopoundMoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromNanopoundMoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromNanopoundMoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromPicomoles(QuantityValue)" />
            public AmountOfSubstance Picomoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromPicomoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromPicomoles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AmountOfSubstance.FromPoundMoles(QuantityValue)" />
            public AmountOfSubstance PoundMoles
#if NET7_0_OR_GREATER
                => AmountOfSubstance.FromPoundMoles(QuantityValue.CreateChecked(value));
#else
                => AmountOfSubstance.FromPoundMoles(value.ToQuantityValue());
#endif

        }
    }
}
