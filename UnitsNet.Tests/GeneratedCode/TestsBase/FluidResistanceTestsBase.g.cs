//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of FluidResistance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class FluidResistanceTestsBase : QuantityTestsBase
    {
        protected abstract double DyneSecondsPerCentimeterToTheFifthInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MegapascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercuryMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercuryMinutesPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercuryMinutesPerLiterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercuryMinutesPerMilliliterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercurySecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercurySecondsPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercurySecondsPerLiterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercurySecondsPerMilliliterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalMinutesPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalMinutesPerLiterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalMinutesPerMilliliterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalSecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalSecondsPerLiterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalSecondsPerMilliliterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double WoodUnitsInOnePascalSecondPerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DyneSecondsPerCentimeterToTheFifthTolerance { get { return 1e-5; } }
        protected virtual double MegapascalSecondsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercuryMinutesPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercuryMinutesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercuryMinutesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercuryMinutesPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercurySecondsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercurySecondsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercurySecondsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercurySecondsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PascalMinutesPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PascalMinutesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PascalMinutesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PascalMinutesPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PascalSecondsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PascalSecondsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PascalSecondsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PascalSecondsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double WoodUnitsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(FluidResistanceUnit unit)
        {
            return unit switch
            {
                FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth => (DyneSecondsPerCentimeterToTheFifthInOnePascalSecondPerCubicMeter, DyneSecondsPerCentimeterToTheFifthTolerance),
                FluidResistanceUnit.MegapascalSecondPerCubicMeter => (MegapascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance),
                FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter => (MillimeterMercuryMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance),
                FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter => (MillimeterMercuryMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance),
                FluidResistanceUnit.MillimeterMercuryMinutePerLiter => (MillimeterMercuryMinutesPerLiterInOnePascalSecondPerCubicMeter, MillimeterMercuryMinutesPerLiterTolerance),
                FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter => (MillimeterMercuryMinutesPerMilliliterInOnePascalSecondPerCubicMeter, MillimeterMercuryMinutesPerMilliliterTolerance),
                FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter => (MillimeterMercurySecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, MillimeterMercurySecondsPerCubicCentimeterTolerance),
                FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter => (MillimeterMercurySecondsPerCubicMeterInOnePascalSecondPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance),
                FluidResistanceUnit.MillimeterMercurySecondPerLiter => (MillimeterMercurySecondsPerLiterInOnePascalSecondPerCubicMeter, MillimeterMercurySecondsPerLiterTolerance),
                FluidResistanceUnit.MillimeterMercurySecondPerMilliliter => (MillimeterMercurySecondsPerMilliliterInOnePascalSecondPerCubicMeter, MillimeterMercurySecondsPerMilliliterTolerance),
                FluidResistanceUnit.PascalMinutePerCubicCentimeter => (PascalMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, PascalMinutesPerCubicCentimeterTolerance),
                FluidResistanceUnit.PascalMinutePerCubicMeter => (PascalMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, PascalMinutesPerCubicMeterTolerance),
                FluidResistanceUnit.PascalMinutePerLiter => (PascalMinutesPerLiterInOnePascalSecondPerCubicMeter, PascalMinutesPerLiterTolerance),
                FluidResistanceUnit.PascalMinutePerMilliliter => (PascalMinutesPerMilliliterInOnePascalSecondPerCubicMeter, PascalMinutesPerMilliliterTolerance),
                FluidResistanceUnit.PascalSecondPerCubicCentimeter => (PascalSecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, PascalSecondsPerCubicCentimeterTolerance),
                FluidResistanceUnit.PascalSecondPerCubicMeter => (PascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, PascalSecondsPerCubicMeterTolerance),
                FluidResistanceUnit.PascalSecondPerLiter => (PascalSecondsPerLiterInOnePascalSecondPerCubicMeter, PascalSecondsPerLiterTolerance),
                FluidResistanceUnit.PascalSecondPerMilliliter => (PascalSecondsPerMilliliterInOnePascalSecondPerCubicMeter, PascalSecondsPerMilliliterTolerance),
                FluidResistanceUnit.WoodUnit => (WoodUnitsInOnePascalSecondPerCubicMeter, WoodUnitsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth },
            new object[] { FluidResistanceUnit.MegapascalSecondPerCubicMeter },
            new object[] { FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter },
            new object[] { FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter },
            new object[] { FluidResistanceUnit.MillimeterMercuryMinutePerLiter },
            new object[] { FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter },
            new object[] { FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter },
            new object[] { FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter },
            new object[] { FluidResistanceUnit.MillimeterMercurySecondPerLiter },
            new object[] { FluidResistanceUnit.MillimeterMercurySecondPerMilliliter },
            new object[] { FluidResistanceUnit.PascalMinutePerCubicCentimeter },
            new object[] { FluidResistanceUnit.PascalMinutePerCubicMeter },
            new object[] { FluidResistanceUnit.PascalMinutePerLiter },
            new object[] { FluidResistanceUnit.PascalMinutePerMilliliter },
            new object[] { FluidResistanceUnit.PascalSecondPerCubicCentimeter },
            new object[] { FluidResistanceUnit.PascalSecondPerCubicMeter },
            new object[] { FluidResistanceUnit.PascalSecondPerLiter },
            new object[] { FluidResistanceUnit.PascalSecondPerMilliliter },
            new object[] { FluidResistanceUnit.WoodUnit },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new FluidResistance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new FluidResistance(double.PositiveInfinity, FluidResistanceUnit.PascalSecondPerCubicMeter));
            var exception2 = Record.Exception(() => new FluidResistance(double.NegativeInfinity, FluidResistanceUnit.PascalSecondPerCubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new FluidResistance(double.NaN, FluidResistanceUnit.PascalSecondPerCubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new FluidResistance(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new FluidResistance(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new FluidResistance(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void FluidResistance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            FluidResistanceUnit[] unitsOrderedByName = EnumHelper.GetValues<FluidResistanceUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicMeter);

            QuantityInfo<FluidResistance, FluidResistanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("FluidResistance", quantityInfo.Name);
            Assert.Equal(FluidResistance.Zero, quantityInfo.Zero);
            Assert.Equal(FluidResistance.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(FluidResistance.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<FluidResistanceUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void PascalSecondPerCubicMeterToFluidResistanceUnits()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            AssertEx.EqualTolerance(DyneSecondsPerCentimeterToTheFifthInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
            AssertEx.EqualTolerance(MegapascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MegapascalSecondsPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercuryMinutesPerCubicCentimeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercuryMinutesPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercuryMinutesPerLiter, MillimeterMercuryMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercuryMinutesPerMilliliter, MillimeterMercuryMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercurySecondsPerCubicCentimeter, MillimeterMercurySecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercurySecondsPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercurySecondsPerLiter, MillimeterMercurySecondsPerLiterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercurySecondsPerMilliliter, MillimeterMercurySecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalMinutesPerCubicCentimeter, PascalMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalMinutesPerCubicMeter, PascalMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalMinutesPerLiter, PascalMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalMinutesPerMilliliter, PascalMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalSecondsPerCubicCentimeter, PascalSecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalSecondsPerLiter, PascalSecondsPerLiterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalSecondsPerMilliliter, PascalSecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(WoodUnitsInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.WoodUnits, WoodUnitsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<FluidResistanceUnit>(), unit =>
            {
                var quantity = FluidResistance.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromPascalSecondsPerCubicMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => FluidResistance.FromPascalSecondsPerCubicMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => FluidResistance.FromPascalSecondsPerCubicMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromPascalSecondsPerCubicMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => FluidResistance.FromPascalSecondsPerCubicMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            AssertEx.EqualTolerance(DyneSecondsPerCentimeterToTheFifthInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth), DyneSecondsPerCentimeterToTheFifthTolerance);
            AssertEx.EqualTolerance(MegapascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MegapascalSecondPerCubicMeter), MegapascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter), MillimeterMercuryMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter), MillimeterMercuryMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercuryMinutePerLiter), MillimeterMercuryMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter), MillimeterMercuryMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter), MillimeterMercurySecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter), MillimeterMercurySecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercurySecondPerLiter), MillimeterMercurySecondsPerLiterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter), MillimeterMercurySecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalMinutePerCubicCentimeter), PascalMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalMinutePerCubicMeter), PascalMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalMinutePerLiter), PascalMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalMinutePerMilliliter), PascalMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalSecondPerCubicCentimeter), PascalSecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalSecondPerCubicMeter), PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalSecondPerLiter), PascalSecondsPerLiterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalSecondPerMilliliter), PascalSecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(WoodUnitsInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.WoodUnit), WoodUnitsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = FluidResistance.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
            var expectedValue = quantity.As(FluidResistance.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
            var expectedUnit = FluidResistance.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                FluidResistance quantityToConvert = quantity;

                FluidResistance convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<FluidResistanceUnit> quantityToConvert = quantity;

                IQuantity<FluidResistanceUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public virtual void ToUnitUntyped_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
            var expectedUnit = FluidResistance.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            IQuantity quantityToConvert = quantity;

            IQuantity convertedQuantity = quantityToConvert.ToUnitUntyped(UnitSystem.SI);

            Assert.Equal(expectedUnit, convertedQuantity.Unit);
            Assert.Equal(expectedValue, convertedQuantity.Value);
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<FluidResistanceUnit> quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnitUntyped_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            IQuantity quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
            Assert.Throws<ArgumentNullException>(() => quantity.ToUnitUntyped(nullUnitSystem));
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<FluidResistanceUnit> quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void ToUnitUntyped_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            IQuantity quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
            Assert.Throws<ArgumentException>(() => quantity.ToUnitUntyped(unsupportedUnitSystem));
        }

        [Theory]
        [InlineData("en-US", "4.2 dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, 4.2)]
        [InlineData("en-US", "4.2 dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, 4.2)]
        [InlineData("en-US", "4.2 MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter, 4.2)]
        [InlineData("en-US", "4.2 Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter, 4.2)]
        [InlineData("en-US", "4.2 Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 WU", FluidResistanceUnit.WoodUnit, 4.2)]
        [InlineData("en-US", "4.2 HRU", FluidResistanceUnit.WoodUnit, 4.2)]
        [InlineData("ru-RU", "4,2 дин·с/см⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, 4.2)]
        [InlineData("ru-RU", "4,2 дин·с·см⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, 4.2)]
        [InlineData("ru-RU", "4,2 МПа·с/м³", FluidResistanceUnit.MegapascalSecondPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·мин/см³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·мин/м³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·мин/л", FluidResistanceUnit.MillimeterMercuryMinutePerLiter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·мин/мл", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·с/см³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·с/м³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·с/л", FluidResistanceUnit.MillimeterMercurySecondPerLiter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·с/мл", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·мин/см³", FluidResistanceUnit.PascalMinutePerCubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·мин/м³", FluidResistanceUnit.PascalMinutePerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·мин/л", FluidResistanceUnit.PascalMinutePerLiter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·мин/мл", FluidResistanceUnit.PascalMinutePerMilliliter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·с/см³", FluidResistanceUnit.PascalSecondPerCubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·с/м³", FluidResistanceUnit.PascalSecondPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·с/л", FluidResistanceUnit.PascalSecondPerLiter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·с/мл", FluidResistanceUnit.PascalSecondPerMilliliter, 4.2)]
        [InlineData("ru-RU", "4,2 ЕВ", FluidResistanceUnit.WoodUnit, 4.2)]
        [InlineData("ru-RU", "4,2 ЕГС", FluidResistanceUnit.WoodUnit, 4.2)]
        public void Parse(string culture, string quantityString, FluidResistanceUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = FluidResistance.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, 4.2)]
        [InlineData("en-US", "4.2 dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, 4.2)]
        [InlineData("en-US", "4.2 MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter, 4.2)]
        [InlineData("en-US", "4.2 mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter, 4.2)]
        [InlineData("en-US", "4.2 Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter, 4.2)]
        [InlineData("en-US", "4.2 Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 WU", FluidResistanceUnit.WoodUnit, 4.2)]
        [InlineData("en-US", "4.2 HRU", FluidResistanceUnit.WoodUnit, 4.2)]
        [InlineData("ru-RU", "4,2 дин·с/см⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, 4.2)]
        [InlineData("ru-RU", "4,2 дин·с·см⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, 4.2)]
        [InlineData("ru-RU", "4,2 МПа·с/м³", FluidResistanceUnit.MegapascalSecondPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·мин/см³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·мин/м³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·мин/л", FluidResistanceUnit.MillimeterMercuryMinutePerLiter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·мин/мл", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·с/см³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·с/м³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·с/л", FluidResistanceUnit.MillimeterMercurySecondPerLiter, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст·с/мл", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·мин/см³", FluidResistanceUnit.PascalMinutePerCubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·мин/м³", FluidResistanceUnit.PascalMinutePerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·мин/л", FluidResistanceUnit.PascalMinutePerLiter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·мин/мл", FluidResistanceUnit.PascalMinutePerMilliliter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·с/см³", FluidResistanceUnit.PascalSecondPerCubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·с/м³", FluidResistanceUnit.PascalSecondPerCubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·с/л", FluidResistanceUnit.PascalSecondPerLiter, 4.2)]
        [InlineData("ru-RU", "4,2 Па·с/мл", FluidResistanceUnit.PascalSecondPerMilliliter, 4.2)]
        [InlineData("ru-RU", "4,2 ЕВ", FluidResistanceUnit.WoodUnit, 4.2)]
        [InlineData("ru-RU", "4,2 ЕГС", FluidResistanceUnit.WoodUnit, 4.2)]
        public void TryParse(string culture, string quantityString, FluidResistanceUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(FluidResistance.TryParse(quantityString, out FluidResistance parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("WU", FluidResistanceUnit.WoodUnit)]
        [InlineData("HRU", FluidResistanceUnit.WoodUnit)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, FluidResistanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            FluidResistanceUnit parsedUnit = FluidResistance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("WU", FluidResistanceUnit.WoodUnit)]
        [InlineData("HRU", FluidResistanceUnit.WoodUnit)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, FluidResistanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            FluidResistanceUnit parsedUnit = FluidResistance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("en-US", "dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("en-US", "MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("en-US", "mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("en-US", "mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("en-US", "mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("en-US", "mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("en-US", "mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("en-US", "mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("en-US", "mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("en-US", "mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("en-US", "Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("en-US", "Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("en-US", "Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("en-US", "Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("en-US", "Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("en-US", "Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("en-US", "Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("en-US", "Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("en-US", "WU", FluidResistanceUnit.WoodUnit)]
        [InlineData("en-US", "HRU", FluidResistanceUnit.WoodUnit)]
        [InlineData("ru-RU", "дин·с/см⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("ru-RU", "дин·с·см⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("ru-RU", "МПа·с/м³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/см³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/м³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/л", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("ru-RU", "мм рт.ст·мин/мл", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("ru-RU", "мм рт.ст·с/см³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("ru-RU", "мм рт.ст·с/м³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·с/л", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("ru-RU", "мм рт.ст·с/мл", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("ru-RU", "Па·мин/см³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("ru-RU", "Па·мин/м³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("ru-RU", "Па·мин/л", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("ru-RU", "Па·мин/мл", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("ru-RU", "Па·с/см³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("ru-RU", "Па·с/м³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("ru-RU", "Па·с/л", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("ru-RU", "Па·с/мл", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("ru-RU", "ЕВ", FluidResistanceUnit.WoodUnit)]
        [InlineData("ru-RU", "ЕГС", FluidResistanceUnit.WoodUnit)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, FluidResistanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            FluidResistanceUnit parsedUnit = FluidResistance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("en-US", "dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("en-US", "MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("en-US", "mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("en-US", "mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("en-US", "mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("en-US", "mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("en-US", "mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("en-US", "mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("en-US", "mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("en-US", "mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("en-US", "Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("en-US", "Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("en-US", "Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("en-US", "Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("en-US", "Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("en-US", "Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("en-US", "Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("en-US", "Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("en-US", "WU", FluidResistanceUnit.WoodUnit)]
        [InlineData("en-US", "HRU", FluidResistanceUnit.WoodUnit)]
        [InlineData("ru-RU", "дин·с/см⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("ru-RU", "дин·с·см⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("ru-RU", "МПа·с/м³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/см³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/м³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/л", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("ru-RU", "мм рт.ст·мин/мл", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("ru-RU", "мм рт.ст·с/см³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("ru-RU", "мм рт.ст·с/м³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·с/л", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("ru-RU", "мм рт.ст·с/мл", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("ru-RU", "Па·мин/см³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("ru-RU", "Па·мин/м³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("ru-RU", "Па·мин/л", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("ru-RU", "Па·мин/мл", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("ru-RU", "Па·с/см³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("ru-RU", "Па·с/м³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("ru-RU", "Па·с/л", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("ru-RU", "Па·с/мл", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("ru-RU", "ЕВ", FluidResistanceUnit.WoodUnit)]
        [InlineData("ru-RU", "ЕГС", FluidResistanceUnit.WoodUnit)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, FluidResistanceUnit expectedUnit)
        {
            FluidResistanceUnit parsedUnit = FluidResistance.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("WU", FluidResistanceUnit.WoodUnit)]
        [InlineData("HRU", FluidResistanceUnit.WoodUnit)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, FluidResistanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(FluidResistance.TryParseUnit(abbreviation, out FluidResistanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("WU", FluidResistanceUnit.WoodUnit)]
        [InlineData("HRU", FluidResistanceUnit.WoodUnit)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, FluidResistanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(FluidResistance.TryParseUnit(abbreviation, out FluidResistanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("en-US", "dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("en-US", "MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("en-US", "mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("en-US", "mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("en-US", "mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("en-US", "mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("en-US", "mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("en-US", "mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("en-US", "mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("en-US", "mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("en-US", "Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("en-US", "Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("en-US", "Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("en-US", "Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("en-US", "Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("en-US", "Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("en-US", "Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("en-US", "Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("en-US", "WU", FluidResistanceUnit.WoodUnit)]
        [InlineData("en-US", "HRU", FluidResistanceUnit.WoodUnit)]
        [InlineData("ru-RU", "дин·с/см⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("ru-RU", "дин·с·см⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("ru-RU", "МПа·с/м³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/см³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/м³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/л", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("ru-RU", "мм рт.ст·мин/мл", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("ru-RU", "мм рт.ст·с/см³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("ru-RU", "мм рт.ст·с/м³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·с/л", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("ru-RU", "мм рт.ст·с/мл", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("ru-RU", "Па·мин/см³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("ru-RU", "Па·мин/м³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("ru-RU", "Па·мин/л", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("ru-RU", "Па·мин/мл", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("ru-RU", "Па·с/см³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("ru-RU", "Па·с/м³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("ru-RU", "Па·с/л", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("ru-RU", "Па·с/мл", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("ru-RU", "ЕВ", FluidResistanceUnit.WoodUnit)]
        [InlineData("ru-RU", "ЕГС", FluidResistanceUnit.WoodUnit)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, FluidResistanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(FluidResistance.TryParseUnit(abbreviation, out FluidResistanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "dyn·s/cm⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("en-US", "dyn·s·cm⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("en-US", "MPa·s/m³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("en-US", "mmHg·min/cm³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("en-US", "mmHg·min/m³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("en-US", "mmHg·min/l", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("en-US", "mmHg·min/ml", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("en-US", "mmHg·s/cm³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("en-US", "mmHg·s/m³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("en-US", "mmHg·s/l", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("en-US", "mmHg·s/ml", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("en-US", "Pa·min/cm³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("en-US", "Pa·min/m³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("en-US", "Pa·min/l", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("en-US", "Pa·min/ml", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("en-US", "Pa·s/cm³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("en-US", "Pa·s/m³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("en-US", "Pa·s/l", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("en-US", "Pa·s/ml", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("en-US", "WU", FluidResistanceUnit.WoodUnit)]
        [InlineData("en-US", "HRU", FluidResistanceUnit.WoodUnit)]
        [InlineData("ru-RU", "дин·с/см⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("ru-RU", "дин·с·см⁻⁵", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth)]
        [InlineData("ru-RU", "МПа·с/м³", FluidResistanceUnit.MegapascalSecondPerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/см³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/м³", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·мин/л", FluidResistanceUnit.MillimeterMercuryMinutePerLiter)]
        [InlineData("ru-RU", "мм рт.ст·мин/мл", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter)]
        [InlineData("ru-RU", "мм рт.ст·с/см³", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter)]
        [InlineData("ru-RU", "мм рт.ст·с/м³", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter)]
        [InlineData("ru-RU", "мм рт.ст·с/л", FluidResistanceUnit.MillimeterMercurySecondPerLiter)]
        [InlineData("ru-RU", "мм рт.ст·с/мл", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter)]
        [InlineData("ru-RU", "Па·мин/см³", FluidResistanceUnit.PascalMinutePerCubicCentimeter)]
        [InlineData("ru-RU", "Па·мин/м³", FluidResistanceUnit.PascalMinutePerCubicMeter)]
        [InlineData("ru-RU", "Па·мин/л", FluidResistanceUnit.PascalMinutePerLiter)]
        [InlineData("ru-RU", "Па·мин/мл", FluidResistanceUnit.PascalMinutePerMilliliter)]
        [InlineData("ru-RU", "Па·с/см³", FluidResistanceUnit.PascalSecondPerCubicCentimeter)]
        [InlineData("ru-RU", "Па·с/м³", FluidResistanceUnit.PascalSecondPerCubicMeter)]
        [InlineData("ru-RU", "Па·с/л", FluidResistanceUnit.PascalSecondPerLiter)]
        [InlineData("ru-RU", "Па·с/мл", FluidResistanceUnit.PascalSecondPerMilliliter)]
        [InlineData("ru-RU", "ЕВ", FluidResistanceUnit.WoodUnit)]
        [InlineData("ru-RU", "ЕГС", FluidResistanceUnit.WoodUnit)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, FluidResistanceUnit expectedUnit)
        {
            Assert.True(FluidResistance.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out FluidResistanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, "dyn·s/cm⁵")]
        [InlineData("en-US", FluidResistanceUnit.MegapascalSecondPerCubicMeter, "MPa·s/m³")]
        [InlineData("en-US", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, "mmHg·min/cm³")]
        [InlineData("en-US", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, "mmHg·min/m³")]
        [InlineData("en-US", FluidResistanceUnit.MillimeterMercuryMinutePerLiter, "mmHg·min/l")]
        [InlineData("en-US", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, "mmHg·min/ml")]
        [InlineData("en-US", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, "mmHg·s/cm³")]
        [InlineData("en-US", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, "mmHg·s/m³")]
        [InlineData("en-US", FluidResistanceUnit.MillimeterMercurySecondPerLiter, "mmHg·s/l")]
        [InlineData("en-US", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, "mmHg·s/ml")]
        [InlineData("en-US", FluidResistanceUnit.PascalMinutePerCubicCentimeter, "Pa·min/cm³")]
        [InlineData("en-US", FluidResistanceUnit.PascalMinutePerCubicMeter, "Pa·min/m³")]
        [InlineData("en-US", FluidResistanceUnit.PascalMinutePerLiter, "Pa·min/l")]
        [InlineData("en-US", FluidResistanceUnit.PascalMinutePerMilliliter, "Pa·min/ml")]
        [InlineData("en-US", FluidResistanceUnit.PascalSecondPerCubicCentimeter, "Pa·s/cm³")]
        [InlineData("en-US", FluidResistanceUnit.PascalSecondPerCubicMeter, "Pa·s/m³")]
        [InlineData("en-US", FluidResistanceUnit.PascalSecondPerLiter, "Pa·s/l")]
        [InlineData("en-US", FluidResistanceUnit.PascalSecondPerMilliliter, "Pa·s/ml")]
        [InlineData("en-US", FluidResistanceUnit.WoodUnit, "WU")]
        [InlineData("ru-RU", FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, "дин·с/см⁵")]
        [InlineData("ru-RU", FluidResistanceUnit.MegapascalSecondPerCubicMeter, "МПа·с/м³")]
        [InlineData("ru-RU", FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, "мм рт.ст·мин/см³")]
        [InlineData("ru-RU", FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, "мм рт.ст·мин/м³")]
        [InlineData("ru-RU", FluidResistanceUnit.MillimeterMercuryMinutePerLiter, "мм рт.ст·мин/л")]
        [InlineData("ru-RU", FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, "мм рт.ст·мин/мл")]
        [InlineData("ru-RU", FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, "мм рт.ст·с/см³")]
        [InlineData("ru-RU", FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, "мм рт.ст·с/м³")]
        [InlineData("ru-RU", FluidResistanceUnit.MillimeterMercurySecondPerLiter, "мм рт.ст·с/л")]
        [InlineData("ru-RU", FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, "мм рт.ст·с/мл")]
        [InlineData("ru-RU", FluidResistanceUnit.PascalMinutePerCubicCentimeter, "Па·мин/см³")]
        [InlineData("ru-RU", FluidResistanceUnit.PascalMinutePerCubicMeter, "Па·мин/м³")]
        [InlineData("ru-RU", FluidResistanceUnit.PascalMinutePerLiter, "Па·мин/л")]
        [InlineData("ru-RU", FluidResistanceUnit.PascalMinutePerMilliliter, "Па·мин/мл")]
        [InlineData("ru-RU", FluidResistanceUnit.PascalSecondPerCubicCentimeter, "Па·с/см³")]
        [InlineData("ru-RU", FluidResistanceUnit.PascalSecondPerCubicMeter, "Па·с/м³")]
        [InlineData("ru-RU", FluidResistanceUnit.PascalSecondPerLiter, "Па·с/л")]
        [InlineData("ru-RU", FluidResistanceUnit.PascalSecondPerMilliliter, "Па·с/мл")]
        [InlineData("ru-RU", FluidResistanceUnit.WoodUnit, "ЕВ")]
        public void GetAbbreviationForCulture(string culture, FluidResistanceUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = FluidResistance.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(FluidResistance.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = FluidResistance.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(FluidResistanceUnit unit)
        {
            var inBaseUnits = FluidResistance.From(1.0, FluidResistance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(FluidResistanceUnit unit)
        {
            var quantity = FluidResistance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(FluidResistanceUnit unit)
        {
            Assert.All(FluidResistance.Units.Where(u => u != FluidResistance.BaseUnit), fromUnit =>
            {
                var quantity = FluidResistance.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(FluidResistanceUnit unit)
        {
            var quantity = default(FluidResistance);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(FluidResistanceUnit unit)
        {
            var quantity = FluidResistance.From(3, FluidResistance.BaseUnit);
            FluidResistance expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<FluidResistanceUnit> quantityToConvert = quantity;
                IQuantity<FluidResistanceUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            AssertEx.EqualTolerance(1, FluidResistance.FromDyneSecondsPerCentimeterToTheFifth(pascalsecondpercubicmeter.DyneSecondsPerCentimeterToTheFifth).PascalSecondsPerCubicMeter, DyneSecondsPerCentimeterToTheFifthTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMegapascalSecondsPerCubicMeter(pascalsecondpercubicmeter.MegapascalSecondsPerCubicMeter).PascalSecondsPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercuryMinutesPerCubicCentimeter(pascalsecondpercubicmeter.MillimeterMercuryMinutesPerCubicCentimeter).PascalSecondsPerCubicMeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercuryMinutesPerCubicMeter(pascalsecondpercubicmeter.MillimeterMercuryMinutesPerCubicMeter).PascalSecondsPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercuryMinutesPerLiter(pascalsecondpercubicmeter.MillimeterMercuryMinutesPerLiter).PascalSecondsPerCubicMeter, MillimeterMercuryMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercuryMinutesPerMilliliter(pascalsecondpercubicmeter.MillimeterMercuryMinutesPerMilliliter).PascalSecondsPerCubicMeter, MillimeterMercuryMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercurySecondsPerCubicCentimeter(pascalsecondpercubicmeter.MillimeterMercurySecondsPerCubicCentimeter).PascalSecondsPerCubicMeter, MillimeterMercurySecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercurySecondsPerCubicMeter(pascalsecondpercubicmeter.MillimeterMercurySecondsPerCubicMeter).PascalSecondsPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercurySecondsPerLiter(pascalsecondpercubicmeter.MillimeterMercurySecondsPerLiter).PascalSecondsPerCubicMeter, MillimeterMercurySecondsPerLiterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercurySecondsPerMilliliter(pascalsecondpercubicmeter.MillimeterMercurySecondsPerMilliliter).PascalSecondsPerCubicMeter, MillimeterMercurySecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalMinutesPerCubicCentimeter(pascalsecondpercubicmeter.PascalMinutesPerCubicCentimeter).PascalSecondsPerCubicMeter, PascalMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalMinutesPerCubicMeter(pascalsecondpercubicmeter.PascalMinutesPerCubicMeter).PascalSecondsPerCubicMeter, PascalMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalMinutesPerLiter(pascalsecondpercubicmeter.PascalMinutesPerLiter).PascalSecondsPerCubicMeter, PascalMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalMinutesPerMilliliter(pascalsecondpercubicmeter.PascalMinutesPerMilliliter).PascalSecondsPerCubicMeter, PascalMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalSecondsPerCubicCentimeter(pascalsecondpercubicmeter.PascalSecondsPerCubicCentimeter).PascalSecondsPerCubicMeter, PascalSecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalSecondsPerCubicMeter(pascalsecondpercubicmeter.PascalSecondsPerCubicMeter).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalSecondsPerLiter(pascalsecondpercubicmeter.PascalSecondsPerLiter).PascalSecondsPerCubicMeter, PascalSecondsPerLiterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalSecondsPerMilliliter(pascalsecondpercubicmeter.PascalSecondsPerMilliliter).PascalSecondsPerCubicMeter, PascalSecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromWoodUnits(pascalsecondpercubicmeter.WoodUnits).PascalSecondsPerCubicMeter, WoodUnitsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            FluidResistance v = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            AssertEx.EqualTolerance(-1, -v.PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (FluidResistance.FromPascalSecondsPerCubicMeter(3)-v).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (FluidResistance.FromPascalSecondsPerCubicMeter(10)/5).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, FluidResistance.FromPascalSecondsPerCubicMeter(10)/FluidResistance.FromPascalSecondsPerCubicMeter(5), PascalSecondsPerCubicMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            FluidResistance onePascalSecondPerCubicMeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            FluidResistance twoPascalSecondsPerCubicMeter = FluidResistance.FromPascalSecondsPerCubicMeter(2);

            Assert.True(onePascalSecondPerCubicMeter < twoPascalSecondsPerCubicMeter);
            Assert.True(onePascalSecondPerCubicMeter <= twoPascalSecondsPerCubicMeter);
            Assert.True(twoPascalSecondsPerCubicMeter > onePascalSecondPerCubicMeter);
            Assert.True(twoPascalSecondsPerCubicMeter >= onePascalSecondPerCubicMeter);

            Assert.False(onePascalSecondPerCubicMeter > twoPascalSecondsPerCubicMeter);
            Assert.False(onePascalSecondPerCubicMeter >= twoPascalSecondsPerCubicMeter);
            Assert.False(twoPascalSecondsPerCubicMeter < onePascalSecondPerCubicMeter);
            Assert.False(twoPascalSecondsPerCubicMeter <= onePascalSecondPerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.Equal(0, pascalsecondpercubicmeter.CompareTo(pascalsecondpercubicmeter));
            Assert.True(pascalsecondpercubicmeter.CompareTo(FluidResistance.Zero) > 0);
            Assert.True(FluidResistance.Zero.CompareTo(pascalsecondpercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => pascalsecondpercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => pascalsecondpercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, FluidResistanceUnit.PascalSecondPerCubicMeter, 1, FluidResistanceUnit.PascalSecondPerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, FluidResistanceUnit.PascalSecondPerCubicMeter, 2, FluidResistanceUnit.PascalSecondPerCubicMeter, false)] // Different value.
        [InlineData(2, FluidResistanceUnit.PascalSecondPerCubicMeter, 1, FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, false)] // Different value and unit.
        [InlineData(1, FluidResistanceUnit.PascalSecondPerCubicMeter, 1, FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, FluidResistanceUnit unitA, double valueB, FluidResistanceUnit unitB, bool expectEqual)
        {
            var a = new FluidResistance(valueA, unitA);
            var b = new FluidResistance(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = FluidResistance.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.False(pascalsecondpercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.False(pascalsecondpercubicmeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(firstValue);
            var otherQuantity = FluidResistance.FromPascalSecondsPerCubicMeter(secondValue);
            FluidResistance maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, FluidResistance.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            var negativeTolerance = FluidResistance.FromPascalSecondsPerCubicMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<FluidResistanceUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(FluidResistance.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 dyn·s/cm⁵", new FluidResistance(1, FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth).ToString());
            Assert.Equal("1 MPa·s/m³", new FluidResistance(1, FluidResistanceUnit.MegapascalSecondPerCubicMeter).ToString());
            Assert.Equal("1 mmHg·min/cm³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter).ToString());
            Assert.Equal("1 mmHg·min/m³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter).ToString());
            Assert.Equal("1 mmHg·min/l", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerLiter).ToString());
            Assert.Equal("1 mmHg·min/ml", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter).ToString());
            Assert.Equal("1 mmHg·s/cm³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter).ToString());
            Assert.Equal("1 mmHg·s/m³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter).ToString());
            Assert.Equal("1 mmHg·s/l", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerLiter).ToString());
            Assert.Equal("1 mmHg·s/ml", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerMilliliter).ToString());
            Assert.Equal("1 Pa·min/cm³", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerCubicCentimeter).ToString());
            Assert.Equal("1 Pa·min/m³", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerCubicMeter).ToString());
            Assert.Equal("1 Pa·min/l", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerLiter).ToString());
            Assert.Equal("1 Pa·min/ml", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerMilliliter).ToString());
            Assert.Equal("1 Pa·s/cm³", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicCentimeter).ToString());
            Assert.Equal("1 Pa·s/m³", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString());
            Assert.Equal("1 Pa·s/l", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerLiter).ToString());
            Assert.Equal("1 Pa·s/ml", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerMilliliter).ToString());
            Assert.Equal("1 WU", new FluidResistance(1, FluidResistanceUnit.WoodUnit).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 dyn·s/cm⁵", new FluidResistance(1, FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth).ToString(swedishCulture));
            Assert.Equal("1 MPa·s/m³", new FluidResistance(1, FluidResistanceUnit.MegapascalSecondPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·min/cm³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·min/m³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·min/l", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerLiter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·min/ml", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·s/cm³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·s/m³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·s/l", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerLiter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·s/ml", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 Pa·min/cm³", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Pa·min/m³", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 Pa·min/l", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerLiter).ToString(swedishCulture));
            Assert.Equal("1 Pa·min/ml", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 Pa·s/cm³", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Pa·s/m³", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 Pa·s/l", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerLiter).ToString(swedishCulture));
            Assert.Equal("1 Pa·s/ml", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 WU", new FluidResistance(1, FluidResistanceUnit.WoodUnit).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s1"));
            Assert.Equal("0.12 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s2"));
            Assert.Equal("0.123 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s3"));
            Assert.Equal("0.1235 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(value);
            Assert.Equal(FluidResistance.FromPascalSecondsPerCubicMeter(-value), -quantity);
        }
    }
}
