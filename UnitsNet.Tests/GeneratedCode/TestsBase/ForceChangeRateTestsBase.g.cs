//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ForceChangeRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ForceChangeRateTestsBase : QuantityTestsBase
    {
        protected abstract double CentinewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double DecanewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double DecanewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double DecinewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double KilonewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double KilonewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double KilopoundsForcePerMinuteInOneNewtonPerSecond { get; }
        protected abstract double KilopoundsForcePerSecondInOneNewtonPerSecond { get; }
        protected abstract double MicronewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double MillinewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double NanonewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double NewtonsPerMinuteInOneNewtonPerSecond { get; }
        protected abstract double NewtonsPerSecondInOneNewtonPerSecond { get; }
        protected abstract double PoundsForcePerMinuteInOneNewtonPerSecond { get; }
        protected abstract double PoundsForcePerSecondInOneNewtonPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentinewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ForceChangeRateUnit unit)
        {
            return unit switch
            {
                ForceChangeRateUnit.CentinewtonPerSecond => (CentinewtonsPerSecondInOneNewtonPerSecond, CentinewtonsPerSecondTolerance),
                ForceChangeRateUnit.DecanewtonPerMinute => (DecanewtonsPerMinuteInOneNewtonPerSecond, DecanewtonsPerMinuteTolerance),
                ForceChangeRateUnit.DecanewtonPerSecond => (DecanewtonsPerSecondInOneNewtonPerSecond, DecanewtonsPerSecondTolerance),
                ForceChangeRateUnit.DecinewtonPerSecond => (DecinewtonsPerSecondInOneNewtonPerSecond, DecinewtonsPerSecondTolerance),
                ForceChangeRateUnit.KilonewtonPerMinute => (KilonewtonsPerMinuteInOneNewtonPerSecond, KilonewtonsPerMinuteTolerance),
                ForceChangeRateUnit.KilonewtonPerSecond => (KilonewtonsPerSecondInOneNewtonPerSecond, KilonewtonsPerSecondTolerance),
                ForceChangeRateUnit.KilopoundForcePerMinute => (KilopoundsForcePerMinuteInOneNewtonPerSecond, KilopoundsForcePerMinuteTolerance),
                ForceChangeRateUnit.KilopoundForcePerSecond => (KilopoundsForcePerSecondInOneNewtonPerSecond, KilopoundsForcePerSecondTolerance),
                ForceChangeRateUnit.MicronewtonPerSecond => (MicronewtonsPerSecondInOneNewtonPerSecond, MicronewtonsPerSecondTolerance),
                ForceChangeRateUnit.MillinewtonPerSecond => (MillinewtonsPerSecondInOneNewtonPerSecond, MillinewtonsPerSecondTolerance),
                ForceChangeRateUnit.NanonewtonPerSecond => (NanonewtonsPerSecondInOneNewtonPerSecond, NanonewtonsPerSecondTolerance),
                ForceChangeRateUnit.NewtonPerMinute => (NewtonsPerMinuteInOneNewtonPerSecond, NewtonsPerMinuteTolerance),
                ForceChangeRateUnit.NewtonPerSecond => (NewtonsPerSecondInOneNewtonPerSecond, NewtonsPerSecondTolerance),
                ForceChangeRateUnit.PoundForcePerMinute => (PoundsForcePerMinuteInOneNewtonPerSecond, PoundsForcePerMinuteTolerance),
                ForceChangeRateUnit.PoundForcePerSecond => (PoundsForcePerSecondInOneNewtonPerSecond, PoundsForcePerSecondTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ForceChangeRateUnit.CentinewtonPerSecond },
            new object[] { ForceChangeRateUnit.DecanewtonPerMinute },
            new object[] { ForceChangeRateUnit.DecanewtonPerSecond },
            new object[] { ForceChangeRateUnit.DecinewtonPerSecond },
            new object[] { ForceChangeRateUnit.KilonewtonPerMinute },
            new object[] { ForceChangeRateUnit.KilonewtonPerSecond },
            new object[] { ForceChangeRateUnit.KilopoundForcePerMinute },
            new object[] { ForceChangeRateUnit.KilopoundForcePerSecond },
            new object[] { ForceChangeRateUnit.MicronewtonPerSecond },
            new object[] { ForceChangeRateUnit.MillinewtonPerSecond },
            new object[] { ForceChangeRateUnit.NanonewtonPerSecond },
            new object[] { ForceChangeRateUnit.NewtonPerMinute },
            new object[] { ForceChangeRateUnit.NewtonPerSecond },
            new object[] { ForceChangeRateUnit.PoundForcePerMinute },
            new object[] { ForceChangeRateUnit.PoundForcePerSecond },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ForceChangeRate();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ForceChangeRateUnit.NewtonPerSecond, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ForceChangeRate(double.PositiveInfinity, ForceChangeRateUnit.NewtonPerSecond));
            var exception2 = Record.Exception(() => new ForceChangeRate(double.NegativeInfinity, ForceChangeRateUnit.NewtonPerSecond));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ForceChangeRate(double.NaN, ForceChangeRateUnit.NewtonPerSecond));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ForceChangeRate(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ForceChangeRate(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ForceChangeRate(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ForceChangeRate_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new ForceChangeRate(1, ForceChangeRateUnit.NewtonPerSecond);

            QuantityInfo<ForceChangeRateUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(ForceChangeRate.Zero, quantityInfo.Zero);
            Assert.Equal("ForceChangeRate", quantityInfo.Name);

            var units = Enum.GetValues<ForceChangeRateUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void NewtonPerSecondToForceChangeRateUnits()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            AssertEx.EqualTolerance(CentinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.CentinewtonsPerSecond, CentinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.DecanewtonsPerMinute, DecanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.DecanewtonsPerSecond, DecanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.DecinewtonsPerSecond, DecinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.KilonewtonsPerMinute, KilonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.KilonewtonsPerSecond, KilonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerMinuteInOneNewtonPerSecond, newtonpersecond.KilopoundsForcePerMinute, KilopoundsForcePerMinuteTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSecondInOneNewtonPerSecond, newtonpersecond.KilopoundsForcePerSecond, KilopoundsForcePerSecondTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.MicronewtonsPerSecond, MicronewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.MillinewtonsPerSecond, MillinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.NanonewtonsPerSecond, NanonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(NewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.NewtonsPerMinute, NewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(NewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(PoundsForcePerMinuteInOneNewtonPerSecond, newtonpersecond.PoundsForcePerMinute, PoundsForcePerMinuteTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSecondInOneNewtonPerSecond, newtonpersecond.PoundsForcePerSecond, PoundsForcePerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ForceChangeRate.From(1, ForceChangeRateUnit.CentinewtonPerSecond);
            AssertEx.EqualTolerance(1, quantity00.CentinewtonsPerSecond, CentinewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.CentinewtonPerSecond, quantity00.Unit);

            var quantity01 = ForceChangeRate.From(1, ForceChangeRateUnit.DecanewtonPerMinute);
            AssertEx.EqualTolerance(1, quantity01.DecanewtonsPerMinute, DecanewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.DecanewtonPerMinute, quantity01.Unit);

            var quantity02 = ForceChangeRate.From(1, ForceChangeRateUnit.DecanewtonPerSecond);
            AssertEx.EqualTolerance(1, quantity02.DecanewtonsPerSecond, DecanewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.DecanewtonPerSecond, quantity02.Unit);

            var quantity03 = ForceChangeRate.From(1, ForceChangeRateUnit.DecinewtonPerSecond);
            AssertEx.EqualTolerance(1, quantity03.DecinewtonsPerSecond, DecinewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.DecinewtonPerSecond, quantity03.Unit);

            var quantity04 = ForceChangeRate.From(1, ForceChangeRateUnit.KilonewtonPerMinute);
            AssertEx.EqualTolerance(1, quantity04.KilonewtonsPerMinute, KilonewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.KilonewtonPerMinute, quantity04.Unit);

            var quantity05 = ForceChangeRate.From(1, ForceChangeRateUnit.KilonewtonPerSecond);
            AssertEx.EqualTolerance(1, quantity05.KilonewtonsPerSecond, KilonewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.KilonewtonPerSecond, quantity05.Unit);

            var quantity06 = ForceChangeRate.From(1, ForceChangeRateUnit.KilopoundForcePerMinute);
            AssertEx.EqualTolerance(1, quantity06.KilopoundsForcePerMinute, KilopoundsForcePerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.KilopoundForcePerMinute, quantity06.Unit);

            var quantity07 = ForceChangeRate.From(1, ForceChangeRateUnit.KilopoundForcePerSecond);
            AssertEx.EqualTolerance(1, quantity07.KilopoundsForcePerSecond, KilopoundsForcePerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.KilopoundForcePerSecond, quantity07.Unit);

            var quantity08 = ForceChangeRate.From(1, ForceChangeRateUnit.MicronewtonPerSecond);
            AssertEx.EqualTolerance(1, quantity08.MicronewtonsPerSecond, MicronewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.MicronewtonPerSecond, quantity08.Unit);

            var quantity09 = ForceChangeRate.From(1, ForceChangeRateUnit.MillinewtonPerSecond);
            AssertEx.EqualTolerance(1, quantity09.MillinewtonsPerSecond, MillinewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.MillinewtonPerSecond, quantity09.Unit);

            var quantity10 = ForceChangeRate.From(1, ForceChangeRateUnit.NanonewtonPerSecond);
            AssertEx.EqualTolerance(1, quantity10.NanonewtonsPerSecond, NanonewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.NanonewtonPerSecond, quantity10.Unit);

            var quantity11 = ForceChangeRate.From(1, ForceChangeRateUnit.NewtonPerMinute);
            AssertEx.EqualTolerance(1, quantity11.NewtonsPerMinute, NewtonsPerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.NewtonPerMinute, quantity11.Unit);

            var quantity12 = ForceChangeRate.From(1, ForceChangeRateUnit.NewtonPerSecond);
            AssertEx.EqualTolerance(1, quantity12.NewtonsPerSecond, NewtonsPerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.NewtonPerSecond, quantity12.Unit);

            var quantity13 = ForceChangeRate.From(1, ForceChangeRateUnit.PoundForcePerMinute);
            AssertEx.EqualTolerance(1, quantity13.PoundsForcePerMinute, PoundsForcePerMinuteTolerance);
            Assert.Equal(ForceChangeRateUnit.PoundForcePerMinute, quantity13.Unit);

            var quantity14 = ForceChangeRate.From(1, ForceChangeRateUnit.PoundForcePerSecond);
            AssertEx.EqualTolerance(1, quantity14.PoundsForcePerSecond, PoundsForcePerSecondTolerance);
            Assert.Equal(ForceChangeRateUnit.PoundForcePerSecond, quantity14.Unit);

        }

        [Fact]
        public void FromNewtonsPerSecond_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ForceChangeRate.FromNewtonsPerSecond(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ForceChangeRate.FromNewtonsPerSecond(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromNewtonsPerSecond_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ForceChangeRate.FromNewtonsPerSecond(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            AssertEx.EqualTolerance(CentinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.CentinewtonPerSecond), CentinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.DecanewtonPerMinute), DecanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.DecanewtonPerSecond), DecanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.DecinewtonPerSecond), DecinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.KilonewtonPerMinute), KilonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.KilonewtonPerSecond), KilonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.KilopoundForcePerMinute), KilopoundsForcePerMinuteTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.KilopoundForcePerSecond), KilopoundsForcePerSecondTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.MicronewtonPerSecond), MicronewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.MillinewtonPerSecond), MillinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.NanonewtonPerSecond), NanonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(NewtonsPerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.NewtonPerMinute), NewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(NewtonsPerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.NewtonPerSecond), NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(PoundsForcePerMinuteInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.PoundForcePerMinute), PoundsForcePerMinuteTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSecondInOneNewtonPerSecond, newtonpersecond.As(ForceChangeRateUnit.PoundForcePerSecond), PoundsForcePerSecondTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ForceChangeRate.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
            var expectedValue = quantity.As(ForceChangeRate.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
            var expectedUnit = ForceChangeRate.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ForceChangeRate quantityToConvert = quantity;

                ForceChangeRate convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ForceChangeRateUnit> quantityToConvert = quantity;

                IQuantity<ForceChangeRateUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ForceChangeRateUnit> quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ForceChangeRateUnit> quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ForceChangeRate(value: 1, unit: ForceChangeRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = ForceChangeRate.Parse("1 cN/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentinewtonsPerSecond, CentinewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.CentinewtonPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 daN/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecanewtonsPerMinute, DecanewtonsPerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.DecanewtonPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 daN/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecanewtonsPerSecond, DecanewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.DecanewtonPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 dN/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecinewtonsPerSecond, DecinewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.DecinewtonPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 kN/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonsPerMinute, KilonewtonsPerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.KilonewtonPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 kN/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonsPerSecond, KilonewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.KilonewtonPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 kipf/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerMinute, KilopoundsForcePerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 kip/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerMinute, KilopoundsForcePerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 k/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerMinute, KilopoundsForcePerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 kipf/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerSecond, KilopoundsForcePerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 kip/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerSecond, KilopoundsForcePerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 k/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerSecond, KilopoundsForcePerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 µN/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicronewtonsPerSecond, MicronewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.MicronewtonPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 mN/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillinewtonsPerSecond, MillinewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.MillinewtonPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 nN/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanonewtonsPerSecond, NanonewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.NanonewtonPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 N/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonsPerMinute, NewtonsPerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.NewtonPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 N/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonsPerSecond, NewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.NewtonPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 lbf/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsForcePerMinute, PoundsForcePerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.PoundForcePerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ForceChangeRate.Parse("1 lbf/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsForcePerSecond, PoundsForcePerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.PoundForcePerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(ForceChangeRate.TryParse("1 cN/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentinewtonsPerSecond, CentinewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.CentinewtonPerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 daN/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecanewtonsPerMinute, DecanewtonsPerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.DecanewtonPerMinute, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 daN/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecanewtonsPerSecond, DecanewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.DecanewtonPerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 dN/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecinewtonsPerSecond, DecinewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.DecinewtonPerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 kN/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonsPerMinute, KilonewtonsPerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.KilonewtonPerMinute, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 kN/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonsPerSecond, KilonewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.KilonewtonPerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 kipf/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerMinute, KilopoundsForcePerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerMinute, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 kip/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerMinute, KilopoundsForcePerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerMinute, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 k/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerMinute, KilopoundsForcePerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerMinute, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 kipf/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerSecond, KilopoundsForcePerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 kip/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerSecond, KilopoundsForcePerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 k/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundsForcePerSecond, KilopoundsForcePerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.KilopoundForcePerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 µN/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicronewtonsPerSecond, MicronewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.MicronewtonPerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 mN/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillinewtonsPerSecond, MillinewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.MillinewtonPerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 nN/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanonewtonsPerSecond, NanonewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.NanonewtonPerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 N/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonsPerMinute, NewtonsPerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.NewtonPerMinute, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 N/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonsPerSecond, NewtonsPerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.NewtonPerSecond, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 lbf/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsForcePerMinute, PoundsForcePerMinuteTolerance);
                Assert.Equal(ForceChangeRateUnit.PoundForcePerMinute, parsed.Unit);
            }

            {
                Assert.True(ForceChangeRate.TryParse("1 lbf/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsForcePerSecond, PoundsForcePerSecondTolerance);
                Assert.Equal(ForceChangeRateUnit.PoundForcePerSecond, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("cN/s", ForceChangeRateUnit.CentinewtonPerSecond)]
        [InlineData("daN/min", ForceChangeRateUnit.DecanewtonPerMinute)]
        [InlineData("daN/s", ForceChangeRateUnit.DecanewtonPerSecond)]
        [InlineData("dN/s", ForceChangeRateUnit.DecinewtonPerSecond)]
        [InlineData("kN/min", ForceChangeRateUnit.KilonewtonPerMinute)]
        [InlineData("kN/s", ForceChangeRateUnit.KilonewtonPerSecond)]
        [InlineData("kipf/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("kip/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("k/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("kipf/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("kip/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("k/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("µN/s", ForceChangeRateUnit.MicronewtonPerSecond)]
        [InlineData("mN/s", ForceChangeRateUnit.MillinewtonPerSecond)]
        [InlineData("nN/s", ForceChangeRateUnit.NanonewtonPerSecond)]
        [InlineData("N/min", ForceChangeRateUnit.NewtonPerMinute)]
        [InlineData("N/s", ForceChangeRateUnit.NewtonPerSecond)]
        [InlineData("lbf/min", ForceChangeRateUnit.PoundForcePerMinute)]
        [InlineData("lbf/s", ForceChangeRateUnit.PoundForcePerSecond)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ForceChangeRateUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ForceChangeRateUnit parsedUnit = ForceChangeRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cN/s", ForceChangeRateUnit.CentinewtonPerSecond)]
        [InlineData("daN/min", ForceChangeRateUnit.DecanewtonPerMinute)]
        [InlineData("daN/s", ForceChangeRateUnit.DecanewtonPerSecond)]
        [InlineData("dN/s", ForceChangeRateUnit.DecinewtonPerSecond)]
        [InlineData("kN/min", ForceChangeRateUnit.KilonewtonPerMinute)]
        [InlineData("kN/s", ForceChangeRateUnit.KilonewtonPerSecond)]
        [InlineData("kipf/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("kip/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("k/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("kipf/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("kip/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("k/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("µN/s", ForceChangeRateUnit.MicronewtonPerSecond)]
        [InlineData("mN/s", ForceChangeRateUnit.MillinewtonPerSecond)]
        [InlineData("nN/s", ForceChangeRateUnit.NanonewtonPerSecond)]
        [InlineData("N/min", ForceChangeRateUnit.NewtonPerMinute)]
        [InlineData("N/s", ForceChangeRateUnit.NewtonPerSecond)]
        [InlineData("lbf/min", ForceChangeRateUnit.PoundForcePerMinute)]
        [InlineData("lbf/s", ForceChangeRateUnit.PoundForcePerSecond)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ForceChangeRateUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ForceChangeRateUnit parsedUnit = ForceChangeRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cN/s", ForceChangeRateUnit.CentinewtonPerSecond)]
        [InlineData("en-US", "daN/min", ForceChangeRateUnit.DecanewtonPerMinute)]
        [InlineData("en-US", "daN/s", ForceChangeRateUnit.DecanewtonPerSecond)]
        [InlineData("en-US", "dN/s", ForceChangeRateUnit.DecinewtonPerSecond)]
        [InlineData("en-US", "kN/min", ForceChangeRateUnit.KilonewtonPerMinute)]
        [InlineData("en-US", "kN/s", ForceChangeRateUnit.KilonewtonPerSecond)]
        [InlineData("en-US", "kipf/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "kip/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "k/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "kipf/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "kip/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "k/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "µN/s", ForceChangeRateUnit.MicronewtonPerSecond)]
        [InlineData("en-US", "mN/s", ForceChangeRateUnit.MillinewtonPerSecond)]
        [InlineData("en-US", "nN/s", ForceChangeRateUnit.NanonewtonPerSecond)]
        [InlineData("en-US", "N/min", ForceChangeRateUnit.NewtonPerMinute)]
        [InlineData("en-US", "N/s", ForceChangeRateUnit.NewtonPerSecond)]
        [InlineData("en-US", "lbf/min", ForceChangeRateUnit.PoundForcePerMinute)]
        [InlineData("en-US", "lbf/s", ForceChangeRateUnit.PoundForcePerSecond)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ForceChangeRateUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ForceChangeRateUnit parsedUnit = ForceChangeRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cN/s", ForceChangeRateUnit.CentinewtonPerSecond)]
        [InlineData("en-US", "daN/min", ForceChangeRateUnit.DecanewtonPerMinute)]
        [InlineData("en-US", "daN/s", ForceChangeRateUnit.DecanewtonPerSecond)]
        [InlineData("en-US", "dN/s", ForceChangeRateUnit.DecinewtonPerSecond)]
        [InlineData("en-US", "kN/min", ForceChangeRateUnit.KilonewtonPerMinute)]
        [InlineData("en-US", "kN/s", ForceChangeRateUnit.KilonewtonPerSecond)]
        [InlineData("en-US", "kipf/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "kip/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "k/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "kipf/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "kip/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "k/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "µN/s", ForceChangeRateUnit.MicronewtonPerSecond)]
        [InlineData("en-US", "mN/s", ForceChangeRateUnit.MillinewtonPerSecond)]
        [InlineData("en-US", "nN/s", ForceChangeRateUnit.NanonewtonPerSecond)]
        [InlineData("en-US", "N/min", ForceChangeRateUnit.NewtonPerMinute)]
        [InlineData("en-US", "N/s", ForceChangeRateUnit.NewtonPerSecond)]
        [InlineData("en-US", "lbf/min", ForceChangeRateUnit.PoundForcePerMinute)]
        [InlineData("en-US", "lbf/s", ForceChangeRateUnit.PoundForcePerSecond)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ForceChangeRateUnit expectedUnit)
        {
            ForceChangeRateUnit parsedUnit = ForceChangeRate.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cN/s", ForceChangeRateUnit.CentinewtonPerSecond)]
        [InlineData("daN/min", ForceChangeRateUnit.DecanewtonPerMinute)]
        [InlineData("daN/s", ForceChangeRateUnit.DecanewtonPerSecond)]
        [InlineData("dN/s", ForceChangeRateUnit.DecinewtonPerSecond)]
        [InlineData("kN/min", ForceChangeRateUnit.KilonewtonPerMinute)]
        [InlineData("kN/s", ForceChangeRateUnit.KilonewtonPerSecond)]
        [InlineData("kipf/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("kip/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("k/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("kipf/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("kip/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("k/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("µN/s", ForceChangeRateUnit.MicronewtonPerSecond)]
        [InlineData("mN/s", ForceChangeRateUnit.MillinewtonPerSecond)]
        [InlineData("nN/s", ForceChangeRateUnit.NanonewtonPerSecond)]
        [InlineData("N/min", ForceChangeRateUnit.NewtonPerMinute)]
        [InlineData("N/s", ForceChangeRateUnit.NewtonPerSecond)]
        [InlineData("lbf/min", ForceChangeRateUnit.PoundForcePerMinute)]
        [InlineData("lbf/s", ForceChangeRateUnit.PoundForcePerSecond)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ForceChangeRateUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ForceChangeRate.TryParseUnit(abbreviation, out ForceChangeRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cN/s", ForceChangeRateUnit.CentinewtonPerSecond)]
        [InlineData("daN/min", ForceChangeRateUnit.DecanewtonPerMinute)]
        [InlineData("daN/s", ForceChangeRateUnit.DecanewtonPerSecond)]
        [InlineData("dN/s", ForceChangeRateUnit.DecinewtonPerSecond)]
        [InlineData("kN/min", ForceChangeRateUnit.KilonewtonPerMinute)]
        [InlineData("kN/s", ForceChangeRateUnit.KilonewtonPerSecond)]
        [InlineData("kipf/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("kip/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("k/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("kipf/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("kip/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("k/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("µN/s", ForceChangeRateUnit.MicronewtonPerSecond)]
        [InlineData("mN/s", ForceChangeRateUnit.MillinewtonPerSecond)]
        [InlineData("nN/s", ForceChangeRateUnit.NanonewtonPerSecond)]
        [InlineData("N/min", ForceChangeRateUnit.NewtonPerMinute)]
        [InlineData("N/s", ForceChangeRateUnit.NewtonPerSecond)]
        [InlineData("lbf/min", ForceChangeRateUnit.PoundForcePerMinute)]
        [InlineData("lbf/s", ForceChangeRateUnit.PoundForcePerSecond)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ForceChangeRateUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ForceChangeRate.TryParseUnit(abbreviation, out ForceChangeRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cN/s", ForceChangeRateUnit.CentinewtonPerSecond)]
        [InlineData("en-US", "daN/min", ForceChangeRateUnit.DecanewtonPerMinute)]
        [InlineData("en-US", "daN/s", ForceChangeRateUnit.DecanewtonPerSecond)]
        [InlineData("en-US", "dN/s", ForceChangeRateUnit.DecinewtonPerSecond)]
        [InlineData("en-US", "kN/min", ForceChangeRateUnit.KilonewtonPerMinute)]
        [InlineData("en-US", "kN/s", ForceChangeRateUnit.KilonewtonPerSecond)]
        [InlineData("en-US", "kipf/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "kip/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "k/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "kipf/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "kip/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "k/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "µN/s", ForceChangeRateUnit.MicronewtonPerSecond)]
        [InlineData("en-US", "mN/s", ForceChangeRateUnit.MillinewtonPerSecond)]
        [InlineData("en-US", "nN/s", ForceChangeRateUnit.NanonewtonPerSecond)]
        [InlineData("en-US", "N/min", ForceChangeRateUnit.NewtonPerMinute)]
        [InlineData("en-US", "N/s", ForceChangeRateUnit.NewtonPerSecond)]
        [InlineData("en-US", "lbf/min", ForceChangeRateUnit.PoundForcePerMinute)]
        [InlineData("en-US", "lbf/s", ForceChangeRateUnit.PoundForcePerSecond)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ForceChangeRateUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ForceChangeRate.TryParseUnit(abbreviation, out ForceChangeRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cN/s", ForceChangeRateUnit.CentinewtonPerSecond)]
        [InlineData("en-US", "daN/min", ForceChangeRateUnit.DecanewtonPerMinute)]
        [InlineData("en-US", "daN/s", ForceChangeRateUnit.DecanewtonPerSecond)]
        [InlineData("en-US", "dN/s", ForceChangeRateUnit.DecinewtonPerSecond)]
        [InlineData("en-US", "kN/min", ForceChangeRateUnit.KilonewtonPerMinute)]
        [InlineData("en-US", "kN/s", ForceChangeRateUnit.KilonewtonPerSecond)]
        [InlineData("en-US", "kipf/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "kip/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "k/min", ForceChangeRateUnit.KilopoundForcePerMinute)]
        [InlineData("en-US", "kipf/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "kip/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "k/s", ForceChangeRateUnit.KilopoundForcePerSecond)]
        [InlineData("en-US", "µN/s", ForceChangeRateUnit.MicronewtonPerSecond)]
        [InlineData("en-US", "mN/s", ForceChangeRateUnit.MillinewtonPerSecond)]
        [InlineData("en-US", "nN/s", ForceChangeRateUnit.NanonewtonPerSecond)]
        [InlineData("en-US", "N/min", ForceChangeRateUnit.NewtonPerMinute)]
        [InlineData("en-US", "N/s", ForceChangeRateUnit.NewtonPerSecond)]
        [InlineData("en-US", "lbf/min", ForceChangeRateUnit.PoundForcePerMinute)]
        [InlineData("en-US", "lbf/s", ForceChangeRateUnit.PoundForcePerSecond)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ForceChangeRateUnit expectedUnit)
        {
            Assert.True(ForceChangeRate.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ForceChangeRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ForceChangeRateUnit unit)
        {
            var inBaseUnits = ForceChangeRate.From(1.0, ForceChangeRate.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ForceChangeRateUnit unit)
        {
            var quantity = ForceChangeRate.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ForceChangeRateUnit unit)
        {
            Assert.All(ForceChangeRate.Units.Where(u => u != ForceChangeRate.BaseUnit), fromUnit =>
            {
                var quantity = ForceChangeRate.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ForceChangeRateUnit unit)
        {
            var quantity = default(ForceChangeRate);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ForceChangeRateUnit unit)
        {
            var quantity = ForceChangeRate.From(3, ForceChangeRate.BaseUnit);
            ForceChangeRate expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ForceChangeRateUnit> quantityToConvert = quantity;
                IQuantity<ForceChangeRateUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromCentinewtonsPerSecond(newtonpersecond.CentinewtonsPerSecond).NewtonsPerSecond, CentinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromDecanewtonsPerMinute(newtonpersecond.DecanewtonsPerMinute).NewtonsPerSecond, DecanewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromDecanewtonsPerSecond(newtonpersecond.DecanewtonsPerSecond).NewtonsPerSecond, DecanewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromDecinewtonsPerSecond(newtonpersecond.DecinewtonsPerSecond).NewtonsPerSecond, DecinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromKilonewtonsPerMinute(newtonpersecond.KilonewtonsPerMinute).NewtonsPerSecond, KilonewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromKilonewtonsPerSecond(newtonpersecond.KilonewtonsPerSecond).NewtonsPerSecond, KilonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromKilopoundsForcePerMinute(newtonpersecond.KilopoundsForcePerMinute).NewtonsPerSecond, KilopoundsForcePerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromKilopoundsForcePerSecond(newtonpersecond.KilopoundsForcePerSecond).NewtonsPerSecond, KilopoundsForcePerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromMicronewtonsPerSecond(newtonpersecond.MicronewtonsPerSecond).NewtonsPerSecond, MicronewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromMillinewtonsPerSecond(newtonpersecond.MillinewtonsPerSecond).NewtonsPerSecond, MillinewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromNanonewtonsPerSecond(newtonpersecond.NanonewtonsPerSecond).NewtonsPerSecond, NanonewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromNewtonsPerMinute(newtonpersecond.NewtonsPerMinute).NewtonsPerSecond, NewtonsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromNewtonsPerSecond(newtonpersecond.NewtonsPerSecond).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromPoundsForcePerMinute(newtonpersecond.PoundsForcePerMinute).NewtonsPerSecond, PoundsForcePerMinuteTolerance);
            AssertEx.EqualTolerance(1, ForceChangeRate.FromPoundsForcePerSecond(newtonpersecond.PoundsForcePerSecond).NewtonsPerSecond, PoundsForcePerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ForceChangeRate v = ForceChangeRate.FromNewtonsPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (ForceChangeRate.FromNewtonsPerSecond(3)-v).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (ForceChangeRate.FromNewtonsPerSecond(10)/5).NewtonsPerSecond, NewtonsPerSecondTolerance);
            AssertEx.EqualTolerance(2, ForceChangeRate.FromNewtonsPerSecond(10)/ForceChangeRate.FromNewtonsPerSecond(5), NewtonsPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ForceChangeRate oneNewtonPerSecond = ForceChangeRate.FromNewtonsPerSecond(1);
            ForceChangeRate twoNewtonsPerSecond = ForceChangeRate.FromNewtonsPerSecond(2);

            Assert.True(oneNewtonPerSecond < twoNewtonsPerSecond);
            Assert.True(oneNewtonPerSecond <= twoNewtonsPerSecond);
            Assert.True(twoNewtonsPerSecond > oneNewtonPerSecond);
            Assert.True(twoNewtonsPerSecond >= oneNewtonPerSecond);

            Assert.False(oneNewtonPerSecond > twoNewtonsPerSecond);
            Assert.False(oneNewtonPerSecond >= twoNewtonsPerSecond);
            Assert.False(twoNewtonsPerSecond < oneNewtonPerSecond);
            Assert.False(twoNewtonsPerSecond <= oneNewtonPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.Equal(0, newtonpersecond.CompareTo(newtonpersecond));
            Assert.True(newtonpersecond.CompareTo(ForceChangeRate.Zero) > 0);
            Assert.True(ForceChangeRate.Zero.CompareTo(newtonpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.Throws<ArgumentException>(() => newtonpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => newtonpersecond.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ForceChangeRateUnit.NewtonPerSecond, 1, ForceChangeRateUnit.NewtonPerSecond, true)]  // Same value and unit.
        [InlineData(1, ForceChangeRateUnit.NewtonPerSecond, 2, ForceChangeRateUnit.NewtonPerSecond, false)] // Different value.
        [InlineData(2, ForceChangeRateUnit.NewtonPerSecond, 1, ForceChangeRateUnit.CentinewtonPerSecond, false)] // Different value and unit.
        [InlineData(1, ForceChangeRateUnit.NewtonPerSecond, 1, ForceChangeRateUnit.CentinewtonPerSecond, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ForceChangeRateUnit unitA, double valueB, ForceChangeRateUnit unitB, bool expectEqual)
        {
            var a = new ForceChangeRate(valueA, unitA);
            var b = new ForceChangeRate(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ForceChangeRate.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.True(v.Equals(ForceChangeRate.FromNewtonsPerSecond(1), NewtonsPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ForceChangeRate.Zero, NewtonsPerSecondTolerance, ComparisonType.Relative));
            Assert.True(ForceChangeRate.FromNewtonsPerSecond(100).Equals(ForceChangeRate.FromNewtonsPerSecond(120), 0.3, ComparisonType.Relative));
            Assert.False(ForceChangeRate.FromNewtonsPerSecond(100).Equals(ForceChangeRate.FromNewtonsPerSecond(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(ForceChangeRate.FromNewtonsPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.False(newtonpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ForceChangeRate newtonpersecond = ForceChangeRate.FromNewtonsPerSecond(1);
            Assert.False(newtonpersecond.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<ForceChangeRateUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ForceChangeRate.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cN/s", new ForceChangeRate(1, ForceChangeRateUnit.CentinewtonPerSecond).ToString());
            Assert.Equal("1 daN/min", new ForceChangeRate(1, ForceChangeRateUnit.DecanewtonPerMinute).ToString());
            Assert.Equal("1 daN/s", new ForceChangeRate(1, ForceChangeRateUnit.DecanewtonPerSecond).ToString());
            Assert.Equal("1 dN/s", new ForceChangeRate(1, ForceChangeRateUnit.DecinewtonPerSecond).ToString());
            Assert.Equal("1 kN/min", new ForceChangeRate(1, ForceChangeRateUnit.KilonewtonPerMinute).ToString());
            Assert.Equal("1 kN/s", new ForceChangeRate(1, ForceChangeRateUnit.KilonewtonPerSecond).ToString());
            Assert.Equal("1 kipf/min", new ForceChangeRate(1, ForceChangeRateUnit.KilopoundForcePerMinute).ToString());
            Assert.Equal("1 kipf/s", new ForceChangeRate(1, ForceChangeRateUnit.KilopoundForcePerSecond).ToString());
            Assert.Equal("1 µN/s", new ForceChangeRate(1, ForceChangeRateUnit.MicronewtonPerSecond).ToString());
            Assert.Equal("1 mN/s", new ForceChangeRate(1, ForceChangeRateUnit.MillinewtonPerSecond).ToString());
            Assert.Equal("1 nN/s", new ForceChangeRate(1, ForceChangeRateUnit.NanonewtonPerSecond).ToString());
            Assert.Equal("1 N/min", new ForceChangeRate(1, ForceChangeRateUnit.NewtonPerMinute).ToString());
            Assert.Equal("1 N/s", new ForceChangeRate(1, ForceChangeRateUnit.NewtonPerSecond).ToString());
            Assert.Equal("1 lbf/min", new ForceChangeRate(1, ForceChangeRateUnit.PoundForcePerMinute).ToString());
            Assert.Equal("1 lbf/s", new ForceChangeRate(1, ForceChangeRateUnit.PoundForcePerSecond).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cN/s", new ForceChangeRate(1, ForceChangeRateUnit.CentinewtonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 daN/min", new ForceChangeRate(1, ForceChangeRateUnit.DecanewtonPerMinute).ToString(swedishCulture));
            Assert.Equal("1 daN/s", new ForceChangeRate(1, ForceChangeRateUnit.DecanewtonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 dN/s", new ForceChangeRate(1, ForceChangeRateUnit.DecinewtonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kN/min", new ForceChangeRate(1, ForceChangeRateUnit.KilonewtonPerMinute).ToString(swedishCulture));
            Assert.Equal("1 kN/s", new ForceChangeRate(1, ForceChangeRateUnit.KilonewtonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kipf/min", new ForceChangeRate(1, ForceChangeRateUnit.KilopoundForcePerMinute).ToString(swedishCulture));
            Assert.Equal("1 kipf/s", new ForceChangeRate(1, ForceChangeRateUnit.KilopoundForcePerSecond).ToString(swedishCulture));
            Assert.Equal("1 µN/s", new ForceChangeRate(1, ForceChangeRateUnit.MicronewtonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 mN/s", new ForceChangeRate(1, ForceChangeRateUnit.MillinewtonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 nN/s", new ForceChangeRate(1, ForceChangeRateUnit.NanonewtonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 N/min", new ForceChangeRate(1, ForceChangeRateUnit.NewtonPerMinute).ToString(swedishCulture));
            Assert.Equal("1 N/s", new ForceChangeRate(1, ForceChangeRateUnit.NewtonPerSecond).ToString(swedishCulture));
            Assert.Equal("1 lbf/min", new ForceChangeRate(1, ForceChangeRateUnit.PoundForcePerMinute).ToString(swedishCulture));
            Assert.Equal("1 lbf/s", new ForceChangeRate(1, ForceChangeRateUnit.PoundForcePerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 N/s", new ForceChangeRate(0.123456, ForceChangeRateUnit.NewtonPerSecond).ToString("s1"));
            Assert.Equal("0.12 N/s", new ForceChangeRate(0.123456, ForceChangeRateUnit.NewtonPerSecond).ToString("s2"));
            Assert.Equal("0.123 N/s", new ForceChangeRate(0.123456, ForceChangeRateUnit.NewtonPerSecond).ToString("s3"));
            Assert.Equal("0.1235 N/s", new ForceChangeRate(0.123456, ForceChangeRateUnit.NewtonPerSecond).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N/s", new ForceChangeRate(0.123456, ForceChangeRateUnit.NewtonPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 N/s", new ForceChangeRate(0.123456, ForceChangeRateUnit.NewtonPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 N/s", new ForceChangeRate(0.123456, ForceChangeRateUnit.NewtonPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 N/s", new ForceChangeRate(0.123456, ForceChangeRateUnit.NewtonPerSecond).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ForceChangeRate.FromNewtonsPerSecond(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ForceChangeRate.FromNewtonsPerSecond(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ForceChangeRate.FromNewtonsPerSecond(1.0);
            Assert.Equal(new {ForceChangeRate.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ForceChangeRate.FromNewtonsPerSecond(value);
            Assert.Equal(ForceChangeRate.FromNewtonsPerSecond(-value), -quantity);
        }
    }
}
