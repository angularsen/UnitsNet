//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpecificEntropy
{
    /// <summary>
    /// A number to SpecificEntropy Extensions
    /// </summary>
    public static class NumberToSpecificEntropyExtensions
    {
        extension<T>(T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="SpecificEntropy.FromBtusPerPoundFahrenheit(double)" />
            public SpecificEntropy BtusPerPoundFahrenheit
#if NET7_0_OR_GREATER
                => SpecificEntropy.FromBtusPerPoundFahrenheit(double.CreateChecked(value));
#else
                => SpecificEntropy.FromBtusPerPoundFahrenheit(value.ToDouble(null));
#endif

            /// <inheritdoc cref="SpecificEntropy.FromCaloriesPerGramKelvin(double)" />
            public SpecificEntropy CaloriesPerGramKelvin
#if NET7_0_OR_GREATER
                => SpecificEntropy.FromCaloriesPerGramKelvin(double.CreateChecked(value));
#else
                => SpecificEntropy.FromCaloriesPerGramKelvin(value.ToDouble(null));
#endif

            /// <inheritdoc cref="SpecificEntropy.FromJoulesPerKilogramDegreeCelsius(double)" />
            public SpecificEntropy JoulesPerKilogramDegreeCelsius
#if NET7_0_OR_GREATER
                => SpecificEntropy.FromJoulesPerKilogramDegreeCelsius(double.CreateChecked(value));
#else
                => SpecificEntropy.FromJoulesPerKilogramDegreeCelsius(value.ToDouble(null));
#endif

            /// <inheritdoc cref="SpecificEntropy.FromJoulesPerKilogramKelvin(double)" />
            public SpecificEntropy JoulesPerKilogramKelvin
#if NET7_0_OR_GREATER
                => SpecificEntropy.FromJoulesPerKilogramKelvin(double.CreateChecked(value));
#else
                => SpecificEntropy.FromJoulesPerKilogramKelvin(value.ToDouble(null));
#endif

            /// <inheritdoc cref="SpecificEntropy.FromKilocaloriesPerGramKelvin(double)" />
            public SpecificEntropy KilocaloriesPerGramKelvin
#if NET7_0_OR_GREATER
                => SpecificEntropy.FromKilocaloriesPerGramKelvin(double.CreateChecked(value));
#else
                => SpecificEntropy.FromKilocaloriesPerGramKelvin(value.ToDouble(null));
#endif

            /// <inheritdoc cref="SpecificEntropy.FromKilojoulesPerKilogramDegreeCelsius(double)" />
            public SpecificEntropy KilojoulesPerKilogramDegreeCelsius
#if NET7_0_OR_GREATER
                => SpecificEntropy.FromKilojoulesPerKilogramDegreeCelsius(double.CreateChecked(value));
#else
                => SpecificEntropy.FromKilojoulesPerKilogramDegreeCelsius(value.ToDouble(null));
#endif

            /// <inheritdoc cref="SpecificEntropy.FromKilojoulesPerKilogramKelvin(double)" />
            public SpecificEntropy KilojoulesPerKilogramKelvin
#if NET7_0_OR_GREATER
                => SpecificEntropy.FromKilojoulesPerKilogramKelvin(double.CreateChecked(value));
#else
                => SpecificEntropy.FromKilojoulesPerKilogramKelvin(value.ToDouble(null));
#endif

            /// <inheritdoc cref="SpecificEntropy.FromMegajoulesPerKilogramDegreeCelsius(double)" />
            public SpecificEntropy MegajoulesPerKilogramDegreeCelsius
#if NET7_0_OR_GREATER
                => SpecificEntropy.FromMegajoulesPerKilogramDegreeCelsius(double.CreateChecked(value));
#else
                => SpecificEntropy.FromMegajoulesPerKilogramDegreeCelsius(value.ToDouble(null));
#endif

            /// <inheritdoc cref="SpecificEntropy.FromMegajoulesPerKilogramKelvin(double)" />
            public SpecificEntropy MegajoulesPerKilogramKelvin
#if NET7_0_OR_GREATER
                => SpecificEntropy.FromMegajoulesPerKilogramKelvin(double.CreateChecked(value));
#else
                => SpecificEntropy.FromMegajoulesPerKilogramKelvin(value.ToDouble(null));
#endif

        }
    }
}
