//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToFluidResistance
{
    /// <summary>
    /// A number to FluidResistance Extensions
    /// </summary>
    public static class NumberToFluidResistanceExtensions
    {
        /// <inheritdoc cref="FluidResistance.FromDyneSecondsPerCentimeterToTheFifth(QuantityValue)" />
        public static FluidResistance DyneSecondsPerCentimeterToTheFifth<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromDyneSecondsPerCentimeterToTheFifth(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromDyneSecondsPerCentimeterToTheFifth(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromMegapascalSecondsPerCubicMeter(QuantityValue)" />
        public static FluidResistance MegapascalSecondsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromMegapascalSecondsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromMegapascalSecondsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromMillimeterMercuryMinutesPerCubicCentimeter(QuantityValue)" />
        public static FluidResistance MillimeterMercuryMinutesPerCubicCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromMillimeterMercuryMinutesPerCubicCentimeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromMillimeterMercuryMinutesPerCubicCentimeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromMillimeterMercuryMinutesPerCubicMeter(QuantityValue)" />
        public static FluidResistance MillimeterMercuryMinutesPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromMillimeterMercuryMinutesPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromMillimeterMercuryMinutesPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromMillimeterMercuryMinutesPerLiter(QuantityValue)" />
        public static FluidResistance MillimeterMercuryMinutesPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromMillimeterMercuryMinutesPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromMillimeterMercuryMinutesPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromMillimeterMercuryMinutesPerMilliliter(QuantityValue)" />
        public static FluidResistance MillimeterMercuryMinutesPerMilliliter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromMillimeterMercuryMinutesPerMilliliter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromMillimeterMercuryMinutesPerMilliliter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromMillimeterMercurySecondsPerCubicCentimeter(QuantityValue)" />
        public static FluidResistance MillimeterMercurySecondsPerCubicCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromMillimeterMercurySecondsPerCubicCentimeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromMillimeterMercurySecondsPerCubicCentimeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromMillimeterMercurySecondsPerCubicMeter(QuantityValue)" />
        public static FluidResistance MillimeterMercurySecondsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromMillimeterMercurySecondsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromMillimeterMercurySecondsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromMillimeterMercurySecondsPerLiter(QuantityValue)" />
        public static FluidResistance MillimeterMercurySecondsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromMillimeterMercurySecondsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromMillimeterMercurySecondsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromMillimeterMercurySecondsPerMilliliter(QuantityValue)" />
        public static FluidResistance MillimeterMercurySecondsPerMilliliter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromMillimeterMercurySecondsPerMilliliter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromMillimeterMercurySecondsPerMilliliter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromPascalMinutesPerCubicCentimeter(QuantityValue)" />
        public static FluidResistance PascalMinutesPerCubicCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromPascalMinutesPerCubicCentimeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromPascalMinutesPerCubicCentimeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromPascalMinutesPerCubicMeter(QuantityValue)" />
        public static FluidResistance PascalMinutesPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromPascalMinutesPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromPascalMinutesPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromPascalMinutesPerLiter(QuantityValue)" />
        public static FluidResistance PascalMinutesPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromPascalMinutesPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromPascalMinutesPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromPascalMinutesPerMilliliter(QuantityValue)" />
        public static FluidResistance PascalMinutesPerMilliliter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromPascalMinutesPerMilliliter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromPascalMinutesPerMilliliter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromPascalSecondsPerCubicCentimeter(QuantityValue)" />
        public static FluidResistance PascalSecondsPerCubicCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromPascalSecondsPerCubicCentimeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromPascalSecondsPerCubicCentimeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromPascalSecondsPerCubicMeter(QuantityValue)" />
        public static FluidResistance PascalSecondsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromPascalSecondsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromPascalSecondsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromPascalSecondsPerLiter(QuantityValue)" />
        public static FluidResistance PascalSecondsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromPascalSecondsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromPascalSecondsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromPascalSecondsPerMilliliter(QuantityValue)" />
        public static FluidResistance PascalSecondsPerMilliliter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromPascalSecondsPerMilliliter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromPascalSecondsPerMilliliter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="FluidResistance.FromWoodUnits(QuantityValue)" />
        public static FluidResistance WoodUnits<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => FluidResistance.FromWoodUnits(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => FluidResistance.FromWoodUnits(value.ToQuantityValue());
#endif

    }
}
