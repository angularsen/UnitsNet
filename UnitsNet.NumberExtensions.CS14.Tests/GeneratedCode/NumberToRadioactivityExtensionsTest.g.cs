//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToRadioactivity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToRadioactivityExtensionsTests
    {
        [Fact]
        public void NumberToBecquerelsTest() =>
            Assert.Equal(Radioactivity.FromBecquerels(2), 2.Becquerels);

        [Fact]
        public void NumberToCuriesTest() =>
            Assert.Equal(Radioactivity.FromCuries(2), 2.Curies);

        [Fact]
        public void NumberToExabecquerelsTest() =>
            Assert.Equal(Radioactivity.FromExabecquerels(2), 2.Exabecquerels);

        [Fact]
        public void NumberToGigabecquerelsTest() =>
            Assert.Equal(Radioactivity.FromGigabecquerels(2), 2.Gigabecquerels);

        [Fact]
        public void NumberToGigacuriesTest() =>
            Assert.Equal(Radioactivity.FromGigacuries(2), 2.Gigacuries);

        [Fact]
        public void NumberToGigarutherfordsTest() =>
            Assert.Equal(Radioactivity.FromGigarutherfords(2), 2.Gigarutherfords);

        [Fact]
        public void NumberToKilobecquerelsTest() =>
            Assert.Equal(Radioactivity.FromKilobecquerels(2), 2.Kilobecquerels);

        [Fact]
        public void NumberToKilocuriesTest() =>
            Assert.Equal(Radioactivity.FromKilocuries(2), 2.Kilocuries);

        [Fact]
        public void NumberToKilorutherfordsTest() =>
            Assert.Equal(Radioactivity.FromKilorutherfords(2), 2.Kilorutherfords);

        [Fact]
        public void NumberToMegabecquerelsTest() =>
            Assert.Equal(Radioactivity.FromMegabecquerels(2), 2.Megabecquerels);

        [Fact]
        public void NumberToMegacuriesTest() =>
            Assert.Equal(Radioactivity.FromMegacuries(2), 2.Megacuries);

        [Fact]
        public void NumberToMegarutherfordsTest() =>
            Assert.Equal(Radioactivity.FromMegarutherfords(2), 2.Megarutherfords);

        [Fact]
        public void NumberToMicrobecquerelsTest() =>
            Assert.Equal(Radioactivity.FromMicrobecquerels(2), 2.Microbecquerels);

        [Fact]
        public void NumberToMicrocuriesTest() =>
            Assert.Equal(Radioactivity.FromMicrocuries(2), 2.Microcuries);

        [Fact]
        public void NumberToMicrorutherfordsTest() =>
            Assert.Equal(Radioactivity.FromMicrorutherfords(2), 2.Microrutherfords);

        [Fact]
        public void NumberToMillibecquerelsTest() =>
            Assert.Equal(Radioactivity.FromMillibecquerels(2), 2.Millibecquerels);

        [Fact]
        public void NumberToMillicuriesTest() =>
            Assert.Equal(Radioactivity.FromMillicuries(2), 2.Millicuries);

        [Fact]
        public void NumberToMillirutherfordsTest() =>
            Assert.Equal(Radioactivity.FromMillirutherfords(2), 2.Millirutherfords);

        [Fact]
        public void NumberToNanobecquerelsTest() =>
            Assert.Equal(Radioactivity.FromNanobecquerels(2), 2.Nanobecquerels);

        [Fact]
        public void NumberToNanocuriesTest() =>
            Assert.Equal(Radioactivity.FromNanocuries(2), 2.Nanocuries);

        [Fact]
        public void NumberToNanorutherfordsTest() =>
            Assert.Equal(Radioactivity.FromNanorutherfords(2), 2.Nanorutherfords);

        [Fact]
        public void NumberToPetabecquerelsTest() =>
            Assert.Equal(Radioactivity.FromPetabecquerels(2), 2.Petabecquerels);

        [Fact]
        public void NumberToPicobecquerelsTest() =>
            Assert.Equal(Radioactivity.FromPicobecquerels(2), 2.Picobecquerels);

        [Fact]
        public void NumberToPicocuriesTest() =>
            Assert.Equal(Radioactivity.FromPicocuries(2), 2.Picocuries);

        [Fact]
        public void NumberToPicorutherfordsTest() =>
            Assert.Equal(Radioactivity.FromPicorutherfords(2), 2.Picorutherfords);

        [Fact]
        public void NumberToRutherfordsTest() =>
            Assert.Equal(Radioactivity.FromRutherfords(2), 2.Rutherfords);

        [Fact]
        public void NumberToTerabecquerelsTest() =>
            Assert.Equal(Radioactivity.FromTerabecquerels(2), 2.Terabecquerels);

        [Fact]
        public void NumberToTeracuriesTest() =>
            Assert.Equal(Radioactivity.FromTeracuries(2), 2.Teracuries);

        [Fact]
        public void NumberToTerarutherfordsTest() =>
            Assert.Equal(Radioactivity.FromTerarutherfords(2), 2.Terarutherfords);

    }
}
