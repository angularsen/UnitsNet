//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System.Globalization;
using System.Resources;
using System.Runtime.Serialization;
using UnitsNet.Debug;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In everyday use and in kinematics, the speed of an object is the magnitude of its velocity (the rate of change of its position); it is thus a scalar quantity.[1] The average speed of an object in an interval of time is the distance travelled by the object divided by the duration of the interval;[2] the instantaneous speed is the limit of the average speed as the duration of the time interval approaches zero.
    /// </summary>
    [DataContract]
    [DebuggerDisplay(QuantityDebugProxy.DisplayFormat)]
    [DebuggerTypeProxy(typeof(QuantityDebugProxy))]
    public readonly partial struct Speed :
        IArithmeticQuantity<Speed, SpeedUnit>,
#if NET7_0_OR_GREATER
        IDivisionOperators<Speed, Speed, QuantityValue>,
        IDivisionOperators<Speed, Duration, Acceleration>,
        IDivisionOperators<Speed, Acceleration, Duration>,
        IMultiplyOperators<Speed, Length, KinematicViscosity>,
        IMultiplyOperators<Speed, Duration, Length>,
        IMultiplyOperators<Speed, Density, MassFlux>,
        IMultiplyOperators<Speed, Force, Power>,
        IMultiplyOperators<Speed, Speed, SpecificEnergy>,
        IMultiplyOperators<Speed, Area, VolumeFlow>,
        IComparisonOperators<Speed, Speed, bool>,
        IParsable<Speed>,
#endif
        IComparable,
        IComparable<Speed>,
        IEquatable<Speed>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly SpeedUnit? _unit;

        /// <summary>
        ///     Provides detailed information about the <see cref="Speed"/> quantity, including its name, base unit, unit mappings, base dimensions, and conversion functions.
        /// </summary>
        public sealed class SpeedInfo: QuantityInfo<Speed, SpeedUnit>
        {
            /// <inheritdoc />
            public SpeedInfo(string name, SpeedUnit baseUnit, IEnumerable<IUnitDefinition<SpeedUnit>> unitMappings, Speed zero, BaseDimensions baseDimensions,
                QuantityFromDelegate<Speed, SpeedUnit> fromDelegate, ResourceManager? unitAbbreviations)
                : base(name, baseUnit, unitMappings, zero, baseDimensions, fromDelegate, unitAbbreviations)
            {
            }

            /// <inheritdoc />
            public SpeedInfo(string name, SpeedUnit baseUnit, IEnumerable<IUnitDefinition<SpeedUnit>> unitMappings, Speed zero, BaseDimensions baseDimensions)
                : this(name, baseUnit, unitMappings, zero, baseDimensions, Speed.From, new ResourceManager("UnitsNet.GeneratedCode.Resources.Speed", typeof(Speed).Assembly))
            {
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="SpeedInfo"/> class with the default settings for the Speed quantity.
            /// </summary>
            /// <returns>A new instance of the <see cref="SpeedInfo"/> class with the default settings.</returns>
            public static SpeedInfo CreateDefault()
            {
                return new SpeedInfo(nameof(Speed), DefaultBaseUnit, GetDefaultMappings(), new Speed(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="SpeedInfo"/> class with the default settings for the Speed quantity and a callback for customizing the default unit mappings.
            /// </summary>
            /// <param name="customizeUnits">
            ///     A callback function for customizing the default unit mappings.
            /// </param>
            /// <returns>
            ///     A new instance of the <see cref="SpeedInfo"/> class with the default settings.
            /// </returns>
            public static SpeedInfo CreateDefault(Func<IEnumerable<UnitDefinition<SpeedUnit>>, IEnumerable<IUnitDefinition<SpeedUnit>>> customizeUnits)
            {
                return new SpeedInfo(nameof(Speed), DefaultBaseUnit, customizeUnits(GetDefaultMappings()), new Speed(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     The <see cref="BaseDimensions" /> for <see cref="Speed"/> is T^-1L.
            /// </summary>
            public static BaseDimensions DefaultBaseDimensions { get; } = new BaseDimensions(1, 0, -1, 0, 0, 0, 0);

            /// <summary>
            ///     The default base unit of Speed is MeterPerSecond. All conversions, as defined in the <see cref="GetDefaultMappings"/>, go via this value.
            /// </summary>
            public static SpeedUnit DefaultBaseUnit { get; } = SpeedUnit.MeterPerSecond;

            /// <summary>
            ///     Retrieves the default mappings for <see cref="SpeedUnit"/>.
            /// </summary>
            /// <returns>An <see cref="IEnumerable{T}"/> of <see cref="UnitDefinition{SpeedUnit}"/> representing the default unit mappings for Speed.</returns>
            public static IEnumerable<UnitDefinition<SpeedUnit>> GetDefaultMappings()
            {
                yield return new (SpeedUnit.CentimeterPerHour, "CentimeterPerHour", "CentimetersPerHour", new BaseUnits(length: LengthUnit.Centimeter, time: DurationUnit.Hour),
                     360000             
                );
                yield return new (SpeedUnit.CentimeterPerMinute, "CentimeterPerMinute", "CentimetersPerMinute", new BaseUnits(length: LengthUnit.Centimeter, time: DurationUnit.Minute),
                     6000             
                );
                yield return new (SpeedUnit.CentimeterPerSecond, "CentimeterPerSecond", "CentimetersPerSecond", new BaseUnits(length: LengthUnit.Centimeter, time: DurationUnit.Second),
                     100             
                );
                yield return new (SpeedUnit.DecimeterPerMinute, "DecimeterPerMinute", "DecimetersPerMinute", new BaseUnits(length: LengthUnit.Decimeter, time: DurationUnit.Minute),
                     600             
                );
                yield return new (SpeedUnit.DecimeterPerSecond, "DecimeterPerSecond", "DecimetersPerSecond", new BaseUnits(length: LengthUnit.Decimeter, time: DurationUnit.Second),
                     10             
                );
                yield return new (SpeedUnit.FootPerHour, "FootPerHour", "FeetPerHour", new BaseUnits(length: LengthUnit.Foot, time: DurationUnit.Hour),
                     new QuantityValue(1500000, 127)             
                );
                yield return new (SpeedUnit.FootPerMinute, "FootPerMinute", "FeetPerMinute", new BaseUnits(length: LengthUnit.Foot, time: DurationUnit.Minute),
                     new QuantityValue(25000, 127)             
                );
                yield return new (SpeedUnit.FootPerSecond, "FootPerSecond", "FeetPerSecond", new BaseUnits(length: LengthUnit.Foot, time: DurationUnit.Second),
                     new QuantityValue(1250, 381)             
                );
                yield return new (SpeedUnit.InchPerHour, "InchPerHour", "InchesPerHour", new BaseUnits(length: LengthUnit.Inch, time: DurationUnit.Hour),
                     new QuantityValue(18000000, 127)             
                );
                yield return new (SpeedUnit.InchPerMinute, "InchPerMinute", "InchesPerMinute", new BaseUnits(length: LengthUnit.Inch, time: DurationUnit.Minute),
                     new QuantityValue(300000, 127)             
                );
                yield return new (SpeedUnit.InchPerSecond, "InchPerSecond", "InchesPerSecond", new BaseUnits(length: LengthUnit.Inch, time: DurationUnit.Second),
                     new QuantityValue(5000, 127)             
                );
                yield return new (SpeedUnit.KilometerPerHour, "KilometerPerHour", "KilometersPerHour", new BaseUnits(length: LengthUnit.Kilometer, time: DurationUnit.Hour),
                     new QuantityValue(18, 5)             
                );
                yield return new (SpeedUnit.KilometerPerMinute, "KilometerPerMinute", "KilometersPerMinute", new BaseUnits(length: LengthUnit.Kilometer, time: DurationUnit.Minute),
                     new QuantityValue(3, 50)             
                );
                yield return new (SpeedUnit.KilometerPerSecond, "KilometerPerSecond", "KilometersPerSecond", new BaseUnits(length: LengthUnit.Kilometer, time: DurationUnit.Second),
                     new QuantityValue(1, 1000)             
                );
                yield return new (SpeedUnit.Knot, "Knot", "Knots", new BaseUnits(length: LengthUnit.NauticalMile, time: DurationUnit.Hour),
                     new QuantityValue(900, 463)             
                );
                yield return new (SpeedUnit.Mach, "Mach", "Mach", BaseUnits.Undefined,
                     new QuantityValue(100, 34029)             
                );
                yield return new (SpeedUnit.MeterPerHour, "MeterPerHour", "MetersPerHour", new BaseUnits(length: LengthUnit.Meter, time: DurationUnit.Hour),
                     3600             
                );
                yield return new (SpeedUnit.MeterPerMinute, "MeterPerMinute", "MetersPerMinute", new BaseUnits(length: LengthUnit.Meter, time: DurationUnit.Minute),
                     60             
                );
                yield return new (SpeedUnit.MeterPerSecond, "MeterPerSecond", "MetersPerSecond", new BaseUnits(length: LengthUnit.Meter, time: DurationUnit.Second));
                yield return new (SpeedUnit.MicrometerPerMinute, "MicrometerPerMinute", "MicrometersPerMinute", new BaseUnits(length: LengthUnit.Micrometer, time: DurationUnit.Minute),
                     60000000             
                );
                yield return new (SpeedUnit.MicrometerPerSecond, "MicrometerPerSecond", "MicrometersPerSecond", new BaseUnits(length: LengthUnit.Micrometer, time: DurationUnit.Second),
                     1000000             
                );
                yield return new (SpeedUnit.MilePerHour, "MilePerHour", "MilesPerHour", new BaseUnits(length: LengthUnit.Mile, time: DurationUnit.Hour),
                     new QuantityValue(3125, 1397)             
                );
                yield return new (SpeedUnit.MillimeterPerHour, "MillimeterPerHour", "MillimetersPerHour", new BaseUnits(length: LengthUnit.Millimeter, time: DurationUnit.Hour),
                     3600000             
                );
                yield return new (SpeedUnit.MillimeterPerMinute, "MillimeterPerMinute", "MillimetersPerMinute", new BaseUnits(length: LengthUnit.Millimeter, time: DurationUnit.Minute),
                     60000             
                );
                yield return new (SpeedUnit.MillimeterPerSecond, "MillimeterPerSecond", "MillimetersPerSecond", new BaseUnits(length: LengthUnit.Millimeter, time: DurationUnit.Second),
                     1000             
                );
                yield return new (SpeedUnit.NanometerPerMinute, "NanometerPerMinute", "NanometersPerMinute", new BaseUnits(length: LengthUnit.Nanometer, time: DurationUnit.Minute),
                     60000000000             
                );
                yield return new (SpeedUnit.NanometerPerSecond, "NanometerPerSecond", "NanometersPerSecond", new BaseUnits(length: LengthUnit.Nanometer, time: DurationUnit.Second),
                     1000000000             
                );
                yield return new (SpeedUnit.UsSurveyFootPerHour, "UsSurveyFootPerHour", "UsSurveyFeetPerHour", new BaseUnits(length: LengthUnit.UsSurveyFoot, time: DurationUnit.Hour),
                     11811             
                );
                yield return new (SpeedUnit.UsSurveyFootPerMinute, "UsSurveyFootPerMinute", "UsSurveyFeetPerMinute", new BaseUnits(length: LengthUnit.UsSurveyFoot, time: DurationUnit.Minute),
                     new QuantityValue(3937, 20)             
                );
                yield return new (SpeedUnit.UsSurveyFootPerSecond, "UsSurveyFootPerSecond", "UsSurveyFeetPerSecond", new BaseUnits(length: LengthUnit.UsSurveyFoot, time: DurationUnit.Second),
                     new QuantityValue(3937, 1200)             
                );
                yield return new (SpeedUnit.YardPerHour, "YardPerHour", "YardsPerHour", new BaseUnits(length: LengthUnit.Yard, time: DurationUnit.Hour),
                     new QuantityValue(500000, 127)             
                );
                yield return new (SpeedUnit.YardPerMinute, "YardPerMinute", "YardsPerMinute", new BaseUnits(length: LengthUnit.Yard, time: DurationUnit.Minute),
                     new QuantityValue(25000, 381)             
                );
                yield return new (SpeedUnit.YardPerSecond, "YardPerSecond", "YardsPerSecond", new BaseUnits(length: LengthUnit.Yard, time: DurationUnit.Second),
                     new QuantityValue(1250, 1143)             
                );
            }
        }

        static Speed()
        {
            Info = UnitsNetSetup.CreateQuantityInfo(SpeedInfo.CreateDefault);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Speed(QuantityValue value, SpeedUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Speed(QuantityValue value, UnitSystem unitSystem)
        {
            _value = value;
            _unit = Info.GetDefaultUnit(unitSystem);
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Speed" /> instances.
        /// </summary>
        [Obsolete("Replaced by UnitConverter.Default")]
        public static UnitConverter DefaultConversionFunctions => UnitConverter.Default;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<Speed, SpeedUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions => Info.BaseDimensions;

        /// <summary>
        ///     The base unit of Speed, which is MeterPerSecond. All conversions go via this value.
        /// </summary>
        public static SpeedUnit BaseUnit => Info.BaseUnitInfo.Value;

        /// <summary>
        ///     All units of measurement for the Speed quantity.
        /// </summary>
        public static IReadOnlyCollection<SpeedUnit> Units => Info.Units;

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit MeterPerSecond.
        /// </summary>
        public static Speed Zero => Info.Zero;

        #endregion

        #region Properties

        /// <inheritdoc />
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public SpeedUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<Speed, SpeedUnit> QuantityInfo => Info;

        #region Explicit implementations

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UnitKey IQuantity.UnitKey => UnitKey.ForUnit(Unit);

#if NETSTANDARD2_0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuantityInstanceInfo<Speed> IQuantityOfType<Speed>.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo<SpeedUnit> IQuantity<SpeedUnit>.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo IQuantity.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Enum IQuantity.Unit => Unit;
#endif

        #endregion

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.CentimeterPerHour"/>
        /// </summary>
        public QuantityValue CentimetersPerHour => this.As(SpeedUnit.CentimeterPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.CentimeterPerMinute"/>
        /// </summary>
        public QuantityValue CentimetersPerMinute => this.As(SpeedUnit.CentimeterPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.CentimeterPerSecond"/>
        /// </summary>
        public QuantityValue CentimetersPerSecond => this.As(SpeedUnit.CentimeterPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.DecimeterPerMinute"/>
        /// </summary>
        public QuantityValue DecimetersPerMinute => this.As(SpeedUnit.DecimeterPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.DecimeterPerSecond"/>
        /// </summary>
        public QuantityValue DecimetersPerSecond => this.As(SpeedUnit.DecimeterPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.FootPerHour"/>
        /// </summary>
        public QuantityValue FeetPerHour => this.As(SpeedUnit.FootPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.FootPerMinute"/>
        /// </summary>
        public QuantityValue FeetPerMinute => this.As(SpeedUnit.FootPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.FootPerSecond"/>
        /// </summary>
        public QuantityValue FeetPerSecond => this.As(SpeedUnit.FootPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.InchPerHour"/>
        /// </summary>
        public QuantityValue InchesPerHour => this.As(SpeedUnit.InchPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.InchPerMinute"/>
        /// </summary>
        public QuantityValue InchesPerMinute => this.As(SpeedUnit.InchPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.InchPerSecond"/>
        /// </summary>
        public QuantityValue InchesPerSecond => this.As(SpeedUnit.InchPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.KilometerPerHour"/>
        /// </summary>
        public QuantityValue KilometersPerHour => this.As(SpeedUnit.KilometerPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.KilometerPerMinute"/>
        /// </summary>
        public QuantityValue KilometersPerMinute => this.As(SpeedUnit.KilometerPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.KilometerPerSecond"/>
        /// </summary>
        public QuantityValue KilometersPerSecond => this.As(SpeedUnit.KilometerPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.Knot"/>
        /// </summary>
        public QuantityValue Knots => this.As(SpeedUnit.Knot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.Mach"/>
        /// </summary>
        public QuantityValue Mach => this.As(SpeedUnit.Mach);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.MeterPerHour"/>
        /// </summary>
        public QuantityValue MetersPerHour => this.As(SpeedUnit.MeterPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.MeterPerMinute"/>
        /// </summary>
        public QuantityValue MetersPerMinute => this.As(SpeedUnit.MeterPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.MeterPerSecond"/>
        /// </summary>
        public QuantityValue MetersPerSecond => this.As(SpeedUnit.MeterPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.MicrometerPerMinute"/>
        /// </summary>
        public QuantityValue MicrometersPerMinute => this.As(SpeedUnit.MicrometerPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.MicrometerPerSecond"/>
        /// </summary>
        public QuantityValue MicrometersPerSecond => this.As(SpeedUnit.MicrometerPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.MilePerHour"/>
        /// </summary>
        public QuantityValue MilesPerHour => this.As(SpeedUnit.MilePerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.MillimeterPerHour"/>
        /// </summary>
        public QuantityValue MillimetersPerHour => this.As(SpeedUnit.MillimeterPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.MillimeterPerMinute"/>
        /// </summary>
        public QuantityValue MillimetersPerMinute => this.As(SpeedUnit.MillimeterPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.MillimeterPerSecond"/>
        /// </summary>
        public QuantityValue MillimetersPerSecond => this.As(SpeedUnit.MillimeterPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.NanometerPerMinute"/>
        /// </summary>
        public QuantityValue NanometersPerMinute => this.As(SpeedUnit.NanometerPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.NanometerPerSecond"/>
        /// </summary>
        public QuantityValue NanometersPerSecond => this.As(SpeedUnit.NanometerPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.UsSurveyFootPerHour"/>
        /// </summary>
        public QuantityValue UsSurveyFeetPerHour => this.As(SpeedUnit.UsSurveyFootPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.UsSurveyFootPerMinute"/>
        /// </summary>
        public QuantityValue UsSurveyFeetPerMinute => this.As(SpeedUnit.UsSurveyFootPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.UsSurveyFootPerSecond"/>
        /// </summary>
        public QuantityValue UsSurveyFeetPerSecond => this.As(SpeedUnit.UsSurveyFootPerSecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.YardPerHour"/>
        /// </summary>
        public QuantityValue YardsPerHour => this.As(SpeedUnit.YardPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.YardPerMinute"/>
        /// </summary>
        public QuantityValue YardsPerMinute => this.As(SpeedUnit.YardPerMinute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="SpeedUnit.YardPerSecond"/>
        /// </summary>
        public QuantityValue YardsPerSecond => this.As(SpeedUnit.YardPerSecond);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(SpeedUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(SpeedUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.CentimeterPerHour"/>.
        /// </summary>
        public static Speed FromCentimetersPerHour(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.CentimeterPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.CentimeterPerMinute"/>.
        /// </summary>
        public static Speed FromCentimetersPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.CentimeterPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.CentimeterPerSecond"/>.
        /// </summary>
        public static Speed FromCentimetersPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.CentimeterPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.DecimeterPerMinute"/>.
        /// </summary>
        public static Speed FromDecimetersPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.DecimeterPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.DecimeterPerSecond"/>.
        /// </summary>
        public static Speed FromDecimetersPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.DecimeterPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.FootPerHour"/>.
        /// </summary>
        public static Speed FromFeetPerHour(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.FootPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.FootPerMinute"/>.
        /// </summary>
        public static Speed FromFeetPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.FootPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.FootPerSecond"/>.
        /// </summary>
        public static Speed FromFeetPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.FootPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.InchPerHour"/>.
        /// </summary>
        public static Speed FromInchesPerHour(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.InchPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.InchPerMinute"/>.
        /// </summary>
        public static Speed FromInchesPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.InchPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.InchPerSecond"/>.
        /// </summary>
        public static Speed FromInchesPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.InchPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.KilometerPerHour"/>.
        /// </summary>
        public static Speed FromKilometersPerHour(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.KilometerPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.KilometerPerMinute"/>.
        /// </summary>
        public static Speed FromKilometersPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.KilometerPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.KilometerPerSecond"/>.
        /// </summary>
        public static Speed FromKilometersPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.KilometerPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.Knot"/>.
        /// </summary>
        public static Speed FromKnots(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.Knot);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.Mach"/>.
        /// </summary>
        public static Speed FromMach(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.Mach);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.MeterPerHour"/>.
        /// </summary>
        public static Speed FromMetersPerHour(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.MeterPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.MeterPerMinute"/>.
        /// </summary>
        public static Speed FromMetersPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.MeterPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.MeterPerSecond"/>.
        /// </summary>
        public static Speed FromMetersPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.MeterPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.MicrometerPerMinute"/>.
        /// </summary>
        public static Speed FromMicrometersPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.MicrometerPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.MicrometerPerSecond"/>.
        /// </summary>
        public static Speed FromMicrometersPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.MicrometerPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.MilePerHour"/>.
        /// </summary>
        public static Speed FromMilesPerHour(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.MilePerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.MillimeterPerHour"/>.
        /// </summary>
        public static Speed FromMillimetersPerHour(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.MillimeterPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.MillimeterPerMinute"/>.
        /// </summary>
        public static Speed FromMillimetersPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.MillimeterPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.MillimeterPerSecond"/>.
        /// </summary>
        public static Speed FromMillimetersPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.MillimeterPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.NanometerPerMinute"/>.
        /// </summary>
        public static Speed FromNanometersPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.NanometerPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.NanometerPerSecond"/>.
        /// </summary>
        public static Speed FromNanometersPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.NanometerPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.UsSurveyFootPerHour"/>.
        /// </summary>
        public static Speed FromUsSurveyFeetPerHour(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.UsSurveyFootPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.UsSurveyFootPerMinute"/>.
        /// </summary>
        public static Speed FromUsSurveyFeetPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.UsSurveyFootPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.UsSurveyFootPerSecond"/>.
        /// </summary>
        public static Speed FromUsSurveyFeetPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.UsSurveyFootPerSecond);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.YardPerHour"/>.
        /// </summary>
        public static Speed FromYardsPerHour(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.YardPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.YardPerMinute"/>.
        /// </summary>
        public static Speed FromYardsPerMinute(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.YardPerMinute);
        }

        /// <summary>
        ///     Creates a <see cref="Speed"/> from <see cref="SpeedUnit.YardPerSecond"/>.
        /// </summary>
        public static Speed FromYardsPerSecond(QuantityValue value)
        {
            return new Speed(value, SpeedUnit.YardPerSecond);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="SpeedUnit" /> to <see cref="Speed" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Speed unit value.</returns>
        public static Speed From(QuantityValue value, SpeedUnit fromUnit)
        {
            return new Speed(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Speed Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Speed Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Speed, SpeedUnit>(str, provider, From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse([NotNullWhen(true)]string? str, out Speed result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse([NotNullWhen(true)]string? str, IFormatProvider? provider, out Speed result)
        {
            return QuantityParser.Default.TryParse<Speed, SpeedUnit>(str, provider, From, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpeedUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static SpeedUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse(str, Info.UnitInfos, provider).Value;
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider?,out UnitsNet.Units.SpeedUnit)"/>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, out SpeedUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, IFormatProvider? provider, out SpeedUnit unit)
        {
            return UnitParser.Default.TryParse(str, Info, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Speed operator -(Speed right)
        {
            return new Speed(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Speed"/> from adding two <see cref="Speed"/>.</summary>
        public static Speed operator +(Speed left, Speed right)
        {
            return new Speed(left.Value + right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Speed"/> from subtracting two <see cref="Speed"/>.</summary>
        public static Speed operator -(Speed left, Speed right)
        {
            return new Speed(left.Value - right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Speed"/> from multiplying value and <see cref="Speed"/>.</summary>
        public static Speed operator *(QuantityValue left, Speed right)
        {
            return new Speed(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Speed"/> from multiplying value and <see cref="Speed"/>.</summary>
        public static Speed operator *(Speed left, QuantityValue right)
        {
            return new Speed(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Speed"/> from dividing <see cref="Speed"/> by value.</summary>
        public static Speed operator /(Speed left, QuantityValue right)
        {
            return new Speed(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Speed"/> by <see cref="Speed"/>.</summary>
        public static QuantityValue operator /(Speed left, Speed right)
        {
            return left.MetersPerSecond / right.MetersPerSecond;
        }

        #endregion

        #region Relational Operators

        /// <summary>Get <see cref="Acceleration"/> from <see cref="Speed"/> / <see cref="Duration"/>.</summary>
        public static Acceleration operator /(Speed speed, Duration duration)
        {
            return Acceleration.FromMetersPerSecondSquared(speed.MetersPerSecond / duration.Seconds);
        }

        /// <summary>Get <see cref="Duration"/> from <see cref="Speed"/> / <see cref="Acceleration"/>.</summary>
        public static Duration operator /(Speed speed, Acceleration acceleration)
        {
            return Duration.FromSeconds(speed.MetersPerSecond / acceleration.MetersPerSecondSquared);
        }

        /// <summary>Get <see cref="KinematicViscosity"/> from <see cref="Speed"/> * <see cref="Length"/>.</summary>
        public static KinematicViscosity operator *(Speed speed, Length length)
        {
            return KinematicViscosity.FromSquareMetersPerSecond(speed.MetersPerSecond * length.Meters);
        }

        /// <summary>Get <see cref="Length"/> from <see cref="Speed"/> * <see cref="Duration"/>.</summary>
        public static Length operator *(Speed speed, Duration duration)
        {
            return Length.FromMeters(speed.MetersPerSecond * duration.Seconds);
        }

        /// <summary>Get <see cref="MassFlux"/> from <see cref="Speed"/> * <see cref="Density"/>.</summary>
        public static MassFlux operator *(Speed speed, Density density)
        {
            return MassFlux.FromKilogramsPerSecondPerSquareMeter(speed.MetersPerSecond * density.KilogramsPerCubicMeter);
        }

        /// <summary>Get <see cref="Power"/> from <see cref="Speed"/> * <see cref="Force"/>.</summary>
        public static Power operator *(Speed speed, Force force)
        {
            return Power.FromWatts(speed.MetersPerSecond * force.Newtons);
        }

        /// <summary>Get <see cref="SpecificEnergy"/> from <see cref="Speed"/> * <see cref="Speed"/>.</summary>
        public static SpecificEnergy operator *(Speed left, Speed right)
        {
            return SpecificEnergy.FromJoulesPerKilogram(left.MetersPerSecond * right.MetersPerSecond);
        }

        /// <summary>Get <see cref="VolumeFlow"/> from <see cref="Speed"/> * <see cref="Area"/>.</summary>
        public static VolumeFlow operator *(Speed speed, Area area)
        {
            return VolumeFlow.FromCubicMetersPerSecond(speed.MetersPerSecond * area.SquareMeters);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Speed left, Speed right)
        {
            return left.Value <= right.As(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Speed left, Speed right)
        {
            return left.Value >= right.As(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Speed left, Speed right)
        {
            return left.Value < right.As(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Speed left, Speed right)
        {
            return left.Value > right.As(left.Unit);
        }

        /// <summary>Indicates strict equality of two <see cref="Speed"/> quantities.</summary>
        public static bool operator ==(Speed left, Speed right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Speed"/> quantities.</summary>
        public static bool operator !=(Speed left, Speed right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Speed"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is not Speed otherQuantity)
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Speed"/> quantities.</summary>
        public bool Equals(Speed other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Speed.</returns>
        public override int GetHashCode()
        {
            return Comparison.GetHashCode(typeof(Speed), this.As(BaseUnit));
        }
        
        /// <inheritdoc  cref="CompareTo(Speed)" />
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        public int CompareTo(object? obj)
        {
            if (obj is not Speed otherQuantity)
                throw obj is null ? new ArgumentNullException(nameof(obj)) : ExceptionHelper.CreateArgumentException<Speed>(obj, nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>
        ///     Compares the current <see cref="Speed"/> with another <see cref="Speed"/> and returns an integer that indicates
        ///     whether the current instance precedes, follows, or occurs in the same position in the sort order as the other quantity, when converted to the same unit.
        /// </summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Speed other)
        {
            return _value.CompareTo(other.As(this.Unit));
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null, null);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TQuantity}(TQuantity, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Default.Format(this, format, provider);
        }

        #endregion

    }
}
