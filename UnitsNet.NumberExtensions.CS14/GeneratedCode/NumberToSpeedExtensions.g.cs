//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpeed
{
    /// <summary>
    /// A number to Speed Extensions
    /// </summary>
    public static class NumberToSpeedExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Speed.FromCentimetersPerHour(QuantityValue)" />
            public Speed CentimetersPerHour
#if NET7_0_OR_GREATER
                => Speed.FromCentimetersPerHour(QuantityValue.CreateChecked(value));
#else
                => Speed.FromCentimetersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromCentimetersPerMinute(QuantityValue)" />
            public Speed CentimetersPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromCentimetersPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromCentimetersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromCentimetersPerSecond(QuantityValue)" />
            public Speed CentimetersPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromCentimetersPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromCentimetersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromDecimetersPerMinute(QuantityValue)" />
            public Speed DecimetersPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromDecimetersPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromDecimetersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromDecimetersPerSecond(QuantityValue)" />
            public Speed DecimetersPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromDecimetersPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromDecimetersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromFeetPerHour(QuantityValue)" />
            public Speed FeetPerHour
#if NET7_0_OR_GREATER
                => Speed.FromFeetPerHour(QuantityValue.CreateChecked(value));
#else
                => Speed.FromFeetPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromFeetPerMinute(QuantityValue)" />
            public Speed FeetPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromFeetPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromFeetPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromFeetPerSecond(QuantityValue)" />
            public Speed FeetPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromFeetPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromFeetPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromInchesPerHour(QuantityValue)" />
            public Speed InchesPerHour
#if NET7_0_OR_GREATER
                => Speed.FromInchesPerHour(QuantityValue.CreateChecked(value));
#else
                => Speed.FromInchesPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromInchesPerMinute(QuantityValue)" />
            public Speed InchesPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromInchesPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromInchesPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromInchesPerSecond(QuantityValue)" />
            public Speed InchesPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromInchesPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromInchesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromKilometersPerHour(QuantityValue)" />
            public Speed KilometersPerHour
#if NET7_0_OR_GREATER
                => Speed.FromKilometersPerHour(QuantityValue.CreateChecked(value));
#else
                => Speed.FromKilometersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromKilometersPerMinute(QuantityValue)" />
            public Speed KilometersPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromKilometersPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromKilometersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromKilometersPerSecond(QuantityValue)" />
            public Speed KilometersPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromKilometersPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromKilometersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromKnots(QuantityValue)" />
            public Speed Knots
#if NET7_0_OR_GREATER
                => Speed.FromKnots(QuantityValue.CreateChecked(value));
#else
                => Speed.FromKnots(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMach(QuantityValue)" />
            public Speed Mach
#if NET7_0_OR_GREATER
                => Speed.FromMach(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMach(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMetersPerHour(QuantityValue)" />
            public Speed MetersPerHour
#if NET7_0_OR_GREATER
                => Speed.FromMetersPerHour(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMetersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMetersPerMinute(QuantityValue)" />
            public Speed MetersPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromMetersPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMetersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMetersPerSecond(QuantityValue)" />
            public Speed MetersPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromMetersPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMetersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMicrometersPerMinute(QuantityValue)" />
            public Speed MicrometersPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromMicrometersPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMicrometersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMicrometersPerSecond(QuantityValue)" />
            public Speed MicrometersPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromMicrometersPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMicrometersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMilesPerHour(QuantityValue)" />
            public Speed MilesPerHour
#if NET7_0_OR_GREATER
                => Speed.FromMilesPerHour(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMilesPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMillimetersPerHour(QuantityValue)" />
            public Speed MillimetersPerHour
#if NET7_0_OR_GREATER
                => Speed.FromMillimetersPerHour(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMillimetersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMillimetersPerMinute(QuantityValue)" />
            public Speed MillimetersPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromMillimetersPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMillimetersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromMillimetersPerSecond(QuantityValue)" />
            public Speed MillimetersPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromMillimetersPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromMillimetersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromNanometersPerMinute(QuantityValue)" />
            public Speed NanometersPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromNanometersPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromNanometersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromNanometersPerSecond(QuantityValue)" />
            public Speed NanometersPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromNanometersPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromNanometersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromUsSurveyFeetPerHour(QuantityValue)" />
            public Speed UsSurveyFeetPerHour
#if NET7_0_OR_GREATER
                => Speed.FromUsSurveyFeetPerHour(QuantityValue.CreateChecked(value));
#else
                => Speed.FromUsSurveyFeetPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromUsSurveyFeetPerMinute(QuantityValue)" />
            public Speed UsSurveyFeetPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromUsSurveyFeetPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromUsSurveyFeetPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromUsSurveyFeetPerSecond(QuantityValue)" />
            public Speed UsSurveyFeetPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromUsSurveyFeetPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromUsSurveyFeetPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromYardsPerHour(QuantityValue)" />
            public Speed YardsPerHour
#if NET7_0_OR_GREATER
                => Speed.FromYardsPerHour(QuantityValue.CreateChecked(value));
#else
                => Speed.FromYardsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromYardsPerMinute(QuantityValue)" />
            public Speed YardsPerMinute
#if NET7_0_OR_GREATER
                => Speed.FromYardsPerMinute(QuantityValue.CreateChecked(value));
#else
                => Speed.FromYardsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Speed.FromYardsPerSecond(QuantityValue)" />
            public Speed YardsPerSecond
#if NET7_0_OR_GREATER
                => Speed.FromYardsPerSecond(QuantityValue.CreateChecked(value));
#else
                => Speed.FromYardsPerSecond(value.ToQuantityValue());
#endif

        }
    }
}
