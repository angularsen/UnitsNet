//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToRadioactivity
{
    /// <summary>
    /// A number to Radioactivity Extensions
    /// </summary>
    public static class NumberToRadioactivityExtensions
    {
        extension<T>(T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Radioactivity.FromBecquerels(double)" />
            public Radioactivity Becquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromBecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromBecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromCuries(double)" />
            public Radioactivity Curies
#if NET7_0_OR_GREATER
                => Radioactivity.FromCuries(double.CreateChecked(value));
#else
                => Radioactivity.FromCuries(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromExabecquerels(double)" />
            public Radioactivity Exabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromExabecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromExabecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromGigabecquerels(double)" />
            public Radioactivity Gigabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromGigabecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromGigabecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromGigacuries(double)" />
            public Radioactivity Gigacuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromGigacuries(double.CreateChecked(value));
#else
                => Radioactivity.FromGigacuries(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromGigarutherfords(double)" />
            public Radioactivity Gigarutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromGigarutherfords(double.CreateChecked(value));
#else
                => Radioactivity.FromGigarutherfords(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromKilobecquerels(double)" />
            public Radioactivity Kilobecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromKilobecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromKilobecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromKilocuries(double)" />
            public Radioactivity Kilocuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromKilocuries(double.CreateChecked(value));
#else
                => Radioactivity.FromKilocuries(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromKilorutherfords(double)" />
            public Radioactivity Kilorutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromKilorutherfords(double.CreateChecked(value));
#else
                => Radioactivity.FromKilorutherfords(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromMegabecquerels(double)" />
            public Radioactivity Megabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromMegabecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromMegabecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromMegacuries(double)" />
            public Radioactivity Megacuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromMegacuries(double.CreateChecked(value));
#else
                => Radioactivity.FromMegacuries(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromMegarutherfords(double)" />
            public Radioactivity Megarutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromMegarutherfords(double.CreateChecked(value));
#else
                => Radioactivity.FromMegarutherfords(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromMicrobecquerels(double)" />
            public Radioactivity Microbecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromMicrobecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromMicrobecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromMicrocuries(double)" />
            public Radioactivity Microcuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromMicrocuries(double.CreateChecked(value));
#else
                => Radioactivity.FromMicrocuries(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromMicrorutherfords(double)" />
            public Radioactivity Microrutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromMicrorutherfords(double.CreateChecked(value));
#else
                => Radioactivity.FromMicrorutherfords(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromMillibecquerels(double)" />
            public Radioactivity Millibecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromMillibecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromMillibecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromMillicuries(double)" />
            public Radioactivity Millicuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromMillicuries(double.CreateChecked(value));
#else
                => Radioactivity.FromMillicuries(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromMillirutherfords(double)" />
            public Radioactivity Millirutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromMillirutherfords(double.CreateChecked(value));
#else
                => Radioactivity.FromMillirutherfords(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromNanobecquerels(double)" />
            public Radioactivity Nanobecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromNanobecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromNanobecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromNanocuries(double)" />
            public Radioactivity Nanocuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromNanocuries(double.CreateChecked(value));
#else
                => Radioactivity.FromNanocuries(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromNanorutherfords(double)" />
            public Radioactivity Nanorutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromNanorutherfords(double.CreateChecked(value));
#else
                => Radioactivity.FromNanorutherfords(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromPetabecquerels(double)" />
            public Radioactivity Petabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromPetabecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromPetabecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromPicobecquerels(double)" />
            public Radioactivity Picobecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromPicobecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromPicobecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromPicocuries(double)" />
            public Radioactivity Picocuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromPicocuries(double.CreateChecked(value));
#else
                => Radioactivity.FromPicocuries(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromPicorutherfords(double)" />
            public Radioactivity Picorutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromPicorutherfords(double.CreateChecked(value));
#else
                => Radioactivity.FromPicorutherfords(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromRutherfords(double)" />
            public Radioactivity Rutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromRutherfords(double.CreateChecked(value));
#else
                => Radioactivity.FromRutherfords(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromTerabecquerels(double)" />
            public Radioactivity Terabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromTerabecquerels(double.CreateChecked(value));
#else
                => Radioactivity.FromTerabecquerels(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromTeracuries(double)" />
            public Radioactivity Teracuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromTeracuries(double.CreateChecked(value));
#else
                => Radioactivity.FromTeracuries(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Radioactivity.FromTerarutherfords(double)" />
            public Radioactivity Terarutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromTerarutherfords(double.CreateChecked(value));
#else
                => Radioactivity.FromTerarutherfords(value.ToDouble(null));
#endif

        }
    }
}
