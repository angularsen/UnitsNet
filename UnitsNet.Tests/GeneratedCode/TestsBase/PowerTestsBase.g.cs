//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Power.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PowerTestsBase : QuantityTestsBase
    {
        protected abstract double BoilerHorsepowerInOneWatt { get; }
        protected abstract double BritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double CaloriesPerHourInOneWatt { get; }
        protected abstract double DecawattsInOneWatt { get; }
        protected abstract double DeciwattsInOneWatt { get; }
        protected abstract double ElectricalHorsepowerInOneWatt { get; }
        protected abstract double FemtowattsInOneWatt { get; }
        protected abstract double GigacaloriesPerHourInOneWatt { get; }
        protected abstract double GigajoulesPerHourInOneWatt { get; }
        protected abstract double GigawattsInOneWatt { get; }
        protected abstract double HydraulicHorsepowerInOneWatt { get; }
        protected abstract double JoulesPerHourInOneWatt { get; }
        protected abstract double KilobritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double KilocaloriesPerHourInOneWatt { get; }
        protected abstract double KilojoulesPerHourInOneWatt { get; }
        protected abstract double KilowattsInOneWatt { get; }
        protected abstract double MechanicalHorsepowerInOneWatt { get; }
        protected abstract double MegabritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double MegacaloriesPerHourInOneWatt { get; }
        protected abstract double MegajoulesPerHourInOneWatt { get; }
        protected abstract double MegawattsInOneWatt { get; }
        protected abstract double MetricHorsepowerInOneWatt { get; }
        protected abstract double MicrowattsInOneWatt { get; }
        protected abstract double MillijoulesPerHourInOneWatt { get; }
        protected abstract double MilliwattsInOneWatt { get; }
        protected abstract double NanowattsInOneWatt { get; }
        protected abstract double PetawattsInOneWatt { get; }
        protected abstract double PicowattsInOneWatt { get; }
        protected abstract double TerawattsInOneWatt { get; }
        protected abstract double TonsOfRefrigerationInOneWatt { get; }
        protected abstract double WattsInOneWatt { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BoilerHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double BritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double CaloriesPerHourTolerance { get { return 1e-5; } }
        protected virtual double DecawattsTolerance { get { return 1e-5; } }
        protected virtual double DeciwattsTolerance { get { return 1e-5; } }
        protected virtual double ElectricalHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double FemtowattsTolerance { get { return 1e-5; } }
        protected virtual double GigacaloriesPerHourTolerance { get { return 1e-5; } }
        protected virtual double GigajoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double GigawattsTolerance { get { return 1e-5; } }
        protected virtual double HydraulicHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilobritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilowattsTolerance { get { return 1e-5; } }
        protected virtual double MechanicalHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double MegabritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double MegacaloriesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MegawattsTolerance { get { return 1e-5; } }
        protected virtual double MetricHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsTolerance { get { return 1e-5; } }
        protected virtual double MillijoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsTolerance { get { return 1e-5; } }
        protected virtual double NanowattsTolerance { get { return 1e-5; } }
        protected virtual double PetawattsTolerance { get { return 1e-5; } }
        protected virtual double PicowattsTolerance { get { return 1e-5; } }
        protected virtual double TerawattsTolerance { get { return 1e-5; } }
        protected virtual double TonsOfRefrigerationTolerance { get { return 1e-5; } }
        protected virtual double WattsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(PowerUnit unit)
        {
            return unit switch
            {
                PowerUnit.BoilerHorsepower => (BoilerHorsepowerInOneWatt, BoilerHorsepowerTolerance),
                PowerUnit.BritishThermalUnitPerHour => (BritishThermalUnitsPerHourInOneWatt, BritishThermalUnitsPerHourTolerance),
                PowerUnit.CaloriePerHour => (CaloriesPerHourInOneWatt, CaloriesPerHourTolerance),
                PowerUnit.Decawatt => (DecawattsInOneWatt, DecawattsTolerance),
                PowerUnit.Deciwatt => (DeciwattsInOneWatt, DeciwattsTolerance),
                PowerUnit.ElectricalHorsepower => (ElectricalHorsepowerInOneWatt, ElectricalHorsepowerTolerance),
                PowerUnit.Femtowatt => (FemtowattsInOneWatt, FemtowattsTolerance),
                PowerUnit.GigacaloriePerHour => (GigacaloriesPerHourInOneWatt, GigacaloriesPerHourTolerance),
                PowerUnit.GigajoulePerHour => (GigajoulesPerHourInOneWatt, GigajoulesPerHourTolerance),
                PowerUnit.Gigawatt => (GigawattsInOneWatt, GigawattsTolerance),
                PowerUnit.HydraulicHorsepower => (HydraulicHorsepowerInOneWatt, HydraulicHorsepowerTolerance),
                PowerUnit.JoulePerHour => (JoulesPerHourInOneWatt, JoulesPerHourTolerance),
                PowerUnit.KilobritishThermalUnitPerHour => (KilobritishThermalUnitsPerHourInOneWatt, KilobritishThermalUnitsPerHourTolerance),
                PowerUnit.KilocaloriePerHour => (KilocaloriesPerHourInOneWatt, KilocaloriesPerHourTolerance),
                PowerUnit.KilojoulePerHour => (KilojoulesPerHourInOneWatt, KilojoulesPerHourTolerance),
                PowerUnit.Kilowatt => (KilowattsInOneWatt, KilowattsTolerance),
                PowerUnit.MechanicalHorsepower => (MechanicalHorsepowerInOneWatt, MechanicalHorsepowerTolerance),
                PowerUnit.MegabritishThermalUnitPerHour => (MegabritishThermalUnitsPerHourInOneWatt, MegabritishThermalUnitsPerHourTolerance),
                PowerUnit.MegacaloriePerHour => (MegacaloriesPerHourInOneWatt, MegacaloriesPerHourTolerance),
                PowerUnit.MegajoulePerHour => (MegajoulesPerHourInOneWatt, MegajoulesPerHourTolerance),
                PowerUnit.Megawatt => (MegawattsInOneWatt, MegawattsTolerance),
                PowerUnit.MetricHorsepower => (MetricHorsepowerInOneWatt, MetricHorsepowerTolerance),
                PowerUnit.Microwatt => (MicrowattsInOneWatt, MicrowattsTolerance),
                PowerUnit.MillijoulePerHour => (MillijoulesPerHourInOneWatt, MillijoulesPerHourTolerance),
                PowerUnit.Milliwatt => (MilliwattsInOneWatt, MilliwattsTolerance),
                PowerUnit.Nanowatt => (NanowattsInOneWatt, NanowattsTolerance),
                PowerUnit.Petawatt => (PetawattsInOneWatt, PetawattsTolerance),
                PowerUnit.Picowatt => (PicowattsInOneWatt, PicowattsTolerance),
                PowerUnit.Terawatt => (TerawattsInOneWatt, TerawattsTolerance),
                PowerUnit.TonOfRefrigeration => (TonsOfRefrigerationInOneWatt, TonsOfRefrigerationTolerance),
                PowerUnit.Watt => (WattsInOneWatt, WattsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { PowerUnit.BoilerHorsepower },
            new object[] { PowerUnit.BritishThermalUnitPerHour },
            new object[] { PowerUnit.CaloriePerHour },
            new object[] { PowerUnit.Decawatt },
            new object[] { PowerUnit.Deciwatt },
            new object[] { PowerUnit.ElectricalHorsepower },
            new object[] { PowerUnit.Femtowatt },
            new object[] { PowerUnit.GigacaloriePerHour },
            new object[] { PowerUnit.GigajoulePerHour },
            new object[] { PowerUnit.Gigawatt },
            new object[] { PowerUnit.HydraulicHorsepower },
            new object[] { PowerUnit.JoulePerHour },
            new object[] { PowerUnit.KilobritishThermalUnitPerHour },
            new object[] { PowerUnit.KilocaloriePerHour },
            new object[] { PowerUnit.KilojoulePerHour },
            new object[] { PowerUnit.Kilowatt },
            new object[] { PowerUnit.MechanicalHorsepower },
            new object[] { PowerUnit.MegabritishThermalUnitPerHour },
            new object[] { PowerUnit.MegacaloriePerHour },
            new object[] { PowerUnit.MegajoulePerHour },
            new object[] { PowerUnit.Megawatt },
            new object[] { PowerUnit.MetricHorsepower },
            new object[] { PowerUnit.Microwatt },
            new object[] { PowerUnit.MillijoulePerHour },
            new object[] { PowerUnit.Milliwatt },
            new object[] { PowerUnit.Nanowatt },
            new object[] { PowerUnit.Petawatt },
            new object[] { PowerUnit.Picowatt },
            new object[] { PowerUnit.Terawatt },
            new object[] { PowerUnit.TonOfRefrigeration },
            new object[] { PowerUnit.Watt },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Power();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(PowerUnit.Watt, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Power(double.PositiveInfinity, PowerUnit.Watt));
            var exception2 = Record.Exception(() => new Power(double.NegativeInfinity, PowerUnit.Watt));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Power(double.NaN, PowerUnit.Watt));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Power(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Power(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Power(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Power_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Power(1, PowerUnit.Watt);

            QuantityInfo<PowerUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Power.Zero, quantityInfo.Zero);
            Assert.Equal("Power", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<PowerUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void WattToPowerUnits()
        {
            Power watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, watt.BoilerHorsepower, BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, watt.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(CaloriesPerHourInOneWatt, watt.CaloriesPerHour, CaloriesPerHourTolerance);
            AssertEx.EqualTolerance(DecawattsInOneWatt, watt.Decawatts, DecawattsTolerance);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, watt.Deciwatts, DeciwattsTolerance);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, watt.ElectricalHorsepower, ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, watt.Femtowatts, FemtowattsTolerance);
            AssertEx.EqualTolerance(GigacaloriesPerHourInOneWatt, watt.GigacaloriesPerHour, GigacaloriesPerHourTolerance);
            AssertEx.EqualTolerance(GigajoulesPerHourInOneWatt, watt.GigajoulesPerHour, GigajoulesPerHourTolerance);
            AssertEx.EqualTolerance(GigawattsInOneWatt, watt.Gigawatts, GigawattsTolerance);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, watt.HydraulicHorsepower, HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(JoulesPerHourInOneWatt, watt.JoulesPerHour, JoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, watt.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerHourInOneWatt, watt.KilocaloriesPerHour, KilocaloriesPerHourTolerance);
            AssertEx.EqualTolerance(KilojoulesPerHourInOneWatt, watt.KilojoulesPerHour, KilojoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilowattsInOneWatt, watt.Kilowatts, KilowattsTolerance);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, watt.MechanicalHorsepower, MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsPerHourInOneWatt, watt.MegabritishThermalUnitsPerHour, MegabritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(MegacaloriesPerHourInOneWatt, watt.MegacaloriesPerHour, MegacaloriesPerHourTolerance);
            AssertEx.EqualTolerance(MegajoulesPerHourInOneWatt, watt.MegajoulesPerHour, MegajoulesPerHourTolerance);
            AssertEx.EqualTolerance(MegawattsInOneWatt, watt.Megawatts, MegawattsTolerance);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, watt.MetricHorsepower, MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, watt.Microwatts, MicrowattsTolerance);
            AssertEx.EqualTolerance(MillijoulesPerHourInOneWatt, watt.MillijoulesPerHour, MillijoulesPerHourTolerance);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, watt.Milliwatts, MilliwattsTolerance);
            AssertEx.EqualTolerance(NanowattsInOneWatt, watt.Nanowatts, NanowattsTolerance);
            AssertEx.EqualTolerance(PetawattsInOneWatt, watt.Petawatts, PetawattsTolerance);
            AssertEx.EqualTolerance(PicowattsInOneWatt, watt.Picowatts, PicowattsTolerance);
            AssertEx.EqualTolerance(TerawattsInOneWatt, watt.Terawatts, TerawattsTolerance);
            AssertEx.EqualTolerance(TonsOfRefrigerationInOneWatt, watt.TonsOfRefrigeration, TonsOfRefrigerationTolerance);
            AssertEx.EqualTolerance(WattsInOneWatt, watt.Watts, WattsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Power.From(1, PowerUnit.BoilerHorsepower);
            AssertEx.EqualTolerance(1, quantity00.BoilerHorsepower, BoilerHorsepowerTolerance);
            Assert.Equal(PowerUnit.BoilerHorsepower, quantity00.Unit);

            var quantity01 = Power.From(1, PowerUnit.BritishThermalUnitPerHour);
            AssertEx.EqualTolerance(1, quantity01.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
            Assert.Equal(PowerUnit.BritishThermalUnitPerHour, quantity01.Unit);

            var quantity02 = Power.From(1, PowerUnit.CaloriePerHour);
            AssertEx.EqualTolerance(1, quantity02.CaloriesPerHour, CaloriesPerHourTolerance);
            Assert.Equal(PowerUnit.CaloriePerHour, quantity02.Unit);

            var quantity03 = Power.From(1, PowerUnit.Decawatt);
            AssertEx.EqualTolerance(1, quantity03.Decawatts, DecawattsTolerance);
            Assert.Equal(PowerUnit.Decawatt, quantity03.Unit);

            var quantity04 = Power.From(1, PowerUnit.Deciwatt);
            AssertEx.EqualTolerance(1, quantity04.Deciwatts, DeciwattsTolerance);
            Assert.Equal(PowerUnit.Deciwatt, quantity04.Unit);

            var quantity05 = Power.From(1, PowerUnit.ElectricalHorsepower);
            AssertEx.EqualTolerance(1, quantity05.ElectricalHorsepower, ElectricalHorsepowerTolerance);
            Assert.Equal(PowerUnit.ElectricalHorsepower, quantity05.Unit);

            var quantity06 = Power.From(1, PowerUnit.Femtowatt);
            AssertEx.EqualTolerance(1, quantity06.Femtowatts, FemtowattsTolerance);
            Assert.Equal(PowerUnit.Femtowatt, quantity06.Unit);

            var quantity07 = Power.From(1, PowerUnit.GigacaloriePerHour);
            AssertEx.EqualTolerance(1, quantity07.GigacaloriesPerHour, GigacaloriesPerHourTolerance);
            Assert.Equal(PowerUnit.GigacaloriePerHour, quantity07.Unit);

            var quantity08 = Power.From(1, PowerUnit.GigajoulePerHour);
            AssertEx.EqualTolerance(1, quantity08.GigajoulesPerHour, GigajoulesPerHourTolerance);
            Assert.Equal(PowerUnit.GigajoulePerHour, quantity08.Unit);

            var quantity09 = Power.From(1, PowerUnit.Gigawatt);
            AssertEx.EqualTolerance(1, quantity09.Gigawatts, GigawattsTolerance);
            Assert.Equal(PowerUnit.Gigawatt, quantity09.Unit);

            var quantity10 = Power.From(1, PowerUnit.HydraulicHorsepower);
            AssertEx.EqualTolerance(1, quantity10.HydraulicHorsepower, HydraulicHorsepowerTolerance);
            Assert.Equal(PowerUnit.HydraulicHorsepower, quantity10.Unit);

            var quantity11 = Power.From(1, PowerUnit.JoulePerHour);
            AssertEx.EqualTolerance(1, quantity11.JoulesPerHour, JoulesPerHourTolerance);
            Assert.Equal(PowerUnit.JoulePerHour, quantity11.Unit);

            var quantity12 = Power.From(1, PowerUnit.KilobritishThermalUnitPerHour);
            AssertEx.EqualTolerance(1, quantity12.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
            Assert.Equal(PowerUnit.KilobritishThermalUnitPerHour, quantity12.Unit);

            var quantity13 = Power.From(1, PowerUnit.KilocaloriePerHour);
            AssertEx.EqualTolerance(1, quantity13.KilocaloriesPerHour, KilocaloriesPerHourTolerance);
            Assert.Equal(PowerUnit.KilocaloriePerHour, quantity13.Unit);

            var quantity14 = Power.From(1, PowerUnit.KilojoulePerHour);
            AssertEx.EqualTolerance(1, quantity14.KilojoulesPerHour, KilojoulesPerHourTolerance);
            Assert.Equal(PowerUnit.KilojoulePerHour, quantity14.Unit);

            var quantity15 = Power.From(1, PowerUnit.Kilowatt);
            AssertEx.EqualTolerance(1, quantity15.Kilowatts, KilowattsTolerance);
            Assert.Equal(PowerUnit.Kilowatt, quantity15.Unit);

            var quantity16 = Power.From(1, PowerUnit.MechanicalHorsepower);
            AssertEx.EqualTolerance(1, quantity16.MechanicalHorsepower, MechanicalHorsepowerTolerance);
            Assert.Equal(PowerUnit.MechanicalHorsepower, quantity16.Unit);

            var quantity17 = Power.From(1, PowerUnit.MegabritishThermalUnitPerHour);
            AssertEx.EqualTolerance(1, quantity17.MegabritishThermalUnitsPerHour, MegabritishThermalUnitsPerHourTolerance);
            Assert.Equal(PowerUnit.MegabritishThermalUnitPerHour, quantity17.Unit);

            var quantity18 = Power.From(1, PowerUnit.MegacaloriePerHour);
            AssertEx.EqualTolerance(1, quantity18.MegacaloriesPerHour, MegacaloriesPerHourTolerance);
            Assert.Equal(PowerUnit.MegacaloriePerHour, quantity18.Unit);

            var quantity19 = Power.From(1, PowerUnit.MegajoulePerHour);
            AssertEx.EqualTolerance(1, quantity19.MegajoulesPerHour, MegajoulesPerHourTolerance);
            Assert.Equal(PowerUnit.MegajoulePerHour, quantity19.Unit);

            var quantity20 = Power.From(1, PowerUnit.Megawatt);
            AssertEx.EqualTolerance(1, quantity20.Megawatts, MegawattsTolerance);
            Assert.Equal(PowerUnit.Megawatt, quantity20.Unit);

            var quantity21 = Power.From(1, PowerUnit.MetricHorsepower);
            AssertEx.EqualTolerance(1, quantity21.MetricHorsepower, MetricHorsepowerTolerance);
            Assert.Equal(PowerUnit.MetricHorsepower, quantity21.Unit);

            var quantity22 = Power.From(1, PowerUnit.Microwatt);
            AssertEx.EqualTolerance(1, quantity22.Microwatts, MicrowattsTolerance);
            Assert.Equal(PowerUnit.Microwatt, quantity22.Unit);

            var quantity23 = Power.From(1, PowerUnit.MillijoulePerHour);
            AssertEx.EqualTolerance(1, quantity23.MillijoulesPerHour, MillijoulesPerHourTolerance);
            Assert.Equal(PowerUnit.MillijoulePerHour, quantity23.Unit);

            var quantity24 = Power.From(1, PowerUnit.Milliwatt);
            AssertEx.EqualTolerance(1, quantity24.Milliwatts, MilliwattsTolerance);
            Assert.Equal(PowerUnit.Milliwatt, quantity24.Unit);

            var quantity25 = Power.From(1, PowerUnit.Nanowatt);
            AssertEx.EqualTolerance(1, quantity25.Nanowatts, NanowattsTolerance);
            Assert.Equal(PowerUnit.Nanowatt, quantity25.Unit);

            var quantity26 = Power.From(1, PowerUnit.Petawatt);
            AssertEx.EqualTolerance(1, quantity26.Petawatts, PetawattsTolerance);
            Assert.Equal(PowerUnit.Petawatt, quantity26.Unit);

            var quantity27 = Power.From(1, PowerUnit.Picowatt);
            AssertEx.EqualTolerance(1, quantity27.Picowatts, PicowattsTolerance);
            Assert.Equal(PowerUnit.Picowatt, quantity27.Unit);

            var quantity28 = Power.From(1, PowerUnit.Terawatt);
            AssertEx.EqualTolerance(1, quantity28.Terawatts, TerawattsTolerance);
            Assert.Equal(PowerUnit.Terawatt, quantity28.Unit);

            var quantity29 = Power.From(1, PowerUnit.TonOfRefrigeration);
            AssertEx.EqualTolerance(1, quantity29.TonsOfRefrigeration, TonsOfRefrigerationTolerance);
            Assert.Equal(PowerUnit.TonOfRefrigeration, quantity29.Unit);

            var quantity30 = Power.From(1, PowerUnit.Watt);
            AssertEx.EqualTolerance(1, quantity30.Watts, WattsTolerance);
            Assert.Equal(PowerUnit.Watt, quantity30.Unit);

        }

        [Fact]
        public void FromWatts_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Power.FromWatts(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Power.FromWatts(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromWatts_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Power.FromWatts(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, watt.As(PowerUnit.BoilerHorsepower), BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.BritishThermalUnitPerHour), BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(CaloriesPerHourInOneWatt, watt.As(PowerUnit.CaloriePerHour), CaloriesPerHourTolerance);
            AssertEx.EqualTolerance(DecawattsInOneWatt, watt.As(PowerUnit.Decawatt), DecawattsTolerance);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, watt.As(PowerUnit.Deciwatt), DeciwattsTolerance);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, watt.As(PowerUnit.ElectricalHorsepower), ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, watt.As(PowerUnit.Femtowatt), FemtowattsTolerance);
            AssertEx.EqualTolerance(GigacaloriesPerHourInOneWatt, watt.As(PowerUnit.GigacaloriePerHour), GigacaloriesPerHourTolerance);
            AssertEx.EqualTolerance(GigajoulesPerHourInOneWatt, watt.As(PowerUnit.GigajoulePerHour), GigajoulesPerHourTolerance);
            AssertEx.EqualTolerance(GigawattsInOneWatt, watt.As(PowerUnit.Gigawatt), GigawattsTolerance);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, watt.As(PowerUnit.HydraulicHorsepower), HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(JoulesPerHourInOneWatt, watt.As(PowerUnit.JoulePerHour), JoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.KilobritishThermalUnitPerHour), KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(KilocaloriesPerHourInOneWatt, watt.As(PowerUnit.KilocaloriePerHour), KilocaloriesPerHourTolerance);
            AssertEx.EqualTolerance(KilojoulesPerHourInOneWatt, watt.As(PowerUnit.KilojoulePerHour), KilojoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilowattsInOneWatt, watt.As(PowerUnit.Kilowatt), KilowattsTolerance);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, watt.As(PowerUnit.MechanicalHorsepower), MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.MegabritishThermalUnitPerHour), MegabritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(MegacaloriesPerHourInOneWatt, watt.As(PowerUnit.MegacaloriePerHour), MegacaloriesPerHourTolerance);
            AssertEx.EqualTolerance(MegajoulesPerHourInOneWatt, watt.As(PowerUnit.MegajoulePerHour), MegajoulesPerHourTolerance);
            AssertEx.EqualTolerance(MegawattsInOneWatt, watt.As(PowerUnit.Megawatt), MegawattsTolerance);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, watt.As(PowerUnit.MetricHorsepower), MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, watt.As(PowerUnit.Microwatt), MicrowattsTolerance);
            AssertEx.EqualTolerance(MillijoulesPerHourInOneWatt, watt.As(PowerUnit.MillijoulePerHour), MillijoulesPerHourTolerance);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, watt.As(PowerUnit.Milliwatt), MilliwattsTolerance);
            AssertEx.EqualTolerance(NanowattsInOneWatt, watt.As(PowerUnit.Nanowatt), NanowattsTolerance);
            AssertEx.EqualTolerance(PetawattsInOneWatt, watt.As(PowerUnit.Petawatt), PetawattsTolerance);
            AssertEx.EqualTolerance(PicowattsInOneWatt, watt.As(PowerUnit.Picowatt), PicowattsTolerance);
            AssertEx.EqualTolerance(TerawattsInOneWatt, watt.As(PowerUnit.Terawatt), TerawattsTolerance);
            AssertEx.EqualTolerance(TonsOfRefrigerationInOneWatt, watt.As(PowerUnit.TonOfRefrigeration), TonsOfRefrigerationTolerance);
            AssertEx.EqualTolerance(WattsInOneWatt, watt.As(PowerUnit.Watt), WattsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Power.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Power(value: 1, unit: Power.BaseUnit);
            var expectedValue = quantity.As(Power.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Power(value: 1, unit: Power.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Power(value: 1, unit: Power.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Power(value: 1, unit: Power.BaseUnit);
            var expectedUnit = Power.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Power quantityToConvert = quantity;

                Power convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<PowerUnit> quantityToConvert = quantity;

                IQuantity<PowerUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() => 
            {
                var quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<PowerUnit> quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<PowerUnit> quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Power.Parse("1 hp(S)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.BoilerHorsepower, BoilerHorsepowerTolerance);
                Assert.Equal(PowerUnit.BoilerHorsepower, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 Btu/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.BritishThermalUnitPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 Btu/hr", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.BritishThermalUnitPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 cal/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CaloriesPerHour, CaloriesPerHourTolerance);
                Assert.Equal(PowerUnit.CaloriePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 daW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Decawatts, DecawattsTolerance);
                Assert.Equal(PowerUnit.Decawatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 dW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Deciwatts, DeciwattsTolerance);
                Assert.Equal(PowerUnit.Deciwatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 hp(E)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ElectricalHorsepower, ElectricalHorsepowerTolerance);
                Assert.Equal(PowerUnit.ElectricalHorsepower, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 fW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Femtowatts, FemtowattsTolerance);
                Assert.Equal(PowerUnit.Femtowatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 Gcal/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigacaloriesPerHour, GigacaloriesPerHourTolerance);
                Assert.Equal(PowerUnit.GigacaloriePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 GJ/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigajoulesPerHour, GigajoulesPerHourTolerance);
                Assert.Equal(PowerUnit.GigajoulePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 GW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Gigawatts, GigawattsTolerance);
                Assert.Equal(PowerUnit.Gigawatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 hp(H)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.HydraulicHorsepower, HydraulicHorsepowerTolerance);
                Assert.Equal(PowerUnit.HydraulicHorsepower, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 J/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.JoulesPerHour, JoulesPerHourTolerance);
                Assert.Equal(PowerUnit.JoulePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 kBtu/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.KilobritishThermalUnitPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 kBtu/hr", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.KilobritishThermalUnitPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 kcal/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilocaloriesPerHour, KilocaloriesPerHourTolerance);
                Assert.Equal(PowerUnit.KilocaloriePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 kJ/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilojoulesPerHour, KilojoulesPerHourTolerance);
                Assert.Equal(PowerUnit.KilojoulePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 kW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilowatts, KilowattsTolerance);
                Assert.Equal(PowerUnit.Kilowatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 hp(I)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MechanicalHorsepower, MechanicalHorsepowerTolerance);
                Assert.Equal(PowerUnit.MechanicalHorsepower, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 MBtu/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegabritishThermalUnitsPerHour, MegabritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.MegabritishThermalUnitPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 MBtu/hr", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegabritishThermalUnitsPerHour, MegabritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.MegabritishThermalUnitPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 Mcal/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegacaloriesPerHour, MegacaloriesPerHourTolerance);
                Assert.Equal(PowerUnit.MegacaloriePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 MJ/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegajoulesPerHour, MegajoulesPerHourTolerance);
                Assert.Equal(PowerUnit.MegajoulePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 MW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megawatts, MegawattsTolerance);
                Assert.Equal(PowerUnit.Megawatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 hp(M)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MetricHorsepower, MetricHorsepowerTolerance);
                Assert.Equal(PowerUnit.MetricHorsepower, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 µW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Microwatts, MicrowattsTolerance);
                Assert.Equal(PowerUnit.Microwatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 mJ/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillijoulesPerHour, MillijoulesPerHourTolerance);
                Assert.Equal(PowerUnit.MillijoulePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 mW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Milliwatts, MilliwattsTolerance);
                Assert.Equal(PowerUnit.Milliwatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 nW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nanowatts, NanowattsTolerance);
                Assert.Equal(PowerUnit.Nanowatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 PW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Petawatts, PetawattsTolerance);
                Assert.Equal(PowerUnit.Petawatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 pW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Picowatts, PicowattsTolerance);
                Assert.Equal(PowerUnit.Picowatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 TW", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Terawatts, TerawattsTolerance);
                Assert.Equal(PowerUnit.Terawatt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 TR", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonsOfRefrigeration, TonsOfRefrigerationTolerance);
                Assert.Equal(PowerUnit.TonOfRefrigeration, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Power.Parse("1 W", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Watts, WattsTolerance);
                Assert.Equal(PowerUnit.Watt, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Power.TryParse("1 hp(S)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BoilerHorsepower, BoilerHorsepowerTolerance);
                Assert.Equal(PowerUnit.BoilerHorsepower, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 Btu/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.BritishThermalUnitPerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 Btu/hr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.BritishThermalUnitPerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 cal/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CaloriesPerHour, CaloriesPerHourTolerance);
                Assert.Equal(PowerUnit.CaloriePerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 daW", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Decawatts, DecawattsTolerance);
                Assert.Equal(PowerUnit.Decawatt, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 dW", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Deciwatts, DeciwattsTolerance);
                Assert.Equal(PowerUnit.Deciwatt, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 hp(E)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ElectricalHorsepower, ElectricalHorsepowerTolerance);
                Assert.Equal(PowerUnit.ElectricalHorsepower, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 fW", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Femtowatts, FemtowattsTolerance);
                Assert.Equal(PowerUnit.Femtowatt, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 Gcal/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigacaloriesPerHour, GigacaloriesPerHourTolerance);
                Assert.Equal(PowerUnit.GigacaloriePerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 GJ/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigajoulesPerHour, GigajoulesPerHourTolerance);
                Assert.Equal(PowerUnit.GigajoulePerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 GW", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Gigawatts, GigawattsTolerance);
                Assert.Equal(PowerUnit.Gigawatt, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 hp(H)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.HydraulicHorsepower, HydraulicHorsepowerTolerance);
                Assert.Equal(PowerUnit.HydraulicHorsepower, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 J/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.JoulesPerHour, JoulesPerHourTolerance);
                Assert.Equal(PowerUnit.JoulePerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 kBtu/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.KilobritishThermalUnitPerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 kBtu/hr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.KilobritishThermalUnitPerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 kcal/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilocaloriesPerHour, KilocaloriesPerHourTolerance);
                Assert.Equal(PowerUnit.KilocaloriePerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 kJ/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilojoulesPerHour, KilojoulesPerHourTolerance);
                Assert.Equal(PowerUnit.KilojoulePerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 kW", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilowatts, KilowattsTolerance);
                Assert.Equal(PowerUnit.Kilowatt, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 hp(I)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MechanicalHorsepower, MechanicalHorsepowerTolerance);
                Assert.Equal(PowerUnit.MechanicalHorsepower, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 MBtu/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegabritishThermalUnitsPerHour, MegabritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.MegabritishThermalUnitPerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 MBtu/hr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegabritishThermalUnitsPerHour, MegabritishThermalUnitsPerHourTolerance);
                Assert.Equal(PowerUnit.MegabritishThermalUnitPerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 Mcal/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegacaloriesPerHour, MegacaloriesPerHourTolerance);
                Assert.Equal(PowerUnit.MegacaloriePerHour, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 hp(M)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MetricHorsepower, MetricHorsepowerTolerance);
                Assert.Equal(PowerUnit.MetricHorsepower, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 µW", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microwatts, MicrowattsTolerance);
                Assert.Equal(PowerUnit.Microwatt, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 nW", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanowatts, NanowattsTolerance);
                Assert.Equal(PowerUnit.Nanowatt, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 TW", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Terawatts, TerawattsTolerance);
                Assert.Equal(PowerUnit.Terawatt, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 TR", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonsOfRefrigeration, TonsOfRefrigerationTolerance);
                Assert.Equal(PowerUnit.TonOfRefrigeration, parsed.Unit);
            }

            {
                Assert.True(Power.TryParse("1 W", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Watts, WattsTolerance);
                Assert.Equal(PowerUnit.Watt, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("cal/h", PowerUnit.CaloriePerHour)]
        [InlineData("daW", PowerUnit.Decawatt)]
        [InlineData("dW", PowerUnit.Deciwatt)]
        [InlineData("hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("fW", PowerUnit.Femtowatt)]
        [InlineData("Gcal/h", PowerUnit.GigacaloriePerHour)]
        [InlineData("GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("GW", PowerUnit.Gigawatt)]
        [InlineData("hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("J/h", PowerUnit.JoulePerHour)]
        [InlineData("kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kcal/h", PowerUnit.KilocaloriePerHour)]
        [InlineData("kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("kW", PowerUnit.Kilowatt)]
        [InlineData("hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("Mcal/h", PowerUnit.MegacaloriePerHour)]
        [InlineData("MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("MW", PowerUnit.Megawatt)]
        [InlineData("hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("µW", PowerUnit.Microwatt)]
        [InlineData("mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("mW", PowerUnit.Milliwatt)]
        [InlineData("nW", PowerUnit.Nanowatt)]
        [InlineData("PW", PowerUnit.Petawatt)]
        [InlineData("pW", PowerUnit.Picowatt)]
        [InlineData("TW", PowerUnit.Terawatt)]
        [InlineData("TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("W", PowerUnit.Watt)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PowerUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            PowerUnit parsedUnit = Power.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("cal/h", PowerUnit.CaloriePerHour)]
        [InlineData("daW", PowerUnit.Decawatt)]
        [InlineData("dW", PowerUnit.Deciwatt)]
        [InlineData("hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("fW", PowerUnit.Femtowatt)]
        [InlineData("Gcal/h", PowerUnit.GigacaloriePerHour)]
        [InlineData("GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("GW", PowerUnit.Gigawatt)]
        [InlineData("hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("J/h", PowerUnit.JoulePerHour)]
        [InlineData("kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kcal/h", PowerUnit.KilocaloriePerHour)]
        [InlineData("kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("kW", PowerUnit.Kilowatt)]
        [InlineData("hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("Mcal/h", PowerUnit.MegacaloriePerHour)]
        [InlineData("MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("MW", PowerUnit.Megawatt)]
        [InlineData("hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("µW", PowerUnit.Microwatt)]
        [InlineData("mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("mW", PowerUnit.Milliwatt)]
        [InlineData("nW", PowerUnit.Nanowatt)]
        [InlineData("PW", PowerUnit.Petawatt)]
        [InlineData("pW", PowerUnit.Picowatt)]
        [InlineData("TW", PowerUnit.Terawatt)]
        [InlineData("TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("W", PowerUnit.Watt)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PowerUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            PowerUnit parsedUnit = Power.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("en-US", "Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "cal/h", PowerUnit.CaloriePerHour)]
        [InlineData("en-US", "daW", PowerUnit.Decawatt)]
        [InlineData("en-US", "dW", PowerUnit.Deciwatt)]
        [InlineData("en-US", "hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("en-US", "fW", PowerUnit.Femtowatt)]
        [InlineData("en-US", "Gcal/h", PowerUnit.GigacaloriePerHour)]
        [InlineData("en-US", "GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("en-US", "GW", PowerUnit.Gigawatt)]
        [InlineData("en-US", "hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("en-US", "J/h", PowerUnit.JoulePerHour)]
        [InlineData("en-US", "kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kcal/h", PowerUnit.KilocaloriePerHour)]
        [InlineData("en-US", "kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("en-US", "kW", PowerUnit.Kilowatt)]
        [InlineData("en-US", "hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("en-US", "MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "Mcal/h", PowerUnit.MegacaloriePerHour)]
        [InlineData("en-US", "MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("en-US", "MW", PowerUnit.Megawatt)]
        [InlineData("en-US", "hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("en-US", "µW", PowerUnit.Microwatt)]
        [InlineData("en-US", "mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("en-US", "mW", PowerUnit.Milliwatt)]
        [InlineData("en-US", "nW", PowerUnit.Nanowatt)]
        [InlineData("en-US", "PW", PowerUnit.Petawatt)]
        [InlineData("en-US", "pW", PowerUnit.Picowatt)]
        [InlineData("en-US", "TW", PowerUnit.Terawatt)]
        [InlineData("en-US", "TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("en-US", "W", PowerUnit.Watt)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, PowerUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            PowerUnit parsedUnit = Power.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("en-US", "Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "cal/h", PowerUnit.CaloriePerHour)]
        [InlineData("en-US", "daW", PowerUnit.Decawatt)]
        [InlineData("en-US", "dW", PowerUnit.Deciwatt)]
        [InlineData("en-US", "hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("en-US", "fW", PowerUnit.Femtowatt)]
        [InlineData("en-US", "Gcal/h", PowerUnit.GigacaloriePerHour)]
        [InlineData("en-US", "GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("en-US", "GW", PowerUnit.Gigawatt)]
        [InlineData("en-US", "hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("en-US", "J/h", PowerUnit.JoulePerHour)]
        [InlineData("en-US", "kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kcal/h", PowerUnit.KilocaloriePerHour)]
        [InlineData("en-US", "kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("en-US", "kW", PowerUnit.Kilowatt)]
        [InlineData("en-US", "hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("en-US", "MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "Mcal/h", PowerUnit.MegacaloriePerHour)]
        [InlineData("en-US", "MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("en-US", "MW", PowerUnit.Megawatt)]
        [InlineData("en-US", "hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("en-US", "µW", PowerUnit.Microwatt)]
        [InlineData("en-US", "mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("en-US", "mW", PowerUnit.Milliwatt)]
        [InlineData("en-US", "nW", PowerUnit.Nanowatt)]
        [InlineData("en-US", "PW", PowerUnit.Petawatt)]
        [InlineData("en-US", "pW", PowerUnit.Picowatt)]
        [InlineData("en-US", "TW", PowerUnit.Terawatt)]
        [InlineData("en-US", "TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("en-US", "W", PowerUnit.Watt)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, PowerUnit expectedUnit)
        {
            PowerUnit parsedUnit = Power.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("cal/h", PowerUnit.CaloriePerHour)]
        [InlineData("daW", PowerUnit.Decawatt)]
        [InlineData("dW", PowerUnit.Deciwatt)]
        [InlineData("hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("fW", PowerUnit.Femtowatt)]
        [InlineData("Gcal/h", PowerUnit.GigacaloriePerHour)]
        [InlineData("GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("GW", PowerUnit.Gigawatt)]
        [InlineData("hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("J/h", PowerUnit.JoulePerHour)]
        [InlineData("kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kcal/h", PowerUnit.KilocaloriePerHour)]
        [InlineData("kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("kW", PowerUnit.Kilowatt)]
        [InlineData("hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("Mcal/h", PowerUnit.MegacaloriePerHour)]
        [InlineData("MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("MW", PowerUnit.Megawatt)]
        [InlineData("hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("µW", PowerUnit.Microwatt)]
        [InlineData("mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("mW", PowerUnit.Milliwatt)]
        [InlineData("nW", PowerUnit.Nanowatt)]
        [InlineData("PW", PowerUnit.Petawatt)]
        [InlineData("pW", PowerUnit.Picowatt)]
        [InlineData("TW", PowerUnit.Terawatt)]
        [InlineData("TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("W", PowerUnit.Watt)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PowerUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Power.TryParseUnit(abbreviation, out PowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("cal/h", PowerUnit.CaloriePerHour)]
        [InlineData("daW", PowerUnit.Decawatt)]
        [InlineData("dW", PowerUnit.Deciwatt)]
        [InlineData("hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("fW", PowerUnit.Femtowatt)]
        [InlineData("Gcal/h", PowerUnit.GigacaloriePerHour)]
        [InlineData("GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("GW", PowerUnit.Gigawatt)]
        [InlineData("hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("J/h", PowerUnit.JoulePerHour)]
        [InlineData("kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kcal/h", PowerUnit.KilocaloriePerHour)]
        [InlineData("kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("kW", PowerUnit.Kilowatt)]
        [InlineData("hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("Mcal/h", PowerUnit.MegacaloriePerHour)]
        [InlineData("MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("MW", PowerUnit.Megawatt)]
        [InlineData("hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("µW", PowerUnit.Microwatt)]
        [InlineData("mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("mW", PowerUnit.Milliwatt)]
        [InlineData("nW", PowerUnit.Nanowatt)]
        [InlineData("PW", PowerUnit.Petawatt)]
        [InlineData("pW", PowerUnit.Picowatt)]
        [InlineData("TW", PowerUnit.Terawatt)]
        [InlineData("TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("W", PowerUnit.Watt)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PowerUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Power.TryParseUnit(abbreviation, out PowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("en-US", "Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "cal/h", PowerUnit.CaloriePerHour)]
        [InlineData("en-US", "daW", PowerUnit.Decawatt)]
        [InlineData("en-US", "dW", PowerUnit.Deciwatt)]
        [InlineData("en-US", "hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("en-US", "fW", PowerUnit.Femtowatt)]
        [InlineData("en-US", "Gcal/h", PowerUnit.GigacaloriePerHour)]
        [InlineData("en-US", "GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("en-US", "GW", PowerUnit.Gigawatt)]
        [InlineData("en-US", "hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("en-US", "J/h", PowerUnit.JoulePerHour)]
        [InlineData("en-US", "kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kcal/h", PowerUnit.KilocaloriePerHour)]
        [InlineData("en-US", "kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("en-US", "kW", PowerUnit.Kilowatt)]
        [InlineData("en-US", "hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("en-US", "MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "Mcal/h", PowerUnit.MegacaloriePerHour)]
        [InlineData("en-US", "MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("en-US", "MW", PowerUnit.Megawatt)]
        [InlineData("en-US", "hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("en-US", "µW", PowerUnit.Microwatt)]
        [InlineData("en-US", "mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("en-US", "mW", PowerUnit.Milliwatt)]
        [InlineData("en-US", "nW", PowerUnit.Nanowatt)]
        [InlineData("en-US", "PW", PowerUnit.Petawatt)]
        [InlineData("en-US", "pW", PowerUnit.Picowatt)]
        [InlineData("en-US", "TW", PowerUnit.Terawatt)]
        [InlineData("en-US", "TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("en-US", "W", PowerUnit.Watt)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, PowerUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Power.TryParseUnit(abbreviation, out PowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("en-US", "Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "cal/h", PowerUnit.CaloriePerHour)]
        [InlineData("en-US", "daW", PowerUnit.Decawatt)]
        [InlineData("en-US", "dW", PowerUnit.Deciwatt)]
        [InlineData("en-US", "hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("en-US", "fW", PowerUnit.Femtowatt)]
        [InlineData("en-US", "Gcal/h", PowerUnit.GigacaloriePerHour)]
        [InlineData("en-US", "GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("en-US", "GW", PowerUnit.Gigawatt)]
        [InlineData("en-US", "hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("en-US", "J/h", PowerUnit.JoulePerHour)]
        [InlineData("en-US", "kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kcal/h", PowerUnit.KilocaloriePerHour)]
        [InlineData("en-US", "kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("en-US", "kW", PowerUnit.Kilowatt)]
        [InlineData("en-US", "hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("en-US", "MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "Mcal/h", PowerUnit.MegacaloriePerHour)]
        [InlineData("en-US", "MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("en-US", "MW", PowerUnit.Megawatt)]
        [InlineData("en-US", "hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("en-US", "µW", PowerUnit.Microwatt)]
        [InlineData("en-US", "mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("en-US", "mW", PowerUnit.Milliwatt)]
        [InlineData("en-US", "nW", PowerUnit.Nanowatt)]
        [InlineData("en-US", "PW", PowerUnit.Petawatt)]
        [InlineData("en-US", "pW", PowerUnit.Picowatt)]
        [InlineData("en-US", "TW", PowerUnit.Terawatt)]
        [InlineData("en-US", "TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("en-US", "W", PowerUnit.Watt)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, PowerUnit expectedUnit)
        {
            Assert.True(Power.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out PowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(PowerUnit unit)
        {
            var inBaseUnits = Power.From(1.0, Power.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(PowerUnit unit)
        {
            var quantity = Power.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(PowerUnit unit)
        {
            Assert.All(Power.Units.Where(u => u != Power.BaseUnit), fromUnit =>
            {
                var quantity = Power.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(PowerUnit unit)
        {
            var quantity = default(Power);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(PowerUnit unit)
        {
            var quantity = Power.From(3, Power.BaseUnit);
            Power expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<PowerUnit> quantityToConvert = quantity;
                IQuantity<PowerUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Power watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(1, Power.FromBoilerHorsepower(watt.BoilerHorsepower).Watts, BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromBritishThermalUnitsPerHour(watt.BritishThermalUnitsPerHour).Watts, BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromCaloriesPerHour(watt.CaloriesPerHour).Watts, CaloriesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromDecawatts(watt.Decawatts).Watts, DecawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromDeciwatts(watt.Deciwatts).Watts, DeciwattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromElectricalHorsepower(watt.ElectricalHorsepower).Watts, ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromFemtowatts(watt.Femtowatts).Watts, FemtowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromGigacaloriesPerHour(watt.GigacaloriesPerHour).Watts, GigacaloriesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromGigajoulesPerHour(watt.GigajoulesPerHour).Watts, GigajoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromGigawatts(watt.Gigawatts).Watts, GigawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromHydraulicHorsepower(watt.HydraulicHorsepower).Watts, HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromJoulesPerHour(watt.JoulesPerHour).Watts, JoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromKilobritishThermalUnitsPerHour(watt.KilobritishThermalUnitsPerHour).Watts, KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromKilocaloriesPerHour(watt.KilocaloriesPerHour).Watts, KilocaloriesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromKilojoulesPerHour(watt.KilojoulesPerHour).Watts, KilojoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromKilowatts(watt.Kilowatts).Watts, KilowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromMechanicalHorsepower(watt.MechanicalHorsepower).Watts, MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromMegabritishThermalUnitsPerHour(watt.MegabritishThermalUnitsPerHour).Watts, MegabritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromMegacaloriesPerHour(watt.MegacaloriesPerHour).Watts, MegacaloriesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromMegajoulesPerHour(watt.MegajoulesPerHour).Watts, MegajoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromMegawatts(watt.Megawatts).Watts, MegawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromMetricHorsepower(watt.MetricHorsepower).Watts, MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(1, Power.FromMicrowatts(watt.Microwatts).Watts, MicrowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromMillijoulesPerHour(watt.MillijoulesPerHour).Watts, MillijoulesPerHourTolerance);
            AssertEx.EqualTolerance(1, Power.FromMilliwatts(watt.Milliwatts).Watts, MilliwattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromNanowatts(watt.Nanowatts).Watts, NanowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromPetawatts(watt.Petawatts).Watts, PetawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromPicowatts(watt.Picowatts).Watts, PicowattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromTerawatts(watt.Terawatts).Watts, TerawattsTolerance);
            AssertEx.EqualTolerance(1, Power.FromTonsOfRefrigeration(watt.TonsOfRefrigeration).Watts, TonsOfRefrigerationTolerance);
            AssertEx.EqualTolerance(1, Power.FromWatts(watt.Watts).Watts, WattsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Power v = Power.FromWatts(1);
            AssertEx.EqualTolerance(-1, -v.Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, (Power.FromWatts(3)-v).Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Watts, WattsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Watts, WattsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, (Power.FromWatts(10)/5).Watts, WattsTolerance);
            AssertEx.EqualTolerance(2, Power.FromWatts(10)/Power.FromWatts(5), WattsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Power oneWatt = Power.FromWatts(1);
            Power twoWatts = Power.FromWatts(2);

            Assert.True(oneWatt < twoWatts);
            Assert.True(oneWatt <= twoWatts);
            Assert.True(twoWatts > oneWatt);
            Assert.True(twoWatts >= oneWatt);

            Assert.False(oneWatt > twoWatts);
            Assert.False(oneWatt >= twoWatts);
            Assert.False(twoWatts < oneWatt);
            Assert.False(twoWatts <= oneWatt);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Power watt = Power.FromWatts(1);
            Assert.Equal(0, watt.CompareTo(watt));
            Assert.True(watt.CompareTo(Power.Zero) > 0);
            Assert.True(Power.Zero.CompareTo(watt) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Power watt = Power.FromWatts(1);
            Assert.Throws<ArgumentException>(() => watt.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Power watt = Power.FromWatts(1);
            Assert.Throws<ArgumentNullException>(() => watt.CompareTo(null));
        }

        [Theory]
        [InlineData(1, PowerUnit.Watt, 1, PowerUnit.Watt, true)]  // Same value and unit.
        [InlineData(1, PowerUnit.Watt, 2, PowerUnit.Watt, false)] // Different value.
        [InlineData(2, PowerUnit.Watt, 1, PowerUnit.BoilerHorsepower, false)] // Different value and unit.
        [InlineData(1, PowerUnit.Watt, 1, PowerUnit.BoilerHorsepower, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, PowerUnit unitA, double valueB, PowerUnit unitB, bool expectEqual)
        {
            var a = new Power(valueA, unitA);
            var b = new Power(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Power.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Power.FromWatts(1);
            Assert.True(v.Equals(Power.FromWatts(1), WattsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Power.Zero, WattsTolerance, ComparisonType.Relative));
            Assert.True(Power.FromWatts(100).Equals(Power.FromWatts(120), 0.3, ComparisonType.Relative));
            Assert.False(Power.FromWatts(100).Equals(Power.FromWatts(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Power.FromWatts(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Power.FromWatts(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Power watt = Power.FromWatts(1);
            Assert.False(watt.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Power watt = Power.FromWatts(1);
            Assert.False(watt.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(PowerUnit)).Cast<PowerUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Power.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 hp(S)", new Power(1, PowerUnit.BoilerHorsepower).ToString());
            Assert.Equal("1 Btu/h", new Power(1, PowerUnit.BritishThermalUnitPerHour).ToString());
            Assert.Equal("1 cal/h", new Power(1, PowerUnit.CaloriePerHour).ToString());
            Assert.Equal("1 daW", new Power(1, PowerUnit.Decawatt).ToString());
            Assert.Equal("1 dW", new Power(1, PowerUnit.Deciwatt).ToString());
            Assert.Equal("1 hp(E)", new Power(1, PowerUnit.ElectricalHorsepower).ToString());
            Assert.Equal("1 fW", new Power(1, PowerUnit.Femtowatt).ToString());
            Assert.Equal("1 Gcal/h", new Power(1, PowerUnit.GigacaloriePerHour).ToString());
            Assert.Equal("1 GJ/h", new Power(1, PowerUnit.GigajoulePerHour).ToString());
            Assert.Equal("1 GW", new Power(1, PowerUnit.Gigawatt).ToString());
            Assert.Equal("1 hp(H)", new Power(1, PowerUnit.HydraulicHorsepower).ToString());
            Assert.Equal("1 J/h", new Power(1, PowerUnit.JoulePerHour).ToString());
            Assert.Equal("1 kBtu/h", new Power(1, PowerUnit.KilobritishThermalUnitPerHour).ToString());
            Assert.Equal("1 kcal/h", new Power(1, PowerUnit.KilocaloriePerHour).ToString());
            Assert.Equal("1 kJ/h", new Power(1, PowerUnit.KilojoulePerHour).ToString());
            Assert.Equal("1 kW", new Power(1, PowerUnit.Kilowatt).ToString());
            Assert.Equal("1 hp(I)", new Power(1, PowerUnit.MechanicalHorsepower).ToString());
            Assert.Equal("1 MBtu/h", new Power(1, PowerUnit.MegabritishThermalUnitPerHour).ToString());
            Assert.Equal("1 Mcal/h", new Power(1, PowerUnit.MegacaloriePerHour).ToString());
            Assert.Equal("1 MJ/h", new Power(1, PowerUnit.MegajoulePerHour).ToString());
            Assert.Equal("1 MW", new Power(1, PowerUnit.Megawatt).ToString());
            Assert.Equal("1 hp(M)", new Power(1, PowerUnit.MetricHorsepower).ToString());
            Assert.Equal("1 µW", new Power(1, PowerUnit.Microwatt).ToString());
            Assert.Equal("1 mJ/h", new Power(1, PowerUnit.MillijoulePerHour).ToString());
            Assert.Equal("1 mW", new Power(1, PowerUnit.Milliwatt).ToString());
            Assert.Equal("1 nW", new Power(1, PowerUnit.Nanowatt).ToString());
            Assert.Equal("1 PW", new Power(1, PowerUnit.Petawatt).ToString());
            Assert.Equal("1 pW", new Power(1, PowerUnit.Picowatt).ToString());
            Assert.Equal("1 TW", new Power(1, PowerUnit.Terawatt).ToString());
            Assert.Equal("1 TR", new Power(1, PowerUnit.TonOfRefrigeration).ToString());
            Assert.Equal("1 W", new Power(1, PowerUnit.Watt).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 hp(S)", new Power(1, PowerUnit.BoilerHorsepower).ToString(swedishCulture));
            Assert.Equal("1 Btu/h", new Power(1, PowerUnit.BritishThermalUnitPerHour).ToString(swedishCulture));
            Assert.Equal("1 cal/h", new Power(1, PowerUnit.CaloriePerHour).ToString(swedishCulture));
            Assert.Equal("1 daW", new Power(1, PowerUnit.Decawatt).ToString(swedishCulture));
            Assert.Equal("1 dW", new Power(1, PowerUnit.Deciwatt).ToString(swedishCulture));
            Assert.Equal("1 hp(E)", new Power(1, PowerUnit.ElectricalHorsepower).ToString(swedishCulture));
            Assert.Equal("1 fW", new Power(1, PowerUnit.Femtowatt).ToString(swedishCulture));
            Assert.Equal("1 Gcal/h", new Power(1, PowerUnit.GigacaloriePerHour).ToString(swedishCulture));
            Assert.Equal("1 GJ/h", new Power(1, PowerUnit.GigajoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 GW", new Power(1, PowerUnit.Gigawatt).ToString(swedishCulture));
            Assert.Equal("1 hp(H)", new Power(1, PowerUnit.HydraulicHorsepower).ToString(swedishCulture));
            Assert.Equal("1 J/h", new Power(1, PowerUnit.JoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 kBtu/h", new Power(1, PowerUnit.KilobritishThermalUnitPerHour).ToString(swedishCulture));
            Assert.Equal("1 kcal/h", new Power(1, PowerUnit.KilocaloriePerHour).ToString(swedishCulture));
            Assert.Equal("1 kJ/h", new Power(1, PowerUnit.KilojoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 kW", new Power(1, PowerUnit.Kilowatt).ToString(swedishCulture));
            Assert.Equal("1 hp(I)", new Power(1, PowerUnit.MechanicalHorsepower).ToString(swedishCulture));
            Assert.Equal("1 MBtu/h", new Power(1, PowerUnit.MegabritishThermalUnitPerHour).ToString(swedishCulture));
            Assert.Equal("1 Mcal/h", new Power(1, PowerUnit.MegacaloriePerHour).ToString(swedishCulture));
            Assert.Equal("1 MJ/h", new Power(1, PowerUnit.MegajoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 MW", new Power(1, PowerUnit.Megawatt).ToString(swedishCulture));
            Assert.Equal("1 hp(M)", new Power(1, PowerUnit.MetricHorsepower).ToString(swedishCulture));
            Assert.Equal("1 µW", new Power(1, PowerUnit.Microwatt).ToString(swedishCulture));
            Assert.Equal("1 mJ/h", new Power(1, PowerUnit.MillijoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 mW", new Power(1, PowerUnit.Milliwatt).ToString(swedishCulture));
            Assert.Equal("1 nW", new Power(1, PowerUnit.Nanowatt).ToString(swedishCulture));
            Assert.Equal("1 PW", new Power(1, PowerUnit.Petawatt).ToString(swedishCulture));
            Assert.Equal("1 pW", new Power(1, PowerUnit.Picowatt).ToString(swedishCulture));
            Assert.Equal("1 TW", new Power(1, PowerUnit.Terawatt).ToString(swedishCulture));
            Assert.Equal("1 TR", new Power(1, PowerUnit.TonOfRefrigeration).ToString(swedishCulture));
            Assert.Equal("1 W", new Power(1, PowerUnit.Watt).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 W", new Power(0.123456, PowerUnit.Watt).ToString("s1"));
            Assert.Equal("0.12 W", new Power(0.123456, PowerUnit.Watt).ToString("s2"));
            Assert.Equal("0.123 W", new Power(0.123456, PowerUnit.Watt).ToString("s3"));
            Assert.Equal("0.1235 W", new Power(0.123456, PowerUnit.Watt).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 W", new Power(0.123456, PowerUnit.Watt).ToString("s1", culture));
            Assert.Equal("0.12 W", new Power(0.123456, PowerUnit.Watt).ToString("s2", culture));
            Assert.Equal("0.123 W", new Power(0.123456, PowerUnit.Watt).ToString("s3", culture));
            Assert.Equal("0.1235 W", new Power(0.123456, PowerUnit.Watt).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Power.FromWatts(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(Power)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(PowerUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(Power.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(Power.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void Convert_GetTypeCode_Returns_Object()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(TypeCode.Object, Convert.GetTypeCode(quantity));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(new {Power.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Power.FromWatts(value);
            Assert.Equal(Power.FromWatts(-value), -quantity);
        }
    }
}
