//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Speed.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class SpeedTestsBase : QuantityTestsBase
    {
        protected abstract double CentimetersPerHourInOneMeterPerSecond { get; }
        protected abstract double CentimetersPerMinuteInOneMeterPerSecond { get; }
        protected abstract double CentimetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double DecimetersPerMinuteInOneMeterPerSecond { get; }
        protected abstract double DecimetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double FeetPerHourInOneMeterPerSecond { get; }
        protected abstract double FeetPerMinuteInOneMeterPerSecond { get; }
        protected abstract double FeetPerSecondInOneMeterPerSecond { get; }
        protected abstract double InchesPerHourInOneMeterPerSecond { get; }
        protected abstract double InchesPerMinuteInOneMeterPerSecond { get; }
        protected abstract double InchesPerSecondInOneMeterPerSecond { get; }
        protected abstract double KilometersPerHourInOneMeterPerSecond { get; }
        protected abstract double KilometersPerMinuteInOneMeterPerSecond { get; }
        protected abstract double KilometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double KnotsInOneMeterPerSecond { get; }
        protected abstract double MachInOneMeterPerSecond { get; }
        protected abstract double MetersPerHourInOneMeterPerSecond { get; }
        protected abstract double MetersPerMinuteInOneMeterPerSecond { get; }
        protected abstract double MetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double MicrometersPerMinuteInOneMeterPerSecond { get; }
        protected abstract double MicrometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double MilesPerHourInOneMeterPerSecond { get; }
        protected abstract double MillimetersPerHourInOneMeterPerSecond { get; }
        protected abstract double MillimetersPerMinuteInOneMeterPerSecond { get; }
        protected abstract double MillimetersPerSecondInOneMeterPerSecond { get; }
        protected abstract double NanometersPerMinuteInOneMeterPerSecond { get; }
        protected abstract double NanometersPerSecondInOneMeterPerSecond { get; }
        protected abstract double UsSurveyFeetPerHourInOneMeterPerSecond { get; }
        protected abstract double UsSurveyFeetPerMinuteInOneMeterPerSecond { get; }
        protected abstract double UsSurveyFeetPerSecondInOneMeterPerSecond { get; }
        protected abstract double YardsPerHourInOneMeterPerSecond { get; }
        protected abstract double YardsPerMinuteInOneMeterPerSecond { get; }
        protected abstract double YardsPerSecondInOneMeterPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double CentimetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CentimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double FeetPerHourTolerance { get { return 1e-5; } }
        protected virtual double FeetPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double FeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double InchesPerHourTolerance { get { return 1e-5; } }
        protected virtual double InchesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double InchesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KnotsTolerance { get { return 1e-5; } }
        protected virtual double MachTolerance { get { return 1e-5; } }
        protected virtual double MetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double MetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MilesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerSecondTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetPerHourTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double UsSurveyFeetPerSecondTolerance { get { return 1e-5; } }
        protected virtual double YardsPerHourTolerance { get { return 1e-5; } }
        protected virtual double YardsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double YardsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(SpeedUnit unit)
        {
            return unit switch
            {
                SpeedUnit.CentimeterPerHour => (CentimetersPerHourInOneMeterPerSecond, CentimetersPerHourTolerance),
                SpeedUnit.CentimeterPerMinute => (CentimetersPerMinuteInOneMeterPerSecond, CentimetersPerMinuteTolerance),
                SpeedUnit.CentimeterPerSecond => (CentimetersPerSecondInOneMeterPerSecond, CentimetersPerSecondTolerance),
                SpeedUnit.DecimeterPerMinute => (DecimetersPerMinuteInOneMeterPerSecond, DecimetersPerMinuteTolerance),
                SpeedUnit.DecimeterPerSecond => (DecimetersPerSecondInOneMeterPerSecond, DecimetersPerSecondTolerance),
                SpeedUnit.FootPerHour => (FeetPerHourInOneMeterPerSecond, FeetPerHourTolerance),
                SpeedUnit.FootPerMinute => (FeetPerMinuteInOneMeterPerSecond, FeetPerMinuteTolerance),
                SpeedUnit.FootPerSecond => (FeetPerSecondInOneMeterPerSecond, FeetPerSecondTolerance),
                SpeedUnit.InchPerHour => (InchesPerHourInOneMeterPerSecond, InchesPerHourTolerance),
                SpeedUnit.InchPerMinute => (InchesPerMinuteInOneMeterPerSecond, InchesPerMinuteTolerance),
                SpeedUnit.InchPerSecond => (InchesPerSecondInOneMeterPerSecond, InchesPerSecondTolerance),
                SpeedUnit.KilometerPerHour => (KilometersPerHourInOneMeterPerSecond, KilometersPerHourTolerance),
                SpeedUnit.KilometerPerMinute => (KilometersPerMinuteInOneMeterPerSecond, KilometersPerMinuteTolerance),
                SpeedUnit.KilometerPerSecond => (KilometersPerSecondInOneMeterPerSecond, KilometersPerSecondTolerance),
                SpeedUnit.Knot => (KnotsInOneMeterPerSecond, KnotsTolerance),
                SpeedUnit.Mach => (MachInOneMeterPerSecond, MachTolerance),
                SpeedUnit.MeterPerHour => (MetersPerHourInOneMeterPerSecond, MetersPerHourTolerance),
                SpeedUnit.MeterPerMinute => (MetersPerMinuteInOneMeterPerSecond, MetersPerMinuteTolerance),
                SpeedUnit.MeterPerSecond => (MetersPerSecondInOneMeterPerSecond, MetersPerSecondTolerance),
                SpeedUnit.MicrometerPerMinute => (MicrometersPerMinuteInOneMeterPerSecond, MicrometersPerMinuteTolerance),
                SpeedUnit.MicrometerPerSecond => (MicrometersPerSecondInOneMeterPerSecond, MicrometersPerSecondTolerance),
                SpeedUnit.MilePerHour => (MilesPerHourInOneMeterPerSecond, MilesPerHourTolerance),
                SpeedUnit.MillimeterPerHour => (MillimetersPerHourInOneMeterPerSecond, MillimetersPerHourTolerance),
                SpeedUnit.MillimeterPerMinute => (MillimetersPerMinuteInOneMeterPerSecond, MillimetersPerMinuteTolerance),
                SpeedUnit.MillimeterPerSecond => (MillimetersPerSecondInOneMeterPerSecond, MillimetersPerSecondTolerance),
                SpeedUnit.NanometerPerMinute => (NanometersPerMinuteInOneMeterPerSecond, NanometersPerMinuteTolerance),
                SpeedUnit.NanometerPerSecond => (NanometersPerSecondInOneMeterPerSecond, NanometersPerSecondTolerance),
                SpeedUnit.UsSurveyFootPerHour => (UsSurveyFeetPerHourInOneMeterPerSecond, UsSurveyFeetPerHourTolerance),
                SpeedUnit.UsSurveyFootPerMinute => (UsSurveyFeetPerMinuteInOneMeterPerSecond, UsSurveyFeetPerMinuteTolerance),
                SpeedUnit.UsSurveyFootPerSecond => (UsSurveyFeetPerSecondInOneMeterPerSecond, UsSurveyFeetPerSecondTolerance),
                SpeedUnit.YardPerHour => (YardsPerHourInOneMeterPerSecond, YardsPerHourTolerance),
                SpeedUnit.YardPerMinute => (YardsPerMinuteInOneMeterPerSecond, YardsPerMinuteTolerance),
                SpeedUnit.YardPerSecond => (YardsPerSecondInOneMeterPerSecond, YardsPerSecondTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { SpeedUnit.CentimeterPerHour },
            new object[] { SpeedUnit.CentimeterPerMinute },
            new object[] { SpeedUnit.CentimeterPerSecond },
            new object[] { SpeedUnit.DecimeterPerMinute },
            new object[] { SpeedUnit.DecimeterPerSecond },
            new object[] { SpeedUnit.FootPerHour },
            new object[] { SpeedUnit.FootPerMinute },
            new object[] { SpeedUnit.FootPerSecond },
            new object[] { SpeedUnit.InchPerHour },
            new object[] { SpeedUnit.InchPerMinute },
            new object[] { SpeedUnit.InchPerSecond },
            new object[] { SpeedUnit.KilometerPerHour },
            new object[] { SpeedUnit.KilometerPerMinute },
            new object[] { SpeedUnit.KilometerPerSecond },
            new object[] { SpeedUnit.Knot },
            new object[] { SpeedUnit.Mach },
            new object[] { SpeedUnit.MeterPerHour },
            new object[] { SpeedUnit.MeterPerMinute },
            new object[] { SpeedUnit.MeterPerSecond },
            new object[] { SpeedUnit.MicrometerPerMinute },
            new object[] { SpeedUnit.MicrometerPerSecond },
            new object[] { SpeedUnit.MilePerHour },
            new object[] { SpeedUnit.MillimeterPerHour },
            new object[] { SpeedUnit.MillimeterPerMinute },
            new object[] { SpeedUnit.MillimeterPerSecond },
            new object[] { SpeedUnit.NanometerPerMinute },
            new object[] { SpeedUnit.NanometerPerSecond },
            new object[] { SpeedUnit.UsSurveyFootPerHour },
            new object[] { SpeedUnit.UsSurveyFootPerMinute },
            new object[] { SpeedUnit.UsSurveyFootPerSecond },
            new object[] { SpeedUnit.YardPerHour },
            new object[] { SpeedUnit.YardPerMinute },
            new object[] { SpeedUnit.YardPerSecond },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Speed();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(SpeedUnit.MeterPerSecond, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Speed(double.PositiveInfinity, SpeedUnit.MeterPerSecond));
            var exception2 = Record.Exception(() => new Speed(double.NegativeInfinity, SpeedUnit.MeterPerSecond));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Speed(double.NaN, SpeedUnit.MeterPerSecond));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Speed(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Speed(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Speed(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Speed_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Speed(1, SpeedUnit.MeterPerSecond);

            QuantityInfo<SpeedUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Speed.Zero, quantityInfo.Zero);
            Assert.Equal("Speed", quantityInfo.Name);

            var units = Enum.GetValues<SpeedUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void MeterPerSecondToSpeedUnits()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(CentimetersPerHourInOneMeterPerSecond, meterpersecond.CentimetersPerHour, CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(CentimetersPerMinuteInOneMeterPerSecond, meterpersecond.CentimetersPerMinute, CentimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(CentimetersPerSecondInOneMeterPerSecond, meterpersecond.CentimetersPerSecond, CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(DecimetersPerMinuteInOneMeterPerSecond, meterpersecond.DecimetersPerMinute, DecimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondInOneMeterPerSecond, meterpersecond.DecimetersPerSecond, DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(FeetPerHourInOneMeterPerSecond, meterpersecond.FeetPerHour, FeetPerHourTolerance);
            AssertEx.EqualTolerance(FeetPerMinuteInOneMeterPerSecond, meterpersecond.FeetPerMinute, FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(FeetPerSecondInOneMeterPerSecond, meterpersecond.FeetPerSecond, FeetPerSecondTolerance);
            AssertEx.EqualTolerance(InchesPerHourInOneMeterPerSecond, meterpersecond.InchesPerHour, InchesPerHourTolerance);
            AssertEx.EqualTolerance(InchesPerMinuteInOneMeterPerSecond, meterpersecond.InchesPerMinute, InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(InchesPerSecondInOneMeterPerSecond, meterpersecond.InchesPerSecond, InchesPerSecondTolerance);
            AssertEx.EqualTolerance(KilometersPerHourInOneMeterPerSecond, meterpersecond.KilometersPerHour, KilometersPerHourTolerance);
            AssertEx.EqualTolerance(KilometersPerMinuteInOneMeterPerSecond, meterpersecond.KilometersPerMinute, KilometersPerMinuteTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondInOneMeterPerSecond, meterpersecond.KilometersPerSecond, KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(KnotsInOneMeterPerSecond, meterpersecond.Knots, KnotsTolerance);
            AssertEx.EqualTolerance(MachInOneMeterPerSecond, meterpersecond.Mach, MachTolerance);
            AssertEx.EqualTolerance(MetersPerHourInOneMeterPerSecond, meterpersecond.MetersPerHour, MetersPerHourTolerance);
            AssertEx.EqualTolerance(MetersPerMinuteInOneMeterPerSecond, meterpersecond.MetersPerMinute, MetersPerMinuteTolerance);
            AssertEx.EqualTolerance(MetersPerSecondInOneMeterPerSecond, meterpersecond.MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(MicrometersPerMinuteInOneMeterPerSecond, meterpersecond.MicrometersPerMinute, MicrometersPerMinuteTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondInOneMeterPerSecond, meterpersecond.MicrometersPerSecond, MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(MilesPerHourInOneMeterPerSecond, meterpersecond.MilesPerHour, MilesPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerHourInOneMeterPerSecond, meterpersecond.MillimetersPerHour, MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerMinuteInOneMeterPerSecond, meterpersecond.MillimetersPerMinute, MillimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondInOneMeterPerSecond, meterpersecond.MillimetersPerSecond, MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(NanometersPerMinuteInOneMeterPerSecond, meterpersecond.NanometersPerMinute, NanometersPerMinuteTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondInOneMeterPerSecond, meterpersecond.NanometersPerSecond, NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerHourInOneMeterPerSecond, meterpersecond.UsSurveyFeetPerHour, UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerMinuteInOneMeterPerSecond, meterpersecond.UsSurveyFeetPerMinute, UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerSecondInOneMeterPerSecond, meterpersecond.UsSurveyFeetPerSecond, UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(YardsPerHourInOneMeterPerSecond, meterpersecond.YardsPerHour, YardsPerHourTolerance);
            AssertEx.EqualTolerance(YardsPerMinuteInOneMeterPerSecond, meterpersecond.YardsPerMinute, YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(YardsPerSecondInOneMeterPerSecond, meterpersecond.YardsPerSecond, YardsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Speed.From(1, SpeedUnit.CentimeterPerHour);
            AssertEx.EqualTolerance(1, quantity00.CentimetersPerHour, CentimetersPerHourTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerHour, quantity00.Unit);

            var quantity01 = Speed.From(1, SpeedUnit.CentimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity01.CentimetersPerMinute, CentimetersPerMinuteTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerMinute, quantity01.Unit);

            var quantity02 = Speed.From(1, SpeedUnit.CentimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity02.CentimetersPerSecond, CentimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.CentimeterPerSecond, quantity02.Unit);

            var quantity03 = Speed.From(1, SpeedUnit.DecimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity03.DecimetersPerMinute, DecimetersPerMinuteTolerance);
            Assert.Equal(SpeedUnit.DecimeterPerMinute, quantity03.Unit);

            var quantity04 = Speed.From(1, SpeedUnit.DecimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity04.DecimetersPerSecond, DecimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.DecimeterPerSecond, quantity04.Unit);

            var quantity05 = Speed.From(1, SpeedUnit.FootPerHour);
            AssertEx.EqualTolerance(1, quantity05.FeetPerHour, FeetPerHourTolerance);
            Assert.Equal(SpeedUnit.FootPerHour, quantity05.Unit);

            var quantity06 = Speed.From(1, SpeedUnit.FootPerMinute);
            AssertEx.EqualTolerance(1, quantity06.FeetPerMinute, FeetPerMinuteTolerance);
            Assert.Equal(SpeedUnit.FootPerMinute, quantity06.Unit);

            var quantity07 = Speed.From(1, SpeedUnit.FootPerSecond);
            AssertEx.EqualTolerance(1, quantity07.FeetPerSecond, FeetPerSecondTolerance);
            Assert.Equal(SpeedUnit.FootPerSecond, quantity07.Unit);

            var quantity08 = Speed.From(1, SpeedUnit.InchPerHour);
            AssertEx.EqualTolerance(1, quantity08.InchesPerHour, InchesPerHourTolerance);
            Assert.Equal(SpeedUnit.InchPerHour, quantity08.Unit);

            var quantity09 = Speed.From(1, SpeedUnit.InchPerMinute);
            AssertEx.EqualTolerance(1, quantity09.InchesPerMinute, InchesPerMinuteTolerance);
            Assert.Equal(SpeedUnit.InchPerMinute, quantity09.Unit);

            var quantity10 = Speed.From(1, SpeedUnit.InchPerSecond);
            AssertEx.EqualTolerance(1, quantity10.InchesPerSecond, InchesPerSecondTolerance);
            Assert.Equal(SpeedUnit.InchPerSecond, quantity10.Unit);

            var quantity11 = Speed.From(1, SpeedUnit.KilometerPerHour);
            AssertEx.EqualTolerance(1, quantity11.KilometersPerHour, KilometersPerHourTolerance);
            Assert.Equal(SpeedUnit.KilometerPerHour, quantity11.Unit);

            var quantity12 = Speed.From(1, SpeedUnit.KilometerPerMinute);
            AssertEx.EqualTolerance(1, quantity12.KilometersPerMinute, KilometersPerMinuteTolerance);
            Assert.Equal(SpeedUnit.KilometerPerMinute, quantity12.Unit);

            var quantity13 = Speed.From(1, SpeedUnit.KilometerPerSecond);
            AssertEx.EqualTolerance(1, quantity13.KilometersPerSecond, KilometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.KilometerPerSecond, quantity13.Unit);

            var quantity14 = Speed.From(1, SpeedUnit.Knot);
            AssertEx.EqualTolerance(1, quantity14.Knots, KnotsTolerance);
            Assert.Equal(SpeedUnit.Knot, quantity14.Unit);

            var quantity15 = Speed.From(1, SpeedUnit.Mach);
            AssertEx.EqualTolerance(1, quantity15.Mach, MachTolerance);
            Assert.Equal(SpeedUnit.Mach, quantity15.Unit);

            var quantity16 = Speed.From(1, SpeedUnit.MeterPerHour);
            AssertEx.EqualTolerance(1, quantity16.MetersPerHour, MetersPerHourTolerance);
            Assert.Equal(SpeedUnit.MeterPerHour, quantity16.Unit);

            var quantity17 = Speed.From(1, SpeedUnit.MeterPerMinute);
            AssertEx.EqualTolerance(1, quantity17.MetersPerMinute, MetersPerMinuteTolerance);
            Assert.Equal(SpeedUnit.MeterPerMinute, quantity17.Unit);

            var quantity18 = Speed.From(1, SpeedUnit.MeterPerSecond);
            AssertEx.EqualTolerance(1, quantity18.MetersPerSecond, MetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MeterPerSecond, quantity18.Unit);

            var quantity19 = Speed.From(1, SpeedUnit.MicrometerPerMinute);
            AssertEx.EqualTolerance(1, quantity19.MicrometersPerMinute, MicrometersPerMinuteTolerance);
            Assert.Equal(SpeedUnit.MicrometerPerMinute, quantity19.Unit);

            var quantity20 = Speed.From(1, SpeedUnit.MicrometerPerSecond);
            AssertEx.EqualTolerance(1, quantity20.MicrometersPerSecond, MicrometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MicrometerPerSecond, quantity20.Unit);

            var quantity21 = Speed.From(1, SpeedUnit.MilePerHour);
            AssertEx.EqualTolerance(1, quantity21.MilesPerHour, MilesPerHourTolerance);
            Assert.Equal(SpeedUnit.MilePerHour, quantity21.Unit);

            var quantity22 = Speed.From(1, SpeedUnit.MillimeterPerHour);
            AssertEx.EqualTolerance(1, quantity22.MillimetersPerHour, MillimetersPerHourTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerHour, quantity22.Unit);

            var quantity23 = Speed.From(1, SpeedUnit.MillimeterPerMinute);
            AssertEx.EqualTolerance(1, quantity23.MillimetersPerMinute, MillimetersPerMinuteTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerMinute, quantity23.Unit);

            var quantity24 = Speed.From(1, SpeedUnit.MillimeterPerSecond);
            AssertEx.EqualTolerance(1, quantity24.MillimetersPerSecond, MillimetersPerSecondTolerance);
            Assert.Equal(SpeedUnit.MillimeterPerSecond, quantity24.Unit);

            var quantity25 = Speed.From(1, SpeedUnit.NanometerPerMinute);
            AssertEx.EqualTolerance(1, quantity25.NanometersPerMinute, NanometersPerMinuteTolerance);
            Assert.Equal(SpeedUnit.NanometerPerMinute, quantity25.Unit);

            var quantity26 = Speed.From(1, SpeedUnit.NanometerPerSecond);
            AssertEx.EqualTolerance(1, quantity26.NanometersPerSecond, NanometersPerSecondTolerance);
            Assert.Equal(SpeedUnit.NanometerPerSecond, quantity26.Unit);

            var quantity27 = Speed.From(1, SpeedUnit.UsSurveyFootPerHour);
            AssertEx.EqualTolerance(1, quantity27.UsSurveyFeetPerHour, UsSurveyFeetPerHourTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerHour, quantity27.Unit);

            var quantity28 = Speed.From(1, SpeedUnit.UsSurveyFootPerMinute);
            AssertEx.EqualTolerance(1, quantity28.UsSurveyFeetPerMinute, UsSurveyFeetPerMinuteTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerMinute, quantity28.Unit);

            var quantity29 = Speed.From(1, SpeedUnit.UsSurveyFootPerSecond);
            AssertEx.EqualTolerance(1, quantity29.UsSurveyFeetPerSecond, UsSurveyFeetPerSecondTolerance);
            Assert.Equal(SpeedUnit.UsSurveyFootPerSecond, quantity29.Unit);

            var quantity30 = Speed.From(1, SpeedUnit.YardPerHour);
            AssertEx.EqualTolerance(1, quantity30.YardsPerHour, YardsPerHourTolerance);
            Assert.Equal(SpeedUnit.YardPerHour, quantity30.Unit);

            var quantity31 = Speed.From(1, SpeedUnit.YardPerMinute);
            AssertEx.EqualTolerance(1, quantity31.YardsPerMinute, YardsPerMinuteTolerance);
            Assert.Equal(SpeedUnit.YardPerMinute, quantity31.Unit);

            var quantity32 = Speed.From(1, SpeedUnit.YardPerSecond);
            AssertEx.EqualTolerance(1, quantity32.YardsPerSecond, YardsPerSecondTolerance);
            Assert.Equal(SpeedUnit.YardPerSecond, quantity32.Unit);

        }

        [Fact]
        public void FromMetersPerSecond_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Speed.FromMetersPerSecond(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Speed.FromMetersPerSecond(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromMetersPerSecond_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Speed.FromMetersPerSecond(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var meterpersecond = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(CentimetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.CentimeterPerHour), CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(CentimetersPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.CentimeterPerMinute), CentimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(CentimetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.CentimeterPerSecond), CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(DecimetersPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecimeterPerMinute), DecimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.DecimeterPerSecond), DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(FeetPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FootPerHour), FeetPerHourTolerance);
            AssertEx.EqualTolerance(FeetPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FootPerMinute), FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(FeetPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.FootPerSecond), FeetPerSecondTolerance);
            AssertEx.EqualTolerance(InchesPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.InchPerHour), InchesPerHourTolerance);
            AssertEx.EqualTolerance(InchesPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.InchPerMinute), InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(InchesPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.InchPerSecond), InchesPerSecondTolerance);
            AssertEx.EqualTolerance(KilometersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.KilometerPerHour), KilometersPerHourTolerance);
            AssertEx.EqualTolerance(KilometersPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.KilometerPerMinute), KilometersPerMinuteTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.KilometerPerSecond), KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(KnotsInOneMeterPerSecond, meterpersecond.As(SpeedUnit.Knot), KnotsTolerance);
            AssertEx.EqualTolerance(MachInOneMeterPerSecond, meterpersecond.As(SpeedUnit.Mach), MachTolerance);
            AssertEx.EqualTolerance(MetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MeterPerHour), MetersPerHourTolerance);
            AssertEx.EqualTolerance(MetersPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MeterPerMinute), MetersPerMinuteTolerance);
            AssertEx.EqualTolerance(MetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MeterPerSecond), MetersPerSecondTolerance);
            AssertEx.EqualTolerance(MicrometersPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MicrometerPerMinute), MicrometersPerMinuteTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MicrometerPerSecond), MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(MilesPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MilePerHour), MilesPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MillimeterPerHour), MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(MillimetersPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MillimeterPerMinute), MillimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.MillimeterPerSecond), MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(NanometersPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.NanometerPerMinute), NanometersPerMinuteTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.NanometerPerSecond), NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.UsSurveyFootPerHour), UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.UsSurveyFootPerMinute), UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(UsSurveyFeetPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.UsSurveyFootPerSecond), UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(YardsPerHourInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YardPerHour), YardsPerHourTolerance);
            AssertEx.EqualTolerance(YardsPerMinuteInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YardPerMinute), YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(YardsPerSecondInOneMeterPerSecond, meterpersecond.As(SpeedUnit.YardPerSecond), YardsPerSecondTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Speed.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Speed(value: 1, unit: Speed.BaseUnit);
            var expectedValue = quantity.As(Speed.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Speed(value: 1, unit: Speed.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Speed(value: 1, unit: Speed.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Speed(value: 1, unit: Speed.BaseUnit);
            var expectedUnit = Speed.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Speed quantityToConvert = quantity;

                Speed convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<SpeedUnit> quantityToConvert = quantity;

                IQuantity<SpeedUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Speed(value: 1, unit: Speed.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<SpeedUnit> quantity = new Speed(value: 1, unit: Speed.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Speed(value: 1, unit: Speed.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Speed(value: 1, unit: Speed.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<SpeedUnit> quantity = new Speed(value: 1, unit: Speed.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Speed(value: 1, unit: Speed.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cm/h", SpeedUnit.CentimeterPerHour, 4.2)]
        [InlineData("en-US", "4.2 cm/min", SpeedUnit.CentimeterPerMinute, 4.2)]
        [InlineData("en-US", "4.2 cm/s", SpeedUnit.CentimeterPerSecond, 4.2)]
        [InlineData("en-US", "4.2 dm/min", SpeedUnit.DecimeterPerMinute, 4.2)]
        [InlineData("en-US", "4.2 dm/s", SpeedUnit.DecimeterPerSecond, 4.2)]
        [InlineData("en-US", "4.2 ft/h", SpeedUnit.FootPerHour, 4.2)]
        [InlineData("en-US", "4.2 ft/min", SpeedUnit.FootPerMinute, 4.2)]
        [InlineData("en-US", "4.2 ft/s", SpeedUnit.FootPerSecond, 4.2)]
        [InlineData("en-US", "4.2 in/h", SpeedUnit.InchPerHour, 4.2)]
        [InlineData("en-US", "4.2 in/min", SpeedUnit.InchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 in/s", SpeedUnit.InchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 km/h", SpeedUnit.KilometerPerHour, 4.2)]
        [InlineData("en-US", "4.2 km/min", SpeedUnit.KilometerPerMinute, 4.2)]
        [InlineData("en-US", "4.2 km/s", SpeedUnit.KilometerPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kn", SpeedUnit.Knot, 4.2)]
        [InlineData("en-US", "4.2 kt", SpeedUnit.Knot, 4.2)]
        [InlineData("en-US", "4.2 knot", SpeedUnit.Knot, 4.2)]
        [InlineData("en-US", "4.2 knots", SpeedUnit.Knot, 4.2)]
        [InlineData("en-US", "4.2 M", SpeedUnit.Mach, 4.2)]
        [InlineData("en-US", "4.2 Ma", SpeedUnit.Mach, 4.2)]
        [InlineData("en-US", "4.2 MN", SpeedUnit.Mach, 4.2)]
        [InlineData("en-US", "4.2 MACH", SpeedUnit.Mach, 4.2)]
        [InlineData("en-US", "4.2 m/h", SpeedUnit.MeterPerHour, 4.2)]
        [InlineData("en-US", "4.2 m/min", SpeedUnit.MeterPerMinute, 4.2)]
        [InlineData("en-US", "4.2 m/s", SpeedUnit.MeterPerSecond, 4.2)]
        [InlineData("en-US", "4.2 µm/min", SpeedUnit.MicrometerPerMinute, 4.2)]
        [InlineData("en-US", "4.2 µm/s", SpeedUnit.MicrometerPerSecond, 4.2)]
        [InlineData("en-US", "4.2 mph", SpeedUnit.MilePerHour, 4.2)]
        [InlineData("en-US", "4.2 mm/h", SpeedUnit.MillimeterPerHour, 4.2)]
        [InlineData("en-US", "4.2 mm/min", SpeedUnit.MillimeterPerMinute, 4.2)]
        [InlineData("en-US", "4.2 mm/s", SpeedUnit.MillimeterPerSecond, 4.2)]
        [InlineData("en-US", "4.2 nm/min", SpeedUnit.NanometerPerMinute, 4.2)]
        [InlineData("en-US", "4.2 nm/s", SpeedUnit.NanometerPerSecond, 4.2)]
        [InlineData("en-US", "4.2 ftUS/h", SpeedUnit.UsSurveyFootPerHour, 4.2)]
        [InlineData("en-US", "4.2 ftUS/min", SpeedUnit.UsSurveyFootPerMinute, 4.2)]
        [InlineData("en-US", "4.2 ftUS/s", SpeedUnit.UsSurveyFootPerSecond, 4.2)]
        [InlineData("en-US", "4.2 yd/h", SpeedUnit.YardPerHour, 4.2)]
        [InlineData("en-US", "4.2 yd/min", SpeedUnit.YardPerMinute, 4.2)]
        [InlineData("en-US", "4.2 yd/s", SpeedUnit.YardPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 см/ч", SpeedUnit.CentimeterPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 см/мин", SpeedUnit.CentimeterPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 см/с", SpeedUnit.CentimeterPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 дм/мин", SpeedUnit.DecimeterPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 дм/с", SpeedUnit.DecimeterPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 фут/ч", SpeedUnit.FootPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 фут/мин", SpeedUnit.FootPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 фут/с", SpeedUnit.FootPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 км/ч", SpeedUnit.KilometerPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 км/мин", SpeedUnit.KilometerPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 км/с", SpeedUnit.KilometerPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 уз.", SpeedUnit.Knot, 4.2)]
        [InlineData("ru-RU", "4,2 мах", SpeedUnit.Mach, 4.2)]
        [InlineData("ru-RU", "4,2 м/ч", SpeedUnit.MeterPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 м/мин", SpeedUnit.MeterPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 м/с", SpeedUnit.MeterPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мкм/мин", SpeedUnit.MicrometerPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 мкм/с", SpeedUnit.MicrometerPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 миль/ч", SpeedUnit.MilePerHour, 4.2)]
        [InlineData("ru-RU", "4,2 мм/ч", SpeedUnit.MillimeterPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 мм/мин", SpeedUnit.MillimeterPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 мм/с", SpeedUnit.MillimeterPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 нм/мин", SpeedUnit.NanometerPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 нм/с", SpeedUnit.NanometerPerSecond, 4.2)]
        public void Parse(string culture, string quantityString, SpeedUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Speed.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 cm/h", SpeedUnit.CentimeterPerHour, 4.2)]
        [InlineData("en-US", "4.2 cm/min", SpeedUnit.CentimeterPerMinute, 4.2)]
        [InlineData("en-US", "4.2 cm/s", SpeedUnit.CentimeterPerSecond, 4.2)]
        [InlineData("en-US", "4.2 dm/min", SpeedUnit.DecimeterPerMinute, 4.2)]
        [InlineData("en-US", "4.2 dm/s", SpeedUnit.DecimeterPerSecond, 4.2)]
        [InlineData("en-US", "4.2 ft/h", SpeedUnit.FootPerHour, 4.2)]
        [InlineData("en-US", "4.2 ft/min", SpeedUnit.FootPerMinute, 4.2)]
        [InlineData("en-US", "4.2 ft/s", SpeedUnit.FootPerSecond, 4.2)]
        [InlineData("en-US", "4.2 in/h", SpeedUnit.InchPerHour, 4.2)]
        [InlineData("en-US", "4.2 in/min", SpeedUnit.InchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 in/s", SpeedUnit.InchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 km/h", SpeedUnit.KilometerPerHour, 4.2)]
        [InlineData("en-US", "4.2 km/min", SpeedUnit.KilometerPerMinute, 4.2)]
        [InlineData("en-US", "4.2 km/s", SpeedUnit.KilometerPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kn", SpeedUnit.Knot, 4.2)]
        [InlineData("en-US", "4.2 kt", SpeedUnit.Knot, 4.2)]
        [InlineData("en-US", "4.2 knot", SpeedUnit.Knot, 4.2)]
        [InlineData("en-US", "4.2 knots", SpeedUnit.Knot, 4.2)]
        [InlineData("en-US", "4.2 M", SpeedUnit.Mach, 4.2)]
        [InlineData("en-US", "4.2 Ma", SpeedUnit.Mach, 4.2)]
        [InlineData("en-US", "4.2 MN", SpeedUnit.Mach, 4.2)]
        [InlineData("en-US", "4.2 MACH", SpeedUnit.Mach, 4.2)]
        [InlineData("en-US", "4.2 m/h", SpeedUnit.MeterPerHour, 4.2)]
        [InlineData("en-US", "4.2 m/min", SpeedUnit.MeterPerMinute, 4.2)]
        [InlineData("en-US", "4.2 m/s", SpeedUnit.MeterPerSecond, 4.2)]
        [InlineData("en-US", "4.2 µm/min", SpeedUnit.MicrometerPerMinute, 4.2)]
        [InlineData("en-US", "4.2 µm/s", SpeedUnit.MicrometerPerSecond, 4.2)]
        [InlineData("en-US", "4.2 mph", SpeedUnit.MilePerHour, 4.2)]
        [InlineData("en-US", "4.2 mm/h", SpeedUnit.MillimeterPerHour, 4.2)]
        [InlineData("en-US", "4.2 mm/min", SpeedUnit.MillimeterPerMinute, 4.2)]
        [InlineData("en-US", "4.2 mm/s", SpeedUnit.MillimeterPerSecond, 4.2)]
        [InlineData("en-US", "4.2 nm/min", SpeedUnit.NanometerPerMinute, 4.2)]
        [InlineData("en-US", "4.2 nm/s", SpeedUnit.NanometerPerSecond, 4.2)]
        [InlineData("en-US", "4.2 ftUS/h", SpeedUnit.UsSurveyFootPerHour, 4.2)]
        [InlineData("en-US", "4.2 ftUS/min", SpeedUnit.UsSurveyFootPerMinute, 4.2)]
        [InlineData("en-US", "4.2 ftUS/s", SpeedUnit.UsSurveyFootPerSecond, 4.2)]
        [InlineData("en-US", "4.2 yd/h", SpeedUnit.YardPerHour, 4.2)]
        [InlineData("en-US", "4.2 yd/min", SpeedUnit.YardPerMinute, 4.2)]
        [InlineData("en-US", "4.2 yd/s", SpeedUnit.YardPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 см/ч", SpeedUnit.CentimeterPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 см/мин", SpeedUnit.CentimeterPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 см/с", SpeedUnit.CentimeterPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 дм/мин", SpeedUnit.DecimeterPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 дм/с", SpeedUnit.DecimeterPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 фут/ч", SpeedUnit.FootPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 фут/мин", SpeedUnit.FootPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 фут/с", SpeedUnit.FootPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 км/ч", SpeedUnit.KilometerPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 км/мин", SpeedUnit.KilometerPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 км/с", SpeedUnit.KilometerPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 уз.", SpeedUnit.Knot, 4.2)]
        [InlineData("ru-RU", "4,2 мах", SpeedUnit.Mach, 4.2)]
        [InlineData("ru-RU", "4,2 м/ч", SpeedUnit.MeterPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 м/мин", SpeedUnit.MeterPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 м/с", SpeedUnit.MeterPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мкм/мин", SpeedUnit.MicrometerPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 мкм/с", SpeedUnit.MicrometerPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 миль/ч", SpeedUnit.MilePerHour, 4.2)]
        [InlineData("ru-RU", "4,2 мм/ч", SpeedUnit.MillimeterPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 мм/мин", SpeedUnit.MillimeterPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 мм/с", SpeedUnit.MillimeterPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 нм/мин", SpeedUnit.NanometerPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 нм/с", SpeedUnit.NanometerPerSecond, 4.2)]
        public void TryParse(string culture, string quantityString, SpeedUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Speed.TryParse(quantityString, out Speed parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("cm/h", SpeedUnit.CentimeterPerHour)]
        [InlineData("cm/min", SpeedUnit.CentimeterPerMinute)]
        [InlineData("cm/s", SpeedUnit.CentimeterPerSecond)]
        [InlineData("dm/min", SpeedUnit.DecimeterPerMinute)]
        [InlineData("dm/s", SpeedUnit.DecimeterPerSecond)]
        [InlineData("ft/h", SpeedUnit.FootPerHour)]
        [InlineData("ft/min", SpeedUnit.FootPerMinute)]
        [InlineData("ft/s", SpeedUnit.FootPerSecond)]
        [InlineData("in/h", SpeedUnit.InchPerHour)]
        [InlineData("in/min", SpeedUnit.InchPerMinute)]
        [InlineData("in/s", SpeedUnit.InchPerSecond)]
        [InlineData("km/h", SpeedUnit.KilometerPerHour)]
        [InlineData("km/min", SpeedUnit.KilometerPerMinute)]
        [InlineData("km/s", SpeedUnit.KilometerPerSecond)]
        [InlineData("kn", SpeedUnit.Knot)]
        [InlineData("kt", SpeedUnit.Knot)]
        [InlineData("knot", SpeedUnit.Knot)]
        [InlineData("knots", SpeedUnit.Knot)]
        [InlineData("M", SpeedUnit.Mach)]
        [InlineData("Ma", SpeedUnit.Mach)]
        [InlineData("MN", SpeedUnit.Mach)]
        [InlineData("MACH", SpeedUnit.Mach)]
        [InlineData("m/h", SpeedUnit.MeterPerHour)]
        [InlineData("m/min", SpeedUnit.MeterPerMinute)]
        [InlineData("m/s", SpeedUnit.MeterPerSecond)]
        [InlineData("µm/min", SpeedUnit.MicrometerPerMinute)]
        [InlineData("µm/s", SpeedUnit.MicrometerPerSecond)]
        [InlineData("mph", SpeedUnit.MilePerHour)]
        [InlineData("mm/h", SpeedUnit.MillimeterPerHour)]
        [InlineData("mm/min", SpeedUnit.MillimeterPerMinute)]
        [InlineData("mm/s", SpeedUnit.MillimeterPerSecond)]
        [InlineData("nm/min", SpeedUnit.NanometerPerMinute)]
        [InlineData("nm/s", SpeedUnit.NanometerPerSecond)]
        [InlineData("ftUS/h", SpeedUnit.UsSurveyFootPerHour)]
        [InlineData("ftUS/min", SpeedUnit.UsSurveyFootPerMinute)]
        [InlineData("ftUS/s", SpeedUnit.UsSurveyFootPerSecond)]
        [InlineData("yd/h", SpeedUnit.YardPerHour)]
        [InlineData("yd/min", SpeedUnit.YardPerMinute)]
        [InlineData("yd/s", SpeedUnit.YardPerSecond)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, SpeedUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            SpeedUnit parsedUnit = Speed.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cm/h", SpeedUnit.CentimeterPerHour)]
        [InlineData("cm/min", SpeedUnit.CentimeterPerMinute)]
        [InlineData("cm/s", SpeedUnit.CentimeterPerSecond)]
        [InlineData("dm/min", SpeedUnit.DecimeterPerMinute)]
        [InlineData("dm/s", SpeedUnit.DecimeterPerSecond)]
        [InlineData("ft/h", SpeedUnit.FootPerHour)]
        [InlineData("ft/min", SpeedUnit.FootPerMinute)]
        [InlineData("ft/s", SpeedUnit.FootPerSecond)]
        [InlineData("in/h", SpeedUnit.InchPerHour)]
        [InlineData("in/min", SpeedUnit.InchPerMinute)]
        [InlineData("in/s", SpeedUnit.InchPerSecond)]
        [InlineData("km/h", SpeedUnit.KilometerPerHour)]
        [InlineData("km/min", SpeedUnit.KilometerPerMinute)]
        [InlineData("km/s", SpeedUnit.KilometerPerSecond)]
        [InlineData("kn", SpeedUnit.Knot)]
        [InlineData("kt", SpeedUnit.Knot)]
        [InlineData("knot", SpeedUnit.Knot)]
        [InlineData("knots", SpeedUnit.Knot)]
        [InlineData("M", SpeedUnit.Mach)]
        [InlineData("Ma", SpeedUnit.Mach)]
        [InlineData("MN", SpeedUnit.Mach)]
        [InlineData("MACH", SpeedUnit.Mach)]
        [InlineData("m/h", SpeedUnit.MeterPerHour)]
        [InlineData("m/min", SpeedUnit.MeterPerMinute)]
        [InlineData("m/s", SpeedUnit.MeterPerSecond)]
        [InlineData("µm/min", SpeedUnit.MicrometerPerMinute)]
        [InlineData("µm/s", SpeedUnit.MicrometerPerSecond)]
        [InlineData("mph", SpeedUnit.MilePerHour)]
        [InlineData("mm/h", SpeedUnit.MillimeterPerHour)]
        [InlineData("mm/min", SpeedUnit.MillimeterPerMinute)]
        [InlineData("mm/s", SpeedUnit.MillimeterPerSecond)]
        [InlineData("nm/min", SpeedUnit.NanometerPerMinute)]
        [InlineData("nm/s", SpeedUnit.NanometerPerSecond)]
        [InlineData("ftUS/h", SpeedUnit.UsSurveyFootPerHour)]
        [InlineData("ftUS/min", SpeedUnit.UsSurveyFootPerMinute)]
        [InlineData("ftUS/s", SpeedUnit.UsSurveyFootPerSecond)]
        [InlineData("yd/h", SpeedUnit.YardPerHour)]
        [InlineData("yd/min", SpeedUnit.YardPerMinute)]
        [InlineData("yd/s", SpeedUnit.YardPerSecond)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, SpeedUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            SpeedUnit parsedUnit = Speed.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm/h", SpeedUnit.CentimeterPerHour)]
        [InlineData("en-US", "cm/min", SpeedUnit.CentimeterPerMinute)]
        [InlineData("en-US", "cm/s", SpeedUnit.CentimeterPerSecond)]
        [InlineData("en-US", "dm/min", SpeedUnit.DecimeterPerMinute)]
        [InlineData("en-US", "dm/s", SpeedUnit.DecimeterPerSecond)]
        [InlineData("en-US", "ft/h", SpeedUnit.FootPerHour)]
        [InlineData("en-US", "ft/min", SpeedUnit.FootPerMinute)]
        [InlineData("en-US", "ft/s", SpeedUnit.FootPerSecond)]
        [InlineData("en-US", "in/h", SpeedUnit.InchPerHour)]
        [InlineData("en-US", "in/min", SpeedUnit.InchPerMinute)]
        [InlineData("en-US", "in/s", SpeedUnit.InchPerSecond)]
        [InlineData("en-US", "km/h", SpeedUnit.KilometerPerHour)]
        [InlineData("en-US", "km/min", SpeedUnit.KilometerPerMinute)]
        [InlineData("en-US", "km/s", SpeedUnit.KilometerPerSecond)]
        [InlineData("en-US", "kn", SpeedUnit.Knot)]
        [InlineData("en-US", "kt", SpeedUnit.Knot)]
        [InlineData("en-US", "knot", SpeedUnit.Knot)]
        [InlineData("en-US", "knots", SpeedUnit.Knot)]
        [InlineData("en-US", "M", SpeedUnit.Mach)]
        [InlineData("en-US", "Ma", SpeedUnit.Mach)]
        [InlineData("en-US", "MN", SpeedUnit.Mach)]
        [InlineData("en-US", "MACH", SpeedUnit.Mach)]
        [InlineData("en-US", "m/h", SpeedUnit.MeterPerHour)]
        [InlineData("en-US", "m/min", SpeedUnit.MeterPerMinute)]
        [InlineData("en-US", "m/s", SpeedUnit.MeterPerSecond)]
        [InlineData("en-US", "µm/min", SpeedUnit.MicrometerPerMinute)]
        [InlineData("en-US", "µm/s", SpeedUnit.MicrometerPerSecond)]
        [InlineData("en-US", "mph", SpeedUnit.MilePerHour)]
        [InlineData("en-US", "mm/h", SpeedUnit.MillimeterPerHour)]
        [InlineData("en-US", "mm/min", SpeedUnit.MillimeterPerMinute)]
        [InlineData("en-US", "mm/s", SpeedUnit.MillimeterPerSecond)]
        [InlineData("en-US", "nm/min", SpeedUnit.NanometerPerMinute)]
        [InlineData("en-US", "nm/s", SpeedUnit.NanometerPerSecond)]
        [InlineData("en-US", "ftUS/h", SpeedUnit.UsSurveyFootPerHour)]
        [InlineData("en-US", "ftUS/min", SpeedUnit.UsSurveyFootPerMinute)]
        [InlineData("en-US", "ftUS/s", SpeedUnit.UsSurveyFootPerSecond)]
        [InlineData("en-US", "yd/h", SpeedUnit.YardPerHour)]
        [InlineData("en-US", "yd/min", SpeedUnit.YardPerMinute)]
        [InlineData("en-US", "yd/s", SpeedUnit.YardPerSecond)]
        [InlineData("ru-RU", "см/ч", SpeedUnit.CentimeterPerHour)]
        [InlineData("ru-RU", "см/мин", SpeedUnit.CentimeterPerMinute)]
        [InlineData("ru-RU", "см/с", SpeedUnit.CentimeterPerSecond)]
        [InlineData("ru-RU", "дм/мин", SpeedUnit.DecimeterPerMinute)]
        [InlineData("ru-RU", "дм/с", SpeedUnit.DecimeterPerSecond)]
        [InlineData("ru-RU", "фут/ч", SpeedUnit.FootPerHour)]
        [InlineData("ru-RU", "фут/мин", SpeedUnit.FootPerMinute)]
        [InlineData("ru-RU", "фут/с", SpeedUnit.FootPerSecond)]
        [InlineData("ru-RU", "км/ч", SpeedUnit.KilometerPerHour)]
        [InlineData("ru-RU", "км/мин", SpeedUnit.KilometerPerMinute)]
        [InlineData("ru-RU", "км/с", SpeedUnit.KilometerPerSecond)]
        [InlineData("ru-RU", "уз.", SpeedUnit.Knot)]
        [InlineData("ru-RU", "мах", SpeedUnit.Mach)]
        [InlineData("ru-RU", "м/ч", SpeedUnit.MeterPerHour)]
        [InlineData("ru-RU", "м/мин", SpeedUnit.MeterPerMinute)]
        [InlineData("ru-RU", "м/с", SpeedUnit.MeterPerSecond)]
        [InlineData("ru-RU", "мкм/мин", SpeedUnit.MicrometerPerMinute)]
        [InlineData("ru-RU", "мкм/с", SpeedUnit.MicrometerPerSecond)]
        [InlineData("ru-RU", "миль/ч", SpeedUnit.MilePerHour)]
        [InlineData("ru-RU", "мм/ч", SpeedUnit.MillimeterPerHour)]
        [InlineData("ru-RU", "мм/мин", SpeedUnit.MillimeterPerMinute)]
        [InlineData("ru-RU", "мм/с", SpeedUnit.MillimeterPerSecond)]
        [InlineData("ru-RU", "нм/мин", SpeedUnit.NanometerPerMinute)]
        [InlineData("ru-RU", "нм/с", SpeedUnit.NanometerPerSecond)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, SpeedUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            SpeedUnit parsedUnit = Speed.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm/h", SpeedUnit.CentimeterPerHour)]
        [InlineData("en-US", "cm/min", SpeedUnit.CentimeterPerMinute)]
        [InlineData("en-US", "cm/s", SpeedUnit.CentimeterPerSecond)]
        [InlineData("en-US", "dm/min", SpeedUnit.DecimeterPerMinute)]
        [InlineData("en-US", "dm/s", SpeedUnit.DecimeterPerSecond)]
        [InlineData("en-US", "ft/h", SpeedUnit.FootPerHour)]
        [InlineData("en-US", "ft/min", SpeedUnit.FootPerMinute)]
        [InlineData("en-US", "ft/s", SpeedUnit.FootPerSecond)]
        [InlineData("en-US", "in/h", SpeedUnit.InchPerHour)]
        [InlineData("en-US", "in/min", SpeedUnit.InchPerMinute)]
        [InlineData("en-US", "in/s", SpeedUnit.InchPerSecond)]
        [InlineData("en-US", "km/h", SpeedUnit.KilometerPerHour)]
        [InlineData("en-US", "km/min", SpeedUnit.KilometerPerMinute)]
        [InlineData("en-US", "km/s", SpeedUnit.KilometerPerSecond)]
        [InlineData("en-US", "kn", SpeedUnit.Knot)]
        [InlineData("en-US", "kt", SpeedUnit.Knot)]
        [InlineData("en-US", "knot", SpeedUnit.Knot)]
        [InlineData("en-US", "knots", SpeedUnit.Knot)]
        [InlineData("en-US", "M", SpeedUnit.Mach)]
        [InlineData("en-US", "Ma", SpeedUnit.Mach)]
        [InlineData("en-US", "MN", SpeedUnit.Mach)]
        [InlineData("en-US", "MACH", SpeedUnit.Mach)]
        [InlineData("en-US", "m/h", SpeedUnit.MeterPerHour)]
        [InlineData("en-US", "m/min", SpeedUnit.MeterPerMinute)]
        [InlineData("en-US", "m/s", SpeedUnit.MeterPerSecond)]
        [InlineData("en-US", "µm/min", SpeedUnit.MicrometerPerMinute)]
        [InlineData("en-US", "µm/s", SpeedUnit.MicrometerPerSecond)]
        [InlineData("en-US", "mph", SpeedUnit.MilePerHour)]
        [InlineData("en-US", "mm/h", SpeedUnit.MillimeterPerHour)]
        [InlineData("en-US", "mm/min", SpeedUnit.MillimeterPerMinute)]
        [InlineData("en-US", "mm/s", SpeedUnit.MillimeterPerSecond)]
        [InlineData("en-US", "nm/min", SpeedUnit.NanometerPerMinute)]
        [InlineData("en-US", "nm/s", SpeedUnit.NanometerPerSecond)]
        [InlineData("en-US", "ftUS/h", SpeedUnit.UsSurveyFootPerHour)]
        [InlineData("en-US", "ftUS/min", SpeedUnit.UsSurveyFootPerMinute)]
        [InlineData("en-US", "ftUS/s", SpeedUnit.UsSurveyFootPerSecond)]
        [InlineData("en-US", "yd/h", SpeedUnit.YardPerHour)]
        [InlineData("en-US", "yd/min", SpeedUnit.YardPerMinute)]
        [InlineData("en-US", "yd/s", SpeedUnit.YardPerSecond)]
        [InlineData("ru-RU", "см/ч", SpeedUnit.CentimeterPerHour)]
        [InlineData("ru-RU", "см/мин", SpeedUnit.CentimeterPerMinute)]
        [InlineData("ru-RU", "см/с", SpeedUnit.CentimeterPerSecond)]
        [InlineData("ru-RU", "дм/мин", SpeedUnit.DecimeterPerMinute)]
        [InlineData("ru-RU", "дм/с", SpeedUnit.DecimeterPerSecond)]
        [InlineData("ru-RU", "фут/ч", SpeedUnit.FootPerHour)]
        [InlineData("ru-RU", "фут/мин", SpeedUnit.FootPerMinute)]
        [InlineData("ru-RU", "фут/с", SpeedUnit.FootPerSecond)]
        [InlineData("ru-RU", "км/ч", SpeedUnit.KilometerPerHour)]
        [InlineData("ru-RU", "км/мин", SpeedUnit.KilometerPerMinute)]
        [InlineData("ru-RU", "км/с", SpeedUnit.KilometerPerSecond)]
        [InlineData("ru-RU", "уз.", SpeedUnit.Knot)]
        [InlineData("ru-RU", "мах", SpeedUnit.Mach)]
        [InlineData("ru-RU", "м/ч", SpeedUnit.MeterPerHour)]
        [InlineData("ru-RU", "м/мин", SpeedUnit.MeterPerMinute)]
        [InlineData("ru-RU", "м/с", SpeedUnit.MeterPerSecond)]
        [InlineData("ru-RU", "мкм/мин", SpeedUnit.MicrometerPerMinute)]
        [InlineData("ru-RU", "мкм/с", SpeedUnit.MicrometerPerSecond)]
        [InlineData("ru-RU", "миль/ч", SpeedUnit.MilePerHour)]
        [InlineData("ru-RU", "мм/ч", SpeedUnit.MillimeterPerHour)]
        [InlineData("ru-RU", "мм/мин", SpeedUnit.MillimeterPerMinute)]
        [InlineData("ru-RU", "мм/с", SpeedUnit.MillimeterPerSecond)]
        [InlineData("ru-RU", "нм/мин", SpeedUnit.NanometerPerMinute)]
        [InlineData("ru-RU", "нм/с", SpeedUnit.NanometerPerSecond)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, SpeedUnit expectedUnit)
        {
            SpeedUnit parsedUnit = Speed.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cm/h", SpeedUnit.CentimeterPerHour)]
        [InlineData("cm/min", SpeedUnit.CentimeterPerMinute)]
        [InlineData("cm/s", SpeedUnit.CentimeterPerSecond)]
        [InlineData("dm/min", SpeedUnit.DecimeterPerMinute)]
        [InlineData("dm/s", SpeedUnit.DecimeterPerSecond)]
        [InlineData("ft/h", SpeedUnit.FootPerHour)]
        [InlineData("ft/min", SpeedUnit.FootPerMinute)]
        [InlineData("ft/s", SpeedUnit.FootPerSecond)]
        [InlineData("in/h", SpeedUnit.InchPerHour)]
        [InlineData("in/min", SpeedUnit.InchPerMinute)]
        [InlineData("in/s", SpeedUnit.InchPerSecond)]
        [InlineData("km/h", SpeedUnit.KilometerPerHour)]
        [InlineData("km/min", SpeedUnit.KilometerPerMinute)]
        [InlineData("km/s", SpeedUnit.KilometerPerSecond)]
        [InlineData("kn", SpeedUnit.Knot)]
        [InlineData("kt", SpeedUnit.Knot)]
        [InlineData("knot", SpeedUnit.Knot)]
        [InlineData("knots", SpeedUnit.Knot)]
        [InlineData("M", SpeedUnit.Mach)]
        [InlineData("Ma", SpeedUnit.Mach)]
        [InlineData("MN", SpeedUnit.Mach)]
        [InlineData("MACH", SpeedUnit.Mach)]
        [InlineData("m/h", SpeedUnit.MeterPerHour)]
        [InlineData("m/min", SpeedUnit.MeterPerMinute)]
        [InlineData("m/s", SpeedUnit.MeterPerSecond)]
        [InlineData("µm/min", SpeedUnit.MicrometerPerMinute)]
        [InlineData("µm/s", SpeedUnit.MicrometerPerSecond)]
        [InlineData("mph", SpeedUnit.MilePerHour)]
        [InlineData("mm/h", SpeedUnit.MillimeterPerHour)]
        [InlineData("mm/min", SpeedUnit.MillimeterPerMinute)]
        [InlineData("mm/s", SpeedUnit.MillimeterPerSecond)]
        [InlineData("nm/min", SpeedUnit.NanometerPerMinute)]
        [InlineData("nm/s", SpeedUnit.NanometerPerSecond)]
        [InlineData("ftUS/h", SpeedUnit.UsSurveyFootPerHour)]
        [InlineData("ftUS/min", SpeedUnit.UsSurveyFootPerMinute)]
        [InlineData("ftUS/s", SpeedUnit.UsSurveyFootPerSecond)]
        [InlineData("yd/h", SpeedUnit.YardPerHour)]
        [InlineData("yd/min", SpeedUnit.YardPerMinute)]
        [InlineData("yd/s", SpeedUnit.YardPerSecond)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, SpeedUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Speed.TryParseUnit(abbreviation, out SpeedUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cm/h", SpeedUnit.CentimeterPerHour)]
        [InlineData("cm/min", SpeedUnit.CentimeterPerMinute)]
        [InlineData("cm/s", SpeedUnit.CentimeterPerSecond)]
        [InlineData("dm/min", SpeedUnit.DecimeterPerMinute)]
        [InlineData("dm/s", SpeedUnit.DecimeterPerSecond)]
        [InlineData("ft/h", SpeedUnit.FootPerHour)]
        [InlineData("ft/min", SpeedUnit.FootPerMinute)]
        [InlineData("ft/s", SpeedUnit.FootPerSecond)]
        [InlineData("in/h", SpeedUnit.InchPerHour)]
        [InlineData("in/min", SpeedUnit.InchPerMinute)]
        [InlineData("in/s", SpeedUnit.InchPerSecond)]
        [InlineData("km/h", SpeedUnit.KilometerPerHour)]
        [InlineData("km/min", SpeedUnit.KilometerPerMinute)]
        [InlineData("km/s", SpeedUnit.KilometerPerSecond)]
        [InlineData("kn", SpeedUnit.Knot)]
        [InlineData("kt", SpeedUnit.Knot)]
        [InlineData("knot", SpeedUnit.Knot)]
        [InlineData("knots", SpeedUnit.Knot)]
        [InlineData("M", SpeedUnit.Mach)]
        [InlineData("Ma", SpeedUnit.Mach)]
        [InlineData("MN", SpeedUnit.Mach)]
        [InlineData("MACH", SpeedUnit.Mach)]
        [InlineData("m/h", SpeedUnit.MeterPerHour)]
        [InlineData("m/min", SpeedUnit.MeterPerMinute)]
        [InlineData("m/s", SpeedUnit.MeterPerSecond)]
        [InlineData("µm/min", SpeedUnit.MicrometerPerMinute)]
        [InlineData("µm/s", SpeedUnit.MicrometerPerSecond)]
        [InlineData("mph", SpeedUnit.MilePerHour)]
        [InlineData("mm/h", SpeedUnit.MillimeterPerHour)]
        [InlineData("mm/min", SpeedUnit.MillimeterPerMinute)]
        [InlineData("mm/s", SpeedUnit.MillimeterPerSecond)]
        [InlineData("nm/min", SpeedUnit.NanometerPerMinute)]
        [InlineData("nm/s", SpeedUnit.NanometerPerSecond)]
        [InlineData("ftUS/h", SpeedUnit.UsSurveyFootPerHour)]
        [InlineData("ftUS/min", SpeedUnit.UsSurveyFootPerMinute)]
        [InlineData("ftUS/s", SpeedUnit.UsSurveyFootPerSecond)]
        [InlineData("yd/h", SpeedUnit.YardPerHour)]
        [InlineData("yd/min", SpeedUnit.YardPerMinute)]
        [InlineData("yd/s", SpeedUnit.YardPerSecond)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, SpeedUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Speed.TryParseUnit(abbreviation, out SpeedUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm/h", SpeedUnit.CentimeterPerHour)]
        [InlineData("en-US", "cm/min", SpeedUnit.CentimeterPerMinute)]
        [InlineData("en-US", "cm/s", SpeedUnit.CentimeterPerSecond)]
        [InlineData("en-US", "dm/min", SpeedUnit.DecimeterPerMinute)]
        [InlineData("en-US", "dm/s", SpeedUnit.DecimeterPerSecond)]
        [InlineData("en-US", "ft/h", SpeedUnit.FootPerHour)]
        [InlineData("en-US", "ft/min", SpeedUnit.FootPerMinute)]
        [InlineData("en-US", "ft/s", SpeedUnit.FootPerSecond)]
        [InlineData("en-US", "in/h", SpeedUnit.InchPerHour)]
        [InlineData("en-US", "in/min", SpeedUnit.InchPerMinute)]
        [InlineData("en-US", "in/s", SpeedUnit.InchPerSecond)]
        [InlineData("en-US", "km/h", SpeedUnit.KilometerPerHour)]
        [InlineData("en-US", "km/min", SpeedUnit.KilometerPerMinute)]
        [InlineData("en-US", "km/s", SpeedUnit.KilometerPerSecond)]
        [InlineData("en-US", "kn", SpeedUnit.Knot)]
        [InlineData("en-US", "kt", SpeedUnit.Knot)]
        [InlineData("en-US", "knot", SpeedUnit.Knot)]
        [InlineData("en-US", "knots", SpeedUnit.Knot)]
        [InlineData("en-US", "M", SpeedUnit.Mach)]
        [InlineData("en-US", "Ma", SpeedUnit.Mach)]
        [InlineData("en-US", "MN", SpeedUnit.Mach)]
        [InlineData("en-US", "MACH", SpeedUnit.Mach)]
        [InlineData("en-US", "m/h", SpeedUnit.MeterPerHour)]
        [InlineData("en-US", "m/min", SpeedUnit.MeterPerMinute)]
        [InlineData("en-US", "m/s", SpeedUnit.MeterPerSecond)]
        [InlineData("en-US", "µm/min", SpeedUnit.MicrometerPerMinute)]
        [InlineData("en-US", "µm/s", SpeedUnit.MicrometerPerSecond)]
        [InlineData("en-US", "mph", SpeedUnit.MilePerHour)]
        [InlineData("en-US", "mm/h", SpeedUnit.MillimeterPerHour)]
        [InlineData("en-US", "mm/min", SpeedUnit.MillimeterPerMinute)]
        [InlineData("en-US", "mm/s", SpeedUnit.MillimeterPerSecond)]
        [InlineData("en-US", "nm/min", SpeedUnit.NanometerPerMinute)]
        [InlineData("en-US", "nm/s", SpeedUnit.NanometerPerSecond)]
        [InlineData("en-US", "ftUS/h", SpeedUnit.UsSurveyFootPerHour)]
        [InlineData("en-US", "ftUS/min", SpeedUnit.UsSurveyFootPerMinute)]
        [InlineData("en-US", "ftUS/s", SpeedUnit.UsSurveyFootPerSecond)]
        [InlineData("en-US", "yd/h", SpeedUnit.YardPerHour)]
        [InlineData("en-US", "yd/min", SpeedUnit.YardPerMinute)]
        [InlineData("en-US", "yd/s", SpeedUnit.YardPerSecond)]
        [InlineData("ru-RU", "см/ч", SpeedUnit.CentimeterPerHour)]
        [InlineData("ru-RU", "см/мин", SpeedUnit.CentimeterPerMinute)]
        [InlineData("ru-RU", "см/с", SpeedUnit.CentimeterPerSecond)]
        [InlineData("ru-RU", "дм/мин", SpeedUnit.DecimeterPerMinute)]
        [InlineData("ru-RU", "дм/с", SpeedUnit.DecimeterPerSecond)]
        [InlineData("ru-RU", "фут/ч", SpeedUnit.FootPerHour)]
        [InlineData("ru-RU", "фут/мин", SpeedUnit.FootPerMinute)]
        [InlineData("ru-RU", "фут/с", SpeedUnit.FootPerSecond)]
        [InlineData("ru-RU", "км/ч", SpeedUnit.KilometerPerHour)]
        [InlineData("ru-RU", "км/мин", SpeedUnit.KilometerPerMinute)]
        [InlineData("ru-RU", "км/с", SpeedUnit.KilometerPerSecond)]
        [InlineData("ru-RU", "уз.", SpeedUnit.Knot)]
        [InlineData("ru-RU", "мах", SpeedUnit.Mach)]
        [InlineData("ru-RU", "м/ч", SpeedUnit.MeterPerHour)]
        [InlineData("ru-RU", "м/мин", SpeedUnit.MeterPerMinute)]
        [InlineData("ru-RU", "м/с", SpeedUnit.MeterPerSecond)]
        [InlineData("ru-RU", "мкм/мин", SpeedUnit.MicrometerPerMinute)]
        [InlineData("ru-RU", "мкм/с", SpeedUnit.MicrometerPerSecond)]
        [InlineData("ru-RU", "миль/ч", SpeedUnit.MilePerHour)]
        [InlineData("ru-RU", "мм/ч", SpeedUnit.MillimeterPerHour)]
        [InlineData("ru-RU", "мм/мин", SpeedUnit.MillimeterPerMinute)]
        [InlineData("ru-RU", "мм/с", SpeedUnit.MillimeterPerSecond)]
        [InlineData("ru-RU", "нм/мин", SpeedUnit.NanometerPerMinute)]
        [InlineData("ru-RU", "нм/с", SpeedUnit.NanometerPerSecond)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, SpeedUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Speed.TryParseUnit(abbreviation, out SpeedUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm/h", SpeedUnit.CentimeterPerHour)]
        [InlineData("en-US", "cm/min", SpeedUnit.CentimeterPerMinute)]
        [InlineData("en-US", "cm/s", SpeedUnit.CentimeterPerSecond)]
        [InlineData("en-US", "dm/min", SpeedUnit.DecimeterPerMinute)]
        [InlineData("en-US", "dm/s", SpeedUnit.DecimeterPerSecond)]
        [InlineData("en-US", "ft/h", SpeedUnit.FootPerHour)]
        [InlineData("en-US", "ft/min", SpeedUnit.FootPerMinute)]
        [InlineData("en-US", "ft/s", SpeedUnit.FootPerSecond)]
        [InlineData("en-US", "in/h", SpeedUnit.InchPerHour)]
        [InlineData("en-US", "in/min", SpeedUnit.InchPerMinute)]
        [InlineData("en-US", "in/s", SpeedUnit.InchPerSecond)]
        [InlineData("en-US", "km/h", SpeedUnit.KilometerPerHour)]
        [InlineData("en-US", "km/min", SpeedUnit.KilometerPerMinute)]
        [InlineData("en-US", "km/s", SpeedUnit.KilometerPerSecond)]
        [InlineData("en-US", "kn", SpeedUnit.Knot)]
        [InlineData("en-US", "kt", SpeedUnit.Knot)]
        [InlineData("en-US", "knot", SpeedUnit.Knot)]
        [InlineData("en-US", "knots", SpeedUnit.Knot)]
        [InlineData("en-US", "M", SpeedUnit.Mach)]
        [InlineData("en-US", "Ma", SpeedUnit.Mach)]
        [InlineData("en-US", "MN", SpeedUnit.Mach)]
        [InlineData("en-US", "MACH", SpeedUnit.Mach)]
        [InlineData("en-US", "m/h", SpeedUnit.MeterPerHour)]
        [InlineData("en-US", "m/min", SpeedUnit.MeterPerMinute)]
        [InlineData("en-US", "m/s", SpeedUnit.MeterPerSecond)]
        [InlineData("en-US", "µm/min", SpeedUnit.MicrometerPerMinute)]
        [InlineData("en-US", "µm/s", SpeedUnit.MicrometerPerSecond)]
        [InlineData("en-US", "mph", SpeedUnit.MilePerHour)]
        [InlineData("en-US", "mm/h", SpeedUnit.MillimeterPerHour)]
        [InlineData("en-US", "mm/min", SpeedUnit.MillimeterPerMinute)]
        [InlineData("en-US", "mm/s", SpeedUnit.MillimeterPerSecond)]
        [InlineData("en-US", "nm/min", SpeedUnit.NanometerPerMinute)]
        [InlineData("en-US", "nm/s", SpeedUnit.NanometerPerSecond)]
        [InlineData("en-US", "ftUS/h", SpeedUnit.UsSurveyFootPerHour)]
        [InlineData("en-US", "ftUS/min", SpeedUnit.UsSurveyFootPerMinute)]
        [InlineData("en-US", "ftUS/s", SpeedUnit.UsSurveyFootPerSecond)]
        [InlineData("en-US", "yd/h", SpeedUnit.YardPerHour)]
        [InlineData("en-US", "yd/min", SpeedUnit.YardPerMinute)]
        [InlineData("en-US", "yd/s", SpeedUnit.YardPerSecond)]
        [InlineData("ru-RU", "см/ч", SpeedUnit.CentimeterPerHour)]
        [InlineData("ru-RU", "см/мин", SpeedUnit.CentimeterPerMinute)]
        [InlineData("ru-RU", "см/с", SpeedUnit.CentimeterPerSecond)]
        [InlineData("ru-RU", "дм/мин", SpeedUnit.DecimeterPerMinute)]
        [InlineData("ru-RU", "дм/с", SpeedUnit.DecimeterPerSecond)]
        [InlineData("ru-RU", "фут/ч", SpeedUnit.FootPerHour)]
        [InlineData("ru-RU", "фут/мин", SpeedUnit.FootPerMinute)]
        [InlineData("ru-RU", "фут/с", SpeedUnit.FootPerSecond)]
        [InlineData("ru-RU", "км/ч", SpeedUnit.KilometerPerHour)]
        [InlineData("ru-RU", "км/мин", SpeedUnit.KilometerPerMinute)]
        [InlineData("ru-RU", "км/с", SpeedUnit.KilometerPerSecond)]
        [InlineData("ru-RU", "уз.", SpeedUnit.Knot)]
        [InlineData("ru-RU", "мах", SpeedUnit.Mach)]
        [InlineData("ru-RU", "м/ч", SpeedUnit.MeterPerHour)]
        [InlineData("ru-RU", "м/мин", SpeedUnit.MeterPerMinute)]
        [InlineData("ru-RU", "м/с", SpeedUnit.MeterPerSecond)]
        [InlineData("ru-RU", "мкм/мин", SpeedUnit.MicrometerPerMinute)]
        [InlineData("ru-RU", "мкм/с", SpeedUnit.MicrometerPerSecond)]
        [InlineData("ru-RU", "миль/ч", SpeedUnit.MilePerHour)]
        [InlineData("ru-RU", "мм/ч", SpeedUnit.MillimeterPerHour)]
        [InlineData("ru-RU", "мм/мин", SpeedUnit.MillimeterPerMinute)]
        [InlineData("ru-RU", "мм/с", SpeedUnit.MillimeterPerSecond)]
        [InlineData("ru-RU", "нм/мин", SpeedUnit.NanometerPerMinute)]
        [InlineData("ru-RU", "нм/с", SpeedUnit.NanometerPerSecond)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, SpeedUnit expectedUnit)
        {
            Assert.True(Speed.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out SpeedUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", SpeedUnit.CentimeterPerHour, "cm/h")]
        [InlineData("en-US", SpeedUnit.CentimeterPerMinute, "cm/min")]
        [InlineData("en-US", SpeedUnit.CentimeterPerSecond, "cm/s")]
        [InlineData("en-US", SpeedUnit.DecimeterPerMinute, "dm/min")]
        [InlineData("en-US", SpeedUnit.DecimeterPerSecond, "dm/s")]
        [InlineData("en-US", SpeedUnit.FootPerHour, "ft/h")]
        [InlineData("en-US", SpeedUnit.FootPerMinute, "ft/min")]
        [InlineData("en-US", SpeedUnit.FootPerSecond, "ft/s")]
        [InlineData("en-US", SpeedUnit.InchPerHour, "in/h")]
        [InlineData("en-US", SpeedUnit.InchPerMinute, "in/min")]
        [InlineData("en-US", SpeedUnit.InchPerSecond, "in/s")]
        [InlineData("en-US", SpeedUnit.KilometerPerHour, "km/h")]
        [InlineData("en-US", SpeedUnit.KilometerPerMinute, "km/min")]
        [InlineData("en-US", SpeedUnit.KilometerPerSecond, "km/s")]
        [InlineData("en-US", SpeedUnit.Knot, "kn")]
        [InlineData("en-US", SpeedUnit.Mach, "M")]
        [InlineData("en-US", SpeedUnit.MeterPerHour, "m/h")]
        [InlineData("en-US", SpeedUnit.MeterPerMinute, "m/min")]
        [InlineData("en-US", SpeedUnit.MeterPerSecond, "m/s")]
        [InlineData("en-US", SpeedUnit.MicrometerPerMinute, "µm/min")]
        [InlineData("en-US", SpeedUnit.MicrometerPerSecond, "µm/s")]
        [InlineData("en-US", SpeedUnit.MilePerHour, "mph")]
        [InlineData("en-US", SpeedUnit.MillimeterPerHour, "mm/h")]
        [InlineData("en-US", SpeedUnit.MillimeterPerMinute, "mm/min")]
        [InlineData("en-US", SpeedUnit.MillimeterPerSecond, "mm/s")]
        [InlineData("en-US", SpeedUnit.NanometerPerMinute, "nm/min")]
        [InlineData("en-US", SpeedUnit.NanometerPerSecond, "nm/s")]
        [InlineData("en-US", SpeedUnit.UsSurveyFootPerHour, "ftUS/h")]
        [InlineData("en-US", SpeedUnit.UsSurveyFootPerMinute, "ftUS/min")]
        [InlineData("en-US", SpeedUnit.UsSurveyFootPerSecond, "ftUS/s")]
        [InlineData("en-US", SpeedUnit.YardPerHour, "yd/h")]
        [InlineData("en-US", SpeedUnit.YardPerMinute, "yd/min")]
        [InlineData("en-US", SpeedUnit.YardPerSecond, "yd/s")]
        [InlineData("ru-RU", SpeedUnit.CentimeterPerHour, "см/ч")]
        [InlineData("ru-RU", SpeedUnit.CentimeterPerMinute, "см/мин")]
        [InlineData("ru-RU", SpeedUnit.CentimeterPerSecond, "см/с")]
        [InlineData("ru-RU", SpeedUnit.DecimeterPerMinute, "дм/мин")]
        [InlineData("ru-RU", SpeedUnit.DecimeterPerSecond, "дм/с")]
        [InlineData("ru-RU", SpeedUnit.FootPerHour, "фут/ч")]
        [InlineData("ru-RU", SpeedUnit.FootPerMinute, "фут/мин")]
        [InlineData("ru-RU", SpeedUnit.FootPerSecond, "фут/с")]
        [InlineData("ru-RU", SpeedUnit.KilometerPerHour, "км/ч")]
        [InlineData("ru-RU", SpeedUnit.KilometerPerMinute, "км/мин")]
        [InlineData("ru-RU", SpeedUnit.KilometerPerSecond, "км/с")]
        [InlineData("ru-RU", SpeedUnit.Knot, "уз.")]
        [InlineData("ru-RU", SpeedUnit.Mach, "мах")]
        [InlineData("ru-RU", SpeedUnit.MeterPerHour, "м/ч")]
        [InlineData("ru-RU", SpeedUnit.MeterPerMinute, "м/мин")]
        [InlineData("ru-RU", SpeedUnit.MeterPerSecond, "м/с")]
        [InlineData("ru-RU", SpeedUnit.MicrometerPerMinute, "мкм/мин")]
        [InlineData("ru-RU", SpeedUnit.MicrometerPerSecond, "мкм/с")]
        [InlineData("ru-RU", SpeedUnit.MilePerHour, "миль/ч")]
        [InlineData("ru-RU", SpeedUnit.MillimeterPerHour, "мм/ч")]
        [InlineData("ru-RU", SpeedUnit.MillimeterPerMinute, "мм/мин")]
        [InlineData("ru-RU", SpeedUnit.MillimeterPerSecond, "мм/с")]
        [InlineData("ru-RU", SpeedUnit.NanometerPerMinute, "нм/мин")]
        [InlineData("ru-RU", SpeedUnit.NanometerPerSecond, "нм/с")]
        public void GetAbbreviationForCulture(string culture, SpeedUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Speed.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Speed.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Speed.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(SpeedUnit unit)
        {
            var inBaseUnits = Speed.From(1.0, Speed.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(SpeedUnit unit)
        {
            var quantity = Speed.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(SpeedUnit unit)
        {
            Assert.All(Speed.Units.Where(u => u != Speed.BaseUnit), fromUnit =>
            {
                var quantity = Speed.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(SpeedUnit unit)
        {
            var quantity = default(Speed);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(SpeedUnit unit)
        {
            var quantity = Speed.From(3, Speed.BaseUnit);
            Speed expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<SpeedUnit> quantityToConvert = quantity;
                IQuantity<SpeedUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(1, Speed.FromCentimetersPerHour(meterpersecond.CentimetersPerHour).MetersPerSecond, CentimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromCentimetersPerMinute(meterpersecond.CentimetersPerMinute).MetersPerSecond, CentimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromCentimetersPerSecond(meterpersecond.CentimetersPerSecond).MetersPerSecond, CentimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecimetersPerMinute(meterpersecond.DecimetersPerMinute).MetersPerSecond, DecimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromDecimetersPerSecond(meterpersecond.DecimetersPerSecond).MetersPerSecond, DecimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFeetPerHour(meterpersecond.FeetPerHour).MetersPerSecond, FeetPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFeetPerMinute(meterpersecond.FeetPerMinute).MetersPerSecond, FeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromFeetPerSecond(meterpersecond.FeetPerSecond).MetersPerSecond, FeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromInchesPerHour(meterpersecond.InchesPerHour).MetersPerSecond, InchesPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromInchesPerMinute(meterpersecond.InchesPerMinute).MetersPerSecond, InchesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromInchesPerSecond(meterpersecond.InchesPerSecond).MetersPerSecond, InchesPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKilometersPerHour(meterpersecond.KilometersPerHour).MetersPerSecond, KilometersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKilometersPerMinute(meterpersecond.KilometersPerMinute).MetersPerSecond, KilometersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKilometersPerSecond(meterpersecond.KilometersPerSecond).MetersPerSecond, KilometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromKnots(meterpersecond.Knots).MetersPerSecond, KnotsTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMach(meterpersecond.Mach).MetersPerSecond, MachTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMetersPerHour(meterpersecond.MetersPerHour).MetersPerSecond, MetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMetersPerMinute(meterpersecond.MetersPerMinute).MetersPerSecond, MetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMetersPerSecond(meterpersecond.MetersPerSecond).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMicrometersPerMinute(meterpersecond.MicrometersPerMinute).MetersPerSecond, MicrometersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMicrometersPerSecond(meterpersecond.MicrometersPerSecond).MetersPerSecond, MicrometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMilesPerHour(meterpersecond.MilesPerHour).MetersPerSecond, MilesPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMillimetersPerHour(meterpersecond.MillimetersPerHour).MetersPerSecond, MillimetersPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMillimetersPerMinute(meterpersecond.MillimetersPerMinute).MetersPerSecond, MillimetersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromMillimetersPerSecond(meterpersecond.MillimetersPerSecond).MetersPerSecond, MillimetersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromNanometersPerMinute(meterpersecond.NanometersPerMinute).MetersPerSecond, NanometersPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromNanometersPerSecond(meterpersecond.NanometersPerSecond).MetersPerSecond, NanometersPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromUsSurveyFeetPerHour(meterpersecond.UsSurveyFeetPerHour).MetersPerSecond, UsSurveyFeetPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromUsSurveyFeetPerMinute(meterpersecond.UsSurveyFeetPerMinute).MetersPerSecond, UsSurveyFeetPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromUsSurveyFeetPerSecond(meterpersecond.UsSurveyFeetPerSecond).MetersPerSecond, UsSurveyFeetPerSecondTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYardsPerHour(meterpersecond.YardsPerHour).MetersPerSecond, YardsPerHourTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYardsPerMinute(meterpersecond.YardsPerMinute).MetersPerSecond, YardsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Speed.FromYardsPerSecond(meterpersecond.YardsPerSecond).MetersPerSecond, YardsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Speed v = Speed.FromMetersPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (Speed.FromMetersPerSecond(3)-v).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, (Speed.FromMetersPerSecond(10)/5).MetersPerSecond, MetersPerSecondTolerance);
            AssertEx.EqualTolerance(2, Speed.FromMetersPerSecond(10)/Speed.FromMetersPerSecond(5), MetersPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Speed oneMeterPerSecond = Speed.FromMetersPerSecond(1);
            Speed twoMetersPerSecond = Speed.FromMetersPerSecond(2);

            Assert.True(oneMeterPerSecond < twoMetersPerSecond);
            Assert.True(oneMeterPerSecond <= twoMetersPerSecond);
            Assert.True(twoMetersPerSecond > oneMeterPerSecond);
            Assert.True(twoMetersPerSecond >= oneMeterPerSecond);

            Assert.False(oneMeterPerSecond > twoMetersPerSecond);
            Assert.False(oneMeterPerSecond >= twoMetersPerSecond);
            Assert.False(twoMetersPerSecond < oneMeterPerSecond);
            Assert.False(twoMetersPerSecond <= oneMeterPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.Equal(0, meterpersecond.CompareTo(meterpersecond));
            Assert.True(meterpersecond.CompareTo(Speed.Zero) > 0);
            Assert.True(Speed.Zero.CompareTo(meterpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.Throws<ArgumentException>(() => meterpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => meterpersecond.CompareTo(null));
        }

        [Theory]
        [InlineData(1, SpeedUnit.MeterPerSecond, 1, SpeedUnit.MeterPerSecond, true)]  // Same value and unit.
        [InlineData(1, SpeedUnit.MeterPerSecond, 2, SpeedUnit.MeterPerSecond, false)] // Different value.
        [InlineData(2, SpeedUnit.MeterPerSecond, 1, SpeedUnit.CentimeterPerHour, false)] // Different value and unit.
        [InlineData(1, SpeedUnit.MeterPerSecond, 1, SpeedUnit.CentimeterPerHour, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, SpeedUnit unitA, double valueB, SpeedUnit unitB, bool expectEqual)
        {
            var a = new Speed(valueA, unitA);
            var b = new Speed(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Speed.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.False(meterpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Speed meterpersecond = Speed.FromMetersPerSecond(1);
            Assert.False(meterpersecond.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Speed.FromMetersPerSecond(firstValue);
            var otherQuantity = Speed.FromMetersPerSecond(secondValue);
            Speed maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, Speed.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Speed.FromMetersPerSecond(1);
            var negativeTolerance = Speed.FromMetersPerSecond(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<SpeedUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Speed.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cm/h", new Speed(1, SpeedUnit.CentimeterPerHour).ToString());
            Assert.Equal("1 cm/min", new Speed(1, SpeedUnit.CentimeterPerMinute).ToString());
            Assert.Equal("1 cm/s", new Speed(1, SpeedUnit.CentimeterPerSecond).ToString());
            Assert.Equal("1 dm/min", new Speed(1, SpeedUnit.DecimeterPerMinute).ToString());
            Assert.Equal("1 dm/s", new Speed(1, SpeedUnit.DecimeterPerSecond).ToString());
            Assert.Equal("1 ft/h", new Speed(1, SpeedUnit.FootPerHour).ToString());
            Assert.Equal("1 ft/min", new Speed(1, SpeedUnit.FootPerMinute).ToString());
            Assert.Equal("1 ft/s", new Speed(1, SpeedUnit.FootPerSecond).ToString());
            Assert.Equal("1 in/h", new Speed(1, SpeedUnit.InchPerHour).ToString());
            Assert.Equal("1 in/min", new Speed(1, SpeedUnit.InchPerMinute).ToString());
            Assert.Equal("1 in/s", new Speed(1, SpeedUnit.InchPerSecond).ToString());
            Assert.Equal("1 km/h", new Speed(1, SpeedUnit.KilometerPerHour).ToString());
            Assert.Equal("1 km/min", new Speed(1, SpeedUnit.KilometerPerMinute).ToString());
            Assert.Equal("1 km/s", new Speed(1, SpeedUnit.KilometerPerSecond).ToString());
            Assert.Equal("1 kn", new Speed(1, SpeedUnit.Knot).ToString());
            Assert.Equal("1 M", new Speed(1, SpeedUnit.Mach).ToString());
            Assert.Equal("1 m/h", new Speed(1, SpeedUnit.MeterPerHour).ToString());
            Assert.Equal("1 m/min", new Speed(1, SpeedUnit.MeterPerMinute).ToString());
            Assert.Equal("1 m/s", new Speed(1, SpeedUnit.MeterPerSecond).ToString());
            Assert.Equal("1 µm/min", new Speed(1, SpeedUnit.MicrometerPerMinute).ToString());
            Assert.Equal("1 µm/s", new Speed(1, SpeedUnit.MicrometerPerSecond).ToString());
            Assert.Equal("1 mph", new Speed(1, SpeedUnit.MilePerHour).ToString());
            Assert.Equal("1 mm/h", new Speed(1, SpeedUnit.MillimeterPerHour).ToString());
            Assert.Equal("1 mm/min", new Speed(1, SpeedUnit.MillimeterPerMinute).ToString());
            Assert.Equal("1 mm/s", new Speed(1, SpeedUnit.MillimeterPerSecond).ToString());
            Assert.Equal("1 nm/min", new Speed(1, SpeedUnit.NanometerPerMinute).ToString());
            Assert.Equal("1 nm/s", new Speed(1, SpeedUnit.NanometerPerSecond).ToString());
            Assert.Equal("1 ftUS/h", new Speed(1, SpeedUnit.UsSurveyFootPerHour).ToString());
            Assert.Equal("1 ftUS/min", new Speed(1, SpeedUnit.UsSurveyFootPerMinute).ToString());
            Assert.Equal("1 ftUS/s", new Speed(1, SpeedUnit.UsSurveyFootPerSecond).ToString());
            Assert.Equal("1 yd/h", new Speed(1, SpeedUnit.YardPerHour).ToString());
            Assert.Equal("1 yd/min", new Speed(1, SpeedUnit.YardPerMinute).ToString());
            Assert.Equal("1 yd/s", new Speed(1, SpeedUnit.YardPerSecond).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cm/h", new Speed(1, SpeedUnit.CentimeterPerHour).ToString(swedishCulture));
            Assert.Equal("1 cm/min", new Speed(1, SpeedUnit.CentimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 cm/s", new Speed(1, SpeedUnit.CentimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 dm/min", new Speed(1, SpeedUnit.DecimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 dm/s", new Speed(1, SpeedUnit.DecimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 ft/h", new Speed(1, SpeedUnit.FootPerHour).ToString(swedishCulture));
            Assert.Equal("1 ft/min", new Speed(1, SpeedUnit.FootPerMinute).ToString(swedishCulture));
            Assert.Equal("1 ft/s", new Speed(1, SpeedUnit.FootPerSecond).ToString(swedishCulture));
            Assert.Equal("1 in/h", new Speed(1, SpeedUnit.InchPerHour).ToString(swedishCulture));
            Assert.Equal("1 in/min", new Speed(1, SpeedUnit.InchPerMinute).ToString(swedishCulture));
            Assert.Equal("1 in/s", new Speed(1, SpeedUnit.InchPerSecond).ToString(swedishCulture));
            Assert.Equal("1 km/h", new Speed(1, SpeedUnit.KilometerPerHour).ToString(swedishCulture));
            Assert.Equal("1 km/min", new Speed(1, SpeedUnit.KilometerPerMinute).ToString(swedishCulture));
            Assert.Equal("1 km/s", new Speed(1, SpeedUnit.KilometerPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kn", new Speed(1, SpeedUnit.Knot).ToString(swedishCulture));
            Assert.Equal("1 M", new Speed(1, SpeedUnit.Mach).ToString(swedishCulture));
            Assert.Equal("1 m/h", new Speed(1, SpeedUnit.MeterPerHour).ToString(swedishCulture));
            Assert.Equal("1 m/min", new Speed(1, SpeedUnit.MeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 m/s", new Speed(1, SpeedUnit.MeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 µm/min", new Speed(1, SpeedUnit.MicrometerPerMinute).ToString(swedishCulture));
            Assert.Equal("1 µm/s", new Speed(1, SpeedUnit.MicrometerPerSecond).ToString(swedishCulture));
            Assert.Equal("1 mph", new Speed(1, SpeedUnit.MilePerHour).ToString(swedishCulture));
            Assert.Equal("1 mm/h", new Speed(1, SpeedUnit.MillimeterPerHour).ToString(swedishCulture));
            Assert.Equal("1 mm/min", new Speed(1, SpeedUnit.MillimeterPerMinute).ToString(swedishCulture));
            Assert.Equal("1 mm/s", new Speed(1, SpeedUnit.MillimeterPerSecond).ToString(swedishCulture));
            Assert.Equal("1 nm/min", new Speed(1, SpeedUnit.NanometerPerMinute).ToString(swedishCulture));
            Assert.Equal("1 nm/s", new Speed(1, SpeedUnit.NanometerPerSecond).ToString(swedishCulture));
            Assert.Equal("1 ftUS/h", new Speed(1, SpeedUnit.UsSurveyFootPerHour).ToString(swedishCulture));
            Assert.Equal("1 ftUS/min", new Speed(1, SpeedUnit.UsSurveyFootPerMinute).ToString(swedishCulture));
            Assert.Equal("1 ftUS/s", new Speed(1, SpeedUnit.UsSurveyFootPerSecond).ToString(swedishCulture));
            Assert.Equal("1 yd/h", new Speed(1, SpeedUnit.YardPerHour).ToString(swedishCulture));
            Assert.Equal("1 yd/min", new Speed(1, SpeedUnit.YardPerMinute).ToString(swedishCulture));
            Assert.Equal("1 yd/s", new Speed(1, SpeedUnit.YardPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s1"));
            Assert.Equal("0.12 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s2"));
            Assert.Equal("0.123 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s3"));
            Assert.Equal("0.1235 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 m/s", new Speed(0.123456, SpeedUnit.MeterPerSecond).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Speed.FromMetersPerSecond(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Speed.FromMetersPerSecond(value);
            Assert.Equal(Speed.FromMetersPerSecond(-value), -quantity);
        }
    }
}
