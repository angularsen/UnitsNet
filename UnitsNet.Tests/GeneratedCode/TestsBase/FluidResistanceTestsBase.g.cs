//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of FluidResistance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class FluidResistanceTestsBase : QuantityTestsBase
    {
        protected abstract double DyneSecondsPerCentimeterToTheFifthInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MegapascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercuryMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercuryMinutesPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercuryMinutesPerLiterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercuryMinutesPerMilliliterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercurySecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercurySecondsPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercurySecondsPerLiterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double MillimeterMercurySecondsPerMilliliterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalMinutesPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalMinutesPerLiterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalMinutesPerMilliliterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalSecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalSecondsPerLiterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double PascalSecondsPerMilliliterInOnePascalSecondPerCubicMeter { get; }
        protected abstract double WoodUnitsInOnePascalSecondPerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DyneSecondsPerCentimeterToTheFifthTolerance { get { return 1e-5; } }
        protected virtual double MegapascalSecondsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercuryMinutesPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercuryMinutesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercuryMinutesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercuryMinutesPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercurySecondsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercurySecondsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercurySecondsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MillimeterMercurySecondsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PascalMinutesPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PascalMinutesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PascalMinutesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PascalMinutesPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PascalSecondsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PascalSecondsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PascalSecondsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PascalSecondsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double WoodUnitsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(FluidResistanceUnit unit)
        {
            return unit switch
            {
                FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth => (DyneSecondsPerCentimeterToTheFifthInOnePascalSecondPerCubicMeter, DyneSecondsPerCentimeterToTheFifthTolerance),
                FluidResistanceUnit.MegapascalSecondPerCubicMeter => (MegapascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance),
                FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter => (MillimeterMercuryMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance),
                FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter => (MillimeterMercuryMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance),
                FluidResistanceUnit.MillimeterMercuryMinutePerLiter => (MillimeterMercuryMinutesPerLiterInOnePascalSecondPerCubicMeter, MillimeterMercuryMinutesPerLiterTolerance),
                FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter => (MillimeterMercuryMinutesPerMilliliterInOnePascalSecondPerCubicMeter, MillimeterMercuryMinutesPerMilliliterTolerance),
                FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter => (MillimeterMercurySecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, MillimeterMercurySecondsPerCubicCentimeterTolerance),
                FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter => (MillimeterMercurySecondsPerCubicMeterInOnePascalSecondPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance),
                FluidResistanceUnit.MillimeterMercurySecondPerLiter => (MillimeterMercurySecondsPerLiterInOnePascalSecondPerCubicMeter, MillimeterMercurySecondsPerLiterTolerance),
                FluidResistanceUnit.MillimeterMercurySecondPerMilliliter => (MillimeterMercurySecondsPerMilliliterInOnePascalSecondPerCubicMeter, MillimeterMercurySecondsPerMilliliterTolerance),
                FluidResistanceUnit.PascalMinutePerCubicCentimeter => (PascalMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, PascalMinutesPerCubicCentimeterTolerance),
                FluidResistanceUnit.PascalMinutePerCubicMeter => (PascalMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, PascalMinutesPerCubicMeterTolerance),
                FluidResistanceUnit.PascalMinutePerLiter => (PascalMinutesPerLiterInOnePascalSecondPerCubicMeter, PascalMinutesPerLiterTolerance),
                FluidResistanceUnit.PascalMinutePerMilliliter => (PascalMinutesPerMilliliterInOnePascalSecondPerCubicMeter, PascalMinutesPerMilliliterTolerance),
                FluidResistanceUnit.PascalSecondPerCubicCentimeter => (PascalSecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, PascalSecondsPerCubicCentimeterTolerance),
                FluidResistanceUnit.PascalSecondPerCubicMeter => (PascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, PascalSecondsPerCubicMeterTolerance),
                FluidResistanceUnit.PascalSecondPerLiter => (PascalSecondsPerLiterInOnePascalSecondPerCubicMeter, PascalSecondsPerLiterTolerance),
                FluidResistanceUnit.PascalSecondPerMilliliter => (PascalSecondsPerMilliliterInOnePascalSecondPerCubicMeter, PascalSecondsPerMilliliterTolerance),
                FluidResistanceUnit.WoodUnit => (WoodUnitsInOnePascalSecondPerCubicMeter, WoodUnitsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth },
            new object[] { FluidResistanceUnit.MegapascalSecondPerCubicMeter },
            new object[] { FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter },
            new object[] { FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter },
            new object[] { FluidResistanceUnit.MillimeterMercuryMinutePerLiter },
            new object[] { FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter },
            new object[] { FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter },
            new object[] { FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter },
            new object[] { FluidResistanceUnit.MillimeterMercurySecondPerLiter },
            new object[] { FluidResistanceUnit.MillimeterMercurySecondPerMilliliter },
            new object[] { FluidResistanceUnit.PascalMinutePerCubicCentimeter },
            new object[] { FluidResistanceUnit.PascalMinutePerCubicMeter },
            new object[] { FluidResistanceUnit.PascalMinutePerLiter },
            new object[] { FluidResistanceUnit.PascalMinutePerMilliliter },
            new object[] { FluidResistanceUnit.PascalSecondPerCubicCentimeter },
            new object[] { FluidResistanceUnit.PascalSecondPerCubicMeter },
            new object[] { FluidResistanceUnit.PascalSecondPerLiter },
            new object[] { FluidResistanceUnit.PascalSecondPerMilliliter },
            new object[] { FluidResistanceUnit.WoodUnit },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new FluidResistance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new FluidResistance(double.PositiveInfinity, FluidResistanceUnit.PascalSecondPerCubicMeter));
            Assert.Throws<ArgumentException>(() => new FluidResistance(double.NegativeInfinity, FluidResistanceUnit.PascalSecondPerCubicMeter));
        }

        [Fact]
        public void Ctor_WithNaNValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => new FluidResistance(double.NaN, FluidResistanceUnit.PascalSecondPerCubicMeter));
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new FluidResistance(value: 1, unitSystem: null));
        }

        [Fact]
        public void Ctor_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            Func<object> TestCode = () => new FluidResistance(value: 1, unitSystem: UnitSystem.SI);
            if (SupportsSIUnitSystem)
            {
                var quantity = (FluidResistance) TestCode();
                Assert.Equal(1, quantity.Value);
            }
            else
            {
                Assert.Throws<ArgumentException>(TestCode);
            }
        }

        [Fact]
        public void FluidResistance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicMeter);

            QuantityInfo<FluidResistanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(FluidResistance.Zero, quantityInfo.Zero);
            Assert.Equal("FluidResistance", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<FluidResistanceUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void PascalSecondPerCubicMeterToFluidResistanceUnits()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            AssertEx.EqualTolerance(DyneSecondsPerCentimeterToTheFifthInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
            AssertEx.EqualTolerance(MegapascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MegapascalSecondsPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercuryMinutesPerCubicCentimeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercuryMinutesPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercuryMinutesPerLiter, MillimeterMercuryMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercuryMinutesPerMilliliter, MillimeterMercuryMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercurySecondsPerCubicCentimeter, MillimeterMercurySecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercurySecondsPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercurySecondsPerLiter, MillimeterMercurySecondsPerLiterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.MillimeterMercurySecondsPerMilliliter, MillimeterMercurySecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalMinutesPerCubicCentimeter, PascalMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalMinutesPerCubicMeter, PascalMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalMinutesPerLiter, PascalMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalMinutesPerMilliliter, PascalMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalSecondsPerCubicCentimeter, PascalSecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalSecondsPerLiter, PascalSecondsPerLiterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.PascalSecondsPerMilliliter, PascalSecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(WoodUnitsInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.WoodUnits, WoodUnitsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = FluidResistance.From(1, FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth);
            AssertEx.EqualTolerance(1, quantity00.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
            Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, quantity00.Unit);

            var quantity01 = FluidResistance.From(1, FluidResistanceUnit.MegapascalSecondPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity01.MegapascalSecondsPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance);
            Assert.Equal(FluidResistanceUnit.MegapascalSecondPerCubicMeter, quantity01.Unit);

            var quantity02 = FluidResistance.From(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity02.MillimeterMercuryMinutesPerCubicCentimeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance);
            Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, quantity02.Unit);

            var quantity03 = FluidResistance.From(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter);
            AssertEx.EqualTolerance(1, quantity03.MillimeterMercuryMinutesPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance);
            Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, quantity03.Unit);

            var quantity04 = FluidResistance.From(1, FluidResistanceUnit.MillimeterMercuryMinutePerLiter);
            AssertEx.EqualTolerance(1, quantity04.MillimeterMercuryMinutesPerLiter, MillimeterMercuryMinutesPerLiterTolerance);
            Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerLiter, quantity04.Unit);

            var quantity05 = FluidResistance.From(1, FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter);
            AssertEx.EqualTolerance(1, quantity05.MillimeterMercuryMinutesPerMilliliter, MillimeterMercuryMinutesPerMilliliterTolerance);
            Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, quantity05.Unit);

            var quantity06 = FluidResistance.From(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity06.MillimeterMercurySecondsPerCubicCentimeter, MillimeterMercurySecondsPerCubicCentimeterTolerance);
            Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, quantity06.Unit);

            var quantity07 = FluidResistance.From(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity07.MillimeterMercurySecondsPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance);
            Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, quantity07.Unit);

            var quantity08 = FluidResistance.From(1, FluidResistanceUnit.MillimeterMercurySecondPerLiter);
            AssertEx.EqualTolerance(1, quantity08.MillimeterMercurySecondsPerLiter, MillimeterMercurySecondsPerLiterTolerance);
            Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerLiter, quantity08.Unit);

            var quantity09 = FluidResistance.From(1, FluidResistanceUnit.MillimeterMercurySecondPerMilliliter);
            AssertEx.EqualTolerance(1, quantity09.MillimeterMercurySecondsPerMilliliter, MillimeterMercurySecondsPerMilliliterTolerance);
            Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, quantity09.Unit);

            var quantity10 = FluidResistance.From(1, FluidResistanceUnit.PascalMinutePerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity10.PascalMinutesPerCubicCentimeter, PascalMinutesPerCubicCentimeterTolerance);
            Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicCentimeter, quantity10.Unit);

            var quantity11 = FluidResistance.From(1, FluidResistanceUnit.PascalMinutePerCubicMeter);
            AssertEx.EqualTolerance(1, quantity11.PascalMinutesPerCubicMeter, PascalMinutesPerCubicMeterTolerance);
            Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicMeter, quantity11.Unit);

            var quantity12 = FluidResistance.From(1, FluidResistanceUnit.PascalMinutePerLiter);
            AssertEx.EqualTolerance(1, quantity12.PascalMinutesPerLiter, PascalMinutesPerLiterTolerance);
            Assert.Equal(FluidResistanceUnit.PascalMinutePerLiter, quantity12.Unit);

            var quantity13 = FluidResistance.From(1, FluidResistanceUnit.PascalMinutePerMilliliter);
            AssertEx.EqualTolerance(1, quantity13.PascalMinutesPerMilliliter, PascalMinutesPerMilliliterTolerance);
            Assert.Equal(FluidResistanceUnit.PascalMinutePerMilliliter, quantity13.Unit);

            var quantity14 = FluidResistance.From(1, FluidResistanceUnit.PascalSecondPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity14.PascalSecondsPerCubicCentimeter, PascalSecondsPerCubicCentimeterTolerance);
            Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicCentimeter, quantity14.Unit);

            var quantity15 = FluidResistance.From(1, FluidResistanceUnit.PascalSecondPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity15.PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, quantity15.Unit);

            var quantity16 = FluidResistance.From(1, FluidResistanceUnit.PascalSecondPerLiter);
            AssertEx.EqualTolerance(1, quantity16.PascalSecondsPerLiter, PascalSecondsPerLiterTolerance);
            Assert.Equal(FluidResistanceUnit.PascalSecondPerLiter, quantity16.Unit);

            var quantity17 = FluidResistance.From(1, FluidResistanceUnit.PascalSecondPerMilliliter);
            AssertEx.EqualTolerance(1, quantity17.PascalSecondsPerMilliliter, PascalSecondsPerMilliliterTolerance);
            Assert.Equal(FluidResistanceUnit.PascalSecondPerMilliliter, quantity17.Unit);

            var quantity18 = FluidResistance.From(1, FluidResistanceUnit.WoodUnit);
            AssertEx.EqualTolerance(1, quantity18.WoodUnits, WoodUnitsTolerance);
            Assert.Equal(FluidResistanceUnit.WoodUnit, quantity18.Unit);

        }

        [Fact]
        public void FromPascalSecondsPerCubicMeter_WithInfinityValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => FluidResistance.FromPascalSecondsPerCubicMeter(double.PositiveInfinity));
            Assert.Throws<ArgumentException>(() => FluidResistance.FromPascalSecondsPerCubicMeter(double.NegativeInfinity));
        }

        [Fact]
        public void FromPascalSecondsPerCubicMeter_WithNanValue_ThrowsArgumentException()
        {
            Assert.Throws<ArgumentException>(() => FluidResistance.FromPascalSecondsPerCubicMeter(double.NaN));
        }

        [Fact]
        public void As()
        {
            var pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            AssertEx.EqualTolerance(DyneSecondsPerCentimeterToTheFifthInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth), DyneSecondsPerCentimeterToTheFifthTolerance);
            AssertEx.EqualTolerance(MegapascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MegapascalSecondPerCubicMeter), MegapascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter), MillimeterMercuryMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter), MillimeterMercuryMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercuryMinutePerLiter), MillimeterMercuryMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(MillimeterMercuryMinutesPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter), MillimeterMercuryMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter), MillimeterMercurySecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter), MillimeterMercurySecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercurySecondPerLiter), MillimeterMercurySecondsPerLiterTolerance);
            AssertEx.EqualTolerance(MillimeterMercurySecondsPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter), MillimeterMercurySecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalMinutePerCubicCentimeter), PascalMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalMinutePerCubicMeter), PascalMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalMinutePerLiter), PascalMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(PascalMinutesPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalMinutePerMilliliter), PascalMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalSecondPerCubicCentimeter), PascalSecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalSecondPerCubicMeter), PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerLiterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalSecondPerLiter), PascalSecondsPerLiterTolerance);
            AssertEx.EqualTolerance(PascalSecondsPerMilliliterInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.PascalSecondPerMilliliter), PascalSecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(WoodUnitsInOnePascalSecondPerCubicMeter, pascalsecondpercubicmeter.As(FluidResistanceUnit.WoodUnit), WoodUnitsTolerance);
        }

        [Fact]
        public void As_SIUnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new FluidResistance(value: 1, unit: FluidResistance.BaseUnit);
            Func<object> AsWithSIUnitSystem = () => quantity.As(UnitSystem.SI);

            if (SupportsSIUnitSystem)
            {
                var value = Convert.ToDouble(AsWithSIUnitSystem());
                Assert.Equal(1, value);
            }
            else
            {
                Assert.Throws<ArgumentException>(AsWithSIUnitSystem);
            }
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = FluidResistance.Parse("1 dyn·s/cm⁵", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 dyn·s·cm⁻⁵", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 дин·с/см⁵", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 дин·с·см⁻⁵", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 MPa·s/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapascalSecondsPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MegapascalSecondPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 МПа·с/м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MegapascalSecondsPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MegapascalSecondPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 mmHg·min/cm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerCubicCentimeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 мм рт.ст·мин/см³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerCubicCentimeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 mmHg·min/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 мм рт.ст·мин/м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 mmHg·min/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerLiter, MillimeterMercuryMinutesPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 мм рт.ст·мин/л", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerLiter, MillimeterMercuryMinutesPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 mmHg·min/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerMilliliter, MillimeterMercuryMinutesPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 мм рт.ст·мин/мл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerMilliliter, MillimeterMercuryMinutesPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 mmHg·s/cm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerCubicCentimeter, MillimeterMercurySecondsPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 мм рт.ст·с/см³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerCubicCentimeter, MillimeterMercurySecondsPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 mmHg·s/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 мм рт.ст·с/м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 mmHg·s/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerLiter, MillimeterMercurySecondsPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 мм рт.ст·с/л", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerLiter, MillimeterMercurySecondsPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 mmHg·s/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerMilliliter, MillimeterMercurySecondsPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 мм рт.ст·с/мл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerMilliliter, MillimeterMercurySecondsPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Pa·min/cm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerCubicCentimeter, PascalMinutesPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Па·мин/см³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerCubicCentimeter, PascalMinutesPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Pa·min/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerCubicMeter, PascalMinutesPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Па·мин/м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerCubicMeter, PascalMinutesPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Pa·min/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerLiter, PascalMinutesPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Па·мин/л", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerLiter, PascalMinutesPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Pa·min/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerMilliliter, PascalMinutesPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Па·мин/мл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerMilliliter, PascalMinutesPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Pa·s/cm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerCubicCentimeter, PascalSecondsPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Па·с/см³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerCubicCentimeter, PascalSecondsPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Pa·s/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Па·с/м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Pa·s/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerLiter, PascalSecondsPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Па·с/л", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerLiter, PascalSecondsPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Pa·s/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerMilliliter, PascalSecondsPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 Па·с/мл", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerMilliliter, PascalSecondsPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 WU", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WoodUnits, WoodUnitsTolerance);
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 HRU", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WoodUnits, WoodUnitsTolerance);
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 ЕВ", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.WoodUnits, WoodUnitsTolerance);
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = FluidResistance.Parse("1 ЕГС", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.WoodUnits, WoodUnitsTolerance);
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(FluidResistance.TryParse("1 dyn·s/cm⁵", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 dyn·s·cm⁻⁵", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 дин·с/см⁵", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 дин·с·см⁻⁵", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DyneSecondsPerCentimeterToTheFifth, DyneSecondsPerCentimeterToTheFifthTolerance);
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 MPa·s/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapascalSecondsPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MegapascalSecondPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 МПа·с/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapascalSecondsPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MegapascalSecondPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 mmHg·min/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerCubicCentimeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 мм рт.ст·мин/см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerCubicCentimeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 mmHg·min/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 мм рт.ст·мин/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 mmHg·min/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerLiter, MillimeterMercuryMinutesPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerLiter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 мм рт.ст·мин/л", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerLiter, MillimeterMercuryMinutesPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerLiter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 mmHg·min/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerMilliliter, MillimeterMercuryMinutesPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 мм рт.ст·мин/мл", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercuryMinutesPerMilliliter, MillimeterMercuryMinutesPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 mmHg·s/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerCubicCentimeter, MillimeterMercurySecondsPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 мм рт.ст·с/см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerCubicCentimeter, MillimeterMercurySecondsPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 mmHg·s/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 мм рт.ст·с/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 mmHg·s/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerLiter, MillimeterMercurySecondsPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerLiter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 мм рт.ст·с/л", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerLiter, MillimeterMercurySecondsPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerLiter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 mmHg·s/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerMilliliter, MillimeterMercurySecondsPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 мм рт.ст·с/мл", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillimeterMercurySecondsPerMilliliter, MillimeterMercurySecondsPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Pa·min/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerCubicCentimeter, PascalMinutesPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Па·мин/см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerCubicCentimeter, PascalMinutesPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Pa·min/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerCubicMeter, PascalMinutesPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Па·мин/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerCubicMeter, PascalMinutesPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Pa·min/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerLiter, PascalMinutesPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerLiter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Па·мин/л", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerLiter, PascalMinutesPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerLiter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Pa·min/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerMilliliter, PascalMinutesPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerMilliliter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Па·мин/мл", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalMinutesPerMilliliter, PascalMinutesPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalMinutePerMilliliter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Pa·s/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerCubicCentimeter, PascalSecondsPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Па·с/см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerCubicCentimeter, PascalSecondsPerCubicCentimeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Pa·s/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Па·с/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Pa·s/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerLiter, PascalSecondsPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerLiter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Па·с/л", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerLiter, PascalSecondsPerLiterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerLiter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Pa·s/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerMilliliter, PascalSecondsPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 Па·с/мл", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PascalSecondsPerMilliliter, PascalSecondsPerMilliliterTolerance);
                Assert.Equal(FluidResistanceUnit.PascalSecondPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 WU", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WoodUnits, WoodUnitsTolerance);
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 HRU", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WoodUnits, WoodUnitsTolerance);
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 ЕВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WoodUnits, WoodUnitsTolerance);
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsed.Unit);
            }

            {
                Assert.True(FluidResistance.TryParse("1 ЕГС", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WoodUnits, WoodUnitsTolerance);
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsed.Unit);
            }

        }

        [Fact]
        public void ParseUnit()
        {
            try
            {
                var parsedUnit = FluidResistance.ParseUnit("dyn·s/cm⁵", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("dyn·s·cm⁻⁵", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("дин·с/см⁵", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("дин·с·см⁻⁵", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("MPa·s/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.MegapascalSecondPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("МПа·с/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.MegapascalSecondPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("mmHg·min/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("мм рт.ст·мин/см³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("mmHg·min/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("мм рт.ст·мин/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("mmHg·min/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("мм рт.ст·мин/л", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("mmHg·min/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("мм рт.ст·мин/мл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("mmHg·s/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("мм рт.ст·с/см³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("mmHg·s/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("мм рт.ст·с/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("mmHg·s/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("мм рт.ст·с/л", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("mmHg·s/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("мм рт.ст·с/мл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Pa·min/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Па·мин/см³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Pa·min/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Па·мин/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Pa·min/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Па·мин/л", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Pa·min/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Па·мин/мл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Pa·s/cm³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Па·с/см³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicCentimeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Pa·s/m³", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Па·с/м³", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Pa·s/l", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Па·с/л", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerLiter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Pa·s/ml", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("Па·с/мл", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerMilliliter, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("WU", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("HRU", CultureInfo.GetCultureInfo("en-US"));
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("ЕВ", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsedUnit = FluidResistance.ParseUnit("ЕГС", CultureInfo.GetCultureInfo("ru-RU"));
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsedUnit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParseUnit()
        {
            {
                Assert.True(FluidResistance.TryParseUnit("dyn·s/cm⁵", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("dyn·s·cm⁻⁵", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("дин·с/см⁵", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("дин·с·см⁻⁵", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("MPa·s/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MegapascalSecondPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("МПа·с/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MegapascalSecondPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("mmHg·min/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("мм рт.ст·мин/см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("mmHg·min/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("мм рт.ст·мин/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("mmHg·min/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerLiter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("мм рт.ст·мин/л", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerLiter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("mmHg·min/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("мм рт.ст·мин/мл", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("mmHg·s/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("мм рт.ст·с/см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("mmHg·s/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("мм рт.ст·с/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("mmHg·s/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerLiter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("мм рт.ст·с/л", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerLiter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("mmHg·s/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("мм рт.ст·с/мл", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.MillimeterMercurySecondPerMilliliter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Pa·min/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Па·мин/см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Pa·min/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Па·мин/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Pa·min/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerLiter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Па·мин/л", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerLiter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Pa·min/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerMilliliter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Па·мин/мл", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalMinutePerMilliliter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Pa·s/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Па·с/см³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicCentimeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Pa·s/m³", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Па·с/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerCubicMeter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Pa·s/l", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerLiter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Па·с/л", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerLiter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Pa·s/ml", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerMilliliter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("Па·с/мл", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.PascalSecondPerMilliliter, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("WU", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("HRU", CultureInfo.GetCultureInfo("en-US"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("ЕВ", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsedUnit);
            }

            {
                Assert.True(FluidResistance.TryParseUnit("ЕГС", CultureInfo.GetCultureInfo("ru-RU"), out var parsedUnit));
                Assert.Equal(FluidResistanceUnit.WoodUnit, parsedUnit);
            }

        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(FluidResistanceUnit unit)
        {
            var inBaseUnits = FluidResistance.From(1.0, FluidResistance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(FluidResistanceUnit unit)
        {
            var quantity = FluidResistance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(FluidResistanceUnit unit)
        {
            // See if there is a unit available that is not the base unit, fallback to base unit if it has only a single unit.
            var fromUnit = FluidResistance.Units.First(u => u != FluidResistance.BaseUnit);

            var quantity = FluidResistance.From(3.0, fromUnit);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(FluidResistanceUnit unit)
        {
            var quantity = default(FluidResistance);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            AssertEx.EqualTolerance(1, FluidResistance.FromDyneSecondsPerCentimeterToTheFifth(pascalsecondpercubicmeter.DyneSecondsPerCentimeterToTheFifth).PascalSecondsPerCubicMeter, DyneSecondsPerCentimeterToTheFifthTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMegapascalSecondsPerCubicMeter(pascalsecondpercubicmeter.MegapascalSecondsPerCubicMeter).PascalSecondsPerCubicMeter, MegapascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercuryMinutesPerCubicCentimeter(pascalsecondpercubicmeter.MillimeterMercuryMinutesPerCubicCentimeter).PascalSecondsPerCubicMeter, MillimeterMercuryMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercuryMinutesPerCubicMeter(pascalsecondpercubicmeter.MillimeterMercuryMinutesPerCubicMeter).PascalSecondsPerCubicMeter, MillimeterMercuryMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercuryMinutesPerLiter(pascalsecondpercubicmeter.MillimeterMercuryMinutesPerLiter).PascalSecondsPerCubicMeter, MillimeterMercuryMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercuryMinutesPerMilliliter(pascalsecondpercubicmeter.MillimeterMercuryMinutesPerMilliliter).PascalSecondsPerCubicMeter, MillimeterMercuryMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercurySecondsPerCubicCentimeter(pascalsecondpercubicmeter.MillimeterMercurySecondsPerCubicCentimeter).PascalSecondsPerCubicMeter, MillimeterMercurySecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercurySecondsPerCubicMeter(pascalsecondpercubicmeter.MillimeterMercurySecondsPerCubicMeter).PascalSecondsPerCubicMeter, MillimeterMercurySecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercurySecondsPerLiter(pascalsecondpercubicmeter.MillimeterMercurySecondsPerLiter).PascalSecondsPerCubicMeter, MillimeterMercurySecondsPerLiterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromMillimeterMercurySecondsPerMilliliter(pascalsecondpercubicmeter.MillimeterMercurySecondsPerMilliliter).PascalSecondsPerCubicMeter, MillimeterMercurySecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalMinutesPerCubicCentimeter(pascalsecondpercubicmeter.PascalMinutesPerCubicCentimeter).PascalSecondsPerCubicMeter, PascalMinutesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalMinutesPerCubicMeter(pascalsecondpercubicmeter.PascalMinutesPerCubicMeter).PascalSecondsPerCubicMeter, PascalMinutesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalMinutesPerLiter(pascalsecondpercubicmeter.PascalMinutesPerLiter).PascalSecondsPerCubicMeter, PascalMinutesPerLiterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalMinutesPerMilliliter(pascalsecondpercubicmeter.PascalMinutesPerMilliliter).PascalSecondsPerCubicMeter, PascalMinutesPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalSecondsPerCubicCentimeter(pascalsecondpercubicmeter.PascalSecondsPerCubicCentimeter).PascalSecondsPerCubicMeter, PascalSecondsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalSecondsPerCubicMeter(pascalsecondpercubicmeter.PascalSecondsPerCubicMeter).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalSecondsPerLiter(pascalsecondpercubicmeter.PascalSecondsPerLiter).PascalSecondsPerCubicMeter, PascalSecondsPerLiterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromPascalSecondsPerMilliliter(pascalsecondpercubicmeter.PascalSecondsPerMilliliter).PascalSecondsPerCubicMeter, PascalSecondsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, FluidResistance.FromWoodUnits(pascalsecondpercubicmeter.WoodUnits).PascalSecondsPerCubicMeter, WoodUnitsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            FluidResistance v = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            AssertEx.EqualTolerance(-1, -v.PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (FluidResistance.FromPascalSecondsPerCubicMeter(3)-v).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (FluidResistance.FromPascalSecondsPerCubicMeter(10)/5).PascalSecondsPerCubicMeter, PascalSecondsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, FluidResistance.FromPascalSecondsPerCubicMeter(10)/FluidResistance.FromPascalSecondsPerCubicMeter(5), PascalSecondsPerCubicMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            FluidResistance onePascalSecondPerCubicMeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            FluidResistance twoPascalSecondsPerCubicMeter = FluidResistance.FromPascalSecondsPerCubicMeter(2);

            Assert.True(onePascalSecondPerCubicMeter < twoPascalSecondsPerCubicMeter);
            Assert.True(onePascalSecondPerCubicMeter <= twoPascalSecondsPerCubicMeter);
            Assert.True(twoPascalSecondsPerCubicMeter > onePascalSecondPerCubicMeter);
            Assert.True(twoPascalSecondsPerCubicMeter >= onePascalSecondPerCubicMeter);

            Assert.False(onePascalSecondPerCubicMeter > twoPascalSecondsPerCubicMeter);
            Assert.False(onePascalSecondPerCubicMeter >= twoPascalSecondsPerCubicMeter);
            Assert.False(twoPascalSecondsPerCubicMeter < onePascalSecondPerCubicMeter);
            Assert.False(twoPascalSecondsPerCubicMeter <= onePascalSecondPerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.Equal(0, pascalsecondpercubicmeter.CompareTo(pascalsecondpercubicmeter));
            Assert.True(pascalsecondpercubicmeter.CompareTo(FluidResistance.Zero) > 0);
            Assert.True(FluidResistance.Zero.CompareTo(pascalsecondpercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => pascalsecondpercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => pascalsecondpercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, FluidResistanceUnit.PascalSecondPerCubicMeter, 1, FluidResistanceUnit.PascalSecondPerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, FluidResistanceUnit.PascalSecondPerCubicMeter, 2, FluidResistanceUnit.PascalSecondPerCubicMeter, false)] // Different value.
        [InlineData(2, FluidResistanceUnit.PascalSecondPerCubicMeter, 1, FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, false)] // Different value and unit.
        [InlineData(1, FluidResistanceUnit.PascalSecondPerCubicMeter, 1, FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, FluidResistanceUnit unitA, double valueB, FluidResistanceUnit unitB, bool expectEqual)
        {
            var a = new FluidResistance(valueA, unitA);
            var b = new FluidResistance(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = FluidResistance.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.True(v.Equals(FluidResistance.FromPascalSecondsPerCubicMeter(1), PascalSecondsPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(FluidResistance.Zero, PascalSecondsPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.True(FluidResistance.FromPascalSecondsPerCubicMeter(100).Equals(FluidResistance.FromPascalSecondsPerCubicMeter(120), (double)0.3m, ComparisonType.Relative));
            Assert.False(FluidResistance.FromPascalSecondsPerCubicMeter(100).Equals(FluidResistance.FromPascalSecondsPerCubicMeter(120), (double)0.1m, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(FluidResistance.FromPascalSecondsPerCubicMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.False(pascalsecondpercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            FluidResistance pascalsecondpercubicmeter = FluidResistance.FromPascalSecondsPerCubicMeter(1);
            Assert.False(pascalsecondpercubicmeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(FluidResistanceUnit)).Cast<FluidResistanceUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(FluidResistance.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 dyn·s/cm⁵", new FluidResistance(1, FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth).ToString());
            Assert.Equal("1 MPa·s/m³", new FluidResistance(1, FluidResistanceUnit.MegapascalSecondPerCubicMeter).ToString());
            Assert.Equal("1 mmHg·min/cm³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter).ToString());
            Assert.Equal("1 mmHg·min/m³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter).ToString());
            Assert.Equal("1 mmHg·min/l", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerLiter).ToString());
            Assert.Equal("1 mmHg·min/ml", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter).ToString());
            Assert.Equal("1 mmHg·s/cm³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter).ToString());
            Assert.Equal("1 mmHg·s/m³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter).ToString());
            Assert.Equal("1 mmHg·s/l", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerLiter).ToString());
            Assert.Equal("1 mmHg·s/ml", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerMilliliter).ToString());
            Assert.Equal("1 Pa·min/cm³", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerCubicCentimeter).ToString());
            Assert.Equal("1 Pa·min/m³", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerCubicMeter).ToString());
            Assert.Equal("1 Pa·min/l", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerLiter).ToString());
            Assert.Equal("1 Pa·min/ml", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerMilliliter).ToString());
            Assert.Equal("1 Pa·s/cm³", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicCentimeter).ToString());
            Assert.Equal("1 Pa·s/m³", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString());
            Assert.Equal("1 Pa·s/l", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerLiter).ToString());
            Assert.Equal("1 Pa·s/ml", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerMilliliter).ToString());
            Assert.Equal("1 WU", new FluidResistance(1, FluidResistanceUnit.WoodUnit).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 dyn·s/cm⁵", new FluidResistance(1, FluidResistanceUnit.DyneSecondPerCentimeterToTheFifth).ToString(swedishCulture));
            Assert.Equal("1 MPa·s/m³", new FluidResistance(1, FluidResistanceUnit.MegapascalSecondPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·min/cm³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·min/m³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·min/l", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerLiter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·min/ml", new FluidResistance(1, FluidResistanceUnit.MillimeterMercuryMinutePerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·s/cm³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·s/m³", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·s/l", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerLiter).ToString(swedishCulture));
            Assert.Equal("1 mmHg·s/ml", new FluidResistance(1, FluidResistanceUnit.MillimeterMercurySecondPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 Pa·min/cm³", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Pa·min/m³", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 Pa·min/l", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerLiter).ToString(swedishCulture));
            Assert.Equal("1 Pa·min/ml", new FluidResistance(1, FluidResistanceUnit.PascalMinutePerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 Pa·s/cm³", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Pa·s/m³", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 Pa·s/l", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerLiter).ToString(swedishCulture));
            Assert.Equal("1 Pa·s/ml", new FluidResistance(1, FluidResistanceUnit.PascalSecondPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 WU", new FluidResistance(1, FluidResistanceUnit.WoodUnit).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s1"));
            Assert.Equal("0.12 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s2"));
            Assert.Equal("0.123 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s3"));
            Assert.Equal("0.1235 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 Pa·s/m³", new FluidResistance(0.123456, FluidResistanceUnit.PascalSecondPerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("g", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void Convert_ToBool_ThrowsInvalidCastException()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToBoolean(quantity));
        }

        [Fact]
        public void Convert_ToByte_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
           Assert.Equal((byte)quantity.Value, Convert.ToByte(quantity));
        }

        [Fact]
        public void Convert_ToChar_ThrowsInvalidCastException()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToChar(quantity));
        }

        [Fact]
        public void Convert_ToDateTime_ThrowsInvalidCastException()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ToDateTime(quantity));
        }

        [Fact]
        public void Convert_ToDecimal_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((decimal)quantity.Value, Convert.ToDecimal(quantity));
        }

        [Fact]
        public void Convert_ToDouble_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((double)quantity.Value, Convert.ToDouble(quantity));
        }

        [Fact]
        public void Convert_ToInt16_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((short)quantity.Value, Convert.ToInt16(quantity));
        }

        [Fact]
        public void Convert_ToInt32_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((int)quantity.Value, Convert.ToInt32(quantity));
        }

        [Fact]
        public void Convert_ToInt64_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((long)quantity.Value, Convert.ToInt64(quantity));
        }

        [Fact]
        public void Convert_ToSByte_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((sbyte)quantity.Value, Convert.ToSByte(quantity));
        }

        [Fact]
        public void Convert_ToSingle_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((float)quantity.Value, Convert.ToSingle(quantity));
        }

        [Fact]
        public void Convert_ToString_EqualsToString()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(), Convert.ToString(quantity));
        }

        [Fact]
        public void Convert_ToUInt16_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((ushort)quantity.Value, Convert.ToUInt16(quantity));
        }

        [Fact]
        public void Convert_ToUInt32_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((uint)quantity.Value, Convert.ToUInt32(quantity));
        }

        [Fact]
        public void Convert_ToUInt64_EqualsValueAsSameType()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal((ulong)quantity.Value, Convert.ToUInt64(quantity));
        }

        [Fact]
        public void Convert_ChangeType_SelfType_EqualsSelf()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal(quantity, Convert.ChangeType(quantity, typeof(FluidResistance)));
        }

        [Fact]
        public void Convert_ChangeType_UnitType_EqualsUnit()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal(quantity.Unit, Convert.ChangeType(quantity, typeof(FluidResistanceUnit)));
        }

        [Fact]
        public void Convert_ChangeType_QuantityInfo_EqualsQuantityInfo()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal(FluidResistance.Info, Convert.ChangeType(quantity, typeof(QuantityInfo)));
        }

        [Fact]
        public void Convert_ChangeType_BaseDimensions_EqualsBaseDimensions()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal(FluidResistance.BaseDimensions, Convert.ChangeType(quantity, typeof(BaseDimensions)));
        }

        [Fact]
        public void Convert_ChangeType_InvalidType_ThrowsInvalidCastException()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Throws<InvalidCastException>(() => Convert.ChangeType(quantity, typeof(QuantityFormatter)));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(1.0);
            Assert.Equal(new {FluidResistance.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = FluidResistance.FromPascalSecondsPerCubicMeter(value);
            Assert.Equal(FluidResistance.FromPascalSecondsPerCubicMeter(-value), -quantity);
        }
    }
}
