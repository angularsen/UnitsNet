//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToTorque;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToTorqueExtensionsTests
    {
        [Fact]
        public void NumberToGramForceCentimetersTest() =>
            Assert.Equal(Torque.FromGramForceCentimeters(2), 2.GramForceCentimeters);

        [Fact]
        public void NumberToGramForceMetersTest() =>
            Assert.Equal(Torque.FromGramForceMeters(2), 2.GramForceMeters);

        [Fact]
        public void NumberToGramForceMillimetersTest() =>
            Assert.Equal(Torque.FromGramForceMillimeters(2), 2.GramForceMillimeters);

        [Fact]
        public void NumberToKilogramForceCentimetersTest() =>
            Assert.Equal(Torque.FromKilogramForceCentimeters(2), 2.KilogramForceCentimeters);

        [Fact]
        public void NumberToKilogramForceMetersTest() =>
            Assert.Equal(Torque.FromKilogramForceMeters(2), 2.KilogramForceMeters);

        [Fact]
        public void NumberToKilogramForceMillimetersTest() =>
            Assert.Equal(Torque.FromKilogramForceMillimeters(2), 2.KilogramForceMillimeters);

        [Fact]
        public void NumberToKilonewtonCentimetersTest() =>
            Assert.Equal(Torque.FromKilonewtonCentimeters(2), 2.KilonewtonCentimeters);

        [Fact]
        public void NumberToKilonewtonMetersTest() =>
            Assert.Equal(Torque.FromKilonewtonMeters(2), 2.KilonewtonMeters);

        [Fact]
        public void NumberToKilonewtonMillimetersTest() =>
            Assert.Equal(Torque.FromKilonewtonMillimeters(2), 2.KilonewtonMillimeters);

        [Fact]
        public void NumberToKilopoundForceFeetTest() =>
            Assert.Equal(Torque.FromKilopoundForceFeet(2), 2.KilopoundForceFeet);

        [Fact]
        public void NumberToKilopoundForceInchesTest() =>
            Assert.Equal(Torque.FromKilopoundForceInches(2), 2.KilopoundForceInches);

        [Fact]
        public void NumberToMeganewtonCentimetersTest() =>
            Assert.Equal(Torque.FromMeganewtonCentimeters(2), 2.MeganewtonCentimeters);

        [Fact]
        public void NumberToMeganewtonMetersTest() =>
            Assert.Equal(Torque.FromMeganewtonMeters(2), 2.MeganewtonMeters);

        [Fact]
        public void NumberToMeganewtonMillimetersTest() =>
            Assert.Equal(Torque.FromMeganewtonMillimeters(2), 2.MeganewtonMillimeters);

        [Fact]
        public void NumberToMegapoundForceFeetTest() =>
            Assert.Equal(Torque.FromMegapoundForceFeet(2), 2.MegapoundForceFeet);

        [Fact]
        public void NumberToMegapoundForceInchesTest() =>
            Assert.Equal(Torque.FromMegapoundForceInches(2), 2.MegapoundForceInches);

        [Fact]
        public void NumberToNewtonCentimetersTest() =>
            Assert.Equal(Torque.FromNewtonCentimeters(2), 2.NewtonCentimeters);

        [Fact]
        public void NumberToNewtonMetersTest() =>
            Assert.Equal(Torque.FromNewtonMeters(2), 2.NewtonMeters);

        [Fact]
        public void NumberToNewtonMillimetersTest() =>
            Assert.Equal(Torque.FromNewtonMillimeters(2), 2.NewtonMillimeters);

        [Fact]
        public void NumberToPoundalFeetTest() =>
            Assert.Equal(Torque.FromPoundalFeet(2), 2.PoundalFeet);

        [Fact]
        public void NumberToPoundForceFeetTest() =>
            Assert.Equal(Torque.FromPoundForceFeet(2), 2.PoundForceFeet);

        [Fact]
        public void NumberToPoundForceInchesTest() =>
            Assert.Equal(Torque.FromPoundForceInches(2), 2.PoundForceInches);

        [Fact]
        public void NumberToTonneForceCentimetersTest() =>
            Assert.Equal(Torque.FromTonneForceCentimeters(2), 2.TonneForceCentimeters);

        [Fact]
        public void NumberToTonneForceMetersTest() =>
            Assert.Equal(Torque.FromTonneForceMeters(2), 2.TonneForceMeters);

        [Fact]
        public void NumberToTonneForceMillimetersTest() =>
            Assert.Equal(Torque.FromTonneForceMillimeters(2), 2.TonneForceMillimeters);

    }
}
