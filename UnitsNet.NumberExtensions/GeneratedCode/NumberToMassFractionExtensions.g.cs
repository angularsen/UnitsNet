//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToMassFraction
{
    /// <summary>
    /// A number to MassFraction Extensions
    /// </summary>
    public static class NumberToMassFractionExtensions
    {
        /// <inheritdoc cref="MassFraction.FromCentigramsPerGram(double)" />
        public static MassFraction CentigramsPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromCentigramsPerGram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromCentigramsPerGram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromCentigramsPerKilogram(double)" />
        public static MassFraction CentigramsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromCentigramsPerKilogram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromCentigramsPerKilogram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromDecagramsPerGram(double)" />
        public static MassFraction DecagramsPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromDecagramsPerGram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromDecagramsPerGram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromDecagramsPerKilogram(double)" />
        public static MassFraction DecagramsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromDecagramsPerKilogram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromDecagramsPerKilogram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromDecigramsPerGram(double)" />
        public static MassFraction DecigramsPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromDecigramsPerGram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromDecigramsPerGram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromDecigramsPerKilogram(double)" />
        public static MassFraction DecigramsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromDecigramsPerKilogram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromDecigramsPerKilogram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromDecimalFractions(double)" />
        public static MassFraction DecimalFractions<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromDecimalFractions(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromDecimalFractions(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromGramsPerGram(double)" />
        public static MassFraction GramsPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromGramsPerGram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromGramsPerGram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromGramsPerKilogram(double)" />
        public static MassFraction GramsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromGramsPerKilogram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromGramsPerKilogram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromHectogramsPerGram(double)" />
        public static MassFraction HectogramsPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromHectogramsPerGram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromHectogramsPerGram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromHectogramsPerKilogram(double)" />
        public static MassFraction HectogramsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromHectogramsPerKilogram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromHectogramsPerKilogram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromKilogramsPerGram(double)" />
        public static MassFraction KilogramsPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromKilogramsPerGram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromKilogramsPerGram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromKilogramsPerKilogram(double)" />
        public static MassFraction KilogramsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromKilogramsPerKilogram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromKilogramsPerKilogram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromMicrogramsPerGram(double)" />
        public static MassFraction MicrogramsPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromMicrogramsPerGram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromMicrogramsPerGram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromMicrogramsPerKilogram(double)" />
        public static MassFraction MicrogramsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromMicrogramsPerKilogram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromMicrogramsPerKilogram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromMilligramsPerGram(double)" />
        public static MassFraction MilligramsPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromMilligramsPerGram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromMilligramsPerGram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromMilligramsPerKilogram(double)" />
        public static MassFraction MilligramsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromMilligramsPerKilogram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromMilligramsPerKilogram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromNanogramsPerGram(double)" />
        public static MassFraction NanogramsPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromNanogramsPerGram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromNanogramsPerGram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromNanogramsPerKilogram(double)" />
        public static MassFraction NanogramsPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromNanogramsPerKilogram(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromNanogramsPerKilogram(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromPartsPerBillion(double)" />
        public static MassFraction PartsPerBillion<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromPartsPerBillion(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromPartsPerBillion(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromPartsPerMillion(double)" />
        public static MassFraction PartsPerMillion<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromPartsPerMillion(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromPartsPerMillion(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromPartsPerThousand(double)" />
        public static MassFraction PartsPerThousand<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromPartsPerThousand(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromPartsPerThousand(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromPartsPerTrillion(double)" />
        public static MassFraction PartsPerTrillion<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromPartsPerTrillion(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromPartsPerTrillion(value.ToDouble(null));
#endif

        /// <inheritdoc cref="MassFraction.FromPercent(double)" />
        public static MassFraction Percent<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => MassFraction.FromPercent(double.CreateChecked(value));
#else
            , IConvertible
            => MassFraction.FromPercent(value.ToDouble(null));
#endif

    }
}
