//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricConductivity
{
    /// <summary>
    /// A number to ElectricConductivity Extensions
    /// </summary>
    public static class NumberToElectricConductivityExtensions
    {
        extension<T>(T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="ElectricConductivity.FromMicrosiemensPerCentimeter(double)" />
            public ElectricConductivity MicrosiemensPerCentimeter
#if NET7_0_OR_GREATER
                => ElectricConductivity.FromMicrosiemensPerCentimeter(double.CreateChecked(value));
#else
                => ElectricConductivity.FromMicrosiemensPerCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductivity.FromMillisiemensPerCentimeter(double)" />
            public ElectricConductivity MillisiemensPerCentimeter
#if NET7_0_OR_GREATER
                => ElectricConductivity.FromMillisiemensPerCentimeter(double.CreateChecked(value));
#else
                => ElectricConductivity.FromMillisiemensPerCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductivity.FromSiemensPerCentimeter(double)" />
            public ElectricConductivity SiemensPerCentimeter
#if NET7_0_OR_GREATER
                => ElectricConductivity.FromSiemensPerCentimeter(double.CreateChecked(value));
#else
                => ElectricConductivity.FromSiemensPerCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductivity.FromSiemensPerFoot(double)" />
            public ElectricConductivity SiemensPerFoot
#if NET7_0_OR_GREATER
                => ElectricConductivity.FromSiemensPerFoot(double.CreateChecked(value));
#else
                => ElectricConductivity.FromSiemensPerFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductivity.FromSiemensPerInch(double)" />
            public ElectricConductivity SiemensPerInch
#if NET7_0_OR_GREATER
                => ElectricConductivity.FromSiemensPerInch(double.CreateChecked(value));
#else
                => ElectricConductivity.FromSiemensPerInch(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductivity.FromSiemensPerMeter(double)" />
            public ElectricConductivity SiemensPerMeter
#if NET7_0_OR_GREATER
                => ElectricConductivity.FromSiemensPerMeter(double.CreateChecked(value));
#else
                => ElectricConductivity.FromSiemensPerMeter(value.ToDouble(null));
#endif

        }
    }
}
