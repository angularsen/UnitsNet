//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToMassMomentOfInertia
{
    /// <summary>
    /// A number to MassMomentOfInertia Extensions
    /// </summary>
    public static class NumberToMassMomentOfInertiaExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="MassMomentOfInertia.FromGramSquareCentimeters(QuantityValue)" />
            public MassMomentOfInertia GramSquareCentimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromGramSquareCentimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromGramSquareCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromGramSquareDecimeters(QuantityValue)" />
            public MassMomentOfInertia GramSquareDecimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromGramSquareDecimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromGramSquareDecimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromGramSquareMeters(QuantityValue)" />
            public MassMomentOfInertia GramSquareMeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromGramSquareMeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromGramSquareMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromGramSquareMillimeters(QuantityValue)" />
            public MassMomentOfInertia GramSquareMillimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromGramSquareMillimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromGramSquareMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromKilogramSquareCentimeters(QuantityValue)" />
            public MassMomentOfInertia KilogramSquareCentimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromKilogramSquareCentimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromKilogramSquareCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromKilogramSquareDecimeters(QuantityValue)" />
            public MassMomentOfInertia KilogramSquareDecimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromKilogramSquareDecimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromKilogramSquareDecimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromKilogramSquareMeters(QuantityValue)" />
            public MassMomentOfInertia KilogramSquareMeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromKilogramSquareMeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromKilogramSquareMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromKilogramSquareMillimeters(QuantityValue)" />
            public MassMomentOfInertia KilogramSquareMillimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromKilogramSquareMillimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromKilogramSquareMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromKilotonneSquareCentimeters(QuantityValue)" />
            public MassMomentOfInertia KilotonneSquareCentimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromKilotonneSquareCentimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromKilotonneSquareCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromKilotonneSquareDecimeters(QuantityValue)" />
            public MassMomentOfInertia KilotonneSquareDecimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromKilotonneSquareDecimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromKilotonneSquareDecimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromKilotonneSquareMeters(QuantityValue)" />
            public MassMomentOfInertia KilotonneSquareMeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromKilotonneSquareMeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromKilotonneSquareMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromKilotonneSquareMillimeters(QuantityValue)" />
            public MassMomentOfInertia KilotonneSquareMillimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromKilotonneSquareMillimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromKilotonneSquareMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromMegatonneSquareCentimeters(QuantityValue)" />
            public MassMomentOfInertia MegatonneSquareCentimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromMegatonneSquareCentimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromMegatonneSquareCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromMegatonneSquareDecimeters(QuantityValue)" />
            public MassMomentOfInertia MegatonneSquareDecimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromMegatonneSquareDecimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromMegatonneSquareDecimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromMegatonneSquareMeters(QuantityValue)" />
            public MassMomentOfInertia MegatonneSquareMeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromMegatonneSquareMeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromMegatonneSquareMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromMegatonneSquareMillimeters(QuantityValue)" />
            public MassMomentOfInertia MegatonneSquareMillimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromMegatonneSquareMillimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromMegatonneSquareMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromMilligramSquareCentimeters(QuantityValue)" />
            public MassMomentOfInertia MilligramSquareCentimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromMilligramSquareCentimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromMilligramSquareCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromMilligramSquareDecimeters(QuantityValue)" />
            public MassMomentOfInertia MilligramSquareDecimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromMilligramSquareDecimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromMilligramSquareDecimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromMilligramSquareMeters(QuantityValue)" />
            public MassMomentOfInertia MilligramSquareMeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromMilligramSquareMeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromMilligramSquareMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromMilligramSquareMillimeters(QuantityValue)" />
            public MassMomentOfInertia MilligramSquareMillimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromMilligramSquareMillimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromMilligramSquareMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromPoundSquareFeet(QuantityValue)" />
            public MassMomentOfInertia PoundSquareFeet
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromPoundSquareFeet(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromPoundSquareFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromPoundSquareInches(QuantityValue)" />
            public MassMomentOfInertia PoundSquareInches
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromPoundSquareInches(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromPoundSquareInches(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromSlugSquareFeet(QuantityValue)" />
            public MassMomentOfInertia SlugSquareFeet
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromSlugSquareFeet(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromSlugSquareFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromSlugSquareInches(QuantityValue)" />
            public MassMomentOfInertia SlugSquareInches
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromSlugSquareInches(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromSlugSquareInches(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromTonneSquareCentimeters(QuantityValue)" />
            public MassMomentOfInertia TonneSquareCentimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromTonneSquareCentimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromTonneSquareCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromTonneSquareDecimeters(QuantityValue)" />
            public MassMomentOfInertia TonneSquareDecimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromTonneSquareDecimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromTonneSquareDecimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromTonneSquareMeters(QuantityValue)" />
            public MassMomentOfInertia TonneSquareMeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromTonneSquareMeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromTonneSquareMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MassMomentOfInertia.FromTonneSquareMillimeters(QuantityValue)" />
            public MassMomentOfInertia TonneSquareMillimeters
#if NET7_0_OR_GREATER
                => MassMomentOfInertia.FromTonneSquareMillimeters(QuantityValue.CreateChecked(value));
#else
                => MassMomentOfInertia.FromTonneSquareMillimeters(value.ToQuantityValue());
#endif

        }
    }
}
