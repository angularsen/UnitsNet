//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToRadiationEquivalentDose
{
    /// <summary>
    /// A number to RadiationEquivalentDose Extensions
    /// </summary>
    public static class NumberToRadiationEquivalentDoseExtensions
    {
        /// <inheritdoc cref="RadiationEquivalentDose.FromMicrosieverts(QuantityValue)" />
        public static RadiationEquivalentDose Microsieverts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => RadiationEquivalentDose.FromMicrosieverts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => RadiationEquivalentDose.FromMicrosieverts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="RadiationEquivalentDose.FromMilliroentgensEquivalentMan(QuantityValue)" />
        public static RadiationEquivalentDose MilliroentgensEquivalentMan<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => RadiationEquivalentDose.FromMilliroentgensEquivalentMan(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => RadiationEquivalentDose.FromMilliroentgensEquivalentMan(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="RadiationEquivalentDose.FromMillisieverts(QuantityValue)" />
        public static RadiationEquivalentDose Millisieverts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => RadiationEquivalentDose.FromMillisieverts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => RadiationEquivalentDose.FromMillisieverts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="RadiationEquivalentDose.FromNanosieverts(QuantityValue)" />
        public static RadiationEquivalentDose Nanosieverts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => RadiationEquivalentDose.FromNanosieverts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => RadiationEquivalentDose.FromNanosieverts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="RadiationEquivalentDose.FromRoentgensEquivalentMan(QuantityValue)" />
        public static RadiationEquivalentDose RoentgensEquivalentMan<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => RadiationEquivalentDose.FromRoentgensEquivalentMan(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => RadiationEquivalentDose.FromRoentgensEquivalentMan(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="RadiationEquivalentDose.FromSieverts(QuantityValue)" />
        public static RadiationEquivalentDose Sieverts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => RadiationEquivalentDose.FromSieverts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => RadiationEquivalentDose.FromSieverts(value.ToQuantityValue());
#endif

    }
}
