//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In electrical circuits, reactance is the opposition presented to alternating current by inductance and capacitance. Along with resistance, it is one of two elements of impedance.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Electrical_reactance
    /// </remarks>
    public struct  ElectricReactance
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ElectricReactanceUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public ElectricReactanceUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public ElectricReactance(double value, ElectricReactanceUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of ElectricReactance, which is Second. All conversions go via this value.
        /// </summary>
        public static ElectricReactanceUnit BaseUnit { get; } = ElectricReactanceUnit.Ohm;

        /// <summary>
        /// Represents the largest possible value of ElectricReactance.
        /// </summary>
        public static ElectricReactance MaxValue { get; } = new ElectricReactance(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of ElectricReactance.
        /// </summary>
        public static ElectricReactance MinValue { get; } = new ElectricReactance(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static ElectricReactance Zero { get; } = new ElectricReactance(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricReactanceUnit.Gigaohm"/>
        /// </summary>
        public double Gigaohms => As(ElectricReactanceUnit.Gigaohm);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricReactanceUnit.Kiloohm"/>
        /// </summary>
        public double Kiloohms => As(ElectricReactanceUnit.Kiloohm);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricReactanceUnit.Megaohm"/>
        /// </summary>
        public double Megaohms => As(ElectricReactanceUnit.Megaohm);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricReactanceUnit.Microohm"/>
        /// </summary>
        public double Microohms => As(ElectricReactanceUnit.Microohm);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricReactanceUnit.Milliohm"/>
        /// </summary>
        public double Milliohms => As(ElectricReactanceUnit.Milliohm);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricReactanceUnit.Nanoohm"/>
        /// </summary>
        public double Nanoohms => As(ElectricReactanceUnit.Nanoohm);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricReactanceUnit.Ohm"/>
        /// </summary>
        public double Ohms => As(ElectricReactanceUnit.Ohm);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricReactanceUnit.Teraohm"/>
        /// </summary>
        public double Teraohms => As(ElectricReactanceUnit.Teraohm);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ElectricReactance"/> from <see cref="ElectricReactanceUnit.Gigaohm"/>.
        /// </summary>
        public static ElectricReactance FromGigaohms(double gigaohms) => new ElectricReactance(gigaohms, ElectricReactanceUnit.Gigaohm);

        /// <summary>
        ///     Creates a <see cref="ElectricReactance"/> from <see cref="ElectricReactanceUnit.Kiloohm"/>.
        /// </summary>
        public static ElectricReactance FromKiloohms(double kiloohms) => new ElectricReactance(kiloohms, ElectricReactanceUnit.Kiloohm);

        /// <summary>
        ///     Creates a <see cref="ElectricReactance"/> from <see cref="ElectricReactanceUnit.Megaohm"/>.
        /// </summary>
        public static ElectricReactance FromMegaohms(double megaohms) => new ElectricReactance(megaohms, ElectricReactanceUnit.Megaohm);

        /// <summary>
        ///     Creates a <see cref="ElectricReactance"/> from <see cref="ElectricReactanceUnit.Microohm"/>.
        /// </summary>
        public static ElectricReactance FromMicroohms(double microohms) => new ElectricReactance(microohms, ElectricReactanceUnit.Microohm);

        /// <summary>
        ///     Creates a <see cref="ElectricReactance"/> from <see cref="ElectricReactanceUnit.Milliohm"/>.
        /// </summary>
        public static ElectricReactance FromMilliohms(double milliohms) => new ElectricReactance(milliohms, ElectricReactanceUnit.Milliohm);

        /// <summary>
        ///     Creates a <see cref="ElectricReactance"/> from <see cref="ElectricReactanceUnit.Nanoohm"/>.
        /// </summary>
        public static ElectricReactance FromNanoohms(double nanoohms) => new ElectricReactance(nanoohms, ElectricReactanceUnit.Nanoohm);

        /// <summary>
        ///     Creates a <see cref="ElectricReactance"/> from <see cref="ElectricReactanceUnit.Ohm"/>.
        /// </summary>
        public static ElectricReactance FromOhms(double ohms) => new ElectricReactance(ohms, ElectricReactanceUnit.Ohm);

        /// <summary>
        ///     Creates a <see cref="ElectricReactance"/> from <see cref="ElectricReactanceUnit.Teraohm"/>.
        /// </summary>
        public static ElectricReactance FromTeraohms(double teraohms) => new ElectricReactance(teraohms, ElectricReactanceUnit.Teraohm);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricReactanceUnit" /> to <see cref="ElectricReactance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricReactance unit value.</returns>
        public static ElectricReactance From(double value, ElectricReactanceUnit fromUnit)
        {
            return new ElectricReactance(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(ElectricReactanceUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this ElectricReactance to another ElectricReactance with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A ElectricReactance with the specified unit.</returns>
                public ElectricReactance ToUnit(ElectricReactanceUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new ElectricReactance(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        ElectricReactanceUnit.Gigaohm => (_value) * 1e9d,
                        ElectricReactanceUnit.Kiloohm => (_value) * 1e3d,
                        ElectricReactanceUnit.Megaohm => (_value) * 1e6d,
                        ElectricReactanceUnit.Microohm => (_value) * 1e-6d,
                        ElectricReactanceUnit.Milliohm => (_value) * 1e-3d,
                        ElectricReactanceUnit.Nanoohm => (_value) * 1e-9d,
                        ElectricReactanceUnit.Ohm => _value,
                        ElectricReactanceUnit.Teraohm => (_value) * 1e12d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(ElectricReactanceUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        ElectricReactanceUnit.Gigaohm => (baseUnitValue) / 1e9d,
                        ElectricReactanceUnit.Kiloohm => (baseUnitValue) / 1e3d,
                        ElectricReactanceUnit.Megaohm => (baseUnitValue) / 1e6d,
                        ElectricReactanceUnit.Microohm => (baseUnitValue) / 1e-6d,
                        ElectricReactanceUnit.Milliohm => (baseUnitValue) / 1e-3d,
                        ElectricReactanceUnit.Nanoohm => (baseUnitValue) / 1e-9d,
                        ElectricReactanceUnit.Ohm => baseUnitValue,
                        ElectricReactanceUnit.Teraohm => (baseUnitValue) / 1e12d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

