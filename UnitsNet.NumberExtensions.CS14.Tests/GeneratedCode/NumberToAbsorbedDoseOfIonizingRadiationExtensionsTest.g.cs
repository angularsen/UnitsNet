//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToAbsorbedDoseOfIonizingRadiation;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToAbsorbedDoseOfIonizingRadiationExtensionsTests
    {
        [Fact]
        public void NumberToCentigraysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromCentigrays(2), 2.Centigrays);

        [Fact]
        public void NumberToDecigraysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromDecigrays(2), 2.Decigrays);

        [Fact]
        public void NumberToFemtograysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromFemtograys(2), 2.Femtograys);

        [Fact]
        public void NumberToGigagraysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromGigagrays(2), 2.Gigagrays);

        [Fact]
        public void NumberToGraysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromGrays(2), 2.Grays);

        [Fact]
        public void NumberToKilograysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromKilograys(2), 2.Kilograys);

        [Fact]
        public void NumberToKiloradsTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromKilorads(2), 2.Kilorads);

        [Fact]
        public void NumberToMegagraysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromMegagrays(2), 2.Megagrays);

        [Fact]
        public void NumberToMegaradsTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromMegarads(2), 2.Megarads);

        [Fact]
        public void NumberToMicrograysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromMicrograys(2), 2.Micrograys);

        [Fact]
        public void NumberToMilligraysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromMilligrays(2), 2.Milligrays);

        [Fact]
        public void NumberToMilliradsTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromMillirads(2), 2.Millirads);

        [Fact]
        public void NumberToNanograysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromNanograys(2), 2.Nanograys);

        [Fact]
        public void NumberToPetagraysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromPetagrays(2), 2.Petagrays);

        [Fact]
        public void NumberToPicograysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromPicograys(2), 2.Picograys);

        [Fact]
        public void NumberToRadsTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromRads(2), 2.Rads);

        [Fact]
        public void NumberToTeragraysTest() =>
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromTeragrays(2), 2.Teragrays);

    }
}
