//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Radioactivity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RadioactivityTestsBase : QuantityTestsBase
    {
        protected abstract double BecquerelsInOneBecquerel { get; }
        protected abstract double CuriesInOneBecquerel { get; }
        protected abstract double ExabecquerelsInOneBecquerel { get; }
        protected abstract double GigabecquerelsInOneBecquerel { get; }
        protected abstract double GigacuriesInOneBecquerel { get; }
        protected abstract double GigarutherfordsInOneBecquerel { get; }
        protected abstract double KilobecquerelsInOneBecquerel { get; }
        protected abstract double KilocuriesInOneBecquerel { get; }
        protected abstract double KilorutherfordsInOneBecquerel { get; }
        protected abstract double MegabecquerelsInOneBecquerel { get; }
        protected abstract double MegacuriesInOneBecquerel { get; }
        protected abstract double MegarutherfordsInOneBecquerel { get; }
        protected abstract double MicrobecquerelsInOneBecquerel { get; }
        protected abstract double MicrocuriesInOneBecquerel { get; }
        protected abstract double MicrorutherfordsInOneBecquerel { get; }
        protected abstract double MillibecquerelsInOneBecquerel { get; }
        protected abstract double MillicuriesInOneBecquerel { get; }
        protected abstract double MillirutherfordsInOneBecquerel { get; }
        protected abstract double NanobecquerelsInOneBecquerel { get; }
        protected abstract double NanocuriesInOneBecquerel { get; }
        protected abstract double NanorutherfordsInOneBecquerel { get; }
        protected abstract double PetabecquerelsInOneBecquerel { get; }
        protected abstract double PicobecquerelsInOneBecquerel { get; }
        protected abstract double PicocuriesInOneBecquerel { get; }
        protected abstract double PicorutherfordsInOneBecquerel { get; }
        protected abstract double RutherfordsInOneBecquerel { get; }
        protected abstract double TerabecquerelsInOneBecquerel { get; }
        protected abstract double TeracuriesInOneBecquerel { get; }
        protected abstract double TerarutherfordsInOneBecquerel { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BecquerelsTolerance { get { return 1e-5; } }
        protected virtual double CuriesTolerance { get { return 1e-5; } }
        protected virtual double ExabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double GigabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double GigacuriesTolerance { get { return 1e-5; } }
        protected virtual double GigarutherfordsTolerance { get { return 1e-5; } }
        protected virtual double KilobecquerelsTolerance { get { return 1e-5; } }
        protected virtual double KilocuriesTolerance { get { return 1e-5; } }
        protected virtual double KilorutherfordsTolerance { get { return 1e-5; } }
        protected virtual double MegabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double MegacuriesTolerance { get { return 1e-5; } }
        protected virtual double MegarutherfordsTolerance { get { return 1e-5; } }
        protected virtual double MicrobecquerelsTolerance { get { return 1e-5; } }
        protected virtual double MicrocuriesTolerance { get { return 1e-5; } }
        protected virtual double MicrorutherfordsTolerance { get { return 1e-5; } }
        protected virtual double MillibecquerelsTolerance { get { return 1e-5; } }
        protected virtual double MillicuriesTolerance { get { return 1e-5; } }
        protected virtual double MillirutherfordsTolerance { get { return 1e-5; } }
        protected virtual double NanobecquerelsTolerance { get { return 1e-5; } }
        protected virtual double NanocuriesTolerance { get { return 1e-5; } }
        protected virtual double NanorutherfordsTolerance { get { return 1e-5; } }
        protected virtual double PetabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double PicobecquerelsTolerance { get { return 1e-5; } }
        protected virtual double PicocuriesTolerance { get { return 1e-5; } }
        protected virtual double PicorutherfordsTolerance { get { return 1e-5; } }
        protected virtual double RutherfordsTolerance { get { return 1e-5; } }
        protected virtual double TerabecquerelsTolerance { get { return 1e-5; } }
        protected virtual double TeracuriesTolerance { get { return 1e-5; } }
        protected virtual double TerarutherfordsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(RadioactivityUnit unit)
        {
            return unit switch
            {
                RadioactivityUnit.Becquerel => (BecquerelsInOneBecquerel, BecquerelsTolerance),
                RadioactivityUnit.Curie => (CuriesInOneBecquerel, CuriesTolerance),
                RadioactivityUnit.Exabecquerel => (ExabecquerelsInOneBecquerel, ExabecquerelsTolerance),
                RadioactivityUnit.Gigabecquerel => (GigabecquerelsInOneBecquerel, GigabecquerelsTolerance),
                RadioactivityUnit.Gigacurie => (GigacuriesInOneBecquerel, GigacuriesTolerance),
                RadioactivityUnit.Gigarutherford => (GigarutherfordsInOneBecquerel, GigarutherfordsTolerance),
                RadioactivityUnit.Kilobecquerel => (KilobecquerelsInOneBecquerel, KilobecquerelsTolerance),
                RadioactivityUnit.Kilocurie => (KilocuriesInOneBecquerel, KilocuriesTolerance),
                RadioactivityUnit.Kilorutherford => (KilorutherfordsInOneBecquerel, KilorutherfordsTolerance),
                RadioactivityUnit.Megabecquerel => (MegabecquerelsInOneBecquerel, MegabecquerelsTolerance),
                RadioactivityUnit.Megacurie => (MegacuriesInOneBecquerel, MegacuriesTolerance),
                RadioactivityUnit.Megarutherford => (MegarutherfordsInOneBecquerel, MegarutherfordsTolerance),
                RadioactivityUnit.Microbecquerel => (MicrobecquerelsInOneBecquerel, MicrobecquerelsTolerance),
                RadioactivityUnit.Microcurie => (MicrocuriesInOneBecquerel, MicrocuriesTolerance),
                RadioactivityUnit.Microrutherford => (MicrorutherfordsInOneBecquerel, MicrorutherfordsTolerance),
                RadioactivityUnit.Millibecquerel => (MillibecquerelsInOneBecquerel, MillibecquerelsTolerance),
                RadioactivityUnit.Millicurie => (MillicuriesInOneBecquerel, MillicuriesTolerance),
                RadioactivityUnit.Millirutherford => (MillirutherfordsInOneBecquerel, MillirutherfordsTolerance),
                RadioactivityUnit.Nanobecquerel => (NanobecquerelsInOneBecquerel, NanobecquerelsTolerance),
                RadioactivityUnit.Nanocurie => (NanocuriesInOneBecquerel, NanocuriesTolerance),
                RadioactivityUnit.Nanorutherford => (NanorutherfordsInOneBecquerel, NanorutherfordsTolerance),
                RadioactivityUnit.Petabecquerel => (PetabecquerelsInOneBecquerel, PetabecquerelsTolerance),
                RadioactivityUnit.Picobecquerel => (PicobecquerelsInOneBecquerel, PicobecquerelsTolerance),
                RadioactivityUnit.Picocurie => (PicocuriesInOneBecquerel, PicocuriesTolerance),
                RadioactivityUnit.Picorutherford => (PicorutherfordsInOneBecquerel, PicorutherfordsTolerance),
                RadioactivityUnit.Rutherford => (RutherfordsInOneBecquerel, RutherfordsTolerance),
                RadioactivityUnit.Terabecquerel => (TerabecquerelsInOneBecquerel, TerabecquerelsTolerance),
                RadioactivityUnit.Teracurie => (TeracuriesInOneBecquerel, TeracuriesTolerance),
                RadioactivityUnit.Terarutherford => (TerarutherfordsInOneBecquerel, TerarutherfordsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { RadioactivityUnit.Becquerel },
            new object[] { RadioactivityUnit.Curie },
            new object[] { RadioactivityUnit.Exabecquerel },
            new object[] { RadioactivityUnit.Gigabecquerel },
            new object[] { RadioactivityUnit.Gigacurie },
            new object[] { RadioactivityUnit.Gigarutherford },
            new object[] { RadioactivityUnit.Kilobecquerel },
            new object[] { RadioactivityUnit.Kilocurie },
            new object[] { RadioactivityUnit.Kilorutherford },
            new object[] { RadioactivityUnit.Megabecquerel },
            new object[] { RadioactivityUnit.Megacurie },
            new object[] { RadioactivityUnit.Megarutherford },
            new object[] { RadioactivityUnit.Microbecquerel },
            new object[] { RadioactivityUnit.Microcurie },
            new object[] { RadioactivityUnit.Microrutherford },
            new object[] { RadioactivityUnit.Millibecquerel },
            new object[] { RadioactivityUnit.Millicurie },
            new object[] { RadioactivityUnit.Millirutherford },
            new object[] { RadioactivityUnit.Nanobecquerel },
            new object[] { RadioactivityUnit.Nanocurie },
            new object[] { RadioactivityUnit.Nanorutherford },
            new object[] { RadioactivityUnit.Petabecquerel },
            new object[] { RadioactivityUnit.Picobecquerel },
            new object[] { RadioactivityUnit.Picocurie },
            new object[] { RadioactivityUnit.Picorutherford },
            new object[] { RadioactivityUnit.Rutherford },
            new object[] { RadioactivityUnit.Terabecquerel },
            new object[] { RadioactivityUnit.Teracurie },
            new object[] { RadioactivityUnit.Terarutherford },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Radioactivity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RadioactivityUnit.Becquerel, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Radioactivity(double.PositiveInfinity, RadioactivityUnit.Becquerel));
            var exception2 = Record.Exception(() => new Radioactivity(double.NegativeInfinity, RadioactivityUnit.Becquerel));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Radioactivity(double.NaN, RadioactivityUnit.Becquerel));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Radioactivity(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Radioactivity(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Radioactivity(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Radioactivity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            RadioactivityUnit[] unitsOrderedByName = EnumHelper.GetValues<RadioactivityUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Radioactivity(1, RadioactivityUnit.Becquerel);

            QuantityInfo<Radioactivity, RadioactivityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Radioactivity", quantityInfo.Name);
            Assert.Equal(Radioactivity.Zero, quantityInfo.Zero);
            Assert.Equal(Radioactivity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Radioactivity.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<RadioactivityUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void RadioactivityInfo_CreateWithCustomUnitInfos()
        {
            RadioactivityUnit[] expectedUnits = [RadioactivityUnit.Becquerel];

            Radioactivity.RadioactivityInfo quantityInfo = Radioactivity.RadioactivityInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Radioactivity", quantityInfo.Name);
            Assert.Equal(Radioactivity.Zero, quantityInfo.Zero);
            Assert.Equal(Radioactivity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void BecquerelToRadioactivityUnits()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            AssertEx.EqualTolerance(BecquerelsInOneBecquerel, becquerel.Becquerels, BecquerelsTolerance);
            AssertEx.EqualTolerance(CuriesInOneBecquerel, becquerel.Curies, CuriesTolerance);
            AssertEx.EqualTolerance(ExabecquerelsInOneBecquerel, becquerel.Exabecquerels, ExabecquerelsTolerance);
            AssertEx.EqualTolerance(GigabecquerelsInOneBecquerel, becquerel.Gigabecquerels, GigabecquerelsTolerance);
            AssertEx.EqualTolerance(GigacuriesInOneBecquerel, becquerel.Gigacuries, GigacuriesTolerance);
            AssertEx.EqualTolerance(GigarutherfordsInOneBecquerel, becquerel.Gigarutherfords, GigarutherfordsTolerance);
            AssertEx.EqualTolerance(KilobecquerelsInOneBecquerel, becquerel.Kilobecquerels, KilobecquerelsTolerance);
            AssertEx.EqualTolerance(KilocuriesInOneBecquerel, becquerel.Kilocuries, KilocuriesTolerance);
            AssertEx.EqualTolerance(KilorutherfordsInOneBecquerel, becquerel.Kilorutherfords, KilorutherfordsTolerance);
            AssertEx.EqualTolerance(MegabecquerelsInOneBecquerel, becquerel.Megabecquerels, MegabecquerelsTolerance);
            AssertEx.EqualTolerance(MegacuriesInOneBecquerel, becquerel.Megacuries, MegacuriesTolerance);
            AssertEx.EqualTolerance(MegarutherfordsInOneBecquerel, becquerel.Megarutherfords, MegarutherfordsTolerance);
            AssertEx.EqualTolerance(MicrobecquerelsInOneBecquerel, becquerel.Microbecquerels, MicrobecquerelsTolerance);
            AssertEx.EqualTolerance(MicrocuriesInOneBecquerel, becquerel.Microcuries, MicrocuriesTolerance);
            AssertEx.EqualTolerance(MicrorutherfordsInOneBecquerel, becquerel.Microrutherfords, MicrorutherfordsTolerance);
            AssertEx.EqualTolerance(MillibecquerelsInOneBecquerel, becquerel.Millibecquerels, MillibecquerelsTolerance);
            AssertEx.EqualTolerance(MillicuriesInOneBecquerel, becquerel.Millicuries, MillicuriesTolerance);
            AssertEx.EqualTolerance(MillirutherfordsInOneBecquerel, becquerel.Millirutherfords, MillirutherfordsTolerance);
            AssertEx.EqualTolerance(NanobecquerelsInOneBecquerel, becquerel.Nanobecquerels, NanobecquerelsTolerance);
            AssertEx.EqualTolerance(NanocuriesInOneBecquerel, becquerel.Nanocuries, NanocuriesTolerance);
            AssertEx.EqualTolerance(NanorutherfordsInOneBecquerel, becquerel.Nanorutherfords, NanorutherfordsTolerance);
            AssertEx.EqualTolerance(PetabecquerelsInOneBecquerel, becquerel.Petabecquerels, PetabecquerelsTolerance);
            AssertEx.EqualTolerance(PicobecquerelsInOneBecquerel, becquerel.Picobecquerels, PicobecquerelsTolerance);
            AssertEx.EqualTolerance(PicocuriesInOneBecquerel, becquerel.Picocuries, PicocuriesTolerance);
            AssertEx.EqualTolerance(PicorutherfordsInOneBecquerel, becquerel.Picorutherfords, PicorutherfordsTolerance);
            AssertEx.EqualTolerance(RutherfordsInOneBecquerel, becquerel.Rutherfords, RutherfordsTolerance);
            AssertEx.EqualTolerance(TerabecquerelsInOneBecquerel, becquerel.Terabecquerels, TerabecquerelsTolerance);
            AssertEx.EqualTolerance(TeracuriesInOneBecquerel, becquerel.Teracuries, TeracuriesTolerance);
            AssertEx.EqualTolerance(TerarutherfordsInOneBecquerel, becquerel.Terarutherfords, TerarutherfordsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<RadioactivityUnit>(), unit =>
            {
                var quantity = Radioactivity.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromBecquerels_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Radioactivity.FromBecquerels(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Radioactivity.FromBecquerels(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromBecquerels_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Radioactivity.FromBecquerels(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var becquerel = Radioactivity.FromBecquerels(1);
            AssertEx.EqualTolerance(BecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Becquerel), BecquerelsTolerance);
            AssertEx.EqualTolerance(CuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Curie), CuriesTolerance);
            AssertEx.EqualTolerance(ExabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Exabecquerel), ExabecquerelsTolerance);
            AssertEx.EqualTolerance(GigabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Gigabecquerel), GigabecquerelsTolerance);
            AssertEx.EqualTolerance(GigacuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Gigacurie), GigacuriesTolerance);
            AssertEx.EqualTolerance(GigarutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Gigarutherford), GigarutherfordsTolerance);
            AssertEx.EqualTolerance(KilobecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Kilobecquerel), KilobecquerelsTolerance);
            AssertEx.EqualTolerance(KilocuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Kilocurie), KilocuriesTolerance);
            AssertEx.EqualTolerance(KilorutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Kilorutherford), KilorutherfordsTolerance);
            AssertEx.EqualTolerance(MegabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Megabecquerel), MegabecquerelsTolerance);
            AssertEx.EqualTolerance(MegacuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Megacurie), MegacuriesTolerance);
            AssertEx.EqualTolerance(MegarutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Megarutherford), MegarutherfordsTolerance);
            AssertEx.EqualTolerance(MicrobecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Microbecquerel), MicrobecquerelsTolerance);
            AssertEx.EqualTolerance(MicrocuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Microcurie), MicrocuriesTolerance);
            AssertEx.EqualTolerance(MicrorutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Microrutherford), MicrorutherfordsTolerance);
            AssertEx.EqualTolerance(MillibecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Millibecquerel), MillibecquerelsTolerance);
            AssertEx.EqualTolerance(MillicuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Millicurie), MillicuriesTolerance);
            AssertEx.EqualTolerance(MillirutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Millirutherford), MillirutherfordsTolerance);
            AssertEx.EqualTolerance(NanobecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Nanobecquerel), NanobecquerelsTolerance);
            AssertEx.EqualTolerance(NanocuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Nanocurie), NanocuriesTolerance);
            AssertEx.EqualTolerance(NanorutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Nanorutherford), NanorutherfordsTolerance);
            AssertEx.EqualTolerance(PetabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Petabecquerel), PetabecquerelsTolerance);
            AssertEx.EqualTolerance(PicobecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Picobecquerel), PicobecquerelsTolerance);
            AssertEx.EqualTolerance(PicocuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Picocurie), PicocuriesTolerance);
            AssertEx.EqualTolerance(PicorutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Picorutherford), PicorutherfordsTolerance);
            AssertEx.EqualTolerance(RutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Rutherford), RutherfordsTolerance);
            AssertEx.EqualTolerance(TerabecquerelsInOneBecquerel, becquerel.As(RadioactivityUnit.Terabecquerel), TerabecquerelsTolerance);
            AssertEx.EqualTolerance(TeracuriesInOneBecquerel, becquerel.As(RadioactivityUnit.Teracurie), TeracuriesTolerance);
            AssertEx.EqualTolerance(TerarutherfordsInOneBecquerel, becquerel.As(RadioactivityUnit.Terarutherford), TerarutherfordsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Radioactivity.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
            var expectedValue = quantity.As(Radioactivity.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
            var expectedUnit = Radioactivity.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Radioactivity quantityToConvert = quantity;

                Radioactivity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<RadioactivityUnit> quantityToConvert = quantity;

                IQuantity<RadioactivityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<RadioactivityUnit> quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<RadioactivityUnit> quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Radioactivity(value: 1, unit: Radioactivity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 Bq", RadioactivityUnit.Becquerel, 4.2)]
        [InlineData("en-US", "4.2 Ci", RadioactivityUnit.Curie, 4.2)]
        [InlineData("en-US", "4.2 EBq", RadioactivityUnit.Exabecquerel, 4.2)]
        [InlineData("en-US", "4.2 GBq", RadioactivityUnit.Gigabecquerel, 4.2)]
        [InlineData("en-US", "4.2 GCi", RadioactivityUnit.Gigacurie, 4.2)]
        [InlineData("en-US", "4.2 GRd", RadioactivityUnit.Gigarutherford, 4.2)]
        [InlineData("en-US", "4.2 kBq", RadioactivityUnit.Kilobecquerel, 4.2)]
        [InlineData("en-US", "4.2 kCi", RadioactivityUnit.Kilocurie, 4.2)]
        [InlineData("en-US", "4.2 kRd", RadioactivityUnit.Kilorutherford, 4.2)]
        [InlineData("en-US", "4.2 MBq", RadioactivityUnit.Megabecquerel, 4.2)]
        [InlineData("en-US", "4.2 MCi", RadioactivityUnit.Megacurie, 4.2)]
        [InlineData("en-US", "4.2 MRd", RadioactivityUnit.Megarutherford, 4.2)]
        [InlineData("en-US", "4.2 µBq", RadioactivityUnit.Microbecquerel, 4.2)]
        [InlineData("en-US", "4.2 µCi", RadioactivityUnit.Microcurie, 4.2)]
        [InlineData("en-US", "4.2 µRd", RadioactivityUnit.Microrutherford, 4.2)]
        [InlineData("en-US", "4.2 mBq", RadioactivityUnit.Millibecquerel, 4.2)]
        [InlineData("en-US", "4.2 mCi", RadioactivityUnit.Millicurie, 4.2)]
        [InlineData("en-US", "4.2 mRd", RadioactivityUnit.Millirutherford, 4.2)]
        [InlineData("en-US", "4.2 nBq", RadioactivityUnit.Nanobecquerel, 4.2)]
        [InlineData("en-US", "4.2 nCi", RadioactivityUnit.Nanocurie, 4.2)]
        [InlineData("en-US", "4.2 nRd", RadioactivityUnit.Nanorutherford, 4.2)]
        [InlineData("en-US", "4.2 PBq", RadioactivityUnit.Petabecquerel, 4.2)]
        [InlineData("en-US", "4.2 pBq", RadioactivityUnit.Picobecquerel, 4.2)]
        [InlineData("en-US", "4.2 pCi", RadioactivityUnit.Picocurie, 4.2)]
        [InlineData("en-US", "4.2 pRd", RadioactivityUnit.Picorutherford, 4.2)]
        [InlineData("en-US", "4.2 Rd", RadioactivityUnit.Rutherford, 4.2)]
        [InlineData("en-US", "4.2 TBq", RadioactivityUnit.Terabecquerel, 4.2)]
        [InlineData("en-US", "4.2 TCi", RadioactivityUnit.Teracurie, 4.2)]
        [InlineData("en-US", "4.2 TRd", RadioactivityUnit.Terarutherford, 4.2)]
        [InlineData("ru-RU", "4,2 Бк", RadioactivityUnit.Becquerel, 4.2)]
        [InlineData("ru-RU", "4,2 Ки", RadioactivityUnit.Curie, 4.2)]
        [InlineData("ru-RU", "4,2 ЭБк", RadioactivityUnit.Exabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 ГБк", RadioactivityUnit.Gigabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 ГКи", RadioactivityUnit.Gigacurie, 4.2)]
        [InlineData("ru-RU", "4,2 ГРд", RadioactivityUnit.Gigarutherford, 4.2)]
        [InlineData("ru-RU", "4,2 кБк", RadioactivityUnit.Kilobecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 кКи", RadioactivityUnit.Kilocurie, 4.2)]
        [InlineData("ru-RU", "4,2 кРд", RadioactivityUnit.Kilorutherford, 4.2)]
        [InlineData("ru-RU", "4,2 МБк", RadioactivityUnit.Megabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 МКи", RadioactivityUnit.Megacurie, 4.2)]
        [InlineData("ru-RU", "4,2 МРд", RadioactivityUnit.Megarutherford, 4.2)]
        [InlineData("ru-RU", "4,2 мкБк", RadioactivityUnit.Microbecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 мкКи", RadioactivityUnit.Microcurie, 4.2)]
        [InlineData("ru-RU", "4,2 мкРд", RadioactivityUnit.Microrutherford, 4.2)]
        [InlineData("ru-RU", "4,2 мБк", RadioactivityUnit.Millibecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 мКи", RadioactivityUnit.Millicurie, 4.2)]
        [InlineData("ru-RU", "4,2 мРд", RadioactivityUnit.Millirutherford, 4.2)]
        [InlineData("ru-RU", "4,2 нБк", RadioactivityUnit.Nanobecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 нКи", RadioactivityUnit.Nanocurie, 4.2)]
        [InlineData("ru-RU", "4,2 нРд", RadioactivityUnit.Nanorutherford, 4.2)]
        [InlineData("ru-RU", "4,2 ПБк", RadioactivityUnit.Petabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 пБк", RadioactivityUnit.Picobecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 пКи", RadioactivityUnit.Picocurie, 4.2)]
        [InlineData("ru-RU", "4,2 пРд", RadioactivityUnit.Picorutherford, 4.2)]
        [InlineData("ru-RU", "4,2 Рд", RadioactivityUnit.Rutherford, 4.2)]
        [InlineData("ru-RU", "4,2 ТБк", RadioactivityUnit.Terabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 ТКи", RadioactivityUnit.Teracurie, 4.2)]
        [InlineData("ru-RU", "4,2 ТРд", RadioactivityUnit.Terarutherford, 4.2)]
        public void Parse(string culture, string quantityString, RadioactivityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Radioactivity.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 Bq", RadioactivityUnit.Becquerel, 4.2)]
        [InlineData("en-US", "4.2 Ci", RadioactivityUnit.Curie, 4.2)]
        [InlineData("en-US", "4.2 EBq", RadioactivityUnit.Exabecquerel, 4.2)]
        [InlineData("en-US", "4.2 GBq", RadioactivityUnit.Gigabecquerel, 4.2)]
        [InlineData("en-US", "4.2 GCi", RadioactivityUnit.Gigacurie, 4.2)]
        [InlineData("en-US", "4.2 GRd", RadioactivityUnit.Gigarutherford, 4.2)]
        [InlineData("en-US", "4.2 kBq", RadioactivityUnit.Kilobecquerel, 4.2)]
        [InlineData("en-US", "4.2 kCi", RadioactivityUnit.Kilocurie, 4.2)]
        [InlineData("en-US", "4.2 kRd", RadioactivityUnit.Kilorutherford, 4.2)]
        [InlineData("en-US", "4.2 MBq", RadioactivityUnit.Megabecquerel, 4.2)]
        [InlineData("en-US", "4.2 MCi", RadioactivityUnit.Megacurie, 4.2)]
        [InlineData("en-US", "4.2 MRd", RadioactivityUnit.Megarutherford, 4.2)]
        [InlineData("en-US", "4.2 µBq", RadioactivityUnit.Microbecquerel, 4.2)]
        [InlineData("en-US", "4.2 µCi", RadioactivityUnit.Microcurie, 4.2)]
        [InlineData("en-US", "4.2 µRd", RadioactivityUnit.Microrutherford, 4.2)]
        [InlineData("en-US", "4.2 mBq", RadioactivityUnit.Millibecquerel, 4.2)]
        [InlineData("en-US", "4.2 mCi", RadioactivityUnit.Millicurie, 4.2)]
        [InlineData("en-US", "4.2 mRd", RadioactivityUnit.Millirutherford, 4.2)]
        [InlineData("en-US", "4.2 nBq", RadioactivityUnit.Nanobecquerel, 4.2)]
        [InlineData("en-US", "4.2 nCi", RadioactivityUnit.Nanocurie, 4.2)]
        [InlineData("en-US", "4.2 nRd", RadioactivityUnit.Nanorutherford, 4.2)]
        [InlineData("en-US", "4.2 PBq", RadioactivityUnit.Petabecquerel, 4.2)]
        [InlineData("en-US", "4.2 pBq", RadioactivityUnit.Picobecquerel, 4.2)]
        [InlineData("en-US", "4.2 pCi", RadioactivityUnit.Picocurie, 4.2)]
        [InlineData("en-US", "4.2 pRd", RadioactivityUnit.Picorutherford, 4.2)]
        [InlineData("en-US", "4.2 Rd", RadioactivityUnit.Rutherford, 4.2)]
        [InlineData("en-US", "4.2 TBq", RadioactivityUnit.Terabecquerel, 4.2)]
        [InlineData("en-US", "4.2 TCi", RadioactivityUnit.Teracurie, 4.2)]
        [InlineData("en-US", "4.2 TRd", RadioactivityUnit.Terarutherford, 4.2)]
        [InlineData("ru-RU", "4,2 Бк", RadioactivityUnit.Becquerel, 4.2)]
        [InlineData("ru-RU", "4,2 Ки", RadioactivityUnit.Curie, 4.2)]
        [InlineData("ru-RU", "4,2 ЭБк", RadioactivityUnit.Exabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 ГБк", RadioactivityUnit.Gigabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 ГКи", RadioactivityUnit.Gigacurie, 4.2)]
        [InlineData("ru-RU", "4,2 ГРд", RadioactivityUnit.Gigarutherford, 4.2)]
        [InlineData("ru-RU", "4,2 кБк", RadioactivityUnit.Kilobecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 кКи", RadioactivityUnit.Kilocurie, 4.2)]
        [InlineData("ru-RU", "4,2 кРд", RadioactivityUnit.Kilorutherford, 4.2)]
        [InlineData("ru-RU", "4,2 МБк", RadioactivityUnit.Megabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 МКи", RadioactivityUnit.Megacurie, 4.2)]
        [InlineData("ru-RU", "4,2 МРд", RadioactivityUnit.Megarutherford, 4.2)]
        [InlineData("ru-RU", "4,2 мкБк", RadioactivityUnit.Microbecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 мкКи", RadioactivityUnit.Microcurie, 4.2)]
        [InlineData("ru-RU", "4,2 мкРд", RadioactivityUnit.Microrutherford, 4.2)]
        [InlineData("ru-RU", "4,2 мБк", RadioactivityUnit.Millibecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 мКи", RadioactivityUnit.Millicurie, 4.2)]
        [InlineData("ru-RU", "4,2 мРд", RadioactivityUnit.Millirutherford, 4.2)]
        [InlineData("ru-RU", "4,2 нБк", RadioactivityUnit.Nanobecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 нКи", RadioactivityUnit.Nanocurie, 4.2)]
        [InlineData("ru-RU", "4,2 нРд", RadioactivityUnit.Nanorutherford, 4.2)]
        [InlineData("ru-RU", "4,2 ПБк", RadioactivityUnit.Petabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 пБк", RadioactivityUnit.Picobecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 пКи", RadioactivityUnit.Picocurie, 4.2)]
        [InlineData("ru-RU", "4,2 пРд", RadioactivityUnit.Picorutherford, 4.2)]
        [InlineData("ru-RU", "4,2 Рд", RadioactivityUnit.Rutherford, 4.2)]
        [InlineData("ru-RU", "4,2 ТБк", RadioactivityUnit.Terabecquerel, 4.2)]
        [InlineData("ru-RU", "4,2 ТКи", RadioactivityUnit.Teracurie, 4.2)]
        [InlineData("ru-RU", "4,2 ТРд", RadioactivityUnit.Terarutherford, 4.2)]
        public void TryParse(string culture, string quantityString, RadioactivityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Radioactivity.TryParse(quantityString, out Radioactivity parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("Bq", RadioactivityUnit.Becquerel)]
        [InlineData("Ci", RadioactivityUnit.Curie)]
        [InlineData("EBq", RadioactivityUnit.Exabecquerel)]
        [InlineData("GBq", RadioactivityUnit.Gigabecquerel)]
        [InlineData("GCi", RadioactivityUnit.Gigacurie)]
        [InlineData("GRd", RadioactivityUnit.Gigarutherford)]
        [InlineData("kBq", RadioactivityUnit.Kilobecquerel)]
        [InlineData("kCi", RadioactivityUnit.Kilocurie)]
        [InlineData("kRd", RadioactivityUnit.Kilorutherford)]
        [InlineData("MBq", RadioactivityUnit.Megabecquerel)]
        [InlineData("MCi", RadioactivityUnit.Megacurie)]
        [InlineData("MRd", RadioactivityUnit.Megarutherford)]
        [InlineData("µBq", RadioactivityUnit.Microbecquerel)]
        [InlineData("µCi", RadioactivityUnit.Microcurie)]
        [InlineData("µRd", RadioactivityUnit.Microrutherford)]
        [InlineData("mBq", RadioactivityUnit.Millibecquerel)]
        [InlineData("mCi", RadioactivityUnit.Millicurie)]
        [InlineData("mRd", RadioactivityUnit.Millirutherford)]
        [InlineData("nBq", RadioactivityUnit.Nanobecquerel)]
        [InlineData("nCi", RadioactivityUnit.Nanocurie)]
        [InlineData("nRd", RadioactivityUnit.Nanorutherford)]
        [InlineData("PBq", RadioactivityUnit.Petabecquerel)]
        [InlineData("pBq", RadioactivityUnit.Picobecquerel)]
        [InlineData("pCi", RadioactivityUnit.Picocurie)]
        [InlineData("pRd", RadioactivityUnit.Picorutherford)]
        [InlineData("Rd", RadioactivityUnit.Rutherford)]
        [InlineData("TBq", RadioactivityUnit.Terabecquerel)]
        [InlineData("TCi", RadioactivityUnit.Teracurie)]
        [InlineData("TRd", RadioactivityUnit.Terarutherford)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RadioactivityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            RadioactivityUnit parsedUnit = Radioactivity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Bq", RadioactivityUnit.Becquerel)]
        [InlineData("Ci", RadioactivityUnit.Curie)]
        [InlineData("EBq", RadioactivityUnit.Exabecquerel)]
        [InlineData("GBq", RadioactivityUnit.Gigabecquerel)]
        [InlineData("GCi", RadioactivityUnit.Gigacurie)]
        [InlineData("GRd", RadioactivityUnit.Gigarutherford)]
        [InlineData("kBq", RadioactivityUnit.Kilobecquerel)]
        [InlineData("kCi", RadioactivityUnit.Kilocurie)]
        [InlineData("kRd", RadioactivityUnit.Kilorutherford)]
        [InlineData("MBq", RadioactivityUnit.Megabecquerel)]
        [InlineData("MCi", RadioactivityUnit.Megacurie)]
        [InlineData("MRd", RadioactivityUnit.Megarutherford)]
        [InlineData("µBq", RadioactivityUnit.Microbecquerel)]
        [InlineData("µCi", RadioactivityUnit.Microcurie)]
        [InlineData("µRd", RadioactivityUnit.Microrutherford)]
        [InlineData("mBq", RadioactivityUnit.Millibecquerel)]
        [InlineData("mCi", RadioactivityUnit.Millicurie)]
        [InlineData("mRd", RadioactivityUnit.Millirutherford)]
        [InlineData("nBq", RadioactivityUnit.Nanobecquerel)]
        [InlineData("nCi", RadioactivityUnit.Nanocurie)]
        [InlineData("nRd", RadioactivityUnit.Nanorutherford)]
        [InlineData("PBq", RadioactivityUnit.Petabecquerel)]
        [InlineData("pBq", RadioactivityUnit.Picobecquerel)]
        [InlineData("pCi", RadioactivityUnit.Picocurie)]
        [InlineData("pRd", RadioactivityUnit.Picorutherford)]
        [InlineData("Rd", RadioactivityUnit.Rutherford)]
        [InlineData("TBq", RadioactivityUnit.Terabecquerel)]
        [InlineData("TCi", RadioactivityUnit.Teracurie)]
        [InlineData("TRd", RadioactivityUnit.Terarutherford)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RadioactivityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            RadioactivityUnit parsedUnit = Radioactivity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Bq", RadioactivityUnit.Becquerel)]
        [InlineData("en-US", "Ci", RadioactivityUnit.Curie)]
        [InlineData("en-US", "EBq", RadioactivityUnit.Exabecquerel)]
        [InlineData("en-US", "GBq", RadioactivityUnit.Gigabecquerel)]
        [InlineData("en-US", "GCi", RadioactivityUnit.Gigacurie)]
        [InlineData("en-US", "GRd", RadioactivityUnit.Gigarutherford)]
        [InlineData("en-US", "kBq", RadioactivityUnit.Kilobecquerel)]
        [InlineData("en-US", "kCi", RadioactivityUnit.Kilocurie)]
        [InlineData("en-US", "kRd", RadioactivityUnit.Kilorutherford)]
        [InlineData("en-US", "MBq", RadioactivityUnit.Megabecquerel)]
        [InlineData("en-US", "MCi", RadioactivityUnit.Megacurie)]
        [InlineData("en-US", "MRd", RadioactivityUnit.Megarutherford)]
        [InlineData("en-US", "µBq", RadioactivityUnit.Microbecquerel)]
        [InlineData("en-US", "µCi", RadioactivityUnit.Microcurie)]
        [InlineData("en-US", "µRd", RadioactivityUnit.Microrutherford)]
        [InlineData("en-US", "mBq", RadioactivityUnit.Millibecquerel)]
        [InlineData("en-US", "mCi", RadioactivityUnit.Millicurie)]
        [InlineData("en-US", "mRd", RadioactivityUnit.Millirutherford)]
        [InlineData("en-US", "nBq", RadioactivityUnit.Nanobecquerel)]
        [InlineData("en-US", "nCi", RadioactivityUnit.Nanocurie)]
        [InlineData("en-US", "nRd", RadioactivityUnit.Nanorutherford)]
        [InlineData("en-US", "PBq", RadioactivityUnit.Petabecquerel)]
        [InlineData("en-US", "pBq", RadioactivityUnit.Picobecquerel)]
        [InlineData("en-US", "pCi", RadioactivityUnit.Picocurie)]
        [InlineData("en-US", "pRd", RadioactivityUnit.Picorutherford)]
        [InlineData("en-US", "Rd", RadioactivityUnit.Rutherford)]
        [InlineData("en-US", "TBq", RadioactivityUnit.Terabecquerel)]
        [InlineData("en-US", "TCi", RadioactivityUnit.Teracurie)]
        [InlineData("en-US", "TRd", RadioactivityUnit.Terarutherford)]
        [InlineData("ru-RU", "Бк", RadioactivityUnit.Becquerel)]
        [InlineData("ru-RU", "Ки", RadioactivityUnit.Curie)]
        [InlineData("ru-RU", "ЭБк", RadioactivityUnit.Exabecquerel)]
        [InlineData("ru-RU", "ГБк", RadioactivityUnit.Gigabecquerel)]
        [InlineData("ru-RU", "ГКи", RadioactivityUnit.Gigacurie)]
        [InlineData("ru-RU", "ГРд", RadioactivityUnit.Gigarutherford)]
        [InlineData("ru-RU", "кБк", RadioactivityUnit.Kilobecquerel)]
        [InlineData("ru-RU", "кКи", RadioactivityUnit.Kilocurie)]
        [InlineData("ru-RU", "кРд", RadioactivityUnit.Kilorutherford)]
        [InlineData("ru-RU", "МБк", RadioactivityUnit.Megabecquerel)]
        [InlineData("ru-RU", "МКи", RadioactivityUnit.Megacurie)]
        [InlineData("ru-RU", "МРд", RadioactivityUnit.Megarutherford)]
        [InlineData("ru-RU", "мкБк", RadioactivityUnit.Microbecquerel)]
        [InlineData("ru-RU", "мкКи", RadioactivityUnit.Microcurie)]
        [InlineData("ru-RU", "мкРд", RadioactivityUnit.Microrutherford)]
        [InlineData("ru-RU", "мБк", RadioactivityUnit.Millibecquerel)]
        [InlineData("ru-RU", "мКи", RadioactivityUnit.Millicurie)]
        [InlineData("ru-RU", "мРд", RadioactivityUnit.Millirutherford)]
        [InlineData("ru-RU", "нБк", RadioactivityUnit.Nanobecquerel)]
        [InlineData("ru-RU", "нКи", RadioactivityUnit.Nanocurie)]
        [InlineData("ru-RU", "нРд", RadioactivityUnit.Nanorutherford)]
        [InlineData("ru-RU", "ПБк", RadioactivityUnit.Petabecquerel)]
        [InlineData("ru-RU", "пБк", RadioactivityUnit.Picobecquerel)]
        [InlineData("ru-RU", "пКи", RadioactivityUnit.Picocurie)]
        [InlineData("ru-RU", "пРд", RadioactivityUnit.Picorutherford)]
        [InlineData("ru-RU", "Рд", RadioactivityUnit.Rutherford)]
        [InlineData("ru-RU", "ТБк", RadioactivityUnit.Terabecquerel)]
        [InlineData("ru-RU", "ТКи", RadioactivityUnit.Teracurie)]
        [InlineData("ru-RU", "ТРд", RadioactivityUnit.Terarutherford)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, RadioactivityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            RadioactivityUnit parsedUnit = Radioactivity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Bq", RadioactivityUnit.Becquerel)]
        [InlineData("en-US", "Ci", RadioactivityUnit.Curie)]
        [InlineData("en-US", "EBq", RadioactivityUnit.Exabecquerel)]
        [InlineData("en-US", "GBq", RadioactivityUnit.Gigabecquerel)]
        [InlineData("en-US", "GCi", RadioactivityUnit.Gigacurie)]
        [InlineData("en-US", "GRd", RadioactivityUnit.Gigarutherford)]
        [InlineData("en-US", "kBq", RadioactivityUnit.Kilobecquerel)]
        [InlineData("en-US", "kCi", RadioactivityUnit.Kilocurie)]
        [InlineData("en-US", "kRd", RadioactivityUnit.Kilorutherford)]
        [InlineData("en-US", "MBq", RadioactivityUnit.Megabecquerel)]
        [InlineData("en-US", "MCi", RadioactivityUnit.Megacurie)]
        [InlineData("en-US", "MRd", RadioactivityUnit.Megarutherford)]
        [InlineData("en-US", "µBq", RadioactivityUnit.Microbecquerel)]
        [InlineData("en-US", "µCi", RadioactivityUnit.Microcurie)]
        [InlineData("en-US", "µRd", RadioactivityUnit.Microrutherford)]
        [InlineData("en-US", "mBq", RadioactivityUnit.Millibecquerel)]
        [InlineData("en-US", "mCi", RadioactivityUnit.Millicurie)]
        [InlineData("en-US", "mRd", RadioactivityUnit.Millirutherford)]
        [InlineData("en-US", "nBq", RadioactivityUnit.Nanobecquerel)]
        [InlineData("en-US", "nCi", RadioactivityUnit.Nanocurie)]
        [InlineData("en-US", "nRd", RadioactivityUnit.Nanorutherford)]
        [InlineData("en-US", "PBq", RadioactivityUnit.Petabecquerel)]
        [InlineData("en-US", "pBq", RadioactivityUnit.Picobecquerel)]
        [InlineData("en-US", "pCi", RadioactivityUnit.Picocurie)]
        [InlineData("en-US", "pRd", RadioactivityUnit.Picorutherford)]
        [InlineData("en-US", "Rd", RadioactivityUnit.Rutherford)]
        [InlineData("en-US", "TBq", RadioactivityUnit.Terabecquerel)]
        [InlineData("en-US", "TCi", RadioactivityUnit.Teracurie)]
        [InlineData("en-US", "TRd", RadioactivityUnit.Terarutherford)]
        [InlineData("ru-RU", "Бк", RadioactivityUnit.Becquerel)]
        [InlineData("ru-RU", "Ки", RadioactivityUnit.Curie)]
        [InlineData("ru-RU", "ЭБк", RadioactivityUnit.Exabecquerel)]
        [InlineData("ru-RU", "ГБк", RadioactivityUnit.Gigabecquerel)]
        [InlineData("ru-RU", "ГКи", RadioactivityUnit.Gigacurie)]
        [InlineData("ru-RU", "ГРд", RadioactivityUnit.Gigarutherford)]
        [InlineData("ru-RU", "кБк", RadioactivityUnit.Kilobecquerel)]
        [InlineData("ru-RU", "кКи", RadioactivityUnit.Kilocurie)]
        [InlineData("ru-RU", "кРд", RadioactivityUnit.Kilorutherford)]
        [InlineData("ru-RU", "МБк", RadioactivityUnit.Megabecquerel)]
        [InlineData("ru-RU", "МКи", RadioactivityUnit.Megacurie)]
        [InlineData("ru-RU", "МРд", RadioactivityUnit.Megarutherford)]
        [InlineData("ru-RU", "мкБк", RadioactivityUnit.Microbecquerel)]
        [InlineData("ru-RU", "мкКи", RadioactivityUnit.Microcurie)]
        [InlineData("ru-RU", "мкРд", RadioactivityUnit.Microrutherford)]
        [InlineData("ru-RU", "мБк", RadioactivityUnit.Millibecquerel)]
        [InlineData("ru-RU", "мКи", RadioactivityUnit.Millicurie)]
        [InlineData("ru-RU", "мРд", RadioactivityUnit.Millirutherford)]
        [InlineData("ru-RU", "нБк", RadioactivityUnit.Nanobecquerel)]
        [InlineData("ru-RU", "нКи", RadioactivityUnit.Nanocurie)]
        [InlineData("ru-RU", "нРд", RadioactivityUnit.Nanorutherford)]
        [InlineData("ru-RU", "ПБк", RadioactivityUnit.Petabecquerel)]
        [InlineData("ru-RU", "пБк", RadioactivityUnit.Picobecquerel)]
        [InlineData("ru-RU", "пКи", RadioactivityUnit.Picocurie)]
        [InlineData("ru-RU", "пРд", RadioactivityUnit.Picorutherford)]
        [InlineData("ru-RU", "Рд", RadioactivityUnit.Rutherford)]
        [InlineData("ru-RU", "ТБк", RadioactivityUnit.Terabecquerel)]
        [InlineData("ru-RU", "ТКи", RadioactivityUnit.Teracurie)]
        [InlineData("ru-RU", "ТРд", RadioactivityUnit.Terarutherford)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, RadioactivityUnit expectedUnit)
        {
            RadioactivityUnit parsedUnit = Radioactivity.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Bq", RadioactivityUnit.Becquerel)]
        [InlineData("Ci", RadioactivityUnit.Curie)]
        [InlineData("EBq", RadioactivityUnit.Exabecquerel)]
        [InlineData("GBq", RadioactivityUnit.Gigabecquerel)]
        [InlineData("GCi", RadioactivityUnit.Gigacurie)]
        [InlineData("GRd", RadioactivityUnit.Gigarutherford)]
        [InlineData("kBq", RadioactivityUnit.Kilobecquerel)]
        [InlineData("kCi", RadioactivityUnit.Kilocurie)]
        [InlineData("kRd", RadioactivityUnit.Kilorutherford)]
        [InlineData("MBq", RadioactivityUnit.Megabecquerel)]
        [InlineData("MCi", RadioactivityUnit.Megacurie)]
        [InlineData("MRd", RadioactivityUnit.Megarutherford)]
        [InlineData("µBq", RadioactivityUnit.Microbecquerel)]
        [InlineData("µCi", RadioactivityUnit.Microcurie)]
        [InlineData("µRd", RadioactivityUnit.Microrutherford)]
        [InlineData("mBq", RadioactivityUnit.Millibecquerel)]
        [InlineData("mCi", RadioactivityUnit.Millicurie)]
        [InlineData("mRd", RadioactivityUnit.Millirutherford)]
        [InlineData("nBq", RadioactivityUnit.Nanobecquerel)]
        [InlineData("nCi", RadioactivityUnit.Nanocurie)]
        [InlineData("nRd", RadioactivityUnit.Nanorutherford)]
        [InlineData("PBq", RadioactivityUnit.Petabecquerel)]
        [InlineData("pBq", RadioactivityUnit.Picobecquerel)]
        [InlineData("pCi", RadioactivityUnit.Picocurie)]
        [InlineData("pRd", RadioactivityUnit.Picorutherford)]
        [InlineData("Rd", RadioactivityUnit.Rutherford)]
        [InlineData("TBq", RadioactivityUnit.Terabecquerel)]
        [InlineData("TCi", RadioactivityUnit.Teracurie)]
        [InlineData("TRd", RadioactivityUnit.Terarutherford)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RadioactivityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Radioactivity.TryParseUnit(abbreviation, out RadioactivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Bq", RadioactivityUnit.Becquerel)]
        [InlineData("Ci", RadioactivityUnit.Curie)]
        [InlineData("EBq", RadioactivityUnit.Exabecquerel)]
        [InlineData("GBq", RadioactivityUnit.Gigabecquerel)]
        [InlineData("GCi", RadioactivityUnit.Gigacurie)]
        [InlineData("GRd", RadioactivityUnit.Gigarutherford)]
        [InlineData("kBq", RadioactivityUnit.Kilobecquerel)]
        [InlineData("kCi", RadioactivityUnit.Kilocurie)]
        [InlineData("kRd", RadioactivityUnit.Kilorutherford)]
        [InlineData("MBq", RadioactivityUnit.Megabecquerel)]
        [InlineData("MCi", RadioactivityUnit.Megacurie)]
        [InlineData("MRd", RadioactivityUnit.Megarutherford)]
        [InlineData("µBq", RadioactivityUnit.Microbecquerel)]
        [InlineData("µCi", RadioactivityUnit.Microcurie)]
        [InlineData("µRd", RadioactivityUnit.Microrutherford)]
        [InlineData("mBq", RadioactivityUnit.Millibecquerel)]
        [InlineData("mCi", RadioactivityUnit.Millicurie)]
        [InlineData("mRd", RadioactivityUnit.Millirutherford)]
        [InlineData("nBq", RadioactivityUnit.Nanobecquerel)]
        [InlineData("nCi", RadioactivityUnit.Nanocurie)]
        [InlineData("nRd", RadioactivityUnit.Nanorutherford)]
        [InlineData("PBq", RadioactivityUnit.Petabecquerel)]
        [InlineData("pBq", RadioactivityUnit.Picobecquerel)]
        [InlineData("pCi", RadioactivityUnit.Picocurie)]
        [InlineData("pRd", RadioactivityUnit.Picorutherford)]
        [InlineData("Rd", RadioactivityUnit.Rutherford)]
        [InlineData("TBq", RadioactivityUnit.Terabecquerel)]
        [InlineData("TCi", RadioactivityUnit.Teracurie)]
        [InlineData("TRd", RadioactivityUnit.Terarutherford)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RadioactivityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Radioactivity.TryParseUnit(abbreviation, out RadioactivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Bq", RadioactivityUnit.Becquerel)]
        [InlineData("en-US", "Ci", RadioactivityUnit.Curie)]
        [InlineData("en-US", "EBq", RadioactivityUnit.Exabecquerel)]
        [InlineData("en-US", "GBq", RadioactivityUnit.Gigabecquerel)]
        [InlineData("en-US", "GCi", RadioactivityUnit.Gigacurie)]
        [InlineData("en-US", "GRd", RadioactivityUnit.Gigarutherford)]
        [InlineData("en-US", "kBq", RadioactivityUnit.Kilobecquerel)]
        [InlineData("en-US", "kCi", RadioactivityUnit.Kilocurie)]
        [InlineData("en-US", "kRd", RadioactivityUnit.Kilorutherford)]
        [InlineData("en-US", "MBq", RadioactivityUnit.Megabecquerel)]
        [InlineData("en-US", "MCi", RadioactivityUnit.Megacurie)]
        [InlineData("en-US", "MRd", RadioactivityUnit.Megarutherford)]
        [InlineData("en-US", "µBq", RadioactivityUnit.Microbecquerel)]
        [InlineData("en-US", "µCi", RadioactivityUnit.Microcurie)]
        [InlineData("en-US", "µRd", RadioactivityUnit.Microrutherford)]
        [InlineData("en-US", "mBq", RadioactivityUnit.Millibecquerel)]
        [InlineData("en-US", "mCi", RadioactivityUnit.Millicurie)]
        [InlineData("en-US", "mRd", RadioactivityUnit.Millirutherford)]
        [InlineData("en-US", "nBq", RadioactivityUnit.Nanobecquerel)]
        [InlineData("en-US", "nCi", RadioactivityUnit.Nanocurie)]
        [InlineData("en-US", "nRd", RadioactivityUnit.Nanorutherford)]
        [InlineData("en-US", "PBq", RadioactivityUnit.Petabecquerel)]
        [InlineData("en-US", "pBq", RadioactivityUnit.Picobecquerel)]
        [InlineData("en-US", "pCi", RadioactivityUnit.Picocurie)]
        [InlineData("en-US", "pRd", RadioactivityUnit.Picorutherford)]
        [InlineData("en-US", "Rd", RadioactivityUnit.Rutherford)]
        [InlineData("en-US", "TBq", RadioactivityUnit.Terabecquerel)]
        [InlineData("en-US", "TCi", RadioactivityUnit.Teracurie)]
        [InlineData("en-US", "TRd", RadioactivityUnit.Terarutherford)]
        [InlineData("ru-RU", "Бк", RadioactivityUnit.Becquerel)]
        [InlineData("ru-RU", "Ки", RadioactivityUnit.Curie)]
        [InlineData("ru-RU", "ЭБк", RadioactivityUnit.Exabecquerel)]
        [InlineData("ru-RU", "ГБк", RadioactivityUnit.Gigabecquerel)]
        [InlineData("ru-RU", "ГКи", RadioactivityUnit.Gigacurie)]
        [InlineData("ru-RU", "ГРд", RadioactivityUnit.Gigarutherford)]
        [InlineData("ru-RU", "кБк", RadioactivityUnit.Kilobecquerel)]
        [InlineData("ru-RU", "кКи", RadioactivityUnit.Kilocurie)]
        [InlineData("ru-RU", "кРд", RadioactivityUnit.Kilorutherford)]
        [InlineData("ru-RU", "МБк", RadioactivityUnit.Megabecquerel)]
        [InlineData("ru-RU", "МКи", RadioactivityUnit.Megacurie)]
        [InlineData("ru-RU", "МРд", RadioactivityUnit.Megarutherford)]
        [InlineData("ru-RU", "мкБк", RadioactivityUnit.Microbecquerel)]
        [InlineData("ru-RU", "мкКи", RadioactivityUnit.Microcurie)]
        [InlineData("ru-RU", "мкРд", RadioactivityUnit.Microrutherford)]
        [InlineData("ru-RU", "мБк", RadioactivityUnit.Millibecquerel)]
        [InlineData("ru-RU", "мКи", RadioactivityUnit.Millicurie)]
        [InlineData("ru-RU", "мРд", RadioactivityUnit.Millirutherford)]
        [InlineData("ru-RU", "нБк", RadioactivityUnit.Nanobecquerel)]
        [InlineData("ru-RU", "нКи", RadioactivityUnit.Nanocurie)]
        [InlineData("ru-RU", "нРд", RadioactivityUnit.Nanorutherford)]
        [InlineData("ru-RU", "ПБк", RadioactivityUnit.Petabecquerel)]
        [InlineData("ru-RU", "пБк", RadioactivityUnit.Picobecquerel)]
        [InlineData("ru-RU", "пКи", RadioactivityUnit.Picocurie)]
        [InlineData("ru-RU", "пРд", RadioactivityUnit.Picorutherford)]
        [InlineData("ru-RU", "Рд", RadioactivityUnit.Rutherford)]
        [InlineData("ru-RU", "ТБк", RadioactivityUnit.Terabecquerel)]
        [InlineData("ru-RU", "ТКи", RadioactivityUnit.Teracurie)]
        [InlineData("ru-RU", "ТРд", RadioactivityUnit.Terarutherford)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, RadioactivityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Radioactivity.TryParseUnit(abbreviation, out RadioactivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Bq", RadioactivityUnit.Becquerel)]
        [InlineData("en-US", "Ci", RadioactivityUnit.Curie)]
        [InlineData("en-US", "EBq", RadioactivityUnit.Exabecquerel)]
        [InlineData("en-US", "GBq", RadioactivityUnit.Gigabecquerel)]
        [InlineData("en-US", "GCi", RadioactivityUnit.Gigacurie)]
        [InlineData("en-US", "GRd", RadioactivityUnit.Gigarutherford)]
        [InlineData("en-US", "kBq", RadioactivityUnit.Kilobecquerel)]
        [InlineData("en-US", "kCi", RadioactivityUnit.Kilocurie)]
        [InlineData("en-US", "kRd", RadioactivityUnit.Kilorutherford)]
        [InlineData("en-US", "MBq", RadioactivityUnit.Megabecquerel)]
        [InlineData("en-US", "MCi", RadioactivityUnit.Megacurie)]
        [InlineData("en-US", "MRd", RadioactivityUnit.Megarutherford)]
        [InlineData("en-US", "µBq", RadioactivityUnit.Microbecquerel)]
        [InlineData("en-US", "µCi", RadioactivityUnit.Microcurie)]
        [InlineData("en-US", "µRd", RadioactivityUnit.Microrutherford)]
        [InlineData("en-US", "mBq", RadioactivityUnit.Millibecquerel)]
        [InlineData("en-US", "mCi", RadioactivityUnit.Millicurie)]
        [InlineData("en-US", "mRd", RadioactivityUnit.Millirutherford)]
        [InlineData("en-US", "nBq", RadioactivityUnit.Nanobecquerel)]
        [InlineData("en-US", "nCi", RadioactivityUnit.Nanocurie)]
        [InlineData("en-US", "nRd", RadioactivityUnit.Nanorutherford)]
        [InlineData("en-US", "PBq", RadioactivityUnit.Petabecquerel)]
        [InlineData("en-US", "pBq", RadioactivityUnit.Picobecquerel)]
        [InlineData("en-US", "pCi", RadioactivityUnit.Picocurie)]
        [InlineData("en-US", "pRd", RadioactivityUnit.Picorutherford)]
        [InlineData("en-US", "Rd", RadioactivityUnit.Rutherford)]
        [InlineData("en-US", "TBq", RadioactivityUnit.Terabecquerel)]
        [InlineData("en-US", "TCi", RadioactivityUnit.Teracurie)]
        [InlineData("en-US", "TRd", RadioactivityUnit.Terarutherford)]
        [InlineData("ru-RU", "Бк", RadioactivityUnit.Becquerel)]
        [InlineData("ru-RU", "Ки", RadioactivityUnit.Curie)]
        [InlineData("ru-RU", "ЭБк", RadioactivityUnit.Exabecquerel)]
        [InlineData("ru-RU", "ГБк", RadioactivityUnit.Gigabecquerel)]
        [InlineData("ru-RU", "ГКи", RadioactivityUnit.Gigacurie)]
        [InlineData("ru-RU", "ГРд", RadioactivityUnit.Gigarutherford)]
        [InlineData("ru-RU", "кБк", RadioactivityUnit.Kilobecquerel)]
        [InlineData("ru-RU", "кКи", RadioactivityUnit.Kilocurie)]
        [InlineData("ru-RU", "кРд", RadioactivityUnit.Kilorutherford)]
        [InlineData("ru-RU", "МБк", RadioactivityUnit.Megabecquerel)]
        [InlineData("ru-RU", "МКи", RadioactivityUnit.Megacurie)]
        [InlineData("ru-RU", "МРд", RadioactivityUnit.Megarutherford)]
        [InlineData("ru-RU", "мкБк", RadioactivityUnit.Microbecquerel)]
        [InlineData("ru-RU", "мкКи", RadioactivityUnit.Microcurie)]
        [InlineData("ru-RU", "мкРд", RadioactivityUnit.Microrutherford)]
        [InlineData("ru-RU", "мБк", RadioactivityUnit.Millibecquerel)]
        [InlineData("ru-RU", "мКи", RadioactivityUnit.Millicurie)]
        [InlineData("ru-RU", "мРд", RadioactivityUnit.Millirutherford)]
        [InlineData("ru-RU", "нБк", RadioactivityUnit.Nanobecquerel)]
        [InlineData("ru-RU", "нКи", RadioactivityUnit.Nanocurie)]
        [InlineData("ru-RU", "нРд", RadioactivityUnit.Nanorutherford)]
        [InlineData("ru-RU", "ПБк", RadioactivityUnit.Petabecquerel)]
        [InlineData("ru-RU", "пБк", RadioactivityUnit.Picobecquerel)]
        [InlineData("ru-RU", "пКи", RadioactivityUnit.Picocurie)]
        [InlineData("ru-RU", "пРд", RadioactivityUnit.Picorutherford)]
        [InlineData("ru-RU", "Рд", RadioactivityUnit.Rutherford)]
        [InlineData("ru-RU", "ТБк", RadioactivityUnit.Terabecquerel)]
        [InlineData("ru-RU", "ТКи", RadioactivityUnit.Teracurie)]
        [InlineData("ru-RU", "ТРд", RadioactivityUnit.Terarutherford)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, RadioactivityUnit expectedUnit)
        {
            Assert.True(Radioactivity.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out RadioactivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", RadioactivityUnit.Becquerel, "Bq")]
        [InlineData("en-US", RadioactivityUnit.Curie, "Ci")]
        [InlineData("en-US", RadioactivityUnit.Exabecquerel, "EBq")]
        [InlineData("en-US", RadioactivityUnit.Gigabecquerel, "GBq")]
        [InlineData("en-US", RadioactivityUnit.Gigacurie, "GCi")]
        [InlineData("en-US", RadioactivityUnit.Gigarutherford, "GRd")]
        [InlineData("en-US", RadioactivityUnit.Kilobecquerel, "kBq")]
        [InlineData("en-US", RadioactivityUnit.Kilocurie, "kCi")]
        [InlineData("en-US", RadioactivityUnit.Kilorutherford, "kRd")]
        [InlineData("en-US", RadioactivityUnit.Megabecquerel, "MBq")]
        [InlineData("en-US", RadioactivityUnit.Megacurie, "MCi")]
        [InlineData("en-US", RadioactivityUnit.Megarutherford, "MRd")]
        [InlineData("en-US", RadioactivityUnit.Microbecquerel, "µBq")]
        [InlineData("en-US", RadioactivityUnit.Microcurie, "µCi")]
        [InlineData("en-US", RadioactivityUnit.Microrutherford, "µRd")]
        [InlineData("en-US", RadioactivityUnit.Millibecquerel, "mBq")]
        [InlineData("en-US", RadioactivityUnit.Millicurie, "mCi")]
        [InlineData("en-US", RadioactivityUnit.Millirutherford, "mRd")]
        [InlineData("en-US", RadioactivityUnit.Nanobecquerel, "nBq")]
        [InlineData("en-US", RadioactivityUnit.Nanocurie, "nCi")]
        [InlineData("en-US", RadioactivityUnit.Nanorutherford, "nRd")]
        [InlineData("en-US", RadioactivityUnit.Petabecquerel, "PBq")]
        [InlineData("en-US", RadioactivityUnit.Picobecquerel, "pBq")]
        [InlineData("en-US", RadioactivityUnit.Picocurie, "pCi")]
        [InlineData("en-US", RadioactivityUnit.Picorutherford, "pRd")]
        [InlineData("en-US", RadioactivityUnit.Rutherford, "Rd")]
        [InlineData("en-US", RadioactivityUnit.Terabecquerel, "TBq")]
        [InlineData("en-US", RadioactivityUnit.Teracurie, "TCi")]
        [InlineData("en-US", RadioactivityUnit.Terarutherford, "TRd")]
        [InlineData("ru-RU", RadioactivityUnit.Becquerel, "Бк")]
        [InlineData("ru-RU", RadioactivityUnit.Curie, "Ки")]
        [InlineData("ru-RU", RadioactivityUnit.Exabecquerel, "ЭБк")]
        [InlineData("ru-RU", RadioactivityUnit.Gigabecquerel, "ГБк")]
        [InlineData("ru-RU", RadioactivityUnit.Gigacurie, "ГКи")]
        [InlineData("ru-RU", RadioactivityUnit.Gigarutherford, "ГРд")]
        [InlineData("ru-RU", RadioactivityUnit.Kilobecquerel, "кБк")]
        [InlineData("ru-RU", RadioactivityUnit.Kilocurie, "кКи")]
        [InlineData("ru-RU", RadioactivityUnit.Kilorutherford, "кРд")]
        [InlineData("ru-RU", RadioactivityUnit.Megabecquerel, "МБк")]
        [InlineData("ru-RU", RadioactivityUnit.Megacurie, "МКи")]
        [InlineData("ru-RU", RadioactivityUnit.Megarutherford, "МРд")]
        [InlineData("ru-RU", RadioactivityUnit.Microbecquerel, "мкБк")]
        [InlineData("ru-RU", RadioactivityUnit.Microcurie, "мкКи")]
        [InlineData("ru-RU", RadioactivityUnit.Microrutherford, "мкРд")]
        [InlineData("ru-RU", RadioactivityUnit.Millibecquerel, "мБк")]
        [InlineData("ru-RU", RadioactivityUnit.Millicurie, "мКи")]
        [InlineData("ru-RU", RadioactivityUnit.Millirutherford, "мРд")]
        [InlineData("ru-RU", RadioactivityUnit.Nanobecquerel, "нБк")]
        [InlineData("ru-RU", RadioactivityUnit.Nanocurie, "нКи")]
        [InlineData("ru-RU", RadioactivityUnit.Nanorutherford, "нРд")]
        [InlineData("ru-RU", RadioactivityUnit.Petabecquerel, "ПБк")]
        [InlineData("ru-RU", RadioactivityUnit.Picobecquerel, "пБк")]
        [InlineData("ru-RU", RadioactivityUnit.Picocurie, "пКи")]
        [InlineData("ru-RU", RadioactivityUnit.Picorutherford, "пРд")]
        [InlineData("ru-RU", RadioactivityUnit.Rutherford, "Рд")]
        [InlineData("ru-RU", RadioactivityUnit.Terabecquerel, "ТБк")]
        [InlineData("ru-RU", RadioactivityUnit.Teracurie, "ТКи")]
        [InlineData("ru-RU", RadioactivityUnit.Terarutherford, "ТРд")]
        public void GetAbbreviationForCulture(string culture, RadioactivityUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Radioactivity.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Radioactivity.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Radioactivity.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(RadioactivityUnit unit)
        {
            var inBaseUnits = Radioactivity.From(1.0, Radioactivity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(RadioactivityUnit unit)
        {
            var quantity = Radioactivity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(RadioactivityUnit unit)
        {
            Assert.All(Radioactivity.Units.Where(u => u != Radioactivity.BaseUnit), fromUnit =>
            {
                var quantity = Radioactivity.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(RadioactivityUnit unit)
        {
            var quantity = default(Radioactivity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(RadioactivityUnit unit)
        {
            var quantity = Radioactivity.From(3, Radioactivity.BaseUnit);
            Radioactivity expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<RadioactivityUnit> quantityToConvert = quantity;
                IQuantity<RadioactivityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(3);
            Assert.Equal(3, Radioactivity.FromBecquerels(becquerel.Becquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromCuries(becquerel.Curies).Becquerels);
            Assert.Equal(3, Radioactivity.FromExabecquerels(becquerel.Exabecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromGigabecquerels(becquerel.Gigabecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromGigacuries(becquerel.Gigacuries).Becquerels);
            Assert.Equal(3, Radioactivity.FromGigarutherfords(becquerel.Gigarutherfords).Becquerels);
            Assert.Equal(3, Radioactivity.FromKilobecquerels(becquerel.Kilobecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromKilocuries(becquerel.Kilocuries).Becquerels);
            Assert.Equal(3, Radioactivity.FromKilorutherfords(becquerel.Kilorutherfords).Becquerels);
            Assert.Equal(3, Radioactivity.FromMegabecquerels(becquerel.Megabecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromMegacuries(becquerel.Megacuries).Becquerels);
            Assert.Equal(3, Radioactivity.FromMegarutherfords(becquerel.Megarutherfords).Becquerels);
            Assert.Equal(3, Radioactivity.FromMicrobecquerels(becquerel.Microbecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromMicrocuries(becquerel.Microcuries).Becquerels);
            Assert.Equal(3, Radioactivity.FromMicrorutherfords(becquerel.Microrutherfords).Becquerels);
            Assert.Equal(3, Radioactivity.FromMillibecquerels(becquerel.Millibecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromMillicuries(becquerel.Millicuries).Becquerels);
            Assert.Equal(3, Radioactivity.FromMillirutherfords(becquerel.Millirutherfords).Becquerels);
            Assert.Equal(3, Radioactivity.FromNanobecquerels(becquerel.Nanobecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromNanocuries(becquerel.Nanocuries).Becquerels);
            Assert.Equal(3, Radioactivity.FromNanorutherfords(becquerel.Nanorutherfords).Becquerels);
            Assert.Equal(3, Radioactivity.FromPetabecquerels(becquerel.Petabecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromPicobecquerels(becquerel.Picobecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromPicocuries(becquerel.Picocuries).Becquerels);
            Assert.Equal(3, Radioactivity.FromPicorutherfords(becquerel.Picorutherfords).Becquerels);
            Assert.Equal(3, Radioactivity.FromRutherfords(becquerel.Rutherfords).Becquerels);
            Assert.Equal(3, Radioactivity.FromTerabecquerels(becquerel.Terabecquerels).Becquerels);
            Assert.Equal(3, Radioactivity.FromTeracuries(becquerel.Teracuries).Becquerels);
            Assert.Equal(3, Radioactivity.FromTerarutherfords(becquerel.Terarutherfords).Becquerels);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Radioactivity v = Radioactivity.FromBecquerels(1);
            Assert.Equal(-1, -v.Becquerels);
            Assert.Equal(2, (Radioactivity.FromBecquerels(3) - v).Becquerels);
            Assert.Equal(2, (v + v).Becquerels);
            Assert.Equal(10, (v * 10).Becquerels);
            Assert.Equal(10, (10 * v).Becquerels);
            Assert.Equal(2, (Radioactivity.FromBecquerels(10) / 5).Becquerels);
            Assert.Equal(2, Radioactivity.FromBecquerels(10) / Radioactivity.FromBecquerels(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Radioactivity oneBecquerel = Radioactivity.FromBecquerels(1);
            Radioactivity twoBecquerels = Radioactivity.FromBecquerels(2);

            Assert.True(oneBecquerel < twoBecquerels);
            Assert.True(oneBecquerel <= twoBecquerels);
            Assert.True(twoBecquerels > oneBecquerel);
            Assert.True(twoBecquerels >= oneBecquerel);

            Assert.False(oneBecquerel > twoBecquerels);
            Assert.False(oneBecquerel >= twoBecquerels);
            Assert.False(twoBecquerels < oneBecquerel);
            Assert.False(twoBecquerels <= oneBecquerel);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.Equal(0, becquerel.CompareTo(becquerel));
            Assert.True(becquerel.CompareTo(Radioactivity.Zero) > 0);
            Assert.True(Radioactivity.Zero.CompareTo(becquerel) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.Throws<ArgumentException>(() => becquerel.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.Throws<ArgumentNullException>(() => becquerel.CompareTo(null));
        }

        [Theory]
        [InlineData(1, RadioactivityUnit.Becquerel, 1, RadioactivityUnit.Becquerel, true)]  // Same value and unit.
        [InlineData(1, RadioactivityUnit.Becquerel, 2, RadioactivityUnit.Becquerel, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, RadioactivityUnit unitA, double valueB, RadioactivityUnit unitB, bool expectEqual)
        {
            var a = new Radioactivity(valueA, unitA);
            var b = new Radioactivity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Radioactivity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.False(becquerel.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Radioactivity becquerel = Radioactivity.FromBecquerels(1);
            Assert.False(becquerel.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Radioactivity.FromBecquerels(firstValue);
            var otherQuantity = Radioactivity.FromBecquerels(secondValue);
            Radioactivity maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Radioactivity.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Radioactivity.FromBecquerels(1);
            var negativeTolerance = Radioactivity.FromBecquerels(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<RadioactivityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Radioactivity.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Radioactivity.Info.Units, Radioactivity.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Radioactivity.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 Bq", new Radioactivity(1, RadioactivityUnit.Becquerel).ToString());
            Assert.Equal("1 Ci", new Radioactivity(1, RadioactivityUnit.Curie).ToString());
            Assert.Equal("1 EBq", new Radioactivity(1, RadioactivityUnit.Exabecquerel).ToString());
            Assert.Equal("1 GBq", new Radioactivity(1, RadioactivityUnit.Gigabecquerel).ToString());
            Assert.Equal("1 GCi", new Radioactivity(1, RadioactivityUnit.Gigacurie).ToString());
            Assert.Equal("1 GRd", new Radioactivity(1, RadioactivityUnit.Gigarutherford).ToString());
            Assert.Equal("1 kBq", new Radioactivity(1, RadioactivityUnit.Kilobecquerel).ToString());
            Assert.Equal("1 kCi", new Radioactivity(1, RadioactivityUnit.Kilocurie).ToString());
            Assert.Equal("1 kRd", new Radioactivity(1, RadioactivityUnit.Kilorutherford).ToString());
            Assert.Equal("1 MBq", new Radioactivity(1, RadioactivityUnit.Megabecquerel).ToString());
            Assert.Equal("1 MCi", new Radioactivity(1, RadioactivityUnit.Megacurie).ToString());
            Assert.Equal("1 MRd", new Radioactivity(1, RadioactivityUnit.Megarutherford).ToString());
            Assert.Equal("1 µBq", new Radioactivity(1, RadioactivityUnit.Microbecquerel).ToString());
            Assert.Equal("1 µCi", new Radioactivity(1, RadioactivityUnit.Microcurie).ToString());
            Assert.Equal("1 µRd", new Radioactivity(1, RadioactivityUnit.Microrutherford).ToString());
            Assert.Equal("1 mBq", new Radioactivity(1, RadioactivityUnit.Millibecquerel).ToString());
            Assert.Equal("1 mCi", new Radioactivity(1, RadioactivityUnit.Millicurie).ToString());
            Assert.Equal("1 mRd", new Radioactivity(1, RadioactivityUnit.Millirutherford).ToString());
            Assert.Equal("1 nBq", new Radioactivity(1, RadioactivityUnit.Nanobecquerel).ToString());
            Assert.Equal("1 nCi", new Radioactivity(1, RadioactivityUnit.Nanocurie).ToString());
            Assert.Equal("1 nRd", new Radioactivity(1, RadioactivityUnit.Nanorutherford).ToString());
            Assert.Equal("1 PBq", new Radioactivity(1, RadioactivityUnit.Petabecquerel).ToString());
            Assert.Equal("1 pBq", new Radioactivity(1, RadioactivityUnit.Picobecquerel).ToString());
            Assert.Equal("1 pCi", new Radioactivity(1, RadioactivityUnit.Picocurie).ToString());
            Assert.Equal("1 pRd", new Radioactivity(1, RadioactivityUnit.Picorutherford).ToString());
            Assert.Equal("1 Rd", new Radioactivity(1, RadioactivityUnit.Rutherford).ToString());
            Assert.Equal("1 TBq", new Radioactivity(1, RadioactivityUnit.Terabecquerel).ToString());
            Assert.Equal("1 TCi", new Radioactivity(1, RadioactivityUnit.Teracurie).ToString());
            Assert.Equal("1 TRd", new Radioactivity(1, RadioactivityUnit.Terarutherford).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 Bq", new Radioactivity(1, RadioactivityUnit.Becquerel).ToString(swedishCulture));
            Assert.Equal("1 Ci", new Radioactivity(1, RadioactivityUnit.Curie).ToString(swedishCulture));
            Assert.Equal("1 EBq", new Radioactivity(1, RadioactivityUnit.Exabecquerel).ToString(swedishCulture));
            Assert.Equal("1 GBq", new Radioactivity(1, RadioactivityUnit.Gigabecquerel).ToString(swedishCulture));
            Assert.Equal("1 GCi", new Radioactivity(1, RadioactivityUnit.Gigacurie).ToString(swedishCulture));
            Assert.Equal("1 GRd", new Radioactivity(1, RadioactivityUnit.Gigarutherford).ToString(swedishCulture));
            Assert.Equal("1 kBq", new Radioactivity(1, RadioactivityUnit.Kilobecquerel).ToString(swedishCulture));
            Assert.Equal("1 kCi", new Radioactivity(1, RadioactivityUnit.Kilocurie).ToString(swedishCulture));
            Assert.Equal("1 kRd", new Radioactivity(1, RadioactivityUnit.Kilorutherford).ToString(swedishCulture));
            Assert.Equal("1 MBq", new Radioactivity(1, RadioactivityUnit.Megabecquerel).ToString(swedishCulture));
            Assert.Equal("1 MCi", new Radioactivity(1, RadioactivityUnit.Megacurie).ToString(swedishCulture));
            Assert.Equal("1 MRd", new Radioactivity(1, RadioactivityUnit.Megarutherford).ToString(swedishCulture));
            Assert.Equal("1 µBq", new Radioactivity(1, RadioactivityUnit.Microbecquerel).ToString(swedishCulture));
            Assert.Equal("1 µCi", new Radioactivity(1, RadioactivityUnit.Microcurie).ToString(swedishCulture));
            Assert.Equal("1 µRd", new Radioactivity(1, RadioactivityUnit.Microrutherford).ToString(swedishCulture));
            Assert.Equal("1 mBq", new Radioactivity(1, RadioactivityUnit.Millibecquerel).ToString(swedishCulture));
            Assert.Equal("1 mCi", new Radioactivity(1, RadioactivityUnit.Millicurie).ToString(swedishCulture));
            Assert.Equal("1 mRd", new Radioactivity(1, RadioactivityUnit.Millirutherford).ToString(swedishCulture));
            Assert.Equal("1 nBq", new Radioactivity(1, RadioactivityUnit.Nanobecquerel).ToString(swedishCulture));
            Assert.Equal("1 nCi", new Radioactivity(1, RadioactivityUnit.Nanocurie).ToString(swedishCulture));
            Assert.Equal("1 nRd", new Radioactivity(1, RadioactivityUnit.Nanorutherford).ToString(swedishCulture));
            Assert.Equal("1 PBq", new Radioactivity(1, RadioactivityUnit.Petabecquerel).ToString(swedishCulture));
            Assert.Equal("1 pBq", new Radioactivity(1, RadioactivityUnit.Picobecquerel).ToString(swedishCulture));
            Assert.Equal("1 pCi", new Radioactivity(1, RadioactivityUnit.Picocurie).ToString(swedishCulture));
            Assert.Equal("1 pRd", new Radioactivity(1, RadioactivityUnit.Picorutherford).ToString(swedishCulture));
            Assert.Equal("1 Rd", new Radioactivity(1, RadioactivityUnit.Rutherford).ToString(swedishCulture));
            Assert.Equal("1 TBq", new Radioactivity(1, RadioactivityUnit.Terabecquerel).ToString(swedishCulture));
            Assert.Equal("1 TCi", new Radioactivity(1, RadioactivityUnit.Teracurie).ToString(swedishCulture));
            Assert.Equal("1 TRd", new Radioactivity(1, RadioactivityUnit.Terarutherford).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s1"));
            Assert.Equal("0.12 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s2"));
            Assert.Equal("0.123 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s3"));
            Assert.Equal("0.1235 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s1", culture));
            Assert.Equal("0.12 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s2", culture));
            Assert.Equal("0.123 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s3", culture));
            Assert.Equal("0.1235 Bq", new Radioactivity(0.123456, RadioactivityUnit.Becquerel).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Radioactivity.FromBecquerels(1.0);
            var expected = Comparison.GetHashCode(typeof(Radioactivity), quantity.As(Radioactivity.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Radioactivity.FromBecquerels(value);
            Assert.Equal(Radioactivity.FromBecquerels(-value), -quantity);
        }
    }
}
