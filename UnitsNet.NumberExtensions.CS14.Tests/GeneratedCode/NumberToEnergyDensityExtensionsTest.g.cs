//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToEnergyDensity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToEnergyDensityExtensionsTests
    {
        [Fact]
        public void NumberToGigajoulesPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromGigajoulesPerCubicMeter(2), 2.GigajoulesPerCubicMeter);

        [Fact]
        public void NumberToGigawattHoursPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromGigawattHoursPerCubicMeter(2), 2.GigawattHoursPerCubicMeter);

        [Fact]
        public void NumberToJoulesPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromJoulesPerCubicMeter(2), 2.JoulesPerCubicMeter);

        [Fact]
        public void NumberToKilojoulesPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromKilojoulesPerCubicMeter(2), 2.KilojoulesPerCubicMeter);

        [Fact]
        public void NumberToKilowattHoursPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromKilowattHoursPerCubicMeter(2), 2.KilowattHoursPerCubicMeter);

        [Fact]
        public void NumberToMegajoulesPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromMegajoulesPerCubicMeter(2), 2.MegajoulesPerCubicMeter);

        [Fact]
        public void NumberToMegawattHoursPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromMegawattHoursPerCubicMeter(2), 2.MegawattHoursPerCubicMeter);

        [Fact]
        public void NumberToPetajoulesPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromPetajoulesPerCubicMeter(2), 2.PetajoulesPerCubicMeter);

        [Fact]
        public void NumberToPetawattHoursPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromPetawattHoursPerCubicMeter(2), 2.PetawattHoursPerCubicMeter);

        [Fact]
        public void NumberToTerajoulesPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromTerajoulesPerCubicMeter(2), 2.TerajoulesPerCubicMeter);

        [Fact]
        public void NumberToTerawattHoursPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromTerawattHoursPerCubicMeter(2), 2.TerawattHoursPerCubicMeter);

        [Fact]
        public void NumberToWattHoursPerCubicMeterTest() =>
            Assert.Equal(EnergyDensity.FromWattHoursPerCubicMeter(2), 2.WattHoursPerCubicMeter);

    }
}
