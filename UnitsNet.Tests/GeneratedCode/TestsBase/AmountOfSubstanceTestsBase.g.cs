//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of AmountOfSubstance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class AmountOfSubstanceTestsBase : QuantityTestsBase
    {
        protected abstract double CentimolesInOneMole { get; }
        protected abstract double CentipoundMolesInOneMole { get; }
        protected abstract double DecimolesInOneMole { get; }
        protected abstract double DecipoundMolesInOneMole { get; }
        protected abstract double FemtomolesInOneMole { get; }
        protected abstract double KilomolesInOneMole { get; }
        protected abstract double KilopoundMolesInOneMole { get; }
        protected abstract double MegamolesInOneMole { get; }
        protected abstract double MicromolesInOneMole { get; }
        protected abstract double MicropoundMolesInOneMole { get; }
        protected abstract double MillimolesInOneMole { get; }
        protected abstract double MillipoundMolesInOneMole { get; }
        protected abstract double MolesInOneMole { get; }
        protected abstract double NanomolesInOneMole { get; }
        protected abstract double NanopoundMolesInOneMole { get; }
        protected abstract double PicomolesInOneMole { get; }
        protected abstract double PoundMolesInOneMole { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimolesTolerance { get { return 1e-5; } }
        protected virtual double CentipoundMolesTolerance { get { return 1e-5; } }
        protected virtual double DecimolesTolerance { get { return 1e-5; } }
        protected virtual double DecipoundMolesTolerance { get { return 1e-5; } }
        protected virtual double FemtomolesTolerance { get { return 1e-5; } }
        protected virtual double KilomolesTolerance { get { return 1e-5; } }
        protected virtual double KilopoundMolesTolerance { get { return 1e-5; } }
        protected virtual double MegamolesTolerance { get { return 1e-5; } }
        protected virtual double MicromolesTolerance { get { return 1e-5; } }
        protected virtual double MicropoundMolesTolerance { get { return 1e-5; } }
        protected virtual double MillimolesTolerance { get { return 1e-5; } }
        protected virtual double MillipoundMolesTolerance { get { return 1e-5; } }
        protected virtual double MolesTolerance { get { return 1e-5; } }
        protected virtual double NanomolesTolerance { get { return 1e-5; } }
        protected virtual double NanopoundMolesTolerance { get { return 1e-5; } }
        protected virtual double PicomolesTolerance { get { return 1e-5; } }
        protected virtual double PoundMolesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(AmountOfSubstanceUnit unit)
        {
            return unit switch
            {
                AmountOfSubstanceUnit.Centimole => (CentimolesInOneMole, CentimolesTolerance),
                AmountOfSubstanceUnit.CentipoundMole => (CentipoundMolesInOneMole, CentipoundMolesTolerance),
                AmountOfSubstanceUnit.Decimole => (DecimolesInOneMole, DecimolesTolerance),
                AmountOfSubstanceUnit.DecipoundMole => (DecipoundMolesInOneMole, DecipoundMolesTolerance),
                AmountOfSubstanceUnit.Femtomole => (FemtomolesInOneMole, FemtomolesTolerance),
                AmountOfSubstanceUnit.Kilomole => (KilomolesInOneMole, KilomolesTolerance),
                AmountOfSubstanceUnit.KilopoundMole => (KilopoundMolesInOneMole, KilopoundMolesTolerance),
                AmountOfSubstanceUnit.Megamole => (MegamolesInOneMole, MegamolesTolerance),
                AmountOfSubstanceUnit.Micromole => (MicromolesInOneMole, MicromolesTolerance),
                AmountOfSubstanceUnit.MicropoundMole => (MicropoundMolesInOneMole, MicropoundMolesTolerance),
                AmountOfSubstanceUnit.Millimole => (MillimolesInOneMole, MillimolesTolerance),
                AmountOfSubstanceUnit.MillipoundMole => (MillipoundMolesInOneMole, MillipoundMolesTolerance),
                AmountOfSubstanceUnit.Mole => (MolesInOneMole, MolesTolerance),
                AmountOfSubstanceUnit.Nanomole => (NanomolesInOneMole, NanomolesTolerance),
                AmountOfSubstanceUnit.NanopoundMole => (NanopoundMolesInOneMole, NanopoundMolesTolerance),
                AmountOfSubstanceUnit.Picomole => (PicomolesInOneMole, PicomolesTolerance),
                AmountOfSubstanceUnit.PoundMole => (PoundMolesInOneMole, PoundMolesTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { AmountOfSubstanceUnit.Centimole },
            new object[] { AmountOfSubstanceUnit.CentipoundMole },
            new object[] { AmountOfSubstanceUnit.Decimole },
            new object[] { AmountOfSubstanceUnit.DecipoundMole },
            new object[] { AmountOfSubstanceUnit.Femtomole },
            new object[] { AmountOfSubstanceUnit.Kilomole },
            new object[] { AmountOfSubstanceUnit.KilopoundMole },
            new object[] { AmountOfSubstanceUnit.Megamole },
            new object[] { AmountOfSubstanceUnit.Micromole },
            new object[] { AmountOfSubstanceUnit.MicropoundMole },
            new object[] { AmountOfSubstanceUnit.Millimole },
            new object[] { AmountOfSubstanceUnit.MillipoundMole },
            new object[] { AmountOfSubstanceUnit.Mole },
            new object[] { AmountOfSubstanceUnit.Nanomole },
            new object[] { AmountOfSubstanceUnit.NanopoundMole },
            new object[] { AmountOfSubstanceUnit.Picomole },
            new object[] { AmountOfSubstanceUnit.PoundMole },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new AmountOfSubstance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(AmountOfSubstanceUnit.Mole, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new AmountOfSubstance(double.PositiveInfinity, AmountOfSubstanceUnit.Mole));
            var exception2 = Record.Exception(() => new AmountOfSubstance(double.NegativeInfinity, AmountOfSubstanceUnit.Mole));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new AmountOfSubstance(double.NaN, AmountOfSubstanceUnit.Mole));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new AmountOfSubstance(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new AmountOfSubstance(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new AmountOfSubstance(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void AmountOfSubstance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            AmountOfSubstanceUnit[] unitsOrderedByName = EnumHelper.GetValues<AmountOfSubstanceUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new AmountOfSubstance(1, AmountOfSubstanceUnit.Mole);

            QuantityInfo<AmountOfSubstance, AmountOfSubstanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("AmountOfSubstance", quantityInfo.Name);
            Assert.Equal(AmountOfSubstance.Zero, quantityInfo.Zero);
            Assert.Equal(AmountOfSubstance.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(AmountOfSubstance.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<AmountOfSubstanceUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void AmountOfSubstanceInfo_CreateWithCustomUnitInfos()
        {
            AmountOfSubstanceUnit[] expectedUnits = [AmountOfSubstanceUnit.Mole];

            AmountOfSubstance.AmountOfSubstanceInfo quantityInfo = AmountOfSubstance.AmountOfSubstanceInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("AmountOfSubstance", quantityInfo.Name);
            Assert.Equal(AmountOfSubstance.Zero, quantityInfo.Zero);
            Assert.Equal(AmountOfSubstance.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void MoleToAmountOfSubstanceUnits()
        {
            AmountOfSubstance mole = AmountOfSubstance.FromMoles(1);
            AssertEx.EqualTolerance(CentimolesInOneMole, mole.Centimoles, CentimolesTolerance);
            AssertEx.EqualTolerance(CentipoundMolesInOneMole, mole.CentipoundMoles, CentipoundMolesTolerance);
            AssertEx.EqualTolerance(DecimolesInOneMole, mole.Decimoles, DecimolesTolerance);
            AssertEx.EqualTolerance(DecipoundMolesInOneMole, mole.DecipoundMoles, DecipoundMolesTolerance);
            AssertEx.EqualTolerance(FemtomolesInOneMole, mole.Femtomoles, FemtomolesTolerance);
            AssertEx.EqualTolerance(KilomolesInOneMole, mole.Kilomoles, KilomolesTolerance);
            AssertEx.EqualTolerance(KilopoundMolesInOneMole, mole.KilopoundMoles, KilopoundMolesTolerance);
            AssertEx.EqualTolerance(MegamolesInOneMole, mole.Megamoles, MegamolesTolerance);
            AssertEx.EqualTolerance(MicromolesInOneMole, mole.Micromoles, MicromolesTolerance);
            AssertEx.EqualTolerance(MicropoundMolesInOneMole, mole.MicropoundMoles, MicropoundMolesTolerance);
            AssertEx.EqualTolerance(MillimolesInOneMole, mole.Millimoles, MillimolesTolerance);
            AssertEx.EqualTolerance(MillipoundMolesInOneMole, mole.MillipoundMoles, MillipoundMolesTolerance);
            AssertEx.EqualTolerance(MolesInOneMole, mole.Moles, MolesTolerance);
            AssertEx.EqualTolerance(NanomolesInOneMole, mole.Nanomoles, NanomolesTolerance);
            AssertEx.EqualTolerance(NanopoundMolesInOneMole, mole.NanopoundMoles, NanopoundMolesTolerance);
            AssertEx.EqualTolerance(PicomolesInOneMole, mole.Picomoles, PicomolesTolerance);
            AssertEx.EqualTolerance(PoundMolesInOneMole, mole.PoundMoles, PoundMolesTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<AmountOfSubstanceUnit>(), unit =>
            {
                var quantity = AmountOfSubstance.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromMoles_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => AmountOfSubstance.FromMoles(double.PositiveInfinity));
            var exception2 = Record.Exception(() => AmountOfSubstance.FromMoles(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromMoles_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => AmountOfSubstance.FromMoles(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var mole = AmountOfSubstance.FromMoles(1);
            AssertEx.EqualTolerance(CentimolesInOneMole, mole.As(AmountOfSubstanceUnit.Centimole), CentimolesTolerance);
            AssertEx.EqualTolerance(CentipoundMolesInOneMole, mole.As(AmountOfSubstanceUnit.CentipoundMole), CentipoundMolesTolerance);
            AssertEx.EqualTolerance(DecimolesInOneMole, mole.As(AmountOfSubstanceUnit.Decimole), DecimolesTolerance);
            AssertEx.EqualTolerance(DecipoundMolesInOneMole, mole.As(AmountOfSubstanceUnit.DecipoundMole), DecipoundMolesTolerance);
            AssertEx.EqualTolerance(FemtomolesInOneMole, mole.As(AmountOfSubstanceUnit.Femtomole), FemtomolesTolerance);
            AssertEx.EqualTolerance(KilomolesInOneMole, mole.As(AmountOfSubstanceUnit.Kilomole), KilomolesTolerance);
            AssertEx.EqualTolerance(KilopoundMolesInOneMole, mole.As(AmountOfSubstanceUnit.KilopoundMole), KilopoundMolesTolerance);
            AssertEx.EqualTolerance(MegamolesInOneMole, mole.As(AmountOfSubstanceUnit.Megamole), MegamolesTolerance);
            AssertEx.EqualTolerance(MicromolesInOneMole, mole.As(AmountOfSubstanceUnit.Micromole), MicromolesTolerance);
            AssertEx.EqualTolerance(MicropoundMolesInOneMole, mole.As(AmountOfSubstanceUnit.MicropoundMole), MicropoundMolesTolerance);
            AssertEx.EqualTolerance(MillimolesInOneMole, mole.As(AmountOfSubstanceUnit.Millimole), MillimolesTolerance);
            AssertEx.EqualTolerance(MillipoundMolesInOneMole, mole.As(AmountOfSubstanceUnit.MillipoundMole), MillipoundMolesTolerance);
            AssertEx.EqualTolerance(MolesInOneMole, mole.As(AmountOfSubstanceUnit.Mole), MolesTolerance);
            AssertEx.EqualTolerance(NanomolesInOneMole, mole.As(AmountOfSubstanceUnit.Nanomole), NanomolesTolerance);
            AssertEx.EqualTolerance(NanopoundMolesInOneMole, mole.As(AmountOfSubstanceUnit.NanopoundMole), NanopoundMolesTolerance);
            AssertEx.EqualTolerance(PicomolesInOneMole, mole.As(AmountOfSubstanceUnit.Picomole), PicomolesTolerance);
            AssertEx.EqualTolerance(PoundMolesInOneMole, mole.As(AmountOfSubstanceUnit.PoundMole), PoundMolesTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = AmountOfSubstance.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
            var expectedValue = quantity.As(AmountOfSubstance.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
            var expectedUnit = AmountOfSubstance.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                AmountOfSubstance quantityToConvert = quantity;

                AmountOfSubstance convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<AmountOfSubstanceUnit> quantityToConvert = quantity;

                IQuantity<AmountOfSubstanceUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<AmountOfSubstanceUnit> quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<AmountOfSubstanceUnit> quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new AmountOfSubstance(value: 1, unit: AmountOfSubstance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cmol", AmountOfSubstanceUnit.Centimole, 4.2)]
        [InlineData("en-US", "4.2 clbmol", AmountOfSubstanceUnit.CentipoundMole, 4.2)]
        [InlineData("en-US", "4.2 dmol", AmountOfSubstanceUnit.Decimole, 4.2)]
        [InlineData("en-US", "4.2 dlbmol", AmountOfSubstanceUnit.DecipoundMole, 4.2)]
        [InlineData("en-US", "4.2 fmol", AmountOfSubstanceUnit.Femtomole, 4.2)]
        [InlineData("en-US", "4.2 kmol", AmountOfSubstanceUnit.Kilomole, 4.2)]
        [InlineData("en-US", "4.2 klbmol", AmountOfSubstanceUnit.KilopoundMole, 4.2)]
        [InlineData("en-US", "4.2 Mmol", AmountOfSubstanceUnit.Megamole, 4.2)]
        [InlineData("en-US", "4.2 µmol", AmountOfSubstanceUnit.Micromole, 4.2)]
        [InlineData("en-US", "4.2 µlbmol", AmountOfSubstanceUnit.MicropoundMole, 4.2)]
        [InlineData("en-US", "4.2 mmol", AmountOfSubstanceUnit.Millimole, 4.2)]
        [InlineData("en-US", "4.2 mlbmol", AmountOfSubstanceUnit.MillipoundMole, 4.2)]
        [InlineData("en-US", "4.2 mol", AmountOfSubstanceUnit.Mole, 4.2)]
        [InlineData("en-US", "4.2 nmol", AmountOfSubstanceUnit.Nanomole, 4.2)]
        [InlineData("en-US", "4.2 nlbmol", AmountOfSubstanceUnit.NanopoundMole, 4.2)]
        [InlineData("en-US", "4.2 pmol", AmountOfSubstanceUnit.Picomole, 4.2)]
        [InlineData("en-US", "4.2 lbmol", AmountOfSubstanceUnit.PoundMole, 4.2)]
        public void Parse(string culture, string quantityString, AmountOfSubstanceUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = AmountOfSubstance.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 cmol", AmountOfSubstanceUnit.Centimole, 4.2)]
        [InlineData("en-US", "4.2 clbmol", AmountOfSubstanceUnit.CentipoundMole, 4.2)]
        [InlineData("en-US", "4.2 dmol", AmountOfSubstanceUnit.Decimole, 4.2)]
        [InlineData("en-US", "4.2 dlbmol", AmountOfSubstanceUnit.DecipoundMole, 4.2)]
        [InlineData("en-US", "4.2 fmol", AmountOfSubstanceUnit.Femtomole, 4.2)]
        [InlineData("en-US", "4.2 kmol", AmountOfSubstanceUnit.Kilomole, 4.2)]
        [InlineData("en-US", "4.2 klbmol", AmountOfSubstanceUnit.KilopoundMole, 4.2)]
        [InlineData("en-US", "4.2 Mmol", AmountOfSubstanceUnit.Megamole, 4.2)]
        [InlineData("en-US", "4.2 µmol", AmountOfSubstanceUnit.Micromole, 4.2)]
        [InlineData("en-US", "4.2 µlbmol", AmountOfSubstanceUnit.MicropoundMole, 4.2)]
        [InlineData("en-US", "4.2 mmol", AmountOfSubstanceUnit.Millimole, 4.2)]
        [InlineData("en-US", "4.2 mlbmol", AmountOfSubstanceUnit.MillipoundMole, 4.2)]
        [InlineData("en-US", "4.2 mol", AmountOfSubstanceUnit.Mole, 4.2)]
        [InlineData("en-US", "4.2 nmol", AmountOfSubstanceUnit.Nanomole, 4.2)]
        [InlineData("en-US", "4.2 nlbmol", AmountOfSubstanceUnit.NanopoundMole, 4.2)]
        [InlineData("en-US", "4.2 pmol", AmountOfSubstanceUnit.Picomole, 4.2)]
        [InlineData("en-US", "4.2 lbmol", AmountOfSubstanceUnit.PoundMole, 4.2)]
        public void TryParse(string culture, string quantityString, AmountOfSubstanceUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(AmountOfSubstance.TryParse(quantityString, out AmountOfSubstance parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("cmol", AmountOfSubstanceUnit.Centimole)]
        [InlineData("clbmol", AmountOfSubstanceUnit.CentipoundMole)]
        [InlineData("dmol", AmountOfSubstanceUnit.Decimole)]
        [InlineData("dlbmol", AmountOfSubstanceUnit.DecipoundMole)]
        [InlineData("fmol", AmountOfSubstanceUnit.Femtomole)]
        [InlineData("kmol", AmountOfSubstanceUnit.Kilomole)]
        [InlineData("klbmol", AmountOfSubstanceUnit.KilopoundMole)]
        [InlineData("Mmol", AmountOfSubstanceUnit.Megamole)]
        [InlineData("µmol", AmountOfSubstanceUnit.Micromole)]
        [InlineData("µlbmol", AmountOfSubstanceUnit.MicropoundMole)]
        [InlineData("mmol", AmountOfSubstanceUnit.Millimole)]
        [InlineData("mlbmol", AmountOfSubstanceUnit.MillipoundMole)]
        [InlineData("mol", AmountOfSubstanceUnit.Mole)]
        [InlineData("nmol", AmountOfSubstanceUnit.Nanomole)]
        [InlineData("nlbmol", AmountOfSubstanceUnit.NanopoundMole)]
        [InlineData("pmol", AmountOfSubstanceUnit.Picomole)]
        [InlineData("lbmol", AmountOfSubstanceUnit.PoundMole)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AmountOfSubstanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            AmountOfSubstanceUnit parsedUnit = AmountOfSubstance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cmol", AmountOfSubstanceUnit.Centimole)]
        [InlineData("clbmol", AmountOfSubstanceUnit.CentipoundMole)]
        [InlineData("dmol", AmountOfSubstanceUnit.Decimole)]
        [InlineData("dlbmol", AmountOfSubstanceUnit.DecipoundMole)]
        [InlineData("fmol", AmountOfSubstanceUnit.Femtomole)]
        [InlineData("kmol", AmountOfSubstanceUnit.Kilomole)]
        [InlineData("klbmol", AmountOfSubstanceUnit.KilopoundMole)]
        [InlineData("Mmol", AmountOfSubstanceUnit.Megamole)]
        [InlineData("µmol", AmountOfSubstanceUnit.Micromole)]
        [InlineData("µlbmol", AmountOfSubstanceUnit.MicropoundMole)]
        [InlineData("mmol", AmountOfSubstanceUnit.Millimole)]
        [InlineData("mlbmol", AmountOfSubstanceUnit.MillipoundMole)]
        [InlineData("mol", AmountOfSubstanceUnit.Mole)]
        [InlineData("nmol", AmountOfSubstanceUnit.Nanomole)]
        [InlineData("nlbmol", AmountOfSubstanceUnit.NanopoundMole)]
        [InlineData("pmol", AmountOfSubstanceUnit.Picomole)]
        [InlineData("lbmol", AmountOfSubstanceUnit.PoundMole)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AmountOfSubstanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            AmountOfSubstanceUnit parsedUnit = AmountOfSubstance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cmol", AmountOfSubstanceUnit.Centimole)]
        [InlineData("en-US", "clbmol", AmountOfSubstanceUnit.CentipoundMole)]
        [InlineData("en-US", "dmol", AmountOfSubstanceUnit.Decimole)]
        [InlineData("en-US", "dlbmol", AmountOfSubstanceUnit.DecipoundMole)]
        [InlineData("en-US", "fmol", AmountOfSubstanceUnit.Femtomole)]
        [InlineData("en-US", "kmol", AmountOfSubstanceUnit.Kilomole)]
        [InlineData("en-US", "klbmol", AmountOfSubstanceUnit.KilopoundMole)]
        [InlineData("en-US", "Mmol", AmountOfSubstanceUnit.Megamole)]
        [InlineData("en-US", "µmol", AmountOfSubstanceUnit.Micromole)]
        [InlineData("en-US", "µlbmol", AmountOfSubstanceUnit.MicropoundMole)]
        [InlineData("en-US", "mmol", AmountOfSubstanceUnit.Millimole)]
        [InlineData("en-US", "mlbmol", AmountOfSubstanceUnit.MillipoundMole)]
        [InlineData("en-US", "mol", AmountOfSubstanceUnit.Mole)]
        [InlineData("en-US", "nmol", AmountOfSubstanceUnit.Nanomole)]
        [InlineData("en-US", "nlbmol", AmountOfSubstanceUnit.NanopoundMole)]
        [InlineData("en-US", "pmol", AmountOfSubstanceUnit.Picomole)]
        [InlineData("en-US", "lbmol", AmountOfSubstanceUnit.PoundMole)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, AmountOfSubstanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            AmountOfSubstanceUnit parsedUnit = AmountOfSubstance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cmol", AmountOfSubstanceUnit.Centimole)]
        [InlineData("en-US", "clbmol", AmountOfSubstanceUnit.CentipoundMole)]
        [InlineData("en-US", "dmol", AmountOfSubstanceUnit.Decimole)]
        [InlineData("en-US", "dlbmol", AmountOfSubstanceUnit.DecipoundMole)]
        [InlineData("en-US", "fmol", AmountOfSubstanceUnit.Femtomole)]
        [InlineData("en-US", "kmol", AmountOfSubstanceUnit.Kilomole)]
        [InlineData("en-US", "klbmol", AmountOfSubstanceUnit.KilopoundMole)]
        [InlineData("en-US", "Mmol", AmountOfSubstanceUnit.Megamole)]
        [InlineData("en-US", "µmol", AmountOfSubstanceUnit.Micromole)]
        [InlineData("en-US", "µlbmol", AmountOfSubstanceUnit.MicropoundMole)]
        [InlineData("en-US", "mmol", AmountOfSubstanceUnit.Millimole)]
        [InlineData("en-US", "mlbmol", AmountOfSubstanceUnit.MillipoundMole)]
        [InlineData("en-US", "mol", AmountOfSubstanceUnit.Mole)]
        [InlineData("en-US", "nmol", AmountOfSubstanceUnit.Nanomole)]
        [InlineData("en-US", "nlbmol", AmountOfSubstanceUnit.NanopoundMole)]
        [InlineData("en-US", "pmol", AmountOfSubstanceUnit.Picomole)]
        [InlineData("en-US", "lbmol", AmountOfSubstanceUnit.PoundMole)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, AmountOfSubstanceUnit expectedUnit)
        {
            AmountOfSubstanceUnit parsedUnit = AmountOfSubstance.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cmol", AmountOfSubstanceUnit.Centimole)]
        [InlineData("clbmol", AmountOfSubstanceUnit.CentipoundMole)]
        [InlineData("dmol", AmountOfSubstanceUnit.Decimole)]
        [InlineData("dlbmol", AmountOfSubstanceUnit.DecipoundMole)]
        [InlineData("fmol", AmountOfSubstanceUnit.Femtomole)]
        [InlineData("kmol", AmountOfSubstanceUnit.Kilomole)]
        [InlineData("klbmol", AmountOfSubstanceUnit.KilopoundMole)]
        [InlineData("Mmol", AmountOfSubstanceUnit.Megamole)]
        [InlineData("µmol", AmountOfSubstanceUnit.Micromole)]
        [InlineData("µlbmol", AmountOfSubstanceUnit.MicropoundMole)]
        [InlineData("mmol", AmountOfSubstanceUnit.Millimole)]
        [InlineData("mlbmol", AmountOfSubstanceUnit.MillipoundMole)]
        [InlineData("mol", AmountOfSubstanceUnit.Mole)]
        [InlineData("nmol", AmountOfSubstanceUnit.Nanomole)]
        [InlineData("nlbmol", AmountOfSubstanceUnit.NanopoundMole)]
        [InlineData("pmol", AmountOfSubstanceUnit.Picomole)]
        [InlineData("lbmol", AmountOfSubstanceUnit.PoundMole)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AmountOfSubstanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(AmountOfSubstance.TryParseUnit(abbreviation, out AmountOfSubstanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cmol", AmountOfSubstanceUnit.Centimole)]
        [InlineData("clbmol", AmountOfSubstanceUnit.CentipoundMole)]
        [InlineData("dmol", AmountOfSubstanceUnit.Decimole)]
        [InlineData("dlbmol", AmountOfSubstanceUnit.DecipoundMole)]
        [InlineData("fmol", AmountOfSubstanceUnit.Femtomole)]
        [InlineData("kmol", AmountOfSubstanceUnit.Kilomole)]
        [InlineData("klbmol", AmountOfSubstanceUnit.KilopoundMole)]
        [InlineData("Mmol", AmountOfSubstanceUnit.Megamole)]
        [InlineData("µmol", AmountOfSubstanceUnit.Micromole)]
        [InlineData("µlbmol", AmountOfSubstanceUnit.MicropoundMole)]
        [InlineData("mmol", AmountOfSubstanceUnit.Millimole)]
        [InlineData("mlbmol", AmountOfSubstanceUnit.MillipoundMole)]
        [InlineData("mol", AmountOfSubstanceUnit.Mole)]
        [InlineData("nmol", AmountOfSubstanceUnit.Nanomole)]
        [InlineData("nlbmol", AmountOfSubstanceUnit.NanopoundMole)]
        [InlineData("pmol", AmountOfSubstanceUnit.Picomole)]
        [InlineData("lbmol", AmountOfSubstanceUnit.PoundMole)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AmountOfSubstanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(AmountOfSubstance.TryParseUnit(abbreviation, out AmountOfSubstanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cmol", AmountOfSubstanceUnit.Centimole)]
        [InlineData("en-US", "clbmol", AmountOfSubstanceUnit.CentipoundMole)]
        [InlineData("en-US", "dmol", AmountOfSubstanceUnit.Decimole)]
        [InlineData("en-US", "dlbmol", AmountOfSubstanceUnit.DecipoundMole)]
        [InlineData("en-US", "fmol", AmountOfSubstanceUnit.Femtomole)]
        [InlineData("en-US", "kmol", AmountOfSubstanceUnit.Kilomole)]
        [InlineData("en-US", "klbmol", AmountOfSubstanceUnit.KilopoundMole)]
        [InlineData("en-US", "Mmol", AmountOfSubstanceUnit.Megamole)]
        [InlineData("en-US", "µmol", AmountOfSubstanceUnit.Micromole)]
        [InlineData("en-US", "µlbmol", AmountOfSubstanceUnit.MicropoundMole)]
        [InlineData("en-US", "mmol", AmountOfSubstanceUnit.Millimole)]
        [InlineData("en-US", "mlbmol", AmountOfSubstanceUnit.MillipoundMole)]
        [InlineData("en-US", "mol", AmountOfSubstanceUnit.Mole)]
        [InlineData("en-US", "nmol", AmountOfSubstanceUnit.Nanomole)]
        [InlineData("en-US", "nlbmol", AmountOfSubstanceUnit.NanopoundMole)]
        [InlineData("en-US", "pmol", AmountOfSubstanceUnit.Picomole)]
        [InlineData("en-US", "lbmol", AmountOfSubstanceUnit.PoundMole)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, AmountOfSubstanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(AmountOfSubstance.TryParseUnit(abbreviation, out AmountOfSubstanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cmol", AmountOfSubstanceUnit.Centimole)]
        [InlineData("en-US", "clbmol", AmountOfSubstanceUnit.CentipoundMole)]
        [InlineData("en-US", "dmol", AmountOfSubstanceUnit.Decimole)]
        [InlineData("en-US", "dlbmol", AmountOfSubstanceUnit.DecipoundMole)]
        [InlineData("en-US", "fmol", AmountOfSubstanceUnit.Femtomole)]
        [InlineData("en-US", "kmol", AmountOfSubstanceUnit.Kilomole)]
        [InlineData("en-US", "klbmol", AmountOfSubstanceUnit.KilopoundMole)]
        [InlineData("en-US", "Mmol", AmountOfSubstanceUnit.Megamole)]
        [InlineData("en-US", "µmol", AmountOfSubstanceUnit.Micromole)]
        [InlineData("en-US", "µlbmol", AmountOfSubstanceUnit.MicropoundMole)]
        [InlineData("en-US", "mmol", AmountOfSubstanceUnit.Millimole)]
        [InlineData("en-US", "mlbmol", AmountOfSubstanceUnit.MillipoundMole)]
        [InlineData("en-US", "mol", AmountOfSubstanceUnit.Mole)]
        [InlineData("en-US", "nmol", AmountOfSubstanceUnit.Nanomole)]
        [InlineData("en-US", "nlbmol", AmountOfSubstanceUnit.NanopoundMole)]
        [InlineData("en-US", "pmol", AmountOfSubstanceUnit.Picomole)]
        [InlineData("en-US", "lbmol", AmountOfSubstanceUnit.PoundMole)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, AmountOfSubstanceUnit expectedUnit)
        {
            Assert.True(AmountOfSubstance.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out AmountOfSubstanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", AmountOfSubstanceUnit.Centimole, "cmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.CentipoundMole, "clbmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.Decimole, "dmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.DecipoundMole, "dlbmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.Femtomole, "fmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.Kilomole, "kmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.KilopoundMole, "klbmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.Megamole, "Mmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.Micromole, "µmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.MicropoundMole, "µlbmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.Millimole, "mmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.MillipoundMole, "mlbmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.Mole, "mol")]
        [InlineData("en-US", AmountOfSubstanceUnit.Nanomole, "nmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.NanopoundMole, "nlbmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.Picomole, "pmol")]
        [InlineData("en-US", AmountOfSubstanceUnit.PoundMole, "lbmol")]
        public void GetAbbreviationForCulture(string culture, AmountOfSubstanceUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = AmountOfSubstance.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(AmountOfSubstance.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = AmountOfSubstance.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(AmountOfSubstanceUnit unit)
        {
            var inBaseUnits = AmountOfSubstance.From(1.0, AmountOfSubstance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(AmountOfSubstanceUnit unit)
        {
            var quantity = AmountOfSubstance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(AmountOfSubstanceUnit unit)
        {
            Assert.All(AmountOfSubstance.Units.Where(u => u != AmountOfSubstance.BaseUnit), fromUnit =>
            {
                var quantity = AmountOfSubstance.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(AmountOfSubstanceUnit unit)
        {
            var quantity = default(AmountOfSubstance);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(AmountOfSubstanceUnit unit)
        {
            var quantity = AmountOfSubstance.From(3, AmountOfSubstance.BaseUnit);
            AmountOfSubstance expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<AmountOfSubstanceUnit> quantityToConvert = quantity;
                IQuantity<AmountOfSubstanceUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            AmountOfSubstance mole = AmountOfSubstance.FromMoles(3);
            Assert.Equal(3, AmountOfSubstance.FromCentimoles(mole.Centimoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromCentipoundMoles(mole.CentipoundMoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromDecimoles(mole.Decimoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromDecipoundMoles(mole.DecipoundMoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromFemtomoles(mole.Femtomoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromKilomoles(mole.Kilomoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromKilopoundMoles(mole.KilopoundMoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromMegamoles(mole.Megamoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromMicromoles(mole.Micromoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromMicropoundMoles(mole.MicropoundMoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromMillimoles(mole.Millimoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromMillipoundMoles(mole.MillipoundMoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromMoles(mole.Moles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromNanomoles(mole.Nanomoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromNanopoundMoles(mole.NanopoundMoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromPicomoles(mole.Picomoles).Moles);
            Assert.Equal(3, AmountOfSubstance.FromPoundMoles(mole.PoundMoles).Moles);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            AmountOfSubstance v = AmountOfSubstance.FromMoles(1);
            Assert.Equal(-1, -v.Moles);
            Assert.Equal(2, (AmountOfSubstance.FromMoles(3) - v).Moles);
            Assert.Equal(2, (v + v).Moles);
            Assert.Equal(10, (v * 10).Moles);
            Assert.Equal(10, (10 * v).Moles);
            Assert.Equal(2, (AmountOfSubstance.FromMoles(10) / 5).Moles);
            Assert.Equal(2, AmountOfSubstance.FromMoles(10) / AmountOfSubstance.FromMoles(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            AmountOfSubstance oneMole = AmountOfSubstance.FromMoles(1);
            AmountOfSubstance twoMoles = AmountOfSubstance.FromMoles(2);

            Assert.True(oneMole < twoMoles);
            Assert.True(oneMole <= twoMoles);
            Assert.True(twoMoles > oneMole);
            Assert.True(twoMoles >= oneMole);

            Assert.False(oneMole > twoMoles);
            Assert.False(oneMole >= twoMoles);
            Assert.False(twoMoles < oneMole);
            Assert.False(twoMoles <= oneMole);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            AmountOfSubstance mole = AmountOfSubstance.FromMoles(1);
            Assert.Equal(0, mole.CompareTo(mole));
            Assert.True(mole.CompareTo(AmountOfSubstance.Zero) > 0);
            Assert.True(AmountOfSubstance.Zero.CompareTo(mole) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            AmountOfSubstance mole = AmountOfSubstance.FromMoles(1);
            Assert.Throws<ArgumentException>(() => mole.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            AmountOfSubstance mole = AmountOfSubstance.FromMoles(1);
            Assert.Throws<ArgumentNullException>(() => mole.CompareTo(null));
        }

        [Theory]
        [InlineData(1, AmountOfSubstanceUnit.Mole, 1, AmountOfSubstanceUnit.Mole, true)]  // Same value and unit.
        [InlineData(1, AmountOfSubstanceUnit.Mole, 2, AmountOfSubstanceUnit.Mole, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, AmountOfSubstanceUnit unitA, double valueB, AmountOfSubstanceUnit unitB, bool expectEqual)
        {
            var a = new AmountOfSubstance(valueA, unitA);
            var b = new AmountOfSubstance(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = AmountOfSubstance.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            AmountOfSubstance mole = AmountOfSubstance.FromMoles(1);
            Assert.False(mole.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            AmountOfSubstance mole = AmountOfSubstance.FromMoles(1);
            Assert.False(mole.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = AmountOfSubstance.FromMoles(firstValue);
            var otherQuantity = AmountOfSubstance.FromMoles(secondValue);
            AmountOfSubstance maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, AmountOfSubstance.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = AmountOfSubstance.FromMoles(1);
            var negativeTolerance = AmountOfSubstance.FromMoles(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<AmountOfSubstanceUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(AmountOfSubstance.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(AmountOfSubstance.Info.Units, AmountOfSubstance.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, AmountOfSubstance.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Centimole).ToString());
            Assert.Equal("1 clbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.CentipoundMole).ToString());
            Assert.Equal("1 dmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Decimole).ToString());
            Assert.Equal("1 dlbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.DecipoundMole).ToString());
            Assert.Equal("1 fmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Femtomole).ToString());
            Assert.Equal("1 kmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Kilomole).ToString());
            Assert.Equal("1 klbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.KilopoundMole).ToString());
            Assert.Equal("1 Mmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Megamole).ToString());
            Assert.Equal("1 µmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Micromole).ToString());
            Assert.Equal("1 µlbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.MicropoundMole).ToString());
            Assert.Equal("1 mmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Millimole).ToString());
            Assert.Equal("1 mlbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.MillipoundMole).ToString());
            Assert.Equal("1 mol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Mole).ToString());
            Assert.Equal("1 nmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Nanomole).ToString());
            Assert.Equal("1 nlbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.NanopoundMole).ToString());
            Assert.Equal("1 pmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Picomole).ToString());
            Assert.Equal("1 lbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.PoundMole).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Centimole).ToString(swedishCulture));
            Assert.Equal("1 clbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.CentipoundMole).ToString(swedishCulture));
            Assert.Equal("1 dmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Decimole).ToString(swedishCulture));
            Assert.Equal("1 dlbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.DecipoundMole).ToString(swedishCulture));
            Assert.Equal("1 fmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Femtomole).ToString(swedishCulture));
            Assert.Equal("1 kmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Kilomole).ToString(swedishCulture));
            Assert.Equal("1 klbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.KilopoundMole).ToString(swedishCulture));
            Assert.Equal("1 Mmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Megamole).ToString(swedishCulture));
            Assert.Equal("1 µmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Micromole).ToString(swedishCulture));
            Assert.Equal("1 µlbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.MicropoundMole).ToString(swedishCulture));
            Assert.Equal("1 mmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Millimole).ToString(swedishCulture));
            Assert.Equal("1 mlbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.MillipoundMole).ToString(swedishCulture));
            Assert.Equal("1 mol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Mole).ToString(swedishCulture));
            Assert.Equal("1 nmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Nanomole).ToString(swedishCulture));
            Assert.Equal("1 nlbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.NanopoundMole).ToString(swedishCulture));
            Assert.Equal("1 pmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.Picomole).ToString(swedishCulture));
            Assert.Equal("1 lbmol", new AmountOfSubstance(1, AmountOfSubstanceUnit.PoundMole).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 mol", new AmountOfSubstance(0.123456, AmountOfSubstanceUnit.Mole).ToString("s1"));
            Assert.Equal("0.12 mol", new AmountOfSubstance(0.123456, AmountOfSubstanceUnit.Mole).ToString("s2"));
            Assert.Equal("0.123 mol", new AmountOfSubstance(0.123456, AmountOfSubstanceUnit.Mole).ToString("s3"));
            Assert.Equal("0.1235 mol", new AmountOfSubstance(0.123456, AmountOfSubstanceUnit.Mole).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 mol", new AmountOfSubstance(0.123456, AmountOfSubstanceUnit.Mole).ToString("s1", culture));
            Assert.Equal("0.12 mol", new AmountOfSubstance(0.123456, AmountOfSubstanceUnit.Mole).ToString("s2", culture));
            Assert.Equal("0.123 mol", new AmountOfSubstance(0.123456, AmountOfSubstanceUnit.Mole).ToString("s3", culture));
            Assert.Equal("0.1235 mol", new AmountOfSubstance(0.123456, AmountOfSubstanceUnit.Mole).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = AmountOfSubstance.FromMoles(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = AmountOfSubstance.FromMoles(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = AmountOfSubstance.FromMoles(1.0);
            var expected = Comparison.GetHashCode(typeof(AmountOfSubstance), quantity.As(AmountOfSubstance.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = AmountOfSubstance.FromMoles(value);
            Assert.Equal(AmountOfSubstance.FromMoles(-value), -quantity);
        }
    }
}
