//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToForceChangeRate
{
    /// <summary>
    /// A number to ForceChangeRate Extensions
    /// </summary>
    public static class NumberToForceChangeRateExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="ForceChangeRate.FromCentinewtonsPerSecond(QuantityValue)" />
            public ForceChangeRate CentinewtonsPerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromCentinewtonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromCentinewtonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerMinute(QuantityValue)" />
            public ForceChangeRate DecanewtonsPerMinute
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromDecanewtonsPerMinute(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromDecanewtonsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromDecanewtonsPerSecond(QuantityValue)" />
            public ForceChangeRate DecanewtonsPerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromDecanewtonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromDecanewtonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromDecinewtonsPerSecond(QuantityValue)" />
            public ForceChangeRate DecinewtonsPerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromDecinewtonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromDecinewtonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerMinute(QuantityValue)" />
            public ForceChangeRate KilonewtonsPerMinute
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromKilonewtonsPerMinute(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromKilonewtonsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromKilonewtonsPerSecond(QuantityValue)" />
            public ForceChangeRate KilonewtonsPerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromKilonewtonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromKilonewtonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromKilopoundsForcePerMinute(QuantityValue)" />
            public ForceChangeRate KilopoundsForcePerMinute
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromKilopoundsForcePerMinute(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromKilopoundsForcePerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromKilopoundsForcePerSecond(QuantityValue)" />
            public ForceChangeRate KilopoundsForcePerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromKilopoundsForcePerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromKilopoundsForcePerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromMicronewtonsPerSecond(QuantityValue)" />
            public ForceChangeRate MicronewtonsPerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromMicronewtonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromMicronewtonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromMillinewtonsPerSecond(QuantityValue)" />
            public ForceChangeRate MillinewtonsPerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromMillinewtonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromMillinewtonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromNanonewtonsPerSecond(QuantityValue)" />
            public ForceChangeRate NanonewtonsPerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromNanonewtonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromNanonewtonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerMinute(QuantityValue)" />
            public ForceChangeRate NewtonsPerMinute
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromNewtonsPerMinute(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromNewtonsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromNewtonsPerSecond(QuantityValue)" />
            public ForceChangeRate NewtonsPerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromNewtonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromNewtonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromPoundsForcePerMinute(QuantityValue)" />
            public ForceChangeRate PoundsForcePerMinute
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromPoundsForcePerMinute(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromPoundsForcePerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ForceChangeRate.FromPoundsForcePerSecond(QuantityValue)" />
            public ForceChangeRate PoundsForcePerSecond
#if NET7_0_OR_GREATER
                => ForceChangeRate.FromPoundsForcePerSecond(QuantityValue.CreateChecked(value));
#else
                => ForceChangeRate.FromPoundsForcePerSecond(value.ToQuantityValue());
#endif

        }
    }
}
