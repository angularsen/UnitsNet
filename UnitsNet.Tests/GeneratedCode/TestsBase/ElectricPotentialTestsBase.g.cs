//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricPotential.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricPotentialTestsBase : QuantityTestsBase
    {
        protected abstract double KilovoltsInOneVolt { get; }
        protected abstract double MegavoltsInOneVolt { get; }
        protected abstract double MicrovoltsInOneVolt { get; }
        protected abstract double MillivoltsInOneVolt { get; }
        protected abstract double NanovoltsInOneVolt { get; }
        protected abstract double VoltsInOneVolt { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilovoltsTolerance { get { return 1e-5; } }
        protected virtual double MegavoltsTolerance { get { return 1e-5; } }
        protected virtual double MicrovoltsTolerance { get { return 1e-5; } }
        protected virtual double MillivoltsTolerance { get { return 1e-5; } }
        protected virtual double NanovoltsTolerance { get { return 1e-5; } }
        protected virtual double VoltsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricPotentialUnit unit)
        {
            return unit switch
            {
                ElectricPotentialUnit.Kilovolt => (KilovoltsInOneVolt, KilovoltsTolerance),
                ElectricPotentialUnit.Megavolt => (MegavoltsInOneVolt, MegavoltsTolerance),
                ElectricPotentialUnit.Microvolt => (MicrovoltsInOneVolt, MicrovoltsTolerance),
                ElectricPotentialUnit.Millivolt => (MillivoltsInOneVolt, MillivoltsTolerance),
                ElectricPotentialUnit.Nanovolt => (NanovoltsInOneVolt, NanovoltsTolerance),
                ElectricPotentialUnit.Volt => (VoltsInOneVolt, VoltsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricPotentialUnit.Kilovolt },
            new object[] { ElectricPotentialUnit.Megavolt },
            new object[] { ElectricPotentialUnit.Microvolt },
            new object[] { ElectricPotentialUnit.Millivolt },
            new object[] { ElectricPotentialUnit.Nanovolt },
            new object[] { ElectricPotentialUnit.Volt },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricPotential();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricPotentialUnit.Volt, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ElectricPotential(double.PositiveInfinity, ElectricPotentialUnit.Volt));
            var exception2 = Record.Exception(() => new ElectricPotential(double.NegativeInfinity, ElectricPotentialUnit.Volt));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ElectricPotential(double.NaN, ElectricPotentialUnit.Volt));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricPotential(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ElectricPotential(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ElectricPotential(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ElectricPotential_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ElectricPotentialUnit[] unitsOrderedByName = EnumUtils.GetEnumValues<ElectricPotentialUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new ElectricPotential(1, ElectricPotentialUnit.Volt);

            QuantityInfo<ElectricPotential, ElectricPotentialUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("ElectricPotential", quantityInfo.Name);
            Assert.Equal(ElectricPotential.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricPotential.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(ElectricPotential.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ElectricPotentialUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void ElectricPotentialInfo_CreateWithCustomUnitInfos()
        {
            ElectricPotentialUnit[] expectedUnits = [ElectricPotentialUnit.Volt];

            ElectricPotential.ElectricPotentialInfo quantityInfo = ElectricPotential.ElectricPotentialInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("ElectricPotential", quantityInfo.Name);
            Assert.Equal(ElectricPotential.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricPotential.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void VoltToElectricPotentialUnits()
        {
            ElectricPotential volt = ElectricPotential.FromVolts(1);
            AssertEx.EqualTolerance(KilovoltsInOneVolt, volt.Kilovolts, KilovoltsTolerance);
            AssertEx.EqualTolerance(MegavoltsInOneVolt, volt.Megavolts, MegavoltsTolerance);
            AssertEx.EqualTolerance(MicrovoltsInOneVolt, volt.Microvolts, MicrovoltsTolerance);
            AssertEx.EqualTolerance(MillivoltsInOneVolt, volt.Millivolts, MillivoltsTolerance);
            AssertEx.EqualTolerance(NanovoltsInOneVolt, volt.Nanovolts, NanovoltsTolerance);
            AssertEx.EqualTolerance(VoltsInOneVolt, volt.Volts, VoltsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ElectricPotential.From(1, ElectricPotentialUnit.Kilovolt);
            Assert.Equal(1, quantity00.Kilovolts);
            Assert.Equal(ElectricPotentialUnit.Kilovolt, quantity00.Unit);

            var quantity01 = ElectricPotential.From(1, ElectricPotentialUnit.Megavolt);
            Assert.Equal(1, quantity01.Megavolts);
            Assert.Equal(ElectricPotentialUnit.Megavolt, quantity01.Unit);

            var quantity02 = ElectricPotential.From(1, ElectricPotentialUnit.Microvolt);
            Assert.Equal(1, quantity02.Microvolts);
            Assert.Equal(ElectricPotentialUnit.Microvolt, quantity02.Unit);

            var quantity03 = ElectricPotential.From(1, ElectricPotentialUnit.Millivolt);
            Assert.Equal(1, quantity03.Millivolts);
            Assert.Equal(ElectricPotentialUnit.Millivolt, quantity03.Unit);

            var quantity04 = ElectricPotential.From(1, ElectricPotentialUnit.Nanovolt);
            Assert.Equal(1, quantity04.Nanovolts);
            Assert.Equal(ElectricPotentialUnit.Nanovolt, quantity04.Unit);

            var quantity05 = ElectricPotential.From(1, ElectricPotentialUnit.Volt);
            Assert.Equal(1, quantity05.Volts);
            Assert.Equal(ElectricPotentialUnit.Volt, quantity05.Unit);

        }

        [Fact]
        public void FromVolts_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ElectricPotential.FromVolts(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ElectricPotential.FromVolts(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromVolts_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ElectricPotential.FromVolts(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var volt = ElectricPotential.FromVolts(1);
            AssertEx.EqualTolerance(KilovoltsInOneVolt, volt.As(ElectricPotentialUnit.Kilovolt), KilovoltsTolerance);
            AssertEx.EqualTolerance(MegavoltsInOneVolt, volt.As(ElectricPotentialUnit.Megavolt), MegavoltsTolerance);
            AssertEx.EqualTolerance(MicrovoltsInOneVolt, volt.As(ElectricPotentialUnit.Microvolt), MicrovoltsTolerance);
            AssertEx.EqualTolerance(MillivoltsInOneVolt, volt.As(ElectricPotentialUnit.Millivolt), MillivoltsTolerance);
            AssertEx.EqualTolerance(NanovoltsInOneVolt, volt.As(ElectricPotentialUnit.Nanovolt), NanovoltsTolerance);
            AssertEx.EqualTolerance(VoltsInOneVolt, volt.As(ElectricPotentialUnit.Volt), VoltsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ElectricPotential.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
            var expectedValue = quantity.As(ElectricPotential.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
            var expectedUnit = ElectricPotential.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ElectricPotential quantityToConvert = quantity;

                ElectricPotential convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ElectricPotentialUnit> quantityToConvert = quantity;

                IQuantity<ElectricPotentialUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ElectricPotentialUnit> quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ElectricPotentialUnit> quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricPotential(value: 1, unit: ElectricPotential.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 kV", ElectricPotentialUnit.Kilovolt, 4.2)]
        [InlineData("en-US", "4.2 MV", ElectricPotentialUnit.Megavolt, 4.2)]
        [InlineData("en-US", "4.2 µV", ElectricPotentialUnit.Microvolt, 4.2)]
        [InlineData("en-US", "4.2 mV", ElectricPotentialUnit.Millivolt, 4.2)]
        [InlineData("en-US", "4.2 nV", ElectricPotentialUnit.Nanovolt, 4.2)]
        [InlineData("en-US", "4.2 V", ElectricPotentialUnit.Volt, 4.2)]
        [InlineData("ru-RU", "4,2 кВ", ElectricPotentialUnit.Kilovolt, 4.2)]
        [InlineData("ru-RU", "4,2 МВ", ElectricPotentialUnit.Megavolt, 4.2)]
        [InlineData("ru-RU", "4,2 мкВ", ElectricPotentialUnit.Microvolt, 4.2)]
        [InlineData("ru-RU", "4,2 мВ", ElectricPotentialUnit.Millivolt, 4.2)]
        [InlineData("ru-RU", "4,2 нВ", ElectricPotentialUnit.Nanovolt, 4.2)]
        [InlineData("ru-RU", "4,2 В", ElectricPotentialUnit.Volt, 4.2)]
        public void Parse(string culture, string quantityString, ElectricPotentialUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = ElectricPotential.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 kV", ElectricPotentialUnit.Kilovolt, 4.2)]
        [InlineData("en-US", "4.2 MV", ElectricPotentialUnit.Megavolt, 4.2)]
        [InlineData("en-US", "4.2 µV", ElectricPotentialUnit.Microvolt, 4.2)]
        [InlineData("en-US", "4.2 mV", ElectricPotentialUnit.Millivolt, 4.2)]
        [InlineData("en-US", "4.2 nV", ElectricPotentialUnit.Nanovolt, 4.2)]
        [InlineData("en-US", "4.2 V", ElectricPotentialUnit.Volt, 4.2)]
        [InlineData("ru-RU", "4,2 кВ", ElectricPotentialUnit.Kilovolt, 4.2)]
        [InlineData("ru-RU", "4,2 МВ", ElectricPotentialUnit.Megavolt, 4.2)]
        [InlineData("ru-RU", "4,2 мкВ", ElectricPotentialUnit.Microvolt, 4.2)]
        [InlineData("ru-RU", "4,2 мВ", ElectricPotentialUnit.Millivolt, 4.2)]
        [InlineData("ru-RU", "4,2 нВ", ElectricPotentialUnit.Nanovolt, 4.2)]
        [InlineData("ru-RU", "4,2 В", ElectricPotentialUnit.Volt, 4.2)]
        public void TryParse(string culture, string quantityString, ElectricPotentialUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricPotential.TryParse(quantityString, out ElectricPotential parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("kV", ElectricPotentialUnit.Kilovolt)]
        [InlineData("MV", ElectricPotentialUnit.Megavolt)]
        [InlineData("µV", ElectricPotentialUnit.Microvolt)]
        [InlineData("mV", ElectricPotentialUnit.Millivolt)]
        [InlineData("nV", ElectricPotentialUnit.Nanovolt)]
        [InlineData("V", ElectricPotentialUnit.Volt)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricPotentialUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ElectricPotentialUnit parsedUnit = ElectricPotential.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kV", ElectricPotentialUnit.Kilovolt)]
        [InlineData("MV", ElectricPotentialUnit.Megavolt)]
        [InlineData("µV", ElectricPotentialUnit.Microvolt)]
        [InlineData("mV", ElectricPotentialUnit.Millivolt)]
        [InlineData("nV", ElectricPotentialUnit.Nanovolt)]
        [InlineData("V", ElectricPotentialUnit.Volt)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricPotentialUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ElectricPotentialUnit parsedUnit = ElectricPotential.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kV", ElectricPotentialUnit.Kilovolt)]
        [InlineData("en-US", "MV", ElectricPotentialUnit.Megavolt)]
        [InlineData("en-US", "µV", ElectricPotentialUnit.Microvolt)]
        [InlineData("en-US", "mV", ElectricPotentialUnit.Millivolt)]
        [InlineData("en-US", "nV", ElectricPotentialUnit.Nanovolt)]
        [InlineData("en-US", "V", ElectricPotentialUnit.Volt)]
        [InlineData("ru-RU", "кВ", ElectricPotentialUnit.Kilovolt)]
        [InlineData("ru-RU", "МВ", ElectricPotentialUnit.Megavolt)]
        [InlineData("ru-RU", "мкВ", ElectricPotentialUnit.Microvolt)]
        [InlineData("ru-RU", "мВ", ElectricPotentialUnit.Millivolt)]
        [InlineData("ru-RU", "нВ", ElectricPotentialUnit.Nanovolt)]
        [InlineData("ru-RU", "В", ElectricPotentialUnit.Volt)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricPotentialUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ElectricPotentialUnit parsedUnit = ElectricPotential.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kV", ElectricPotentialUnit.Kilovolt)]
        [InlineData("en-US", "MV", ElectricPotentialUnit.Megavolt)]
        [InlineData("en-US", "µV", ElectricPotentialUnit.Microvolt)]
        [InlineData("en-US", "mV", ElectricPotentialUnit.Millivolt)]
        [InlineData("en-US", "nV", ElectricPotentialUnit.Nanovolt)]
        [InlineData("en-US", "V", ElectricPotentialUnit.Volt)]
        [InlineData("ru-RU", "кВ", ElectricPotentialUnit.Kilovolt)]
        [InlineData("ru-RU", "МВ", ElectricPotentialUnit.Megavolt)]
        [InlineData("ru-RU", "мкВ", ElectricPotentialUnit.Microvolt)]
        [InlineData("ru-RU", "мВ", ElectricPotentialUnit.Millivolt)]
        [InlineData("ru-RU", "нВ", ElectricPotentialUnit.Nanovolt)]
        [InlineData("ru-RU", "В", ElectricPotentialUnit.Volt)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ElectricPotentialUnit expectedUnit)
        {
            ElectricPotentialUnit parsedUnit = ElectricPotential.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kV", ElectricPotentialUnit.Kilovolt)]
        [InlineData("MV", ElectricPotentialUnit.Megavolt)]
        [InlineData("µV", ElectricPotentialUnit.Microvolt)]
        [InlineData("mV", ElectricPotentialUnit.Millivolt)]
        [InlineData("nV", ElectricPotentialUnit.Nanovolt)]
        [InlineData("V", ElectricPotentialUnit.Volt)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricPotentialUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ElectricPotential.TryParseUnit(abbreviation, out ElectricPotentialUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kV", ElectricPotentialUnit.Kilovolt)]
        [InlineData("MV", ElectricPotentialUnit.Megavolt)]
        [InlineData("µV", ElectricPotentialUnit.Microvolt)]
        [InlineData("mV", ElectricPotentialUnit.Millivolt)]
        [InlineData("nV", ElectricPotentialUnit.Nanovolt)]
        [InlineData("V", ElectricPotentialUnit.Volt)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricPotentialUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ElectricPotential.TryParseUnit(abbreviation, out ElectricPotentialUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kV", ElectricPotentialUnit.Kilovolt)]
        [InlineData("en-US", "MV", ElectricPotentialUnit.Megavolt)]
        [InlineData("en-US", "µV", ElectricPotentialUnit.Microvolt)]
        [InlineData("en-US", "mV", ElectricPotentialUnit.Millivolt)]
        [InlineData("en-US", "nV", ElectricPotentialUnit.Nanovolt)]
        [InlineData("en-US", "V", ElectricPotentialUnit.Volt)]
        [InlineData("ru-RU", "кВ", ElectricPotentialUnit.Kilovolt)]
        [InlineData("ru-RU", "МВ", ElectricPotentialUnit.Megavolt)]
        [InlineData("ru-RU", "мкВ", ElectricPotentialUnit.Microvolt)]
        [InlineData("ru-RU", "мВ", ElectricPotentialUnit.Millivolt)]
        [InlineData("ru-RU", "нВ", ElectricPotentialUnit.Nanovolt)]
        [InlineData("ru-RU", "В", ElectricPotentialUnit.Volt)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricPotentialUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricPotential.TryParseUnit(abbreviation, out ElectricPotentialUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kV", ElectricPotentialUnit.Kilovolt)]
        [InlineData("en-US", "MV", ElectricPotentialUnit.Megavolt)]
        [InlineData("en-US", "µV", ElectricPotentialUnit.Microvolt)]
        [InlineData("en-US", "mV", ElectricPotentialUnit.Millivolt)]
        [InlineData("en-US", "nV", ElectricPotentialUnit.Nanovolt)]
        [InlineData("en-US", "V", ElectricPotentialUnit.Volt)]
        [InlineData("ru-RU", "кВ", ElectricPotentialUnit.Kilovolt)]
        [InlineData("ru-RU", "МВ", ElectricPotentialUnit.Megavolt)]
        [InlineData("ru-RU", "мкВ", ElectricPotentialUnit.Microvolt)]
        [InlineData("ru-RU", "мВ", ElectricPotentialUnit.Millivolt)]
        [InlineData("ru-RU", "нВ", ElectricPotentialUnit.Nanovolt)]
        [InlineData("ru-RU", "В", ElectricPotentialUnit.Volt)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ElectricPotentialUnit expectedUnit)
        {
            Assert.True(ElectricPotential.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ElectricPotentialUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", ElectricPotentialUnit.Kilovolt, "kV")]
        [InlineData("en-US", ElectricPotentialUnit.Megavolt, "MV")]
        [InlineData("en-US", ElectricPotentialUnit.Microvolt, "µV")]
        [InlineData("en-US", ElectricPotentialUnit.Millivolt, "mV")]
        [InlineData("en-US", ElectricPotentialUnit.Nanovolt, "nV")]
        [InlineData("en-US", ElectricPotentialUnit.Volt, "V")]
        [InlineData("ru-RU", ElectricPotentialUnit.Kilovolt, "кВ")]
        [InlineData("ru-RU", ElectricPotentialUnit.Megavolt, "МВ")]
        [InlineData("ru-RU", ElectricPotentialUnit.Microvolt, "мкВ")]
        [InlineData("ru-RU", ElectricPotentialUnit.Millivolt, "мВ")]
        [InlineData("ru-RU", ElectricPotentialUnit.Nanovolt, "нВ")]
        [InlineData("ru-RU", ElectricPotentialUnit.Volt, "В")]
        public void GetAbbreviationForCulture(string culture, ElectricPotentialUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = ElectricPotential.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(ElectricPotential.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = ElectricPotential.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricPotentialUnit unit)
        {
            var inBaseUnits = ElectricPotential.From(1.0, ElectricPotential.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricPotentialUnit unit)
        {
            var quantity = ElectricPotential.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricPotentialUnit unit)
        {
            Assert.All(ElectricPotential.Units.Where(u => u != ElectricPotential.BaseUnit), fromUnit =>
            {
                var quantity = ElectricPotential.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricPotentialUnit unit)
        {
            var quantity = default(ElectricPotential);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ElectricPotentialUnit unit)
        {
            var quantity = ElectricPotential.From(3, ElectricPotential.BaseUnit);
            ElectricPotential expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ElectricPotentialUnit> quantityToConvert = quantity;
                IQuantity<ElectricPotentialUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricPotential volt = ElectricPotential.FromVolts(3);
            Assert.Equal(3, ElectricPotential.FromKilovolts(volt.Kilovolts).Volts);
            Assert.Equal(3, ElectricPotential.FromMegavolts(volt.Megavolts).Volts);
            Assert.Equal(3, ElectricPotential.FromMicrovolts(volt.Microvolts).Volts);
            Assert.Equal(3, ElectricPotential.FromMillivolts(volt.Millivolts).Volts);
            Assert.Equal(3, ElectricPotential.FromNanovolts(volt.Nanovolts).Volts);
            Assert.Equal(3, ElectricPotential.FromVolts(volt.Volts).Volts);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricPotential v = ElectricPotential.FromVolts(1);
            Assert.Equal(-1, -v.Volts);
            Assert.Equal(2, (ElectricPotential.FromVolts(3) - v).Volts);
            Assert.Equal(2, (v + v).Volts);
            Assert.Equal(10, (v * 10).Volts);
            Assert.Equal(10, (10 * v).Volts);
            Assert.Equal(2, (ElectricPotential.FromVolts(10) / 5).Volts);
            Assert.Equal(2, ElectricPotential.FromVolts(10) / ElectricPotential.FromVolts(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricPotential oneVolt = ElectricPotential.FromVolts(1);
            ElectricPotential twoVolts = ElectricPotential.FromVolts(2);

            Assert.True(oneVolt < twoVolts);
            Assert.True(oneVolt <= twoVolts);
            Assert.True(twoVolts > oneVolt);
            Assert.True(twoVolts >= oneVolt);

            Assert.False(oneVolt > twoVolts);
            Assert.False(oneVolt >= twoVolts);
            Assert.False(twoVolts < oneVolt);
            Assert.False(twoVolts <= oneVolt);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricPotential volt = ElectricPotential.FromVolts(1);
            Assert.Equal(0, volt.CompareTo(volt));
            Assert.True(volt.CompareTo(ElectricPotential.Zero) > 0);
            Assert.True(ElectricPotential.Zero.CompareTo(volt) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricPotential volt = ElectricPotential.FromVolts(1);
            Assert.Throws<ArgumentException>(() => volt.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricPotential volt = ElectricPotential.FromVolts(1);
            Assert.Throws<ArgumentNullException>(() => volt.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricPotentialUnit.Volt, 1, ElectricPotentialUnit.Volt, true)]  // Same value and unit.
        [InlineData(1, ElectricPotentialUnit.Volt, 2, ElectricPotentialUnit.Volt, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricPotentialUnit unitA, double valueB, ElectricPotentialUnit unitB, bool expectEqual)
        {
            var a = new ElectricPotential(valueA, unitA);
            var b = new ElectricPotential(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricPotential.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricPotential volt = ElectricPotential.FromVolts(1);
            Assert.False(volt.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricPotential volt = ElectricPotential.FromVolts(1);
            Assert.False(volt.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance_IsImplemented(double firstValue, double secondValue)
        {
            var quantity = ElectricPotential.FromVolts(firstValue);
            var otherQuantity = ElectricPotential.FromVolts(secondValue);
            ElectricPotential maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, ElectricPotential.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = ElectricPotential.FromVolts(1);
            var negativeTolerance = ElectricPotential.FromVolts(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumUtils.GetEnumValues<ElectricPotentialUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricPotential.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(ElectricPotential.Info.Units, ElectricPotential.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, ElectricPotential.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 kV", new ElectricPotential(1, ElectricPotentialUnit.Kilovolt).ToString());
            Assert.Equal("1 MV", new ElectricPotential(1, ElectricPotentialUnit.Megavolt).ToString());
            Assert.Equal("1 µV", new ElectricPotential(1, ElectricPotentialUnit.Microvolt).ToString());
            Assert.Equal("1 mV", new ElectricPotential(1, ElectricPotentialUnit.Millivolt).ToString());
            Assert.Equal("1 nV", new ElectricPotential(1, ElectricPotentialUnit.Nanovolt).ToString());
            Assert.Equal("1 V", new ElectricPotential(1, ElectricPotentialUnit.Volt).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kV", new ElectricPotential(1, ElectricPotentialUnit.Kilovolt).ToString(swedishCulture));
            Assert.Equal("1 MV", new ElectricPotential(1, ElectricPotentialUnit.Megavolt).ToString(swedishCulture));
            Assert.Equal("1 µV", new ElectricPotential(1, ElectricPotentialUnit.Microvolt).ToString(swedishCulture));
            Assert.Equal("1 mV", new ElectricPotential(1, ElectricPotentialUnit.Millivolt).ToString(swedishCulture));
            Assert.Equal("1 nV", new ElectricPotential(1, ElectricPotentialUnit.Nanovolt).ToString(swedishCulture));
            Assert.Equal("1 V", new ElectricPotential(1, ElectricPotentialUnit.Volt).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 V", new ElectricPotential(0.123456, ElectricPotentialUnit.Volt).ToString("s1"));
            Assert.Equal("0.12 V", new ElectricPotential(0.123456, ElectricPotentialUnit.Volt).ToString("s2"));
            Assert.Equal("0.123 V", new ElectricPotential(0.123456, ElectricPotentialUnit.Volt).ToString("s3"));
            Assert.Equal("0.1235 V", new ElectricPotential(0.123456, ElectricPotentialUnit.Volt).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 V", new ElectricPotential(0.123456, ElectricPotentialUnit.Volt).ToString("s1", culture));
            Assert.Equal("0.12 V", new ElectricPotential(0.123456, ElectricPotentialUnit.Volt).ToString("s2", culture));
            Assert.Equal("0.123 V", new ElectricPotential(0.123456, ElectricPotentialUnit.Volt).ToString("s3", culture));
            Assert.Equal("0.1235 V", new ElectricPotential(0.123456, ElectricPotentialUnit.Volt).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricPotential.FromVolts(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricPotential.FromVolts(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricPotential.FromVolts(1.0);
            var expected = Comparison.GetHashCode(typeof(ElectricPotential), quantity.As(ElectricPotential.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricPotential.FromVolts(value);
            Assert.Equal(ElectricPotential.FromVolts(-value), -quantity);
        }
    }
}
