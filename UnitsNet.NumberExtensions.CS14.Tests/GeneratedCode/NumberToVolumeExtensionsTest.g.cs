//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToVolume;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToVolumeExtensionsTests
    {
        [Fact]
        public void NumberToAcreFeetTest() =>
            Assert.Equal(Volume.FromAcreFeet(2), 2.AcreFeet);

        [Fact]
        public void NumberToAuTablespoonsTest() =>
            Assert.Equal(Volume.FromAuTablespoons(2), 2.AuTablespoons);

        [Fact]
        public void NumberToBoardFeetTest() =>
            Assert.Equal(Volume.FromBoardFeet(2), 2.BoardFeet);

        [Fact]
        public void NumberToCentilitersTest() =>
            Assert.Equal(Volume.FromCentiliters(2), 2.Centiliters);

        [Fact]
        public void NumberToCubicCentimetersTest() =>
            Assert.Equal(Volume.FromCubicCentimeters(2), 2.CubicCentimeters);

        [Fact]
        public void NumberToCubicDecimetersTest() =>
            Assert.Equal(Volume.FromCubicDecimeters(2), 2.CubicDecimeters);

        [Fact]
        public void NumberToCubicFeetTest() =>
            Assert.Equal(Volume.FromCubicFeet(2), 2.CubicFeet);

        [Fact]
        public void NumberToCubicHectometersTest() =>
            Assert.Equal(Volume.FromCubicHectometers(2), 2.CubicHectometers);

        [Fact]
        public void NumberToCubicInchesTest() =>
            Assert.Equal(Volume.FromCubicInches(2), 2.CubicInches);

        [Fact]
        public void NumberToCubicKilometersTest() =>
            Assert.Equal(Volume.FromCubicKilometers(2), 2.CubicKilometers);

        [Fact]
        public void NumberToCubicMetersTest() =>
            Assert.Equal(Volume.FromCubicMeters(2), 2.CubicMeters);

        [Fact]
        public void NumberToCubicMicrometersTest() =>
            Assert.Equal(Volume.FromCubicMicrometers(2), 2.CubicMicrometers);

        [Fact]
        public void NumberToCubicMilesTest() =>
            Assert.Equal(Volume.FromCubicMiles(2), 2.CubicMiles);

        [Fact]
        public void NumberToCubicMillimetersTest() =>
            Assert.Equal(Volume.FromCubicMillimeters(2), 2.CubicMillimeters);

        [Fact]
        public void NumberToCubicYardsTest() =>
            Assert.Equal(Volume.FromCubicYards(2), 2.CubicYards);

        [Fact]
        public void NumberToDecalitersTest() =>
            Assert.Equal(Volume.FromDecaliters(2), 2.Decaliters);

        [Fact]
        public void NumberToDecausGallonsTest() =>
            Assert.Equal(Volume.FromDecausGallons(2), 2.DecausGallons);

        [Fact]
        public void NumberToDecilitersTest() =>
            Assert.Equal(Volume.FromDeciliters(2), 2.Deciliters);

        [Fact]
        public void NumberToDeciusGallonsTest() =>
            Assert.Equal(Volume.FromDeciusGallons(2), 2.DeciusGallons);

        [Fact]
        public void NumberToHectocubicFeetTest() =>
            Assert.Equal(Volume.FromHectocubicFeet(2), 2.HectocubicFeet);

        [Fact]
        public void NumberToHectocubicMetersTest() =>
            Assert.Equal(Volume.FromHectocubicMeters(2), 2.HectocubicMeters);

        [Fact]
        public void NumberToHectolitersTest() =>
            Assert.Equal(Volume.FromHectoliters(2), 2.Hectoliters);

        [Fact]
        public void NumberToHectousGallonsTest() =>
            Assert.Equal(Volume.FromHectousGallons(2), 2.HectousGallons);

        [Fact]
        public void NumberToImperialBeerBarrelsTest() =>
            Assert.Equal(Volume.FromImperialBeerBarrels(2), 2.ImperialBeerBarrels);

        [Fact]
        public void NumberToImperialGallonsTest() =>
            Assert.Equal(Volume.FromImperialGallons(2), 2.ImperialGallons);

        [Fact]
        public void NumberToImperialOuncesTest() =>
            Assert.Equal(Volume.FromImperialOunces(2), 2.ImperialOunces);

        [Fact]
        public void NumberToImperialPintsTest() =>
            Assert.Equal(Volume.FromImperialPints(2), 2.ImperialPints);

        [Fact]
        public void NumberToImperialQuartsTest() =>
            Assert.Equal(Volume.FromImperialQuarts(2), 2.ImperialQuarts);

        [Fact]
        public void NumberToKilocubicFeetTest() =>
            Assert.Equal(Volume.FromKilocubicFeet(2), 2.KilocubicFeet);

        [Fact]
        public void NumberToKilocubicMetersTest() =>
            Assert.Equal(Volume.FromKilocubicMeters(2), 2.KilocubicMeters);

        [Fact]
        public void NumberToKiloimperialGallonsTest() =>
            Assert.Equal(Volume.FromKiloimperialGallons(2), 2.KiloimperialGallons);

        [Fact]
        public void NumberToKilolitersTest() =>
            Assert.Equal(Volume.FromKiloliters(2), 2.Kiloliters);

        [Fact]
        public void NumberToKilousGallonsTest() =>
            Assert.Equal(Volume.FromKilousGallons(2), 2.KilousGallons);

        [Fact]
        public void NumberToLitersTest() =>
            Assert.Equal(Volume.FromLiters(2), 2.Liters);

        [Fact]
        public void NumberToMegacubicFeetTest() =>
            Assert.Equal(Volume.FromMegacubicFeet(2), 2.MegacubicFeet);

        [Fact]
        public void NumberToMegaimperialGallonsTest() =>
            Assert.Equal(Volume.FromMegaimperialGallons(2), 2.MegaimperialGallons);

        [Fact]
        public void NumberToMegalitersTest() =>
            Assert.Equal(Volume.FromMegaliters(2), 2.Megaliters);

        [Fact]
        public void NumberToMegausGallonsTest() =>
            Assert.Equal(Volume.FromMegausGallons(2), 2.MegausGallons);

        [Fact]
        public void NumberToMetricCupsTest() =>
            Assert.Equal(Volume.FromMetricCups(2), 2.MetricCups);

        [Fact]
        public void NumberToMetricTablespoonsTest() =>
            Assert.Equal(Volume.FromMetricTablespoons(2), 2.MetricTablespoons);

        [Fact]
        public void NumberToMetricTeaspoonsTest() =>
            Assert.Equal(Volume.FromMetricTeaspoons(2), 2.MetricTeaspoons);

        [Fact]
        public void NumberToMicrolitersTest() =>
            Assert.Equal(Volume.FromMicroliters(2), 2.Microliters);

        [Fact]
        public void NumberToMillilitersTest() =>
            Assert.Equal(Volume.FromMilliliters(2), 2.Milliliters);

        [Fact]
        public void NumberToNanolitersTest() =>
            Assert.Equal(Volume.FromNanoliters(2), 2.Nanoliters);

        [Fact]
        public void NumberToOilBarrelsTest() =>
            Assert.Equal(Volume.FromOilBarrels(2), 2.OilBarrels);

        [Fact]
        public void NumberToUkTablespoonsTest() =>
            Assert.Equal(Volume.FromUkTablespoons(2), 2.UkTablespoons);

        [Fact]
        public void NumberToUsBeerBarrelsTest() =>
            Assert.Equal(Volume.FromUsBeerBarrels(2), 2.UsBeerBarrels);

        [Fact]
        public void NumberToUsCustomaryCupsTest() =>
            Assert.Equal(Volume.FromUsCustomaryCups(2), 2.UsCustomaryCups);

        [Fact]
        public void NumberToUsGallonsTest() =>
            Assert.Equal(Volume.FromUsGallons(2), 2.UsGallons);

        [Fact]
        public void NumberToUsLegalCupsTest() =>
            Assert.Equal(Volume.FromUsLegalCups(2), 2.UsLegalCups);

        [Fact]
        public void NumberToUsOuncesTest() =>
            Assert.Equal(Volume.FromUsOunces(2), 2.UsOunces);

        [Fact]
        public void NumberToUsPintsTest() =>
            Assert.Equal(Volume.FromUsPints(2), 2.UsPints);

        [Fact]
        public void NumberToUsQuartsTest() =>
            Assert.Equal(Volume.FromUsQuarts(2), 2.UsQuarts);

        [Fact]
        public void NumberToUsTablespoonsTest() =>
            Assert.Equal(Volume.FromUsTablespoons(2), 2.UsTablespoons);

        [Fact]
        public void NumberToUsTeaspoonsTest() =>
            Assert.Equal(Volume.FromUsTeaspoons(2), 2.UsTeaspoons);

    }
}
