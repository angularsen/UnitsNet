//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MolarFlow.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MolarFlowTestsBase : QuantityTestsBase
    {
        protected abstract double KilomolesPerHourInOneMolePerSecond { get; }
        protected abstract double KilomolesPerMinuteInOneMolePerSecond { get; }
        protected abstract double KilomolesPerSecondInOneMolePerSecond { get; }
        protected abstract double MolesPerHourInOneMolePerSecond { get; }
        protected abstract double MolesPerMinuteInOneMolePerSecond { get; }
        protected abstract double MolesPerSecondInOneMolePerSecond { get; }
        protected abstract double PoundMolesPerHourInOneMolePerSecond { get; }
        protected abstract double PoundMolesPerMinuteInOneMolePerSecond { get; }
        protected abstract double PoundMolesPerSecondInOneMolePerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilomolesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilomolesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilomolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MolesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MolesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MolesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PoundMolesPerHourTolerance { get { return 1e-5; } }
        protected virtual double PoundMolesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PoundMolesPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MolarFlowUnit unit)
        {
            return unit switch
            {
                MolarFlowUnit.KilomolePerHour => (KilomolesPerHourInOneMolePerSecond, KilomolesPerHourTolerance),
                MolarFlowUnit.KilomolePerMinute => (KilomolesPerMinuteInOneMolePerSecond, KilomolesPerMinuteTolerance),
                MolarFlowUnit.KilomolePerSecond => (KilomolesPerSecondInOneMolePerSecond, KilomolesPerSecondTolerance),
                MolarFlowUnit.MolePerHour => (MolesPerHourInOneMolePerSecond, MolesPerHourTolerance),
                MolarFlowUnit.MolePerMinute => (MolesPerMinuteInOneMolePerSecond, MolesPerMinuteTolerance),
                MolarFlowUnit.MolePerSecond => (MolesPerSecondInOneMolePerSecond, MolesPerSecondTolerance),
                MolarFlowUnit.PoundMolePerHour => (PoundMolesPerHourInOneMolePerSecond, PoundMolesPerHourTolerance),
                MolarFlowUnit.PoundMolePerMinute => (PoundMolesPerMinuteInOneMolePerSecond, PoundMolesPerMinuteTolerance),
                MolarFlowUnit.PoundMolePerSecond => (PoundMolesPerSecondInOneMolePerSecond, PoundMolesPerSecondTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MolarFlowUnit.KilomolePerHour },
            new object[] { MolarFlowUnit.KilomolePerMinute },
            new object[] { MolarFlowUnit.KilomolePerSecond },
            new object[] { MolarFlowUnit.MolePerHour },
            new object[] { MolarFlowUnit.MolePerMinute },
            new object[] { MolarFlowUnit.MolePerSecond },
            new object[] { MolarFlowUnit.PoundMolePerHour },
            new object[] { MolarFlowUnit.PoundMolePerMinute },
            new object[] { MolarFlowUnit.PoundMolePerSecond },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MolarFlow();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MolarFlowUnit.MolePerSecond, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new MolarFlow(double.PositiveInfinity, MolarFlowUnit.MolePerSecond));
            var exception2 = Record.Exception(() => new MolarFlow(double.NegativeInfinity, MolarFlowUnit.MolePerSecond));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new MolarFlow(double.NaN, MolarFlowUnit.MolePerSecond));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MolarFlow(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new MolarFlow(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new MolarFlow(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void MolarFlow_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MolarFlow(1, MolarFlowUnit.MolePerSecond);

            QuantityInfo<MolarFlowUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MolarFlow.Zero, quantityInfo.Zero);
            Assert.Equal("MolarFlow", quantityInfo.Name);

            var units = Enum.GetValues<MolarFlowUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void MolePerSecondToMolarFlowUnits()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            AssertEx.EqualTolerance(KilomolesPerHourInOneMolePerSecond, molepersecond.KilomolesPerHour, KilomolesPerHourTolerance);
            AssertEx.EqualTolerance(KilomolesPerMinuteInOneMolePerSecond, molepersecond.KilomolesPerMinute, KilomolesPerMinuteTolerance);
            AssertEx.EqualTolerance(KilomolesPerSecondInOneMolePerSecond, molepersecond.KilomolesPerSecond, KilomolesPerSecondTolerance);
            AssertEx.EqualTolerance(MolesPerHourInOneMolePerSecond, molepersecond.MolesPerHour, MolesPerHourTolerance);
            AssertEx.EqualTolerance(MolesPerMinuteInOneMolePerSecond, molepersecond.MolesPerMinute, MolesPerMinuteTolerance);
            AssertEx.EqualTolerance(MolesPerSecondInOneMolePerSecond, molepersecond.MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(PoundMolesPerHourInOneMolePerSecond, molepersecond.PoundMolesPerHour, PoundMolesPerHourTolerance);
            AssertEx.EqualTolerance(PoundMolesPerMinuteInOneMolePerSecond, molepersecond.PoundMolesPerMinute, PoundMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(PoundMolesPerSecondInOneMolePerSecond, molepersecond.PoundMolesPerSecond, PoundMolesPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MolarFlow.From(1, MolarFlowUnit.KilomolePerHour);
            AssertEx.EqualTolerance(1, quantity00.KilomolesPerHour, KilomolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerHour, quantity00.Unit);

            var quantity01 = MolarFlow.From(1, MolarFlowUnit.KilomolePerMinute);
            AssertEx.EqualTolerance(1, quantity01.KilomolesPerMinute, KilomolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerMinute, quantity01.Unit);

            var quantity02 = MolarFlow.From(1, MolarFlowUnit.KilomolePerSecond);
            AssertEx.EqualTolerance(1, quantity02.KilomolesPerSecond, KilomolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.KilomolePerSecond, quantity02.Unit);

            var quantity03 = MolarFlow.From(1, MolarFlowUnit.MolePerHour);
            AssertEx.EqualTolerance(1, quantity03.MolesPerHour, MolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.MolePerHour, quantity03.Unit);

            var quantity04 = MolarFlow.From(1, MolarFlowUnit.MolePerMinute);
            AssertEx.EqualTolerance(1, quantity04.MolesPerMinute, MolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.MolePerMinute, quantity04.Unit);

            var quantity05 = MolarFlow.From(1, MolarFlowUnit.MolePerSecond);
            AssertEx.EqualTolerance(1, quantity05.MolesPerSecond, MolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.MolePerSecond, quantity05.Unit);

            var quantity06 = MolarFlow.From(1, MolarFlowUnit.PoundMolePerHour);
            AssertEx.EqualTolerance(1, quantity06.PoundMolesPerHour, PoundMolesPerHourTolerance);
            Assert.Equal(MolarFlowUnit.PoundMolePerHour, quantity06.Unit);

            var quantity07 = MolarFlow.From(1, MolarFlowUnit.PoundMolePerMinute);
            AssertEx.EqualTolerance(1, quantity07.PoundMolesPerMinute, PoundMolesPerMinuteTolerance);
            Assert.Equal(MolarFlowUnit.PoundMolePerMinute, quantity07.Unit);

            var quantity08 = MolarFlow.From(1, MolarFlowUnit.PoundMolePerSecond);
            AssertEx.EqualTolerance(1, quantity08.PoundMolesPerSecond, PoundMolesPerSecondTolerance);
            Assert.Equal(MolarFlowUnit.PoundMolePerSecond, quantity08.Unit);

        }

        [Fact]
        public void FromMolesPerSecond_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => MolarFlow.FromMolesPerSecond(double.PositiveInfinity));
            var exception2 = Record.Exception(() => MolarFlow.FromMolesPerSecond(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromMolesPerSecond_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => MolarFlow.FromMolesPerSecond(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var molepersecond = MolarFlow.FromMolesPerSecond(1);
            AssertEx.EqualTolerance(KilomolesPerHourInOneMolePerSecond, molepersecond.As(MolarFlowUnit.KilomolePerHour), KilomolesPerHourTolerance);
            AssertEx.EqualTolerance(KilomolesPerMinuteInOneMolePerSecond, molepersecond.As(MolarFlowUnit.KilomolePerMinute), KilomolesPerMinuteTolerance);
            AssertEx.EqualTolerance(KilomolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.KilomolePerSecond), KilomolesPerSecondTolerance);
            AssertEx.EqualTolerance(MolesPerHourInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MolePerHour), MolesPerHourTolerance);
            AssertEx.EqualTolerance(MolesPerMinuteInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MolePerMinute), MolesPerMinuteTolerance);
            AssertEx.EqualTolerance(MolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.MolePerSecond), MolesPerSecondTolerance);
            AssertEx.EqualTolerance(PoundMolesPerHourInOneMolePerSecond, molepersecond.As(MolarFlowUnit.PoundMolePerHour), PoundMolesPerHourTolerance);
            AssertEx.EqualTolerance(PoundMolesPerMinuteInOneMolePerSecond, molepersecond.As(MolarFlowUnit.PoundMolePerMinute), PoundMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(PoundMolesPerSecondInOneMolePerSecond, molepersecond.As(MolarFlowUnit.PoundMolePerSecond), PoundMolesPerSecondTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = MolarFlow.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
            var expectedValue = quantity.As(MolarFlow.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
            var expectedUnit = MolarFlow.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                MolarFlow quantityToConvert = quantity;

                MolarFlow convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<MolarFlowUnit> quantityToConvert = quantity;

                IQuantity<MolarFlowUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<MolarFlowUnit> quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<MolarFlowUnit> quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new MolarFlow(value: 1, unit: MolarFlow.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 kkmol/h", MolarFlowUnit.KilomolePerHour, 4.2)]
        [InlineData("en-US", "4.2 kmol/min", MolarFlowUnit.KilomolePerMinute, 4.2)]
        [InlineData("en-US", "4.2 kmol/s", MolarFlowUnit.KilomolePerSecond, 4.2)]
        [InlineData("en-US", "4.2 kmol/h", MolarFlowUnit.MolePerHour, 4.2)]
        [InlineData("en-US", "4.2 mol/min", MolarFlowUnit.MolePerMinute, 4.2)]
        [InlineData("en-US", "4.2 mol/s", MolarFlowUnit.MolePerSecond, 4.2)]
        [InlineData("en-US", "4.2 lbmol/h", MolarFlowUnit.PoundMolePerHour, 4.2)]
        [InlineData("en-US", "4.2 lbmol/min", MolarFlowUnit.PoundMolePerMinute, 4.2)]
        [InlineData("en-US", "4.2 lbmol/s", MolarFlowUnit.PoundMolePerSecond, 4.2)]
        public void Parse(string culture, string quantityString, MolarFlowUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = MolarFlow.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 kkmol/h", MolarFlowUnit.KilomolePerHour, 4.2)]
        [InlineData("en-US", "4.2 kmol/min", MolarFlowUnit.KilomolePerMinute, 4.2)]
        [InlineData("en-US", "4.2 kmol/s", MolarFlowUnit.KilomolePerSecond, 4.2)]
        [InlineData("en-US", "4.2 kmol/h", MolarFlowUnit.MolePerHour, 4.2)]
        [InlineData("en-US", "4.2 mol/min", MolarFlowUnit.MolePerMinute, 4.2)]
        [InlineData("en-US", "4.2 mol/s", MolarFlowUnit.MolePerSecond, 4.2)]
        [InlineData("en-US", "4.2 lbmol/h", MolarFlowUnit.PoundMolePerHour, 4.2)]
        [InlineData("en-US", "4.2 lbmol/min", MolarFlowUnit.PoundMolePerMinute, 4.2)]
        [InlineData("en-US", "4.2 lbmol/s", MolarFlowUnit.PoundMolePerSecond, 4.2)]
        public void TryParse(string culture, string quantityString, MolarFlowUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(MolarFlow.TryParse(quantityString, out MolarFlow parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("kkmol/h", MolarFlowUnit.KilomolePerHour)]
        [InlineData("kmol/min", MolarFlowUnit.KilomolePerMinute)]
        [InlineData("kmol/s", MolarFlowUnit.KilomolePerSecond)]
        [InlineData("kmol/h", MolarFlowUnit.MolePerHour)]
        [InlineData("mol/min", MolarFlowUnit.MolePerMinute)]
        [InlineData("mol/s", MolarFlowUnit.MolePerSecond)]
        [InlineData("lbmol/h", MolarFlowUnit.PoundMolePerHour)]
        [InlineData("lbmol/min", MolarFlowUnit.PoundMolePerMinute)]
        [InlineData("lbmol/s", MolarFlowUnit.PoundMolePerSecond)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MolarFlowUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            MolarFlowUnit parsedUnit = MolarFlow.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kkmol/h", MolarFlowUnit.KilomolePerHour)]
        [InlineData("kmol/min", MolarFlowUnit.KilomolePerMinute)]
        [InlineData("kmol/s", MolarFlowUnit.KilomolePerSecond)]
        [InlineData("kmol/h", MolarFlowUnit.MolePerHour)]
        [InlineData("mol/min", MolarFlowUnit.MolePerMinute)]
        [InlineData("mol/s", MolarFlowUnit.MolePerSecond)]
        [InlineData("lbmol/h", MolarFlowUnit.PoundMolePerHour)]
        [InlineData("lbmol/min", MolarFlowUnit.PoundMolePerMinute)]
        [InlineData("lbmol/s", MolarFlowUnit.PoundMolePerSecond)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MolarFlowUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            MolarFlowUnit parsedUnit = MolarFlow.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kkmol/h", MolarFlowUnit.KilomolePerHour)]
        [InlineData("en-US", "kmol/min", MolarFlowUnit.KilomolePerMinute)]
        [InlineData("en-US", "kmol/s", MolarFlowUnit.KilomolePerSecond)]
        [InlineData("en-US", "kmol/h", MolarFlowUnit.MolePerHour)]
        [InlineData("en-US", "mol/min", MolarFlowUnit.MolePerMinute)]
        [InlineData("en-US", "mol/s", MolarFlowUnit.MolePerSecond)]
        [InlineData("en-US", "lbmol/h", MolarFlowUnit.PoundMolePerHour)]
        [InlineData("en-US", "lbmol/min", MolarFlowUnit.PoundMolePerMinute)]
        [InlineData("en-US", "lbmol/s", MolarFlowUnit.PoundMolePerSecond)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, MolarFlowUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            MolarFlowUnit parsedUnit = MolarFlow.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kkmol/h", MolarFlowUnit.KilomolePerHour)]
        [InlineData("en-US", "kmol/min", MolarFlowUnit.KilomolePerMinute)]
        [InlineData("en-US", "kmol/s", MolarFlowUnit.KilomolePerSecond)]
        [InlineData("en-US", "kmol/h", MolarFlowUnit.MolePerHour)]
        [InlineData("en-US", "mol/min", MolarFlowUnit.MolePerMinute)]
        [InlineData("en-US", "mol/s", MolarFlowUnit.MolePerSecond)]
        [InlineData("en-US", "lbmol/h", MolarFlowUnit.PoundMolePerHour)]
        [InlineData("en-US", "lbmol/min", MolarFlowUnit.PoundMolePerMinute)]
        [InlineData("en-US", "lbmol/s", MolarFlowUnit.PoundMolePerSecond)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, MolarFlowUnit expectedUnit)
        {
            MolarFlowUnit parsedUnit = MolarFlow.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kkmol/h", MolarFlowUnit.KilomolePerHour)]
        [InlineData("kmol/min", MolarFlowUnit.KilomolePerMinute)]
        [InlineData("kmol/s", MolarFlowUnit.KilomolePerSecond)]
        [InlineData("kmol/h", MolarFlowUnit.MolePerHour)]
        [InlineData("mol/min", MolarFlowUnit.MolePerMinute)]
        [InlineData("mol/s", MolarFlowUnit.MolePerSecond)]
        [InlineData("lbmol/h", MolarFlowUnit.PoundMolePerHour)]
        [InlineData("lbmol/min", MolarFlowUnit.PoundMolePerMinute)]
        [InlineData("lbmol/s", MolarFlowUnit.PoundMolePerSecond)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MolarFlowUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(MolarFlow.TryParseUnit(abbreviation, out MolarFlowUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kkmol/h", MolarFlowUnit.KilomolePerHour)]
        [InlineData("kmol/min", MolarFlowUnit.KilomolePerMinute)]
        [InlineData("kmol/s", MolarFlowUnit.KilomolePerSecond)]
        [InlineData("kmol/h", MolarFlowUnit.MolePerHour)]
        [InlineData("mol/min", MolarFlowUnit.MolePerMinute)]
        [InlineData("mol/s", MolarFlowUnit.MolePerSecond)]
        [InlineData("lbmol/h", MolarFlowUnit.PoundMolePerHour)]
        [InlineData("lbmol/min", MolarFlowUnit.PoundMolePerMinute)]
        [InlineData("lbmol/s", MolarFlowUnit.PoundMolePerSecond)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MolarFlowUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(MolarFlow.TryParseUnit(abbreviation, out MolarFlowUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kkmol/h", MolarFlowUnit.KilomolePerHour)]
        [InlineData("en-US", "kmol/min", MolarFlowUnit.KilomolePerMinute)]
        [InlineData("en-US", "kmol/s", MolarFlowUnit.KilomolePerSecond)]
        [InlineData("en-US", "kmol/h", MolarFlowUnit.MolePerHour)]
        [InlineData("en-US", "mol/min", MolarFlowUnit.MolePerMinute)]
        [InlineData("en-US", "mol/s", MolarFlowUnit.MolePerSecond)]
        [InlineData("en-US", "lbmol/h", MolarFlowUnit.PoundMolePerHour)]
        [InlineData("en-US", "lbmol/min", MolarFlowUnit.PoundMolePerMinute)]
        [InlineData("en-US", "lbmol/s", MolarFlowUnit.PoundMolePerSecond)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, MolarFlowUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(MolarFlow.TryParseUnit(abbreviation, out MolarFlowUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kkmol/h", MolarFlowUnit.KilomolePerHour)]
        [InlineData("en-US", "kmol/min", MolarFlowUnit.KilomolePerMinute)]
        [InlineData("en-US", "kmol/s", MolarFlowUnit.KilomolePerSecond)]
        [InlineData("en-US", "kmol/h", MolarFlowUnit.MolePerHour)]
        [InlineData("en-US", "mol/min", MolarFlowUnit.MolePerMinute)]
        [InlineData("en-US", "mol/s", MolarFlowUnit.MolePerSecond)]
        [InlineData("en-US", "lbmol/h", MolarFlowUnit.PoundMolePerHour)]
        [InlineData("en-US", "lbmol/min", MolarFlowUnit.PoundMolePerMinute)]
        [InlineData("en-US", "lbmol/s", MolarFlowUnit.PoundMolePerSecond)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, MolarFlowUnit expectedUnit)
        {
            Assert.True(MolarFlow.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out MolarFlowUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", MolarFlowUnit.KilomolePerHour, "kkmol/h")]
        [InlineData("en-US", MolarFlowUnit.KilomolePerMinute, "kmol/min")]
        [InlineData("en-US", MolarFlowUnit.KilomolePerSecond, "kmol/s")]
        [InlineData("en-US", MolarFlowUnit.MolePerHour, "kmol/h")]
        [InlineData("en-US", MolarFlowUnit.MolePerMinute, "mol/min")]
        [InlineData("en-US", MolarFlowUnit.MolePerSecond, "mol/s")]
        [InlineData("en-US", MolarFlowUnit.PoundMolePerHour, "lbmol/h")]
        [InlineData("en-US", MolarFlowUnit.PoundMolePerMinute, "lbmol/min")]
        [InlineData("en-US", MolarFlowUnit.PoundMolePerSecond, "lbmol/s")]
        public void GetAbbreviationForCulture(string culture, MolarFlowUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = MolarFlow.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(MolarFlow.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = MolarFlow.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MolarFlowUnit unit)
        {
            var inBaseUnits = MolarFlow.From(1.0, MolarFlow.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MolarFlowUnit unit)
        {
            var quantity = MolarFlow.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MolarFlowUnit unit)
        {
            Assert.All(MolarFlow.Units.Where(u => u != MolarFlow.BaseUnit), fromUnit =>
            {
                var quantity = MolarFlow.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MolarFlowUnit unit)
        {
            var quantity = default(MolarFlow);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(MolarFlowUnit unit)
        {
            var quantity = MolarFlow.From(3, MolarFlow.BaseUnit);
            MolarFlow expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<MolarFlowUnit> quantityToConvert = quantity;
                IQuantity<MolarFlowUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilomolesPerHour(molepersecond.KilomolesPerHour).MolesPerSecond, KilomolesPerHourTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilomolesPerMinute(molepersecond.KilomolesPerMinute).MolesPerSecond, KilomolesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromKilomolesPerSecond(molepersecond.KilomolesPerSecond).MolesPerSecond, KilomolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMolesPerHour(molepersecond.MolesPerHour).MolesPerSecond, MolesPerHourTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMolesPerMinute(molepersecond.MolesPerMinute).MolesPerSecond, MolesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromMolesPerSecond(molepersecond.MolesPerSecond).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromPoundMolesPerHour(molepersecond.PoundMolesPerHour).MolesPerSecond, PoundMolesPerHourTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromPoundMolesPerMinute(molepersecond.PoundMolesPerMinute).MolesPerSecond, PoundMolesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MolarFlow.FromPoundMolesPerSecond(molepersecond.PoundMolesPerSecond).MolesPerSecond, PoundMolesPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MolarFlow v = MolarFlow.FromMolesPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(2, (MolarFlow.FromMolesPerSecond(3)-v).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(2, (MolarFlow.FromMolesPerSecond(10)/5).MolesPerSecond, MolesPerSecondTolerance);
            AssertEx.EqualTolerance(2, MolarFlow.FromMolesPerSecond(10)/MolarFlow.FromMolesPerSecond(5), MolesPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MolarFlow oneMolePerSecond = MolarFlow.FromMolesPerSecond(1);
            MolarFlow twoMolesPerSecond = MolarFlow.FromMolesPerSecond(2);

            Assert.True(oneMolePerSecond < twoMolesPerSecond);
            Assert.True(oneMolePerSecond <= twoMolesPerSecond);
            Assert.True(twoMolesPerSecond > oneMolePerSecond);
            Assert.True(twoMolesPerSecond >= oneMolePerSecond);

            Assert.False(oneMolePerSecond > twoMolesPerSecond);
            Assert.False(oneMolePerSecond >= twoMolesPerSecond);
            Assert.False(twoMolesPerSecond < oneMolePerSecond);
            Assert.False(twoMolesPerSecond <= oneMolePerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.Equal(0, molepersecond.CompareTo(molepersecond));
            Assert.True(molepersecond.CompareTo(MolarFlow.Zero) > 0);
            Assert.True(MolarFlow.Zero.CompareTo(molepersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.Throws<ArgumentException>(() => molepersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => molepersecond.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MolarFlowUnit.MolePerSecond, 1, MolarFlowUnit.MolePerSecond, true)]  // Same value and unit.
        [InlineData(1, MolarFlowUnit.MolePerSecond, 2, MolarFlowUnit.MolePerSecond, false)] // Different value.
        [InlineData(2, MolarFlowUnit.MolePerSecond, 1, MolarFlowUnit.KilomolePerHour, false)] // Different value and unit.
        [InlineData(1, MolarFlowUnit.MolePerSecond, 1, MolarFlowUnit.KilomolePerHour, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MolarFlowUnit unitA, double valueB, MolarFlowUnit unitB, bool expectEqual)
        {
            var a = new MolarFlow(valueA, unitA);
            var b = new MolarFlow(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = MolarFlow.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MolarFlow.FromMolesPerSecond(1);
            Assert.True(v.Equals(MolarFlow.FromMolesPerSecond(1), MolesPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MolarFlow.Zero, MolesPerSecondTolerance, ComparisonType.Relative));
            Assert.True(MolarFlow.FromMolesPerSecond(100).Equals(MolarFlow.FromMolesPerSecond(120), 0.3, ComparisonType.Relative));
            Assert.False(MolarFlow.FromMolesPerSecond(100).Equals(MolarFlow.FromMolesPerSecond(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MolarFlow.FromMolesPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MolarFlow.FromMolesPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.False(molepersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MolarFlow molepersecond = MolarFlow.FromMolesPerSecond(1);
            Assert.False(molepersecond.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<MolarFlowUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MolarFlow.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 kkmol/h", new MolarFlow(1, MolarFlowUnit.KilomolePerHour).ToString());
            Assert.Equal("1 kmol/min", new MolarFlow(1, MolarFlowUnit.KilomolePerMinute).ToString());
            Assert.Equal("1 kmol/s", new MolarFlow(1, MolarFlowUnit.KilomolePerSecond).ToString());
            Assert.Equal("1 kmol/h", new MolarFlow(1, MolarFlowUnit.MolePerHour).ToString());
            Assert.Equal("1 mol/min", new MolarFlow(1, MolarFlowUnit.MolePerMinute).ToString());
            Assert.Equal("1 mol/s", new MolarFlow(1, MolarFlowUnit.MolePerSecond).ToString());
            Assert.Equal("1 lbmol/h", new MolarFlow(1, MolarFlowUnit.PoundMolePerHour).ToString());
            Assert.Equal("1 lbmol/min", new MolarFlow(1, MolarFlowUnit.PoundMolePerMinute).ToString());
            Assert.Equal("1 lbmol/s", new MolarFlow(1, MolarFlowUnit.PoundMolePerSecond).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kkmol/h", new MolarFlow(1, MolarFlowUnit.KilomolePerHour).ToString(swedishCulture));
            Assert.Equal("1 kmol/min", new MolarFlow(1, MolarFlowUnit.KilomolePerMinute).ToString(swedishCulture));
            Assert.Equal("1 kmol/s", new MolarFlow(1, MolarFlowUnit.KilomolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 kmol/h", new MolarFlow(1, MolarFlowUnit.MolePerHour).ToString(swedishCulture));
            Assert.Equal("1 mol/min", new MolarFlow(1, MolarFlowUnit.MolePerMinute).ToString(swedishCulture));
            Assert.Equal("1 mol/s", new MolarFlow(1, MolarFlowUnit.MolePerSecond).ToString(swedishCulture));
            Assert.Equal("1 lbmol/h", new MolarFlow(1, MolarFlowUnit.PoundMolePerHour).ToString(swedishCulture));
            Assert.Equal("1 lbmol/min", new MolarFlow(1, MolarFlowUnit.PoundMolePerMinute).ToString(swedishCulture));
            Assert.Equal("1 lbmol/s", new MolarFlow(1, MolarFlowUnit.PoundMolePerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s1"));
            Assert.Equal("0.12 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s2"));
            Assert.Equal("0.123 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s3"));
            Assert.Equal("0.1235 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s1", culture));
            Assert.Equal("0.12 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s2", culture));
            Assert.Equal("0.123 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 mol/s", new MolarFlow(0.123456, MolarFlowUnit.MolePerSecond).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MolarFlow.FromMolesPerSecond(1.0);
            Assert.Equal(new {MolarFlow.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MolarFlow.FromMolesPerSecond(value);
            Assert.Equal(MolarFlow.FromMolesPerSecond(-value), -quantity);
        }
    }
}
