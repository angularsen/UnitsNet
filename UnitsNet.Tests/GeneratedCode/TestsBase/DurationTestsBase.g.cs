//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Duration.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DurationTestsBase : QuantityTestsBase
    {
        protected abstract double DaysInOneSecond { get; }
        protected abstract double HoursInOneSecond { get; }
        protected abstract double JulianYearsInOneSecond { get; }
        protected abstract double MicrosecondsInOneSecond { get; }
        protected abstract double MillisecondsInOneSecond { get; }
        protected abstract double MinutesInOneSecond { get; }
        protected abstract double Months30InOneSecond { get; }
        protected abstract double NanosecondsInOneSecond { get; }
        protected abstract double PicosecondsInOneSecond { get; }
        protected abstract double SecondsInOneSecond { get; }
        protected abstract double SolsInOneSecond { get; }
        protected abstract double WeeksInOneSecond { get; }
        protected abstract double Years365InOneSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DaysTolerance { get { return 1e-5; } }
        protected virtual double HoursTolerance { get { return 1e-5; } }
        protected virtual double JulianYearsTolerance { get { return 1e-5; } }
        protected virtual double MicrosecondsTolerance { get { return 1e-5; } }
        protected virtual double MillisecondsTolerance { get { return 1e-5; } }
        protected virtual double MinutesTolerance { get { return 1e-5; } }
        protected virtual double Months30Tolerance { get { return 1e-5; } }
        protected virtual double NanosecondsTolerance { get { return 1e-5; } }
        protected virtual double PicosecondsTolerance { get { return 1e-5; } }
        protected virtual double SecondsTolerance { get { return 1e-5; } }
        protected virtual double SolsTolerance { get { return 1e-5; } }
        protected virtual double WeeksTolerance { get { return 1e-5; } }
        protected virtual double Years365Tolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(DurationUnit unit)
        {
            return unit switch
            {
                DurationUnit.Day => (DaysInOneSecond, DaysTolerance),
                DurationUnit.Hour => (HoursInOneSecond, HoursTolerance),
                DurationUnit.JulianYear => (JulianYearsInOneSecond, JulianYearsTolerance),
                DurationUnit.Microsecond => (MicrosecondsInOneSecond, MicrosecondsTolerance),
                DurationUnit.Millisecond => (MillisecondsInOneSecond, MillisecondsTolerance),
                DurationUnit.Minute => (MinutesInOneSecond, MinutesTolerance),
                DurationUnit.Month30 => (Months30InOneSecond, Months30Tolerance),
                DurationUnit.Nanosecond => (NanosecondsInOneSecond, NanosecondsTolerance),
                DurationUnit.Picosecond => (PicosecondsInOneSecond, PicosecondsTolerance),
                DurationUnit.Second => (SecondsInOneSecond, SecondsTolerance),
                DurationUnit.Sol => (SolsInOneSecond, SolsTolerance),
                DurationUnit.Week => (WeeksInOneSecond, WeeksTolerance),
                DurationUnit.Year365 => (Years365InOneSecond, Years365Tolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { DurationUnit.Day },
            new object[] { DurationUnit.Hour },
            new object[] { DurationUnit.JulianYear },
            new object[] { DurationUnit.Microsecond },
            new object[] { DurationUnit.Millisecond },
            new object[] { DurationUnit.Minute },
            new object[] { DurationUnit.Month30 },
            new object[] { DurationUnit.Nanosecond },
            new object[] { DurationUnit.Picosecond },
            new object[] { DurationUnit.Second },
            new object[] { DurationUnit.Sol },
            new object[] { DurationUnit.Week },
            new object[] { DurationUnit.Year365 },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Duration();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(DurationUnit.Second, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Duration(double.PositiveInfinity, DurationUnit.Second));
            var exception2 = Record.Exception(() => new Duration(double.NegativeInfinity, DurationUnit.Second));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Duration(double.NaN, DurationUnit.Second));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Duration(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Duration(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Duration(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Duration_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            DurationUnit[] unitsOrderedByName = EnumHelper.GetValues<DurationUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Duration(1, DurationUnit.Second);

            QuantityInfo<Duration, DurationUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Duration", quantityInfo.Name);
            Assert.Equal(Duration.Zero, quantityInfo.Zero);
            Assert.Equal(Duration.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Duration.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<DurationUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void SecondToDurationUnits()
        {
            Duration second = Duration.FromSeconds(1);
            AssertEx.EqualTolerance(DaysInOneSecond, second.Days, DaysTolerance);
            AssertEx.EqualTolerance(HoursInOneSecond, second.Hours, HoursTolerance);
            AssertEx.EqualTolerance(JulianYearsInOneSecond, second.JulianYears, JulianYearsTolerance);
            AssertEx.EqualTolerance(MicrosecondsInOneSecond, second.Microseconds, MicrosecondsTolerance);
            AssertEx.EqualTolerance(MillisecondsInOneSecond, second.Milliseconds, MillisecondsTolerance);
            AssertEx.EqualTolerance(MinutesInOneSecond, second.Minutes, MinutesTolerance);
            AssertEx.EqualTolerance(Months30InOneSecond, second.Months30, Months30Tolerance);
            AssertEx.EqualTolerance(NanosecondsInOneSecond, second.Nanoseconds, NanosecondsTolerance);
            AssertEx.EqualTolerance(PicosecondsInOneSecond, second.Picoseconds, PicosecondsTolerance);
            AssertEx.EqualTolerance(SecondsInOneSecond, second.Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(SolsInOneSecond, second.Sols, SolsTolerance);
            AssertEx.EqualTolerance(WeeksInOneSecond, second.Weeks, WeeksTolerance);
            AssertEx.EqualTolerance(Years365InOneSecond, second.Years365, Years365Tolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Duration.From(1, DurationUnit.Day);
            AssertEx.EqualTolerance(1, quantity00.Days, DaysTolerance);
            Assert.Equal(DurationUnit.Day, quantity00.Unit);

            var quantity01 = Duration.From(1, DurationUnit.Hour);
            AssertEx.EqualTolerance(1, quantity01.Hours, HoursTolerance);
            Assert.Equal(DurationUnit.Hour, quantity01.Unit);

            var quantity02 = Duration.From(1, DurationUnit.JulianYear);
            AssertEx.EqualTolerance(1, quantity02.JulianYears, JulianYearsTolerance);
            Assert.Equal(DurationUnit.JulianYear, quantity02.Unit);

            var quantity03 = Duration.From(1, DurationUnit.Microsecond);
            AssertEx.EqualTolerance(1, quantity03.Microseconds, MicrosecondsTolerance);
            Assert.Equal(DurationUnit.Microsecond, quantity03.Unit);

            var quantity04 = Duration.From(1, DurationUnit.Millisecond);
            AssertEx.EqualTolerance(1, quantity04.Milliseconds, MillisecondsTolerance);
            Assert.Equal(DurationUnit.Millisecond, quantity04.Unit);

            var quantity05 = Duration.From(1, DurationUnit.Minute);
            AssertEx.EqualTolerance(1, quantity05.Minutes, MinutesTolerance);
            Assert.Equal(DurationUnit.Minute, quantity05.Unit);

            var quantity06 = Duration.From(1, DurationUnit.Month30);
            AssertEx.EqualTolerance(1, quantity06.Months30, Months30Tolerance);
            Assert.Equal(DurationUnit.Month30, quantity06.Unit);

            var quantity07 = Duration.From(1, DurationUnit.Nanosecond);
            AssertEx.EqualTolerance(1, quantity07.Nanoseconds, NanosecondsTolerance);
            Assert.Equal(DurationUnit.Nanosecond, quantity07.Unit);

            var quantity08 = Duration.From(1, DurationUnit.Picosecond);
            AssertEx.EqualTolerance(1, quantity08.Picoseconds, PicosecondsTolerance);
            Assert.Equal(DurationUnit.Picosecond, quantity08.Unit);

            var quantity09 = Duration.From(1, DurationUnit.Second);
            AssertEx.EqualTolerance(1, quantity09.Seconds, SecondsTolerance);
            Assert.Equal(DurationUnit.Second, quantity09.Unit);

            var quantity10 = Duration.From(1, DurationUnit.Sol);
            AssertEx.EqualTolerance(1, quantity10.Sols, SolsTolerance);
            Assert.Equal(DurationUnit.Sol, quantity10.Unit);

            var quantity11 = Duration.From(1, DurationUnit.Week);
            AssertEx.EqualTolerance(1, quantity11.Weeks, WeeksTolerance);
            Assert.Equal(DurationUnit.Week, quantity11.Unit);

            var quantity12 = Duration.From(1, DurationUnit.Year365);
            AssertEx.EqualTolerance(1, quantity12.Years365, Years365Tolerance);
            Assert.Equal(DurationUnit.Year365, quantity12.Unit);

        }

        [Fact]
        public void FromSeconds_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Duration.FromSeconds(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Duration.FromSeconds(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromSeconds_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Duration.FromSeconds(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var second = Duration.FromSeconds(1);
            AssertEx.EqualTolerance(DaysInOneSecond, second.As(DurationUnit.Day), DaysTolerance);
            AssertEx.EqualTolerance(HoursInOneSecond, second.As(DurationUnit.Hour), HoursTolerance);
            AssertEx.EqualTolerance(JulianYearsInOneSecond, second.As(DurationUnit.JulianYear), JulianYearsTolerance);
            AssertEx.EqualTolerance(MicrosecondsInOneSecond, second.As(DurationUnit.Microsecond), MicrosecondsTolerance);
            AssertEx.EqualTolerance(MillisecondsInOneSecond, second.As(DurationUnit.Millisecond), MillisecondsTolerance);
            AssertEx.EqualTolerance(MinutesInOneSecond, second.As(DurationUnit.Minute), MinutesTolerance);
            AssertEx.EqualTolerance(Months30InOneSecond, second.As(DurationUnit.Month30), Months30Tolerance);
            AssertEx.EqualTolerance(NanosecondsInOneSecond, second.As(DurationUnit.Nanosecond), NanosecondsTolerance);
            AssertEx.EqualTolerance(PicosecondsInOneSecond, second.As(DurationUnit.Picosecond), PicosecondsTolerance);
            AssertEx.EqualTolerance(SecondsInOneSecond, second.As(DurationUnit.Second), SecondsTolerance);
            AssertEx.EqualTolerance(SolsInOneSecond, second.As(DurationUnit.Sol), SolsTolerance);
            AssertEx.EqualTolerance(WeeksInOneSecond, second.As(DurationUnit.Week), WeeksTolerance);
            AssertEx.EqualTolerance(Years365InOneSecond, second.As(DurationUnit.Year365), Years365Tolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Duration.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Duration(value: 1, unit: Duration.BaseUnit);
            var expectedValue = quantity.As(Duration.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Duration(value: 1, unit: Duration.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Duration(value: 1, unit: Duration.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Duration(value: 1, unit: Duration.BaseUnit);
            var expectedUnit = Duration.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Duration quantityToConvert = quantity;

                Duration convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<DurationUnit> quantityToConvert = quantity;

                IQuantity<DurationUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Duration(value: 1, unit: Duration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<DurationUnit> quantity = new Duration(value: 1, unit: Duration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Duration(value: 1, unit: Duration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Duration(value: 1, unit: Duration.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<DurationUnit> quantity = new Duration(value: 1, unit: Duration.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Duration(value: 1, unit: Duration.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Duration.Parse("1 d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 day", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 days", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 сут", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 д", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 hr", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 hrs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 hour", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 hours", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 час", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 jyr", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.JulianYears, JulianYearsTolerance);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 jyear", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.JulianYears, JulianYearsTolerance);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 jyears", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.JulianYears, JulianYearsTolerance);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µsec", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µsecs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µsecond", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 µseconds", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мксек", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мкс", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 ms", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 msec", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 msecs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 msecond", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 mseconds", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мсек", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мс", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 minute", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 minutes", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 мин", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 mo", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Months30, Months30Tolerance);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 month", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Months30, Months30Tolerance);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 months", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Months30, Months30Tolerance);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 месяц", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Months30, Months30Tolerance);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 ns", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 nsec", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 nsecs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 nsecond", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 nseconds", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 нсек", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 нс", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 ps", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 psec", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 psecs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 psecond", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 pseconds", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 псек", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 пс", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 sec", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 secs", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 second", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 seconds", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 сек", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 с", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 sol", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Sols, SolsTolerance);
                Assert.Equal(DurationUnit.Sol, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 wk", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Weeks, WeeksTolerance);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 week", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Weeks, WeeksTolerance);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 weeks", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Weeks, WeeksTolerance);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 нед", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Weeks, WeeksTolerance);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 yr", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Years365, Years365Tolerance);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 year", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Years365, Years365Tolerance);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 years", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Years365, Years365Tolerance);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Duration.Parse("1 год", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.Years365, Years365Tolerance);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Duration.TryParse("1 d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 day", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 days", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 сут", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 д", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Days, DaysTolerance);
                Assert.Equal(DurationUnit.Day, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 hr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 hrs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 hour", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 hours", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 час", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Hours, HoursTolerance);
                Assert.Equal(DurationUnit.Hour, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 jyr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.JulianYears, JulianYearsTolerance);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 jyear", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.JulianYears, JulianYearsTolerance);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 jyears", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.JulianYears, JulianYearsTolerance);
                Assert.Equal(DurationUnit.JulianYear, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µsec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µsecs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µsecond", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 µseconds", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мксек", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мкс", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microseconds, MicrosecondsTolerance);
                Assert.Equal(DurationUnit.Microsecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 ms", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 msec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 msecs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 msecond", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 mseconds", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мсек", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мс", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Milliseconds, MillisecondsTolerance);
                Assert.Equal(DurationUnit.Millisecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 minute", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 minutes", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 мин", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Minutes, MinutesTolerance);
                Assert.Equal(DurationUnit.Minute, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 mo", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Months30, Months30Tolerance);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 month", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Months30, Months30Tolerance);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 months", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Months30, Months30Tolerance);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 месяц", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Months30, Months30Tolerance);
                Assert.Equal(DurationUnit.Month30, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 ns", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 nsec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 nsecs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 nsecond", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 nseconds", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 нсек", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 нс", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanoseconds, NanosecondsTolerance);
                Assert.Equal(DurationUnit.Nanosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 ps", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 psec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 psecs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 psecond", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 pseconds", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 псек", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 пс", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Picoseconds, PicosecondsTolerance);
                Assert.Equal(DurationUnit.Picosecond, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 sec", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 secs", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 second", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 seconds", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 сек", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 с", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Seconds, SecondsTolerance);
                Assert.Equal(DurationUnit.Second, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 sol", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Sols, SolsTolerance);
                Assert.Equal(DurationUnit.Sol, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 wk", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Weeks, WeeksTolerance);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 week", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Weeks, WeeksTolerance);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 weeks", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Weeks, WeeksTolerance);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 нед", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Weeks, WeeksTolerance);
                Assert.Equal(DurationUnit.Week, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 yr", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Years365, Years365Tolerance);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 year", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Years365, Years365Tolerance);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 years", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Years365, Years365Tolerance);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            }

            {
                Assert.True(Duration.TryParse("1 год", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Years365, Years365Tolerance);
                Assert.Equal(DurationUnit.Year365, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("d", DurationUnit.Day)]
        [InlineData("day", DurationUnit.Day)]
        [InlineData("days", DurationUnit.Day)]
        [InlineData("h", DurationUnit.Hour)]
        [InlineData("hr", DurationUnit.Hour)]
        [InlineData("hrs", DurationUnit.Hour)]
        [InlineData("hour", DurationUnit.Hour)]
        [InlineData("hours", DurationUnit.Hour)]
        [InlineData("jyr", DurationUnit.JulianYear)]
        [InlineData("jyear", DurationUnit.JulianYear)]
        [InlineData("jyears", DurationUnit.JulianYear)]
        [InlineData("µs", DurationUnit.Microsecond)]
        [InlineData("µsec", DurationUnit.Microsecond)]
        [InlineData("µsecs", DurationUnit.Microsecond)]
        [InlineData("µsecond", DurationUnit.Microsecond)]
        [InlineData("µseconds", DurationUnit.Microsecond)]
        [InlineData("ms", DurationUnit.Millisecond)]
        [InlineData("msec", DurationUnit.Millisecond)]
        [InlineData("msecs", DurationUnit.Millisecond)]
        [InlineData("msecond", DurationUnit.Millisecond)]
        [InlineData("mseconds", DurationUnit.Millisecond)]
        [InlineData("m", DurationUnit.Minute)]
        [InlineData("min", DurationUnit.Minute)]
        [InlineData("minute", DurationUnit.Minute)]
        [InlineData("minutes", DurationUnit.Minute)]
        [InlineData("mo", DurationUnit.Month30)]
        [InlineData("month", DurationUnit.Month30)]
        [InlineData("months", DurationUnit.Month30)]
        [InlineData("ns", DurationUnit.Nanosecond)]
        [InlineData("nsec", DurationUnit.Nanosecond)]
        [InlineData("nsecs", DurationUnit.Nanosecond)]
        [InlineData("nsecond", DurationUnit.Nanosecond)]
        [InlineData("nseconds", DurationUnit.Nanosecond)]
        [InlineData("ps", DurationUnit.Picosecond)]
        [InlineData("psec", DurationUnit.Picosecond)]
        [InlineData("psecs", DurationUnit.Picosecond)]
        [InlineData("psecond", DurationUnit.Picosecond)]
        [InlineData("pseconds", DurationUnit.Picosecond)]
        [InlineData("s", DurationUnit.Second)]
        [InlineData("sec", DurationUnit.Second)]
        [InlineData("secs", DurationUnit.Second)]
        [InlineData("second", DurationUnit.Second)]
        [InlineData("seconds", DurationUnit.Second)]
        [InlineData("sol", DurationUnit.Sol)]
        [InlineData("wk", DurationUnit.Week)]
        [InlineData("week", DurationUnit.Week)]
        [InlineData("weeks", DurationUnit.Week)]
        [InlineData("yr", DurationUnit.Year365)]
        [InlineData("year", DurationUnit.Year365)]
        [InlineData("years", DurationUnit.Year365)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, DurationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            DurationUnit parsedUnit = Duration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("d", DurationUnit.Day)]
        [InlineData("day", DurationUnit.Day)]
        [InlineData("days", DurationUnit.Day)]
        [InlineData("h", DurationUnit.Hour)]
        [InlineData("hr", DurationUnit.Hour)]
        [InlineData("hrs", DurationUnit.Hour)]
        [InlineData("hour", DurationUnit.Hour)]
        [InlineData("hours", DurationUnit.Hour)]
        [InlineData("jyr", DurationUnit.JulianYear)]
        [InlineData("jyear", DurationUnit.JulianYear)]
        [InlineData("jyears", DurationUnit.JulianYear)]
        [InlineData("µs", DurationUnit.Microsecond)]
        [InlineData("µsec", DurationUnit.Microsecond)]
        [InlineData("µsecs", DurationUnit.Microsecond)]
        [InlineData("µsecond", DurationUnit.Microsecond)]
        [InlineData("µseconds", DurationUnit.Microsecond)]
        [InlineData("ms", DurationUnit.Millisecond)]
        [InlineData("msec", DurationUnit.Millisecond)]
        [InlineData("msecs", DurationUnit.Millisecond)]
        [InlineData("msecond", DurationUnit.Millisecond)]
        [InlineData("mseconds", DurationUnit.Millisecond)]
        [InlineData("m", DurationUnit.Minute)]
        [InlineData("min", DurationUnit.Minute)]
        [InlineData("minute", DurationUnit.Minute)]
        [InlineData("minutes", DurationUnit.Minute)]
        [InlineData("mo", DurationUnit.Month30)]
        [InlineData("month", DurationUnit.Month30)]
        [InlineData("months", DurationUnit.Month30)]
        [InlineData("ns", DurationUnit.Nanosecond)]
        [InlineData("nsec", DurationUnit.Nanosecond)]
        [InlineData("nsecs", DurationUnit.Nanosecond)]
        [InlineData("nsecond", DurationUnit.Nanosecond)]
        [InlineData("nseconds", DurationUnit.Nanosecond)]
        [InlineData("ps", DurationUnit.Picosecond)]
        [InlineData("psec", DurationUnit.Picosecond)]
        [InlineData("psecs", DurationUnit.Picosecond)]
        [InlineData("psecond", DurationUnit.Picosecond)]
        [InlineData("pseconds", DurationUnit.Picosecond)]
        [InlineData("s", DurationUnit.Second)]
        [InlineData("sec", DurationUnit.Second)]
        [InlineData("secs", DurationUnit.Second)]
        [InlineData("second", DurationUnit.Second)]
        [InlineData("seconds", DurationUnit.Second)]
        [InlineData("sol", DurationUnit.Sol)]
        [InlineData("wk", DurationUnit.Week)]
        [InlineData("week", DurationUnit.Week)]
        [InlineData("weeks", DurationUnit.Week)]
        [InlineData("yr", DurationUnit.Year365)]
        [InlineData("year", DurationUnit.Year365)]
        [InlineData("years", DurationUnit.Year365)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, DurationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            DurationUnit parsedUnit = Duration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "d", DurationUnit.Day)]
        [InlineData("en-US", "day", DurationUnit.Day)]
        [InlineData("en-US", "days", DurationUnit.Day)]
        [InlineData("en-US", "h", DurationUnit.Hour)]
        [InlineData("en-US", "hr", DurationUnit.Hour)]
        [InlineData("en-US", "hrs", DurationUnit.Hour)]
        [InlineData("en-US", "hour", DurationUnit.Hour)]
        [InlineData("en-US", "hours", DurationUnit.Hour)]
        [InlineData("en-US", "jyr", DurationUnit.JulianYear)]
        [InlineData("en-US", "jyear", DurationUnit.JulianYear)]
        [InlineData("en-US", "jyears", DurationUnit.JulianYear)]
        [InlineData("en-US", "µs", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsec", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsecs", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsecond", DurationUnit.Microsecond)]
        [InlineData("en-US", "µseconds", DurationUnit.Microsecond)]
        [InlineData("en-US", "ms", DurationUnit.Millisecond)]
        [InlineData("en-US", "msec", DurationUnit.Millisecond)]
        [InlineData("en-US", "msecs", DurationUnit.Millisecond)]
        [InlineData("en-US", "msecond", DurationUnit.Millisecond)]
        [InlineData("en-US", "mseconds", DurationUnit.Millisecond)]
        [InlineData("en-US", "m", DurationUnit.Minute)]
        [InlineData("en-US", "min", DurationUnit.Minute)]
        [InlineData("en-US", "minute", DurationUnit.Minute)]
        [InlineData("en-US", "minutes", DurationUnit.Minute)]
        [InlineData("en-US", "mo", DurationUnit.Month30)]
        [InlineData("en-US", "month", DurationUnit.Month30)]
        [InlineData("en-US", "months", DurationUnit.Month30)]
        [InlineData("en-US", "ns", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsec", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsecs", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsecond", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nseconds", DurationUnit.Nanosecond)]
        [InlineData("en-US", "ps", DurationUnit.Picosecond)]
        [InlineData("en-US", "psec", DurationUnit.Picosecond)]
        [InlineData("en-US", "psecs", DurationUnit.Picosecond)]
        [InlineData("en-US", "psecond", DurationUnit.Picosecond)]
        [InlineData("en-US", "pseconds", DurationUnit.Picosecond)]
        [InlineData("en-US", "s", DurationUnit.Second)]
        [InlineData("en-US", "sec", DurationUnit.Second)]
        [InlineData("en-US", "secs", DurationUnit.Second)]
        [InlineData("en-US", "second", DurationUnit.Second)]
        [InlineData("en-US", "seconds", DurationUnit.Second)]
        [InlineData("en-US", "sol", DurationUnit.Sol)]
        [InlineData("en-US", "wk", DurationUnit.Week)]
        [InlineData("en-US", "week", DurationUnit.Week)]
        [InlineData("en-US", "weeks", DurationUnit.Week)]
        [InlineData("en-US", "yr", DurationUnit.Year365)]
        [InlineData("en-US", "year", DurationUnit.Year365)]
        [InlineData("en-US", "years", DurationUnit.Year365)]
        [InlineData("ru-RU", "сут", DurationUnit.Day)]
        [InlineData("ru-RU", "д", DurationUnit.Day)]
        [InlineData("ru-RU", "ч", DurationUnit.Hour)]
        [InlineData("ru-RU", "час", DurationUnit.Hour)]
        [InlineData("ru-RU", "мксек", DurationUnit.Microsecond)]
        [InlineData("ru-RU", "мкс", DurationUnit.Microsecond)]
        [InlineData("ru-RU", "мсек", DurationUnit.Millisecond)]
        [InlineData("ru-RU", "мс", DurationUnit.Millisecond)]
        [InlineData("ru-RU", "мин", DurationUnit.Minute)]
        [InlineData("ru-RU", "месяц", DurationUnit.Month30)]
        [InlineData("ru-RU", "нсек", DurationUnit.Nanosecond)]
        [InlineData("ru-RU", "нс", DurationUnit.Nanosecond)]
        [InlineData("ru-RU", "псек", DurationUnit.Picosecond)]
        [InlineData("ru-RU", "пс", DurationUnit.Picosecond)]
        [InlineData("ru-RU", "сек", DurationUnit.Second)]
        [InlineData("ru-RU", "с", DurationUnit.Second)]
        [InlineData("ru-RU", "нед", DurationUnit.Week)]
        [InlineData("ru-RU", "год", DurationUnit.Year365)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, DurationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            DurationUnit parsedUnit = Duration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "d", DurationUnit.Day)]
        [InlineData("en-US", "day", DurationUnit.Day)]
        [InlineData("en-US", "days", DurationUnit.Day)]
        [InlineData("en-US", "h", DurationUnit.Hour)]
        [InlineData("en-US", "hr", DurationUnit.Hour)]
        [InlineData("en-US", "hrs", DurationUnit.Hour)]
        [InlineData("en-US", "hour", DurationUnit.Hour)]
        [InlineData("en-US", "hours", DurationUnit.Hour)]
        [InlineData("en-US", "jyr", DurationUnit.JulianYear)]
        [InlineData("en-US", "jyear", DurationUnit.JulianYear)]
        [InlineData("en-US", "jyears", DurationUnit.JulianYear)]
        [InlineData("en-US", "µs", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsec", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsecs", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsecond", DurationUnit.Microsecond)]
        [InlineData("en-US", "µseconds", DurationUnit.Microsecond)]
        [InlineData("en-US", "ms", DurationUnit.Millisecond)]
        [InlineData("en-US", "msec", DurationUnit.Millisecond)]
        [InlineData("en-US", "msecs", DurationUnit.Millisecond)]
        [InlineData("en-US", "msecond", DurationUnit.Millisecond)]
        [InlineData("en-US", "mseconds", DurationUnit.Millisecond)]
        [InlineData("en-US", "m", DurationUnit.Minute)]
        [InlineData("en-US", "min", DurationUnit.Minute)]
        [InlineData("en-US", "minute", DurationUnit.Minute)]
        [InlineData("en-US", "minutes", DurationUnit.Minute)]
        [InlineData("en-US", "mo", DurationUnit.Month30)]
        [InlineData("en-US", "month", DurationUnit.Month30)]
        [InlineData("en-US", "months", DurationUnit.Month30)]
        [InlineData("en-US", "ns", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsec", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsecs", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsecond", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nseconds", DurationUnit.Nanosecond)]
        [InlineData("en-US", "ps", DurationUnit.Picosecond)]
        [InlineData("en-US", "psec", DurationUnit.Picosecond)]
        [InlineData("en-US", "psecs", DurationUnit.Picosecond)]
        [InlineData("en-US", "psecond", DurationUnit.Picosecond)]
        [InlineData("en-US", "pseconds", DurationUnit.Picosecond)]
        [InlineData("en-US", "s", DurationUnit.Second)]
        [InlineData("en-US", "sec", DurationUnit.Second)]
        [InlineData("en-US", "secs", DurationUnit.Second)]
        [InlineData("en-US", "second", DurationUnit.Second)]
        [InlineData("en-US", "seconds", DurationUnit.Second)]
        [InlineData("en-US", "sol", DurationUnit.Sol)]
        [InlineData("en-US", "wk", DurationUnit.Week)]
        [InlineData("en-US", "week", DurationUnit.Week)]
        [InlineData("en-US", "weeks", DurationUnit.Week)]
        [InlineData("en-US", "yr", DurationUnit.Year365)]
        [InlineData("en-US", "year", DurationUnit.Year365)]
        [InlineData("en-US", "years", DurationUnit.Year365)]
        [InlineData("ru-RU", "сут", DurationUnit.Day)]
        [InlineData("ru-RU", "д", DurationUnit.Day)]
        [InlineData("ru-RU", "ч", DurationUnit.Hour)]
        [InlineData("ru-RU", "час", DurationUnit.Hour)]
        [InlineData("ru-RU", "мксек", DurationUnit.Microsecond)]
        [InlineData("ru-RU", "мкс", DurationUnit.Microsecond)]
        [InlineData("ru-RU", "мсек", DurationUnit.Millisecond)]
        [InlineData("ru-RU", "мс", DurationUnit.Millisecond)]
        [InlineData("ru-RU", "мин", DurationUnit.Minute)]
        [InlineData("ru-RU", "месяц", DurationUnit.Month30)]
        [InlineData("ru-RU", "нсек", DurationUnit.Nanosecond)]
        [InlineData("ru-RU", "нс", DurationUnit.Nanosecond)]
        [InlineData("ru-RU", "псек", DurationUnit.Picosecond)]
        [InlineData("ru-RU", "пс", DurationUnit.Picosecond)]
        [InlineData("ru-RU", "сек", DurationUnit.Second)]
        [InlineData("ru-RU", "с", DurationUnit.Second)]
        [InlineData("ru-RU", "нед", DurationUnit.Week)]
        [InlineData("ru-RU", "год", DurationUnit.Year365)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, DurationUnit expectedUnit)
        {
            DurationUnit parsedUnit = Duration.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("d", DurationUnit.Day)]
        [InlineData("day", DurationUnit.Day)]
        [InlineData("days", DurationUnit.Day)]
        [InlineData("h", DurationUnit.Hour)]
        [InlineData("hr", DurationUnit.Hour)]
        [InlineData("hrs", DurationUnit.Hour)]
        [InlineData("hour", DurationUnit.Hour)]
        [InlineData("hours", DurationUnit.Hour)]
        [InlineData("jyr", DurationUnit.JulianYear)]
        [InlineData("jyear", DurationUnit.JulianYear)]
        [InlineData("jyears", DurationUnit.JulianYear)]
        [InlineData("µs", DurationUnit.Microsecond)]
        [InlineData("µsec", DurationUnit.Microsecond)]
        [InlineData("µsecs", DurationUnit.Microsecond)]
        [InlineData("µsecond", DurationUnit.Microsecond)]
        [InlineData("µseconds", DurationUnit.Microsecond)]
        [InlineData("ms", DurationUnit.Millisecond)]
        [InlineData("msec", DurationUnit.Millisecond)]
        [InlineData("msecs", DurationUnit.Millisecond)]
        [InlineData("msecond", DurationUnit.Millisecond)]
        [InlineData("mseconds", DurationUnit.Millisecond)]
        [InlineData("m", DurationUnit.Minute)]
        [InlineData("min", DurationUnit.Minute)]
        [InlineData("minute", DurationUnit.Minute)]
        [InlineData("minutes", DurationUnit.Minute)]
        [InlineData("mo", DurationUnit.Month30)]
        [InlineData("month", DurationUnit.Month30)]
        [InlineData("months", DurationUnit.Month30)]
        [InlineData("ns", DurationUnit.Nanosecond)]
        [InlineData("nsec", DurationUnit.Nanosecond)]
        [InlineData("nsecs", DurationUnit.Nanosecond)]
        [InlineData("nsecond", DurationUnit.Nanosecond)]
        [InlineData("nseconds", DurationUnit.Nanosecond)]
        [InlineData("ps", DurationUnit.Picosecond)]
        [InlineData("psec", DurationUnit.Picosecond)]
        [InlineData("psecs", DurationUnit.Picosecond)]
        [InlineData("psecond", DurationUnit.Picosecond)]
        [InlineData("pseconds", DurationUnit.Picosecond)]
        [InlineData("s", DurationUnit.Second)]
        [InlineData("sec", DurationUnit.Second)]
        [InlineData("secs", DurationUnit.Second)]
        [InlineData("second", DurationUnit.Second)]
        [InlineData("seconds", DurationUnit.Second)]
        [InlineData("sol", DurationUnit.Sol)]
        [InlineData("wk", DurationUnit.Week)]
        [InlineData("week", DurationUnit.Week)]
        [InlineData("weeks", DurationUnit.Week)]
        [InlineData("yr", DurationUnit.Year365)]
        [InlineData("year", DurationUnit.Year365)]
        [InlineData("years", DurationUnit.Year365)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, DurationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Duration.TryParseUnit(abbreviation, out DurationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("d", DurationUnit.Day)]
        [InlineData("day", DurationUnit.Day)]
        [InlineData("days", DurationUnit.Day)]
        [InlineData("h", DurationUnit.Hour)]
        [InlineData("hr", DurationUnit.Hour)]
        [InlineData("hrs", DurationUnit.Hour)]
        [InlineData("hour", DurationUnit.Hour)]
        [InlineData("hours", DurationUnit.Hour)]
        [InlineData("jyr", DurationUnit.JulianYear)]
        [InlineData("jyear", DurationUnit.JulianYear)]
        [InlineData("jyears", DurationUnit.JulianYear)]
        [InlineData("µs", DurationUnit.Microsecond)]
        [InlineData("µsec", DurationUnit.Microsecond)]
        [InlineData("µsecs", DurationUnit.Microsecond)]
        [InlineData("µsecond", DurationUnit.Microsecond)]
        [InlineData("µseconds", DurationUnit.Microsecond)]
        [InlineData("ms", DurationUnit.Millisecond)]
        [InlineData("msec", DurationUnit.Millisecond)]
        [InlineData("msecs", DurationUnit.Millisecond)]
        [InlineData("msecond", DurationUnit.Millisecond)]
        [InlineData("mseconds", DurationUnit.Millisecond)]
        [InlineData("m", DurationUnit.Minute)]
        [InlineData("min", DurationUnit.Minute)]
        [InlineData("minute", DurationUnit.Minute)]
        [InlineData("minutes", DurationUnit.Minute)]
        [InlineData("mo", DurationUnit.Month30)]
        [InlineData("month", DurationUnit.Month30)]
        [InlineData("months", DurationUnit.Month30)]
        [InlineData("ns", DurationUnit.Nanosecond)]
        [InlineData("nsec", DurationUnit.Nanosecond)]
        [InlineData("nsecs", DurationUnit.Nanosecond)]
        [InlineData("nsecond", DurationUnit.Nanosecond)]
        [InlineData("nseconds", DurationUnit.Nanosecond)]
        [InlineData("ps", DurationUnit.Picosecond)]
        [InlineData("psec", DurationUnit.Picosecond)]
        [InlineData("psecs", DurationUnit.Picosecond)]
        [InlineData("psecond", DurationUnit.Picosecond)]
        [InlineData("pseconds", DurationUnit.Picosecond)]
        [InlineData("s", DurationUnit.Second)]
        [InlineData("sec", DurationUnit.Second)]
        [InlineData("secs", DurationUnit.Second)]
        [InlineData("second", DurationUnit.Second)]
        [InlineData("seconds", DurationUnit.Second)]
        [InlineData("sol", DurationUnit.Sol)]
        [InlineData("wk", DurationUnit.Week)]
        [InlineData("week", DurationUnit.Week)]
        [InlineData("weeks", DurationUnit.Week)]
        [InlineData("yr", DurationUnit.Year365)]
        [InlineData("year", DurationUnit.Year365)]
        [InlineData("years", DurationUnit.Year365)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, DurationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Duration.TryParseUnit(abbreviation, out DurationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "d", DurationUnit.Day)]
        [InlineData("en-US", "day", DurationUnit.Day)]
        [InlineData("en-US", "days", DurationUnit.Day)]
        [InlineData("en-US", "h", DurationUnit.Hour)]
        [InlineData("en-US", "hr", DurationUnit.Hour)]
        [InlineData("en-US", "hrs", DurationUnit.Hour)]
        [InlineData("en-US", "hour", DurationUnit.Hour)]
        [InlineData("en-US", "hours", DurationUnit.Hour)]
        [InlineData("en-US", "jyr", DurationUnit.JulianYear)]
        [InlineData("en-US", "jyear", DurationUnit.JulianYear)]
        [InlineData("en-US", "jyears", DurationUnit.JulianYear)]
        [InlineData("en-US", "µs", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsec", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsecs", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsecond", DurationUnit.Microsecond)]
        [InlineData("en-US", "µseconds", DurationUnit.Microsecond)]
        [InlineData("en-US", "ms", DurationUnit.Millisecond)]
        [InlineData("en-US", "msec", DurationUnit.Millisecond)]
        [InlineData("en-US", "msecs", DurationUnit.Millisecond)]
        [InlineData("en-US", "msecond", DurationUnit.Millisecond)]
        [InlineData("en-US", "mseconds", DurationUnit.Millisecond)]
        [InlineData("en-US", "m", DurationUnit.Minute)]
        [InlineData("en-US", "min", DurationUnit.Minute)]
        [InlineData("en-US", "minute", DurationUnit.Minute)]
        [InlineData("en-US", "minutes", DurationUnit.Minute)]
        [InlineData("en-US", "mo", DurationUnit.Month30)]
        [InlineData("en-US", "month", DurationUnit.Month30)]
        [InlineData("en-US", "months", DurationUnit.Month30)]
        [InlineData("en-US", "ns", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsec", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsecs", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsecond", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nseconds", DurationUnit.Nanosecond)]
        [InlineData("en-US", "ps", DurationUnit.Picosecond)]
        [InlineData("en-US", "psec", DurationUnit.Picosecond)]
        [InlineData("en-US", "psecs", DurationUnit.Picosecond)]
        [InlineData("en-US", "psecond", DurationUnit.Picosecond)]
        [InlineData("en-US", "pseconds", DurationUnit.Picosecond)]
        [InlineData("en-US", "s", DurationUnit.Second)]
        [InlineData("en-US", "sec", DurationUnit.Second)]
        [InlineData("en-US", "secs", DurationUnit.Second)]
        [InlineData("en-US", "second", DurationUnit.Second)]
        [InlineData("en-US", "seconds", DurationUnit.Second)]
        [InlineData("en-US", "sol", DurationUnit.Sol)]
        [InlineData("en-US", "wk", DurationUnit.Week)]
        [InlineData("en-US", "week", DurationUnit.Week)]
        [InlineData("en-US", "weeks", DurationUnit.Week)]
        [InlineData("en-US", "yr", DurationUnit.Year365)]
        [InlineData("en-US", "year", DurationUnit.Year365)]
        [InlineData("en-US", "years", DurationUnit.Year365)]
        [InlineData("ru-RU", "сут", DurationUnit.Day)]
        [InlineData("ru-RU", "д", DurationUnit.Day)]
        [InlineData("ru-RU", "ч", DurationUnit.Hour)]
        [InlineData("ru-RU", "час", DurationUnit.Hour)]
        [InlineData("ru-RU", "мксек", DurationUnit.Microsecond)]
        [InlineData("ru-RU", "мкс", DurationUnit.Microsecond)]
        [InlineData("ru-RU", "мсек", DurationUnit.Millisecond)]
        [InlineData("ru-RU", "мс", DurationUnit.Millisecond)]
        [InlineData("ru-RU", "мин", DurationUnit.Minute)]
        [InlineData("ru-RU", "месяц", DurationUnit.Month30)]
        [InlineData("ru-RU", "нсек", DurationUnit.Nanosecond)]
        [InlineData("ru-RU", "нс", DurationUnit.Nanosecond)]
        [InlineData("ru-RU", "псек", DurationUnit.Picosecond)]
        [InlineData("ru-RU", "пс", DurationUnit.Picosecond)]
        [InlineData("ru-RU", "сек", DurationUnit.Second)]
        [InlineData("ru-RU", "с", DurationUnit.Second)]
        [InlineData("ru-RU", "нед", DurationUnit.Week)]
        [InlineData("ru-RU", "год", DurationUnit.Year365)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, DurationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Duration.TryParseUnit(abbreviation, out DurationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "d", DurationUnit.Day)]
        [InlineData("en-US", "day", DurationUnit.Day)]
        [InlineData("en-US", "days", DurationUnit.Day)]
        [InlineData("en-US", "h", DurationUnit.Hour)]
        [InlineData("en-US", "hr", DurationUnit.Hour)]
        [InlineData("en-US", "hrs", DurationUnit.Hour)]
        [InlineData("en-US", "hour", DurationUnit.Hour)]
        [InlineData("en-US", "hours", DurationUnit.Hour)]
        [InlineData("en-US", "jyr", DurationUnit.JulianYear)]
        [InlineData("en-US", "jyear", DurationUnit.JulianYear)]
        [InlineData("en-US", "jyears", DurationUnit.JulianYear)]
        [InlineData("en-US", "µs", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsec", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsecs", DurationUnit.Microsecond)]
        [InlineData("en-US", "µsecond", DurationUnit.Microsecond)]
        [InlineData("en-US", "µseconds", DurationUnit.Microsecond)]
        [InlineData("en-US", "ms", DurationUnit.Millisecond)]
        [InlineData("en-US", "msec", DurationUnit.Millisecond)]
        [InlineData("en-US", "msecs", DurationUnit.Millisecond)]
        [InlineData("en-US", "msecond", DurationUnit.Millisecond)]
        [InlineData("en-US", "mseconds", DurationUnit.Millisecond)]
        [InlineData("en-US", "m", DurationUnit.Minute)]
        [InlineData("en-US", "min", DurationUnit.Minute)]
        [InlineData("en-US", "minute", DurationUnit.Minute)]
        [InlineData("en-US", "minutes", DurationUnit.Minute)]
        [InlineData("en-US", "mo", DurationUnit.Month30)]
        [InlineData("en-US", "month", DurationUnit.Month30)]
        [InlineData("en-US", "months", DurationUnit.Month30)]
        [InlineData("en-US", "ns", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsec", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsecs", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nsecond", DurationUnit.Nanosecond)]
        [InlineData("en-US", "nseconds", DurationUnit.Nanosecond)]
        [InlineData("en-US", "ps", DurationUnit.Picosecond)]
        [InlineData("en-US", "psec", DurationUnit.Picosecond)]
        [InlineData("en-US", "psecs", DurationUnit.Picosecond)]
        [InlineData("en-US", "psecond", DurationUnit.Picosecond)]
        [InlineData("en-US", "pseconds", DurationUnit.Picosecond)]
        [InlineData("en-US", "s", DurationUnit.Second)]
        [InlineData("en-US", "sec", DurationUnit.Second)]
        [InlineData("en-US", "secs", DurationUnit.Second)]
        [InlineData("en-US", "second", DurationUnit.Second)]
        [InlineData("en-US", "seconds", DurationUnit.Second)]
        [InlineData("en-US", "sol", DurationUnit.Sol)]
        [InlineData("en-US", "wk", DurationUnit.Week)]
        [InlineData("en-US", "week", DurationUnit.Week)]
        [InlineData("en-US", "weeks", DurationUnit.Week)]
        [InlineData("en-US", "yr", DurationUnit.Year365)]
        [InlineData("en-US", "year", DurationUnit.Year365)]
        [InlineData("en-US", "years", DurationUnit.Year365)]
        [InlineData("ru-RU", "сут", DurationUnit.Day)]
        [InlineData("ru-RU", "д", DurationUnit.Day)]
        [InlineData("ru-RU", "ч", DurationUnit.Hour)]
        [InlineData("ru-RU", "час", DurationUnit.Hour)]
        [InlineData("ru-RU", "мксек", DurationUnit.Microsecond)]
        [InlineData("ru-RU", "мкс", DurationUnit.Microsecond)]
        [InlineData("ru-RU", "мсек", DurationUnit.Millisecond)]
        [InlineData("ru-RU", "мс", DurationUnit.Millisecond)]
        [InlineData("ru-RU", "мин", DurationUnit.Minute)]
        [InlineData("ru-RU", "месяц", DurationUnit.Month30)]
        [InlineData("ru-RU", "нсек", DurationUnit.Nanosecond)]
        [InlineData("ru-RU", "нс", DurationUnit.Nanosecond)]
        [InlineData("ru-RU", "псек", DurationUnit.Picosecond)]
        [InlineData("ru-RU", "пс", DurationUnit.Picosecond)]
        [InlineData("ru-RU", "сек", DurationUnit.Second)]
        [InlineData("ru-RU", "с", DurationUnit.Second)]
        [InlineData("ru-RU", "нед", DurationUnit.Week)]
        [InlineData("ru-RU", "год", DurationUnit.Year365)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, DurationUnit expectedUnit)
        {
            Assert.True(Duration.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out DurationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(DurationUnit unit)
        {
            var inBaseUnits = Duration.From(1.0, Duration.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(DurationUnit unit)
        {
            var quantity = Duration.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(DurationUnit unit)
        {
            Assert.All(Duration.Units.Where(u => u != Duration.BaseUnit), fromUnit =>
            {
                var quantity = Duration.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(DurationUnit unit)
        {
            var quantity = default(Duration);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(DurationUnit unit)
        {
            var quantity = Duration.From(3, Duration.BaseUnit);
            Duration expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<DurationUnit> quantityToConvert = quantity;
                IQuantity<DurationUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Duration second = Duration.FromSeconds(1);
            AssertEx.EqualTolerance(1, Duration.FromDays(second.Days).Seconds, DaysTolerance);
            AssertEx.EqualTolerance(1, Duration.FromHours(second.Hours).Seconds, HoursTolerance);
            AssertEx.EqualTolerance(1, Duration.FromJulianYears(second.JulianYears).Seconds, JulianYearsTolerance);
            AssertEx.EqualTolerance(1, Duration.FromMicroseconds(second.Microseconds).Seconds, MicrosecondsTolerance);
            AssertEx.EqualTolerance(1, Duration.FromMilliseconds(second.Milliseconds).Seconds, MillisecondsTolerance);
            AssertEx.EqualTolerance(1, Duration.FromMinutes(second.Minutes).Seconds, MinutesTolerance);
            AssertEx.EqualTolerance(1, Duration.FromMonths30(second.Months30).Seconds, Months30Tolerance);
            AssertEx.EqualTolerance(1, Duration.FromNanoseconds(second.Nanoseconds).Seconds, NanosecondsTolerance);
            AssertEx.EqualTolerance(1, Duration.FromPicoseconds(second.Picoseconds).Seconds, PicosecondsTolerance);
            AssertEx.EqualTolerance(1, Duration.FromSeconds(second.Seconds).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(1, Duration.FromSols(second.Sols).Seconds, SolsTolerance);
            AssertEx.EqualTolerance(1, Duration.FromWeeks(second.Weeks).Seconds, WeeksTolerance);
            AssertEx.EqualTolerance(1, Duration.FromYears365(second.Years365).Seconds, Years365Tolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Duration v = Duration.FromSeconds(1);
            AssertEx.EqualTolerance(-1, -v.Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(2, (Duration.FromSeconds(3)-v).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(2, (Duration.FromSeconds(10)/5).Seconds, SecondsTolerance);
            AssertEx.EqualTolerance(2, Duration.FromSeconds(10)/Duration.FromSeconds(5), SecondsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Duration oneSecond = Duration.FromSeconds(1);
            Duration twoSeconds = Duration.FromSeconds(2);

            Assert.True(oneSecond < twoSeconds);
            Assert.True(oneSecond <= twoSeconds);
            Assert.True(twoSeconds > oneSecond);
            Assert.True(twoSeconds >= oneSecond);

            Assert.False(oneSecond > twoSeconds);
            Assert.False(oneSecond >= twoSeconds);
            Assert.False(twoSeconds < oneSecond);
            Assert.False(twoSeconds <= oneSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.Equal(0, second.CompareTo(second));
            Assert.True(second.CompareTo(Duration.Zero) > 0);
            Assert.True(Duration.Zero.CompareTo(second) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.Throws<ArgumentException>(() => second.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.Throws<ArgumentNullException>(() => second.CompareTo(null));
        }

        [Theory]
        [InlineData(1, DurationUnit.Second, 1, DurationUnit.Second, true)]  // Same value and unit.
        [InlineData(1, DurationUnit.Second, 2, DurationUnit.Second, false)] // Different value.
        [InlineData(2, DurationUnit.Second, 1, DurationUnit.Day, false)] // Different value and unit.
        [InlineData(1, DurationUnit.Second, 1, DurationUnit.Day, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, DurationUnit unitA, double valueB, DurationUnit unitB, bool expectEqual)
        {
            var a = new Duration(valueA, unitA);
            var b = new Duration(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Duration.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Duration.FromSeconds(1);
            Assert.True(v.Equals(Duration.FromSeconds(1), SecondsTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Duration.Zero, SecondsTolerance, ComparisonType.Relative));
            Assert.True(Duration.FromSeconds(100).Equals(Duration.FromSeconds(120), 0.3, ComparisonType.Relative));
            Assert.False(Duration.FromSeconds(100).Equals(Duration.FromSeconds(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Duration.FromSeconds(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Duration.FromSeconds(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.False(second.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Duration second = Duration.FromSeconds(1);
            Assert.False(second.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<DurationUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Duration.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 d", new Duration(1, DurationUnit.Day).ToString());
            Assert.Equal("1 h", new Duration(1, DurationUnit.Hour).ToString());
            Assert.Equal("1 jyr", new Duration(1, DurationUnit.JulianYear).ToString());
            Assert.Equal("1 µs", new Duration(1, DurationUnit.Microsecond).ToString());
            Assert.Equal("1 ms", new Duration(1, DurationUnit.Millisecond).ToString());
            Assert.Equal("1 m", new Duration(1, DurationUnit.Minute).ToString());
            Assert.Equal("1 mo", new Duration(1, DurationUnit.Month30).ToString());
            Assert.Equal("1 ns", new Duration(1, DurationUnit.Nanosecond).ToString());
            Assert.Equal("1 ps", new Duration(1, DurationUnit.Picosecond).ToString());
            Assert.Equal("1 s", new Duration(1, DurationUnit.Second).ToString());
            Assert.Equal("1 sol", new Duration(1, DurationUnit.Sol).ToString());
            Assert.Equal("1 wk", new Duration(1, DurationUnit.Week).ToString());
            Assert.Equal("1 yr", new Duration(1, DurationUnit.Year365).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 d", new Duration(1, DurationUnit.Day).ToString(swedishCulture));
            Assert.Equal("1 h", new Duration(1, DurationUnit.Hour).ToString(swedishCulture));
            Assert.Equal("1 jyr", new Duration(1, DurationUnit.JulianYear).ToString(swedishCulture));
            Assert.Equal("1 µs", new Duration(1, DurationUnit.Microsecond).ToString(swedishCulture));
            Assert.Equal("1 ms", new Duration(1, DurationUnit.Millisecond).ToString(swedishCulture));
            Assert.Equal("1 m", new Duration(1, DurationUnit.Minute).ToString(swedishCulture));
            Assert.Equal("1 mo", new Duration(1, DurationUnit.Month30).ToString(swedishCulture));
            Assert.Equal("1 ns", new Duration(1, DurationUnit.Nanosecond).ToString(swedishCulture));
            Assert.Equal("1 ps", new Duration(1, DurationUnit.Picosecond).ToString(swedishCulture));
            Assert.Equal("1 s", new Duration(1, DurationUnit.Second).ToString(swedishCulture));
            Assert.Equal("1 sol", new Duration(1, DurationUnit.Sol).ToString(swedishCulture));
            Assert.Equal("1 wk", new Duration(1, DurationUnit.Week).ToString(swedishCulture));
            Assert.Equal("1 yr", new Duration(1, DurationUnit.Year365).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 s", new Duration(0.123456, DurationUnit.Second).ToString("s1"));
            Assert.Equal("0.12 s", new Duration(0.123456, DurationUnit.Second).ToString("s2"));
            Assert.Equal("0.123 s", new Duration(0.123456, DurationUnit.Second).ToString("s3"));
            Assert.Equal("0.1235 s", new Duration(0.123456, DurationUnit.Second).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 s", new Duration(0.123456, DurationUnit.Second).ToString("s1", culture));
            Assert.Equal("0.12 s", new Duration(0.123456, DurationUnit.Second).ToString("s2", culture));
            Assert.Equal("0.123 s", new Duration(0.123456, DurationUnit.Second).ToString("s3", culture));
            Assert.Equal("0.1235 s", new Duration(0.123456, DurationUnit.Second).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Duration.FromSeconds(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Duration.FromSeconds(1.0);
            Assert.Equal(new {Duration.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Duration.FromSeconds(value);
            Assert.Equal(Duration.FromSeconds(-value), -quantity);
        }
    }
}
