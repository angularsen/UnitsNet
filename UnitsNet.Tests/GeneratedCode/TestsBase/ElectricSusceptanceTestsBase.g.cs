//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricSusceptance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricSusceptanceTestsBase : QuantityTestsBase
    {
        protected abstract double GigamhosInOneSiemens { get; }
        protected abstract double GigasiemensInOneSiemens { get; }
        protected abstract double KilomhosInOneSiemens { get; }
        protected abstract double KilosiemensInOneSiemens { get; }
        protected abstract double MegamhosInOneSiemens { get; }
        protected abstract double MegasiemensInOneSiemens { get; }
        protected abstract double MhosInOneSiemens { get; }
        protected abstract double MicromhosInOneSiemens { get; }
        protected abstract double MicrosiemensInOneSiemens { get; }
        protected abstract double MillimhosInOneSiemens { get; }
        protected abstract double MillisiemensInOneSiemens { get; }
        protected abstract double NanomhosInOneSiemens { get; }
        protected abstract double NanosiemensInOneSiemens { get; }
        protected abstract double SiemensInOneSiemens { get; }
        protected abstract double TeramhosInOneSiemens { get; }
        protected abstract double TerasiemensInOneSiemens { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GigamhosTolerance { get { return 1e-5; } }
        protected virtual double GigasiemensTolerance { get { return 1e-5; } }
        protected virtual double KilomhosTolerance { get { return 1e-5; } }
        protected virtual double KilosiemensTolerance { get { return 1e-5; } }
        protected virtual double MegamhosTolerance { get { return 1e-5; } }
        protected virtual double MegasiemensTolerance { get { return 1e-5; } }
        protected virtual double MhosTolerance { get { return 1e-5; } }
        protected virtual double MicromhosTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensTolerance { get { return 1e-5; } }
        protected virtual double MillimhosTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensTolerance { get { return 1e-5; } }
        protected virtual double NanomhosTolerance { get { return 1e-5; } }
        protected virtual double NanosiemensTolerance { get { return 1e-5; } }
        protected virtual double SiemensTolerance { get { return 1e-5; } }
        protected virtual double TeramhosTolerance { get { return 1e-5; } }
        protected virtual double TerasiemensTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricSusceptanceUnit unit)
        {
            return unit switch
            {
                ElectricSusceptanceUnit.Gigamho => (GigamhosInOneSiemens, GigamhosTolerance),
                ElectricSusceptanceUnit.Gigasiemens => (GigasiemensInOneSiemens, GigasiemensTolerance),
                ElectricSusceptanceUnit.Kilomho => (KilomhosInOneSiemens, KilomhosTolerance),
                ElectricSusceptanceUnit.Kilosiemens => (KilosiemensInOneSiemens, KilosiemensTolerance),
                ElectricSusceptanceUnit.Megamho => (MegamhosInOneSiemens, MegamhosTolerance),
                ElectricSusceptanceUnit.Megasiemens => (MegasiemensInOneSiemens, MegasiemensTolerance),
                ElectricSusceptanceUnit.Mho => (MhosInOneSiemens, MhosTolerance),
                ElectricSusceptanceUnit.Micromho => (MicromhosInOneSiemens, MicromhosTolerance),
                ElectricSusceptanceUnit.Microsiemens => (MicrosiemensInOneSiemens, MicrosiemensTolerance),
                ElectricSusceptanceUnit.Millimho => (MillimhosInOneSiemens, MillimhosTolerance),
                ElectricSusceptanceUnit.Millisiemens => (MillisiemensInOneSiemens, MillisiemensTolerance),
                ElectricSusceptanceUnit.Nanomho => (NanomhosInOneSiemens, NanomhosTolerance),
                ElectricSusceptanceUnit.Nanosiemens => (NanosiemensInOneSiemens, NanosiemensTolerance),
                ElectricSusceptanceUnit.Siemens => (SiemensInOneSiemens, SiemensTolerance),
                ElectricSusceptanceUnit.Teramho => (TeramhosInOneSiemens, TeramhosTolerance),
                ElectricSusceptanceUnit.Terasiemens => (TerasiemensInOneSiemens, TerasiemensTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricSusceptanceUnit.Gigamho },
            new object[] { ElectricSusceptanceUnit.Gigasiemens },
            new object[] { ElectricSusceptanceUnit.Kilomho },
            new object[] { ElectricSusceptanceUnit.Kilosiemens },
            new object[] { ElectricSusceptanceUnit.Megamho },
            new object[] { ElectricSusceptanceUnit.Megasiemens },
            new object[] { ElectricSusceptanceUnit.Mho },
            new object[] { ElectricSusceptanceUnit.Micromho },
            new object[] { ElectricSusceptanceUnit.Microsiemens },
            new object[] { ElectricSusceptanceUnit.Millimho },
            new object[] { ElectricSusceptanceUnit.Millisiemens },
            new object[] { ElectricSusceptanceUnit.Nanomho },
            new object[] { ElectricSusceptanceUnit.Nanosiemens },
            new object[] { ElectricSusceptanceUnit.Siemens },
            new object[] { ElectricSusceptanceUnit.Teramho },
            new object[] { ElectricSusceptanceUnit.Terasiemens },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricSusceptance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricSusceptanceUnit.Siemens, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ElectricSusceptance(double.PositiveInfinity, ElectricSusceptanceUnit.Siemens));
            var exception2 = Record.Exception(() => new ElectricSusceptance(double.NegativeInfinity, ElectricSusceptanceUnit.Siemens));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ElectricSusceptance(double.NaN, ElectricSusceptanceUnit.Siemens));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricSusceptance(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ElectricSusceptance(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ElectricSusceptance(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ElectricSusceptance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ElectricSusceptanceUnit[] unitsOrderedByName = EnumHelper.GetValues<ElectricSusceptanceUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new ElectricSusceptance(1, ElectricSusceptanceUnit.Siemens);

            QuantityInfo<ElectricSusceptance, ElectricSusceptanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("ElectricSusceptance", quantityInfo.Name);
            Assert.Equal(ElectricSusceptance.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricSusceptance.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(ElectricSusceptance.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ElectricSusceptanceUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void SiemensToElectricSusceptanceUnits()
        {
            ElectricSusceptance siemens = ElectricSusceptance.FromSiemens(1);
            AssertEx.EqualTolerance(GigamhosInOneSiemens, siemens.Gigamhos, GigamhosTolerance);
            AssertEx.EqualTolerance(GigasiemensInOneSiemens, siemens.Gigasiemens, GigasiemensTolerance);
            AssertEx.EqualTolerance(KilomhosInOneSiemens, siemens.Kilomhos, KilomhosTolerance);
            AssertEx.EqualTolerance(KilosiemensInOneSiemens, siemens.Kilosiemens, KilosiemensTolerance);
            AssertEx.EqualTolerance(MegamhosInOneSiemens, siemens.Megamhos, MegamhosTolerance);
            AssertEx.EqualTolerance(MegasiemensInOneSiemens, siemens.Megasiemens, MegasiemensTolerance);
            AssertEx.EqualTolerance(MhosInOneSiemens, siemens.Mhos, MhosTolerance);
            AssertEx.EqualTolerance(MicromhosInOneSiemens, siemens.Micromhos, MicromhosTolerance);
            AssertEx.EqualTolerance(MicrosiemensInOneSiemens, siemens.Microsiemens, MicrosiemensTolerance);
            AssertEx.EqualTolerance(MillimhosInOneSiemens, siemens.Millimhos, MillimhosTolerance);
            AssertEx.EqualTolerance(MillisiemensInOneSiemens, siemens.Millisiemens, MillisiemensTolerance);
            AssertEx.EqualTolerance(NanomhosInOneSiemens, siemens.Nanomhos, NanomhosTolerance);
            AssertEx.EqualTolerance(NanosiemensInOneSiemens, siemens.Nanosiemens, NanosiemensTolerance);
            AssertEx.EqualTolerance(SiemensInOneSiemens, siemens.Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(TeramhosInOneSiemens, siemens.Teramhos, TeramhosTolerance);
            AssertEx.EqualTolerance(TerasiemensInOneSiemens, siemens.Terasiemens, TerasiemensTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<ElectricSusceptanceUnit>(), unit =>
            {
                var quantity = ElectricSusceptance.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromSiemens_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ElectricSusceptance.FromSiemens(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ElectricSusceptance.FromSiemens(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromSiemens_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ElectricSusceptance.FromSiemens(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var siemens = ElectricSusceptance.FromSiemens(1);
            AssertEx.EqualTolerance(GigamhosInOneSiemens, siemens.As(ElectricSusceptanceUnit.Gigamho), GigamhosTolerance);
            AssertEx.EqualTolerance(GigasiemensInOneSiemens, siemens.As(ElectricSusceptanceUnit.Gigasiemens), GigasiemensTolerance);
            AssertEx.EqualTolerance(KilomhosInOneSiemens, siemens.As(ElectricSusceptanceUnit.Kilomho), KilomhosTolerance);
            AssertEx.EqualTolerance(KilosiemensInOneSiemens, siemens.As(ElectricSusceptanceUnit.Kilosiemens), KilosiemensTolerance);
            AssertEx.EqualTolerance(MegamhosInOneSiemens, siemens.As(ElectricSusceptanceUnit.Megamho), MegamhosTolerance);
            AssertEx.EqualTolerance(MegasiemensInOneSiemens, siemens.As(ElectricSusceptanceUnit.Megasiemens), MegasiemensTolerance);
            AssertEx.EqualTolerance(MhosInOneSiemens, siemens.As(ElectricSusceptanceUnit.Mho), MhosTolerance);
            AssertEx.EqualTolerance(MicromhosInOneSiemens, siemens.As(ElectricSusceptanceUnit.Micromho), MicromhosTolerance);
            AssertEx.EqualTolerance(MicrosiemensInOneSiemens, siemens.As(ElectricSusceptanceUnit.Microsiemens), MicrosiemensTolerance);
            AssertEx.EqualTolerance(MillimhosInOneSiemens, siemens.As(ElectricSusceptanceUnit.Millimho), MillimhosTolerance);
            AssertEx.EqualTolerance(MillisiemensInOneSiemens, siemens.As(ElectricSusceptanceUnit.Millisiemens), MillisiemensTolerance);
            AssertEx.EqualTolerance(NanomhosInOneSiemens, siemens.As(ElectricSusceptanceUnit.Nanomho), NanomhosTolerance);
            AssertEx.EqualTolerance(NanosiemensInOneSiemens, siemens.As(ElectricSusceptanceUnit.Nanosiemens), NanosiemensTolerance);
            AssertEx.EqualTolerance(SiemensInOneSiemens, siemens.As(ElectricSusceptanceUnit.Siemens), SiemensTolerance);
            AssertEx.EqualTolerance(TeramhosInOneSiemens, siemens.As(ElectricSusceptanceUnit.Teramho), TeramhosTolerance);
            AssertEx.EqualTolerance(TerasiemensInOneSiemens, siemens.As(ElectricSusceptanceUnit.Terasiemens), TerasiemensTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ElectricSusceptance.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
            var expectedValue = quantity.As(ElectricSusceptance.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
            var expectedUnit = ElectricSusceptance.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ElectricSusceptance quantityToConvert = quantity;

                ElectricSusceptance convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ElectricSusceptanceUnit> quantityToConvert = quantity;

                IQuantity<ElectricSusceptanceUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ElectricSusceptanceUnit> quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ElectricSusceptanceUnit> quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricSusceptance(value: 1, unit: ElectricSusceptance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 G℧", ElectricSusceptanceUnit.Gigamho, 4.2)]
        [InlineData("en-US", "4.2 GS", ElectricSusceptanceUnit.Gigasiemens, 4.2)]
        [InlineData("en-US", "4.2 k℧", ElectricSusceptanceUnit.Kilomho, 4.2)]
        [InlineData("en-US", "4.2 kS", ElectricSusceptanceUnit.Kilosiemens, 4.2)]
        [InlineData("en-US", "4.2 M℧", ElectricSusceptanceUnit.Megamho, 4.2)]
        [InlineData("en-US", "4.2 MS", ElectricSusceptanceUnit.Megasiemens, 4.2)]
        [InlineData("en-US", "4.2 ℧", ElectricSusceptanceUnit.Mho, 4.2)]
        [InlineData("en-US", "4.2 µ℧", ElectricSusceptanceUnit.Micromho, 4.2)]
        [InlineData("en-US", "4.2 µS", ElectricSusceptanceUnit.Microsiemens, 4.2)]
        [InlineData("en-US", "4.2 m℧", ElectricSusceptanceUnit.Millimho, 4.2)]
        [InlineData("en-US", "4.2 mS", ElectricSusceptanceUnit.Millisiemens, 4.2)]
        [InlineData("en-US", "4.2 n℧", ElectricSusceptanceUnit.Nanomho, 4.2)]
        [InlineData("en-US", "4.2 nS", ElectricSusceptanceUnit.Nanosiemens, 4.2)]
        [InlineData("en-US", "4.2 S", ElectricSusceptanceUnit.Siemens, 4.2)]
        [InlineData("en-US", "4.2 T℧", ElectricSusceptanceUnit.Teramho, 4.2)]
        [InlineData("en-US", "4.2 TS", ElectricSusceptanceUnit.Terasiemens, 4.2)]
        public void Parse(string culture, string quantityString, ElectricSusceptanceUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = ElectricSusceptance.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 G℧", ElectricSusceptanceUnit.Gigamho, 4.2)]
        [InlineData("en-US", "4.2 GS", ElectricSusceptanceUnit.Gigasiemens, 4.2)]
        [InlineData("en-US", "4.2 k℧", ElectricSusceptanceUnit.Kilomho, 4.2)]
        [InlineData("en-US", "4.2 kS", ElectricSusceptanceUnit.Kilosiemens, 4.2)]
        [InlineData("en-US", "4.2 M℧", ElectricSusceptanceUnit.Megamho, 4.2)]
        [InlineData("en-US", "4.2 MS", ElectricSusceptanceUnit.Megasiemens, 4.2)]
        [InlineData("en-US", "4.2 ℧", ElectricSusceptanceUnit.Mho, 4.2)]
        [InlineData("en-US", "4.2 µ℧", ElectricSusceptanceUnit.Micromho, 4.2)]
        [InlineData("en-US", "4.2 µS", ElectricSusceptanceUnit.Microsiemens, 4.2)]
        [InlineData("en-US", "4.2 m℧", ElectricSusceptanceUnit.Millimho, 4.2)]
        [InlineData("en-US", "4.2 mS", ElectricSusceptanceUnit.Millisiemens, 4.2)]
        [InlineData("en-US", "4.2 n℧", ElectricSusceptanceUnit.Nanomho, 4.2)]
        [InlineData("en-US", "4.2 nS", ElectricSusceptanceUnit.Nanosiemens, 4.2)]
        [InlineData("en-US", "4.2 S", ElectricSusceptanceUnit.Siemens, 4.2)]
        [InlineData("en-US", "4.2 T℧", ElectricSusceptanceUnit.Teramho, 4.2)]
        [InlineData("en-US", "4.2 TS", ElectricSusceptanceUnit.Terasiemens, 4.2)]
        public void TryParse(string culture, string quantityString, ElectricSusceptanceUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricSusceptance.TryParse(quantityString, out ElectricSusceptance parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("G℧", ElectricSusceptanceUnit.Gigamho)]
        [InlineData("GS", ElectricSusceptanceUnit.Gigasiemens)]
        [InlineData("k℧", ElectricSusceptanceUnit.Kilomho)]
        [InlineData("kS", ElectricSusceptanceUnit.Kilosiemens)]
        [InlineData("M℧", ElectricSusceptanceUnit.Megamho)]
        [InlineData("MS", ElectricSusceptanceUnit.Megasiemens)]
        [InlineData("℧", ElectricSusceptanceUnit.Mho)]
        [InlineData("µ℧", ElectricSusceptanceUnit.Micromho)]
        [InlineData("µS", ElectricSusceptanceUnit.Microsiemens)]
        [InlineData("m℧", ElectricSusceptanceUnit.Millimho)]
        [InlineData("mS", ElectricSusceptanceUnit.Millisiemens)]
        [InlineData("n℧", ElectricSusceptanceUnit.Nanomho)]
        [InlineData("nS", ElectricSusceptanceUnit.Nanosiemens)]
        [InlineData("S", ElectricSusceptanceUnit.Siemens)]
        [InlineData("T℧", ElectricSusceptanceUnit.Teramho)]
        [InlineData("TS", ElectricSusceptanceUnit.Terasiemens)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricSusceptanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ElectricSusceptanceUnit parsedUnit = ElectricSusceptance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("G℧", ElectricSusceptanceUnit.Gigamho)]
        [InlineData("GS", ElectricSusceptanceUnit.Gigasiemens)]
        [InlineData("k℧", ElectricSusceptanceUnit.Kilomho)]
        [InlineData("kS", ElectricSusceptanceUnit.Kilosiemens)]
        [InlineData("M℧", ElectricSusceptanceUnit.Megamho)]
        [InlineData("MS", ElectricSusceptanceUnit.Megasiemens)]
        [InlineData("℧", ElectricSusceptanceUnit.Mho)]
        [InlineData("µ℧", ElectricSusceptanceUnit.Micromho)]
        [InlineData("µS", ElectricSusceptanceUnit.Microsiemens)]
        [InlineData("m℧", ElectricSusceptanceUnit.Millimho)]
        [InlineData("mS", ElectricSusceptanceUnit.Millisiemens)]
        [InlineData("n℧", ElectricSusceptanceUnit.Nanomho)]
        [InlineData("nS", ElectricSusceptanceUnit.Nanosiemens)]
        [InlineData("S", ElectricSusceptanceUnit.Siemens)]
        [InlineData("T℧", ElectricSusceptanceUnit.Teramho)]
        [InlineData("TS", ElectricSusceptanceUnit.Terasiemens)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricSusceptanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ElectricSusceptanceUnit parsedUnit = ElectricSusceptance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "G℧", ElectricSusceptanceUnit.Gigamho)]
        [InlineData("en-US", "GS", ElectricSusceptanceUnit.Gigasiemens)]
        [InlineData("en-US", "k℧", ElectricSusceptanceUnit.Kilomho)]
        [InlineData("en-US", "kS", ElectricSusceptanceUnit.Kilosiemens)]
        [InlineData("en-US", "M℧", ElectricSusceptanceUnit.Megamho)]
        [InlineData("en-US", "MS", ElectricSusceptanceUnit.Megasiemens)]
        [InlineData("en-US", "℧", ElectricSusceptanceUnit.Mho)]
        [InlineData("en-US", "µ℧", ElectricSusceptanceUnit.Micromho)]
        [InlineData("en-US", "µS", ElectricSusceptanceUnit.Microsiemens)]
        [InlineData("en-US", "m℧", ElectricSusceptanceUnit.Millimho)]
        [InlineData("en-US", "mS", ElectricSusceptanceUnit.Millisiemens)]
        [InlineData("en-US", "n℧", ElectricSusceptanceUnit.Nanomho)]
        [InlineData("en-US", "nS", ElectricSusceptanceUnit.Nanosiemens)]
        [InlineData("en-US", "S", ElectricSusceptanceUnit.Siemens)]
        [InlineData("en-US", "T℧", ElectricSusceptanceUnit.Teramho)]
        [InlineData("en-US", "TS", ElectricSusceptanceUnit.Terasiemens)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricSusceptanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ElectricSusceptanceUnit parsedUnit = ElectricSusceptance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "G℧", ElectricSusceptanceUnit.Gigamho)]
        [InlineData("en-US", "GS", ElectricSusceptanceUnit.Gigasiemens)]
        [InlineData("en-US", "k℧", ElectricSusceptanceUnit.Kilomho)]
        [InlineData("en-US", "kS", ElectricSusceptanceUnit.Kilosiemens)]
        [InlineData("en-US", "M℧", ElectricSusceptanceUnit.Megamho)]
        [InlineData("en-US", "MS", ElectricSusceptanceUnit.Megasiemens)]
        [InlineData("en-US", "℧", ElectricSusceptanceUnit.Mho)]
        [InlineData("en-US", "µ℧", ElectricSusceptanceUnit.Micromho)]
        [InlineData("en-US", "µS", ElectricSusceptanceUnit.Microsiemens)]
        [InlineData("en-US", "m℧", ElectricSusceptanceUnit.Millimho)]
        [InlineData("en-US", "mS", ElectricSusceptanceUnit.Millisiemens)]
        [InlineData("en-US", "n℧", ElectricSusceptanceUnit.Nanomho)]
        [InlineData("en-US", "nS", ElectricSusceptanceUnit.Nanosiemens)]
        [InlineData("en-US", "S", ElectricSusceptanceUnit.Siemens)]
        [InlineData("en-US", "T℧", ElectricSusceptanceUnit.Teramho)]
        [InlineData("en-US", "TS", ElectricSusceptanceUnit.Terasiemens)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ElectricSusceptanceUnit expectedUnit)
        {
            ElectricSusceptanceUnit parsedUnit = ElectricSusceptance.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("G℧", ElectricSusceptanceUnit.Gigamho)]
        [InlineData("GS", ElectricSusceptanceUnit.Gigasiemens)]
        [InlineData("k℧", ElectricSusceptanceUnit.Kilomho)]
        [InlineData("kS", ElectricSusceptanceUnit.Kilosiemens)]
        [InlineData("M℧", ElectricSusceptanceUnit.Megamho)]
        [InlineData("MS", ElectricSusceptanceUnit.Megasiemens)]
        [InlineData("℧", ElectricSusceptanceUnit.Mho)]
        [InlineData("µ℧", ElectricSusceptanceUnit.Micromho)]
        [InlineData("µS", ElectricSusceptanceUnit.Microsiemens)]
        [InlineData("m℧", ElectricSusceptanceUnit.Millimho)]
        [InlineData("mS", ElectricSusceptanceUnit.Millisiemens)]
        [InlineData("n℧", ElectricSusceptanceUnit.Nanomho)]
        [InlineData("nS", ElectricSusceptanceUnit.Nanosiemens)]
        [InlineData("S", ElectricSusceptanceUnit.Siemens)]
        [InlineData("T℧", ElectricSusceptanceUnit.Teramho)]
        [InlineData("TS", ElectricSusceptanceUnit.Terasiemens)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricSusceptanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ElectricSusceptance.TryParseUnit(abbreviation, out ElectricSusceptanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("G℧", ElectricSusceptanceUnit.Gigamho)]
        [InlineData("GS", ElectricSusceptanceUnit.Gigasiemens)]
        [InlineData("k℧", ElectricSusceptanceUnit.Kilomho)]
        [InlineData("kS", ElectricSusceptanceUnit.Kilosiemens)]
        [InlineData("M℧", ElectricSusceptanceUnit.Megamho)]
        [InlineData("MS", ElectricSusceptanceUnit.Megasiemens)]
        [InlineData("℧", ElectricSusceptanceUnit.Mho)]
        [InlineData("µ℧", ElectricSusceptanceUnit.Micromho)]
        [InlineData("µS", ElectricSusceptanceUnit.Microsiemens)]
        [InlineData("m℧", ElectricSusceptanceUnit.Millimho)]
        [InlineData("mS", ElectricSusceptanceUnit.Millisiemens)]
        [InlineData("n℧", ElectricSusceptanceUnit.Nanomho)]
        [InlineData("nS", ElectricSusceptanceUnit.Nanosiemens)]
        [InlineData("S", ElectricSusceptanceUnit.Siemens)]
        [InlineData("T℧", ElectricSusceptanceUnit.Teramho)]
        [InlineData("TS", ElectricSusceptanceUnit.Terasiemens)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricSusceptanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ElectricSusceptance.TryParseUnit(abbreviation, out ElectricSusceptanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "G℧", ElectricSusceptanceUnit.Gigamho)]
        [InlineData("en-US", "GS", ElectricSusceptanceUnit.Gigasiemens)]
        [InlineData("en-US", "k℧", ElectricSusceptanceUnit.Kilomho)]
        [InlineData("en-US", "kS", ElectricSusceptanceUnit.Kilosiemens)]
        [InlineData("en-US", "M℧", ElectricSusceptanceUnit.Megamho)]
        [InlineData("en-US", "MS", ElectricSusceptanceUnit.Megasiemens)]
        [InlineData("en-US", "℧", ElectricSusceptanceUnit.Mho)]
        [InlineData("en-US", "µ℧", ElectricSusceptanceUnit.Micromho)]
        [InlineData("en-US", "µS", ElectricSusceptanceUnit.Microsiemens)]
        [InlineData("en-US", "m℧", ElectricSusceptanceUnit.Millimho)]
        [InlineData("en-US", "mS", ElectricSusceptanceUnit.Millisiemens)]
        [InlineData("en-US", "n℧", ElectricSusceptanceUnit.Nanomho)]
        [InlineData("en-US", "nS", ElectricSusceptanceUnit.Nanosiemens)]
        [InlineData("en-US", "S", ElectricSusceptanceUnit.Siemens)]
        [InlineData("en-US", "T℧", ElectricSusceptanceUnit.Teramho)]
        [InlineData("en-US", "TS", ElectricSusceptanceUnit.Terasiemens)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricSusceptanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricSusceptance.TryParseUnit(abbreviation, out ElectricSusceptanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "G℧", ElectricSusceptanceUnit.Gigamho)]
        [InlineData("en-US", "GS", ElectricSusceptanceUnit.Gigasiemens)]
        [InlineData("en-US", "k℧", ElectricSusceptanceUnit.Kilomho)]
        [InlineData("en-US", "kS", ElectricSusceptanceUnit.Kilosiemens)]
        [InlineData("en-US", "M℧", ElectricSusceptanceUnit.Megamho)]
        [InlineData("en-US", "MS", ElectricSusceptanceUnit.Megasiemens)]
        [InlineData("en-US", "℧", ElectricSusceptanceUnit.Mho)]
        [InlineData("en-US", "µ℧", ElectricSusceptanceUnit.Micromho)]
        [InlineData("en-US", "µS", ElectricSusceptanceUnit.Microsiemens)]
        [InlineData("en-US", "m℧", ElectricSusceptanceUnit.Millimho)]
        [InlineData("en-US", "mS", ElectricSusceptanceUnit.Millisiemens)]
        [InlineData("en-US", "n℧", ElectricSusceptanceUnit.Nanomho)]
        [InlineData("en-US", "nS", ElectricSusceptanceUnit.Nanosiemens)]
        [InlineData("en-US", "S", ElectricSusceptanceUnit.Siemens)]
        [InlineData("en-US", "T℧", ElectricSusceptanceUnit.Teramho)]
        [InlineData("en-US", "TS", ElectricSusceptanceUnit.Terasiemens)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ElectricSusceptanceUnit expectedUnit)
        {
            Assert.True(ElectricSusceptance.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ElectricSusceptanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", ElectricSusceptanceUnit.Gigamho, "G℧")]
        [InlineData("en-US", ElectricSusceptanceUnit.Gigasiemens, "GS")]
        [InlineData("en-US", ElectricSusceptanceUnit.Kilomho, "k℧")]
        [InlineData("en-US", ElectricSusceptanceUnit.Kilosiemens, "kS")]
        [InlineData("en-US", ElectricSusceptanceUnit.Megamho, "M℧")]
        [InlineData("en-US", ElectricSusceptanceUnit.Megasiemens, "MS")]
        [InlineData("en-US", ElectricSusceptanceUnit.Mho, "℧")]
        [InlineData("en-US", ElectricSusceptanceUnit.Micromho, "µ℧")]
        [InlineData("en-US", ElectricSusceptanceUnit.Microsiemens, "µS")]
        [InlineData("en-US", ElectricSusceptanceUnit.Millimho, "m℧")]
        [InlineData("en-US", ElectricSusceptanceUnit.Millisiemens, "mS")]
        [InlineData("en-US", ElectricSusceptanceUnit.Nanomho, "n℧")]
        [InlineData("en-US", ElectricSusceptanceUnit.Nanosiemens, "nS")]
        [InlineData("en-US", ElectricSusceptanceUnit.Siemens, "S")]
        [InlineData("en-US", ElectricSusceptanceUnit.Teramho, "T℧")]
        [InlineData("en-US", ElectricSusceptanceUnit.Terasiemens, "TS")]
        public void GetAbbreviationForCulture(string culture, ElectricSusceptanceUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = ElectricSusceptance.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(ElectricSusceptance.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = ElectricSusceptance.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricSusceptanceUnit unit)
        {
            var inBaseUnits = ElectricSusceptance.From(1.0, ElectricSusceptance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricSusceptanceUnit unit)
        {
            var quantity = ElectricSusceptance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricSusceptanceUnit unit)
        {
            Assert.All(ElectricSusceptance.Units.Where(u => u != ElectricSusceptance.BaseUnit), fromUnit =>
            {
                var quantity = ElectricSusceptance.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricSusceptanceUnit unit)
        {
            var quantity = default(ElectricSusceptance);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ElectricSusceptanceUnit unit)
        {
            var quantity = ElectricSusceptance.From(3, ElectricSusceptance.BaseUnit);
            ElectricSusceptance expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ElectricSusceptanceUnit> quantityToConvert = quantity;
                IQuantity<ElectricSusceptanceUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricSusceptance siemens = ElectricSusceptance.FromSiemens(1);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromGigamhos(siemens.Gigamhos).Siemens, GigamhosTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromGigasiemens(siemens.Gigasiemens).Siemens, GigasiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromKilomhos(siemens.Kilomhos).Siemens, KilomhosTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromKilosiemens(siemens.Kilosiemens).Siemens, KilosiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromMegamhos(siemens.Megamhos).Siemens, MegamhosTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromMegasiemens(siemens.Megasiemens).Siemens, MegasiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromMhos(siemens.Mhos).Siemens, MhosTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromMicromhos(siemens.Micromhos).Siemens, MicromhosTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromMicrosiemens(siemens.Microsiemens).Siemens, MicrosiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromMillimhos(siemens.Millimhos).Siemens, MillimhosTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromMillisiemens(siemens.Millisiemens).Siemens, MillisiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromNanomhos(siemens.Nanomhos).Siemens, NanomhosTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromNanosiemens(siemens.Nanosiemens).Siemens, NanosiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromSiemens(siemens.Siemens).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromTeramhos(siemens.Teramhos).Siemens, TeramhosTolerance);
            AssertEx.EqualTolerance(1, ElectricSusceptance.FromTerasiemens(siemens.Terasiemens).Siemens, TerasiemensTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricSusceptance v = ElectricSusceptance.FromSiemens(1);
            AssertEx.EqualTolerance(-1, -v.Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(2, (ElectricSusceptance.FromSiemens(3)-v).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(2, (v + v).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(10, (v*10).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(10, (10*v).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(2, (ElectricSusceptance.FromSiemens(10)/5).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(2, ElectricSusceptance.FromSiemens(10)/ElectricSusceptance.FromSiemens(5), SiemensTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricSusceptance oneSiemens = ElectricSusceptance.FromSiemens(1);
            ElectricSusceptance twoSiemens = ElectricSusceptance.FromSiemens(2);

            Assert.True(oneSiemens < twoSiemens);
            Assert.True(oneSiemens <= twoSiemens);
            Assert.True(twoSiemens > oneSiemens);
            Assert.True(twoSiemens >= oneSiemens);

            Assert.False(oneSiemens > twoSiemens);
            Assert.False(oneSiemens >= twoSiemens);
            Assert.False(twoSiemens < oneSiemens);
            Assert.False(twoSiemens <= oneSiemens);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricSusceptance siemens = ElectricSusceptance.FromSiemens(1);
            Assert.Equal(0, siemens.CompareTo(siemens));
            Assert.True(siemens.CompareTo(ElectricSusceptance.Zero) > 0);
            Assert.True(ElectricSusceptance.Zero.CompareTo(siemens) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricSusceptance siemens = ElectricSusceptance.FromSiemens(1);
            Assert.Throws<ArgumentException>(() => siemens.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricSusceptance siemens = ElectricSusceptance.FromSiemens(1);
            Assert.Throws<ArgumentNullException>(() => siemens.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricSusceptanceUnit.Siemens, 1, ElectricSusceptanceUnit.Siemens, true)]  // Same value and unit.
        [InlineData(1, ElectricSusceptanceUnit.Siemens, 2, ElectricSusceptanceUnit.Siemens, false)] // Different value.
        [InlineData(2, ElectricSusceptanceUnit.Siemens, 1, ElectricSusceptanceUnit.Gigamho, false)] // Different value and unit.
        [InlineData(1, ElectricSusceptanceUnit.Siemens, 1, ElectricSusceptanceUnit.Gigamho, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricSusceptanceUnit unitA, double valueB, ElectricSusceptanceUnit unitB, bool expectEqual)
        {
            var a = new ElectricSusceptance(valueA, unitA);
            var b = new ElectricSusceptance(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricSusceptance.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricSusceptance siemens = ElectricSusceptance.FromSiemens(1);
            Assert.False(siemens.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricSusceptance siemens = ElectricSusceptance.FromSiemens(1);
            Assert.False(siemens.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = ElectricSusceptance.FromSiemens(firstValue);
            var otherQuantity = ElectricSusceptance.FromSiemens(secondValue);
            ElectricSusceptance maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, ElectricSusceptance.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = ElectricSusceptance.FromSiemens(1);
            var negativeTolerance = ElectricSusceptance.FromSiemens(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<ElectricSusceptanceUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricSusceptance.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 G℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Gigamho).ToString());
            Assert.Equal("1 GS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Gigasiemens).ToString());
            Assert.Equal("1 k℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Kilomho).ToString());
            Assert.Equal("1 kS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Kilosiemens).ToString());
            Assert.Equal("1 M℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Megamho).ToString());
            Assert.Equal("1 MS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Megasiemens).ToString());
            Assert.Equal("1 ℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Mho).ToString());
            Assert.Equal("1 µ℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Micromho).ToString());
            Assert.Equal("1 µS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Microsiemens).ToString());
            Assert.Equal("1 m℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Millimho).ToString());
            Assert.Equal("1 mS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Millisiemens).ToString());
            Assert.Equal("1 n℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Nanomho).ToString());
            Assert.Equal("1 nS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Nanosiemens).ToString());
            Assert.Equal("1 S", new ElectricSusceptance(1, ElectricSusceptanceUnit.Siemens).ToString());
            Assert.Equal("1 T℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Teramho).ToString());
            Assert.Equal("1 TS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Terasiemens).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 G℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Gigamho).ToString(swedishCulture));
            Assert.Equal("1 GS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Gigasiemens).ToString(swedishCulture));
            Assert.Equal("1 k℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Kilomho).ToString(swedishCulture));
            Assert.Equal("1 kS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Kilosiemens).ToString(swedishCulture));
            Assert.Equal("1 M℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Megamho).ToString(swedishCulture));
            Assert.Equal("1 MS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Megasiemens).ToString(swedishCulture));
            Assert.Equal("1 ℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Mho).ToString(swedishCulture));
            Assert.Equal("1 µ℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Micromho).ToString(swedishCulture));
            Assert.Equal("1 µS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Microsiemens).ToString(swedishCulture));
            Assert.Equal("1 m℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Millimho).ToString(swedishCulture));
            Assert.Equal("1 mS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Millisiemens).ToString(swedishCulture));
            Assert.Equal("1 n℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Nanomho).ToString(swedishCulture));
            Assert.Equal("1 nS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Nanosiemens).ToString(swedishCulture));
            Assert.Equal("1 S", new ElectricSusceptance(1, ElectricSusceptanceUnit.Siemens).ToString(swedishCulture));
            Assert.Equal("1 T℧", new ElectricSusceptance(1, ElectricSusceptanceUnit.Teramho).ToString(swedishCulture));
            Assert.Equal("1 TS", new ElectricSusceptance(1, ElectricSusceptanceUnit.Terasiemens).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 S", new ElectricSusceptance(0.123456, ElectricSusceptanceUnit.Siemens).ToString("s1"));
            Assert.Equal("0.12 S", new ElectricSusceptance(0.123456, ElectricSusceptanceUnit.Siemens).ToString("s2"));
            Assert.Equal("0.123 S", new ElectricSusceptance(0.123456, ElectricSusceptanceUnit.Siemens).ToString("s3"));
            Assert.Equal("0.1235 S", new ElectricSusceptance(0.123456, ElectricSusceptanceUnit.Siemens).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 S", new ElectricSusceptance(0.123456, ElectricSusceptanceUnit.Siemens).ToString("s1", culture));
            Assert.Equal("0.12 S", new ElectricSusceptance(0.123456, ElectricSusceptanceUnit.Siemens).ToString("s2", culture));
            Assert.Equal("0.123 S", new ElectricSusceptance(0.123456, ElectricSusceptanceUnit.Siemens).ToString("s3", culture));
            Assert.Equal("0.1235 S", new ElectricSusceptance(0.123456, ElectricSusceptanceUnit.Siemens).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricSusceptance.FromSiemens(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricSusceptance.FromSiemens(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricSusceptance.FromSiemens(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricSusceptance.FromSiemens(value);
            Assert.Equal(ElectricSusceptance.FromSiemens(-value), -quantity);
        }
    }
}
