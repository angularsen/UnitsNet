//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The electrical conductance of an object is a measure of the ease with which an electric current passes. Along with susceptance, it is one of two elements of admittance. Its reciprocal quantity is electrical resistance.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Electrical_resistance_and_conductance
    /// </remarks>
    public struct  ElectricConductance
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ElectricConductanceUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public ElectricConductanceUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public ElectricConductance(double value, ElectricConductanceUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of ElectricConductance, which is Second. All conversions go via this value.
        /// </summary>
        public static ElectricConductanceUnit BaseUnit { get; } = ElectricConductanceUnit.Siemens;

        /// <summary>
        /// Represents the largest possible value of ElectricConductance.
        /// </summary>
        public static ElectricConductance MaxValue { get; } = new ElectricConductance(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of ElectricConductance.
        /// </summary>
        public static ElectricConductance MinValue { get; } = new ElectricConductance(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static ElectricConductance Zero { get; } = new ElectricConductance(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Gigamho"/>
        /// </summary>
        public double Gigamhos => As(ElectricConductanceUnit.Gigamho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Gigasiemens"/>
        /// </summary>
        public double Gigasiemens => As(ElectricConductanceUnit.Gigasiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Kilomho"/>
        /// </summary>
        public double Kilomhos => As(ElectricConductanceUnit.Kilomho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Kilosiemens"/>
        /// </summary>
        public double Kilosiemens => As(ElectricConductanceUnit.Kilosiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Megamho"/>
        /// </summary>
        public double Megamhos => As(ElectricConductanceUnit.Megamho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Megasiemens"/>
        /// </summary>
        public double Megasiemens => As(ElectricConductanceUnit.Megasiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Mho"/>
        /// </summary>
        public double Mhos => As(ElectricConductanceUnit.Mho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Micromho"/>
        /// </summary>
        public double Micromhos => As(ElectricConductanceUnit.Micromho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Microsiemens"/>
        /// </summary>
        public double Microsiemens => As(ElectricConductanceUnit.Microsiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Millimho"/>
        /// </summary>
        public double Millimhos => As(ElectricConductanceUnit.Millimho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Millisiemens"/>
        /// </summary>
        public double Millisiemens => As(ElectricConductanceUnit.Millisiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Nanomho"/>
        /// </summary>
        public double Nanomhos => As(ElectricConductanceUnit.Nanomho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Nanosiemens"/>
        /// </summary>
        public double Nanosiemens => As(ElectricConductanceUnit.Nanosiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Siemens"/>
        /// </summary>
        public double Siemens => As(ElectricConductanceUnit.Siemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Teramho"/>
        /// </summary>
        public double Teramhos => As(ElectricConductanceUnit.Teramho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricConductanceUnit.Terasiemens"/>
        /// </summary>
        public double Terasiemens => As(ElectricConductanceUnit.Terasiemens);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Gigamho"/>.
        /// </summary>
        public static ElectricConductance FromGigamhos(double gigamhos) => new ElectricConductance(gigamhos, ElectricConductanceUnit.Gigamho);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Gigasiemens"/>.
        /// </summary>
        public static ElectricConductance FromGigasiemens(double gigasiemens) => new ElectricConductance(gigasiemens, ElectricConductanceUnit.Gigasiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Kilomho"/>.
        /// </summary>
        public static ElectricConductance FromKilomhos(double kilomhos) => new ElectricConductance(kilomhos, ElectricConductanceUnit.Kilomho);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Kilosiemens"/>.
        /// </summary>
        public static ElectricConductance FromKilosiemens(double kilosiemens) => new ElectricConductance(kilosiemens, ElectricConductanceUnit.Kilosiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Megamho"/>.
        /// </summary>
        public static ElectricConductance FromMegamhos(double megamhos) => new ElectricConductance(megamhos, ElectricConductanceUnit.Megamho);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Megasiemens"/>.
        /// </summary>
        public static ElectricConductance FromMegasiemens(double megasiemens) => new ElectricConductance(megasiemens, ElectricConductanceUnit.Megasiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Mho"/>.
        /// </summary>
        public static ElectricConductance FromMhos(double mhos) => new ElectricConductance(mhos, ElectricConductanceUnit.Mho);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Micromho"/>.
        /// </summary>
        public static ElectricConductance FromMicromhos(double micromhos) => new ElectricConductance(micromhos, ElectricConductanceUnit.Micromho);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Microsiemens"/>.
        /// </summary>
        public static ElectricConductance FromMicrosiemens(double microsiemens) => new ElectricConductance(microsiemens, ElectricConductanceUnit.Microsiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Millimho"/>.
        /// </summary>
        public static ElectricConductance FromMillimhos(double millimhos) => new ElectricConductance(millimhos, ElectricConductanceUnit.Millimho);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Millisiemens"/>.
        /// </summary>
        public static ElectricConductance FromMillisiemens(double millisiemens) => new ElectricConductance(millisiemens, ElectricConductanceUnit.Millisiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Nanomho"/>.
        /// </summary>
        public static ElectricConductance FromNanomhos(double nanomhos) => new ElectricConductance(nanomhos, ElectricConductanceUnit.Nanomho);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Nanosiemens"/>.
        /// </summary>
        public static ElectricConductance FromNanosiemens(double nanosiemens) => new ElectricConductance(nanosiemens, ElectricConductanceUnit.Nanosiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Siemens"/>.
        /// </summary>
        public static ElectricConductance FromSiemens(double siemens) => new ElectricConductance(siemens, ElectricConductanceUnit.Siemens);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Teramho"/>.
        /// </summary>
        public static ElectricConductance FromTeramhos(double teramhos) => new ElectricConductance(teramhos, ElectricConductanceUnit.Teramho);

        /// <summary>
        ///     Creates a <see cref="ElectricConductance"/> from <see cref="ElectricConductanceUnit.Terasiemens"/>.
        /// </summary>
        public static ElectricConductance FromTerasiemens(double terasiemens) => new ElectricConductance(terasiemens, ElectricConductanceUnit.Terasiemens);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricConductanceUnit" /> to <see cref="ElectricConductance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricConductance unit value.</returns>
        public static ElectricConductance From(double value, ElectricConductanceUnit fromUnit)
        {
            return new ElectricConductance(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(ElectricConductanceUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this ElectricConductance to another ElectricConductance with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A ElectricConductance with the specified unit.</returns>
                public ElectricConductance ToUnit(ElectricConductanceUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new ElectricConductance(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        ElectricConductanceUnit.Gigamho => (_value) * 1e9d,
                        ElectricConductanceUnit.Gigasiemens => (_value) * 1e9d,
                        ElectricConductanceUnit.Kilomho => (_value) * 1e3d,
                        ElectricConductanceUnit.Kilosiemens => (_value) * 1e3d,
                        ElectricConductanceUnit.Megamho => (_value) * 1e6d,
                        ElectricConductanceUnit.Megasiemens => (_value) * 1e6d,
                        ElectricConductanceUnit.Mho => _value,
                        ElectricConductanceUnit.Micromho => (_value) * 1e-6d,
                        ElectricConductanceUnit.Microsiemens => (_value) * 1e-6d,
                        ElectricConductanceUnit.Millimho => (_value) * 1e-3d,
                        ElectricConductanceUnit.Millisiemens => (_value) * 1e-3d,
                        ElectricConductanceUnit.Nanomho => (_value) * 1e-9d,
                        ElectricConductanceUnit.Nanosiemens => (_value) * 1e-9d,
                        ElectricConductanceUnit.Siemens => _value,
                        ElectricConductanceUnit.Teramho => (_value) * 1e12d,
                        ElectricConductanceUnit.Terasiemens => (_value) * 1e12d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(ElectricConductanceUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        ElectricConductanceUnit.Gigamho => (baseUnitValue) / 1e9d,
                        ElectricConductanceUnit.Gigasiemens => (baseUnitValue) / 1e9d,
                        ElectricConductanceUnit.Kilomho => (baseUnitValue) / 1e3d,
                        ElectricConductanceUnit.Kilosiemens => (baseUnitValue) / 1e3d,
                        ElectricConductanceUnit.Megamho => (baseUnitValue) / 1e6d,
                        ElectricConductanceUnit.Megasiemens => (baseUnitValue) / 1e6d,
                        ElectricConductanceUnit.Mho => baseUnitValue,
                        ElectricConductanceUnit.Micromho => (baseUnitValue) / 1e-6d,
                        ElectricConductanceUnit.Microsiemens => (baseUnitValue) / 1e-6d,
                        ElectricConductanceUnit.Millimho => (baseUnitValue) / 1e-3d,
                        ElectricConductanceUnit.Millisiemens => (baseUnitValue) / 1e-3d,
                        ElectricConductanceUnit.Nanomho => (baseUnitValue) / 1e-9d,
                        ElectricConductanceUnit.Nanosiemens => (baseUnitValue) / 1e-9d,
                        ElectricConductanceUnit.Siemens => baseUnitValue,
                        ElectricConductanceUnit.Teramho => (baseUnitValue) / 1e12d,
                        ElectricConductanceUnit.Terasiemens => (baseUnitValue) / 1e12d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

