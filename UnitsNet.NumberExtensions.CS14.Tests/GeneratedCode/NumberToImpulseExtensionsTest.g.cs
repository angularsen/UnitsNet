//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToImpulse;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToImpulseExtensionsTests
    {
        [Fact]
        public void NumberToCentinewtonSecondsTest() =>
            Assert.Equal(Impulse.FromCentinewtonSeconds(2), 2.CentinewtonSeconds);

        [Fact]
        public void NumberToDecanewtonSecondsTest() =>
            Assert.Equal(Impulse.FromDecanewtonSeconds(2), 2.DecanewtonSeconds);

        [Fact]
        public void NumberToDecinewtonSecondsTest() =>
            Assert.Equal(Impulse.FromDecinewtonSeconds(2), 2.DecinewtonSeconds);

        [Fact]
        public void NumberToKilogramMetersPerSecondTest() =>
            Assert.Equal(Impulse.FromKilogramMetersPerSecond(2), 2.KilogramMetersPerSecond);

        [Fact]
        public void NumberToKilonewtonSecondsTest() =>
            Assert.Equal(Impulse.FromKilonewtonSeconds(2), 2.KilonewtonSeconds);

        [Fact]
        public void NumberToMeganewtonSecondsTest() =>
            Assert.Equal(Impulse.FromMeganewtonSeconds(2), 2.MeganewtonSeconds);

        [Fact]
        public void NumberToMicronewtonSecondsTest() =>
            Assert.Equal(Impulse.FromMicronewtonSeconds(2), 2.MicronewtonSeconds);

        [Fact]
        public void NumberToMillinewtonSecondsTest() =>
            Assert.Equal(Impulse.FromMillinewtonSeconds(2), 2.MillinewtonSeconds);

        [Fact]
        public void NumberToNanonewtonSecondsTest() =>
            Assert.Equal(Impulse.FromNanonewtonSeconds(2), 2.NanonewtonSeconds);

        [Fact]
        public void NumberToNewtonSecondsTest() =>
            Assert.Equal(Impulse.FromNewtonSeconds(2), 2.NewtonSeconds);

        [Fact]
        public void NumberToPoundFeetPerSecondTest() =>
            Assert.Equal(Impulse.FromPoundFeetPerSecond(2), 2.PoundFeetPerSecond);

        [Fact]
        public void NumberToPoundForceSecondsTest() =>
            Assert.Equal(Impulse.FromPoundForceSeconds(2), 2.PoundForceSeconds);

        [Fact]
        public void NumberToSlugFeetPerSecondTest() =>
            Assert.Equal(Impulse.FromSlugFeetPerSecond(2), 2.SlugFeetPerSecond);

    }
}
