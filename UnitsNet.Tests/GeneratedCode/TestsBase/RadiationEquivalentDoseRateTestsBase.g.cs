//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RadiationEquivalentDoseRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RadiationEquivalentDoseRateTestsBase : QuantityTestsBase
    {
        protected abstract double MicrosievertsPerHourInOneSievertPerSecond { get; }
        protected abstract double MicrosievertsPerSecondInOneSievertPerSecond { get; }
        protected abstract double MilliroentgensEquivalentManPerHourInOneSievertPerSecond { get; }
        protected abstract double MillisievertsPerHourInOneSievertPerSecond { get; }
        protected abstract double MillisievertsPerSecondInOneSievertPerSecond { get; }
        protected abstract double NanosievertsPerHourInOneSievertPerSecond { get; }
        protected abstract double NanosievertsPerSecondInOneSievertPerSecond { get; }
        protected abstract double RoentgensEquivalentManPerHourInOneSievertPerSecond { get; }
        protected abstract double SievertsPerHourInOneSievertPerSecond { get; }
        protected abstract double SievertsPerSecondInOneSievertPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double MicrosievertsPerHourTolerance { get { return 1e-5; } }
        protected virtual double MicrosievertsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MilliroentgensEquivalentManPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillisievertsPerHourTolerance { get { return 1e-5; } }
        protected virtual double MillisievertsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanosievertsPerHourTolerance { get { return 1e-5; } }
        protected virtual double NanosievertsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double RoentgensEquivalentManPerHourTolerance { get { return 1e-5; } }
        protected virtual double SievertsPerHourTolerance { get { return 1e-5; } }
        protected virtual double SievertsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(RadiationEquivalentDoseRateUnit unit)
        {
            return unit switch
            {
                RadiationEquivalentDoseRateUnit.MicrosievertPerHour => (MicrosievertsPerHourInOneSievertPerSecond, MicrosievertsPerHourTolerance),
                RadiationEquivalentDoseRateUnit.MicrosievertPerSecond => (MicrosievertsPerSecondInOneSievertPerSecond, MicrosievertsPerSecondTolerance),
                RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour => (MilliroentgensEquivalentManPerHourInOneSievertPerSecond, MilliroentgensEquivalentManPerHourTolerance),
                RadiationEquivalentDoseRateUnit.MillisievertPerHour => (MillisievertsPerHourInOneSievertPerSecond, MillisievertsPerHourTolerance),
                RadiationEquivalentDoseRateUnit.MillisievertPerSecond => (MillisievertsPerSecondInOneSievertPerSecond, MillisievertsPerSecondTolerance),
                RadiationEquivalentDoseRateUnit.NanosievertPerHour => (NanosievertsPerHourInOneSievertPerSecond, NanosievertsPerHourTolerance),
                RadiationEquivalentDoseRateUnit.NanosievertPerSecond => (NanosievertsPerSecondInOneSievertPerSecond, NanosievertsPerSecondTolerance),
                RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour => (RoentgensEquivalentManPerHourInOneSievertPerSecond, RoentgensEquivalentManPerHourTolerance),
                RadiationEquivalentDoseRateUnit.SievertPerHour => (SievertsPerHourInOneSievertPerSecond, SievertsPerHourTolerance),
                RadiationEquivalentDoseRateUnit.SievertPerSecond => (SievertsPerSecondInOneSievertPerSecond, SievertsPerSecondTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { RadiationEquivalentDoseRateUnit.MicrosievertPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.MicrosievertPerSecond },
            new object[] { RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.MillisievertPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.MillisievertPerSecond },
            new object[] { RadiationEquivalentDoseRateUnit.NanosievertPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.NanosievertPerSecond },
            new object[] { RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.SievertPerHour },
            new object[] { RadiationEquivalentDoseRateUnit.SievertPerSecond },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new RadiationEquivalentDoseRate();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerSecond, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new RadiationEquivalentDoseRate(double.PositiveInfinity, RadiationEquivalentDoseRateUnit.SievertPerSecond));
            var exception2 = Record.Exception(() => new RadiationEquivalentDoseRate(double.NegativeInfinity, RadiationEquivalentDoseRateUnit.SievertPerSecond));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new RadiationEquivalentDoseRate(double.NaN, RadiationEquivalentDoseRateUnit.SievertPerSecond));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new RadiationEquivalentDoseRate(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new RadiationEquivalentDoseRate(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new RadiationEquivalentDoseRate(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void RadiationEquivalentDoseRate_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.SievertPerSecond);

            QuantityInfo<RadiationEquivalentDoseRateUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(RadiationEquivalentDoseRate.Zero, quantityInfo.Zero);
            Assert.Equal("RadiationEquivalentDoseRate", quantityInfo.Name);

            var units = Enum.GetValues<RadiationEquivalentDoseRateUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void SievertPerSecondToRadiationEquivalentDoseRateUnits()
        {
            RadiationEquivalentDoseRate sievertpersecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            AssertEx.EqualTolerance(MicrosievertsPerHourInOneSievertPerSecond, sievertpersecond.MicrosievertsPerHour, MicrosievertsPerHourTolerance);
            AssertEx.EqualTolerance(MicrosievertsPerSecondInOneSievertPerSecond, sievertpersecond.MicrosievertsPerSecond, MicrosievertsPerSecondTolerance);
            AssertEx.EqualTolerance(MilliroentgensEquivalentManPerHourInOneSievertPerSecond, sievertpersecond.MilliroentgensEquivalentManPerHour, MilliroentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(MillisievertsPerHourInOneSievertPerSecond, sievertpersecond.MillisievertsPerHour, MillisievertsPerHourTolerance);
            AssertEx.EqualTolerance(MillisievertsPerSecondInOneSievertPerSecond, sievertpersecond.MillisievertsPerSecond, MillisievertsPerSecondTolerance);
            AssertEx.EqualTolerance(NanosievertsPerHourInOneSievertPerSecond, sievertpersecond.NanosievertsPerHour, NanosievertsPerHourTolerance);
            AssertEx.EqualTolerance(NanosievertsPerSecondInOneSievertPerSecond, sievertpersecond.NanosievertsPerSecond, NanosievertsPerSecondTolerance);
            AssertEx.EqualTolerance(RoentgensEquivalentManPerHourInOneSievertPerSecond, sievertpersecond.RoentgensEquivalentManPerHour, RoentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(SievertsPerHourInOneSievertPerSecond, sievertpersecond.SievertsPerHour, SievertsPerHourTolerance);
            AssertEx.EqualTolerance(SievertsPerSecondInOneSievertPerSecond, sievertpersecond.SievertsPerSecond, SievertsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour);
            AssertEx.EqualTolerance(1, quantity00.MicrosievertsPerHour, MicrosievertsPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerHour, quantity00.Unit);

            var quantity01 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.MicrosievertPerSecond);
            AssertEx.EqualTolerance(1, quantity01.MicrosievertsPerSecond, MicrosievertsPerSecondTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.MicrosievertPerSecond, quantity01.Unit);

            var quantity02 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour);
            AssertEx.EqualTolerance(1, quantity02.MilliroentgensEquivalentManPerHour, MilliroentgensEquivalentManPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour, quantity02.Unit);

            var quantity03 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.MillisievertPerHour);
            AssertEx.EqualTolerance(1, quantity03.MillisievertsPerHour, MillisievertsPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerHour, quantity03.Unit);

            var quantity04 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.MillisievertPerSecond);
            AssertEx.EqualTolerance(1, quantity04.MillisievertsPerSecond, MillisievertsPerSecondTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.MillisievertPerSecond, quantity04.Unit);

            var quantity05 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.NanosievertPerHour);
            AssertEx.EqualTolerance(1, quantity05.NanosievertsPerHour, NanosievertsPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerHour, quantity05.Unit);

            var quantity06 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.NanosievertPerSecond);
            AssertEx.EqualTolerance(1, quantity06.NanosievertsPerSecond, NanosievertsPerSecondTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.NanosievertPerSecond, quantity06.Unit);

            var quantity07 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour);
            AssertEx.EqualTolerance(1, quantity07.RoentgensEquivalentManPerHour, RoentgensEquivalentManPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour, quantity07.Unit);

            var quantity08 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.SievertPerHour);
            AssertEx.EqualTolerance(1, quantity08.SievertsPerHour, SievertsPerHourTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerHour, quantity08.Unit);

            var quantity09 = RadiationEquivalentDoseRate.From(1, RadiationEquivalentDoseRateUnit.SievertPerSecond);
            AssertEx.EqualTolerance(1, quantity09.SievertsPerSecond, SievertsPerSecondTolerance);
            Assert.Equal(RadiationEquivalentDoseRateUnit.SievertPerSecond, quantity09.Unit);

        }

        [Fact]
        public void FromSievertsPerSecond_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => RadiationEquivalentDoseRate.FromSievertsPerSecond(double.PositiveInfinity));
            var exception2 = Record.Exception(() => RadiationEquivalentDoseRate.FromSievertsPerSecond(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromSievertsPerSecond_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => RadiationEquivalentDoseRate.FromSievertsPerSecond(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var sievertpersecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            AssertEx.EqualTolerance(MicrosievertsPerHourInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.MicrosievertPerHour), MicrosievertsPerHourTolerance);
            AssertEx.EqualTolerance(MicrosievertsPerSecondInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.MicrosievertPerSecond), MicrosievertsPerSecondTolerance);
            AssertEx.EqualTolerance(MilliroentgensEquivalentManPerHourInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour), MilliroentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(MillisievertsPerHourInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.MillisievertPerHour), MillisievertsPerHourTolerance);
            AssertEx.EqualTolerance(MillisievertsPerSecondInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.MillisievertPerSecond), MillisievertsPerSecondTolerance);
            AssertEx.EqualTolerance(NanosievertsPerHourInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.NanosievertPerHour), NanosievertsPerHourTolerance);
            AssertEx.EqualTolerance(NanosievertsPerSecondInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.NanosievertPerSecond), NanosievertsPerSecondTolerance);
            AssertEx.EqualTolerance(RoentgensEquivalentManPerHourInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour), RoentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(SievertsPerHourInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.SievertPerHour), SievertsPerHourTolerance);
            AssertEx.EqualTolerance(SievertsPerSecondInOneSievertPerSecond, sievertpersecond.As(RadiationEquivalentDoseRateUnit.SievertPerSecond), SievertsPerSecondTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = RadiationEquivalentDoseRate.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
            var expectedValue = quantity.As(RadiationEquivalentDoseRate.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
            var expectedUnit = RadiationEquivalentDoseRate.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                RadiationEquivalentDoseRate quantityToConvert = quantity;

                RadiationEquivalentDoseRate convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<RadiationEquivalentDoseRateUnit> quantityToConvert = quantity;

                IQuantity<RadiationEquivalentDoseRateUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<RadiationEquivalentDoseRateUnit> quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<RadiationEquivalentDoseRateUnit> quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new RadiationEquivalentDoseRate(value: 1, unit: RadiationEquivalentDoseRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour, 4.2)]
        [InlineData("en-US", "4.2 µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond, 4.2)]
        [InlineData("en-US", "4.2 mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour, 4.2)]
        [InlineData("en-US", "4.2 mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour, 4.2)]
        [InlineData("en-US", "4.2 mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond, 4.2)]
        [InlineData("en-US", "4.2 nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour, 4.2)]
        [InlineData("en-US", "4.2 nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond, 4.2)]
        [InlineData("en-US", "4.2 rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour, 4.2)]
        [InlineData("en-US", "4.2 Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour, 4.2)]
        [InlineData("en-US", "4.2 Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мкЗв/ч", RadiationEquivalentDoseRateUnit.MicrosievertPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 мкЗв/с", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мЗв/ч", RadiationEquivalentDoseRateUnit.MillisievertPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 мЗв/с", RadiationEquivalentDoseRateUnit.MillisievertPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 нЗв/ч", RadiationEquivalentDoseRateUnit.NanosievertPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 нЗв/с", RadiationEquivalentDoseRateUnit.NanosievertPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 Зв/ч", RadiationEquivalentDoseRateUnit.SievertPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 Зв/с", RadiationEquivalentDoseRateUnit.SievertPerSecond, 4.2)]
        public void Parse(string culture, string quantityString, RadiationEquivalentDoseRateUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = RadiationEquivalentDoseRate.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour, 4.2)]
        [InlineData("en-US", "4.2 µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond, 4.2)]
        [InlineData("en-US", "4.2 mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour, 4.2)]
        [InlineData("en-US", "4.2 mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour, 4.2)]
        [InlineData("en-US", "4.2 mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond, 4.2)]
        [InlineData("en-US", "4.2 nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour, 4.2)]
        [InlineData("en-US", "4.2 nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond, 4.2)]
        [InlineData("en-US", "4.2 rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour, 4.2)]
        [InlineData("en-US", "4.2 Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour, 4.2)]
        [InlineData("en-US", "4.2 Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мкЗв/ч", RadiationEquivalentDoseRateUnit.MicrosievertPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 мкЗв/с", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мЗв/ч", RadiationEquivalentDoseRateUnit.MillisievertPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 мЗв/с", RadiationEquivalentDoseRateUnit.MillisievertPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 нЗв/ч", RadiationEquivalentDoseRateUnit.NanosievertPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 нЗв/с", RadiationEquivalentDoseRateUnit.NanosievertPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 Зв/ч", RadiationEquivalentDoseRateUnit.SievertPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 Зв/с", RadiationEquivalentDoseRateUnit.SievertPerSecond, 4.2)]
        public void TryParse(string culture, string quantityString, RadiationEquivalentDoseRateUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(RadiationEquivalentDoseRate.TryParse(quantityString, out RadiationEquivalentDoseRate parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour)]
        [InlineData("mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour)]
        [InlineData("Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RadiationEquivalentDoseRateUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            RadiationEquivalentDoseRateUnit parsedUnit = RadiationEquivalentDoseRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour)]
        [InlineData("mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour)]
        [InlineData("Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RadiationEquivalentDoseRateUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            RadiationEquivalentDoseRateUnit parsedUnit = RadiationEquivalentDoseRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("en-US", "µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("en-US", "mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour)]
        [InlineData("en-US", "mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("en-US", "mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("en-US", "nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("en-US", "nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("en-US", "rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour)]
        [InlineData("en-US", "Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("en-US", "Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        [InlineData("ru-RU", "мкЗв/ч", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("ru-RU", "мкЗв/с", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("ru-RU", "мЗв/ч", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("ru-RU", "мЗв/с", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("ru-RU", "нЗв/ч", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("ru-RU", "нЗв/с", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("ru-RU", "Зв/ч", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("ru-RU", "Зв/с", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, RadiationEquivalentDoseRateUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            RadiationEquivalentDoseRateUnit parsedUnit = RadiationEquivalentDoseRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("en-US", "µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("en-US", "mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour)]
        [InlineData("en-US", "mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("en-US", "mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("en-US", "nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("en-US", "nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("en-US", "rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour)]
        [InlineData("en-US", "Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("en-US", "Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        [InlineData("ru-RU", "мкЗв/ч", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("ru-RU", "мкЗв/с", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("ru-RU", "мЗв/ч", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("ru-RU", "мЗв/с", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("ru-RU", "нЗв/ч", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("ru-RU", "нЗв/с", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("ru-RU", "Зв/ч", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("ru-RU", "Зв/с", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, RadiationEquivalentDoseRateUnit expectedUnit)
        {
            RadiationEquivalentDoseRateUnit parsedUnit = RadiationEquivalentDoseRate.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour)]
        [InlineData("mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour)]
        [InlineData("Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RadiationEquivalentDoseRateUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(RadiationEquivalentDoseRate.TryParseUnit(abbreviation, out RadiationEquivalentDoseRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour)]
        [InlineData("mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour)]
        [InlineData("Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RadiationEquivalentDoseRateUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(RadiationEquivalentDoseRate.TryParseUnit(abbreviation, out RadiationEquivalentDoseRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("en-US", "µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("en-US", "mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour)]
        [InlineData("en-US", "mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("en-US", "mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("en-US", "nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("en-US", "nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("en-US", "rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour)]
        [InlineData("en-US", "Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("en-US", "Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        [InlineData("ru-RU", "мкЗв/ч", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("ru-RU", "мкЗв/с", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("ru-RU", "мЗв/ч", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("ru-RU", "мЗв/с", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("ru-RU", "нЗв/ч", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("ru-RU", "нЗв/с", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("ru-RU", "Зв/ч", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("ru-RU", "Зв/с", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, RadiationEquivalentDoseRateUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(RadiationEquivalentDoseRate.TryParseUnit(abbreviation, out RadiationEquivalentDoseRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "µSv/h", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("en-US", "µSv/s", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("en-US", "mrem/h", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour)]
        [InlineData("en-US", "mSv/h", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("en-US", "mSv/s", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("en-US", "nSv/h", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("en-US", "nSv/s", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("en-US", "rem/h", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour)]
        [InlineData("en-US", "Sv/h", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("en-US", "Sv/s", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        [InlineData("ru-RU", "мкЗв/ч", RadiationEquivalentDoseRateUnit.MicrosievertPerHour)]
        [InlineData("ru-RU", "мкЗв/с", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond)]
        [InlineData("ru-RU", "мЗв/ч", RadiationEquivalentDoseRateUnit.MillisievertPerHour)]
        [InlineData("ru-RU", "мЗв/с", RadiationEquivalentDoseRateUnit.MillisievertPerSecond)]
        [InlineData("ru-RU", "нЗв/ч", RadiationEquivalentDoseRateUnit.NanosievertPerHour)]
        [InlineData("ru-RU", "нЗв/с", RadiationEquivalentDoseRateUnit.NanosievertPerSecond)]
        [InlineData("ru-RU", "Зв/ч", RadiationEquivalentDoseRateUnit.SievertPerHour)]
        [InlineData("ru-RU", "Зв/с", RadiationEquivalentDoseRateUnit.SievertPerSecond)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, RadiationEquivalentDoseRateUnit expectedUnit)
        {
            Assert.True(RadiationEquivalentDoseRate.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out RadiationEquivalentDoseRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.MicrosievertPerHour, "µSv/h")]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond, "µSv/s")]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour, "mrem/h")]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.MillisievertPerHour, "mSv/h")]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.MillisievertPerSecond, "mSv/s")]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.NanosievertPerHour, "nSv/h")]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.NanosievertPerSecond, "nSv/s")]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour, "rem/h")]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.SievertPerHour, "Sv/h")]
        [InlineData("en-US", RadiationEquivalentDoseRateUnit.SievertPerSecond, "Sv/s")]
        [InlineData("ru-RU", RadiationEquivalentDoseRateUnit.MicrosievertPerHour, "мкЗв/ч")]
        [InlineData("ru-RU", RadiationEquivalentDoseRateUnit.MicrosievertPerSecond, "мкЗв/с")]
        [InlineData("ru-RU", RadiationEquivalentDoseRateUnit.MillisievertPerHour, "мЗв/ч")]
        [InlineData("ru-RU", RadiationEquivalentDoseRateUnit.MillisievertPerSecond, "мЗв/с")]
        [InlineData("ru-RU", RadiationEquivalentDoseRateUnit.NanosievertPerHour, "нЗв/ч")]
        [InlineData("ru-RU", RadiationEquivalentDoseRateUnit.NanosievertPerSecond, "нЗв/с")]
        [InlineData("ru-RU", RadiationEquivalentDoseRateUnit.SievertPerHour, "Зв/ч")]
        [InlineData("ru-RU", RadiationEquivalentDoseRateUnit.SievertPerSecond, "Зв/с")]
        public void GetAbbreviationForCulture(string culture, RadiationEquivalentDoseRateUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = RadiationEquivalentDoseRate.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(RadiationEquivalentDoseRate.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = RadiationEquivalentDoseRate.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(RadiationEquivalentDoseRateUnit unit)
        {
            var inBaseUnits = RadiationEquivalentDoseRate.From(1.0, RadiationEquivalentDoseRate.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(RadiationEquivalentDoseRateUnit unit)
        {
            var quantity = RadiationEquivalentDoseRate.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(RadiationEquivalentDoseRateUnit unit)
        {
            Assert.All(RadiationEquivalentDoseRate.Units.Where(u => u != RadiationEquivalentDoseRate.BaseUnit), fromUnit =>
            {
                var quantity = RadiationEquivalentDoseRate.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(RadiationEquivalentDoseRateUnit unit)
        {
            var quantity = default(RadiationEquivalentDoseRate);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(RadiationEquivalentDoseRateUnit unit)
        {
            var quantity = RadiationEquivalentDoseRate.From(3, RadiationEquivalentDoseRate.BaseUnit);
            RadiationEquivalentDoseRate expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<RadiationEquivalentDoseRateUnit> quantityToConvert = quantity;
                IQuantity<RadiationEquivalentDoseRateUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RadiationEquivalentDoseRate sievertpersecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromMicrosievertsPerHour(sievertpersecond.MicrosievertsPerHour).SievertsPerSecond, MicrosievertsPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromMicrosievertsPerSecond(sievertpersecond.MicrosievertsPerSecond).SievertsPerSecond, MicrosievertsPerSecondTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromMilliroentgensEquivalentManPerHour(sievertpersecond.MilliroentgensEquivalentManPerHour).SievertsPerSecond, MilliroentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromMillisievertsPerHour(sievertpersecond.MillisievertsPerHour).SievertsPerSecond, MillisievertsPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromMillisievertsPerSecond(sievertpersecond.MillisievertsPerSecond).SievertsPerSecond, MillisievertsPerSecondTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromNanosievertsPerHour(sievertpersecond.NanosievertsPerHour).SievertsPerSecond, NanosievertsPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromNanosievertsPerSecond(sievertpersecond.NanosievertsPerSecond).SievertsPerSecond, NanosievertsPerSecondTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromRoentgensEquivalentManPerHour(sievertpersecond.RoentgensEquivalentManPerHour).SievertsPerSecond, RoentgensEquivalentManPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromSievertsPerHour(sievertpersecond.SievertsPerHour).SievertsPerSecond, SievertsPerHourTolerance);
            AssertEx.EqualTolerance(1, RadiationEquivalentDoseRate.FromSievertsPerSecond(sievertpersecond.SievertsPerSecond).SievertsPerSecond, SievertsPerSecondTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RadiationEquivalentDoseRate v = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.SievertsPerSecond, SievertsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (RadiationEquivalentDoseRate.FromSievertsPerSecond(3)-v).SievertsPerSecond, SievertsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).SievertsPerSecond, SievertsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).SievertsPerSecond, SievertsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).SievertsPerSecond, SievertsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (RadiationEquivalentDoseRate.FromSievertsPerSecond(10)/5).SievertsPerSecond, SievertsPerSecondTolerance);
            AssertEx.EqualTolerance(2, RadiationEquivalentDoseRate.FromSievertsPerSecond(10)/RadiationEquivalentDoseRate.FromSievertsPerSecond(5), SievertsPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            RadiationEquivalentDoseRate oneSievertPerSecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            RadiationEquivalentDoseRate twoSievertsPerSecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(2);

            Assert.True(oneSievertPerSecond < twoSievertsPerSecond);
            Assert.True(oneSievertPerSecond <= twoSievertsPerSecond);
            Assert.True(twoSievertsPerSecond > oneSievertPerSecond);
            Assert.True(twoSievertsPerSecond >= oneSievertPerSecond);

            Assert.False(oneSievertPerSecond > twoSievertsPerSecond);
            Assert.False(oneSievertPerSecond >= twoSievertsPerSecond);
            Assert.False(twoSievertsPerSecond < oneSievertPerSecond);
            Assert.False(twoSievertsPerSecond <= oneSievertPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RadiationEquivalentDoseRate sievertpersecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            Assert.Equal(0, sievertpersecond.CompareTo(sievertpersecond));
            Assert.True(sievertpersecond.CompareTo(RadiationEquivalentDoseRate.Zero) > 0);
            Assert.True(RadiationEquivalentDoseRate.Zero.CompareTo(sievertpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RadiationEquivalentDoseRate sievertpersecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            Assert.Throws<ArgumentException>(() => sievertpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RadiationEquivalentDoseRate sievertpersecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => sievertpersecond.CompareTo(null));
        }

        [Theory]
        [InlineData(1, RadiationEquivalentDoseRateUnit.SievertPerSecond, 1, RadiationEquivalentDoseRateUnit.SievertPerSecond, true)]  // Same value and unit.
        [InlineData(1, RadiationEquivalentDoseRateUnit.SievertPerSecond, 2, RadiationEquivalentDoseRateUnit.SievertPerSecond, false)] // Different value.
        [InlineData(2, RadiationEquivalentDoseRateUnit.SievertPerSecond, 1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour, false)] // Different value and unit.
        [InlineData(1, RadiationEquivalentDoseRateUnit.SievertPerSecond, 1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, RadiationEquivalentDoseRateUnit unitA, double valueB, RadiationEquivalentDoseRateUnit unitB, bool expectEqual)
        {
            var a = new RadiationEquivalentDoseRate(valueA, unitA);
            var b = new RadiationEquivalentDoseRate(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = RadiationEquivalentDoseRate.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            Assert.True(v.Equals(RadiationEquivalentDoseRate.FromSievertsPerSecond(1), SievertsPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(RadiationEquivalentDoseRate.Zero, SievertsPerSecondTolerance, ComparisonType.Relative));
            Assert.True(RadiationEquivalentDoseRate.FromSievertsPerSecond(100).Equals(RadiationEquivalentDoseRate.FromSievertsPerSecond(120), 0.3, ComparisonType.Relative));
            Assert.False(RadiationEquivalentDoseRate.FromSievertsPerSecond(100).Equals(RadiationEquivalentDoseRate.FromSievertsPerSecond(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(RadiationEquivalentDoseRate.FromSievertsPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RadiationEquivalentDoseRate sievertpersecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            Assert.False(sievertpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RadiationEquivalentDoseRate sievertpersecond = RadiationEquivalentDoseRate.FromSievertsPerSecond(1);
            Assert.False(sievertpersecond.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<RadiationEquivalentDoseRateUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RadiationEquivalentDoseRate.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 µSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour).ToString());
            Assert.Equal("1 µSv/s", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MicrosievertPerSecond).ToString());
            Assert.Equal("1 mrem/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour).ToString());
            Assert.Equal("1 mSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MillisievertPerHour).ToString());
            Assert.Equal("1 mSv/s", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MillisievertPerSecond).ToString());
            Assert.Equal("1 nSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.NanosievertPerHour).ToString());
            Assert.Equal("1 nSv/s", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.NanosievertPerSecond).ToString());
            Assert.Equal("1 rem/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour).ToString());
            Assert.Equal("1 Sv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString());
            Assert.Equal("1 Sv/s", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 µSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MicrosievertPerHour).ToString(swedishCulture));
            Assert.Equal("1 µSv/s", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MicrosievertPerSecond).ToString(swedishCulture));
            Assert.Equal("1 mrem/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MilliroentgenEquivalentManPerHour).ToString(swedishCulture));
            Assert.Equal("1 mSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MillisievertPerHour).ToString(swedishCulture));
            Assert.Equal("1 mSv/s", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.MillisievertPerSecond).ToString(swedishCulture));
            Assert.Equal("1 nSv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.NanosievertPerHour).ToString(swedishCulture));
            Assert.Equal("1 nSv/s", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.NanosievertPerSecond).ToString(swedishCulture));
            Assert.Equal("1 rem/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.RoentgenEquivalentManPerHour).ToString(swedishCulture));
            Assert.Equal("1 Sv/h", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.SievertPerHour).ToString(swedishCulture));
            Assert.Equal("1 Sv/s", new RadiationEquivalentDoseRate(1, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Sv/s", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString("s1"));
            Assert.Equal("0.12 Sv/s", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString("s2"));
            Assert.Equal("0.123 Sv/s", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString("s3"));
            Assert.Equal("0.1235 Sv/s", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Sv/s", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 Sv/s", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 Sv/s", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 Sv/s", new RadiationEquivalentDoseRate(0.123456, RadiationEquivalentDoseRateUnit.SievertPerSecond).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerSecond(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerSecond(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerSecond(1.0);
            Assert.Equal(new {RadiationEquivalentDoseRate.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = RadiationEquivalentDoseRate.FromSievertsPerSecond(value);
            Assert.Equal(RadiationEquivalentDoseRate.FromSievertsPerSecond(-value), -quantity);
        }
    }
}
