//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics and engineering, in particular fluid dynamics and hydrometry, the volumetric flow rate, (also known as volume flow rate, rate of fluid flow or volume velocity) is the volume of fluid which passes through a given surface per unit time. The SI unit is m³/s (cubic meters per second). In US Customary Units and British Imperial Units, volumetric flow rate is often expressed as ft³/s (cubic feet per second). It is usually represented by the symbol Q.
    /// </summary>
    public struct  VolumeFlow
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeFlowUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public VolumeFlowUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public VolumeFlow(double value, VolumeFlowUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of VolumeFlow, which is Second. All conversions go via this value.
        /// </summary>
        public static VolumeFlowUnit BaseUnit { get; } = VolumeFlowUnit.CubicMeterPerSecond;

        /// <summary>
        /// Represents the largest possible value of VolumeFlow.
        /// </summary>
        public static VolumeFlow MaxValue { get; } = new VolumeFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of VolumeFlow.
        /// </summary>
        public static VolumeFlow MinValue { get; } = new VolumeFlow(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static VolumeFlow Zero { get; } = new VolumeFlow(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.AcreFootPerDay"/>
        /// </summary>
        public double AcreFeetPerDay => As(VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.AcreFootPerHour"/>
        /// </summary>
        public double AcreFeetPerHour => As(VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.AcreFootPerMinute"/>
        /// </summary>
        public double AcreFeetPerMinute => As(VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.AcreFootPerSecond"/>
        /// </summary>
        public double AcreFeetPerSecond => As(VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CentiliterPerDay"/>
        /// </summary>
        public double CentilitersPerDay => As(VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CentiliterPerHour"/>
        /// </summary>
        public double CentilitersPerHour => As(VolumeFlowUnit.CentiliterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CentiliterPerMinute"/>
        /// </summary>
        public double CentilitersPerMinute => As(VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CentiliterPerSecond"/>
        /// </summary>
        public double CentilitersPerSecond => As(VolumeFlowUnit.CentiliterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicCentimeterPerMinute"/>
        /// </summary>
        public double CubicCentimetersPerMinute => As(VolumeFlowUnit.CubicCentimeterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicDecimeterPerMinute"/>
        /// </summary>
        public double CubicDecimetersPerMinute => As(VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicFootPerHour"/>
        /// </summary>
        public double CubicFeetPerHour => As(VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicFootPerMinute"/>
        /// </summary>
        public double CubicFeetPerMinute => As(VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicFootPerSecond"/>
        /// </summary>
        public double CubicFeetPerSecond => As(VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicMeterPerDay"/>
        /// </summary>
        public double CubicMetersPerDay => As(VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicMeterPerHour"/>
        /// </summary>
        public double CubicMetersPerHour => As(VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicMeterPerMinute"/>
        /// </summary>
        public double CubicMetersPerMinute => As(VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicMeterPerSecond"/>
        /// </summary>
        public double CubicMetersPerSecond => As(VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicMillimeterPerSecond"/>
        /// </summary>
        public double CubicMillimetersPerSecond => As(VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicYardPerDay"/>
        /// </summary>
        public double CubicYardsPerDay => As(VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicYardPerHour"/>
        /// </summary>
        public double CubicYardsPerHour => As(VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicYardPerMinute"/>
        /// </summary>
        public double CubicYardsPerMinute => As(VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.CubicYardPerSecond"/>
        /// </summary>
        public double CubicYardsPerSecond => As(VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.DecaliterPerDay"/>
        /// </summary>
        public double DecalitersPerDay => As(VolumeFlowUnit.DecaliterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.DecaliterPerHour"/>
        /// </summary>
        public double DecalitersPerHour => As(VolumeFlowUnit.DecaliterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.DecaliterPerMinute"/>
        /// </summary>
        public double DecalitersPerMinute => As(VolumeFlowUnit.DecaliterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.DecaliterPerSecond"/>
        /// </summary>
        public double DecalitersPerSecond => As(VolumeFlowUnit.DecaliterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.DeciliterPerDay"/>
        /// </summary>
        public double DecilitersPerDay => As(VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.DeciliterPerHour"/>
        /// </summary>
        public double DecilitersPerHour => As(VolumeFlowUnit.DeciliterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.DeciliterPerMinute"/>
        /// </summary>
        public double DecilitersPerMinute => As(VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.DeciliterPerSecond"/>
        /// </summary>
        public double DecilitersPerSecond => As(VolumeFlowUnit.DeciliterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.HectoliterPerDay"/>
        /// </summary>
        public double HectolitersPerDay => As(VolumeFlowUnit.HectoliterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.HectoliterPerHour"/>
        /// </summary>
        public double HectolitersPerHour => As(VolumeFlowUnit.HectoliterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.HectoliterPerMinute"/>
        /// </summary>
        public double HectolitersPerMinute => As(VolumeFlowUnit.HectoliterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.HectoliterPerSecond"/>
        /// </summary>
        public double HectolitersPerSecond => As(VolumeFlowUnit.HectoliterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.KiloliterPerDay"/>
        /// </summary>
        public double KilolitersPerDay => As(VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.KiloliterPerHour"/>
        /// </summary>
        public double KilolitersPerHour => As(VolumeFlowUnit.KiloliterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.KiloliterPerMinute"/>
        /// </summary>
        public double KilolitersPerMinute => As(VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.KiloliterPerSecond"/>
        /// </summary>
        public double KilolitersPerSecond => As(VolumeFlowUnit.KiloliterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.KilousGallonPerMinute"/>
        /// </summary>
        public double KilousGallonsPerMinute => As(VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.LiterPerDay"/>
        /// </summary>
        public double LitersPerDay => As(VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.LiterPerHour"/>
        /// </summary>
        public double LitersPerHour => As(VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.LiterPerMinute"/>
        /// </summary>
        public double LitersPerMinute => As(VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.LiterPerSecond"/>
        /// </summary>
        public double LitersPerSecond => As(VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MegaliterPerDay"/>
        /// </summary>
        public double MegalitersPerDay => As(VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MegaliterPerHour"/>
        /// </summary>
        public double MegalitersPerHour => As(VolumeFlowUnit.MegaliterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MegaliterPerMinute"/>
        /// </summary>
        public double MegalitersPerMinute => As(VolumeFlowUnit.MegaliterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MegaliterPerSecond"/>
        /// </summary>
        public double MegalitersPerSecond => As(VolumeFlowUnit.MegaliterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MegaukGallonPerDay"/>
        /// </summary>
        public double MegaukGallonsPerDay => As(VolumeFlowUnit.MegaukGallonPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MegaukGallonPerSecond"/>
        /// </summary>
        public double MegaukGallonsPerSecond => As(VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MegausGallonPerDay"/>
        /// </summary>
        public double MegausGallonsPerDay => As(VolumeFlowUnit.MegausGallonPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MicroliterPerDay"/>
        /// </summary>
        public double MicrolitersPerDay => As(VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MicroliterPerHour"/>
        /// </summary>
        public double MicrolitersPerHour => As(VolumeFlowUnit.MicroliterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MicroliterPerMinute"/>
        /// </summary>
        public double MicrolitersPerMinute => As(VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MicroliterPerSecond"/>
        /// </summary>
        public double MicrolitersPerSecond => As(VolumeFlowUnit.MicroliterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MilliliterPerDay"/>
        /// </summary>
        public double MillilitersPerDay => As(VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MilliliterPerHour"/>
        /// </summary>
        public double MillilitersPerHour => As(VolumeFlowUnit.MilliliterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MilliliterPerMinute"/>
        /// </summary>
        public double MillilitersPerMinute => As(VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MilliliterPerSecond"/>
        /// </summary>
        public double MillilitersPerSecond => As(VolumeFlowUnit.MilliliterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.MillionUsGallonPerDay"/>
        /// </summary>
        public double MillionUsGallonsPerDay => As(VolumeFlowUnit.MillionUsGallonPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.NanoliterPerDay"/>
        /// </summary>
        public double NanolitersPerDay => As(VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.NanoliterPerHour"/>
        /// </summary>
        public double NanolitersPerHour => As(VolumeFlowUnit.NanoliterPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.NanoliterPerMinute"/>
        /// </summary>
        public double NanolitersPerMinute => As(VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.NanoliterPerSecond"/>
        /// </summary>
        public double NanolitersPerSecond => As(VolumeFlowUnit.NanoliterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.OilBarrelPerDay"/>
        /// </summary>
        public double OilBarrelsPerDay => As(VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.OilBarrelPerHour"/>
        /// </summary>
        public double OilBarrelsPerHour => As(VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.OilBarrelPerMinute"/>
        /// </summary>
        public double OilBarrelsPerMinute => As(VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.OilBarrelPerSecond"/>
        /// </summary>
        public double OilBarrelsPerSecond => As(VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.UkGallonPerDay"/>
        /// </summary>
        public double UkGallonsPerDay => As(VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.UkGallonPerHour"/>
        /// </summary>
        public double UkGallonsPerHour => As(VolumeFlowUnit.UkGallonPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.UkGallonPerMinute"/>
        /// </summary>
        public double UkGallonsPerMinute => As(VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.UkGallonPerSecond"/>
        /// </summary>
        public double UkGallonsPerSecond => As(VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.UsGallonPerDay"/>
        /// </summary>
        public double UsGallonsPerDay => As(VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.UsGallonPerHour"/>
        /// </summary>
        public double UsGallonsPerHour => As(VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.UsGallonPerMinute"/>
        /// </summary>
        public double UsGallonsPerMinute => As(VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeFlowUnit.UsGallonPerSecond"/>
        /// </summary>
        public double UsGallonsPerSecond => As(VolumeFlowUnit.UsGallonPerSecond);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.AcreFootPerDay"/>.
        /// </summary>
        public static VolumeFlow FromAcreFeetPerDay(double acrefeetperday) => new VolumeFlow(acrefeetperday, VolumeFlowUnit.AcreFootPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.AcreFootPerHour"/>.
        /// </summary>
        public static VolumeFlow FromAcreFeetPerHour(double acrefeetperhour) => new VolumeFlow(acrefeetperhour, VolumeFlowUnit.AcreFootPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.AcreFootPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromAcreFeetPerMinute(double acrefeetperminute) => new VolumeFlow(acrefeetperminute, VolumeFlowUnit.AcreFootPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.AcreFootPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromAcreFeetPerSecond(double acrefeetpersecond) => new VolumeFlow(acrefeetpersecond, VolumeFlowUnit.AcreFootPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CentiliterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromCentilitersPerDay(double centilitersperday) => new VolumeFlow(centilitersperday, VolumeFlowUnit.CentiliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CentiliterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromCentilitersPerHour(double centilitersperhour) => new VolumeFlow(centilitersperhour, VolumeFlowUnit.CentiliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CentiliterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromCentilitersPerMinute(double centilitersperminute) => new VolumeFlow(centilitersperminute, VolumeFlowUnit.CentiliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CentiliterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromCentilitersPerSecond(double centiliterspersecond) => new VolumeFlow(centiliterspersecond, VolumeFlowUnit.CentiliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicCentimeterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromCubicCentimetersPerMinute(double cubiccentimetersperminute) => new VolumeFlow(cubiccentimetersperminute, VolumeFlowUnit.CubicCentimeterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicDecimeterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromCubicDecimetersPerMinute(double cubicdecimetersperminute) => new VolumeFlow(cubicdecimetersperminute, VolumeFlowUnit.CubicDecimeterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicFootPerHour"/>.
        /// </summary>
        public static VolumeFlow FromCubicFeetPerHour(double cubicfeetperhour) => new VolumeFlow(cubicfeetperhour, VolumeFlowUnit.CubicFootPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicFootPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromCubicFeetPerMinute(double cubicfeetperminute) => new VolumeFlow(cubicfeetperminute, VolumeFlowUnit.CubicFootPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicFootPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromCubicFeetPerSecond(double cubicfeetpersecond) => new VolumeFlow(cubicfeetpersecond, VolumeFlowUnit.CubicFootPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMeterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromCubicMetersPerDay(double cubicmetersperday) => new VolumeFlow(cubicmetersperday, VolumeFlowUnit.CubicMeterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMeterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromCubicMetersPerHour(double cubicmetersperhour) => new VolumeFlow(cubicmetersperhour, VolumeFlowUnit.CubicMeterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMeterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromCubicMetersPerMinute(double cubicmetersperminute) => new VolumeFlow(cubicmetersperminute, VolumeFlowUnit.CubicMeterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMeterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromCubicMetersPerSecond(double cubicmeterspersecond) => new VolumeFlow(cubicmeterspersecond, VolumeFlowUnit.CubicMeterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicMillimeterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromCubicMillimetersPerSecond(double cubicmillimeterspersecond) => new VolumeFlow(cubicmillimeterspersecond, VolumeFlowUnit.CubicMillimeterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicYardPerDay"/>.
        /// </summary>
        public static VolumeFlow FromCubicYardsPerDay(double cubicyardsperday) => new VolumeFlow(cubicyardsperday, VolumeFlowUnit.CubicYardPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicYardPerHour"/>.
        /// </summary>
        public static VolumeFlow FromCubicYardsPerHour(double cubicyardsperhour) => new VolumeFlow(cubicyardsperhour, VolumeFlowUnit.CubicYardPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicYardPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromCubicYardsPerMinute(double cubicyardsperminute) => new VolumeFlow(cubicyardsperminute, VolumeFlowUnit.CubicYardPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.CubicYardPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromCubicYardsPerSecond(double cubicyardspersecond) => new VolumeFlow(cubicyardspersecond, VolumeFlowUnit.CubicYardPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DecaliterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromDecalitersPerDay(double decalitersperday) => new VolumeFlow(decalitersperday, VolumeFlowUnit.DecaliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DecaliterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromDecalitersPerHour(double decalitersperhour) => new VolumeFlow(decalitersperhour, VolumeFlowUnit.DecaliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DecaliterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromDecalitersPerMinute(double decalitersperminute) => new VolumeFlow(decalitersperminute, VolumeFlowUnit.DecaliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DecaliterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromDecalitersPerSecond(double decaliterspersecond) => new VolumeFlow(decaliterspersecond, VolumeFlowUnit.DecaliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DeciliterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromDecilitersPerDay(double decilitersperday) => new VolumeFlow(decilitersperday, VolumeFlowUnit.DeciliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DeciliterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromDecilitersPerHour(double decilitersperhour) => new VolumeFlow(decilitersperhour, VolumeFlowUnit.DeciliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DeciliterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromDecilitersPerMinute(double decilitersperminute) => new VolumeFlow(decilitersperminute, VolumeFlowUnit.DeciliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.DeciliterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromDecilitersPerSecond(double deciliterspersecond) => new VolumeFlow(deciliterspersecond, VolumeFlowUnit.DeciliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.HectoliterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromHectolitersPerDay(double hectolitersperday) => new VolumeFlow(hectolitersperday, VolumeFlowUnit.HectoliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.HectoliterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromHectolitersPerHour(double hectolitersperhour) => new VolumeFlow(hectolitersperhour, VolumeFlowUnit.HectoliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.HectoliterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromHectolitersPerMinute(double hectolitersperminute) => new VolumeFlow(hectolitersperminute, VolumeFlowUnit.HectoliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.HectoliterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromHectolitersPerSecond(double hectoliterspersecond) => new VolumeFlow(hectoliterspersecond, VolumeFlowUnit.HectoliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KiloliterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromKilolitersPerDay(double kilolitersperday) => new VolumeFlow(kilolitersperday, VolumeFlowUnit.KiloliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KiloliterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromKilolitersPerHour(double kilolitersperhour) => new VolumeFlow(kilolitersperhour, VolumeFlowUnit.KiloliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KiloliterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromKilolitersPerMinute(double kilolitersperminute) => new VolumeFlow(kilolitersperminute, VolumeFlowUnit.KiloliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KiloliterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromKilolitersPerSecond(double kiloliterspersecond) => new VolumeFlow(kiloliterspersecond, VolumeFlowUnit.KiloliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.KilousGallonPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromKilousGallonsPerMinute(double kilousgallonsperminute) => new VolumeFlow(kilousgallonsperminute, VolumeFlowUnit.KilousGallonPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.LiterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromLitersPerDay(double litersperday) => new VolumeFlow(litersperday, VolumeFlowUnit.LiterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.LiterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromLitersPerHour(double litersperhour) => new VolumeFlow(litersperhour, VolumeFlowUnit.LiterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.LiterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromLitersPerMinute(double litersperminute) => new VolumeFlow(litersperminute, VolumeFlowUnit.LiterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.LiterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromLitersPerSecond(double literspersecond) => new VolumeFlow(literspersecond, VolumeFlowUnit.LiterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MegaliterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromMegalitersPerDay(double megalitersperday) => new VolumeFlow(megalitersperday, VolumeFlowUnit.MegaliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MegaliterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromMegalitersPerHour(double megalitersperhour) => new VolumeFlow(megalitersperhour, VolumeFlowUnit.MegaliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MegaliterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromMegalitersPerMinute(double megalitersperminute) => new VolumeFlow(megalitersperminute, VolumeFlowUnit.MegaliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MegaliterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromMegalitersPerSecond(double megaliterspersecond) => new VolumeFlow(megaliterspersecond, VolumeFlowUnit.MegaliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MegaukGallonPerDay"/>.
        /// </summary>
        public static VolumeFlow FromMegaukGallonsPerDay(double megaukgallonsperday) => new VolumeFlow(megaukgallonsperday, VolumeFlowUnit.MegaukGallonPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MegaukGallonPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromMegaukGallonsPerSecond(double megaukgallonspersecond) => new VolumeFlow(megaukgallonspersecond, VolumeFlowUnit.MegaukGallonPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MegausGallonPerDay"/>.
        /// </summary>
        public static VolumeFlow FromMegausGallonsPerDay(double megausgallonsperday) => new VolumeFlow(megausgallonsperday, VolumeFlowUnit.MegausGallonPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MicroliterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromMicrolitersPerDay(double microlitersperday) => new VolumeFlow(microlitersperday, VolumeFlowUnit.MicroliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MicroliterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromMicrolitersPerHour(double microlitersperhour) => new VolumeFlow(microlitersperhour, VolumeFlowUnit.MicroliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MicroliterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromMicrolitersPerMinute(double microlitersperminute) => new VolumeFlow(microlitersperminute, VolumeFlowUnit.MicroliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MicroliterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromMicrolitersPerSecond(double microliterspersecond) => new VolumeFlow(microliterspersecond, VolumeFlowUnit.MicroliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MilliliterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromMillilitersPerDay(double millilitersperday) => new VolumeFlow(millilitersperday, VolumeFlowUnit.MilliliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MilliliterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromMillilitersPerHour(double millilitersperhour) => new VolumeFlow(millilitersperhour, VolumeFlowUnit.MilliliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MilliliterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromMillilitersPerMinute(double millilitersperminute) => new VolumeFlow(millilitersperminute, VolumeFlowUnit.MilliliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MilliliterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromMillilitersPerSecond(double milliliterspersecond) => new VolumeFlow(milliliterspersecond, VolumeFlowUnit.MilliliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.MillionUsGallonPerDay"/>.
        /// </summary>
        public static VolumeFlow FromMillionUsGallonsPerDay(double millionusgallonsperday) => new VolumeFlow(millionusgallonsperday, VolumeFlowUnit.MillionUsGallonPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.NanoliterPerDay"/>.
        /// </summary>
        public static VolumeFlow FromNanolitersPerDay(double nanolitersperday) => new VolumeFlow(nanolitersperday, VolumeFlowUnit.NanoliterPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.NanoliterPerHour"/>.
        /// </summary>
        public static VolumeFlow FromNanolitersPerHour(double nanolitersperhour) => new VolumeFlow(nanolitersperhour, VolumeFlowUnit.NanoliterPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.NanoliterPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromNanolitersPerMinute(double nanolitersperminute) => new VolumeFlow(nanolitersperminute, VolumeFlowUnit.NanoliterPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.NanoliterPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromNanolitersPerSecond(double nanoliterspersecond) => new VolumeFlow(nanoliterspersecond, VolumeFlowUnit.NanoliterPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.OilBarrelPerDay"/>.
        /// </summary>
        public static VolumeFlow FromOilBarrelsPerDay(double oilbarrelsperday) => new VolumeFlow(oilbarrelsperday, VolumeFlowUnit.OilBarrelPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.OilBarrelPerHour"/>.
        /// </summary>
        public static VolumeFlow FromOilBarrelsPerHour(double oilbarrelsperhour) => new VolumeFlow(oilbarrelsperhour, VolumeFlowUnit.OilBarrelPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.OilBarrelPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromOilBarrelsPerMinute(double oilbarrelsperminute) => new VolumeFlow(oilbarrelsperminute, VolumeFlowUnit.OilBarrelPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.OilBarrelPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromOilBarrelsPerSecond(double oilbarrelspersecond) => new VolumeFlow(oilbarrelspersecond, VolumeFlowUnit.OilBarrelPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UkGallonPerDay"/>.
        /// </summary>
        public static VolumeFlow FromUkGallonsPerDay(double ukgallonsperday) => new VolumeFlow(ukgallonsperday, VolumeFlowUnit.UkGallonPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UkGallonPerHour"/>.
        /// </summary>
        public static VolumeFlow FromUkGallonsPerHour(double ukgallonsperhour) => new VolumeFlow(ukgallonsperhour, VolumeFlowUnit.UkGallonPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UkGallonPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromUkGallonsPerMinute(double ukgallonsperminute) => new VolumeFlow(ukgallonsperminute, VolumeFlowUnit.UkGallonPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UkGallonPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromUkGallonsPerSecond(double ukgallonspersecond) => new VolumeFlow(ukgallonspersecond, VolumeFlowUnit.UkGallonPerSecond);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UsGallonPerDay"/>.
        /// </summary>
        public static VolumeFlow FromUsGallonsPerDay(double usgallonsperday) => new VolumeFlow(usgallonsperday, VolumeFlowUnit.UsGallonPerDay);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UsGallonPerHour"/>.
        /// </summary>
        public static VolumeFlow FromUsGallonsPerHour(double usgallonsperhour) => new VolumeFlow(usgallonsperhour, VolumeFlowUnit.UsGallonPerHour);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UsGallonPerMinute"/>.
        /// </summary>
        public static VolumeFlow FromUsGallonsPerMinute(double usgallonsperminute) => new VolumeFlow(usgallonsperminute, VolumeFlowUnit.UsGallonPerMinute);

        /// <summary>
        ///     Creates a <see cref="VolumeFlow"/> from <see cref="VolumeFlowUnit.UsGallonPerSecond"/>.
        /// </summary>
        public static VolumeFlow FromUsGallonsPerSecond(double usgallonspersecond) => new VolumeFlow(usgallonspersecond, VolumeFlowUnit.UsGallonPerSecond);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeFlowUnit" /> to <see cref="VolumeFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>VolumeFlow unit value.</returns>
        public static VolumeFlow From(double value, VolumeFlowUnit fromUnit)
        {
            return new VolumeFlow(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(VolumeFlowUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this VolumeFlow to another VolumeFlow with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A VolumeFlow with the specified unit.</returns>
                public VolumeFlow ToUnit(VolumeFlowUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new VolumeFlow(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        VolumeFlowUnit.AcreFootPerDay => _value * 1233.48183754752 / 86400,
                        VolumeFlowUnit.AcreFootPerHour => _value * 1233.48183754752 / 3600,
                        VolumeFlowUnit.AcreFootPerMinute => _value * 1233.48183754752 / 60,
                        VolumeFlowUnit.AcreFootPerSecond => _value * 1233.48183754752,
                        VolumeFlowUnit.CentiliterPerDay => (_value / (1000 * 86400)) * 1e-2d,
                        VolumeFlowUnit.CentiliterPerHour => (_value / (1000 * 3600)) * 1e-2d,
                        VolumeFlowUnit.CentiliterPerMinute => (_value / (1000 * 60)) * 1e-2d,
                        VolumeFlowUnit.CentiliterPerSecond => (_value / 1000) * 1e-2d,
                        VolumeFlowUnit.CubicCentimeterPerMinute => _value * 1e-6 / 60,
                        VolumeFlowUnit.CubicDecimeterPerMinute => _value / 60000.00000,
                        VolumeFlowUnit.CubicFootPerHour => _value * 0.028316846592 / 3600,
                        VolumeFlowUnit.CubicFootPerMinute => _value * 0.028316846592 / 60,
                        VolumeFlowUnit.CubicFootPerSecond => _value * 0.028316846592,
                        VolumeFlowUnit.CubicMeterPerDay => _value / 86400,
                        VolumeFlowUnit.CubicMeterPerHour => _value / 3600,
                        VolumeFlowUnit.CubicMeterPerMinute => _value / 60,
                        VolumeFlowUnit.CubicMeterPerSecond => _value,
                        VolumeFlowUnit.CubicMillimeterPerSecond => _value * 1e-9,
                        VolumeFlowUnit.CubicYardPerDay => _value * 0.764554857984 / 86400,
                        VolumeFlowUnit.CubicYardPerHour => _value * 0.764554857984 / 3600,
                        VolumeFlowUnit.CubicYardPerMinute => _value * 0.764554857984 / 60,
                        VolumeFlowUnit.CubicYardPerSecond => _value * 0.764554857984,
                        VolumeFlowUnit.DecaliterPerDay => (_value / (1000 * 86400)) * 1e1d,
                        VolumeFlowUnit.DecaliterPerHour => (_value / (1000 * 3600)) * 1e1d,
                        VolumeFlowUnit.DecaliterPerMinute => (_value / (1000 * 60)) * 1e1d,
                        VolumeFlowUnit.DecaliterPerSecond => (_value / 1000) * 1e1d,
                        VolumeFlowUnit.DeciliterPerDay => (_value / (1000 * 86400)) * 1e-1d,
                        VolumeFlowUnit.DeciliterPerHour => (_value / (1000 * 3600)) * 1e-1d,
                        VolumeFlowUnit.DeciliterPerMinute => (_value / (1000 * 60)) * 1e-1d,
                        VolumeFlowUnit.DeciliterPerSecond => (_value / 1000) * 1e-1d,
                        VolumeFlowUnit.HectoliterPerDay => (_value / (1000 * 86400)) * 1e2d,
                        VolumeFlowUnit.HectoliterPerHour => (_value / (1000 * 3600)) * 1e2d,
                        VolumeFlowUnit.HectoliterPerMinute => (_value / (1000 * 60)) * 1e2d,
                        VolumeFlowUnit.HectoliterPerSecond => (_value / 1000) * 1e2d,
                        VolumeFlowUnit.KiloliterPerDay => (_value / (1000 * 86400)) * 1e3d,
                        VolumeFlowUnit.KiloliterPerHour => (_value / (1000 * 3600)) * 1e3d,
                        VolumeFlowUnit.KiloliterPerMinute => (_value / (1000 * 60)) * 1e3d,
                        VolumeFlowUnit.KiloliterPerSecond => (_value / 1000) * 1e3d,
                        VolumeFlowUnit.KilousGallonPerMinute => _value * 1000 * 0.003785411784 / 60,
                        VolumeFlowUnit.LiterPerDay => _value / (1000 * 86400),
                        VolumeFlowUnit.LiterPerHour => _value / (1000 * 3600),
                        VolumeFlowUnit.LiterPerMinute => _value / (1000 * 60),
                        VolumeFlowUnit.LiterPerSecond => _value / 1000,
                        VolumeFlowUnit.MegaliterPerDay => (_value / (1000 * 86400)) * 1e6d,
                        VolumeFlowUnit.MegaliterPerHour => (_value / (1000 * 3600)) * 1e6d,
                        VolumeFlowUnit.MegaliterPerMinute => (_value / (1000 * 60)) * 1e6d,
                        VolumeFlowUnit.MegaliterPerSecond => (_value / 1000) * 1e6d,
                        VolumeFlowUnit.MegaukGallonPerDay => (_value * 0.00454609 / 86400) * 1e6d,
                        VolumeFlowUnit.MegaukGallonPerSecond => (_value * 0.00454609) * 1e6d,
                        VolumeFlowUnit.MegausGallonPerDay => (_value * 0.003785411784 / 86400) * 1e6d,
                        VolumeFlowUnit.MicroliterPerDay => (_value / (1000 * 86400)) * 1e-6d,
                        VolumeFlowUnit.MicroliterPerHour => (_value / (1000 * 3600)) * 1e-6d,
                        VolumeFlowUnit.MicroliterPerMinute => (_value / (1000 * 60)) * 1e-6d,
                        VolumeFlowUnit.MicroliterPerSecond => (_value / 1000) * 1e-6d,
                        VolumeFlowUnit.MilliliterPerDay => (_value / (1000 * 86400)) * 1e-3d,
                        VolumeFlowUnit.MilliliterPerHour => (_value / (1000 * 3600)) * 1e-3d,
                        VolumeFlowUnit.MilliliterPerMinute => (_value / (1000 * 60)) * 1e-3d,
                        VolumeFlowUnit.MilliliterPerSecond => (_value / 1000) * 1e-3d,
                        VolumeFlowUnit.MillionUsGallonPerDay => _value * 1e6 * 0.003785411784 / 86400,
                        VolumeFlowUnit.NanoliterPerDay => (_value / (1000 * 86400)) * 1e-9d,
                        VolumeFlowUnit.NanoliterPerHour => (_value / (1000 * 3600)) * 1e-9d,
                        VolumeFlowUnit.NanoliterPerMinute => (_value / (1000 * 60)) * 1e-9d,
                        VolumeFlowUnit.NanoliterPerSecond => (_value / 1000) * 1e-9d,
                        VolumeFlowUnit.OilBarrelPerDay => _value * 0.158987294928 / 86400,
                        VolumeFlowUnit.OilBarrelPerHour => _value * 0.158987294928 / 3600,
                        VolumeFlowUnit.OilBarrelPerMinute => _value * 0.158987294928 / 60,
                        VolumeFlowUnit.OilBarrelPerSecond => _value * 0.158987294928,
                        VolumeFlowUnit.UkGallonPerDay => _value * 0.00454609 / 86400,
                        VolumeFlowUnit.UkGallonPerHour => _value * 0.00454609 / 3600,
                        VolumeFlowUnit.UkGallonPerMinute => _value * 0.00454609 / 60,
                        VolumeFlowUnit.UkGallonPerSecond => _value * 0.00454609,
                        VolumeFlowUnit.UsGallonPerDay => _value * 0.003785411784 / 86400,
                        VolumeFlowUnit.UsGallonPerHour => _value * 0.003785411784 / 3600,
                        VolumeFlowUnit.UsGallonPerMinute => _value * 0.003785411784 / 60,
                        VolumeFlowUnit.UsGallonPerSecond => _value * 0.003785411784,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(VolumeFlowUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        VolumeFlowUnit.AcreFootPerDay => baseUnitValue / (1233.48183754752 / 86400),
                        VolumeFlowUnit.AcreFootPerHour => baseUnitValue / (1233.48183754752 / 3600),
                        VolumeFlowUnit.AcreFootPerMinute => baseUnitValue / (1233.48183754752 / 60),
                        VolumeFlowUnit.AcreFootPerSecond => baseUnitValue / 1233.48183754752,
                        VolumeFlowUnit.CentiliterPerDay => (baseUnitValue * (1000 * 86400)) / 1e-2d,
                        VolumeFlowUnit.CentiliterPerHour => (baseUnitValue * (1000 * 3600)) / 1e-2d,
                        VolumeFlowUnit.CentiliterPerMinute => (baseUnitValue * (1000 * 60)) / 1e-2d,
                        VolumeFlowUnit.CentiliterPerSecond => (baseUnitValue * 1000) / 1e-2d,
                        VolumeFlowUnit.CubicCentimeterPerMinute => baseUnitValue / (1e-6 / 60),
                        VolumeFlowUnit.CubicDecimeterPerMinute => baseUnitValue * 60000.00000,
                        VolumeFlowUnit.CubicFootPerHour => baseUnitValue / (0.028316846592 / 3600),
                        VolumeFlowUnit.CubicFootPerMinute => baseUnitValue / (0.028316846592 / 60),
                        VolumeFlowUnit.CubicFootPerSecond => baseUnitValue / 0.028316846592,
                        VolumeFlowUnit.CubicMeterPerDay => baseUnitValue * 86400,
                        VolumeFlowUnit.CubicMeterPerHour => baseUnitValue * 3600,
                        VolumeFlowUnit.CubicMeterPerMinute => baseUnitValue * 60,
                        VolumeFlowUnit.CubicMeterPerSecond => baseUnitValue,
                        VolumeFlowUnit.CubicMillimeterPerSecond => baseUnitValue / 1e-9,
                        VolumeFlowUnit.CubicYardPerDay => baseUnitValue / (0.764554857984 / 86400),
                        VolumeFlowUnit.CubicYardPerHour => baseUnitValue / (0.764554857984 / 3600),
                        VolumeFlowUnit.CubicYardPerMinute => baseUnitValue / (0.764554857984 / 60),
                        VolumeFlowUnit.CubicYardPerSecond => baseUnitValue / 0.764554857984,
                        VolumeFlowUnit.DecaliterPerDay => (baseUnitValue * (1000 * 86400)) / 1e1d,
                        VolumeFlowUnit.DecaliterPerHour => (baseUnitValue * (1000 * 3600)) / 1e1d,
                        VolumeFlowUnit.DecaliterPerMinute => (baseUnitValue * (1000 * 60)) / 1e1d,
                        VolumeFlowUnit.DecaliterPerSecond => (baseUnitValue * 1000) / 1e1d,
                        VolumeFlowUnit.DeciliterPerDay => (baseUnitValue * (1000 * 86400)) / 1e-1d,
                        VolumeFlowUnit.DeciliterPerHour => (baseUnitValue * (1000 * 3600)) / 1e-1d,
                        VolumeFlowUnit.DeciliterPerMinute => (baseUnitValue * (1000 * 60)) / 1e-1d,
                        VolumeFlowUnit.DeciliterPerSecond => (baseUnitValue * 1000) / 1e-1d,
                        VolumeFlowUnit.HectoliterPerDay => (baseUnitValue * (1000 * 86400)) / 1e2d,
                        VolumeFlowUnit.HectoliterPerHour => (baseUnitValue * (1000 * 3600)) / 1e2d,
                        VolumeFlowUnit.HectoliterPerMinute => (baseUnitValue * (1000 * 60)) / 1e2d,
                        VolumeFlowUnit.HectoliterPerSecond => (baseUnitValue * 1000) / 1e2d,
                        VolumeFlowUnit.KiloliterPerDay => (baseUnitValue * (1000 * 86400)) / 1e3d,
                        VolumeFlowUnit.KiloliterPerHour => (baseUnitValue * (1000 * 3600)) / 1e3d,
                        VolumeFlowUnit.KiloliterPerMinute => (baseUnitValue * (1000 * 60)) / 1e3d,
                        VolumeFlowUnit.KiloliterPerSecond => (baseUnitValue * 1000) / 1e3d,
                        VolumeFlowUnit.KilousGallonPerMinute => baseUnitValue / (1000 * 0.003785411784 / 60),
                        VolumeFlowUnit.LiterPerDay => baseUnitValue * (1000 * 86400),
                        VolumeFlowUnit.LiterPerHour => baseUnitValue * (1000 * 3600),
                        VolumeFlowUnit.LiterPerMinute => baseUnitValue * (1000 * 60),
                        VolumeFlowUnit.LiterPerSecond => baseUnitValue * 1000,
                        VolumeFlowUnit.MegaliterPerDay => (baseUnitValue * (1000 * 86400)) / 1e6d,
                        VolumeFlowUnit.MegaliterPerHour => (baseUnitValue * (1000 * 3600)) / 1e6d,
                        VolumeFlowUnit.MegaliterPerMinute => (baseUnitValue * (1000 * 60)) / 1e6d,
                        VolumeFlowUnit.MegaliterPerSecond => (baseUnitValue * 1000) / 1e6d,
                        VolumeFlowUnit.MegaukGallonPerDay => (baseUnitValue / (0.00454609 / 86400)) / 1e6d,
                        VolumeFlowUnit.MegaukGallonPerSecond => (baseUnitValue / 0.00454609) / 1e6d,
                        VolumeFlowUnit.MegausGallonPerDay => (baseUnitValue / (0.003785411784 / 86400)) / 1e6d,
                        VolumeFlowUnit.MicroliterPerDay => (baseUnitValue * (1000 * 86400)) / 1e-6d,
                        VolumeFlowUnit.MicroliterPerHour => (baseUnitValue * (1000 * 3600)) / 1e-6d,
                        VolumeFlowUnit.MicroliterPerMinute => (baseUnitValue * (1000 * 60)) / 1e-6d,
                        VolumeFlowUnit.MicroliterPerSecond => (baseUnitValue * 1000) / 1e-6d,
                        VolumeFlowUnit.MilliliterPerDay => (baseUnitValue * (1000 * 86400)) / 1e-3d,
                        VolumeFlowUnit.MilliliterPerHour => (baseUnitValue * (1000 * 3600)) / 1e-3d,
                        VolumeFlowUnit.MilliliterPerMinute => (baseUnitValue * (1000 * 60)) / 1e-3d,
                        VolumeFlowUnit.MilliliterPerSecond => (baseUnitValue * 1000) / 1e-3d,
                        VolumeFlowUnit.MillionUsGallonPerDay => baseUnitValue / (1e6 * 0.003785411784 / 86400),
                        VolumeFlowUnit.NanoliterPerDay => (baseUnitValue * (1000 * 86400)) / 1e-9d,
                        VolumeFlowUnit.NanoliterPerHour => (baseUnitValue * (1000 * 3600)) / 1e-9d,
                        VolumeFlowUnit.NanoliterPerMinute => (baseUnitValue * (1000 * 60)) / 1e-9d,
                        VolumeFlowUnit.NanoliterPerSecond => (baseUnitValue * 1000) / 1e-9d,
                        VolumeFlowUnit.OilBarrelPerDay => baseUnitValue / (0.158987294928 / 86400),
                        VolumeFlowUnit.OilBarrelPerHour => baseUnitValue / (0.158987294928 / 3600),
                        VolumeFlowUnit.OilBarrelPerMinute => baseUnitValue / (0.158987294928 / 60),
                        VolumeFlowUnit.OilBarrelPerSecond => baseUnitValue / 0.158987294928,
                        VolumeFlowUnit.UkGallonPerDay => baseUnitValue / (0.00454609 / 86400),
                        VolumeFlowUnit.UkGallonPerHour => baseUnitValue / (0.00454609 / 3600),
                        VolumeFlowUnit.UkGallonPerMinute => baseUnitValue / (0.00454609 / 60),
                        VolumeFlowUnit.UkGallonPerSecond => baseUnitValue / 0.00454609,
                        VolumeFlowUnit.UsGallonPerDay => baseUnitValue / (0.003785411784 / 86400),
                        VolumeFlowUnit.UsGallonPerHour => baseUnitValue / (0.003785411784 / 3600),
                        VolumeFlowUnit.UsGallonPerMinute => baseUnitValue / (0.003785411784 / 60),
                        VolumeFlowUnit.UsGallonPerSecond => baseUnitValue / 0.003785411784,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

