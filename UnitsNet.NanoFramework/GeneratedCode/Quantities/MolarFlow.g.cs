//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Molar flow is the ratio of the amount of substance change to the time during which the change occurred (value of amount of substance changes per unit time).
    /// </summary>
    public struct  MolarFlow
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly MolarFlowUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public MolarFlowUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public MolarFlow(double value, MolarFlowUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of MolarFlow, which is Second. All conversions go via this value.
        /// </summary>
        public static MolarFlowUnit BaseUnit { get; } = MolarFlowUnit.MolePerSecond;

        /// <summary>
        /// Represents the largest possible value of MolarFlow.
        /// </summary>
        public static MolarFlow MaxValue { get; } = new MolarFlow(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of MolarFlow.
        /// </summary>
        public static MolarFlow MinValue { get; } = new MolarFlow(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static MolarFlow Zero { get; } = new MolarFlow(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MolarFlowUnit.KilomolePerHour"/>
        /// </summary>
        public double KilomolesPerHour => As(MolarFlowUnit.KilomolePerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MolarFlowUnit.KilomolePerMinute"/>
        /// </summary>
        public double KilomolesPerMinute => As(MolarFlowUnit.KilomolePerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MolarFlowUnit.KilomolePerSecond"/>
        /// </summary>
        public double KilomolesPerSecond => As(MolarFlowUnit.KilomolePerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MolarFlowUnit.MolePerHour"/>
        /// </summary>
        public double MolesPerHour => As(MolarFlowUnit.MolePerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MolarFlowUnit.MolePerMinute"/>
        /// </summary>
        public double MolesPerMinute => As(MolarFlowUnit.MolePerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MolarFlowUnit.MolePerSecond"/>
        /// </summary>
        public double MolesPerSecond => As(MolarFlowUnit.MolePerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MolarFlowUnit.PoundMolePerHour"/>
        /// </summary>
        public double PoundMolesPerHour => As(MolarFlowUnit.PoundMolePerHour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MolarFlowUnit.PoundMolePerMinute"/>
        /// </summary>
        public double PoundMolesPerMinute => As(MolarFlowUnit.PoundMolePerMinute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="MolarFlowUnit.PoundMolePerSecond"/>
        /// </summary>
        public double PoundMolesPerSecond => As(MolarFlowUnit.PoundMolePerSecond);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="MolarFlow"/> from <see cref="MolarFlowUnit.KilomolePerHour"/>.
        /// </summary>
        public static MolarFlow FromKilomolesPerHour(double kilomolesperhour) => new MolarFlow(kilomolesperhour, MolarFlowUnit.KilomolePerHour);

        /// <summary>
        ///     Creates a <see cref="MolarFlow"/> from <see cref="MolarFlowUnit.KilomolePerMinute"/>.
        /// </summary>
        public static MolarFlow FromKilomolesPerMinute(double kilomolesperminute) => new MolarFlow(kilomolesperminute, MolarFlowUnit.KilomolePerMinute);

        /// <summary>
        ///     Creates a <see cref="MolarFlow"/> from <see cref="MolarFlowUnit.KilomolePerSecond"/>.
        /// </summary>
        public static MolarFlow FromKilomolesPerSecond(double kilomolespersecond) => new MolarFlow(kilomolespersecond, MolarFlowUnit.KilomolePerSecond);

        /// <summary>
        ///     Creates a <see cref="MolarFlow"/> from <see cref="MolarFlowUnit.MolePerHour"/>.
        /// </summary>
        public static MolarFlow FromMolesPerHour(double molesperhour) => new MolarFlow(molesperhour, MolarFlowUnit.MolePerHour);

        /// <summary>
        ///     Creates a <see cref="MolarFlow"/> from <see cref="MolarFlowUnit.MolePerMinute"/>.
        /// </summary>
        public static MolarFlow FromMolesPerMinute(double molesperminute) => new MolarFlow(molesperminute, MolarFlowUnit.MolePerMinute);

        /// <summary>
        ///     Creates a <see cref="MolarFlow"/> from <see cref="MolarFlowUnit.MolePerSecond"/>.
        /// </summary>
        public static MolarFlow FromMolesPerSecond(double molespersecond) => new MolarFlow(molespersecond, MolarFlowUnit.MolePerSecond);

        /// <summary>
        ///     Creates a <see cref="MolarFlow"/> from <see cref="MolarFlowUnit.PoundMolePerHour"/>.
        /// </summary>
        public static MolarFlow FromPoundMolesPerHour(double poundmolesperhour) => new MolarFlow(poundmolesperhour, MolarFlowUnit.PoundMolePerHour);

        /// <summary>
        ///     Creates a <see cref="MolarFlow"/> from <see cref="MolarFlowUnit.PoundMolePerMinute"/>.
        /// </summary>
        public static MolarFlow FromPoundMolesPerMinute(double poundmolesperminute) => new MolarFlow(poundmolesperminute, MolarFlowUnit.PoundMolePerMinute);

        /// <summary>
        ///     Creates a <see cref="MolarFlow"/> from <see cref="MolarFlowUnit.PoundMolePerSecond"/>.
        /// </summary>
        public static MolarFlow FromPoundMolesPerSecond(double poundmolespersecond) => new MolarFlow(poundmolespersecond, MolarFlowUnit.PoundMolePerSecond);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="MolarFlowUnit" /> to <see cref="MolarFlow" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>MolarFlow unit value.</returns>
        public static MolarFlow From(double value, MolarFlowUnit fromUnit)
        {
            return new MolarFlow(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(MolarFlowUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this MolarFlow to another MolarFlow with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A MolarFlow with the specified unit.</returns>
                public MolarFlow ToUnit(MolarFlowUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new MolarFlow(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        MolarFlowUnit.KilomolePerHour => (_value / 3600) * 1e3d,
                        MolarFlowUnit.KilomolePerMinute => (_value / 60) * 1e3d,
                        MolarFlowUnit.KilomolePerSecond => (_value) * 1e3d,
                        MolarFlowUnit.MolePerHour => _value / 3600,
                        MolarFlowUnit.MolePerMinute => _value / 60,
                        MolarFlowUnit.MolePerSecond => _value,
                        MolarFlowUnit.PoundMolePerHour => (_value * 453.59237) / 3600,
                        MolarFlowUnit.PoundMolePerMinute => (_value * 453.59237) / 60,
                        MolarFlowUnit.PoundMolePerSecond => _value * 453.59237,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(MolarFlowUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        MolarFlowUnit.KilomolePerHour => (baseUnitValue * 3600) / 1e3d,
                        MolarFlowUnit.KilomolePerMinute => (baseUnitValue * 60) / 1e3d,
                        MolarFlowUnit.KilomolePerSecond => (baseUnitValue) / 1e3d,
                        MolarFlowUnit.MolePerHour => baseUnitValue * 3600,
                        MolarFlowUnit.MolePerMinute => baseUnitValue * 60,
                        MolarFlowUnit.MolePerSecond => baseUnitValue,
                        MolarFlowUnit.PoundMolePerHour => (baseUnitValue / 453.59237) * 3600,
                        MolarFlowUnit.PoundMolePerMinute => (baseUnitValue / 453.59237) * 60,
                        MolarFlowUnit.PoundMolePerSecond => baseUnitValue / 453.59237,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

