//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpecificEnergy
{
    /// <summary>
    /// A number to SpecificEnergy Extensions
    /// </summary>
    public static class NumberToSpecificEnergyExtensions
    {
        /// <inheritdoc cref="SpecificEnergy.FromBtuPerPound(QuantityValue)" />
        public static SpecificEnergy BtuPerPound<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromBtuPerPound(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromBtuPerPound(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromCaloriesPerGram(QuantityValue)" />
        public static SpecificEnergy CaloriesPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromCaloriesPerGram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromCaloriesPerGram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromGigawattDaysPerKilogram(QuantityValue)" />
        public static SpecificEnergy GigawattDaysPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromGigawattDaysPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromGigawattDaysPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromGigawattDaysPerShortTon(QuantityValue)" />
        public static SpecificEnergy GigawattDaysPerShortTon<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromGigawattDaysPerShortTon(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromGigawattDaysPerShortTon(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromGigawattDaysPerTonne(QuantityValue)" />
        public static SpecificEnergy GigawattDaysPerTonne<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromGigawattDaysPerTonne(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromGigawattDaysPerTonne(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromGigawattHoursPerKilogram(QuantityValue)" />
        public static SpecificEnergy GigawattHoursPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromGigawattHoursPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromGigawattHoursPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromGigawattHoursPerPound(QuantityValue)" />
        public static SpecificEnergy GigawattHoursPerPound<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromGigawattHoursPerPound(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromGigawattHoursPerPound(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromJoulesPerKilogram(QuantityValue)" />
        public static SpecificEnergy JoulesPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromJoulesPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromJoulesPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromKilocaloriesPerGram(QuantityValue)" />
        public static SpecificEnergy KilocaloriesPerGram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromKilocaloriesPerGram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromKilocaloriesPerGram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromKilojoulesPerKilogram(QuantityValue)" />
        public static SpecificEnergy KilojoulesPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromKilojoulesPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromKilojoulesPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromKilowattDaysPerKilogram(QuantityValue)" />
        public static SpecificEnergy KilowattDaysPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromKilowattDaysPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromKilowattDaysPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromKilowattDaysPerShortTon(QuantityValue)" />
        public static SpecificEnergy KilowattDaysPerShortTon<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromKilowattDaysPerShortTon(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromKilowattDaysPerShortTon(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromKilowattDaysPerTonne(QuantityValue)" />
        public static SpecificEnergy KilowattDaysPerTonne<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromKilowattDaysPerTonne(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromKilowattDaysPerTonne(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromKilowattHoursPerKilogram(QuantityValue)" />
        public static SpecificEnergy KilowattHoursPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromKilowattHoursPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromKilowattHoursPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromKilowattHoursPerPound(QuantityValue)" />
        public static SpecificEnergy KilowattHoursPerPound<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromKilowattHoursPerPound(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromKilowattHoursPerPound(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromMegajoulesPerKilogram(QuantityValue)" />
        public static SpecificEnergy MegajoulesPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromMegajoulesPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromMegajoulesPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromMegaJoulesPerTonne(QuantityValue)" />
        public static SpecificEnergy MegaJoulesPerTonne<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromMegaJoulesPerTonne(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromMegaJoulesPerTonne(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromMegawattDaysPerKilogram(QuantityValue)" />
        public static SpecificEnergy MegawattDaysPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromMegawattDaysPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromMegawattDaysPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromMegawattDaysPerShortTon(QuantityValue)" />
        public static SpecificEnergy MegawattDaysPerShortTon<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromMegawattDaysPerShortTon(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromMegawattDaysPerShortTon(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromMegawattDaysPerTonne(QuantityValue)" />
        public static SpecificEnergy MegawattDaysPerTonne<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromMegawattDaysPerTonne(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromMegawattDaysPerTonne(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromMegawattHoursPerKilogram(QuantityValue)" />
        public static SpecificEnergy MegawattHoursPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromMegawattHoursPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromMegawattHoursPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromMegawattHoursPerPound(QuantityValue)" />
        public static SpecificEnergy MegawattHoursPerPound<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromMegawattHoursPerPound(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromMegawattHoursPerPound(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromTerawattDaysPerKilogram(QuantityValue)" />
        public static SpecificEnergy TerawattDaysPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromTerawattDaysPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromTerawattDaysPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromTerawattDaysPerShortTon(QuantityValue)" />
        public static SpecificEnergy TerawattDaysPerShortTon<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromTerawattDaysPerShortTon(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromTerawattDaysPerShortTon(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromTerawattDaysPerTonne(QuantityValue)" />
        public static SpecificEnergy TerawattDaysPerTonne<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromTerawattDaysPerTonne(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromTerawattDaysPerTonne(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromWattDaysPerKilogram(QuantityValue)" />
        public static SpecificEnergy WattDaysPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromWattDaysPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromWattDaysPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromWattDaysPerShortTon(QuantityValue)" />
        public static SpecificEnergy WattDaysPerShortTon<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromWattDaysPerShortTon(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromWattDaysPerShortTon(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromWattDaysPerTonne(QuantityValue)" />
        public static SpecificEnergy WattDaysPerTonne<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromWattDaysPerTonne(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromWattDaysPerTonne(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromWattHoursPerKilogram(QuantityValue)" />
        public static SpecificEnergy WattHoursPerKilogram<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromWattHoursPerKilogram(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromWattHoursPerKilogram(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="SpecificEnergy.FromWattHoursPerPound(QuantityValue)" />
        public static SpecificEnergy WattHoursPerPound<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificEnergy.FromWattHoursPerPound(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => SpecificEnergy.FromWattHoursPerPound(value.ToQuantityValue());
#endif

    }
}
