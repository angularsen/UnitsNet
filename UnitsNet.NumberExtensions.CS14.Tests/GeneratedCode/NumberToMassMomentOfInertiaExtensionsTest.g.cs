//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToMassMomentOfInertia;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToMassMomentOfInertiaExtensionsTests
    {
        [Fact]
        public void NumberToGramSquareCentimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromGramSquareCentimeters(2), 2.GramSquareCentimeters);

        [Fact]
        public void NumberToGramSquareDecimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromGramSquareDecimeters(2), 2.GramSquareDecimeters);

        [Fact]
        public void NumberToGramSquareMetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromGramSquareMeters(2), 2.GramSquareMeters);

        [Fact]
        public void NumberToGramSquareMillimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromGramSquareMillimeters(2), 2.GramSquareMillimeters);

        [Fact]
        public void NumberToKilogramSquareCentimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromKilogramSquareCentimeters(2), 2.KilogramSquareCentimeters);

        [Fact]
        public void NumberToKilogramSquareDecimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromKilogramSquareDecimeters(2), 2.KilogramSquareDecimeters);

        [Fact]
        public void NumberToKilogramSquareMetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromKilogramSquareMeters(2), 2.KilogramSquareMeters);

        [Fact]
        public void NumberToKilogramSquareMillimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromKilogramSquareMillimeters(2), 2.KilogramSquareMillimeters);

        [Fact]
        public void NumberToKilotonneSquareCentimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromKilotonneSquareCentimeters(2), 2.KilotonneSquareCentimeters);

        [Fact]
        public void NumberToKilotonneSquareDecimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromKilotonneSquareDecimeters(2), 2.KilotonneSquareDecimeters);

        [Fact]
        public void NumberToKilotonneSquareMetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromKilotonneSquareMeters(2), 2.KilotonneSquareMeters);

        [Fact]
        public void NumberToKilotonneSquareMillimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromKilotonneSquareMillimeters(2), 2.KilotonneSquareMillimeters);

        [Fact]
        public void NumberToMegatonneSquareCentimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromMegatonneSquareCentimeters(2), 2.MegatonneSquareCentimeters);

        [Fact]
        public void NumberToMegatonneSquareDecimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromMegatonneSquareDecimeters(2), 2.MegatonneSquareDecimeters);

        [Fact]
        public void NumberToMegatonneSquareMetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromMegatonneSquareMeters(2), 2.MegatonneSquareMeters);

        [Fact]
        public void NumberToMegatonneSquareMillimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromMegatonneSquareMillimeters(2), 2.MegatonneSquareMillimeters);

        [Fact]
        public void NumberToMilligramSquareCentimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromMilligramSquareCentimeters(2), 2.MilligramSquareCentimeters);

        [Fact]
        public void NumberToMilligramSquareDecimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromMilligramSquareDecimeters(2), 2.MilligramSquareDecimeters);

        [Fact]
        public void NumberToMilligramSquareMetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromMilligramSquareMeters(2), 2.MilligramSquareMeters);

        [Fact]
        public void NumberToMilligramSquareMillimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromMilligramSquareMillimeters(2), 2.MilligramSquareMillimeters);

        [Fact]
        public void NumberToPoundSquareFeetTest() =>
            Assert.Equal(MassMomentOfInertia.FromPoundSquareFeet(2), 2.PoundSquareFeet);

        [Fact]
        public void NumberToPoundSquareInchesTest() =>
            Assert.Equal(MassMomentOfInertia.FromPoundSquareInches(2), 2.PoundSquareInches);

        [Fact]
        public void NumberToSlugSquareFeetTest() =>
            Assert.Equal(MassMomentOfInertia.FromSlugSquareFeet(2), 2.SlugSquareFeet);

        [Fact]
        public void NumberToSlugSquareInchesTest() =>
            Assert.Equal(MassMomentOfInertia.FromSlugSquareInches(2), 2.SlugSquareInches);

        [Fact]
        public void NumberToTonneSquareCentimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromTonneSquareCentimeters(2), 2.TonneSquareCentimeters);

        [Fact]
        public void NumberToTonneSquareDecimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromTonneSquareDecimeters(2), 2.TonneSquareDecimeters);

        [Fact]
        public void NumberToTonneSquareMetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromTonneSquareMeters(2), 2.TonneSquareMeters);

        [Fact]
        public void NumberToTonneSquareMillimetersTest() =>
            Assert.Equal(MassMomentOfInertia.FromTonneSquareMillimeters(2), 2.TonneSquareMillimeters);

    }
}
