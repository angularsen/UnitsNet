//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToPressure;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToPressureExtensionsTests
    {
        [Fact]
        public void NumberToAtmospheresTest() =>
            Assert.Equal(Pressure.FromAtmospheres(2), 2.Atmospheres());

        [Fact]
        public void NumberToBarsTest() =>
            Assert.Equal(Pressure.FromBars(2), 2.Bars());

        [Fact]
        public void NumberToCentibarsTest() =>
            Assert.Equal(Pressure.FromCentibars(2), 2.Centibars());

        [Fact]
        public void NumberToCentimetersOfWaterColumnTest() =>
            Assert.Equal(Pressure.FromCentimetersOfWaterColumn(2), 2.CentimetersOfWaterColumn());

        [Fact]
        public void NumberToDecapascalsTest() =>
            Assert.Equal(Pressure.FromDecapascals(2), 2.Decapascals());

        [Fact]
        public void NumberToDecibarsTest() =>
            Assert.Equal(Pressure.FromDecibars(2), 2.Decibars());

        [Fact]
        public void NumberToDynesPerSquareCentimeterTest() =>
            Assert.Equal(Pressure.FromDynesPerSquareCentimeter(2), 2.DynesPerSquareCentimeter());

        [Fact]
        public void NumberToFeetOfHeadTest() =>
            Assert.Equal(Pressure.FromFeetOfHead(2), 2.FeetOfHead());

        [Fact]
        public void NumberToGigapascalsTest() =>
            Assert.Equal(Pressure.FromGigapascals(2), 2.Gigapascals());

        [Fact]
        public void NumberToHectopascalsTest() =>
            Assert.Equal(Pressure.FromHectopascals(2), 2.Hectopascals());

        [Fact]
        public void NumberToInchesOfMercuryTest() =>
            Assert.Equal(Pressure.FromInchesOfMercury(2), 2.InchesOfMercury());

        [Fact]
        public void NumberToInchesOfWaterColumnTest() =>
            Assert.Equal(Pressure.FromInchesOfWaterColumn(2), 2.InchesOfWaterColumn());

        [Fact]
        public void NumberToKilobarsTest() =>
            Assert.Equal(Pressure.FromKilobars(2), 2.Kilobars());

        [Fact]
        public void NumberToKilogramsForcePerSquareCentimeterTest() =>
            Assert.Equal(Pressure.FromKilogramsForcePerSquareCentimeter(2), 2.KilogramsForcePerSquareCentimeter());

        [Fact]
        public void NumberToKilogramsForcePerSquareMeterTest() =>
            Assert.Equal(Pressure.FromKilogramsForcePerSquareMeter(2), 2.KilogramsForcePerSquareMeter());

        [Fact]
        public void NumberToKilogramsForcePerSquareMillimeterTest() =>
            Assert.Equal(Pressure.FromKilogramsForcePerSquareMillimeter(2), 2.KilogramsForcePerSquareMillimeter());

        [Fact]
        public void NumberToKilonewtonsPerSquareCentimeterTest() =>
            Assert.Equal(Pressure.FromKilonewtonsPerSquareCentimeter(2), 2.KilonewtonsPerSquareCentimeter());

        [Fact]
        public void NumberToKilonewtonsPerSquareMeterTest() =>
            Assert.Equal(Pressure.FromKilonewtonsPerSquareMeter(2), 2.KilonewtonsPerSquareMeter());

        [Fact]
        public void NumberToKilonewtonsPerSquareMillimeterTest() =>
            Assert.Equal(Pressure.FromKilonewtonsPerSquareMillimeter(2), 2.KilonewtonsPerSquareMillimeter());

        [Fact]
        public void NumberToKilopascalsTest() =>
            Assert.Equal(Pressure.FromKilopascals(2), 2.Kilopascals());

        [Fact]
        public void NumberToKilopoundsForcePerSquareFootTest() =>
            Assert.Equal(Pressure.FromKilopoundsForcePerSquareFoot(2), 2.KilopoundsForcePerSquareFoot());

        [Fact]
        public void NumberToKilopoundsForcePerSquareInchTest() =>
            Assert.Equal(Pressure.FromKilopoundsForcePerSquareInch(2), 2.KilopoundsForcePerSquareInch());

        [Fact]
        public void NumberToKilopoundsForcePerSquareMilTest() =>
            Assert.Equal(Pressure.FromKilopoundsForcePerSquareMil(2), 2.KilopoundsForcePerSquareMil());

        [Fact]
        public void NumberToMegabarsTest() =>
            Assert.Equal(Pressure.FromMegabars(2), 2.Megabars());

        [Fact]
        public void NumberToMeganewtonsPerSquareMeterTest() =>
            Assert.Equal(Pressure.FromMeganewtonsPerSquareMeter(2), 2.MeganewtonsPerSquareMeter());

        [Fact]
        public void NumberToMegapascalsTest() =>
            Assert.Equal(Pressure.FromMegapascals(2), 2.Megapascals());

        [Fact]
        public void NumberToMetersOfHeadTest() =>
            Assert.Equal(Pressure.FromMetersOfHead(2), 2.MetersOfHead());

        [Fact]
        public void NumberToMetersOfWaterColumnTest() =>
            Assert.Equal(Pressure.FromMetersOfWaterColumn(2), 2.MetersOfWaterColumn());

        [Fact]
        public void NumberToMicrobarsTest() =>
            Assert.Equal(Pressure.FromMicrobars(2), 2.Microbars());

        [Fact]
        public void NumberToMicropascalsTest() =>
            Assert.Equal(Pressure.FromMicropascals(2), 2.Micropascals());

        [Fact]
        public void NumberToMillibarsTest() =>
            Assert.Equal(Pressure.FromMillibars(2), 2.Millibars());

        [Fact]
        public void NumberToMillimetersOfMercuryTest() =>
            Assert.Equal(Pressure.FromMillimetersOfMercury(2), 2.MillimetersOfMercury());

        [Fact]
        public void NumberToMillimetersOfWaterColumnTest() =>
            Assert.Equal(Pressure.FromMillimetersOfWaterColumn(2), 2.MillimetersOfWaterColumn());

        [Fact]
        public void NumberToMillipascalsTest() =>
            Assert.Equal(Pressure.FromMillipascals(2), 2.Millipascals());

        [Fact]
        public void NumberToNewtonsPerSquareCentimeterTest() =>
            Assert.Equal(Pressure.FromNewtonsPerSquareCentimeter(2), 2.NewtonsPerSquareCentimeter());

        [Fact]
        public void NumberToNewtonsPerSquareMeterTest() =>
            Assert.Equal(Pressure.FromNewtonsPerSquareMeter(2), 2.NewtonsPerSquareMeter());

        [Fact]
        public void NumberToNewtonsPerSquareMillimeterTest() =>
            Assert.Equal(Pressure.FromNewtonsPerSquareMillimeter(2), 2.NewtonsPerSquareMillimeter());

        [Fact]
        public void NumberToPascalsTest() =>
            Assert.Equal(Pressure.FromPascals(2), 2.Pascals());

        [Fact]
        public void NumberToPoundsForcePerSquareFootTest() =>
            Assert.Equal(Pressure.FromPoundsForcePerSquareFoot(2), 2.PoundsForcePerSquareFoot());

        [Fact]
        public void NumberToPoundsForcePerSquareInchTest() =>
            Assert.Equal(Pressure.FromPoundsForcePerSquareInch(2), 2.PoundsForcePerSquareInch());

        [Fact]
        public void NumberToPoundsForcePerSquareMilTest() =>
            Assert.Equal(Pressure.FromPoundsForcePerSquareMil(2), 2.PoundsForcePerSquareMil());

        [Fact]
        public void NumberToPoundsPerInchSecondSquaredTest() =>
            Assert.Equal(Pressure.FromPoundsPerInchSecondSquared(2), 2.PoundsPerInchSecondSquared());

        [Fact]
        public void NumberToTechnicalAtmospheresTest() =>
            Assert.Equal(Pressure.FromTechnicalAtmospheres(2), 2.TechnicalAtmospheres());

        [Fact]
        public void NumberToTonnesForcePerSquareCentimeterTest() =>
            Assert.Equal(Pressure.FromTonnesForcePerSquareCentimeter(2), 2.TonnesForcePerSquareCentimeter());

        [Fact]
        public void NumberToTonnesForcePerSquareMeterTest() =>
            Assert.Equal(Pressure.FromTonnesForcePerSquareMeter(2), 2.TonnesForcePerSquareMeter());

        [Fact]
        public void NumberToTonnesForcePerSquareMillimeterTest() =>
            Assert.Equal(Pressure.FromTonnesForcePerSquareMillimeter(2), 2.TonnesForcePerSquareMillimeter());

        [Fact]
        public void NumberToTorrsTest() =>
            Assert.Equal(Pressure.FromTorrs(2), 2.Torrs());

    }
}
