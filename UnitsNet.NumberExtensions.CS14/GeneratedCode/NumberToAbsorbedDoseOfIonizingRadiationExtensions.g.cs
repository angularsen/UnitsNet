//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToAbsorbedDoseOfIonizingRadiation
{
    /// <summary>
    /// A number to AbsorbedDoseOfIonizingRadiation Extensions
    /// </summary>
    public static class NumberToAbsorbedDoseOfIonizingRadiationExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromCentigrays(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Centigrays
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromCentigrays(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromCentigrays(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromDecigrays(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Decigrays
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromDecigrays(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromDecigrays(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromFemtograys(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Femtograys
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromFemtograys(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromFemtograys(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromGigagrays(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Gigagrays
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromGigagrays(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromGigagrays(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromGrays(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Grays
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromGrays(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromGrays(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromKilograys(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Kilograys
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromKilograys(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromKilograys(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromKilorads(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Kilorads
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromKilorads(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromKilorads(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMegagrays(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Megagrays
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromMegagrays(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromMegagrays(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMegarads(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Megarads
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromMegarads(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromMegarads(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMicrograys(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Micrograys
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromMicrograys(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromMicrograys(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMilligrays(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Milligrays
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromMilligrays(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromMilligrays(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromMillirads(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Millirads
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromMillirads(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromMillirads(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromNanograys(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Nanograys
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromNanograys(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromNanograys(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromPetagrays(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Petagrays
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromPetagrays(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromPetagrays(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromPicograys(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Picograys
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromPicograys(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromPicograys(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromRads(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Rads
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromRads(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromRads(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="AbsorbedDoseOfIonizingRadiation.FromTeragrays(QuantityValue)" />
            public AbsorbedDoseOfIonizingRadiation Teragrays
#if NET7_0_OR_GREATER
                => AbsorbedDoseOfIonizingRadiation.FromTeragrays(QuantityValue.CreateChecked(value));
#else
                => AbsorbedDoseOfIonizingRadiation.FromTeragrays(value.ToQuantityValue());
#endif

        }
    }
}
