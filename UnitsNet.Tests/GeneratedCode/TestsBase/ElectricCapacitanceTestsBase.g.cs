//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricCapacitance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricCapacitanceTestsBase : QuantityTestsBase
    {
        protected abstract double FaradsInOneFarad { get; }
        protected abstract double KilofaradsInOneFarad { get; }
        protected abstract double MegafaradsInOneFarad { get; }
        protected abstract double MicrofaradsInOneFarad { get; }
        protected abstract double MillifaradsInOneFarad { get; }
        protected abstract double NanofaradsInOneFarad { get; }
        protected abstract double PicofaradsInOneFarad { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double FaradsTolerance { get { return 1e-5; } }
        protected virtual double KilofaradsTolerance { get { return 1e-5; } }
        protected virtual double MegafaradsTolerance { get { return 1e-5; } }
        protected virtual double MicrofaradsTolerance { get { return 1e-5; } }
        protected virtual double MillifaradsTolerance { get { return 1e-5; } }
        protected virtual double NanofaradsTolerance { get { return 1e-5; } }
        protected virtual double PicofaradsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricCapacitanceUnit unit)
        {
            return unit switch
            {
                ElectricCapacitanceUnit.Farad => (FaradsInOneFarad, FaradsTolerance),
                ElectricCapacitanceUnit.Kilofarad => (KilofaradsInOneFarad, KilofaradsTolerance),
                ElectricCapacitanceUnit.Megafarad => (MegafaradsInOneFarad, MegafaradsTolerance),
                ElectricCapacitanceUnit.Microfarad => (MicrofaradsInOneFarad, MicrofaradsTolerance),
                ElectricCapacitanceUnit.Millifarad => (MillifaradsInOneFarad, MillifaradsTolerance),
                ElectricCapacitanceUnit.Nanofarad => (NanofaradsInOneFarad, NanofaradsTolerance),
                ElectricCapacitanceUnit.Picofarad => (PicofaradsInOneFarad, PicofaradsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricCapacitanceUnit.Farad },
            new object[] { ElectricCapacitanceUnit.Kilofarad },
            new object[] { ElectricCapacitanceUnit.Megafarad },
            new object[] { ElectricCapacitanceUnit.Microfarad },
            new object[] { ElectricCapacitanceUnit.Millifarad },
            new object[] { ElectricCapacitanceUnit.Nanofarad },
            new object[] { ElectricCapacitanceUnit.Picofarad },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricCapacitance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricCapacitanceUnit.Farad, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ElectricCapacitance(double.PositiveInfinity, ElectricCapacitanceUnit.Farad));
            var exception2 = Record.Exception(() => new ElectricCapacitance(double.NegativeInfinity, ElectricCapacitanceUnit.Farad));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ElectricCapacitance(double.NaN, ElectricCapacitanceUnit.Farad));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricCapacitance(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ElectricCapacitance(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ElectricCapacitance(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ElectricCapacitance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ElectricCapacitanceUnit[] unitsOrderedByName = EnumHelper.GetValues<ElectricCapacitanceUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new ElectricCapacitance(1, ElectricCapacitanceUnit.Farad);

            QuantityInfo<ElectricCapacitance, ElectricCapacitanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("ElectricCapacitance", quantityInfo.Name);
            Assert.Equal(ElectricCapacitance.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricCapacitance.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(ElectricCapacitance.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ElectricCapacitanceUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void ElectricCapacitanceInfo_CreateWithCustomUnitInfos()
        {
            ElectricCapacitanceUnit[] expectedUnits = [ElectricCapacitanceUnit.Farad];

            ElectricCapacitance.ElectricCapacitanceInfo quantityInfo = ElectricCapacitance.ElectricCapacitanceInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("ElectricCapacitance", quantityInfo.Name);
            Assert.Equal(ElectricCapacitance.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricCapacitance.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void FaradToElectricCapacitanceUnits()
        {
            ElectricCapacitance farad = ElectricCapacitance.FromFarads(1);
            AssertEx.EqualTolerance(FaradsInOneFarad, farad.Farads, FaradsTolerance);
            AssertEx.EqualTolerance(KilofaradsInOneFarad, farad.Kilofarads, KilofaradsTolerance);
            AssertEx.EqualTolerance(MegafaradsInOneFarad, farad.Megafarads, MegafaradsTolerance);
            AssertEx.EqualTolerance(MicrofaradsInOneFarad, farad.Microfarads, MicrofaradsTolerance);
            AssertEx.EqualTolerance(MillifaradsInOneFarad, farad.Millifarads, MillifaradsTolerance);
            AssertEx.EqualTolerance(NanofaradsInOneFarad, farad.Nanofarads, NanofaradsTolerance);
            AssertEx.EqualTolerance(PicofaradsInOneFarad, farad.Picofarads, PicofaradsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<ElectricCapacitanceUnit>(), unit =>
            {
                var quantity = ElectricCapacitance.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromFarads_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ElectricCapacitance.FromFarads(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ElectricCapacitance.FromFarads(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromFarads_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ElectricCapacitance.FromFarads(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var farad = ElectricCapacitance.FromFarads(1);
            AssertEx.EqualTolerance(FaradsInOneFarad, farad.As(ElectricCapacitanceUnit.Farad), FaradsTolerance);
            AssertEx.EqualTolerance(KilofaradsInOneFarad, farad.As(ElectricCapacitanceUnit.Kilofarad), KilofaradsTolerance);
            AssertEx.EqualTolerance(MegafaradsInOneFarad, farad.As(ElectricCapacitanceUnit.Megafarad), MegafaradsTolerance);
            AssertEx.EqualTolerance(MicrofaradsInOneFarad, farad.As(ElectricCapacitanceUnit.Microfarad), MicrofaradsTolerance);
            AssertEx.EqualTolerance(MillifaradsInOneFarad, farad.As(ElectricCapacitanceUnit.Millifarad), MillifaradsTolerance);
            AssertEx.EqualTolerance(NanofaradsInOneFarad, farad.As(ElectricCapacitanceUnit.Nanofarad), NanofaradsTolerance);
            AssertEx.EqualTolerance(PicofaradsInOneFarad, farad.As(ElectricCapacitanceUnit.Picofarad), PicofaradsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ElectricCapacitance.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
            var expectedValue = quantity.As(ElectricCapacitance.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
            var expectedUnit = ElectricCapacitance.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ElectricCapacitance quantityToConvert = quantity;

                ElectricCapacitance convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ElectricCapacitanceUnit> quantityToConvert = quantity;

                IQuantity<ElectricCapacitanceUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ElectricCapacitanceUnit> quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ElectricCapacitanceUnit> quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricCapacitance(value: 1, unit: ElectricCapacitance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 F", ElectricCapacitanceUnit.Farad, 4.2)]
        [InlineData("en-US", "4.2 kF", ElectricCapacitanceUnit.Kilofarad, 4.2)]
        [InlineData("en-US", "4.2 MF", ElectricCapacitanceUnit.Megafarad, 4.2)]
        [InlineData("en-US", "4.2 µF", ElectricCapacitanceUnit.Microfarad, 4.2)]
        [InlineData("en-US", "4.2 mF", ElectricCapacitanceUnit.Millifarad, 4.2)]
        [InlineData("en-US", "4.2 nF", ElectricCapacitanceUnit.Nanofarad, 4.2)]
        [InlineData("en-US", "4.2 pF", ElectricCapacitanceUnit.Picofarad, 4.2)]
        public void Parse(string culture, string quantityString, ElectricCapacitanceUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = ElectricCapacitance.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 F", ElectricCapacitanceUnit.Farad, 4.2)]
        [InlineData("en-US", "4.2 kF", ElectricCapacitanceUnit.Kilofarad, 4.2)]
        [InlineData("en-US", "4.2 MF", ElectricCapacitanceUnit.Megafarad, 4.2)]
        [InlineData("en-US", "4.2 µF", ElectricCapacitanceUnit.Microfarad, 4.2)]
        [InlineData("en-US", "4.2 mF", ElectricCapacitanceUnit.Millifarad, 4.2)]
        [InlineData("en-US", "4.2 nF", ElectricCapacitanceUnit.Nanofarad, 4.2)]
        [InlineData("en-US", "4.2 pF", ElectricCapacitanceUnit.Picofarad, 4.2)]
        public void TryParse(string culture, string quantityString, ElectricCapacitanceUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricCapacitance.TryParse(quantityString, out ElectricCapacitance parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("F", ElectricCapacitanceUnit.Farad)]
        [InlineData("kF", ElectricCapacitanceUnit.Kilofarad)]
        [InlineData("MF", ElectricCapacitanceUnit.Megafarad)]
        [InlineData("µF", ElectricCapacitanceUnit.Microfarad)]
        [InlineData("mF", ElectricCapacitanceUnit.Millifarad)]
        [InlineData("nF", ElectricCapacitanceUnit.Nanofarad)]
        [InlineData("pF", ElectricCapacitanceUnit.Picofarad)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricCapacitanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ElectricCapacitanceUnit parsedUnit = ElectricCapacitance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("F", ElectricCapacitanceUnit.Farad)]
        [InlineData("kF", ElectricCapacitanceUnit.Kilofarad)]
        [InlineData("MF", ElectricCapacitanceUnit.Megafarad)]
        [InlineData("µF", ElectricCapacitanceUnit.Microfarad)]
        [InlineData("mF", ElectricCapacitanceUnit.Millifarad)]
        [InlineData("nF", ElectricCapacitanceUnit.Nanofarad)]
        [InlineData("pF", ElectricCapacitanceUnit.Picofarad)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricCapacitanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ElectricCapacitanceUnit parsedUnit = ElectricCapacitance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "F", ElectricCapacitanceUnit.Farad)]
        [InlineData("en-US", "kF", ElectricCapacitanceUnit.Kilofarad)]
        [InlineData("en-US", "MF", ElectricCapacitanceUnit.Megafarad)]
        [InlineData("en-US", "µF", ElectricCapacitanceUnit.Microfarad)]
        [InlineData("en-US", "mF", ElectricCapacitanceUnit.Millifarad)]
        [InlineData("en-US", "nF", ElectricCapacitanceUnit.Nanofarad)]
        [InlineData("en-US", "pF", ElectricCapacitanceUnit.Picofarad)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricCapacitanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ElectricCapacitanceUnit parsedUnit = ElectricCapacitance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "F", ElectricCapacitanceUnit.Farad)]
        [InlineData("en-US", "kF", ElectricCapacitanceUnit.Kilofarad)]
        [InlineData("en-US", "MF", ElectricCapacitanceUnit.Megafarad)]
        [InlineData("en-US", "µF", ElectricCapacitanceUnit.Microfarad)]
        [InlineData("en-US", "mF", ElectricCapacitanceUnit.Millifarad)]
        [InlineData("en-US", "nF", ElectricCapacitanceUnit.Nanofarad)]
        [InlineData("en-US", "pF", ElectricCapacitanceUnit.Picofarad)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ElectricCapacitanceUnit expectedUnit)
        {
            ElectricCapacitanceUnit parsedUnit = ElectricCapacitance.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("F", ElectricCapacitanceUnit.Farad)]
        [InlineData("kF", ElectricCapacitanceUnit.Kilofarad)]
        [InlineData("MF", ElectricCapacitanceUnit.Megafarad)]
        [InlineData("µF", ElectricCapacitanceUnit.Microfarad)]
        [InlineData("mF", ElectricCapacitanceUnit.Millifarad)]
        [InlineData("nF", ElectricCapacitanceUnit.Nanofarad)]
        [InlineData("pF", ElectricCapacitanceUnit.Picofarad)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricCapacitanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ElectricCapacitance.TryParseUnit(abbreviation, out ElectricCapacitanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("F", ElectricCapacitanceUnit.Farad)]
        [InlineData("kF", ElectricCapacitanceUnit.Kilofarad)]
        [InlineData("MF", ElectricCapacitanceUnit.Megafarad)]
        [InlineData("µF", ElectricCapacitanceUnit.Microfarad)]
        [InlineData("mF", ElectricCapacitanceUnit.Millifarad)]
        [InlineData("nF", ElectricCapacitanceUnit.Nanofarad)]
        [InlineData("pF", ElectricCapacitanceUnit.Picofarad)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricCapacitanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ElectricCapacitance.TryParseUnit(abbreviation, out ElectricCapacitanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "F", ElectricCapacitanceUnit.Farad)]
        [InlineData("en-US", "kF", ElectricCapacitanceUnit.Kilofarad)]
        [InlineData("en-US", "MF", ElectricCapacitanceUnit.Megafarad)]
        [InlineData("en-US", "µF", ElectricCapacitanceUnit.Microfarad)]
        [InlineData("en-US", "mF", ElectricCapacitanceUnit.Millifarad)]
        [InlineData("en-US", "nF", ElectricCapacitanceUnit.Nanofarad)]
        [InlineData("en-US", "pF", ElectricCapacitanceUnit.Picofarad)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricCapacitanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricCapacitance.TryParseUnit(abbreviation, out ElectricCapacitanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "F", ElectricCapacitanceUnit.Farad)]
        [InlineData("en-US", "kF", ElectricCapacitanceUnit.Kilofarad)]
        [InlineData("en-US", "MF", ElectricCapacitanceUnit.Megafarad)]
        [InlineData("en-US", "µF", ElectricCapacitanceUnit.Microfarad)]
        [InlineData("en-US", "mF", ElectricCapacitanceUnit.Millifarad)]
        [InlineData("en-US", "nF", ElectricCapacitanceUnit.Nanofarad)]
        [InlineData("en-US", "pF", ElectricCapacitanceUnit.Picofarad)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ElectricCapacitanceUnit expectedUnit)
        {
            Assert.True(ElectricCapacitance.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ElectricCapacitanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", ElectricCapacitanceUnit.Farad, "F")]
        [InlineData("en-US", ElectricCapacitanceUnit.Kilofarad, "kF")]
        [InlineData("en-US", ElectricCapacitanceUnit.Megafarad, "MF")]
        [InlineData("en-US", ElectricCapacitanceUnit.Microfarad, "µF")]
        [InlineData("en-US", ElectricCapacitanceUnit.Millifarad, "mF")]
        [InlineData("en-US", ElectricCapacitanceUnit.Nanofarad, "nF")]
        [InlineData("en-US", ElectricCapacitanceUnit.Picofarad, "pF")]
        public void GetAbbreviationForCulture(string culture, ElectricCapacitanceUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = ElectricCapacitance.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(ElectricCapacitance.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = ElectricCapacitance.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricCapacitanceUnit unit)
        {
            var inBaseUnits = ElectricCapacitance.From(1.0, ElectricCapacitance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricCapacitanceUnit unit)
        {
            var quantity = ElectricCapacitance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricCapacitanceUnit unit)
        {
            Assert.All(ElectricCapacitance.Units.Where(u => u != ElectricCapacitance.BaseUnit), fromUnit =>
            {
                var quantity = ElectricCapacitance.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricCapacitanceUnit unit)
        {
            var quantity = default(ElectricCapacitance);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ElectricCapacitanceUnit unit)
        {
            var quantity = ElectricCapacitance.From(3, ElectricCapacitance.BaseUnit);
            ElectricCapacitance expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ElectricCapacitanceUnit> quantityToConvert = quantity;
                IQuantity<ElectricCapacitanceUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricCapacitance farad = ElectricCapacitance.FromFarads(3);
            Assert.Equal(3, ElectricCapacitance.FromFarads(farad.Farads).Farads);
            Assert.Equal(3, ElectricCapacitance.FromKilofarads(farad.Kilofarads).Farads);
            Assert.Equal(3, ElectricCapacitance.FromMegafarads(farad.Megafarads).Farads);
            Assert.Equal(3, ElectricCapacitance.FromMicrofarads(farad.Microfarads).Farads);
            Assert.Equal(3, ElectricCapacitance.FromMillifarads(farad.Millifarads).Farads);
            Assert.Equal(3, ElectricCapacitance.FromNanofarads(farad.Nanofarads).Farads);
            Assert.Equal(3, ElectricCapacitance.FromPicofarads(farad.Picofarads).Farads);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricCapacitance v = ElectricCapacitance.FromFarads(1);
            Assert.Equal(-1, -v.Farads);
            Assert.Equal(2, (ElectricCapacitance.FromFarads(3) - v).Farads);
            Assert.Equal(2, (v + v).Farads);
            Assert.Equal(10, (v * 10).Farads);
            Assert.Equal(10, (10 * v).Farads);
            Assert.Equal(2, (ElectricCapacitance.FromFarads(10) / 5).Farads);
            Assert.Equal(2, ElectricCapacitance.FromFarads(10) / ElectricCapacitance.FromFarads(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricCapacitance oneFarad = ElectricCapacitance.FromFarads(1);
            ElectricCapacitance twoFarads = ElectricCapacitance.FromFarads(2);

            Assert.True(oneFarad < twoFarads);
            Assert.True(oneFarad <= twoFarads);
            Assert.True(twoFarads > oneFarad);
            Assert.True(twoFarads >= oneFarad);

            Assert.False(oneFarad > twoFarads);
            Assert.False(oneFarad >= twoFarads);
            Assert.False(twoFarads < oneFarad);
            Assert.False(twoFarads <= oneFarad);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricCapacitance farad = ElectricCapacitance.FromFarads(1);
            Assert.Equal(0, farad.CompareTo(farad));
            Assert.True(farad.CompareTo(ElectricCapacitance.Zero) > 0);
            Assert.True(ElectricCapacitance.Zero.CompareTo(farad) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricCapacitance farad = ElectricCapacitance.FromFarads(1);
            Assert.Throws<ArgumentException>(() => farad.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricCapacitance farad = ElectricCapacitance.FromFarads(1);
            Assert.Throws<ArgumentNullException>(() => farad.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricCapacitanceUnit.Farad, 1, ElectricCapacitanceUnit.Farad, true)]  // Same value and unit.
        [InlineData(1, ElectricCapacitanceUnit.Farad, 2, ElectricCapacitanceUnit.Farad, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricCapacitanceUnit unitA, double valueB, ElectricCapacitanceUnit unitB, bool expectEqual)
        {
            var a = new ElectricCapacitance(valueA, unitA);
            var b = new ElectricCapacitance(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricCapacitance.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricCapacitance farad = ElectricCapacitance.FromFarads(1);
            Assert.False(farad.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricCapacitance farad = ElectricCapacitance.FromFarads(1);
            Assert.False(farad.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = ElectricCapacitance.FromFarads(firstValue);
            var otherQuantity = ElectricCapacitance.FromFarads(secondValue);
            ElectricCapacitance maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, ElectricCapacitance.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = ElectricCapacitance.FromFarads(1);
            var negativeTolerance = ElectricCapacitance.FromFarads(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<ElectricCapacitanceUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricCapacitance.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(ElectricCapacitance.Info.Units, ElectricCapacitance.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, ElectricCapacitance.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 F", new ElectricCapacitance(1, ElectricCapacitanceUnit.Farad).ToString());
            Assert.Equal("1 kF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Kilofarad).ToString());
            Assert.Equal("1 MF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Megafarad).ToString());
            Assert.Equal("1 µF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Microfarad).ToString());
            Assert.Equal("1 mF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Millifarad).ToString());
            Assert.Equal("1 nF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Nanofarad).ToString());
            Assert.Equal("1 pF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Picofarad).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 F", new ElectricCapacitance(1, ElectricCapacitanceUnit.Farad).ToString(swedishCulture));
            Assert.Equal("1 kF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Kilofarad).ToString(swedishCulture));
            Assert.Equal("1 MF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Megafarad).ToString(swedishCulture));
            Assert.Equal("1 µF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Microfarad).ToString(swedishCulture));
            Assert.Equal("1 mF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Millifarad).ToString(swedishCulture));
            Assert.Equal("1 nF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Nanofarad).ToString(swedishCulture));
            Assert.Equal("1 pF", new ElectricCapacitance(1, ElectricCapacitanceUnit.Picofarad).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 F", new ElectricCapacitance(0.123456, ElectricCapacitanceUnit.Farad).ToString("s1"));
            Assert.Equal("0.12 F", new ElectricCapacitance(0.123456, ElectricCapacitanceUnit.Farad).ToString("s2"));
            Assert.Equal("0.123 F", new ElectricCapacitance(0.123456, ElectricCapacitanceUnit.Farad).ToString("s3"));
            Assert.Equal("0.1235 F", new ElectricCapacitance(0.123456, ElectricCapacitanceUnit.Farad).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 F", new ElectricCapacitance(0.123456, ElectricCapacitanceUnit.Farad).ToString("s1", culture));
            Assert.Equal("0.12 F", new ElectricCapacitance(0.123456, ElectricCapacitanceUnit.Farad).ToString("s2", culture));
            Assert.Equal("0.123 F", new ElectricCapacitance(0.123456, ElectricCapacitanceUnit.Farad).ToString("s3", culture));
            Assert.Equal("0.1235 F", new ElectricCapacitance(0.123456, ElectricCapacitanceUnit.Farad).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricCapacitance.FromFarads(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricCapacitance.FromFarads(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricCapacitance.FromFarads(1.0);
            var expected = Comparison.GetHashCode(typeof(ElectricCapacitance), quantity.As(ElectricCapacitance.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricCapacitance.FromFarads(value);
            Assert.Equal(ElectricCapacitance.FromFarads(-value), -quantity);
        }
    }
}
