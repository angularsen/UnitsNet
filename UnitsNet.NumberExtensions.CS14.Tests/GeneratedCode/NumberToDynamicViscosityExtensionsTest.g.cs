//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToDynamicViscosity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToDynamicViscosityExtensionsTests
    {
        [Fact]
        public void NumberToCentipoiseTest() =>
            Assert.Equal(DynamicViscosity.FromCentipoise(2), 2.Centipoise);

        [Fact]
        public void NumberToMicropascalSecondsTest() =>
            Assert.Equal(DynamicViscosity.FromMicropascalSeconds(2), 2.MicropascalSeconds);

        [Fact]
        public void NumberToMillipascalSecondsTest() =>
            Assert.Equal(DynamicViscosity.FromMillipascalSeconds(2), 2.MillipascalSeconds);

        [Fact]
        public void NumberToNewtonSecondsPerMeterSquaredTest() =>
            Assert.Equal(DynamicViscosity.FromNewtonSecondsPerMeterSquared(2), 2.NewtonSecondsPerMeterSquared);

        [Fact]
        public void NumberToPascalSecondsTest() =>
            Assert.Equal(DynamicViscosity.FromPascalSeconds(2), 2.PascalSeconds);

        [Fact]
        public void NumberToPoiseTest() =>
            Assert.Equal(DynamicViscosity.FromPoise(2), 2.Poise);

        [Fact]
        public void NumberToPoundsForceSecondPerSquareFootTest() =>
            Assert.Equal(DynamicViscosity.FromPoundsForceSecondPerSquareFoot(2), 2.PoundsForceSecondPerSquareFoot);

        [Fact]
        public void NumberToPoundsForceSecondPerSquareInchTest() =>
            Assert.Equal(DynamicViscosity.FromPoundsForceSecondPerSquareInch(2), 2.PoundsForceSecondPerSquareInch);

        [Fact]
        public void NumberToPoundsPerFootSecondTest() =>
            Assert.Equal(DynamicViscosity.FromPoundsPerFootSecond(2), 2.PoundsPerFootSecond);

        [Fact]
        public void NumberToReynsTest() =>
            Assert.Equal(DynamicViscosity.FromReyns(2), 2.Reyns);

    }
}
