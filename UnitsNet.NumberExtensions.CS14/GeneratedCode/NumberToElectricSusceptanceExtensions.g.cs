//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricSusceptance
{
    /// <summary>
    /// A number to ElectricSusceptance Extensions
    /// </summary>
    public static class NumberToElectricSusceptanceExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="ElectricSusceptance.FromGigamhos(QuantityValue)" />
            public ElectricSusceptance Gigamhos
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromGigamhos(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromGigamhos(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromGigasiemens(QuantityValue)" />
            public ElectricSusceptance Gigasiemens
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromGigasiemens(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromGigasiemens(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromKilomhos(QuantityValue)" />
            public ElectricSusceptance Kilomhos
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromKilomhos(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromKilomhos(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromKilosiemens(QuantityValue)" />
            public ElectricSusceptance Kilosiemens
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromKilosiemens(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromKilosiemens(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromMegamhos(QuantityValue)" />
            public ElectricSusceptance Megamhos
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromMegamhos(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromMegamhos(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromMegasiemens(QuantityValue)" />
            public ElectricSusceptance Megasiemens
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromMegasiemens(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromMegasiemens(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromMhos(QuantityValue)" />
            public ElectricSusceptance Mhos
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromMhos(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromMhos(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromMicromhos(QuantityValue)" />
            public ElectricSusceptance Micromhos
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromMicromhos(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromMicromhos(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromMicrosiemens(QuantityValue)" />
            public ElectricSusceptance Microsiemens
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromMicrosiemens(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromMicrosiemens(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromMillimhos(QuantityValue)" />
            public ElectricSusceptance Millimhos
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromMillimhos(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromMillimhos(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromMillisiemens(QuantityValue)" />
            public ElectricSusceptance Millisiemens
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromMillisiemens(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromMillisiemens(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromNanomhos(QuantityValue)" />
            public ElectricSusceptance Nanomhos
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromNanomhos(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromNanomhos(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromNanosiemens(QuantityValue)" />
            public ElectricSusceptance Nanosiemens
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromNanosiemens(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromNanosiemens(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromSiemens(QuantityValue)" />
            public ElectricSusceptance Siemens
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromSiemens(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromSiemens(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromTeramhos(QuantityValue)" />
            public ElectricSusceptance Teramhos
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromTeramhos(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromTeramhos(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricSusceptance.FromTerasiemens(QuantityValue)" />
            public ElectricSusceptance Terasiemens
#if NET7_0_OR_GREATER
                => ElectricSusceptance.FromTerasiemens(QuantityValue.CreateChecked(value));
#else
                => ElectricSusceptance.FromTerasiemens(value.ToQuantityValue());
#endif

        }
    }
}
