//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToBitRate
{
    /// <summary>
    /// A number to BitRate Extensions
    /// </summary>
    public static class NumberToBitRateExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="BitRate.FromBitsPerSecond(QuantityValue)" />
            public BitRate BitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromBitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromBitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromBytesPerSecond(QuantityValue)" />
            public BitRate BytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromBytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromBytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromExabitsPerSecond(QuantityValue)" />
            public BitRate ExabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExabitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromExabitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromExabytesPerSecond(QuantityValue)" />
            public BitRate ExabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExabytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromExabytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromExaoctetsPerSecond(QuantityValue)" />
            public BitRate ExaoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExaoctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromExaoctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromExbibitsPerSecond(QuantityValue)" />
            public BitRate ExbibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExbibitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromExbibitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromExbibytesPerSecond(QuantityValue)" />
            public BitRate ExbibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExbibytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromExbibytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromExbioctetsPerSecond(QuantityValue)" />
            public BitRate ExbioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExbioctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromExbioctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromGibibitsPerSecond(QuantityValue)" />
            public BitRate GibibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGibibitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromGibibitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromGibibytesPerSecond(QuantityValue)" />
            public BitRate GibibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGibibytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromGibibytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromGibioctetsPerSecond(QuantityValue)" />
            public BitRate GibioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGibioctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromGibioctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromGigabitsPerSecond(QuantityValue)" />
            public BitRate GigabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGigabitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromGigabitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromGigabytesPerSecond(QuantityValue)" />
            public BitRate GigabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGigabytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromGigabytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromGigaoctetsPerSecond(QuantityValue)" />
            public BitRate GigaoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGigaoctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromGigaoctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromKibibitsPerSecond(QuantityValue)" />
            public BitRate KibibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKibibitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromKibibitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromKibibytesPerSecond(QuantityValue)" />
            public BitRate KibibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKibibytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromKibibytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromKibioctetsPerSecond(QuantityValue)" />
            public BitRate KibioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKibioctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromKibioctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromKilobitsPerSecond(QuantityValue)" />
            public BitRate KilobitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKilobitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromKilobitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromKilobytesPerSecond(QuantityValue)" />
            public BitRate KilobytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKilobytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromKilobytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromKilooctetsPerSecond(QuantityValue)" />
            public BitRate KilooctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKilooctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromKilooctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromMebibitsPerSecond(QuantityValue)" />
            public BitRate MebibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMebibitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromMebibitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromMebibytesPerSecond(QuantityValue)" />
            public BitRate MebibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMebibytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromMebibytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromMebioctetsPerSecond(QuantityValue)" />
            public BitRate MebioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMebioctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromMebioctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromMegabitsPerSecond(QuantityValue)" />
            public BitRate MegabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMegabitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromMegabitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromMegabytesPerSecond(QuantityValue)" />
            public BitRate MegabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMegabytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromMegabytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromMegaoctetsPerSecond(QuantityValue)" />
            public BitRate MegaoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMegaoctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromMegaoctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromOctetsPerSecond(QuantityValue)" />
            public BitRate OctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromOctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromOctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromPebibitsPerSecond(QuantityValue)" />
            public BitRate PebibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPebibitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromPebibitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromPebibytesPerSecond(QuantityValue)" />
            public BitRate PebibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPebibytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromPebibytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromPebioctetsPerSecond(QuantityValue)" />
            public BitRate PebioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPebioctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromPebioctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromPetabitsPerSecond(QuantityValue)" />
            public BitRate PetabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPetabitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromPetabitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromPetabytesPerSecond(QuantityValue)" />
            public BitRate PetabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPetabytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromPetabytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromPetaoctetsPerSecond(QuantityValue)" />
            public BitRate PetaoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPetaoctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromPetaoctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromTebibitsPerSecond(QuantityValue)" />
            public BitRate TebibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTebibitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromTebibitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromTebibytesPerSecond(QuantityValue)" />
            public BitRate TebibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTebibytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromTebibytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromTebioctetsPerSecond(QuantityValue)" />
            public BitRate TebioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTebioctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromTebioctetsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromTerabitsPerSecond(QuantityValue)" />
            public BitRate TerabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTerabitsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromTerabitsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromTerabytesPerSecond(QuantityValue)" />
            public BitRate TerabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTerabytesPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromTerabytesPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="BitRate.FromTeraoctetsPerSecond(QuantityValue)" />
            public BitRate TeraoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTeraoctetsPerSecond(QuantityValue.CreateChecked(value));
#else
                => BitRate.FromTeraoctetsPerSecond(value.ToQuantityValue());
#endif

        }
    }
}
