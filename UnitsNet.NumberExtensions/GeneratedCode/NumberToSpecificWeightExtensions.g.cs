//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpecificWeight
{
    /// <summary>
    /// A number to SpecificWeight Extensions
    /// </summary>
    public static class NumberToSpecificWeightExtensions
    {
        /// <inheritdoc cref="SpecificWeight.FromKilogramsForcePerCubicCentimeter(double)" />
        public static SpecificWeight KilogramsForcePerCubicCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromKilogramsForcePerCubicCentimeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromKilogramsForcePerCubicCentimeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromKilogramsForcePerCubicMeter(double)" />
        public static SpecificWeight KilogramsForcePerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromKilogramsForcePerCubicMeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromKilogramsForcePerCubicMeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromKilogramsForcePerCubicMillimeter(double)" />
        public static SpecificWeight KilogramsForcePerCubicMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromKilogramsForcePerCubicMillimeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromKilogramsForcePerCubicMillimeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromKilonewtonsPerCubicCentimeter(double)" />
        public static SpecificWeight KilonewtonsPerCubicCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromKilonewtonsPerCubicCentimeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromKilonewtonsPerCubicCentimeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromKilonewtonsPerCubicMeter(double)" />
        public static SpecificWeight KilonewtonsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromKilonewtonsPerCubicMeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromKilonewtonsPerCubicMeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromKilonewtonsPerCubicMillimeter(double)" />
        public static SpecificWeight KilonewtonsPerCubicMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromKilonewtonsPerCubicMillimeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromKilonewtonsPerCubicMillimeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromKilopoundsForcePerCubicFoot(double)" />
        public static SpecificWeight KilopoundsForcePerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromKilopoundsForcePerCubicFoot(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromKilopoundsForcePerCubicFoot(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromKilopoundsForcePerCubicInch(double)" />
        public static SpecificWeight KilopoundsForcePerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromKilopoundsForcePerCubicInch(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromKilopoundsForcePerCubicInch(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromMeganewtonsPerCubicMeter(double)" />
        public static SpecificWeight MeganewtonsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromMeganewtonsPerCubicMeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromMeganewtonsPerCubicMeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromNewtonsPerCubicCentimeter(double)" />
        public static SpecificWeight NewtonsPerCubicCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromNewtonsPerCubicCentimeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromNewtonsPerCubicCentimeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromNewtonsPerCubicMeter(double)" />
        public static SpecificWeight NewtonsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromNewtonsPerCubicMeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromNewtonsPerCubicMeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromNewtonsPerCubicMillimeter(double)" />
        public static SpecificWeight NewtonsPerCubicMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromNewtonsPerCubicMillimeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromNewtonsPerCubicMillimeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromPoundsForcePerCubicFoot(double)" />
        public static SpecificWeight PoundsForcePerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromPoundsForcePerCubicFoot(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromPoundsForcePerCubicFoot(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromPoundsForcePerCubicInch(double)" />
        public static SpecificWeight PoundsForcePerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromPoundsForcePerCubicInch(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromPoundsForcePerCubicInch(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromTonnesForcePerCubicCentimeter(double)" />
        public static SpecificWeight TonnesForcePerCubicCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromTonnesForcePerCubicCentimeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromTonnesForcePerCubicCentimeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromTonnesForcePerCubicMeter(double)" />
        public static SpecificWeight TonnesForcePerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromTonnesForcePerCubicMeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromTonnesForcePerCubicMeter(value.ToDouble(null));
#endif

        /// <inheritdoc cref="SpecificWeight.FromTonnesForcePerCubicMillimeter(double)" />
        public static SpecificWeight TonnesForcePerCubicMillimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => SpecificWeight.FromTonnesForcePerCubicMillimeter(double.CreateChecked(value));
#else
            , IConvertible
            => SpecificWeight.FromTonnesForcePerCubicMillimeter(value.ToDouble(null));
#endif

    }
}
