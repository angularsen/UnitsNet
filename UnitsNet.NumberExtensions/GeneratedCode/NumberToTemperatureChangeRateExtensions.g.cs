//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToTemperatureChangeRate
{
    /// <summary>
    /// A number to TemperatureChangeRate Extensions
    /// </summary>
    public static class NumberToTemperatureChangeRateExtensions
    {
        /// <inheritdoc cref="TemperatureChangeRate.FromCentidegreesCelsiusPerSecond(QuantityValue)" />
        public static TemperatureChangeRate CentidegreesCelsiusPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromCentidegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromCentidegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDecadegreesCelsiusPerSecond(QuantityValue)" />
        public static TemperatureChangeRate DecadegreesCelsiusPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDecadegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDecadegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDecidegreesCelsiusPerSecond(QuantityValue)" />
        public static TemperatureChangeRate DecidegreesCelsiusPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDecidegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDecidegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDegreesCelsiusPerHour(QuantityValue)" />
        public static TemperatureChangeRate DegreesCelsiusPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDegreesCelsiusPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDegreesCelsiusPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDegreesCelsiusPerMinute(QuantityValue)" />
        public static TemperatureChangeRate DegreesCelsiusPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDegreesCelsiusPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDegreesCelsiusPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDegreesCelsiusPerSecond(QuantityValue)" />
        public static TemperatureChangeRate DegreesCelsiusPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDegreesFahrenheitPerHour(QuantityValue)" />
        public static TemperatureChangeRate DegreesFahrenheitPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDegreesFahrenheitPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDegreesFahrenheitPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDegreesFahrenheitPerMinute(QuantityValue)" />
        public static TemperatureChangeRate DegreesFahrenheitPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDegreesFahrenheitPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDegreesFahrenheitPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDegreesFahrenheitPerSecond(QuantityValue)" />
        public static TemperatureChangeRate DegreesFahrenheitPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDegreesFahrenheitPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDegreesFahrenheitPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDegreesKelvinPerHour(QuantityValue)" />
        public static TemperatureChangeRate DegreesKelvinPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDegreesKelvinPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDegreesKelvinPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDegreesKelvinPerMinute(QuantityValue)" />
        public static TemperatureChangeRate DegreesKelvinPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDegreesKelvinPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDegreesKelvinPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromDegreesKelvinPerSecond(QuantityValue)" />
        public static TemperatureChangeRate DegreesKelvinPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromDegreesKelvinPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromDegreesKelvinPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromHectodegreesCelsiusPerSecond(QuantityValue)" />
        public static TemperatureChangeRate HectodegreesCelsiusPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromHectodegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromHectodegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromKilodegreesCelsiusPerSecond(QuantityValue)" />
        public static TemperatureChangeRate KilodegreesCelsiusPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromKilodegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromKilodegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromMicrodegreesCelsiusPerSecond(QuantityValue)" />
        public static TemperatureChangeRate MicrodegreesCelsiusPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromMicrodegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromMicrodegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromMillidegreesCelsiusPerSecond(QuantityValue)" />
        public static TemperatureChangeRate MillidegreesCelsiusPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromMillidegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromMillidegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="TemperatureChangeRate.FromNanodegreesCelsiusPerSecond(QuantityValue)" />
        public static TemperatureChangeRate NanodegreesCelsiusPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => TemperatureChangeRate.FromNanodegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => TemperatureChangeRate.FromNanodegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

    }
}
