//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Irradiation.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class IrradiationTestsBase : QuantityTestsBase
    {
        protected abstract double BtusPerSquareFootInOneJoulePerSquareMeter { get; }
        protected abstract double JoulesPerSquareCentimeterInOneJoulePerSquareMeter { get; }
        protected abstract double JoulesPerSquareMeterInOneJoulePerSquareMeter { get; }
        protected abstract double JoulesPerSquareMillimeterInOneJoulePerSquareMeter { get; }
        protected abstract double KilobtusPerSquareFootInOneJoulePerSquareMeter { get; }
        protected abstract double KilojoulesPerSquareMeterInOneJoulePerSquareMeter { get; }
        protected abstract double KilowattHoursPerSquareMeterInOneJoulePerSquareMeter { get; }
        protected abstract double MillijoulesPerSquareCentimeterInOneJoulePerSquareMeter { get; }
        protected abstract double WattHoursPerSquareMeterInOneJoulePerSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BtusPerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilobtusPerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MillijoulesPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerSquareMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(IrradiationUnit unit)
        {
            return unit switch
            {
                IrradiationUnit.BtuPerSquareFoot => (BtusPerSquareFootInOneJoulePerSquareMeter, BtusPerSquareFootTolerance),
                IrradiationUnit.JoulePerSquareCentimeter => (JoulesPerSquareCentimeterInOneJoulePerSquareMeter, JoulesPerSquareCentimeterTolerance),
                IrradiationUnit.JoulePerSquareMeter => (JoulesPerSquareMeterInOneJoulePerSquareMeter, JoulesPerSquareMeterTolerance),
                IrradiationUnit.JoulePerSquareMillimeter => (JoulesPerSquareMillimeterInOneJoulePerSquareMeter, JoulesPerSquareMillimeterTolerance),
                IrradiationUnit.KilobtuPerSquareFoot => (KilobtusPerSquareFootInOneJoulePerSquareMeter, KilobtusPerSquareFootTolerance),
                IrradiationUnit.KilojoulePerSquareMeter => (KilojoulesPerSquareMeterInOneJoulePerSquareMeter, KilojoulesPerSquareMeterTolerance),
                IrradiationUnit.KilowattHourPerSquareMeter => (KilowattHoursPerSquareMeterInOneJoulePerSquareMeter, KilowattHoursPerSquareMeterTolerance),
                IrradiationUnit.MillijoulePerSquareCentimeter => (MillijoulesPerSquareCentimeterInOneJoulePerSquareMeter, MillijoulesPerSquareCentimeterTolerance),
                IrradiationUnit.WattHourPerSquareMeter => (WattHoursPerSquareMeterInOneJoulePerSquareMeter, WattHoursPerSquareMeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { IrradiationUnit.BtuPerSquareFoot },
            new object[] { IrradiationUnit.JoulePerSquareCentimeter },
            new object[] { IrradiationUnit.JoulePerSquareMeter },
            new object[] { IrradiationUnit.JoulePerSquareMillimeter },
            new object[] { IrradiationUnit.KilobtuPerSquareFoot },
            new object[] { IrradiationUnit.KilojoulePerSquareMeter },
            new object[] { IrradiationUnit.KilowattHourPerSquareMeter },
            new object[] { IrradiationUnit.MillijoulePerSquareCentimeter },
            new object[] { IrradiationUnit.WattHourPerSquareMeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Irradiation();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(IrradiationUnit.JoulePerSquareMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Irradiation(double.PositiveInfinity, IrradiationUnit.JoulePerSquareMeter));
            var exception2 = Record.Exception(() => new Irradiation(double.NegativeInfinity, IrradiationUnit.JoulePerSquareMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Irradiation(double.NaN, IrradiationUnit.JoulePerSquareMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Irradiation(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Irradiation(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Irradiation(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Irradiation_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            IrradiationUnit[] unitsOrderedByName = EnumHelper.GetValues<IrradiationUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Irradiation(1, IrradiationUnit.JoulePerSquareMeter);

            QuantityInfo<Irradiation, IrradiationUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Irradiation", quantityInfo.Name);
            Assert.Equal(Irradiation.Zero, quantityInfo.Zero);
            Assert.Equal(Irradiation.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Irradiation.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<IrradiationUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void IrradiationInfo_CreateWithCustomUnitInfos()
        {
            IrradiationUnit[] expectedUnits = [IrradiationUnit.JoulePerSquareMeter];

            Irradiation.IrradiationInfo quantityInfo = Irradiation.IrradiationInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Irradiation", quantityInfo.Name);
            Assert.Equal(Irradiation.Zero, quantityInfo.Zero);
            Assert.Equal(Irradiation.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void JoulePerSquareMeterToIrradiationUnits()
        {
            Irradiation joulepersquaremeter = Irradiation.FromJoulesPerSquareMeter(1);
            AssertEx.EqualTolerance(BtusPerSquareFootInOneJoulePerSquareMeter, joulepersquaremeter.BtusPerSquareFoot, BtusPerSquareFootTolerance);
            AssertEx.EqualTolerance(JoulesPerSquareCentimeterInOneJoulePerSquareMeter, joulepersquaremeter.JoulesPerSquareCentimeter, JoulesPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(JoulesPerSquareMeterInOneJoulePerSquareMeter, joulepersquaremeter.JoulesPerSquareMeter, JoulesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(JoulesPerSquareMillimeterInOneJoulePerSquareMeter, joulepersquaremeter.JoulesPerSquareMillimeter, JoulesPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilobtusPerSquareFootInOneJoulePerSquareMeter, joulepersquaremeter.KilobtusPerSquareFoot, KilobtusPerSquareFootTolerance);
            AssertEx.EqualTolerance(KilojoulesPerSquareMeterInOneJoulePerSquareMeter, joulepersquaremeter.KilojoulesPerSquareMeter, KilojoulesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerSquareMeterInOneJoulePerSquareMeter, joulepersquaremeter.KilowattHoursPerSquareMeter, KilowattHoursPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MillijoulesPerSquareCentimeterInOneJoulePerSquareMeter, joulepersquaremeter.MillijoulesPerSquareCentimeter, MillijoulesPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(WattHoursPerSquareMeterInOneJoulePerSquareMeter, joulepersquaremeter.WattHoursPerSquareMeter, WattHoursPerSquareMeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<IrradiationUnit>(), unit =>
            {
                var quantity = Irradiation.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromJoulesPerSquareMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Irradiation.FromJoulesPerSquareMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Irradiation.FromJoulesPerSquareMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromJoulesPerSquareMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Irradiation.FromJoulesPerSquareMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var joulepersquaremeter = Irradiation.FromJoulesPerSquareMeter(1);
            AssertEx.EqualTolerance(BtusPerSquareFootInOneJoulePerSquareMeter, joulepersquaremeter.As(IrradiationUnit.BtuPerSquareFoot), BtusPerSquareFootTolerance);
            AssertEx.EqualTolerance(JoulesPerSquareCentimeterInOneJoulePerSquareMeter, joulepersquaremeter.As(IrradiationUnit.JoulePerSquareCentimeter), JoulesPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(JoulesPerSquareMeterInOneJoulePerSquareMeter, joulepersquaremeter.As(IrradiationUnit.JoulePerSquareMeter), JoulesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(JoulesPerSquareMillimeterInOneJoulePerSquareMeter, joulepersquaremeter.As(IrradiationUnit.JoulePerSquareMillimeter), JoulesPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilobtusPerSquareFootInOneJoulePerSquareMeter, joulepersquaremeter.As(IrradiationUnit.KilobtuPerSquareFoot), KilobtusPerSquareFootTolerance);
            AssertEx.EqualTolerance(KilojoulesPerSquareMeterInOneJoulePerSquareMeter, joulepersquaremeter.As(IrradiationUnit.KilojoulePerSquareMeter), KilojoulesPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerSquareMeterInOneJoulePerSquareMeter, joulepersquaremeter.As(IrradiationUnit.KilowattHourPerSquareMeter), KilowattHoursPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MillijoulesPerSquareCentimeterInOneJoulePerSquareMeter, joulepersquaremeter.As(IrradiationUnit.MillijoulePerSquareCentimeter), MillijoulesPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(WattHoursPerSquareMeterInOneJoulePerSquareMeter, joulepersquaremeter.As(IrradiationUnit.WattHourPerSquareMeter), WattHoursPerSquareMeterTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Irradiation.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
            var expectedValue = quantity.As(Irradiation.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
            var expectedUnit = Irradiation.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Irradiation quantityToConvert = quantity;

                Irradiation convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<IrradiationUnit> quantityToConvert = quantity;

                IQuantity<IrradiationUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<IrradiationUnit> quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<IrradiationUnit> quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Irradiation(value: 1, unit: Irradiation.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 Btu/ft²", IrradiationUnit.BtuPerSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 J/cm²", IrradiationUnit.JoulePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 J/m²", IrradiationUnit.JoulePerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 J/mm²", IrradiationUnit.JoulePerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 kJ/m²", IrradiationUnit.KilojoulePerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Wh/m²", IrradiationUnit.WattHourPerSquareMeter, 4.2)]
        public void Parse(string culture, string quantityString, IrradiationUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Irradiation.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 Btu/ft²", IrradiationUnit.BtuPerSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 J/cm²", IrradiationUnit.JoulePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 J/m²", IrradiationUnit.JoulePerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 J/mm²", IrradiationUnit.JoulePerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 kJ/m²", IrradiationUnit.KilojoulePerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Wh/m²", IrradiationUnit.WattHourPerSquareMeter, 4.2)]
        public void TryParse(string culture, string quantityString, IrradiationUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Irradiation.TryParse(quantityString, out Irradiation parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("Btu/ft²", IrradiationUnit.BtuPerSquareFoot)]
        [InlineData("J/cm²", IrradiationUnit.JoulePerSquareCentimeter)]
        [InlineData("J/m²", IrradiationUnit.JoulePerSquareMeter)]
        [InlineData("J/mm²", IrradiationUnit.JoulePerSquareMillimeter)]
        [InlineData("kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot)]
        [InlineData("kJ/m²", IrradiationUnit.KilojoulePerSquareMeter)]
        [InlineData("kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter)]
        [InlineData("mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter)]
        [InlineData("Wh/m²", IrradiationUnit.WattHourPerSquareMeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, IrradiationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            IrradiationUnit parsedUnit = Irradiation.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Btu/ft²", IrradiationUnit.BtuPerSquareFoot)]
        [InlineData("J/cm²", IrradiationUnit.JoulePerSquareCentimeter)]
        [InlineData("J/m²", IrradiationUnit.JoulePerSquareMeter)]
        [InlineData("J/mm²", IrradiationUnit.JoulePerSquareMillimeter)]
        [InlineData("kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot)]
        [InlineData("kJ/m²", IrradiationUnit.KilojoulePerSquareMeter)]
        [InlineData("kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter)]
        [InlineData("mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter)]
        [InlineData("Wh/m²", IrradiationUnit.WattHourPerSquareMeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, IrradiationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            IrradiationUnit parsedUnit = Irradiation.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Btu/ft²", IrradiationUnit.BtuPerSquareFoot)]
        [InlineData("en-US", "J/cm²", IrradiationUnit.JoulePerSquareCentimeter)]
        [InlineData("en-US", "J/m²", IrradiationUnit.JoulePerSquareMeter)]
        [InlineData("en-US", "J/mm²", IrradiationUnit.JoulePerSquareMillimeter)]
        [InlineData("en-US", "kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot)]
        [InlineData("en-US", "kJ/m²", IrradiationUnit.KilojoulePerSquareMeter)]
        [InlineData("en-US", "kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter)]
        [InlineData("en-US", "mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter)]
        [InlineData("en-US", "Wh/m²", IrradiationUnit.WattHourPerSquareMeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, IrradiationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            IrradiationUnit parsedUnit = Irradiation.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Btu/ft²", IrradiationUnit.BtuPerSquareFoot)]
        [InlineData("en-US", "J/cm²", IrradiationUnit.JoulePerSquareCentimeter)]
        [InlineData("en-US", "J/m²", IrradiationUnit.JoulePerSquareMeter)]
        [InlineData("en-US", "J/mm²", IrradiationUnit.JoulePerSquareMillimeter)]
        [InlineData("en-US", "kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot)]
        [InlineData("en-US", "kJ/m²", IrradiationUnit.KilojoulePerSquareMeter)]
        [InlineData("en-US", "kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter)]
        [InlineData("en-US", "mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter)]
        [InlineData("en-US", "Wh/m²", IrradiationUnit.WattHourPerSquareMeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, IrradiationUnit expectedUnit)
        {
            IrradiationUnit parsedUnit = Irradiation.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Btu/ft²", IrradiationUnit.BtuPerSquareFoot)]
        [InlineData("J/cm²", IrradiationUnit.JoulePerSquareCentimeter)]
        [InlineData("J/m²", IrradiationUnit.JoulePerSquareMeter)]
        [InlineData("J/mm²", IrradiationUnit.JoulePerSquareMillimeter)]
        [InlineData("kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot)]
        [InlineData("kJ/m²", IrradiationUnit.KilojoulePerSquareMeter)]
        [InlineData("kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter)]
        [InlineData("mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter)]
        [InlineData("Wh/m²", IrradiationUnit.WattHourPerSquareMeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, IrradiationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Irradiation.TryParseUnit(abbreviation, out IrradiationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Btu/ft²", IrradiationUnit.BtuPerSquareFoot)]
        [InlineData("J/cm²", IrradiationUnit.JoulePerSquareCentimeter)]
        [InlineData("J/m²", IrradiationUnit.JoulePerSquareMeter)]
        [InlineData("J/mm²", IrradiationUnit.JoulePerSquareMillimeter)]
        [InlineData("kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot)]
        [InlineData("kJ/m²", IrradiationUnit.KilojoulePerSquareMeter)]
        [InlineData("kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter)]
        [InlineData("mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter)]
        [InlineData("Wh/m²", IrradiationUnit.WattHourPerSquareMeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, IrradiationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Irradiation.TryParseUnit(abbreviation, out IrradiationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Btu/ft²", IrradiationUnit.BtuPerSquareFoot)]
        [InlineData("en-US", "J/cm²", IrradiationUnit.JoulePerSquareCentimeter)]
        [InlineData("en-US", "J/m²", IrradiationUnit.JoulePerSquareMeter)]
        [InlineData("en-US", "J/mm²", IrradiationUnit.JoulePerSquareMillimeter)]
        [InlineData("en-US", "kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot)]
        [InlineData("en-US", "kJ/m²", IrradiationUnit.KilojoulePerSquareMeter)]
        [InlineData("en-US", "kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter)]
        [InlineData("en-US", "mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter)]
        [InlineData("en-US", "Wh/m²", IrradiationUnit.WattHourPerSquareMeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, IrradiationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Irradiation.TryParseUnit(abbreviation, out IrradiationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Btu/ft²", IrradiationUnit.BtuPerSquareFoot)]
        [InlineData("en-US", "J/cm²", IrradiationUnit.JoulePerSquareCentimeter)]
        [InlineData("en-US", "J/m²", IrradiationUnit.JoulePerSquareMeter)]
        [InlineData("en-US", "J/mm²", IrradiationUnit.JoulePerSquareMillimeter)]
        [InlineData("en-US", "kBtu/ft²", IrradiationUnit.KilobtuPerSquareFoot)]
        [InlineData("en-US", "kJ/m²", IrradiationUnit.KilojoulePerSquareMeter)]
        [InlineData("en-US", "kWh/m²", IrradiationUnit.KilowattHourPerSquareMeter)]
        [InlineData("en-US", "mJ/cm²", IrradiationUnit.MillijoulePerSquareCentimeter)]
        [InlineData("en-US", "Wh/m²", IrradiationUnit.WattHourPerSquareMeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, IrradiationUnit expectedUnit)
        {
            Assert.True(Irradiation.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out IrradiationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", IrradiationUnit.BtuPerSquareFoot, "Btu/ft²")]
        [InlineData("en-US", IrradiationUnit.JoulePerSquareCentimeter, "J/cm²")]
        [InlineData("en-US", IrradiationUnit.JoulePerSquareMeter, "J/m²")]
        [InlineData("en-US", IrradiationUnit.JoulePerSquareMillimeter, "J/mm²")]
        [InlineData("en-US", IrradiationUnit.KilobtuPerSquareFoot, "kBtu/ft²")]
        [InlineData("en-US", IrradiationUnit.KilojoulePerSquareMeter, "kJ/m²")]
        [InlineData("en-US", IrradiationUnit.KilowattHourPerSquareMeter, "kWh/m²")]
        [InlineData("en-US", IrradiationUnit.MillijoulePerSquareCentimeter, "mJ/cm²")]
        [InlineData("en-US", IrradiationUnit.WattHourPerSquareMeter, "Wh/m²")]
        public void GetAbbreviationForCulture(string culture, IrradiationUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Irradiation.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Irradiation.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Irradiation.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(IrradiationUnit unit)
        {
            var inBaseUnits = Irradiation.From(1.0, Irradiation.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(IrradiationUnit unit)
        {
            var quantity = Irradiation.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(IrradiationUnit unit)
        {
            Assert.All(Irradiation.Units.Where(u => u != Irradiation.BaseUnit), fromUnit =>
            {
                var quantity = Irradiation.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(IrradiationUnit unit)
        {
            var quantity = default(Irradiation);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(IrradiationUnit unit)
        {
            var quantity = Irradiation.From(3, Irradiation.BaseUnit);
            Irradiation expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<IrradiationUnit> quantityToConvert = quantity;
                IQuantity<IrradiationUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Irradiation joulepersquaremeter = Irradiation.FromJoulesPerSquareMeter(3);
            Assert.Equal(3, Irradiation.FromBtusPerSquareFoot(joulepersquaremeter.BtusPerSquareFoot).JoulesPerSquareMeter);
            Assert.Equal(3, Irradiation.FromJoulesPerSquareCentimeter(joulepersquaremeter.JoulesPerSquareCentimeter).JoulesPerSquareMeter);
            Assert.Equal(3, Irradiation.FromJoulesPerSquareMeter(joulepersquaremeter.JoulesPerSquareMeter).JoulesPerSquareMeter);
            Assert.Equal(3, Irradiation.FromJoulesPerSquareMillimeter(joulepersquaremeter.JoulesPerSquareMillimeter).JoulesPerSquareMeter);
            Assert.Equal(3, Irradiation.FromKilobtusPerSquareFoot(joulepersquaremeter.KilobtusPerSquareFoot).JoulesPerSquareMeter);
            Assert.Equal(3, Irradiation.FromKilojoulesPerSquareMeter(joulepersquaremeter.KilojoulesPerSquareMeter).JoulesPerSquareMeter);
            Assert.Equal(3, Irradiation.FromKilowattHoursPerSquareMeter(joulepersquaremeter.KilowattHoursPerSquareMeter).JoulesPerSquareMeter);
            Assert.Equal(3, Irradiation.FromMillijoulesPerSquareCentimeter(joulepersquaremeter.MillijoulesPerSquareCentimeter).JoulesPerSquareMeter);
            Assert.Equal(3, Irradiation.FromWattHoursPerSquareMeter(joulepersquaremeter.WattHoursPerSquareMeter).JoulesPerSquareMeter);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Irradiation v = Irradiation.FromJoulesPerSquareMeter(1);
            Assert.Equal(-1, -v.JoulesPerSquareMeter);
            Assert.Equal(2, (Irradiation.FromJoulesPerSquareMeter(3) - v).JoulesPerSquareMeter);
            Assert.Equal(2, (v + v).JoulesPerSquareMeter);
            Assert.Equal(10, (v * 10).JoulesPerSquareMeter);
            Assert.Equal(10, (10 * v).JoulesPerSquareMeter);
            Assert.Equal(2, (Irradiation.FromJoulesPerSquareMeter(10) / 5).JoulesPerSquareMeter);
            Assert.Equal(2, Irradiation.FromJoulesPerSquareMeter(10) / Irradiation.FromJoulesPerSquareMeter(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Irradiation oneJoulePerSquareMeter = Irradiation.FromJoulesPerSquareMeter(1);
            Irradiation twoJoulesPerSquareMeter = Irradiation.FromJoulesPerSquareMeter(2);

            Assert.True(oneJoulePerSquareMeter < twoJoulesPerSquareMeter);
            Assert.True(oneJoulePerSquareMeter <= twoJoulesPerSquareMeter);
            Assert.True(twoJoulesPerSquareMeter > oneJoulePerSquareMeter);
            Assert.True(twoJoulesPerSquareMeter >= oneJoulePerSquareMeter);

            Assert.False(oneJoulePerSquareMeter > twoJoulesPerSquareMeter);
            Assert.False(oneJoulePerSquareMeter >= twoJoulesPerSquareMeter);
            Assert.False(twoJoulesPerSquareMeter < oneJoulePerSquareMeter);
            Assert.False(twoJoulesPerSquareMeter <= oneJoulePerSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Irradiation joulepersquaremeter = Irradiation.FromJoulesPerSquareMeter(1);
            Assert.Equal(0, joulepersquaremeter.CompareTo(joulepersquaremeter));
            Assert.True(joulepersquaremeter.CompareTo(Irradiation.Zero) > 0);
            Assert.True(Irradiation.Zero.CompareTo(joulepersquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Irradiation joulepersquaremeter = Irradiation.FromJoulesPerSquareMeter(1);
            Assert.Throws<ArgumentException>(() => joulepersquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Irradiation joulepersquaremeter = Irradiation.FromJoulesPerSquareMeter(1);
            Assert.Throws<ArgumentNullException>(() => joulepersquaremeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, IrradiationUnit.JoulePerSquareMeter, 1, IrradiationUnit.JoulePerSquareMeter, true)]  // Same value and unit.
        [InlineData(1, IrradiationUnit.JoulePerSquareMeter, 2, IrradiationUnit.JoulePerSquareMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, IrradiationUnit unitA, double valueB, IrradiationUnit unitB, bool expectEqual)
        {
            var a = new Irradiation(valueA, unitA);
            var b = new Irradiation(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Irradiation.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Irradiation joulepersquaremeter = Irradiation.FromJoulesPerSquareMeter(1);
            Assert.False(joulepersquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Irradiation joulepersquaremeter = Irradiation.FromJoulesPerSquareMeter(1);
            Assert.False(joulepersquaremeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Irradiation.FromJoulesPerSquareMeter(firstValue);
            var otherQuantity = Irradiation.FromJoulesPerSquareMeter(secondValue);
            Irradiation maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Irradiation.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Irradiation.FromJoulesPerSquareMeter(1);
            var negativeTolerance = Irradiation.FromJoulesPerSquareMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<IrradiationUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Irradiation.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Irradiation.Info.Units, Irradiation.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Irradiation.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 Btu/ft²", new Irradiation(1, IrradiationUnit.BtuPerSquareFoot).ToString());
            Assert.Equal("1 J/cm²", new Irradiation(1, IrradiationUnit.JoulePerSquareCentimeter).ToString());
            Assert.Equal("1 J/m²", new Irradiation(1, IrradiationUnit.JoulePerSquareMeter).ToString());
            Assert.Equal("1 J/mm²", new Irradiation(1, IrradiationUnit.JoulePerSquareMillimeter).ToString());
            Assert.Equal("1 kBtu/ft²", new Irradiation(1, IrradiationUnit.KilobtuPerSquareFoot).ToString());
            Assert.Equal("1 kJ/m²", new Irradiation(1, IrradiationUnit.KilojoulePerSquareMeter).ToString());
            Assert.Equal("1 kWh/m²", new Irradiation(1, IrradiationUnit.KilowattHourPerSquareMeter).ToString());
            Assert.Equal("1 mJ/cm²", new Irradiation(1, IrradiationUnit.MillijoulePerSquareCentimeter).ToString());
            Assert.Equal("1 Wh/m²", new Irradiation(1, IrradiationUnit.WattHourPerSquareMeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 Btu/ft²", new Irradiation(1, IrradiationUnit.BtuPerSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 J/cm²", new Irradiation(1, IrradiationUnit.JoulePerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 J/m²", new Irradiation(1, IrradiationUnit.JoulePerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 J/mm²", new Irradiation(1, IrradiationUnit.JoulePerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kBtu/ft²", new Irradiation(1, IrradiationUnit.KilobtuPerSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 kJ/m²", new Irradiation(1, IrradiationUnit.KilojoulePerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kWh/m²", new Irradiation(1, IrradiationUnit.KilowattHourPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 mJ/cm²", new Irradiation(1, IrradiationUnit.MillijoulePerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Wh/m²", new Irradiation(1, IrradiationUnit.WattHourPerSquareMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 J/m²", new Irradiation(0.123456, IrradiationUnit.JoulePerSquareMeter).ToString("s1"));
            Assert.Equal("0.12 J/m²", new Irradiation(0.123456, IrradiationUnit.JoulePerSquareMeter).ToString("s2"));
            Assert.Equal("0.123 J/m²", new Irradiation(0.123456, IrradiationUnit.JoulePerSquareMeter).ToString("s3"));
            Assert.Equal("0.1235 J/m²", new Irradiation(0.123456, IrradiationUnit.JoulePerSquareMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J/m²", new Irradiation(0.123456, IrradiationUnit.JoulePerSquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 J/m²", new Irradiation(0.123456, IrradiationUnit.JoulePerSquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 J/m²", new Irradiation(0.123456, IrradiationUnit.JoulePerSquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 J/m²", new Irradiation(0.123456, IrradiationUnit.JoulePerSquareMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Irradiation.FromJoulesPerSquareMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Irradiation.FromJoulesPerSquareMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Irradiation.FromJoulesPerSquareMeter(1.0);
            var expected = Comparison.GetHashCode(typeof(Irradiation), quantity.As(Irradiation.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Irradiation.FromJoulesPerSquareMeter(value);
            Assert.Equal(Irradiation.FromJoulesPerSquareMeter(-value), -quantity);
        }
    }
}
