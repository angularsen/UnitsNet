//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Numerics;
using System.Resources;
using System.Runtime.Serialization;
using UnitsNet.Units;
using UnitsNet.Debug;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Time is a dimension in which events can be ordered from the past through the present into the future, and also the measure of durations of events and the intervals between them.
    /// </summary>
    [DataContract]
    [DebuggerDisplay(QuantityDebugProxy.DisplayFormat)]
    [DebuggerTypeProxy(typeof(QuantityDebugProxy))]
    public readonly partial struct Duration :
        IArithmeticQuantity<Duration, DurationUnit>,
#if NET7_0_OR_GREATER
        IMultiplyOperators<Duration, Jerk, Acceleration>,
        IMultiplyOperators<Duration, MolarFlow, AmountOfSubstance>,
        IMultiplyOperators<Duration, RotationalSpeed, Angle>,
        IMultiplyOperators<Duration, KinematicViscosity, Area>,
        IMultiplyOperators<Duration, ElectricCurrent, ElectricCharge>,
        IMultiplyOperators<Duration, ElectricCurrentGradient, ElectricCurrent>,
        IMultiplyOperators<Duration, Power, Energy>,
        IMultiplyOperators<Duration, ForceChangeRate, Force>,
        IMultiplyOperators<Duration, Speed, Length>,
        IMultiplyOperators<Duration, MassFlow, Mass>,
        IMultiplyOperators<Duration, PressureChangeRate, Pressure>,
        IMultiplyOperators<Duration, RadiationEquivalentDoseRate, RadiationEquivalentDose>,
        IMultiplyOperators<Duration, Acceleration, Speed>,
        IMultiplyOperators<Duration, TemperatureChangeRate, TemperatureDelta>,
        IMultiplyOperators<Duration, VolumeFlow, Volume>,
#endif
#if NET7_0_OR_GREATER
        IComparisonOperators<Duration, Duration, bool>,
        IParsable<Duration>,
#endif
        IComparable,
        IComparable<Duration>,
        IEquatable<Duration>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly DurationUnit? _unit;

        /// <summary>
        ///     Provides detailed information about the <see cref="Duration"/> quantity, including its name, base unit, unit mappings, base dimensions, and conversion functions.
        /// </summary>
        public sealed class DurationInfo: QuantityInfo<Duration, DurationUnit>
        {
            /// <inheritdoc />
            public DurationInfo(string name, DurationUnit baseUnit, IEnumerable<IUnitDefinition<DurationUnit>> unitMappings, Duration zero, BaseDimensions baseDimensions,
                QuantityFromDelegate<Duration, DurationUnit> fromDelegate, ResourceManager? unitAbbreviations)
                : base(name, baseUnit, unitMappings, zero, baseDimensions, fromDelegate, unitAbbreviations)
            {
            }

            /// <inheritdoc />
            public DurationInfo(string name, DurationUnit baseUnit, IEnumerable<IUnitDefinition<DurationUnit>> unitMappings, Duration zero, BaseDimensions baseDimensions)
                : this(name, baseUnit, unitMappings, zero, baseDimensions, Duration.From, new ResourceManager("UnitsNet.GeneratedCode.Resources.Duration", typeof(Duration).Assembly))
            {
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="DurationInfo"/> class with the default settings for the Duration quantity.
            /// </summary>
            /// <returns>A new instance of the <see cref="DurationInfo"/> class with the default settings.</returns>
            public static DurationInfo CreateDefault()
            {
                return new DurationInfo(nameof(Duration), DefaultBaseUnit, GetDefaultMappings(), new Duration(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="DurationInfo"/> class with the default settings for the Duration quantity and a callback for customizing the default unit mappings.
            /// </summary>
            /// <param name="customizeUnits">
            ///     A callback function for customizing the default unit mappings.
            /// </param>
            /// <returns>
            ///     A new instance of the <see cref="DurationInfo"/> class with the default settings.
            /// </returns>
            public static DurationInfo CreateDefault(Func<IEnumerable<UnitDefinition<DurationUnit>>, IEnumerable<IUnitDefinition<DurationUnit>>> customizeUnits)
            {
                return new DurationInfo(nameof(Duration), DefaultBaseUnit, customizeUnits(GetDefaultMappings()), new Duration(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     The <see cref="BaseDimensions" /> for <see cref="Duration"/> is T.
            /// </summary>
            public static BaseDimensions DefaultBaseDimensions { get; } = new BaseDimensions(0, 0, 1, 0, 0, 0, 0);

            /// <summary>
            ///     The default base unit of Duration is Second. All conversions, as defined in the <see cref="GetDefaultMappings"/>, go via this value.
            /// </summary>
            public static DurationUnit DefaultBaseUnit { get; } = DurationUnit.Second;

            /// <summary>
            ///     Retrieves the default mappings for <see cref="DurationUnit"/>.
            /// </summary>
            /// <returns>An <see cref="IEnumerable{T}"/> of <see cref="UnitDefinition{DurationUnit}"/> representing the default unit mappings for Duration.</returns>
            public static IEnumerable<UnitDefinition<DurationUnit>> GetDefaultMappings()
            {
                yield return new (DurationUnit.Day, "Day", "Days", new BaseUnits(time: DurationUnit.Day),
                     new QuantityValue(1, 86400)             
                );
                yield return new (DurationUnit.Hour, "Hour", "Hours", new BaseUnits(time: DurationUnit.Hour),
                     new QuantityValue(1, 3600)             
                );
                yield return new (DurationUnit.JulianYear, "JulianYear", "JulianYears", new BaseUnits(time: DurationUnit.JulianYear),
                     new QuantityValue(1, 31557600)             
                );
                yield return new (DurationUnit.Microsecond, "Microsecond", "Microseconds", new BaseUnits(time: DurationUnit.Microsecond),
                     1000000             
                );
                yield return new (DurationUnit.Millisecond, "Millisecond", "Milliseconds", new BaseUnits(time: DurationUnit.Millisecond),
                     1000             
                );
                yield return new (DurationUnit.Minute, "Minute", "Minutes", new BaseUnits(time: DurationUnit.Minute),
                     new QuantityValue(1, 60)             
                );
                yield return new (DurationUnit.Month30, "Month30", "Months30", new BaseUnits(time: DurationUnit.Month30),
                     new QuantityValue(1, 2592000)             
                );
                yield return new (DurationUnit.Nanosecond, "Nanosecond", "Nanoseconds", new BaseUnits(time: DurationUnit.Nanosecond),
                     1000000000             
                );
                yield return new (DurationUnit.Second, "Second", "Seconds", new BaseUnits(time: DurationUnit.Second));
                yield return new (DurationUnit.Sol, "Sol", "Sols", new BaseUnits(time: DurationUnit.Sol),
                     new QuantityValue(250, 22193811)             
                );
                yield return new (DurationUnit.Week, "Week", "Weeks", new BaseUnits(time: DurationUnit.Week),
                     new QuantityValue(1, 604800)             
                );
                yield return new (DurationUnit.Year365, "Year365", "Years365", new BaseUnits(time: DurationUnit.Year365),
                     new QuantityValue(1, 31536000)             
                );
            }
        }

        static Duration()
        {
            Info = UnitsNetSetup.CreateQuantityInfo(DurationInfo.CreateDefault);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Duration(QuantityValue value, DurationUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Duration(QuantityValue value, UnitSystem unitSystem)
        {
            _value = value;
            _unit = Info.GetDefaultUnit(unitSystem);
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Duration" /> instances.
        /// </summary>
        [Obsolete("Replaced by UnitConverter.Default")]
        public static UnitConverter DefaultConversionFunctions => UnitConverter.Default;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<Duration, DurationUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions => Info.BaseDimensions;

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static DurationUnit BaseUnit => Info.BaseUnitInfo.Value;

        /// <summary>
        ///     All units of measurement for the Duration quantity.
        /// </summary>
        public static IReadOnlyCollection<DurationUnit> Units => Info.Units;

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Duration Zero => Info.Zero;

        #endregion

        #region Properties

        /// <inheritdoc />
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public DurationUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<Duration, DurationUnit> QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Duration.BaseDimensions;

        #region Explicit implementations

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Enum IQuantity.Unit => Unit;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UnitKey IQuantity.UnitKey => UnitKey.ForUnit(Unit);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo IQuantity.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo<DurationUnit> IQuantity<DurationUnit>.QuantityInfo => Info;

#if NETSTANDARD2_0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuantityInstanceInfo<Duration> IQuantityInstance<Duration>.QuantityInfo => Info;
#endif

        #endregion

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Day"/>
        /// </summary>
        public QuantityValue Days => this.As(DurationUnit.Day);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Hour"/>
        /// </summary>
        public QuantityValue Hours => this.As(DurationUnit.Hour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.JulianYear"/>
        /// </summary>
        public QuantityValue JulianYears => this.As(DurationUnit.JulianYear);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Microsecond"/>
        /// </summary>
        public QuantityValue Microseconds => this.As(DurationUnit.Microsecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Millisecond"/>
        /// </summary>
        public QuantityValue Milliseconds => this.As(DurationUnit.Millisecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Minute"/>
        /// </summary>
        public QuantityValue Minutes => this.As(DurationUnit.Minute);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Month30"/>
        /// </summary>
        public QuantityValue Months30 => this.As(DurationUnit.Month30);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Nanosecond"/>
        /// </summary>
        public QuantityValue Nanoseconds => this.As(DurationUnit.Nanosecond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Second"/>
        /// </summary>
        public QuantityValue Seconds => this.As(DurationUnit.Second);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Sol"/>
        /// </summary>
        public QuantityValue Sols => this.As(DurationUnit.Sol);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Week"/>
        /// </summary>
        public QuantityValue Weeks => this.As(DurationUnit.Week);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DurationUnit.Year365"/>
        /// </summary>
        public QuantityValue Years365 => this.As(DurationUnit.Year365);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(DurationUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(DurationUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Day"/>.
        /// </summary>
        public static Duration FromDays(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Day);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Hour"/>.
        /// </summary>
        public static Duration FromHours(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Hour);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.JulianYear"/>.
        /// </summary>
        public static Duration FromJulianYears(QuantityValue value)
        {
            return new Duration(value, DurationUnit.JulianYear);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Microsecond"/>.
        /// </summary>
        public static Duration FromMicroseconds(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Microsecond);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Millisecond"/>.
        /// </summary>
        public static Duration FromMilliseconds(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Millisecond);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Minute"/>.
        /// </summary>
        public static Duration FromMinutes(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Minute);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Month30"/>.
        /// </summary>
        public static Duration FromMonths30(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Month30);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Nanosecond"/>.
        /// </summary>
        public static Duration FromNanoseconds(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Nanosecond);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Second"/>.
        /// </summary>
        public static Duration FromSeconds(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Second);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Sol"/>.
        /// </summary>
        public static Duration FromSols(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Sol);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Week"/>.
        /// </summary>
        public static Duration FromWeeks(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Week);
        }

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Year365"/>.
        /// </summary>
        public static Duration FromYears365(QuantityValue value)
        {
            return new Duration(value, DurationUnit.Year365);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DurationUnit" /> to <see cref="Duration" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Duration unit value.</returns>
        public static Duration From(QuantityValue value, DurationUnit fromUnit)
        {
            return new Duration(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Duration Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Duration Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Duration, DurationUnit>(str, provider, From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse([NotNullWhen(true)]string? str, out Duration result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse([NotNullWhen(true)]string? str, IFormatProvider? provider, out Duration result)
        {
            return QuantityParser.Default.TryParse<Duration, DurationUnit>(str, provider, From, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DurationUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DurationUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse(str, Info.UnitInfos, provider).Value;
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider?,out UnitsNet.Units.DurationUnit)"/>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, out DurationUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, IFormatProvider? provider, out DurationUnit unit)
        {
            return UnitParser.Default.TryParse(str, Info, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Duration operator -(Duration right)
        {
            return new Duration(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Duration"/> from adding two <see cref="Duration"/>.</summary>
        public static Duration operator +(Duration left, Duration right)
        {
            return new Duration(left.Value + right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Duration"/> from subtracting two <see cref="Duration"/>.</summary>
        public static Duration operator -(Duration left, Duration right)
        {
            return new Duration(left.Value - right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Duration"/> from multiplying value and <see cref="Duration"/>.</summary>
        public static Duration operator *(QuantityValue left, Duration right)
        {
            return new Duration(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Duration"/> from multiplying value and <see cref="Duration"/>.</summary>
        public static Duration operator *(Duration left, QuantityValue right)
        {
            return new Duration(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Duration"/> from dividing <see cref="Duration"/> by value.</summary>
        public static Duration operator /(Duration left, QuantityValue right)
        {
            return new Duration(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Duration"/> by <see cref="Duration"/>.</summary>
        public static QuantityValue operator /(Duration left, Duration right)
        {
            return left.Seconds / right.Seconds;
        }

        #endregion

        #region Relational Operators

        /// <summary>Get <see cref="Acceleration"/> from <see cref="Duration"/> * <see cref="Jerk"/>.</summary>
        public static Acceleration operator *(Duration duration, Jerk jerk)
        {
            return Acceleration.FromMetersPerSecondSquared(duration.Seconds * jerk.MetersPerSecondCubed);
        }

        /// <summary>Get <see cref="AmountOfSubstance"/> from <see cref="Duration"/> * <see cref="MolarFlow"/>.</summary>
        public static AmountOfSubstance operator *(Duration duration, MolarFlow molarFlow)
        {
            return AmountOfSubstance.FromMoles(duration.Seconds * molarFlow.MolesPerSecond);
        }

        /// <summary>Get <see cref="Angle"/> from <see cref="Duration"/> * <see cref="RotationalSpeed"/>.</summary>
        public static Angle operator *(Duration duration, RotationalSpeed rotationalSpeed)
        {
            return Angle.FromRadians(duration.Seconds * rotationalSpeed.RadiansPerSecond);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Duration"/> * <see cref="KinematicViscosity"/>.</summary>
        public static Area operator *(Duration duration, KinematicViscosity kinematicViscosity)
        {
            return Area.FromSquareMeters(duration.Seconds * kinematicViscosity.SquareMetersPerSecond);
        }

        /// <summary>Get <see cref="ElectricCharge"/> from <see cref="Duration"/> * <see cref="ElectricCurrent"/>.</summary>
        public static ElectricCharge operator *(Duration duration, ElectricCurrent electricCurrent)
        {
            return ElectricCharge.FromAmpereHours(duration.Hours * electricCurrent.Amperes);
        }

        /// <summary>Get <see cref="ElectricCurrent"/> from <see cref="Duration"/> * <see cref="ElectricCurrentGradient"/>.</summary>
        public static ElectricCurrent operator *(Duration duration, ElectricCurrentGradient electricCurrentGradient)
        {
            return ElectricCurrent.FromAmperes(duration.Seconds * electricCurrentGradient.AmperesPerSecond);
        }

        /// <summary>Get <see cref="Energy"/> from <see cref="Duration"/> * <see cref="Power"/>.</summary>
        public static Energy operator *(Duration duration, Power power)
        {
            return Energy.FromJoules(duration.Seconds * power.Watts);
        }

        /// <summary>Get <see cref="Force"/> from <see cref="Duration"/> * <see cref="ForceChangeRate"/>.</summary>
        public static Force operator *(Duration duration, ForceChangeRate forceChangeRate)
        {
            return Force.FromNewtons(duration.Seconds * forceChangeRate.NewtonsPerSecond);
        }

        /// <summary>Get <see cref="Length"/> from <see cref="Duration"/> * <see cref="Speed"/>.</summary>
        public static Length operator *(Duration duration, Speed speed)
        {
            return Length.FromMeters(duration.Seconds * speed.MetersPerSecond);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Duration"/> * <see cref="MassFlow"/>.</summary>
        public static Mass operator *(Duration duration, MassFlow massFlow)
        {
            return Mass.FromKilograms(duration.Seconds * massFlow.KilogramsPerSecond);
        }

        /// <summary>Get <see cref="Pressure"/> from <see cref="Duration"/> * <see cref="PressureChangeRate"/>.</summary>
        public static Pressure operator *(Duration duration, PressureChangeRate pressureChangeRate)
        {
            return Pressure.FromPascals(duration.Seconds * pressureChangeRate.PascalsPerSecond);
        }

        /// <summary>Get <see cref="RadiationEquivalentDose"/> from <see cref="Duration"/> * <see cref="RadiationEquivalentDoseRate"/>.</summary>
        public static RadiationEquivalentDose operator *(Duration duration, RadiationEquivalentDoseRate radiationEquivalentDoseRate)
        {
            return RadiationEquivalentDose.FromSieverts(duration.Hours * radiationEquivalentDoseRate.SievertsPerHour);
        }

        /// <summary>Get <see cref="Speed"/> from <see cref="Duration"/> * <see cref="Acceleration"/>.</summary>
        public static Speed operator *(Duration duration, Acceleration acceleration)
        {
            return Speed.FromMetersPerSecond(duration.Seconds * acceleration.MetersPerSecondSquared);
        }

        /// <summary>Get <see cref="TemperatureDelta"/> from <see cref="Duration"/> * <see cref="TemperatureChangeRate"/>.</summary>
        public static TemperatureDelta operator *(Duration duration, TemperatureChangeRate temperatureChangeRate)
        {
            return TemperatureDelta.FromDegreesCelsius(duration.Seconds * temperatureChangeRate.DegreesCelsiusPerSecond);
        }

        /// <summary>Get <see cref="Volume"/> from <see cref="Duration"/> * <see cref="VolumeFlow"/>.</summary>
        public static Volume operator *(Duration duration, VolumeFlow volumeFlow)
        {
            return Volume.FromCubicMeters(duration.Seconds * volumeFlow.CubicMetersPerSecond);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Duration left, Duration right)
        {
            return left.Value <= right.As(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Duration left, Duration right)
        {
            return left.Value >= right.As(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Duration left, Duration right)
        {
            return left.Value < right.As(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Duration left, Duration right)
        {
            return left.Value > right.As(left.Unit);
        }

        /// <summary>Indicates strict equality of two <see cref="Duration"/> quantities.</summary>
        public static bool operator ==(Duration left, Duration right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Duration"/> quantities.</summary>
        public static bool operator !=(Duration left, Duration right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Duration"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is not Duration otherQuantity)
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Duration"/> quantities.</summary>
        public bool Equals(Duration other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Duration.</returns>
        public override int GetHashCode()
        {
            return Comparison.GetHashCode(typeof(Duration), this.As(BaseUnit));
        }
        
        /// <inheritdoc  cref="CompareTo(Duration)" />
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        public int CompareTo(object? obj)
        {
            if (obj is not Duration otherQuantity)
                throw obj is null ? new ArgumentNullException(nameof(obj)) : ExceptionHelper.CreateArgumentException<Duration>(obj, nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>
        ///     Compares the current <see cref="Duration"/> with another <see cref="Duration"/> and returns an integer that indicates
        ///     whether the current instance precedes, follows, or occurs in the same position in the sort order as the other quantity, when converted to the same unit.
        /// </summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Duration other)
        {
            return _value.CompareTo(other.As(this.Unit));
        }

        #endregion

        #region Conversion Methods (explicit implementations for netstandard2.0)

#if NETSTANDARD2_0
        QuantityValue IQuantity.As(Enum unit) => UnitConverter.Default.ConvertValue(Value, UnitKey.ForUnit(Unit), unit);

        IQuantity IQuantity.ToUnit(Enum unit) => UnitConverter.Default.ConvertTo(this, unit);

        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);

        IQuantity<DurationUnit> IQuantity<DurationUnit>.ToUnit(DurationUnit unit) => this.ToUnit(unit);

        IQuantity<DurationUnit> IQuantity<DurationUnit>.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);
#endif

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null, null);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TQuantity}(TQuantity, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Default.Format(this, format, provider);
        }

        #endregion

    }
}
