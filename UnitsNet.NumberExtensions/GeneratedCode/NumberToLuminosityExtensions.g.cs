//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToLuminosity
{
    /// <summary>
    /// A number to Luminosity Extensions
    /// </summary>
    public static class NumberToLuminosityExtensions
    {
        /// <inheritdoc cref="Luminosity.FromDecawatts(double)" />
        public static Luminosity Decawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromDecawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromDecawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromDeciwatts(double)" />
        public static Luminosity Deciwatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromDeciwatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromDeciwatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromFemtowatts(double)" />
        public static Luminosity Femtowatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromFemtowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromFemtowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromGigawatts(double)" />
        public static Luminosity Gigawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromGigawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromGigawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromKilowatts(double)" />
        public static Luminosity Kilowatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromKilowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromKilowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromMegawatts(double)" />
        public static Luminosity Megawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromMegawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromMegawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromMicrowatts(double)" />
        public static Luminosity Microwatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromMicrowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromMicrowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromMilliwatts(double)" />
        public static Luminosity Milliwatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromMilliwatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromMilliwatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromNanowatts(double)" />
        public static Luminosity Nanowatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromNanowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromNanowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromPetawatts(double)" />
        public static Luminosity Petawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromPetawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromPetawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromPicowatts(double)" />
        public static Luminosity Picowatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromPicowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromPicowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromSolarLuminosities(double)" />
        public static Luminosity SolarLuminosities<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromSolarLuminosities(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromSolarLuminosities(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromTerawatts(double)" />
        public static Luminosity Terawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromTerawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromTerawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Luminosity.FromWatts(double)" />
        public static Luminosity Watts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Luminosity.FromWatts(double.CreateChecked(value));
#else
            , IConvertible
            => Luminosity.FromWatts(value.ToDouble(null));
#endif

    }
}
