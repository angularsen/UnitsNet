//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Luminance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LuminanceTestsBase : QuantityTestsBase
    {
        protected abstract double CandelasPerSquareFootInOneCandelaPerSquareMeter { get; }
        protected abstract double CandelasPerSquareInchInOneCandelaPerSquareMeter { get; }
        protected abstract double CandelasPerSquareMeterInOneCandelaPerSquareMeter { get; }
        protected abstract double CenticandelasPerSquareMeterInOneCandelaPerSquareMeter { get; }
        protected abstract double DecicandelasPerSquareMeterInOneCandelaPerSquareMeter { get; }
        protected abstract double KilocandelasPerSquareMeterInOneCandelaPerSquareMeter { get; }
        protected abstract double MicrocandelasPerSquareMeterInOneCandelaPerSquareMeter { get; }
        protected abstract double MillicandelasPerSquareMeterInOneCandelaPerSquareMeter { get; }
        protected abstract double NanocandelasPerSquareMeterInOneCandelaPerSquareMeter { get; }
        protected abstract double NitsInOneCandelaPerSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CandelasPerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double CandelasPerSquareInchTolerance { get { return 1e-5; } }
        protected virtual double CandelasPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double CenticandelasPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double DecicandelasPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilocandelasPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrocandelasPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MillicandelasPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NanocandelasPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NitsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(LuminanceUnit unit)
        {
            return unit switch
            {
                LuminanceUnit.CandelaPerSquareFoot => (CandelasPerSquareFootInOneCandelaPerSquareMeter, CandelasPerSquareFootTolerance),
                LuminanceUnit.CandelaPerSquareInch => (CandelasPerSquareInchInOneCandelaPerSquareMeter, CandelasPerSquareInchTolerance),
                LuminanceUnit.CandelaPerSquareMeter => (CandelasPerSquareMeterInOneCandelaPerSquareMeter, CandelasPerSquareMeterTolerance),
                LuminanceUnit.CenticandelaPerSquareMeter => (CenticandelasPerSquareMeterInOneCandelaPerSquareMeter, CenticandelasPerSquareMeterTolerance),
                LuminanceUnit.DecicandelaPerSquareMeter => (DecicandelasPerSquareMeterInOneCandelaPerSquareMeter, DecicandelasPerSquareMeterTolerance),
                LuminanceUnit.KilocandelaPerSquareMeter => (KilocandelasPerSquareMeterInOneCandelaPerSquareMeter, KilocandelasPerSquareMeterTolerance),
                LuminanceUnit.MicrocandelaPerSquareMeter => (MicrocandelasPerSquareMeterInOneCandelaPerSquareMeter, MicrocandelasPerSquareMeterTolerance),
                LuminanceUnit.MillicandelaPerSquareMeter => (MillicandelasPerSquareMeterInOneCandelaPerSquareMeter, MillicandelasPerSquareMeterTolerance),
                LuminanceUnit.NanocandelaPerSquareMeter => (NanocandelasPerSquareMeterInOneCandelaPerSquareMeter, NanocandelasPerSquareMeterTolerance),
                LuminanceUnit.Nit => (NitsInOneCandelaPerSquareMeter, NitsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { LuminanceUnit.CandelaPerSquareFoot },
            new object[] { LuminanceUnit.CandelaPerSquareInch },
            new object[] { LuminanceUnit.CandelaPerSquareMeter },
            new object[] { LuminanceUnit.CenticandelaPerSquareMeter },
            new object[] { LuminanceUnit.DecicandelaPerSquareMeter },
            new object[] { LuminanceUnit.KilocandelaPerSquareMeter },
            new object[] { LuminanceUnit.MicrocandelaPerSquareMeter },
            new object[] { LuminanceUnit.MillicandelaPerSquareMeter },
            new object[] { LuminanceUnit.NanocandelaPerSquareMeter },
            new object[] { LuminanceUnit.Nit },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Luminance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(LuminanceUnit.CandelaPerSquareMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Luminance(double.PositiveInfinity, LuminanceUnit.CandelaPerSquareMeter));
            var exception2 = Record.Exception(() => new Luminance(double.NegativeInfinity, LuminanceUnit.CandelaPerSquareMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Luminance(double.NaN, LuminanceUnit.CandelaPerSquareMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Luminance(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Luminance(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Luminance(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Luminance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Luminance(1, LuminanceUnit.CandelaPerSquareMeter);

            QuantityInfo<LuminanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Luminance.Zero, quantityInfo.Zero);
            Assert.Equal("Luminance", quantityInfo.Name);

            var units = Enum.GetValues<LuminanceUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void CandelaPerSquareMeterToLuminanceUnits()
        {
            Luminance candelapersquaremeter = Luminance.FromCandelasPerSquareMeter(1);
            AssertEx.EqualTolerance(CandelasPerSquareFootInOneCandelaPerSquareMeter, candelapersquaremeter.CandelasPerSquareFoot, CandelasPerSquareFootTolerance);
            AssertEx.EqualTolerance(CandelasPerSquareInchInOneCandelaPerSquareMeter, candelapersquaremeter.CandelasPerSquareInch, CandelasPerSquareInchTolerance);
            AssertEx.EqualTolerance(CandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(CenticandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.CenticandelasPerSquareMeter, CenticandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(DecicandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.DecicandelasPerSquareMeter, DecicandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilocandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.KilocandelasPerSquareMeter, KilocandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrocandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.MicrocandelasPerSquareMeter, MicrocandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MillicandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.MillicandelasPerSquareMeter, MillicandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanocandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.NanocandelasPerSquareMeter, NanocandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NitsInOneCandelaPerSquareMeter, candelapersquaremeter.Nits, NitsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Luminance.From(1, LuminanceUnit.CandelaPerSquareFoot);
            AssertEx.EqualTolerance(1, quantity00.CandelasPerSquareFoot, CandelasPerSquareFootTolerance);
            Assert.Equal(LuminanceUnit.CandelaPerSquareFoot, quantity00.Unit);

            var quantity01 = Luminance.From(1, LuminanceUnit.CandelaPerSquareInch);
            AssertEx.EqualTolerance(1, quantity01.CandelasPerSquareInch, CandelasPerSquareInchTolerance);
            Assert.Equal(LuminanceUnit.CandelaPerSquareInch, quantity01.Unit);

            var quantity02 = Luminance.From(1, LuminanceUnit.CandelaPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity02.CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
            Assert.Equal(LuminanceUnit.CandelaPerSquareMeter, quantity02.Unit);

            var quantity03 = Luminance.From(1, LuminanceUnit.CenticandelaPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity03.CenticandelasPerSquareMeter, CenticandelasPerSquareMeterTolerance);
            Assert.Equal(LuminanceUnit.CenticandelaPerSquareMeter, quantity03.Unit);

            var quantity04 = Luminance.From(1, LuminanceUnit.DecicandelaPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity04.DecicandelasPerSquareMeter, DecicandelasPerSquareMeterTolerance);
            Assert.Equal(LuminanceUnit.DecicandelaPerSquareMeter, quantity04.Unit);

            var quantity05 = Luminance.From(1, LuminanceUnit.KilocandelaPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity05.KilocandelasPerSquareMeter, KilocandelasPerSquareMeterTolerance);
            Assert.Equal(LuminanceUnit.KilocandelaPerSquareMeter, quantity05.Unit);

            var quantity06 = Luminance.From(1, LuminanceUnit.MicrocandelaPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity06.MicrocandelasPerSquareMeter, MicrocandelasPerSquareMeterTolerance);
            Assert.Equal(LuminanceUnit.MicrocandelaPerSquareMeter, quantity06.Unit);

            var quantity07 = Luminance.From(1, LuminanceUnit.MillicandelaPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity07.MillicandelasPerSquareMeter, MillicandelasPerSquareMeterTolerance);
            Assert.Equal(LuminanceUnit.MillicandelaPerSquareMeter, quantity07.Unit);

            var quantity08 = Luminance.From(1, LuminanceUnit.NanocandelaPerSquareMeter);
            AssertEx.EqualTolerance(1, quantity08.NanocandelasPerSquareMeter, NanocandelasPerSquareMeterTolerance);
            Assert.Equal(LuminanceUnit.NanocandelaPerSquareMeter, quantity08.Unit);

            var quantity09 = Luminance.From(1, LuminanceUnit.Nit);
            AssertEx.EqualTolerance(1, quantity09.Nits, NitsTolerance);
            Assert.Equal(LuminanceUnit.Nit, quantity09.Unit);

        }

        [Fact]
        public void FromCandelasPerSquareMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Luminance.FromCandelasPerSquareMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Luminance.FromCandelasPerSquareMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromCandelasPerSquareMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Luminance.FromCandelasPerSquareMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var candelapersquaremeter = Luminance.FromCandelasPerSquareMeter(1);
            AssertEx.EqualTolerance(CandelasPerSquareFootInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.CandelaPerSquareFoot), CandelasPerSquareFootTolerance);
            AssertEx.EqualTolerance(CandelasPerSquareInchInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.CandelaPerSquareInch), CandelasPerSquareInchTolerance);
            AssertEx.EqualTolerance(CandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.CandelaPerSquareMeter), CandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(CenticandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.CenticandelaPerSquareMeter), CenticandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(DecicandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.DecicandelaPerSquareMeter), DecicandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilocandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.KilocandelaPerSquareMeter), KilocandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MicrocandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.MicrocandelaPerSquareMeter), MicrocandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MillicandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.MillicandelaPerSquareMeter), MillicandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NanocandelasPerSquareMeterInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.NanocandelaPerSquareMeter), NanocandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NitsInOneCandelaPerSquareMeter, candelapersquaremeter.As(LuminanceUnit.Nit), NitsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Luminance.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
            var expectedValue = quantity.As(Luminance.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
            var expectedUnit = Luminance.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Luminance quantityToConvert = quantity;

                Luminance convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<LuminanceUnit> quantityToConvert = quantity;

                IQuantity<LuminanceUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<LuminanceUnit> quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<LuminanceUnit> quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Luminance(value: 1, unit: Luminance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Luminance.Parse("1 Cd/ft²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CandelasPerSquareFoot, CandelasPerSquareFootTolerance);
                Assert.Equal(LuminanceUnit.CandelaPerSquareFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Luminance.Parse("1 Cd/in²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CandelasPerSquareInch, CandelasPerSquareInchTolerance);
                Assert.Equal(LuminanceUnit.CandelaPerSquareInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Luminance.Parse("1 Cd/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.CandelaPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Luminance.Parse("1 cCd/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CenticandelasPerSquareMeter, CenticandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.CenticandelaPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Luminance.Parse("1 dCd/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecicandelasPerSquareMeter, DecicandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.DecicandelaPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Luminance.Parse("1 kCd/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilocandelasPerSquareMeter, KilocandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.KilocandelaPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Luminance.Parse("1 µCd/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrocandelasPerSquareMeter, MicrocandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.MicrocandelaPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Luminance.Parse("1 mCd/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MillicandelasPerSquareMeter, MillicandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.MillicandelaPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Luminance.Parse("1 nCd/m²", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanocandelasPerSquareMeter, NanocandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.NanocandelaPerSquareMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Luminance.Parse("1 nt", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nits, NitsTolerance);
                Assert.Equal(LuminanceUnit.Nit, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Luminance.TryParse("1 Cd/ft²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CandelasPerSquareFoot, CandelasPerSquareFootTolerance);
                Assert.Equal(LuminanceUnit.CandelaPerSquareFoot, parsed.Unit);
            }

            {
                Assert.True(Luminance.TryParse("1 Cd/in²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CandelasPerSquareInch, CandelasPerSquareInchTolerance);
                Assert.Equal(LuminanceUnit.CandelaPerSquareInch, parsed.Unit);
            }

            {
                Assert.True(Luminance.TryParse("1 Cd/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.CandelaPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Luminance.TryParse("1 cCd/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CenticandelasPerSquareMeter, CenticandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.CenticandelaPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Luminance.TryParse("1 dCd/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecicandelasPerSquareMeter, DecicandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.DecicandelaPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Luminance.TryParse("1 kCd/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilocandelasPerSquareMeter, KilocandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.KilocandelaPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Luminance.TryParse("1 µCd/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrocandelasPerSquareMeter, MicrocandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.MicrocandelaPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Luminance.TryParse("1 mCd/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MillicandelasPerSquareMeter, MillicandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.MillicandelaPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Luminance.TryParse("1 nCd/m²", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanocandelasPerSquareMeter, NanocandelasPerSquareMeterTolerance);
                Assert.Equal(LuminanceUnit.NanocandelaPerSquareMeter, parsed.Unit);
            }

            {
                Assert.True(Luminance.TryParse("1 nt", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nits, NitsTolerance);
                Assert.Equal(LuminanceUnit.Nit, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("Cd/ft²", LuminanceUnit.CandelaPerSquareFoot)]
        [InlineData("Cd/in²", LuminanceUnit.CandelaPerSquareInch)]
        [InlineData("Cd/m²", LuminanceUnit.CandelaPerSquareMeter)]
        [InlineData("cCd/m²", LuminanceUnit.CenticandelaPerSquareMeter)]
        [InlineData("dCd/m²", LuminanceUnit.DecicandelaPerSquareMeter)]
        [InlineData("kCd/m²", LuminanceUnit.KilocandelaPerSquareMeter)]
        [InlineData("µCd/m²", LuminanceUnit.MicrocandelaPerSquareMeter)]
        [InlineData("mCd/m²", LuminanceUnit.MillicandelaPerSquareMeter)]
        [InlineData("nCd/m²", LuminanceUnit.NanocandelaPerSquareMeter)]
        [InlineData("nt", LuminanceUnit.Nit)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, LuminanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            LuminanceUnit parsedUnit = Luminance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Cd/ft²", LuminanceUnit.CandelaPerSquareFoot)]
        [InlineData("Cd/in²", LuminanceUnit.CandelaPerSquareInch)]
        [InlineData("Cd/m²", LuminanceUnit.CandelaPerSquareMeter)]
        [InlineData("cCd/m²", LuminanceUnit.CenticandelaPerSquareMeter)]
        [InlineData("dCd/m²", LuminanceUnit.DecicandelaPerSquareMeter)]
        [InlineData("kCd/m²", LuminanceUnit.KilocandelaPerSquareMeter)]
        [InlineData("µCd/m²", LuminanceUnit.MicrocandelaPerSquareMeter)]
        [InlineData("mCd/m²", LuminanceUnit.MillicandelaPerSquareMeter)]
        [InlineData("nCd/m²", LuminanceUnit.NanocandelaPerSquareMeter)]
        [InlineData("nt", LuminanceUnit.Nit)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, LuminanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            LuminanceUnit parsedUnit = Luminance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Cd/ft²", LuminanceUnit.CandelaPerSquareFoot)]
        [InlineData("en-US", "Cd/in²", LuminanceUnit.CandelaPerSquareInch)]
        [InlineData("en-US", "Cd/m²", LuminanceUnit.CandelaPerSquareMeter)]
        [InlineData("en-US", "cCd/m²", LuminanceUnit.CenticandelaPerSquareMeter)]
        [InlineData("en-US", "dCd/m²", LuminanceUnit.DecicandelaPerSquareMeter)]
        [InlineData("en-US", "kCd/m²", LuminanceUnit.KilocandelaPerSquareMeter)]
        [InlineData("en-US", "µCd/m²", LuminanceUnit.MicrocandelaPerSquareMeter)]
        [InlineData("en-US", "mCd/m²", LuminanceUnit.MillicandelaPerSquareMeter)]
        [InlineData("en-US", "nCd/m²", LuminanceUnit.NanocandelaPerSquareMeter)]
        [InlineData("en-US", "nt", LuminanceUnit.Nit)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, LuminanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            LuminanceUnit parsedUnit = Luminance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Cd/ft²", LuminanceUnit.CandelaPerSquareFoot)]
        [InlineData("en-US", "Cd/in²", LuminanceUnit.CandelaPerSquareInch)]
        [InlineData("en-US", "Cd/m²", LuminanceUnit.CandelaPerSquareMeter)]
        [InlineData("en-US", "cCd/m²", LuminanceUnit.CenticandelaPerSquareMeter)]
        [InlineData("en-US", "dCd/m²", LuminanceUnit.DecicandelaPerSquareMeter)]
        [InlineData("en-US", "kCd/m²", LuminanceUnit.KilocandelaPerSquareMeter)]
        [InlineData("en-US", "µCd/m²", LuminanceUnit.MicrocandelaPerSquareMeter)]
        [InlineData("en-US", "mCd/m²", LuminanceUnit.MillicandelaPerSquareMeter)]
        [InlineData("en-US", "nCd/m²", LuminanceUnit.NanocandelaPerSquareMeter)]
        [InlineData("en-US", "nt", LuminanceUnit.Nit)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, LuminanceUnit expectedUnit)
        {
            LuminanceUnit parsedUnit = Luminance.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Cd/ft²", LuminanceUnit.CandelaPerSquareFoot)]
        [InlineData("Cd/in²", LuminanceUnit.CandelaPerSquareInch)]
        [InlineData("Cd/m²", LuminanceUnit.CandelaPerSquareMeter)]
        [InlineData("cCd/m²", LuminanceUnit.CenticandelaPerSquareMeter)]
        [InlineData("dCd/m²", LuminanceUnit.DecicandelaPerSquareMeter)]
        [InlineData("kCd/m²", LuminanceUnit.KilocandelaPerSquareMeter)]
        [InlineData("µCd/m²", LuminanceUnit.MicrocandelaPerSquareMeter)]
        [InlineData("mCd/m²", LuminanceUnit.MillicandelaPerSquareMeter)]
        [InlineData("nCd/m²", LuminanceUnit.NanocandelaPerSquareMeter)]
        [InlineData("nt", LuminanceUnit.Nit)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, LuminanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Luminance.TryParseUnit(abbreviation, out LuminanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Cd/ft²", LuminanceUnit.CandelaPerSquareFoot)]
        [InlineData("Cd/in²", LuminanceUnit.CandelaPerSquareInch)]
        [InlineData("Cd/m²", LuminanceUnit.CandelaPerSquareMeter)]
        [InlineData("cCd/m²", LuminanceUnit.CenticandelaPerSquareMeter)]
        [InlineData("dCd/m²", LuminanceUnit.DecicandelaPerSquareMeter)]
        [InlineData("kCd/m²", LuminanceUnit.KilocandelaPerSquareMeter)]
        [InlineData("µCd/m²", LuminanceUnit.MicrocandelaPerSquareMeter)]
        [InlineData("mCd/m²", LuminanceUnit.MillicandelaPerSquareMeter)]
        [InlineData("nCd/m²", LuminanceUnit.NanocandelaPerSquareMeter)]
        [InlineData("nt", LuminanceUnit.Nit)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, LuminanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Luminance.TryParseUnit(abbreviation, out LuminanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Cd/ft²", LuminanceUnit.CandelaPerSquareFoot)]
        [InlineData("en-US", "Cd/in²", LuminanceUnit.CandelaPerSquareInch)]
        [InlineData("en-US", "Cd/m²", LuminanceUnit.CandelaPerSquareMeter)]
        [InlineData("en-US", "cCd/m²", LuminanceUnit.CenticandelaPerSquareMeter)]
        [InlineData("en-US", "dCd/m²", LuminanceUnit.DecicandelaPerSquareMeter)]
        [InlineData("en-US", "kCd/m²", LuminanceUnit.KilocandelaPerSquareMeter)]
        [InlineData("en-US", "µCd/m²", LuminanceUnit.MicrocandelaPerSquareMeter)]
        [InlineData("en-US", "mCd/m²", LuminanceUnit.MillicandelaPerSquareMeter)]
        [InlineData("en-US", "nCd/m²", LuminanceUnit.NanocandelaPerSquareMeter)]
        [InlineData("en-US", "nt", LuminanceUnit.Nit)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, LuminanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Luminance.TryParseUnit(abbreviation, out LuminanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Cd/ft²", LuminanceUnit.CandelaPerSquareFoot)]
        [InlineData("en-US", "Cd/in²", LuminanceUnit.CandelaPerSquareInch)]
        [InlineData("en-US", "Cd/m²", LuminanceUnit.CandelaPerSquareMeter)]
        [InlineData("en-US", "cCd/m²", LuminanceUnit.CenticandelaPerSquareMeter)]
        [InlineData("en-US", "dCd/m²", LuminanceUnit.DecicandelaPerSquareMeter)]
        [InlineData("en-US", "kCd/m²", LuminanceUnit.KilocandelaPerSquareMeter)]
        [InlineData("en-US", "µCd/m²", LuminanceUnit.MicrocandelaPerSquareMeter)]
        [InlineData("en-US", "mCd/m²", LuminanceUnit.MillicandelaPerSquareMeter)]
        [InlineData("en-US", "nCd/m²", LuminanceUnit.NanocandelaPerSquareMeter)]
        [InlineData("en-US", "nt", LuminanceUnit.Nit)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, LuminanceUnit expectedUnit)
        {
            Assert.True(Luminance.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out LuminanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(LuminanceUnit unit)
        {
            var inBaseUnits = Luminance.From(1.0, Luminance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(LuminanceUnit unit)
        {
            var quantity = Luminance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(LuminanceUnit unit)
        {
            Assert.All(Luminance.Units.Where(u => u != Luminance.BaseUnit), fromUnit =>
            {
                var quantity = Luminance.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(LuminanceUnit unit)
        {
            var quantity = default(Luminance);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(LuminanceUnit unit)
        {
            var quantity = Luminance.From(3, Luminance.BaseUnit);
            Luminance expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<LuminanceUnit> quantityToConvert = quantity;
                IQuantity<LuminanceUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Luminance candelapersquaremeter = Luminance.FromCandelasPerSquareMeter(1);
            AssertEx.EqualTolerance(1, Luminance.FromCandelasPerSquareFoot(candelapersquaremeter.CandelasPerSquareFoot).CandelasPerSquareMeter, CandelasPerSquareFootTolerance);
            AssertEx.EqualTolerance(1, Luminance.FromCandelasPerSquareInch(candelapersquaremeter.CandelasPerSquareInch).CandelasPerSquareMeter, CandelasPerSquareInchTolerance);
            AssertEx.EqualTolerance(1, Luminance.FromCandelasPerSquareMeter(candelapersquaremeter.CandelasPerSquareMeter).CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Luminance.FromCenticandelasPerSquareMeter(candelapersquaremeter.CenticandelasPerSquareMeter).CandelasPerSquareMeter, CenticandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Luminance.FromDecicandelasPerSquareMeter(candelapersquaremeter.DecicandelasPerSquareMeter).CandelasPerSquareMeter, DecicandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Luminance.FromKilocandelasPerSquareMeter(candelapersquaremeter.KilocandelasPerSquareMeter).CandelasPerSquareMeter, KilocandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Luminance.FromMicrocandelasPerSquareMeter(candelapersquaremeter.MicrocandelasPerSquareMeter).CandelasPerSquareMeter, MicrocandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Luminance.FromMillicandelasPerSquareMeter(candelapersquaremeter.MillicandelasPerSquareMeter).CandelasPerSquareMeter, MillicandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Luminance.FromNanocandelasPerSquareMeter(candelapersquaremeter.NanocandelasPerSquareMeter).CandelasPerSquareMeter, NanocandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(1, Luminance.FromNits(candelapersquaremeter.Nits).CandelasPerSquareMeter, NitsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Luminance v = Luminance.FromCandelasPerSquareMeter(1);
            AssertEx.EqualTolerance(-1, -v.CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (Luminance.FromCandelasPerSquareMeter(3)-v).CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, (Luminance.FromCandelasPerSquareMeter(10)/5).CandelasPerSquareMeter, CandelasPerSquareMeterTolerance);
            AssertEx.EqualTolerance(2, Luminance.FromCandelasPerSquareMeter(10)/Luminance.FromCandelasPerSquareMeter(5), CandelasPerSquareMeterTolerance);
        }

        /// <summary>Tests generated arithmetic operators for quantity relations defined in <c>Common/UnitRelations.json</c></summary>
        [Fact]
        public void ArithmeticOperators_Relational()
        {
            Assert.Equal(LuminousIntensity.FromCandela(20), Luminance.FromCandelasPerSquareMeter(10) * Area.FromSquareMeters(2));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Luminance oneCandelaPerSquareMeter = Luminance.FromCandelasPerSquareMeter(1);
            Luminance twoCandelasPerSquareMeter = Luminance.FromCandelasPerSquareMeter(2);

            Assert.True(oneCandelaPerSquareMeter < twoCandelasPerSquareMeter);
            Assert.True(oneCandelaPerSquareMeter <= twoCandelasPerSquareMeter);
            Assert.True(twoCandelasPerSquareMeter > oneCandelaPerSquareMeter);
            Assert.True(twoCandelasPerSquareMeter >= oneCandelaPerSquareMeter);

            Assert.False(oneCandelaPerSquareMeter > twoCandelasPerSquareMeter);
            Assert.False(oneCandelaPerSquareMeter >= twoCandelasPerSquareMeter);
            Assert.False(twoCandelasPerSquareMeter < oneCandelaPerSquareMeter);
            Assert.False(twoCandelasPerSquareMeter <= oneCandelaPerSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Luminance candelapersquaremeter = Luminance.FromCandelasPerSquareMeter(1);
            Assert.Equal(0, candelapersquaremeter.CompareTo(candelapersquaremeter));
            Assert.True(candelapersquaremeter.CompareTo(Luminance.Zero) > 0);
            Assert.True(Luminance.Zero.CompareTo(candelapersquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Luminance candelapersquaremeter = Luminance.FromCandelasPerSquareMeter(1);
            Assert.Throws<ArgumentException>(() => candelapersquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Luminance candelapersquaremeter = Luminance.FromCandelasPerSquareMeter(1);
            Assert.Throws<ArgumentNullException>(() => candelapersquaremeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, LuminanceUnit.CandelaPerSquareMeter, 1, LuminanceUnit.CandelaPerSquareMeter, true)]  // Same value and unit.
        [InlineData(1, LuminanceUnit.CandelaPerSquareMeter, 2, LuminanceUnit.CandelaPerSquareMeter, false)] // Different value.
        [InlineData(2, LuminanceUnit.CandelaPerSquareMeter, 1, LuminanceUnit.CandelaPerSquareFoot, false)] // Different value and unit.
        [InlineData(1, LuminanceUnit.CandelaPerSquareMeter, 1, LuminanceUnit.CandelaPerSquareFoot, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, LuminanceUnit unitA, double valueB, LuminanceUnit unitB, bool expectEqual)
        {
            var a = new Luminance(valueA, unitA);
            var b = new Luminance(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Luminance.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Luminance candelapersquaremeter = Luminance.FromCandelasPerSquareMeter(1);
            Assert.False(candelapersquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Luminance candelapersquaremeter = Luminance.FromCandelasPerSquareMeter(1);
            Assert.False(candelapersquaremeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Luminance.FromCandelasPerSquareMeter(firstValue);
            var otherQuantity = Luminance.FromCandelasPerSquareMeter(secondValue);
            Luminance maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, Luminance.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Luminance.FromCandelasPerSquareMeter(1);
            var negativeTolerance = Luminance.FromCandelasPerSquareMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<LuminanceUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Luminance.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 Cd/ft²", new Luminance(1, LuminanceUnit.CandelaPerSquareFoot).ToString());
            Assert.Equal("1 Cd/in²", new Luminance(1, LuminanceUnit.CandelaPerSquareInch).ToString());
            Assert.Equal("1 Cd/m²", new Luminance(1, LuminanceUnit.CandelaPerSquareMeter).ToString());
            Assert.Equal("1 cCd/m²", new Luminance(1, LuminanceUnit.CenticandelaPerSquareMeter).ToString());
            Assert.Equal("1 dCd/m²", new Luminance(1, LuminanceUnit.DecicandelaPerSquareMeter).ToString());
            Assert.Equal("1 kCd/m²", new Luminance(1, LuminanceUnit.KilocandelaPerSquareMeter).ToString());
            Assert.Equal("1 µCd/m²", new Luminance(1, LuminanceUnit.MicrocandelaPerSquareMeter).ToString());
            Assert.Equal("1 mCd/m²", new Luminance(1, LuminanceUnit.MillicandelaPerSquareMeter).ToString());
            Assert.Equal("1 nCd/m²", new Luminance(1, LuminanceUnit.NanocandelaPerSquareMeter).ToString());
            Assert.Equal("1 nt", new Luminance(1, LuminanceUnit.Nit).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 Cd/ft²", new Luminance(1, LuminanceUnit.CandelaPerSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 Cd/in²", new Luminance(1, LuminanceUnit.CandelaPerSquareInch).ToString(swedishCulture));
            Assert.Equal("1 Cd/m²", new Luminance(1, LuminanceUnit.CandelaPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 cCd/m²", new Luminance(1, LuminanceUnit.CenticandelaPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 dCd/m²", new Luminance(1, LuminanceUnit.DecicandelaPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kCd/m²", new Luminance(1, LuminanceUnit.KilocandelaPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 µCd/m²", new Luminance(1, LuminanceUnit.MicrocandelaPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 mCd/m²", new Luminance(1, LuminanceUnit.MillicandelaPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 nCd/m²", new Luminance(1, LuminanceUnit.NanocandelaPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 nt", new Luminance(1, LuminanceUnit.Nit).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Cd/m²", new Luminance(0.123456, LuminanceUnit.CandelaPerSquareMeter).ToString("s1"));
            Assert.Equal("0.12 Cd/m²", new Luminance(0.123456, LuminanceUnit.CandelaPerSquareMeter).ToString("s2"));
            Assert.Equal("0.123 Cd/m²", new Luminance(0.123456, LuminanceUnit.CandelaPerSquareMeter).ToString("s3"));
            Assert.Equal("0.1235 Cd/m²", new Luminance(0.123456, LuminanceUnit.CandelaPerSquareMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Cd/m²", new Luminance(0.123456, LuminanceUnit.CandelaPerSquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 Cd/m²", new Luminance(0.123456, LuminanceUnit.CandelaPerSquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 Cd/m²", new Luminance(0.123456, LuminanceUnit.CandelaPerSquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 Cd/m²", new Luminance(0.123456, LuminanceUnit.CandelaPerSquareMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Luminance.FromCandelasPerSquareMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Luminance.FromCandelasPerSquareMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Luminance.FromCandelasPerSquareMeter(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Luminance.FromCandelasPerSquareMeter(value);
            Assert.Equal(Luminance.FromCandelasPerSquareMeter(-value), -quantity);
        }
    }
}
