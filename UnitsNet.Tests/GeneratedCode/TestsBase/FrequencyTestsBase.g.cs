//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Frequency.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class FrequencyTestsBase : QuantityTestsBase
    {
        protected abstract double BeatsPerMinuteInOneHertz { get; }
        protected abstract double CyclesPerHourInOneHertz { get; }
        protected abstract double CyclesPerMinuteInOneHertz { get; }
        protected abstract double GigahertzInOneHertz { get; }
        protected abstract double HertzInOneHertz { get; }
        protected abstract double KilohertzInOneHertz { get; }
        protected abstract double MegahertzInOneHertz { get; }
        protected abstract double MicrohertzInOneHertz { get; }
        protected abstract double MillihertzInOneHertz { get; }
        protected abstract double PerSecondInOneHertz { get; }
        protected abstract double RadiansPerSecondInOneHertz { get; }
        protected abstract double TerahertzInOneHertz { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BeatsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double CyclesPerHourTolerance { get { return 1e-5; } }
        protected virtual double CyclesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double GigahertzTolerance { get { return 1e-5; } }
        protected virtual double HertzTolerance { get { return 1e-5; } }
        protected virtual double KilohertzTolerance { get { return 1e-5; } }
        protected virtual double MegahertzTolerance { get { return 1e-5; } }
        protected virtual double MicrohertzTolerance { get { return 1e-5; } }
        protected virtual double MillihertzTolerance { get { return 1e-5; } }
        protected virtual double PerSecondTolerance { get { return 1e-5; } }
        protected virtual double RadiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TerahertzTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(FrequencyUnit unit)
        {
            return unit switch
            {
                FrequencyUnit.BeatPerMinute => (BeatsPerMinuteInOneHertz, BeatsPerMinuteTolerance),
                FrequencyUnit.CyclePerHour => (CyclesPerHourInOneHertz, CyclesPerHourTolerance),
                FrequencyUnit.CyclePerMinute => (CyclesPerMinuteInOneHertz, CyclesPerMinuteTolerance),
                FrequencyUnit.Gigahertz => (GigahertzInOneHertz, GigahertzTolerance),
                FrequencyUnit.Hertz => (HertzInOneHertz, HertzTolerance),
                FrequencyUnit.Kilohertz => (KilohertzInOneHertz, KilohertzTolerance),
                FrequencyUnit.Megahertz => (MegahertzInOneHertz, MegahertzTolerance),
                FrequencyUnit.Microhertz => (MicrohertzInOneHertz, MicrohertzTolerance),
                FrequencyUnit.Millihertz => (MillihertzInOneHertz, MillihertzTolerance),
                FrequencyUnit.PerSecond => (PerSecondInOneHertz, PerSecondTolerance),
                FrequencyUnit.RadianPerSecond => (RadiansPerSecondInOneHertz, RadiansPerSecondTolerance),
                FrequencyUnit.Terahertz => (TerahertzInOneHertz, TerahertzTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { FrequencyUnit.BeatPerMinute },
            new object[] { FrequencyUnit.CyclePerHour },
            new object[] { FrequencyUnit.CyclePerMinute },
            new object[] { FrequencyUnit.Gigahertz },
            new object[] { FrequencyUnit.Hertz },
            new object[] { FrequencyUnit.Kilohertz },
            new object[] { FrequencyUnit.Megahertz },
            new object[] { FrequencyUnit.Microhertz },
            new object[] { FrequencyUnit.Millihertz },
            new object[] { FrequencyUnit.PerSecond },
            new object[] { FrequencyUnit.RadianPerSecond },
            new object[] { FrequencyUnit.Terahertz },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Frequency();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(FrequencyUnit.Hertz, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Frequency(double.PositiveInfinity, FrequencyUnit.Hertz));
            var exception2 = Record.Exception(() => new Frequency(double.NegativeInfinity, FrequencyUnit.Hertz));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Frequency(double.NaN, FrequencyUnit.Hertz));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Frequency(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Frequency(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Frequency(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Frequency_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            FrequencyUnit[] unitsOrderedByName = EnumHelper.GetValues<FrequencyUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new Frequency(1, FrequencyUnit.Hertz);

            QuantityInfo<Frequency, FrequencyUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Frequency", quantityInfo.Name);
            Assert.Equal(Frequency.Zero, quantityInfo.Zero);
            Assert.Equal(Frequency.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Frequency.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<FrequencyUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void HertzToFrequencyUnits()
        {
            Frequency hertz = Frequency.FromHertz(1);
            AssertEx.EqualTolerance(BeatsPerMinuteInOneHertz, hertz.BeatsPerMinute, BeatsPerMinuteTolerance);
            AssertEx.EqualTolerance(CyclesPerHourInOneHertz, hertz.CyclesPerHour, CyclesPerHourTolerance);
            AssertEx.EqualTolerance(CyclesPerMinuteInOneHertz, hertz.CyclesPerMinute, CyclesPerMinuteTolerance);
            AssertEx.EqualTolerance(GigahertzInOneHertz, hertz.Gigahertz, GigahertzTolerance);
            AssertEx.EqualTolerance(HertzInOneHertz, hertz.Hertz, HertzTolerance);
            AssertEx.EqualTolerance(KilohertzInOneHertz, hertz.Kilohertz, KilohertzTolerance);
            AssertEx.EqualTolerance(MegahertzInOneHertz, hertz.Megahertz, MegahertzTolerance);
            AssertEx.EqualTolerance(MicrohertzInOneHertz, hertz.Microhertz, MicrohertzTolerance);
            AssertEx.EqualTolerance(MillihertzInOneHertz, hertz.Millihertz, MillihertzTolerance);
            AssertEx.EqualTolerance(PerSecondInOneHertz, hertz.PerSecond, PerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneHertz, hertz.RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(TerahertzInOneHertz, hertz.Terahertz, TerahertzTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<FrequencyUnit>(), unit =>
            {
                var quantity = Frequency.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromHertz_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Frequency.FromHertz(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Frequency.FromHertz(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromHertz_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Frequency.FromHertz(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var hertz = Frequency.FromHertz(1);
            AssertEx.EqualTolerance(BeatsPerMinuteInOneHertz, hertz.As(FrequencyUnit.BeatPerMinute), BeatsPerMinuteTolerance);
            AssertEx.EqualTolerance(CyclesPerHourInOneHertz, hertz.As(FrequencyUnit.CyclePerHour), CyclesPerHourTolerance);
            AssertEx.EqualTolerance(CyclesPerMinuteInOneHertz, hertz.As(FrequencyUnit.CyclePerMinute), CyclesPerMinuteTolerance);
            AssertEx.EqualTolerance(GigahertzInOneHertz, hertz.As(FrequencyUnit.Gigahertz), GigahertzTolerance);
            AssertEx.EqualTolerance(HertzInOneHertz, hertz.As(FrequencyUnit.Hertz), HertzTolerance);
            AssertEx.EqualTolerance(KilohertzInOneHertz, hertz.As(FrequencyUnit.Kilohertz), KilohertzTolerance);
            AssertEx.EqualTolerance(MegahertzInOneHertz, hertz.As(FrequencyUnit.Megahertz), MegahertzTolerance);
            AssertEx.EqualTolerance(MicrohertzInOneHertz, hertz.As(FrequencyUnit.Microhertz), MicrohertzTolerance);
            AssertEx.EqualTolerance(MillihertzInOneHertz, hertz.As(FrequencyUnit.Millihertz), MillihertzTolerance);
            AssertEx.EqualTolerance(PerSecondInOneHertz, hertz.As(FrequencyUnit.PerSecond), PerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneHertz, hertz.As(FrequencyUnit.RadianPerSecond), RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(TerahertzInOneHertz, hertz.As(FrequencyUnit.Terahertz), TerahertzTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Frequency.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Frequency(value: 1, unit: Frequency.BaseUnit);
            var expectedValue = quantity.As(Frequency.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Frequency(value: 1, unit: Frequency.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Frequency(value: 1, unit: Frequency.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Frequency(value: 1, unit: Frequency.BaseUnit);
            var expectedUnit = Frequency.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Frequency convertedQuantity = quantity.ToUnit(UnitSystem.SI);

            Assert.Equal(expectedUnit, convertedQuantity.Unit);
            Assert.Equal(expectedValue, convertedQuantity.Value);
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            var quantity = new Frequency(value: 1, unit: Frequency.BaseUnit);
            Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            var quantity = new Frequency(value: 1, unit: Frequency.BaseUnit);
            Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
        }

        [Theory]
        [InlineData("en-US", "4.2 bpm", FrequencyUnit.BeatPerMinute, 4.2)]
        [InlineData("en-US", "4.2 cph", FrequencyUnit.CyclePerHour, 4.2)]
        [InlineData("en-US", "4.2 cpm", FrequencyUnit.CyclePerMinute, 4.2)]
        [InlineData("en-US", "4.2 GHz", FrequencyUnit.Gigahertz, 4.2)]
        [InlineData("en-US", "4.2 Hz", FrequencyUnit.Hertz, 4.2)]
        [InlineData("en-US", "4.2 kHz", FrequencyUnit.Kilohertz, 4.2)]
        [InlineData("en-US", "4.2 MHz", FrequencyUnit.Megahertz, 4.2)]
        [InlineData("en-US", "4.2 µHz", FrequencyUnit.Microhertz, 4.2)]
        [InlineData("en-US", "4.2 mHz", FrequencyUnit.Millihertz, 4.2)]
        [InlineData("en-US", "4.2 s⁻¹", FrequencyUnit.PerSecond, 4.2)]
        [InlineData("en-US", "4.2 rad/s", FrequencyUnit.RadianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 THz", FrequencyUnit.Terahertz, 4.2)]
        [InlineData("ru-RU", "4,2 ГГц", FrequencyUnit.Gigahertz, 4.2)]
        [InlineData("ru-RU", "4,2 Гц", FrequencyUnit.Hertz, 4.2)]
        [InlineData("ru-RU", "4,2 кГц", FrequencyUnit.Kilohertz, 4.2)]
        [InlineData("ru-RU", "4,2 МГц", FrequencyUnit.Megahertz, 4.2)]
        [InlineData("ru-RU", "4,2 мкГц", FrequencyUnit.Microhertz, 4.2)]
        [InlineData("ru-RU", "4,2 мГц", FrequencyUnit.Millihertz, 4.2)]
        [InlineData("ru-RU", "4,2 с⁻¹", FrequencyUnit.PerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 рад/с", FrequencyUnit.RadianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 ТГц", FrequencyUnit.Terahertz, 4.2)]
        public void Parse(string culture, string quantityString, FrequencyUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Frequency.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 bpm", FrequencyUnit.BeatPerMinute, 4.2)]
        [InlineData("en-US", "4.2 cph", FrequencyUnit.CyclePerHour, 4.2)]
        [InlineData("en-US", "4.2 cpm", FrequencyUnit.CyclePerMinute, 4.2)]
        [InlineData("en-US", "4.2 GHz", FrequencyUnit.Gigahertz, 4.2)]
        [InlineData("en-US", "4.2 Hz", FrequencyUnit.Hertz, 4.2)]
        [InlineData("en-US", "4.2 kHz", FrequencyUnit.Kilohertz, 4.2)]
        [InlineData("en-US", "4.2 MHz", FrequencyUnit.Megahertz, 4.2)]
        [InlineData("en-US", "4.2 µHz", FrequencyUnit.Microhertz, 4.2)]
        [InlineData("en-US", "4.2 mHz", FrequencyUnit.Millihertz, 4.2)]
        [InlineData("en-US", "4.2 s⁻¹", FrequencyUnit.PerSecond, 4.2)]
        [InlineData("en-US", "4.2 rad/s", FrequencyUnit.RadianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 THz", FrequencyUnit.Terahertz, 4.2)]
        [InlineData("ru-RU", "4,2 ГГц", FrequencyUnit.Gigahertz, 4.2)]
        [InlineData("ru-RU", "4,2 Гц", FrequencyUnit.Hertz, 4.2)]
        [InlineData("ru-RU", "4,2 кГц", FrequencyUnit.Kilohertz, 4.2)]
        [InlineData("ru-RU", "4,2 МГц", FrequencyUnit.Megahertz, 4.2)]
        [InlineData("ru-RU", "4,2 мкГц", FrequencyUnit.Microhertz, 4.2)]
        [InlineData("ru-RU", "4,2 мГц", FrequencyUnit.Millihertz, 4.2)]
        [InlineData("ru-RU", "4,2 с⁻¹", FrequencyUnit.PerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 рад/с", FrequencyUnit.RadianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 ТГц", FrequencyUnit.Terahertz, 4.2)]
        public void TryParse(string culture, string quantityString, FrequencyUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Frequency.TryParse(quantityString, out Frequency parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("bpm", FrequencyUnit.BeatPerMinute)]
        [InlineData("cph", FrequencyUnit.CyclePerHour)]
        [InlineData("cpm", FrequencyUnit.CyclePerMinute)]
        [InlineData("GHz", FrequencyUnit.Gigahertz)]
        [InlineData("Hz", FrequencyUnit.Hertz)]
        [InlineData("kHz", FrequencyUnit.Kilohertz)]
        [InlineData("MHz", FrequencyUnit.Megahertz)]
        [InlineData("µHz", FrequencyUnit.Microhertz)]
        [InlineData("mHz", FrequencyUnit.Millihertz)]
        [InlineData("s⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("rad/s", FrequencyUnit.RadianPerSecond)]
        [InlineData("THz", FrequencyUnit.Terahertz)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, FrequencyUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            FrequencyUnit parsedUnit = Frequency.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("bpm", FrequencyUnit.BeatPerMinute)]
        [InlineData("cph", FrequencyUnit.CyclePerHour)]
        [InlineData("cpm", FrequencyUnit.CyclePerMinute)]
        [InlineData("GHz", FrequencyUnit.Gigahertz)]
        [InlineData("Hz", FrequencyUnit.Hertz)]
        [InlineData("kHz", FrequencyUnit.Kilohertz)]
        [InlineData("MHz", FrequencyUnit.Megahertz)]
        [InlineData("µHz", FrequencyUnit.Microhertz)]
        [InlineData("mHz", FrequencyUnit.Millihertz)]
        [InlineData("s⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("rad/s", FrequencyUnit.RadianPerSecond)]
        [InlineData("THz", FrequencyUnit.Terahertz)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, FrequencyUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            FrequencyUnit parsedUnit = Frequency.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "bpm", FrequencyUnit.BeatPerMinute)]
        [InlineData("en-US", "cph", FrequencyUnit.CyclePerHour)]
        [InlineData("en-US", "cpm", FrequencyUnit.CyclePerMinute)]
        [InlineData("en-US", "GHz", FrequencyUnit.Gigahertz)]
        [InlineData("en-US", "Hz", FrequencyUnit.Hertz)]
        [InlineData("en-US", "kHz", FrequencyUnit.Kilohertz)]
        [InlineData("en-US", "MHz", FrequencyUnit.Megahertz)]
        [InlineData("en-US", "µHz", FrequencyUnit.Microhertz)]
        [InlineData("en-US", "mHz", FrequencyUnit.Millihertz)]
        [InlineData("en-US", "s⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("en-US", "rad/s", FrequencyUnit.RadianPerSecond)]
        [InlineData("en-US", "THz", FrequencyUnit.Terahertz)]
        [InlineData("ru-RU", "ГГц", FrequencyUnit.Gigahertz)]
        [InlineData("ru-RU", "Гц", FrequencyUnit.Hertz)]
        [InlineData("ru-RU", "кГц", FrequencyUnit.Kilohertz)]
        [InlineData("ru-RU", "МГц", FrequencyUnit.Megahertz)]
        [InlineData("ru-RU", "мкГц", FrequencyUnit.Microhertz)]
        [InlineData("ru-RU", "мГц", FrequencyUnit.Millihertz)]
        [InlineData("ru-RU", "с⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("ru-RU", "рад/с", FrequencyUnit.RadianPerSecond)]
        [InlineData("ru-RU", "ТГц", FrequencyUnit.Terahertz)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, FrequencyUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            FrequencyUnit parsedUnit = Frequency.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "bpm", FrequencyUnit.BeatPerMinute)]
        [InlineData("en-US", "cph", FrequencyUnit.CyclePerHour)]
        [InlineData("en-US", "cpm", FrequencyUnit.CyclePerMinute)]
        [InlineData("en-US", "GHz", FrequencyUnit.Gigahertz)]
        [InlineData("en-US", "Hz", FrequencyUnit.Hertz)]
        [InlineData("en-US", "kHz", FrequencyUnit.Kilohertz)]
        [InlineData("en-US", "MHz", FrequencyUnit.Megahertz)]
        [InlineData("en-US", "µHz", FrequencyUnit.Microhertz)]
        [InlineData("en-US", "mHz", FrequencyUnit.Millihertz)]
        [InlineData("en-US", "s⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("en-US", "rad/s", FrequencyUnit.RadianPerSecond)]
        [InlineData("en-US", "THz", FrequencyUnit.Terahertz)]
        [InlineData("ru-RU", "ГГц", FrequencyUnit.Gigahertz)]
        [InlineData("ru-RU", "Гц", FrequencyUnit.Hertz)]
        [InlineData("ru-RU", "кГц", FrequencyUnit.Kilohertz)]
        [InlineData("ru-RU", "МГц", FrequencyUnit.Megahertz)]
        [InlineData("ru-RU", "мкГц", FrequencyUnit.Microhertz)]
        [InlineData("ru-RU", "мГц", FrequencyUnit.Millihertz)]
        [InlineData("ru-RU", "с⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("ru-RU", "рад/с", FrequencyUnit.RadianPerSecond)]
        [InlineData("ru-RU", "ТГц", FrequencyUnit.Terahertz)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, FrequencyUnit expectedUnit)
        {
            FrequencyUnit parsedUnit = Frequency.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("bpm", FrequencyUnit.BeatPerMinute)]
        [InlineData("cph", FrequencyUnit.CyclePerHour)]
        [InlineData("cpm", FrequencyUnit.CyclePerMinute)]
        [InlineData("GHz", FrequencyUnit.Gigahertz)]
        [InlineData("Hz", FrequencyUnit.Hertz)]
        [InlineData("kHz", FrequencyUnit.Kilohertz)]
        [InlineData("MHz", FrequencyUnit.Megahertz)]
        [InlineData("µHz", FrequencyUnit.Microhertz)]
        [InlineData("mHz", FrequencyUnit.Millihertz)]
        [InlineData("s⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("rad/s", FrequencyUnit.RadianPerSecond)]
        [InlineData("THz", FrequencyUnit.Terahertz)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, FrequencyUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Frequency.TryParseUnit(abbreviation, out FrequencyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("bpm", FrequencyUnit.BeatPerMinute)]
        [InlineData("cph", FrequencyUnit.CyclePerHour)]
        [InlineData("cpm", FrequencyUnit.CyclePerMinute)]
        [InlineData("GHz", FrequencyUnit.Gigahertz)]
        [InlineData("Hz", FrequencyUnit.Hertz)]
        [InlineData("kHz", FrequencyUnit.Kilohertz)]
        [InlineData("MHz", FrequencyUnit.Megahertz)]
        [InlineData("µHz", FrequencyUnit.Microhertz)]
        [InlineData("mHz", FrequencyUnit.Millihertz)]
        [InlineData("s⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("rad/s", FrequencyUnit.RadianPerSecond)]
        [InlineData("THz", FrequencyUnit.Terahertz)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, FrequencyUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Frequency.TryParseUnit(abbreviation, out FrequencyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "bpm", FrequencyUnit.BeatPerMinute)]
        [InlineData("en-US", "cph", FrequencyUnit.CyclePerHour)]
        [InlineData("en-US", "cpm", FrequencyUnit.CyclePerMinute)]
        [InlineData("en-US", "GHz", FrequencyUnit.Gigahertz)]
        [InlineData("en-US", "Hz", FrequencyUnit.Hertz)]
        [InlineData("en-US", "kHz", FrequencyUnit.Kilohertz)]
        [InlineData("en-US", "MHz", FrequencyUnit.Megahertz)]
        [InlineData("en-US", "µHz", FrequencyUnit.Microhertz)]
        [InlineData("en-US", "mHz", FrequencyUnit.Millihertz)]
        [InlineData("en-US", "s⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("en-US", "rad/s", FrequencyUnit.RadianPerSecond)]
        [InlineData("en-US", "THz", FrequencyUnit.Terahertz)]
        [InlineData("ru-RU", "ГГц", FrequencyUnit.Gigahertz)]
        [InlineData("ru-RU", "Гц", FrequencyUnit.Hertz)]
        [InlineData("ru-RU", "кГц", FrequencyUnit.Kilohertz)]
        [InlineData("ru-RU", "МГц", FrequencyUnit.Megahertz)]
        [InlineData("ru-RU", "мкГц", FrequencyUnit.Microhertz)]
        [InlineData("ru-RU", "мГц", FrequencyUnit.Millihertz)]
        [InlineData("ru-RU", "с⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("ru-RU", "рад/с", FrequencyUnit.RadianPerSecond)]
        [InlineData("ru-RU", "ТГц", FrequencyUnit.Terahertz)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, FrequencyUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Frequency.TryParseUnit(abbreviation, out FrequencyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "bpm", FrequencyUnit.BeatPerMinute)]
        [InlineData("en-US", "cph", FrequencyUnit.CyclePerHour)]
        [InlineData("en-US", "cpm", FrequencyUnit.CyclePerMinute)]
        [InlineData("en-US", "GHz", FrequencyUnit.Gigahertz)]
        [InlineData("en-US", "Hz", FrequencyUnit.Hertz)]
        [InlineData("en-US", "kHz", FrequencyUnit.Kilohertz)]
        [InlineData("en-US", "MHz", FrequencyUnit.Megahertz)]
        [InlineData("en-US", "µHz", FrequencyUnit.Microhertz)]
        [InlineData("en-US", "mHz", FrequencyUnit.Millihertz)]
        [InlineData("en-US", "s⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("en-US", "rad/s", FrequencyUnit.RadianPerSecond)]
        [InlineData("en-US", "THz", FrequencyUnit.Terahertz)]
        [InlineData("ru-RU", "ГГц", FrequencyUnit.Gigahertz)]
        [InlineData("ru-RU", "Гц", FrequencyUnit.Hertz)]
        [InlineData("ru-RU", "кГц", FrequencyUnit.Kilohertz)]
        [InlineData("ru-RU", "МГц", FrequencyUnit.Megahertz)]
        [InlineData("ru-RU", "мкГц", FrequencyUnit.Microhertz)]
        [InlineData("ru-RU", "мГц", FrequencyUnit.Millihertz)]
        [InlineData("ru-RU", "с⁻¹", FrequencyUnit.PerSecond)]
        [InlineData("ru-RU", "рад/с", FrequencyUnit.RadianPerSecond)]
        [InlineData("ru-RU", "ТГц", FrequencyUnit.Terahertz)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, FrequencyUnit expectedUnit)
        {
            Assert.True(Frequency.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out FrequencyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", FrequencyUnit.BeatPerMinute, "bpm")]
        [InlineData("en-US", FrequencyUnit.CyclePerHour, "cph")]
        [InlineData("en-US", FrequencyUnit.CyclePerMinute, "cpm")]
        [InlineData("en-US", FrequencyUnit.Gigahertz, "GHz")]
        [InlineData("en-US", FrequencyUnit.Hertz, "Hz")]
        [InlineData("en-US", FrequencyUnit.Kilohertz, "kHz")]
        [InlineData("en-US", FrequencyUnit.Megahertz, "MHz")]
        [InlineData("en-US", FrequencyUnit.Microhertz, "µHz")]
        [InlineData("en-US", FrequencyUnit.Millihertz, "mHz")]
        [InlineData("en-US", FrequencyUnit.PerSecond, "s⁻¹")]
        [InlineData("en-US", FrequencyUnit.RadianPerSecond, "rad/s")]
        [InlineData("en-US", FrequencyUnit.Terahertz, "THz")]
        [InlineData("ru-RU", FrequencyUnit.Gigahertz, "ГГц")]
        [InlineData("ru-RU", FrequencyUnit.Hertz, "Гц")]
        [InlineData("ru-RU", FrequencyUnit.Kilohertz, "кГц")]
        [InlineData("ru-RU", FrequencyUnit.Megahertz, "МГц")]
        [InlineData("ru-RU", FrequencyUnit.Microhertz, "мкГц")]
        [InlineData("ru-RU", FrequencyUnit.Millihertz, "мГц")]
        [InlineData("ru-RU", FrequencyUnit.PerSecond, "с⁻¹")]
        [InlineData("ru-RU", FrequencyUnit.RadianPerSecond, "рад/с")]
        [InlineData("ru-RU", FrequencyUnit.Terahertz, "ТГц")]
        public void GetAbbreviationForCulture(string culture, FrequencyUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Frequency.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Frequency.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Frequency.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(FrequencyUnit unit)
        {
            var inBaseUnits = Frequency.From(1.0, Frequency.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(FrequencyUnit unit)
        {
            var quantity = Frequency.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(FrequencyUnit unit)
        {
            Assert.All(Frequency.Units.Where(u => u != Frequency.BaseUnit), fromUnit =>
            {
                var quantity = Frequency.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(FrequencyUnit unit)
        {
            var quantity = default(Frequency);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(FrequencyUnit unit)
        {
            var quantity = Frequency.From(3, Frequency.BaseUnit);
            Frequency expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<FrequencyUnit> quantityToConvert = quantity;
                IQuantity<FrequencyUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Frequency hertz = Frequency.FromHertz(1);
            AssertEx.EqualTolerance(1, Frequency.FromBeatsPerMinute(hertz.BeatsPerMinute).Hertz, BeatsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromCyclesPerHour(hertz.CyclesPerHour).Hertz, CyclesPerHourTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromCyclesPerMinute(hertz.CyclesPerMinute).Hertz, CyclesPerMinuteTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromGigahertz(hertz.Gigahertz).Hertz, GigahertzTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromHertz(hertz.Hertz).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromKilohertz(hertz.Kilohertz).Hertz, KilohertzTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromMegahertz(hertz.Megahertz).Hertz, MegahertzTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromMicrohertz(hertz.Microhertz).Hertz, MicrohertzTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromMillihertz(hertz.Millihertz).Hertz, MillihertzTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromPerSecond(hertz.PerSecond).Hertz, PerSecondTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromRadiansPerSecond(hertz.RadiansPerSecond).Hertz, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(1, Frequency.FromTerahertz(hertz.Terahertz).Hertz, TerahertzTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Frequency v = Frequency.FromHertz(1);
            AssertEx.EqualTolerance(-1, -v.Hertz, HertzTolerance);
            AssertEx.EqualTolerance(2, (Frequency.FromHertz(3)-v).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(2, (v + v).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(10, (v*10).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(10, (10*v).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(2, (Frequency.FromHertz(10)/5).Hertz, HertzTolerance);
            AssertEx.EqualTolerance(2, Frequency.FromHertz(10)/Frequency.FromHertz(5), HertzTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Frequency oneHertz = Frequency.FromHertz(1);
            Frequency twoHertz = Frequency.FromHertz(2);

            Assert.True(oneHertz < twoHertz);
            Assert.True(oneHertz <= twoHertz);
            Assert.True(twoHertz > oneHertz);
            Assert.True(twoHertz >= oneHertz);

            Assert.False(oneHertz > twoHertz);
            Assert.False(oneHertz >= twoHertz);
            Assert.False(twoHertz < oneHertz);
            Assert.False(twoHertz <= oneHertz);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.Equal(0, hertz.CompareTo(hertz));
            Assert.True(hertz.CompareTo(Frequency.Zero) > 0);
            Assert.True(Frequency.Zero.CompareTo(hertz) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.Throws<ArgumentException>(() => hertz.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.Throws<ArgumentNullException>(() => hertz.CompareTo(null));
        }

        [Theory]
        [InlineData(1, FrequencyUnit.Hertz, 1, FrequencyUnit.Hertz, true)]  // Same value and unit.
        [InlineData(1, FrequencyUnit.Hertz, 2, FrequencyUnit.Hertz, false)] // Different value.
        [InlineData(2, FrequencyUnit.Hertz, 1, FrequencyUnit.BeatPerMinute, false)] // Different value and unit.
        [InlineData(1, FrequencyUnit.Hertz, 1, FrequencyUnit.BeatPerMinute, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, FrequencyUnit unitA, double valueB, FrequencyUnit unitB, bool expectEqual)
        {
            var a = new Frequency(valueA, unitA);
            var b = new Frequency(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Frequency.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.False(hertz.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Frequency hertz = Frequency.FromHertz(1);
            Assert.False(hertz.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Frequency.FromHertz(firstValue);
            var otherQuantity = Frequency.FromHertz(secondValue);
            Frequency maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, Frequency.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Frequency.FromHertz(1);
            var negativeTolerance = Frequency.FromHertz(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<FrequencyUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Frequency.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 bpm", new Frequency(1, FrequencyUnit.BeatPerMinute).ToString());
            Assert.Equal("1 cph", new Frequency(1, FrequencyUnit.CyclePerHour).ToString());
            Assert.Equal("1 cpm", new Frequency(1, FrequencyUnit.CyclePerMinute).ToString());
            Assert.Equal("1 GHz", new Frequency(1, FrequencyUnit.Gigahertz).ToString());
            Assert.Equal("1 Hz", new Frequency(1, FrequencyUnit.Hertz).ToString());
            Assert.Equal("1 kHz", new Frequency(1, FrequencyUnit.Kilohertz).ToString());
            Assert.Equal("1 MHz", new Frequency(1, FrequencyUnit.Megahertz).ToString());
            Assert.Equal("1 µHz", new Frequency(1, FrequencyUnit.Microhertz).ToString());
            Assert.Equal("1 mHz", new Frequency(1, FrequencyUnit.Millihertz).ToString());
            Assert.Equal("1 s⁻¹", new Frequency(1, FrequencyUnit.PerSecond).ToString());
            Assert.Equal("1 rad/s", new Frequency(1, FrequencyUnit.RadianPerSecond).ToString());
            Assert.Equal("1 THz", new Frequency(1, FrequencyUnit.Terahertz).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 bpm", new Frequency(1, FrequencyUnit.BeatPerMinute).ToString(swedishCulture));
            Assert.Equal("1 cph", new Frequency(1, FrequencyUnit.CyclePerHour).ToString(swedishCulture));
            Assert.Equal("1 cpm", new Frequency(1, FrequencyUnit.CyclePerMinute).ToString(swedishCulture));
            Assert.Equal("1 GHz", new Frequency(1, FrequencyUnit.Gigahertz).ToString(swedishCulture));
            Assert.Equal("1 Hz", new Frequency(1, FrequencyUnit.Hertz).ToString(swedishCulture));
            Assert.Equal("1 kHz", new Frequency(1, FrequencyUnit.Kilohertz).ToString(swedishCulture));
            Assert.Equal("1 MHz", new Frequency(1, FrequencyUnit.Megahertz).ToString(swedishCulture));
            Assert.Equal("1 µHz", new Frequency(1, FrequencyUnit.Microhertz).ToString(swedishCulture));
            Assert.Equal("1 mHz", new Frequency(1, FrequencyUnit.Millihertz).ToString(swedishCulture));
            Assert.Equal("1 s⁻¹", new Frequency(1, FrequencyUnit.PerSecond).ToString(swedishCulture));
            Assert.Equal("1 rad/s", new Frequency(1, FrequencyUnit.RadianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 THz", new Frequency(1, FrequencyUnit.Terahertz).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s1"));
            Assert.Equal("0.12 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s2"));
            Assert.Equal("0.123 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s3"));
            Assert.Equal("0.1235 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s1", culture));
            Assert.Equal("0.12 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s2", culture));
            Assert.Equal("0.123 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s3", culture));
            Assert.Equal("0.1235 Hz", new Frequency(0.123456, FrequencyUnit.Hertz).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Frequency.FromHertz(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Frequency.FromHertz(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Frequency.FromHertz(value);
            Assert.Equal(Frequency.FromHertz(-value), -quantity);
        }
    }
}
