//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToPressureChangeRate
{
    /// <summary>
    /// A number to PressureChangeRate Extensions
    /// </summary>
    public static class NumberToPressureChangeRateExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="PressureChangeRate.FromAtmospheresPerSecond(QuantityValue)" />
            public PressureChangeRate AtmospheresPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromAtmospheresPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromAtmospheresPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromBarsPerMinute(QuantityValue)" />
            public PressureChangeRate BarsPerMinute
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromBarsPerMinute(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromBarsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromBarsPerSecond(QuantityValue)" />
            public PressureChangeRate BarsPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromBarsPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromBarsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromKilopascalsPerMinute(QuantityValue)" />
            public PressureChangeRate KilopascalsPerMinute
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromKilopascalsPerMinute(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromKilopascalsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromKilopascalsPerSecond(QuantityValue)" />
            public PressureChangeRate KilopascalsPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromKilopascalsPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromKilopascalsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromKilopoundsForcePerSquareInchPerMinute(QuantityValue)" />
            public PressureChangeRate KilopoundsForcePerSquareInchPerMinute
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromKilopoundsForcePerSquareInchPerMinute(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromKilopoundsForcePerSquareInchPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromKilopoundsForcePerSquareInchPerSecond(QuantityValue)" />
            public PressureChangeRate KilopoundsForcePerSquareInchPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromKilopoundsForcePerSquareInchPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromKilopoundsForcePerSquareInchPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromMegapascalsPerMinute(QuantityValue)" />
            public PressureChangeRate MegapascalsPerMinute
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromMegapascalsPerMinute(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromMegapascalsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromMegapascalsPerSecond(QuantityValue)" />
            public PressureChangeRate MegapascalsPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromMegapascalsPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromMegapascalsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromMegapoundsForcePerSquareInchPerMinute(QuantityValue)" />
            public PressureChangeRate MegapoundsForcePerSquareInchPerMinute
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromMegapoundsForcePerSquareInchPerMinute(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromMegapoundsForcePerSquareInchPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromMegapoundsForcePerSquareInchPerSecond(QuantityValue)" />
            public PressureChangeRate MegapoundsForcePerSquareInchPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromMegapoundsForcePerSquareInchPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromMegapoundsForcePerSquareInchPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromMillibarsPerMinute(QuantityValue)" />
            public PressureChangeRate MillibarsPerMinute
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromMillibarsPerMinute(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromMillibarsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromMillibarsPerSecond(QuantityValue)" />
            public PressureChangeRate MillibarsPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromMillibarsPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromMillibarsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromMillimetersOfMercuryPerSecond(QuantityValue)" />
            public PressureChangeRate MillimetersOfMercuryPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromMillimetersOfMercuryPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromMillimetersOfMercuryPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromPascalsPerMinute(QuantityValue)" />
            public PressureChangeRate PascalsPerMinute
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromPascalsPerMinute(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromPascalsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromPascalsPerSecond(QuantityValue)" />
            public PressureChangeRate PascalsPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromPascalsPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromPascalsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromPoundsForcePerSquareInchPerMinute(QuantityValue)" />
            public PressureChangeRate PoundsForcePerSquareInchPerMinute
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromPoundsForcePerSquareInchPerMinute(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromPoundsForcePerSquareInchPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="PressureChangeRate.FromPoundsForcePerSquareInchPerSecond(QuantityValue)" />
            public PressureChangeRate PoundsForcePerSquareInchPerSecond
#if NET7_0_OR_GREATER
                => PressureChangeRate.FromPoundsForcePerSquareInchPerSecond(QuantityValue.CreateChecked(value));
#else
                => PressureChangeRate.FromPoundsForcePerSquareInchPerSecond(value.ToQuantityValue());
#endif

        }
    }
}
