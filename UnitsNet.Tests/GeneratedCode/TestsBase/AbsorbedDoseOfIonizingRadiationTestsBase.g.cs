//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of AbsorbedDoseOfIonizingRadiation.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class AbsorbedDoseOfIonizingRadiationTestsBase : QuantityTestsBase
    {
        protected abstract double CentigraysInOneGray { get; }
        protected abstract double DecigraysInOneGray { get; }
        protected abstract double FemtograysInOneGray { get; }
        protected abstract double GigagraysInOneGray { get; }
        protected abstract double GraysInOneGray { get; }
        protected abstract double KilograysInOneGray { get; }
        protected abstract double KiloradsInOneGray { get; }
        protected abstract double MegagraysInOneGray { get; }
        protected abstract double MegaradsInOneGray { get; }
        protected abstract double MicrograysInOneGray { get; }
        protected abstract double MilligraysInOneGray { get; }
        protected abstract double MilliradsInOneGray { get; }
        protected abstract double NanograysInOneGray { get; }
        protected abstract double PetagraysInOneGray { get; }
        protected abstract double PicograysInOneGray { get; }
        protected abstract double RadsInOneGray { get; }
        protected abstract double TeragraysInOneGray { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigraysTolerance { get { return 1e-5; } }
        protected virtual double DecigraysTolerance { get { return 1e-5; } }
        protected virtual double FemtograysTolerance { get { return 1e-5; } }
        protected virtual double GigagraysTolerance { get { return 1e-5; } }
        protected virtual double GraysTolerance { get { return 1e-5; } }
        protected virtual double KilograysTolerance { get { return 1e-5; } }
        protected virtual double KiloradsTolerance { get { return 1e-5; } }
        protected virtual double MegagraysTolerance { get { return 1e-5; } }
        protected virtual double MegaradsTolerance { get { return 1e-5; } }
        protected virtual double MicrograysTolerance { get { return 1e-5; } }
        protected virtual double MilligraysTolerance { get { return 1e-5; } }
        protected virtual double MilliradsTolerance { get { return 1e-5; } }
        protected virtual double NanograysTolerance { get { return 1e-5; } }
        protected virtual double PetagraysTolerance { get { return 1e-5; } }
        protected virtual double PicograysTolerance { get { return 1e-5; } }
        protected virtual double RadsTolerance { get { return 1e-5; } }
        protected virtual double TeragraysTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(AbsorbedDoseOfIonizingRadiationUnit unit)
        {
            return unit switch
            {
                AbsorbedDoseOfIonizingRadiationUnit.Centigray => (CentigraysInOneGray, CentigraysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Decigray => (DecigraysInOneGray, DecigraysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Femtogray => (FemtograysInOneGray, FemtograysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Gigagray => (GigagraysInOneGray, GigagraysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Gray => (GraysInOneGray, GraysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Kilogray => (KilograysInOneGray, KilograysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Kilorad => (KiloradsInOneGray, KiloradsTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Megagray => (MegagraysInOneGray, MegagraysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Megarad => (MegaradsInOneGray, MegaradsTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Microgray => (MicrograysInOneGray, MicrograysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Milligray => (MilligraysInOneGray, MilligraysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Millirad => (MilliradsInOneGray, MilliradsTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Nanogray => (NanograysInOneGray, NanograysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Petagray => (PetagraysInOneGray, PetagraysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Picogray => (PicograysInOneGray, PicograysTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Rad => (RadsInOneGray, RadsTolerance),
                AbsorbedDoseOfIonizingRadiationUnit.Teragray => (TeragraysInOneGray, TeragraysTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Centigray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Decigray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Femtogray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Gigagray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Gray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Kilogray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Kilorad },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Megagray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Megarad },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Microgray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Milligray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Millirad },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Nanogray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Petagray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Picogray },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Rad },
            new object[] { AbsorbedDoseOfIonizingRadiationUnit.Teragray },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new AbsorbedDoseOfIonizingRadiation();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Gray, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new AbsorbedDoseOfIonizingRadiation(double.PositiveInfinity, AbsorbedDoseOfIonizingRadiationUnit.Gray));
            var exception2 = Record.Exception(() => new AbsorbedDoseOfIonizingRadiation(double.NegativeInfinity, AbsorbedDoseOfIonizingRadiationUnit.Gray));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new AbsorbedDoseOfIonizingRadiation(double.NaN, AbsorbedDoseOfIonizingRadiationUnit.Gray));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new AbsorbedDoseOfIonizingRadiation(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new AbsorbedDoseOfIonizingRadiation(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void AbsorbedDoseOfIonizingRadiation_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Gray);

            QuantityInfo<AbsorbedDoseOfIonizingRadiationUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(AbsorbedDoseOfIonizingRadiation.Zero, quantityInfo.Zero);
            Assert.Equal("AbsorbedDoseOfIonizingRadiation", quantityInfo.Name);

            var units = Enum.GetValues<AbsorbedDoseOfIonizingRadiationUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void GrayToAbsorbedDoseOfIonizingRadiationUnits()
        {
            AbsorbedDoseOfIonizingRadiation gray = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            AssertEx.EqualTolerance(CentigraysInOneGray, gray.Centigrays, CentigraysTolerance);
            AssertEx.EqualTolerance(DecigraysInOneGray, gray.Decigrays, DecigraysTolerance);
            AssertEx.EqualTolerance(FemtograysInOneGray, gray.Femtograys, FemtograysTolerance);
            AssertEx.EqualTolerance(GigagraysInOneGray, gray.Gigagrays, GigagraysTolerance);
            AssertEx.EqualTolerance(GraysInOneGray, gray.Grays, GraysTolerance);
            AssertEx.EqualTolerance(KilograysInOneGray, gray.Kilograys, KilograysTolerance);
            AssertEx.EqualTolerance(KiloradsInOneGray, gray.Kilorads, KiloradsTolerance);
            AssertEx.EqualTolerance(MegagraysInOneGray, gray.Megagrays, MegagraysTolerance);
            AssertEx.EqualTolerance(MegaradsInOneGray, gray.Megarads, MegaradsTolerance);
            AssertEx.EqualTolerance(MicrograysInOneGray, gray.Micrograys, MicrograysTolerance);
            AssertEx.EqualTolerance(MilligraysInOneGray, gray.Milligrays, MilligraysTolerance);
            AssertEx.EqualTolerance(MilliradsInOneGray, gray.Millirads, MilliradsTolerance);
            AssertEx.EqualTolerance(NanograysInOneGray, gray.Nanograys, NanograysTolerance);
            AssertEx.EqualTolerance(PetagraysInOneGray, gray.Petagrays, PetagraysTolerance);
            AssertEx.EqualTolerance(PicograysInOneGray, gray.Picograys, PicograysTolerance);
            AssertEx.EqualTolerance(RadsInOneGray, gray.Rads, RadsTolerance);
            AssertEx.EqualTolerance(TeragraysInOneGray, gray.Teragrays, TeragraysTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Centigray);
            AssertEx.EqualTolerance(1, quantity00.Centigrays, CentigraysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Centigray, quantity00.Unit);

            var quantity01 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Decigray);
            AssertEx.EqualTolerance(1, quantity01.Decigrays, DecigraysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Decigray, quantity01.Unit);

            var quantity02 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Femtogray);
            AssertEx.EqualTolerance(1, quantity02.Femtograys, FemtograysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Femtogray, quantity02.Unit);

            var quantity03 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Gigagray);
            AssertEx.EqualTolerance(1, quantity03.Gigagrays, GigagraysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Gigagray, quantity03.Unit);

            var quantity04 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Gray);
            AssertEx.EqualTolerance(1, quantity04.Grays, GraysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Gray, quantity04.Unit);

            var quantity05 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Kilogray);
            AssertEx.EqualTolerance(1, quantity05.Kilograys, KilograysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Kilogray, quantity05.Unit);

            var quantity06 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Kilorad);
            AssertEx.EqualTolerance(1, quantity06.Kilorads, KiloradsTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Kilorad, quantity06.Unit);

            var quantity07 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Megagray);
            AssertEx.EqualTolerance(1, quantity07.Megagrays, MegagraysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Megagray, quantity07.Unit);

            var quantity08 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Megarad);
            AssertEx.EqualTolerance(1, quantity08.Megarads, MegaradsTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Megarad, quantity08.Unit);

            var quantity09 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Microgray);
            AssertEx.EqualTolerance(1, quantity09.Micrograys, MicrograysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Microgray, quantity09.Unit);

            var quantity10 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Milligray);
            AssertEx.EqualTolerance(1, quantity10.Milligrays, MilligraysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Milligray, quantity10.Unit);

            var quantity11 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Millirad);
            AssertEx.EqualTolerance(1, quantity11.Millirads, MilliradsTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Millirad, quantity11.Unit);

            var quantity12 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Nanogray);
            AssertEx.EqualTolerance(1, quantity12.Nanograys, NanograysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Nanogray, quantity12.Unit);

            var quantity13 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Petagray);
            AssertEx.EqualTolerance(1, quantity13.Petagrays, PetagraysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Petagray, quantity13.Unit);

            var quantity14 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Picogray);
            AssertEx.EqualTolerance(1, quantity14.Picograys, PicograysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Picogray, quantity14.Unit);

            var quantity15 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Rad);
            AssertEx.EqualTolerance(1, quantity15.Rads, RadsTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Rad, quantity15.Unit);

            var quantity16 = AbsorbedDoseOfIonizingRadiation.From(1, AbsorbedDoseOfIonizingRadiationUnit.Teragray);
            AssertEx.EqualTolerance(1, quantity16.Teragrays, TeragraysTolerance);
            Assert.Equal(AbsorbedDoseOfIonizingRadiationUnit.Teragray, quantity16.Unit);

        }

        [Fact]
        public void FromGrays_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => AbsorbedDoseOfIonizingRadiation.FromGrays(double.PositiveInfinity));
            var exception2 = Record.Exception(() => AbsorbedDoseOfIonizingRadiation.FromGrays(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromGrays_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => AbsorbedDoseOfIonizingRadiation.FromGrays(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var gray = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            AssertEx.EqualTolerance(CentigraysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Centigray), CentigraysTolerance);
            AssertEx.EqualTolerance(DecigraysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Decigray), DecigraysTolerance);
            AssertEx.EqualTolerance(FemtograysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Femtogray), FemtograysTolerance);
            AssertEx.EqualTolerance(GigagraysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Gigagray), GigagraysTolerance);
            AssertEx.EqualTolerance(GraysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Gray), GraysTolerance);
            AssertEx.EqualTolerance(KilograysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Kilogray), KilograysTolerance);
            AssertEx.EqualTolerance(KiloradsInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Kilorad), KiloradsTolerance);
            AssertEx.EqualTolerance(MegagraysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Megagray), MegagraysTolerance);
            AssertEx.EqualTolerance(MegaradsInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Megarad), MegaradsTolerance);
            AssertEx.EqualTolerance(MicrograysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Microgray), MicrograysTolerance);
            AssertEx.EqualTolerance(MilligraysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Milligray), MilligraysTolerance);
            AssertEx.EqualTolerance(MilliradsInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Millirad), MilliradsTolerance);
            AssertEx.EqualTolerance(NanograysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Nanogray), NanograysTolerance);
            AssertEx.EqualTolerance(PetagraysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Petagray), PetagraysTolerance);
            AssertEx.EqualTolerance(PicograysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Picogray), PicograysTolerance);
            AssertEx.EqualTolerance(RadsInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Rad), RadsTolerance);
            AssertEx.EqualTolerance(TeragraysInOneGray, gray.As(AbsorbedDoseOfIonizingRadiationUnit.Teragray), TeragraysTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = AbsorbedDoseOfIonizingRadiation.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
            var expectedValue = quantity.As(AbsorbedDoseOfIonizingRadiation.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
            var expectedUnit = AbsorbedDoseOfIonizingRadiation.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                AbsorbedDoseOfIonizingRadiation quantityToConvert = quantity;

                AbsorbedDoseOfIonizingRadiation convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<AbsorbedDoseOfIonizingRadiationUnit> quantityToConvert = quantity;

                IQuantity<AbsorbedDoseOfIonizingRadiationUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<AbsorbedDoseOfIonizingRadiationUnit> quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<AbsorbedDoseOfIonizingRadiationUnit> quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new AbsorbedDoseOfIonizingRadiation(value: 1, unit: AbsorbedDoseOfIonizingRadiation.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray, 4.2)]
        [InlineData("en-US", "4.2 dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray, 4.2)]
        [InlineData("en-US", "4.2 fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray, 4.2)]
        [InlineData("en-US", "4.2 GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray, 4.2)]
        [InlineData("en-US", "4.2 Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray, 4.2)]
        [InlineData("en-US", "4.2 kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray, 4.2)]
        [InlineData("en-US", "4.2 krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad, 4.2)]
        [InlineData("en-US", "4.2 MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray, 4.2)]
        [InlineData("en-US", "4.2 Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad, 4.2)]
        [InlineData("en-US", "4.2 µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray, 4.2)]
        [InlineData("en-US", "4.2 mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray, 4.2)]
        [InlineData("en-US", "4.2 mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad, 4.2)]
        [InlineData("en-US", "4.2 nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray, 4.2)]
        [InlineData("en-US", "4.2 PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray, 4.2)]
        [InlineData("en-US", "4.2 pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray, 4.2)]
        [InlineData("en-US", "4.2 rad", AbsorbedDoseOfIonizingRadiationUnit.Rad, 4.2)]
        [InlineData("en-US", "4.2 TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray, 4.2)]
        [InlineData("ru-RU", "4,2 сГр", AbsorbedDoseOfIonizingRadiationUnit.Centigray, 4.2)]
        [InlineData("ru-RU", "4,2 дГр", AbsorbedDoseOfIonizingRadiationUnit.Decigray, 4.2)]
        [InlineData("ru-RU", "4,2 фГр", AbsorbedDoseOfIonizingRadiationUnit.Femtogray, 4.2)]
        [InlineData("ru-RU", "4,2 ГГр", AbsorbedDoseOfIonizingRadiationUnit.Gigagray, 4.2)]
        [InlineData("ru-RU", "4,2 Гр", AbsorbedDoseOfIonizingRadiationUnit.Gray, 4.2)]
        [InlineData("ru-RU", "4,2 кГр", AbsorbedDoseOfIonizingRadiationUnit.Kilogray, 4.2)]
        [InlineData("ru-RU", "4,2 крад", AbsorbedDoseOfIonizingRadiationUnit.Kilorad, 4.2)]
        [InlineData("ru-RU", "4,2 МГр", AbsorbedDoseOfIonizingRadiationUnit.Megagray, 4.2)]
        [InlineData("ru-RU", "4,2 Мрад", AbsorbedDoseOfIonizingRadiationUnit.Megarad, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр", AbsorbedDoseOfIonizingRadiationUnit.Microgray, 4.2)]
        [InlineData("ru-RU", "4,2 мГр", AbsorbedDoseOfIonizingRadiationUnit.Milligray, 4.2)]
        [InlineData("ru-RU", "4,2 мрад", AbsorbedDoseOfIonizingRadiationUnit.Millirad, 4.2)]
        [InlineData("ru-RU", "4,2 нГр", AbsorbedDoseOfIonizingRadiationUnit.Nanogray, 4.2)]
        [InlineData("ru-RU", "4,2 ПГр", AbsorbedDoseOfIonizingRadiationUnit.Petagray, 4.2)]
        [InlineData("ru-RU", "4,2 пГр", AbsorbedDoseOfIonizingRadiationUnit.Picogray, 4.2)]
        [InlineData("ru-RU", "4,2 рад", AbsorbedDoseOfIonizingRadiationUnit.Rad, 4.2)]
        [InlineData("ru-RU", "4,2 ТГр", AbsorbedDoseOfIonizingRadiationUnit.Teragray, 4.2)]
        public void Parse(string culture, string quantityString, AbsorbedDoseOfIonizingRadiationUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = AbsorbedDoseOfIonizingRadiation.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray, 4.2)]
        [InlineData("en-US", "4.2 dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray, 4.2)]
        [InlineData("en-US", "4.2 fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray, 4.2)]
        [InlineData("en-US", "4.2 GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray, 4.2)]
        [InlineData("en-US", "4.2 Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray, 4.2)]
        [InlineData("en-US", "4.2 kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray, 4.2)]
        [InlineData("en-US", "4.2 krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad, 4.2)]
        [InlineData("en-US", "4.2 MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray, 4.2)]
        [InlineData("en-US", "4.2 Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad, 4.2)]
        [InlineData("en-US", "4.2 µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray, 4.2)]
        [InlineData("en-US", "4.2 mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray, 4.2)]
        [InlineData("en-US", "4.2 mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad, 4.2)]
        [InlineData("en-US", "4.2 nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray, 4.2)]
        [InlineData("en-US", "4.2 PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray, 4.2)]
        [InlineData("en-US", "4.2 pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray, 4.2)]
        [InlineData("en-US", "4.2 rad", AbsorbedDoseOfIonizingRadiationUnit.Rad, 4.2)]
        [InlineData("en-US", "4.2 TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray, 4.2)]
        [InlineData("ru-RU", "4,2 сГр", AbsorbedDoseOfIonizingRadiationUnit.Centigray, 4.2)]
        [InlineData("ru-RU", "4,2 дГр", AbsorbedDoseOfIonizingRadiationUnit.Decigray, 4.2)]
        [InlineData("ru-RU", "4,2 фГр", AbsorbedDoseOfIonizingRadiationUnit.Femtogray, 4.2)]
        [InlineData("ru-RU", "4,2 ГГр", AbsorbedDoseOfIonizingRadiationUnit.Gigagray, 4.2)]
        [InlineData("ru-RU", "4,2 Гр", AbsorbedDoseOfIonizingRadiationUnit.Gray, 4.2)]
        [InlineData("ru-RU", "4,2 кГр", AbsorbedDoseOfIonizingRadiationUnit.Kilogray, 4.2)]
        [InlineData("ru-RU", "4,2 крад", AbsorbedDoseOfIonizingRadiationUnit.Kilorad, 4.2)]
        [InlineData("ru-RU", "4,2 МГр", AbsorbedDoseOfIonizingRadiationUnit.Megagray, 4.2)]
        [InlineData("ru-RU", "4,2 Мрад", AbsorbedDoseOfIonizingRadiationUnit.Megarad, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр", AbsorbedDoseOfIonizingRadiationUnit.Microgray, 4.2)]
        [InlineData("ru-RU", "4,2 мГр", AbsorbedDoseOfIonizingRadiationUnit.Milligray, 4.2)]
        [InlineData("ru-RU", "4,2 мрад", AbsorbedDoseOfIonizingRadiationUnit.Millirad, 4.2)]
        [InlineData("ru-RU", "4,2 нГр", AbsorbedDoseOfIonizingRadiationUnit.Nanogray, 4.2)]
        [InlineData("ru-RU", "4,2 ПГр", AbsorbedDoseOfIonizingRadiationUnit.Petagray, 4.2)]
        [InlineData("ru-RU", "4,2 пГр", AbsorbedDoseOfIonizingRadiationUnit.Picogray, 4.2)]
        [InlineData("ru-RU", "4,2 рад", AbsorbedDoseOfIonizingRadiationUnit.Rad, 4.2)]
        [InlineData("ru-RU", "4,2 ТГр", AbsorbedDoseOfIonizingRadiationUnit.Teragray, 4.2)]
        public void TryParse(string culture, string quantityString, AbsorbedDoseOfIonizingRadiationUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(AbsorbedDoseOfIonizingRadiation.TryParse(quantityString, out AbsorbedDoseOfIonizingRadiation parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("rad", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AbsorbedDoseOfIonizingRadiationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            AbsorbedDoseOfIonizingRadiationUnit parsedUnit = AbsorbedDoseOfIonizingRadiation.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("rad", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AbsorbedDoseOfIonizingRadiationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            AbsorbedDoseOfIonizingRadiationUnit parsedUnit = AbsorbedDoseOfIonizingRadiation.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("en-US", "dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("en-US", "fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("en-US", "GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("en-US", "Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("en-US", "kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("en-US", "krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("en-US", "MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("en-US", "Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("en-US", "µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("en-US", "mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("en-US", "mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("en-US", "nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("en-US", "PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("en-US", "pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("en-US", "rad", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("en-US", "TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        [InlineData("ru-RU", "сГр", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("ru-RU", "дГр", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("ru-RU", "фГр", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("ru-RU", "ГГр", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("ru-RU", "Гр", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("ru-RU", "кГр", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("ru-RU", "крад", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("ru-RU", "МГр", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("ru-RU", "Мрад", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("ru-RU", "мкГр", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("ru-RU", "мГр", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("ru-RU", "мрад", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("ru-RU", "нГр", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("ru-RU", "ПГр", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("ru-RU", "пГр", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("ru-RU", "рад", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("ru-RU", "ТГр", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, AbsorbedDoseOfIonizingRadiationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            AbsorbedDoseOfIonizingRadiationUnit parsedUnit = AbsorbedDoseOfIonizingRadiation.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("en-US", "dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("en-US", "fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("en-US", "GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("en-US", "Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("en-US", "kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("en-US", "krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("en-US", "MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("en-US", "Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("en-US", "µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("en-US", "mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("en-US", "mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("en-US", "nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("en-US", "PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("en-US", "pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("en-US", "rad", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("en-US", "TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        [InlineData("ru-RU", "сГр", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("ru-RU", "дГр", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("ru-RU", "фГр", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("ru-RU", "ГГр", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("ru-RU", "Гр", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("ru-RU", "кГр", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("ru-RU", "крад", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("ru-RU", "МГр", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("ru-RU", "Мрад", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("ru-RU", "мкГр", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("ru-RU", "мГр", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("ru-RU", "мрад", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("ru-RU", "нГр", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("ru-RU", "ПГр", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("ru-RU", "пГр", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("ru-RU", "рад", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("ru-RU", "ТГр", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, AbsorbedDoseOfIonizingRadiationUnit expectedUnit)
        {
            AbsorbedDoseOfIonizingRadiationUnit parsedUnit = AbsorbedDoseOfIonizingRadiation.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("rad", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AbsorbedDoseOfIonizingRadiationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(AbsorbedDoseOfIonizingRadiation.TryParseUnit(abbreviation, out AbsorbedDoseOfIonizingRadiationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("rad", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AbsorbedDoseOfIonizingRadiationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(AbsorbedDoseOfIonizingRadiation.TryParseUnit(abbreviation, out AbsorbedDoseOfIonizingRadiationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("en-US", "dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("en-US", "fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("en-US", "GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("en-US", "Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("en-US", "kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("en-US", "krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("en-US", "MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("en-US", "Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("en-US", "µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("en-US", "mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("en-US", "mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("en-US", "nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("en-US", "PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("en-US", "pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("en-US", "rad", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("en-US", "TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        [InlineData("ru-RU", "сГр", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("ru-RU", "дГр", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("ru-RU", "фГр", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("ru-RU", "ГГр", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("ru-RU", "Гр", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("ru-RU", "кГр", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("ru-RU", "крад", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("ru-RU", "МГр", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("ru-RU", "Мрад", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("ru-RU", "мкГр", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("ru-RU", "мГр", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("ru-RU", "мрад", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("ru-RU", "нГр", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("ru-RU", "ПГр", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("ru-RU", "пГр", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("ru-RU", "рад", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("ru-RU", "ТГр", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, AbsorbedDoseOfIonizingRadiationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(AbsorbedDoseOfIonizingRadiation.TryParseUnit(abbreviation, out AbsorbedDoseOfIonizingRadiationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cGy", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("en-US", "dGy", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("en-US", "fGy", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("en-US", "GGy", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("en-US", "Gy", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("en-US", "kGy", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("en-US", "krad", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("en-US", "MGy", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("en-US", "Mrad", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("en-US", "µGy", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("en-US", "mGy", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("en-US", "mrad", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("en-US", "nGy", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("en-US", "PGy", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("en-US", "pGy", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("en-US", "rad", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("en-US", "TGy", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        [InlineData("ru-RU", "сГр", AbsorbedDoseOfIonizingRadiationUnit.Centigray)]
        [InlineData("ru-RU", "дГр", AbsorbedDoseOfIonizingRadiationUnit.Decigray)]
        [InlineData("ru-RU", "фГр", AbsorbedDoseOfIonizingRadiationUnit.Femtogray)]
        [InlineData("ru-RU", "ГГр", AbsorbedDoseOfIonizingRadiationUnit.Gigagray)]
        [InlineData("ru-RU", "Гр", AbsorbedDoseOfIonizingRadiationUnit.Gray)]
        [InlineData("ru-RU", "кГр", AbsorbedDoseOfIonizingRadiationUnit.Kilogray)]
        [InlineData("ru-RU", "крад", AbsorbedDoseOfIonizingRadiationUnit.Kilorad)]
        [InlineData("ru-RU", "МГр", AbsorbedDoseOfIonizingRadiationUnit.Megagray)]
        [InlineData("ru-RU", "Мрад", AbsorbedDoseOfIonizingRadiationUnit.Megarad)]
        [InlineData("ru-RU", "мкГр", AbsorbedDoseOfIonizingRadiationUnit.Microgray)]
        [InlineData("ru-RU", "мГр", AbsorbedDoseOfIonizingRadiationUnit.Milligray)]
        [InlineData("ru-RU", "мрад", AbsorbedDoseOfIonizingRadiationUnit.Millirad)]
        [InlineData("ru-RU", "нГр", AbsorbedDoseOfIonizingRadiationUnit.Nanogray)]
        [InlineData("ru-RU", "ПГр", AbsorbedDoseOfIonizingRadiationUnit.Petagray)]
        [InlineData("ru-RU", "пГр", AbsorbedDoseOfIonizingRadiationUnit.Picogray)]
        [InlineData("ru-RU", "рад", AbsorbedDoseOfIonizingRadiationUnit.Rad)]
        [InlineData("ru-RU", "ТГр", AbsorbedDoseOfIonizingRadiationUnit.Teragray)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, AbsorbedDoseOfIonizingRadiationUnit expectedUnit)
        {
            Assert.True(AbsorbedDoseOfIonizingRadiation.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out AbsorbedDoseOfIonizingRadiationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Centigray, "cGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Decigray, "dGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Femtogray, "fGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Gigagray, "GGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Gray, "Gy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Kilogray, "kGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Kilorad, "krad")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Megagray, "MGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Megarad, "Mrad")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Microgray, "µGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Milligray, "mGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Millirad, "mrad")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Nanogray, "nGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Petagray, "PGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Picogray, "pGy")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Rad, "rad")]
        [InlineData("en-US", AbsorbedDoseOfIonizingRadiationUnit.Teragray, "TGy")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Centigray, "сГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Decigray, "дГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Femtogray, "фГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Gigagray, "ГГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Gray, "Гр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Kilogray, "кГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Kilorad, "крад")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Megagray, "МГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Megarad, "Мрад")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Microgray, "мкГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Milligray, "мГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Millirad, "мрад")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Nanogray, "нГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Petagray, "ПГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Picogray, "пГр")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Rad, "рад")]
        [InlineData("ru-RU", AbsorbedDoseOfIonizingRadiationUnit.Teragray, "ТГр")]
        public void GetAbbreviationForCulture(string culture, AbsorbedDoseOfIonizingRadiationUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = AbsorbedDoseOfIonizingRadiation.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(AbsorbedDoseOfIonizingRadiation.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = AbsorbedDoseOfIonizingRadiation.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(AbsorbedDoseOfIonizingRadiationUnit unit)
        {
            var inBaseUnits = AbsorbedDoseOfIonizingRadiation.From(1.0, AbsorbedDoseOfIonizingRadiation.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(AbsorbedDoseOfIonizingRadiationUnit unit)
        {
            var quantity = AbsorbedDoseOfIonizingRadiation.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(AbsorbedDoseOfIonizingRadiationUnit unit)
        {
            Assert.All(AbsorbedDoseOfIonizingRadiation.Units.Where(u => u != AbsorbedDoseOfIonizingRadiation.BaseUnit), fromUnit =>
            {
                var quantity = AbsorbedDoseOfIonizingRadiation.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(AbsorbedDoseOfIonizingRadiationUnit unit)
        {
            var quantity = default(AbsorbedDoseOfIonizingRadiation);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(AbsorbedDoseOfIonizingRadiationUnit unit)
        {
            var quantity = AbsorbedDoseOfIonizingRadiation.From(3, AbsorbedDoseOfIonizingRadiation.BaseUnit);
            AbsorbedDoseOfIonizingRadiation expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<AbsorbedDoseOfIonizingRadiationUnit> quantityToConvert = quantity;
                IQuantity<AbsorbedDoseOfIonizingRadiationUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            AbsorbedDoseOfIonizingRadiation gray = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromCentigrays(gray.Centigrays).Grays, CentigraysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromDecigrays(gray.Decigrays).Grays, DecigraysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromFemtograys(gray.Femtograys).Grays, FemtograysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromGigagrays(gray.Gigagrays).Grays, GigagraysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromGrays(gray.Grays).Grays, GraysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromKilograys(gray.Kilograys).Grays, KilograysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromKilorads(gray.Kilorads).Grays, KiloradsTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromMegagrays(gray.Megagrays).Grays, MegagraysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromMegarads(gray.Megarads).Grays, MegaradsTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromMicrograys(gray.Micrograys).Grays, MicrograysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromMilligrays(gray.Milligrays).Grays, MilligraysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromMillirads(gray.Millirads).Grays, MilliradsTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromNanograys(gray.Nanograys).Grays, NanograysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromPetagrays(gray.Petagrays).Grays, PetagraysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromPicograys(gray.Picograys).Grays, PicograysTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromRads(gray.Rads).Grays, RadsTolerance);
            AssertEx.EqualTolerance(1, AbsorbedDoseOfIonizingRadiation.FromTeragrays(gray.Teragrays).Grays, TeragraysTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            AbsorbedDoseOfIonizingRadiation v = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            AssertEx.EqualTolerance(-1, -v.Grays, GraysTolerance);
            AssertEx.EqualTolerance(2, (AbsorbedDoseOfIonizingRadiation.FromGrays(3)-v).Grays, GraysTolerance);
            AssertEx.EqualTolerance(2, (v + v).Grays, GraysTolerance);
            AssertEx.EqualTolerance(10, (v*10).Grays, GraysTolerance);
            AssertEx.EqualTolerance(10, (10*v).Grays, GraysTolerance);
            AssertEx.EqualTolerance(2, (AbsorbedDoseOfIonizingRadiation.FromGrays(10)/5).Grays, GraysTolerance);
            AssertEx.EqualTolerance(2, AbsorbedDoseOfIonizingRadiation.FromGrays(10)/AbsorbedDoseOfIonizingRadiation.FromGrays(5), GraysTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            AbsorbedDoseOfIonizingRadiation oneGray = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            AbsorbedDoseOfIonizingRadiation twoGrays = AbsorbedDoseOfIonizingRadiation.FromGrays(2);

            Assert.True(oneGray < twoGrays);
            Assert.True(oneGray <= twoGrays);
            Assert.True(twoGrays > oneGray);
            Assert.True(twoGrays >= oneGray);

            Assert.False(oneGray > twoGrays);
            Assert.False(oneGray >= twoGrays);
            Assert.False(twoGrays < oneGray);
            Assert.False(twoGrays <= oneGray);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            AbsorbedDoseOfIonizingRadiation gray = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            Assert.Equal(0, gray.CompareTo(gray));
            Assert.True(gray.CompareTo(AbsorbedDoseOfIonizingRadiation.Zero) > 0);
            Assert.True(AbsorbedDoseOfIonizingRadiation.Zero.CompareTo(gray) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            AbsorbedDoseOfIonizingRadiation gray = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            Assert.Throws<ArgumentException>(() => gray.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            AbsorbedDoseOfIonizingRadiation gray = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            Assert.Throws<ArgumentNullException>(() => gray.CompareTo(null));
        }

        [Theory]
        [InlineData(1, AbsorbedDoseOfIonizingRadiationUnit.Gray, 1, AbsorbedDoseOfIonizingRadiationUnit.Gray, true)]  // Same value and unit.
        [InlineData(1, AbsorbedDoseOfIonizingRadiationUnit.Gray, 2, AbsorbedDoseOfIonizingRadiationUnit.Gray, false)] // Different value.
        [InlineData(2, AbsorbedDoseOfIonizingRadiationUnit.Gray, 1, AbsorbedDoseOfIonizingRadiationUnit.Centigray, false)] // Different value and unit.
        [InlineData(1, AbsorbedDoseOfIonizingRadiationUnit.Gray, 1, AbsorbedDoseOfIonizingRadiationUnit.Centigray, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, AbsorbedDoseOfIonizingRadiationUnit unitA, double valueB, AbsorbedDoseOfIonizingRadiationUnit unitB, bool expectEqual)
        {
            var a = new AbsorbedDoseOfIonizingRadiation(valueA, unitA);
            var b = new AbsorbedDoseOfIonizingRadiation(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = AbsorbedDoseOfIonizingRadiation.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            AbsorbedDoseOfIonizingRadiation gray = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            Assert.False(gray.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            AbsorbedDoseOfIonizingRadiation gray = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            Assert.False(gray.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = AbsorbedDoseOfIonizingRadiation.FromGrays(firstValue);
            var otherQuantity = AbsorbedDoseOfIonizingRadiation.FromGrays(secondValue);
            AbsorbedDoseOfIonizingRadiation maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, AbsorbedDoseOfIonizingRadiation.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = AbsorbedDoseOfIonizingRadiation.FromGrays(1);
            var negativeTolerance = AbsorbedDoseOfIonizingRadiation.FromGrays(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<AbsorbedDoseOfIonizingRadiationUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(AbsorbedDoseOfIonizingRadiation.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Centigray).ToString());
            Assert.Equal("1 dGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Decigray).ToString());
            Assert.Equal("1 fGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Femtogray).ToString());
            Assert.Equal("1 GGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Gigagray).ToString());
            Assert.Equal("1 Gy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString());
            Assert.Equal("1 kGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Kilogray).ToString());
            Assert.Equal("1 krad", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Kilorad).ToString());
            Assert.Equal("1 MGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Megagray).ToString());
            Assert.Equal("1 Mrad", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Megarad).ToString());
            Assert.Equal("1 µGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Microgray).ToString());
            Assert.Equal("1 mGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Milligray).ToString());
            Assert.Equal("1 mrad", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Millirad).ToString());
            Assert.Equal("1 nGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Nanogray).ToString());
            Assert.Equal("1 PGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Petagray).ToString());
            Assert.Equal("1 pGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Picogray).ToString());
            Assert.Equal("1 rad", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Rad).ToString());
            Assert.Equal("1 TGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Teragray).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Centigray).ToString(swedishCulture));
            Assert.Equal("1 dGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Decigray).ToString(swedishCulture));
            Assert.Equal("1 fGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Femtogray).ToString(swedishCulture));
            Assert.Equal("1 GGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Gigagray).ToString(swedishCulture));
            Assert.Equal("1 Gy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString(swedishCulture));
            Assert.Equal("1 kGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Kilogray).ToString(swedishCulture));
            Assert.Equal("1 krad", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Kilorad).ToString(swedishCulture));
            Assert.Equal("1 MGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Megagray).ToString(swedishCulture));
            Assert.Equal("1 Mrad", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Megarad).ToString(swedishCulture));
            Assert.Equal("1 µGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Microgray).ToString(swedishCulture));
            Assert.Equal("1 mGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Milligray).ToString(swedishCulture));
            Assert.Equal("1 mrad", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Millirad).ToString(swedishCulture));
            Assert.Equal("1 nGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Nanogray).ToString(swedishCulture));
            Assert.Equal("1 PGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Petagray).ToString(swedishCulture));
            Assert.Equal("1 pGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Picogray).ToString(swedishCulture));
            Assert.Equal("1 rad", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Rad).ToString(swedishCulture));
            Assert.Equal("1 TGy", new AbsorbedDoseOfIonizingRadiation(1, AbsorbedDoseOfIonizingRadiationUnit.Teragray).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Gy", new AbsorbedDoseOfIonizingRadiation(0.123456, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString("s1"));
            Assert.Equal("0.12 Gy", new AbsorbedDoseOfIonizingRadiation(0.123456, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString("s2"));
            Assert.Equal("0.123 Gy", new AbsorbedDoseOfIonizingRadiation(0.123456, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString("s3"));
            Assert.Equal("0.1235 Gy", new AbsorbedDoseOfIonizingRadiation(0.123456, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Gy", new AbsorbedDoseOfIonizingRadiation(0.123456, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString("s1", culture));
            Assert.Equal("0.12 Gy", new AbsorbedDoseOfIonizingRadiation(0.123456, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString("s2", culture));
            Assert.Equal("0.123 Gy", new AbsorbedDoseOfIonizingRadiation(0.123456, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString("s3", culture));
            Assert.Equal("0.1235 Gy", new AbsorbedDoseOfIonizingRadiation(0.123456, AbsorbedDoseOfIonizingRadiationUnit.Gray).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = AbsorbedDoseOfIonizingRadiation.FromGrays(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = AbsorbedDoseOfIonizingRadiation.FromGrays(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = AbsorbedDoseOfIonizingRadiation.FromGrays(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = AbsorbedDoseOfIonizingRadiation.FromGrays(value);
            Assert.Equal(AbsorbedDoseOfIonizingRadiation.FromGrays(-value), -quantity);
        }
    }
}
