//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\UnitClasses\MyQuantity.extra.cs files to add code to generated unit classes.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or unit classes.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using Xunit;

namespace UnitsNet.Tests.CustomCode
{
    public class ForcePerLengthTests : ForcePerLengthTestsBase
    {
        protected override double KilopoundsForcePerInchInOneNewtonPerMeter => 5.710147162769201E-6;
        protected override double KilogramsForcePerMillimeterInOneNewtonPerMeter => 1.019716212977928e-4;
        protected override double KilogramsForcePerCentimeterInOneNewtonPerMeter => 1.019716212977928e-3;
        protected override double TonnesForcePerMeterInOneNewtonPerMeter => 1.019716212977928e-4;
        protected override double TonnesForcePerMillimeterInOneNewtonPerMeter => 1.019716212977928e-7;
        protected override double TonnesForcePerCentimeterInOneNewtonPerMeter => 1.019716212977928e-6;
        protected override double NewtonsPerCentimeterInOneNewtonPerMeter => 1E-2;
        protected override double MicronewtonsPerCentimeterInOneNewtonPerMeter => 1E4;
        protected override double CentinewtonsPerCentimeterInOneNewtonPerMeter => 1;
        protected override double DecinewtonsPerCentimeterInOneNewtonPerMeter => 1E-1;
        protected override double NanonewtonsPerCentimeterInOneNewtonPerMeter => 1E7;
        protected override double DecanewtonsPerCentimeterInOneNewtonPerMeter => 1E-3;
        protected override double MeganewtonsPerCentimeterInOneNewtonPerMeter => 1E-8;
        protected override double KilonewtonsPerCentimeterInOneNewtonPerMeter => 1E-5;
        protected override double MillinewtonsPerCentimeterInOneNewtonPerMeter => 1E1;
        protected override double CentinewtonsPerMeterInOneNewtonPerMeter => 1E2;
        protected override double DecinewtonsPerMeterInOneNewtonPerMeter => 1E1;
        protected override double KilogramsForcePerMeterInOneNewtonPerMeter => 0.101972;
        protected override double KilonewtonsPerMeterInOneNewtonPerMeter => 1E-3;
        protected override double KilopoundsForcePerFootInOneNewtonPerMeter => 6.8521766E-5;
        protected override double MicronewtonsPerMeterInOneNewtonPerMeter => 1E6;
        protected override double MillinewtonsPerMeterInOneNewtonPerMeter => 1E3;
        protected override double NanonewtonsPerMeterInOneNewtonPerMeter => 1E9;
        protected override double NewtonsPerMeterInOneNewtonPerMeter => 1;
        protected override double NewtonsPerMillimeterInOneNewtonPerMeter => 1E-3;
        protected override double PoundsForcePerFootInOneNewtonPerMeter => 6.8521766E-2;
        protected override double PoundsForcePerInchInOneNewtonPerMeter => 5.710147162769201E-3;
        protected override double PoundsForcePerYardInOneNewtonPerMeter => 0.205565298;
        protected override double MeganewtonsPerMeterInOneNewtonPerMeter => 1E-6;
        protected override double CentinewtonsPerMillimeterInOneNewtonPerMeter => 0.1;
        protected override double DecanewtonsPerMeterInOneNewtonPerMeter => 0.1;
        protected override double DecanewtonsPerMillimeterInOneNewtonPerMeter => 1E-4;
        protected override double DecinewtonsPerMillimeterInOneNewtonPerMeter => 1E-2;
        protected override double KilonewtonsPerMillimeterInOneNewtonPerMeter => 1E-6;
        protected override double MeganewtonsPerMillimeterInOneNewtonPerMeter => 1E-9;
        protected override double MicronewtonsPerMillimeterInOneNewtonPerMeter => 1E3;
        protected override double MillinewtonsPerMillimeterInOneNewtonPerMeter => 1;
        protected override double NanonewtonsPerMillimeterInOneNewtonPerMeter => 1E6;

        [Fact]
        public void ForcePerLengthDividedByLengthEqualsPressure()
        {
            Pressure pressure = ForcePerLength.FromNewtonsPerMeter(90) / Length.FromMeters(9);
            Assert.Equal(pressure, Pressure.FromNewtonsPerSquareMeter(10));
        }

        [Fact]
        public void ForceDividedByForcePerLengthEqualsLength()
        {
            Length length = Force.FromNewtons(10) / ForcePerLength.FromNewtonsPerMeter(2);
            Assert.Equal(length, Length.FromMeters(5));
        }

        [Fact]
        public void ForcePerLengthTimesLengthEqualForce()
        {
            Force force = ForcePerLength.FromNewtonsPerMeter(10) * Length.FromMeters(9);
            Assert.Equal(force, Force.FromNewtons(90));
        }

        [Fact]
        public void ForcePerLengthTimesAreaEqualTorque()
        {
            Torque torque = ForcePerLength.FromNewtonsPerMeter(10) * Area.FromSquareMeters(9);
            Assert.Equal(torque, Torque.FromNewtonMeters(90));
        }
    }
}
