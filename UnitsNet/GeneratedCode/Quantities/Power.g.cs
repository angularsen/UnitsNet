//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System.Globalization;
using System.Resources;
using System.Runtime.Serialization;
using UnitsNet.Debug;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics, power is the rate of doing work. It is equivalent to an amount of energy consumed per unit time.
    /// </summary>
    [DataContract]
    [DebuggerDisplay(QuantityDebugProxy.DisplayFormat)]
    [DebuggerTypeProxy(typeof(QuantityDebugProxy))]
    public readonly partial struct Power :
        IArithmeticQuantity<Power, PowerUnit>,
#if NET7_0_OR_GREATER
        IDivisionOperators<Power, HeatFlux, Area>,
        IDivisionOperators<Power, ElectricPotential, ElectricCurrent>,
        IDivisionOperators<Power, ElectricCurrent, ElectricPotential>,
        IMultiplyOperators<Power, Duration, Energy>,
        IDivisionOperators<Power, Frequency, Energy>,
        IDivisionOperators<Power, Speed, Force>,
        IDivisionOperators<Power, Energy, Frequency>,
        IDivisionOperators<Power, Area, HeatFlux>,
        IMultiplyOperators<Power, BrakeSpecificFuelConsumption, MassFlow>,
        IDivisionOperators<Power, SpecificEnergy, MassFlow>,
        IDivisionOperators<Power, Torque, RotationalSpeed>,
        IDivisionOperators<Power, MassFlow, SpecificEnergy>,
        IDivisionOperators<Power, Force, Speed>,
        IDivisionOperators<Power, RotationalSpeed, Torque>,
#endif
#if NET7_0_OR_GREATER
        IComparisonOperators<Power, Power, bool>,
        IParsable<Power>,
#endif
        IComparable,
        IComparable<Power>,
        IEquatable<Power>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly PowerUnit? _unit;

        /// <summary>
        ///     Provides detailed information about the <see cref="Power"/> quantity, including its name, base unit, unit mappings, base dimensions, and conversion functions.
        /// </summary>
        public sealed class PowerInfo: QuantityInfo<Power, PowerUnit>
        {
            /// <inheritdoc />
            public PowerInfo(string name, PowerUnit baseUnit, IEnumerable<IUnitDefinition<PowerUnit>> unitMappings, Power zero, BaseDimensions baseDimensions,
                QuantityFromDelegate<Power, PowerUnit> fromDelegate, ResourceManager? unitAbbreviations)
                : base(name, baseUnit, unitMappings, zero, baseDimensions, fromDelegate, unitAbbreviations)
            {
            }

            /// <inheritdoc />
            public PowerInfo(string name, PowerUnit baseUnit, IEnumerable<IUnitDefinition<PowerUnit>> unitMappings, Power zero, BaseDimensions baseDimensions)
                : this(name, baseUnit, unitMappings, zero, baseDimensions, Power.From, new ResourceManager("UnitsNet.GeneratedCode.Resources.Power", typeof(Power).Assembly))
            {
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="PowerInfo"/> class with the default settings for the Power quantity.
            /// </summary>
            /// <returns>A new instance of the <see cref="PowerInfo"/> class with the default settings.</returns>
            public static PowerInfo CreateDefault()
            {
                return new PowerInfo(nameof(Power), DefaultBaseUnit, GetDefaultMappings(), new Power(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="PowerInfo"/> class with the default settings for the Power quantity and a callback for customizing the default unit mappings.
            /// </summary>
            /// <param name="customizeUnits">
            ///     A callback function for customizing the default unit mappings.
            /// </param>
            /// <returns>
            ///     A new instance of the <see cref="PowerInfo"/> class with the default settings.
            /// </returns>
            public static PowerInfo CreateDefault(Func<IEnumerable<UnitDefinition<PowerUnit>>, IEnumerable<IUnitDefinition<PowerUnit>>> customizeUnits)
            {
                return new PowerInfo(nameof(Power), DefaultBaseUnit, customizeUnits(GetDefaultMappings()), new Power(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     The <see cref="BaseDimensions" /> for <see cref="Power"/> is T^-3L^2M.
            /// </summary>
            public static BaseDimensions DefaultBaseDimensions { get; } = new BaseDimensions(2, 1, -3, 0, 0, 0, 0);

            /// <summary>
            ///     The default base unit of Power is Watt. All conversions, as defined in the <see cref="GetDefaultMappings"/>, go via this value.
            /// </summary>
            public static PowerUnit DefaultBaseUnit { get; } = PowerUnit.Watt;

            /// <summary>
            ///     Retrieves the default mappings for <see cref="PowerUnit"/>.
            /// </summary>
            /// <returns>An <see cref="IEnumerable{T}"/> of <see cref="UnitDefinition{PowerUnit}"/> representing the default unit mappings for Power.</returns>
            public static IEnumerable<UnitDefinition<PowerUnit>> GetDefaultMappings()
            {
                yield return new (PowerUnit.BoilerHorsepower, "BoilerHorsepower", "BoilerHorsepower", BaseUnits.Undefined,
                     new QuantityValue(2, 19625)             
                );
                yield return new (PowerUnit.BritishThermalUnitPerHour, "BritishThermalUnitPerHour", "BritishThermalUnitsPerHour", BaseUnits.Undefined,
                     new QuantityValue(180000000000, 52752792631)             
                );
                yield return new (PowerUnit.Decawatt, "Decawatt", "Decawatts", BaseUnits.Undefined,
                     new QuantityValue(1, 10)             
                );
                yield return new (PowerUnit.Deciwatt, "Deciwatt", "Deciwatts", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Hectogram, time: DurationUnit.Second),
                     10             
                );
                yield return new (PowerUnit.ElectricalHorsepower, "ElectricalHorsepower", "ElectricalHorsepower", BaseUnits.Undefined,
                     new QuantityValue(1, 746)             
                );
                yield return new (PowerUnit.Femtowatt, "Femtowatt", "Femtowatts", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Picogram, time: DurationUnit.Second),
                     1000000000000000             
                );
                yield return new (PowerUnit.GigajoulePerHour, "GigajoulePerHour", "GigajoulesPerHour", BaseUnits.Undefined,
                     new QuantityValue(9, 2500000)             
                );
                yield return new (PowerUnit.Gigawatt, "Gigawatt", "Gigawatts", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Millisecond),
                     new QuantityValue(1, 1000000000)             
                );
                yield return new (PowerUnit.HydraulicHorsepower, "HydraulicHorsepower", "HydraulicHorsepower", BaseUnits.Undefined,
                     new QuantityValue(50000000000000, 37284993579113511)             
                );
                yield return new (PowerUnit.JoulePerHour, "JoulePerHour", "JoulesPerHour", BaseUnits.Undefined,
                     3600             
                );
                yield return new (PowerUnit.KilobritishThermalUnitPerHour, "KilobritishThermalUnitPerHour", "KilobritishThermalUnitsPerHour", BaseUnits.Undefined,
                     new QuantityValue(180000000, 52752792631)             
                );
                yield return new (PowerUnit.KilojoulePerHour, "KilojoulePerHour", "KilojoulesPerHour", BaseUnits.Undefined,
                     new QuantityValue(18, 5)             
                );
                yield return new (PowerUnit.Kilowatt, "Kilowatt", "Kilowatts", BaseUnits.Undefined,
                     new QuantityValue(1, 1000)             
                );
                yield return new (PowerUnit.MechanicalHorsepower, "MechanicalHorsepower", "MechanicalHorsepower", BaseUnits.Undefined,
                     new QuantityValue(200000000000, 149139974303117)             
                );
                yield return new (PowerUnit.MegabritishThermalUnitPerHour, "MegabritishThermalUnitPerHour", "MegabritishThermalUnitsPerHour", BaseUnits.Undefined,
                     new QuantityValue(180000, 52752792631)             
                );
                yield return new (PowerUnit.MegajoulePerHour, "MegajoulePerHour", "MegajoulesPerHour", BaseUnits.Undefined,
                     new QuantityValue(9, 2500)             
                );
                yield return new (PowerUnit.Megawatt, "Megawatt", "Megawatts", new BaseUnits(length: LengthUnit.Kilometer, mass: MassUnit.Kilogram, time: DurationUnit.Second),
                     new QuantityValue(1, 1000000)             
                );
                yield return new (PowerUnit.MetricHorsepower, "MetricHorsepower", "MetricHorsepower", BaseUnits.Undefined,
                     new QuantityValue(800, 588399)             
                );
                yield return new (PowerUnit.Microwatt, "Microwatt", "Microwatts", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Milligram, time: DurationUnit.Second),
                     1000000             
                );
                yield return new (PowerUnit.MillijoulePerHour, "MillijoulePerHour", "MillijoulesPerHour", BaseUnits.Undefined,
                     3600000             
                );
                yield return new (PowerUnit.Milliwatt, "Milliwatt", "Milliwatts", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Gram, time: DurationUnit.Second),
                     1000             
                );
                yield return new (PowerUnit.Nanowatt, "Nanowatt", "Nanowatts", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Microgram, time: DurationUnit.Second),
                     1000000000             
                );
                yield return new (PowerUnit.Petawatt, "Petawatt", "Petawatts", BaseUnits.Undefined,
                     new QuantityValue(1, 1000000000000000)             
                );
                yield return new (PowerUnit.Picowatt, "Picowatt", "Picowatts", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Nanogram, time: DurationUnit.Second),
                     1000000000000             
                );
                yield return new (PowerUnit.Terawatt, "Terawatt", "Terawatts", new BaseUnits(length: LengthUnit.Megameter, mass: MassUnit.Kilogram, time: DurationUnit.Second),
                     new QuantityValue(1, 1000000000000)             
                );
                yield return new (PowerUnit.TonOfRefrigeration, "TonOfRefrigeration", "TonsOfRefrigeration", BaseUnits.Undefined,
                     new QuantityValue(1000, 3516853)             
                );
                yield return new (PowerUnit.Watt, "Watt", "Watts", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second));
            }
        }

        static Power()
        {
            Info = UnitsNetSetup.CreateQuantityInfo(PowerInfo.CreateDefault);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Power(QuantityValue value, PowerUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Power(QuantityValue value, UnitSystem unitSystem)
        {
            _value = value;
            _unit = Info.GetDefaultUnit(unitSystem);
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Power" /> instances.
        /// </summary>
        [Obsolete("Replaced by UnitConverter.Default")]
        public static UnitConverter DefaultConversionFunctions => UnitConverter.Default;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<Power, PowerUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions => Info.BaseDimensions;

        /// <summary>
        ///     The base unit of Power, which is Watt. All conversions go via this value.
        /// </summary>
        public static PowerUnit BaseUnit => Info.BaseUnitInfo.Value;

        /// <summary>
        ///     All units of measurement for the Power quantity.
        /// </summary>
        public static IReadOnlyCollection<PowerUnit> Units => Info.Units;

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Watt.
        /// </summary>
        public static Power Zero => Info.Zero;

        #endregion

        #region Properties

        /// <inheritdoc />
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public PowerUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<Power, PowerUnit> QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Power.BaseDimensions;

        #region Explicit implementations

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Enum IQuantity.Unit => Unit;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UnitKey IQuantity.UnitKey => UnitKey.ForUnit(Unit);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo IQuantity.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo<PowerUnit> IQuantity<PowerUnit>.QuantityInfo => Info;

#if NETSTANDARD2_0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuantityInstanceInfo<Power> IQuantityInstance<Power>.QuantityInfo => Info;
#endif

        #endregion

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.BoilerHorsepower"/>
        /// </summary>
        public QuantityValue BoilerHorsepower => this.As(PowerUnit.BoilerHorsepower);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.BritishThermalUnitPerHour"/>
        /// </summary>
        public QuantityValue BritishThermalUnitsPerHour => this.As(PowerUnit.BritishThermalUnitPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Decawatt"/>
        /// </summary>
        public QuantityValue Decawatts => this.As(PowerUnit.Decawatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Deciwatt"/>
        /// </summary>
        public QuantityValue Deciwatts => this.As(PowerUnit.Deciwatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.ElectricalHorsepower"/>
        /// </summary>
        public QuantityValue ElectricalHorsepower => this.As(PowerUnit.ElectricalHorsepower);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Femtowatt"/>
        /// </summary>
        public QuantityValue Femtowatts => this.As(PowerUnit.Femtowatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.GigajoulePerHour"/>
        /// </summary>
        public QuantityValue GigajoulesPerHour => this.As(PowerUnit.GigajoulePerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Gigawatt"/>
        /// </summary>
        public QuantityValue Gigawatts => this.As(PowerUnit.Gigawatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.HydraulicHorsepower"/>
        /// </summary>
        public QuantityValue HydraulicHorsepower => this.As(PowerUnit.HydraulicHorsepower);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.JoulePerHour"/>
        /// </summary>
        public QuantityValue JoulesPerHour => this.As(PowerUnit.JoulePerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.KilobritishThermalUnitPerHour"/>
        /// </summary>
        public QuantityValue KilobritishThermalUnitsPerHour => this.As(PowerUnit.KilobritishThermalUnitPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.KilojoulePerHour"/>
        /// </summary>
        public QuantityValue KilojoulesPerHour => this.As(PowerUnit.KilojoulePerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Kilowatt"/>
        /// </summary>
        public QuantityValue Kilowatts => this.As(PowerUnit.Kilowatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.MechanicalHorsepower"/>
        /// </summary>
        public QuantityValue MechanicalHorsepower => this.As(PowerUnit.MechanicalHorsepower);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.MegabritishThermalUnitPerHour"/>
        /// </summary>
        public QuantityValue MegabritishThermalUnitsPerHour => this.As(PowerUnit.MegabritishThermalUnitPerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.MegajoulePerHour"/>
        /// </summary>
        public QuantityValue MegajoulesPerHour => this.As(PowerUnit.MegajoulePerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Megawatt"/>
        /// </summary>
        public QuantityValue Megawatts => this.As(PowerUnit.Megawatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.MetricHorsepower"/>
        /// </summary>
        public QuantityValue MetricHorsepower => this.As(PowerUnit.MetricHorsepower);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Microwatt"/>
        /// </summary>
        public QuantityValue Microwatts => this.As(PowerUnit.Microwatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.MillijoulePerHour"/>
        /// </summary>
        public QuantityValue MillijoulesPerHour => this.As(PowerUnit.MillijoulePerHour);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Milliwatt"/>
        /// </summary>
        public QuantityValue Milliwatts => this.As(PowerUnit.Milliwatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Nanowatt"/>
        /// </summary>
        public QuantityValue Nanowatts => this.As(PowerUnit.Nanowatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Petawatt"/>
        /// </summary>
        public QuantityValue Petawatts => this.As(PowerUnit.Petawatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Picowatt"/>
        /// </summary>
        public QuantityValue Picowatts => this.As(PowerUnit.Picowatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Terawatt"/>
        /// </summary>
        public QuantityValue Terawatts => this.As(PowerUnit.Terawatt);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.TonOfRefrigeration"/>
        /// </summary>
        public QuantityValue TonsOfRefrigeration => this.As(PowerUnit.TonOfRefrigeration);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="PowerUnit.Watt"/>
        /// </summary>
        public QuantityValue Watts => this.As(PowerUnit.Watt);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(PowerUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(PowerUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.BoilerHorsepower"/>.
        /// </summary>
        public static Power FromBoilerHorsepower(QuantityValue value)
        {
            return new Power(value, PowerUnit.BoilerHorsepower);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.BritishThermalUnitPerHour"/>.
        /// </summary>
        public static Power FromBritishThermalUnitsPerHour(QuantityValue value)
        {
            return new Power(value, PowerUnit.BritishThermalUnitPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Decawatt"/>.
        /// </summary>
        public static Power FromDecawatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Decawatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Deciwatt"/>.
        /// </summary>
        public static Power FromDeciwatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Deciwatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.ElectricalHorsepower"/>.
        /// </summary>
        public static Power FromElectricalHorsepower(QuantityValue value)
        {
            return new Power(value, PowerUnit.ElectricalHorsepower);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Femtowatt"/>.
        /// </summary>
        public static Power FromFemtowatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Femtowatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.GigajoulePerHour"/>.
        /// </summary>
        public static Power FromGigajoulesPerHour(QuantityValue value)
        {
            return new Power(value, PowerUnit.GigajoulePerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Gigawatt"/>.
        /// </summary>
        public static Power FromGigawatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Gigawatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.HydraulicHorsepower"/>.
        /// </summary>
        public static Power FromHydraulicHorsepower(QuantityValue value)
        {
            return new Power(value, PowerUnit.HydraulicHorsepower);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.JoulePerHour"/>.
        /// </summary>
        public static Power FromJoulesPerHour(QuantityValue value)
        {
            return new Power(value, PowerUnit.JoulePerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.KilobritishThermalUnitPerHour"/>.
        /// </summary>
        public static Power FromKilobritishThermalUnitsPerHour(QuantityValue value)
        {
            return new Power(value, PowerUnit.KilobritishThermalUnitPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.KilojoulePerHour"/>.
        /// </summary>
        public static Power FromKilojoulesPerHour(QuantityValue value)
        {
            return new Power(value, PowerUnit.KilojoulePerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Kilowatt"/>.
        /// </summary>
        public static Power FromKilowatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Kilowatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.MechanicalHorsepower"/>.
        /// </summary>
        public static Power FromMechanicalHorsepower(QuantityValue value)
        {
            return new Power(value, PowerUnit.MechanicalHorsepower);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.MegabritishThermalUnitPerHour"/>.
        /// </summary>
        public static Power FromMegabritishThermalUnitsPerHour(QuantityValue value)
        {
            return new Power(value, PowerUnit.MegabritishThermalUnitPerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.MegajoulePerHour"/>.
        /// </summary>
        public static Power FromMegajoulesPerHour(QuantityValue value)
        {
            return new Power(value, PowerUnit.MegajoulePerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Megawatt"/>.
        /// </summary>
        public static Power FromMegawatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Megawatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.MetricHorsepower"/>.
        /// </summary>
        public static Power FromMetricHorsepower(QuantityValue value)
        {
            return new Power(value, PowerUnit.MetricHorsepower);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Microwatt"/>.
        /// </summary>
        public static Power FromMicrowatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Microwatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.MillijoulePerHour"/>.
        /// </summary>
        public static Power FromMillijoulesPerHour(QuantityValue value)
        {
            return new Power(value, PowerUnit.MillijoulePerHour);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Milliwatt"/>.
        /// </summary>
        public static Power FromMilliwatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Milliwatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Nanowatt"/>.
        /// </summary>
        public static Power FromNanowatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Nanowatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Petawatt"/>.
        /// </summary>
        public static Power FromPetawatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Petawatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Picowatt"/>.
        /// </summary>
        public static Power FromPicowatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Picowatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Terawatt"/>.
        /// </summary>
        public static Power FromTerawatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Terawatt);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.TonOfRefrigeration"/>.
        /// </summary>
        public static Power FromTonsOfRefrigeration(QuantityValue value)
        {
            return new Power(value, PowerUnit.TonOfRefrigeration);
        }

        /// <summary>
        ///     Creates a <see cref="Power"/> from <see cref="PowerUnit.Watt"/>.
        /// </summary>
        public static Power FromWatts(QuantityValue value)
        {
            return new Power(value, PowerUnit.Watt);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PowerUnit" /> to <see cref="Power" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Power unit value.</returns>
        public static Power From(QuantityValue value, PowerUnit fromUnit)
        {
            return new Power(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Power Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Power Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Power, PowerUnit>(str, provider, From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse([NotNullWhen(true)]string? str, out Power result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse([NotNullWhen(true)]string? str, IFormatProvider? provider, out Power result)
        {
            return QuantityParser.Default.TryParse<Power, PowerUnit>(str, provider, From, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PowerUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static PowerUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse(str, Info.UnitInfos, provider).Value;
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider?,out UnitsNet.Units.PowerUnit)"/>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, out PowerUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, IFormatProvider? provider, out PowerUnit unit)
        {
            return UnitParser.Default.TryParse(str, Info, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Power operator -(Power right)
        {
            return new Power(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Power"/> from adding two <see cref="Power"/>.</summary>
        public static Power operator +(Power left, Power right)
        {
            return new Power(left.Value + right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Power"/> from subtracting two <see cref="Power"/>.</summary>
        public static Power operator -(Power left, Power right)
        {
            return new Power(left.Value - right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Power"/> from multiplying value and <see cref="Power"/>.</summary>
        public static Power operator *(QuantityValue left, Power right)
        {
            return new Power(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Power"/> from multiplying value and <see cref="Power"/>.</summary>
        public static Power operator *(Power left, QuantityValue right)
        {
            return new Power(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Power"/> from dividing <see cref="Power"/> by value.</summary>
        public static Power operator /(Power left, QuantityValue right)
        {
            return new Power(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Power"/> by <see cref="Power"/>.</summary>
        public static QuantityValue operator /(Power left, Power right)
        {
            return left.Watts / right.Watts;
        }

        #endregion

        #region Relational Operators

        /// <summary>Get <see cref="Area"/> from <see cref="Power"/> / <see cref="HeatFlux"/>.</summary>
        public static Area operator /(Power power, HeatFlux heatFlux)
        {
            return Area.FromSquareMeters(power.Watts / heatFlux.WattsPerSquareMeter);
        }

        /// <summary>Get <see cref="ElectricCurrent"/> from <see cref="Power"/> / <see cref="ElectricPotential"/>.</summary>
        public static ElectricCurrent operator /(Power power, ElectricPotential electricPotential)
        {
            return ElectricCurrent.FromAmperes(power.Watts / electricPotential.Volts);
        }

        /// <summary>Get <see cref="ElectricPotential"/> from <see cref="Power"/> / <see cref="ElectricCurrent"/>.</summary>
        public static ElectricPotential operator /(Power power, ElectricCurrent electricCurrent)
        {
            return ElectricPotential.FromVolts(power.Watts / electricCurrent.Amperes);
        }

        /// <summary>Get <see cref="Energy"/> from <see cref="Power"/> * <see cref="Duration"/>.</summary>
        public static Energy operator *(Power power, Duration duration)
        {
            return Energy.FromJoules(power.Watts * duration.Seconds);
        }

        /// <summary>Get <see cref="Energy"/> from <see cref="Power"/> / <see cref="Frequency"/>.</summary>
        public static Energy operator /(Power power, Frequency frequency)
        {
            return Energy.FromJoules(power.Watts / frequency.PerSecond);
        }

        /// <summary>Get <see cref="Force"/> from <see cref="Power"/> / <see cref="Speed"/>.</summary>
        public static Force operator /(Power power, Speed speed)
        {
            return Force.FromNewtons(power.Watts / speed.MetersPerSecond);
        }

        /// <summary>Get <see cref="Frequency"/> from <see cref="Power"/> / <see cref="Energy"/>.</summary>
        public static Frequency operator /(Power power, Energy energy)
        {
            return Frequency.FromPerSecond(power.Watts / energy.Joules);
        }

        /// <summary>Get <see cref="HeatFlux"/> from <see cref="Power"/> / <see cref="Area"/>.</summary>
        public static HeatFlux operator /(Power power, Area area)
        {
            return HeatFlux.FromWattsPerSquareMeter(power.Watts / area.SquareMeters);
        }

        /// <summary>Get <see cref="MassFlow"/> from <see cref="Power"/> * <see cref="BrakeSpecificFuelConsumption"/>.</summary>
        public static MassFlow operator *(Power power, BrakeSpecificFuelConsumption brakeSpecificFuelConsumption)
        {
            return MassFlow.FromKilogramsPerSecond(power.Watts * brakeSpecificFuelConsumption.KilogramsPerJoule);
        }

        /// <summary>Get <see cref="MassFlow"/> from <see cref="Power"/> / <see cref="SpecificEnergy"/>.</summary>
        public static MassFlow operator /(Power power, SpecificEnergy specificEnergy)
        {
            return MassFlow.FromKilogramsPerSecond(power.Watts / specificEnergy.JoulesPerKilogram);
        }

        /// <summary>Get <see cref="RotationalSpeed"/> from <see cref="Power"/> / <see cref="Torque"/>.</summary>
        public static RotationalSpeed operator /(Power power, Torque torque)
        {
            return RotationalSpeed.FromRadiansPerSecond(power.Watts / torque.NewtonMeters);
        }

        /// <summary>Get <see cref="SpecificEnergy"/> from <see cref="Power"/> / <see cref="MassFlow"/>.</summary>
        public static SpecificEnergy operator /(Power power, MassFlow massFlow)
        {
            return SpecificEnergy.FromJoulesPerKilogram(power.Watts / massFlow.KilogramsPerSecond);
        }

        /// <summary>Get <see cref="Speed"/> from <see cref="Power"/> / <see cref="Force"/>.</summary>
        public static Speed operator /(Power power, Force force)
        {
            return Speed.FromMetersPerSecond(power.Watts / force.Newtons);
        }

        /// <summary>Get <see cref="Torque"/> from <see cref="Power"/> / <see cref="RotationalSpeed"/>.</summary>
        public static Torque operator /(Power power, RotationalSpeed rotationalSpeed)
        {
            return Torque.FromNewtonMeters(power.Watts / rotationalSpeed.RadiansPerSecond);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Power left, Power right)
        {
            return left.Value <= right.As(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Power left, Power right)
        {
            return left.Value >= right.As(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Power left, Power right)
        {
            return left.Value < right.As(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Power left, Power right)
        {
            return left.Value > right.As(left.Unit);
        }

        /// <summary>Indicates strict equality of two <see cref="Power"/> quantities.</summary>
        public static bool operator ==(Power left, Power right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Power"/> quantities.</summary>
        public static bool operator !=(Power left, Power right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Power"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is not Power otherQuantity)
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Power"/> quantities.</summary>
        public bool Equals(Power other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Power.</returns>
        public override int GetHashCode()
        {
            return Comparison.GetHashCode(typeof(Power), this.As(BaseUnit));
        }
        
        /// <inheritdoc  cref="CompareTo(Power)" />
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        public int CompareTo(object? obj)
        {
            if (obj is not Power otherQuantity)
                throw obj is null ? new ArgumentNullException(nameof(obj)) : ExceptionHelper.CreateArgumentException<Power>(obj, nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>
        ///     Compares the current <see cref="Power"/> with another <see cref="Power"/> and returns an integer that indicates
        ///     whether the current instance precedes, follows, or occurs in the same position in the sort order as the other quantity, when converted to the same unit.
        /// </summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Power other)
        {
            return _value.CompareTo(other.As(this.Unit));
        }

        #endregion

        #region Conversion Methods (explicit implementations for netstandard2.0)

#if NETSTANDARD2_0
        QuantityValue IQuantity.As(Enum unit) => UnitConverter.Default.ConvertValue(Value, UnitKey.ForUnit(Unit), unit);

        IQuantity IQuantity.ToUnit(Enum unit) => UnitConverter.Default.ConvertTo(this, unit);

        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);

        IQuantity<PowerUnit> IQuantity<PowerUnit>.ToUnit(PowerUnit unit) => this.ToUnit(unit);

        IQuantity<PowerUnit> IQuantity<PowerUnit>.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);
#endif

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null, null);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TQuantity}(TQuantity, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Default.Format(this, format, provider);
        }

        #endregion

    }
}
