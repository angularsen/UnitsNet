//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToRotationalStiffness;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToRotationalStiffnessExtensionsTests
    {
        [Fact]
        public void NumberToCentinewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromCentinewtonMetersPerDegree(2), 2.CentinewtonMetersPerDegree);

        [Fact]
        public void NumberToCentinewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromCentinewtonMillimetersPerDegree(2), 2.CentinewtonMillimetersPerDegree);

        [Fact]
        public void NumberToCentinewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromCentinewtonMillimetersPerRadian(2), 2.CentinewtonMillimetersPerRadian);

        [Fact]
        public void NumberToDecanewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromDecanewtonMetersPerDegree(2), 2.DecanewtonMetersPerDegree);

        [Fact]
        public void NumberToDecanewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromDecanewtonMillimetersPerDegree(2), 2.DecanewtonMillimetersPerDegree);

        [Fact]
        public void NumberToDecanewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromDecanewtonMillimetersPerRadian(2), 2.DecanewtonMillimetersPerRadian);

        [Fact]
        public void NumberToDecinewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromDecinewtonMetersPerDegree(2), 2.DecinewtonMetersPerDegree);

        [Fact]
        public void NumberToDecinewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromDecinewtonMillimetersPerDegree(2), 2.DecinewtonMillimetersPerDegree);

        [Fact]
        public void NumberToDecinewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromDecinewtonMillimetersPerRadian(2), 2.DecinewtonMillimetersPerRadian);

        [Fact]
        public void NumberToKilonewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromKilonewtonMetersPerDegree(2), 2.KilonewtonMetersPerDegree);

        [Fact]
        public void NumberToKilonewtonMetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromKilonewtonMetersPerRadian(2), 2.KilonewtonMetersPerRadian);

        [Fact]
        public void NumberToKilonewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromKilonewtonMillimetersPerDegree(2), 2.KilonewtonMillimetersPerDegree);

        [Fact]
        public void NumberToKilonewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromKilonewtonMillimetersPerRadian(2), 2.KilonewtonMillimetersPerRadian);

        [Fact]
        public void NumberToKilopoundForceFeetPerDegreesTest() =>
            Assert.Equal(RotationalStiffness.FromKilopoundForceFeetPerDegrees(2), 2.KilopoundForceFeetPerDegrees);

        [Fact]
        public void NumberToMeganewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromMeganewtonMetersPerDegree(2), 2.MeganewtonMetersPerDegree);

        [Fact]
        public void NumberToMeganewtonMetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromMeganewtonMetersPerRadian(2), 2.MeganewtonMetersPerRadian);

        [Fact]
        public void NumberToMeganewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromMeganewtonMillimetersPerDegree(2), 2.MeganewtonMillimetersPerDegree);

        [Fact]
        public void NumberToMeganewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromMeganewtonMillimetersPerRadian(2), 2.MeganewtonMillimetersPerRadian);

        [Fact]
        public void NumberToMicronewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromMicronewtonMetersPerDegree(2), 2.MicronewtonMetersPerDegree);

        [Fact]
        public void NumberToMicronewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromMicronewtonMillimetersPerDegree(2), 2.MicronewtonMillimetersPerDegree);

        [Fact]
        public void NumberToMicronewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromMicronewtonMillimetersPerRadian(2), 2.MicronewtonMillimetersPerRadian);

        [Fact]
        public void NumberToMillinewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromMillinewtonMetersPerDegree(2), 2.MillinewtonMetersPerDegree);

        [Fact]
        public void NumberToMillinewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromMillinewtonMillimetersPerDegree(2), 2.MillinewtonMillimetersPerDegree);

        [Fact]
        public void NumberToMillinewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromMillinewtonMillimetersPerRadian(2), 2.MillinewtonMillimetersPerRadian);

        [Fact]
        public void NumberToNanonewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromNanonewtonMetersPerDegree(2), 2.NanonewtonMetersPerDegree);

        [Fact]
        public void NumberToNanonewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromNanonewtonMillimetersPerDegree(2), 2.NanonewtonMillimetersPerDegree);

        [Fact]
        public void NumberToNanonewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromNanonewtonMillimetersPerRadian(2), 2.NanonewtonMillimetersPerRadian);

        [Fact]
        public void NumberToNewtonMetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromNewtonMetersPerDegree(2), 2.NewtonMetersPerDegree);

        [Fact]
        public void NumberToNewtonMetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromNewtonMetersPerRadian(2), 2.NewtonMetersPerRadian);

        [Fact]
        public void NumberToNewtonMillimetersPerDegreeTest() =>
            Assert.Equal(RotationalStiffness.FromNewtonMillimetersPerDegree(2), 2.NewtonMillimetersPerDegree);

        [Fact]
        public void NumberToNewtonMillimetersPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromNewtonMillimetersPerRadian(2), 2.NewtonMillimetersPerRadian);

        [Fact]
        public void NumberToPoundForceFeetPerRadianTest() =>
            Assert.Equal(RotationalStiffness.FromPoundForceFeetPerRadian(2), 2.PoundForceFeetPerRadian);

        [Fact]
        public void NumberToPoundForceFeetPerDegreesTest() =>
            Assert.Equal(RotationalStiffness.FromPoundForceFeetPerDegrees(2), 2.PoundForceFeetPerDegrees);

    }
}
