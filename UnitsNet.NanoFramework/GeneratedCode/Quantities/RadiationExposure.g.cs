//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Radiation exposure is a measure of the ionization of air due to ionizing radiation from photons.
    /// </summary>
    public struct  RadiationExposure
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly RadiationExposureUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public RadiationExposureUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public RadiationExposure(double value, RadiationExposureUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of RadiationExposure, which is Second. All conversions go via this value.
        /// </summary>
        public static RadiationExposureUnit BaseUnit { get; } = RadiationExposureUnit.CoulombPerKilogram;

        /// <summary>
        /// Represents the largest possible value of RadiationExposure.
        /// </summary>
        public static RadiationExposure MaxValue { get; } = new RadiationExposure(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of RadiationExposure.
        /// </summary>
        public static RadiationExposure MinValue { get; } = new RadiationExposure(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static RadiationExposure Zero { get; } = new RadiationExposure(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationExposureUnit.CoulombPerKilogram"/>
        /// </summary>
        public double CoulombsPerKilogram => As(RadiationExposureUnit.CoulombPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationExposureUnit.MicrocoulombPerKilogram"/>
        /// </summary>
        public double MicrocoulombsPerKilogram => As(RadiationExposureUnit.MicrocoulombPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationExposureUnit.Microroentgen"/>
        /// </summary>
        public double Microroentgens => As(RadiationExposureUnit.Microroentgen);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationExposureUnit.MillicoulombPerKilogram"/>
        /// </summary>
        public double MillicoulombsPerKilogram => As(RadiationExposureUnit.MillicoulombPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationExposureUnit.Milliroentgen"/>
        /// </summary>
        public double Milliroentgens => As(RadiationExposureUnit.Milliroentgen);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationExposureUnit.NanocoulombPerKilogram"/>
        /// </summary>
        public double NanocoulombsPerKilogram => As(RadiationExposureUnit.NanocoulombPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationExposureUnit.PicocoulombPerKilogram"/>
        /// </summary>
        public double PicocoulombsPerKilogram => As(RadiationExposureUnit.PicocoulombPerKilogram);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationExposureUnit.Roentgen"/>
        /// </summary>
        public double Roentgens => As(RadiationExposureUnit.Roentgen);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="RadiationExposure"/> from <see cref="RadiationExposureUnit.CoulombPerKilogram"/>.
        /// </summary>
        public static RadiationExposure FromCoulombsPerKilogram(double coulombsperkilogram) => new RadiationExposure(coulombsperkilogram, RadiationExposureUnit.CoulombPerKilogram);

        /// <summary>
        ///     Creates a <see cref="RadiationExposure"/> from <see cref="RadiationExposureUnit.MicrocoulombPerKilogram"/>.
        /// </summary>
        public static RadiationExposure FromMicrocoulombsPerKilogram(double microcoulombsperkilogram) => new RadiationExposure(microcoulombsperkilogram, RadiationExposureUnit.MicrocoulombPerKilogram);

        /// <summary>
        ///     Creates a <see cref="RadiationExposure"/> from <see cref="RadiationExposureUnit.Microroentgen"/>.
        /// </summary>
        public static RadiationExposure FromMicroroentgens(double microroentgens) => new RadiationExposure(microroentgens, RadiationExposureUnit.Microroentgen);

        /// <summary>
        ///     Creates a <see cref="RadiationExposure"/> from <see cref="RadiationExposureUnit.MillicoulombPerKilogram"/>.
        /// </summary>
        public static RadiationExposure FromMillicoulombsPerKilogram(double millicoulombsperkilogram) => new RadiationExposure(millicoulombsperkilogram, RadiationExposureUnit.MillicoulombPerKilogram);

        /// <summary>
        ///     Creates a <see cref="RadiationExposure"/> from <see cref="RadiationExposureUnit.Milliroentgen"/>.
        /// </summary>
        public static RadiationExposure FromMilliroentgens(double milliroentgens) => new RadiationExposure(milliroentgens, RadiationExposureUnit.Milliroentgen);

        /// <summary>
        ///     Creates a <see cref="RadiationExposure"/> from <see cref="RadiationExposureUnit.NanocoulombPerKilogram"/>.
        /// </summary>
        public static RadiationExposure FromNanocoulombsPerKilogram(double nanocoulombsperkilogram) => new RadiationExposure(nanocoulombsperkilogram, RadiationExposureUnit.NanocoulombPerKilogram);

        /// <summary>
        ///     Creates a <see cref="RadiationExposure"/> from <see cref="RadiationExposureUnit.PicocoulombPerKilogram"/>.
        /// </summary>
        public static RadiationExposure FromPicocoulombsPerKilogram(double picocoulombsperkilogram) => new RadiationExposure(picocoulombsperkilogram, RadiationExposureUnit.PicocoulombPerKilogram);

        /// <summary>
        ///     Creates a <see cref="RadiationExposure"/> from <see cref="RadiationExposureUnit.Roentgen"/>.
        /// </summary>
        public static RadiationExposure FromRoentgens(double roentgens) => new RadiationExposure(roentgens, RadiationExposureUnit.Roentgen);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RadiationExposureUnit" /> to <see cref="RadiationExposure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>RadiationExposure unit value.</returns>
        public static RadiationExposure From(double value, RadiationExposureUnit fromUnit)
        {
            return new RadiationExposure(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(RadiationExposureUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this RadiationExposure to another RadiationExposure with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A RadiationExposure with the specified unit.</returns>
                public RadiationExposure ToUnit(RadiationExposureUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new RadiationExposure(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        RadiationExposureUnit.CoulombPerKilogram => _value,
                        RadiationExposureUnit.MicrocoulombPerKilogram => (_value) * 1e-6d,
                        RadiationExposureUnit.Microroentgen => (_value * 2.58e-4) * 1e-6d,
                        RadiationExposureUnit.MillicoulombPerKilogram => (_value) * 1e-3d,
                        RadiationExposureUnit.Milliroentgen => (_value * 2.58e-4) * 1e-3d,
                        RadiationExposureUnit.NanocoulombPerKilogram => (_value) * 1e-9d,
                        RadiationExposureUnit.PicocoulombPerKilogram => (_value) * 1e-12d,
                        RadiationExposureUnit.Roentgen => _value * 2.58e-4,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(RadiationExposureUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        RadiationExposureUnit.CoulombPerKilogram => baseUnitValue,
                        RadiationExposureUnit.MicrocoulombPerKilogram => (baseUnitValue) / 1e-6d,
                        RadiationExposureUnit.Microroentgen => (baseUnitValue / 2.58e-4) / 1e-6d,
                        RadiationExposureUnit.MillicoulombPerKilogram => (baseUnitValue) / 1e-3d,
                        RadiationExposureUnit.Milliroentgen => (baseUnitValue / 2.58e-4) / 1e-3d,
                        RadiationExposureUnit.NanocoulombPerKilogram => (baseUnitValue) / 1e-9d,
                        RadiationExposureUnit.PicocoulombPerKilogram => (baseUnitValue) / 1e-12d,
                        RadiationExposureUnit.Roentgen => baseUnitValue / 2.58e-4,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

