//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToVolume
{
    /// <summary>
    /// A number to Volume Extensions
    /// </summary>
    public static class NumberToVolumeExtensions
    {
        /// <inheritdoc cref="Volume.FromAcreFeet(QuantityValue)" />
        public static Volume AcreFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromAcreFeet(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromAcreFeet(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromAuTablespoons(QuantityValue)" />
        public static Volume AuTablespoons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromAuTablespoons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromAuTablespoons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromBoardFeet(QuantityValue)" />
        public static Volume BoardFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromBoardFeet(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromBoardFeet(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCentiliters(QuantityValue)" />
        public static Volume Centiliters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCentiliters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCentiliters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicCentimeters(QuantityValue)" />
        public static Volume CubicCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicCentimeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicCentimeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicDecimeters(QuantityValue)" />
        public static Volume CubicDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicDecimeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicDecimeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicFeet(QuantityValue)" />
        public static Volume CubicFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicFeet(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicFeet(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicHectometers(QuantityValue)" />
        public static Volume CubicHectometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicHectometers(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicHectometers(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicInches(QuantityValue)" />
        public static Volume CubicInches<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicInches(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicInches(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicKilometers(QuantityValue)" />
        public static Volume CubicKilometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicKilometers(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicKilometers(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicMeters(QuantityValue)" />
        public static Volume CubicMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicMeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicMeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicMicrometers(QuantityValue)" />
        public static Volume CubicMicrometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicMicrometers(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicMicrometers(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicMiles(QuantityValue)" />
        public static Volume CubicMiles<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicMiles(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicMiles(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicMillimeters(QuantityValue)" />
        public static Volume CubicMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicMillimeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicMillimeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromCubicYards(QuantityValue)" />
        public static Volume CubicYards<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromCubicYards(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromCubicYards(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromDecaliters(QuantityValue)" />
        public static Volume Decaliters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromDecaliters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromDecaliters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromDecausGallons(QuantityValue)" />
        public static Volume DecausGallons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromDecausGallons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromDecausGallons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromDeciliters(QuantityValue)" />
        public static Volume Deciliters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromDeciliters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromDeciliters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromDeciusGallons(QuantityValue)" />
        public static Volume DeciusGallons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromDeciusGallons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromDeciusGallons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromHectocubicFeet(QuantityValue)" />
        public static Volume HectocubicFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromHectocubicFeet(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromHectocubicFeet(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromHectocubicMeters(QuantityValue)" />
        public static Volume HectocubicMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromHectocubicMeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromHectocubicMeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromHectoliters(QuantityValue)" />
        public static Volume Hectoliters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromHectoliters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromHectoliters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromHectousGallons(QuantityValue)" />
        public static Volume HectousGallons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromHectousGallons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromHectousGallons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromImperialBeerBarrels(QuantityValue)" />
        public static Volume ImperialBeerBarrels<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromImperialBeerBarrels(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromImperialBeerBarrels(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromImperialGallons(QuantityValue)" />
        public static Volume ImperialGallons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromImperialGallons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromImperialGallons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromImperialOunces(QuantityValue)" />
        public static Volume ImperialOunces<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromImperialOunces(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromImperialOunces(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromImperialPints(QuantityValue)" />
        public static Volume ImperialPints<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromImperialPints(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromImperialPints(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromImperialQuarts(QuantityValue)" />
        public static Volume ImperialQuarts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromImperialQuarts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromImperialQuarts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromKilocubicFeet(QuantityValue)" />
        public static Volume KilocubicFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromKilocubicFeet(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromKilocubicFeet(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromKilocubicMeters(QuantityValue)" />
        public static Volume KilocubicMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromKilocubicMeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromKilocubicMeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromKiloimperialGallons(QuantityValue)" />
        public static Volume KiloimperialGallons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromKiloimperialGallons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromKiloimperialGallons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromKiloliters(QuantityValue)" />
        public static Volume Kiloliters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromKiloliters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromKiloliters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromKilousGallons(QuantityValue)" />
        public static Volume KilousGallons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromKilousGallons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromKilousGallons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromLiters(QuantityValue)" />
        public static Volume Liters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromLiters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromLiters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromMegacubicFeet(QuantityValue)" />
        public static Volume MegacubicFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromMegacubicFeet(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromMegacubicFeet(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromMegaimperialGallons(QuantityValue)" />
        public static Volume MegaimperialGallons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromMegaimperialGallons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromMegaimperialGallons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromMegaliters(QuantityValue)" />
        public static Volume Megaliters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromMegaliters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromMegaliters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromMegausGallons(QuantityValue)" />
        public static Volume MegausGallons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromMegausGallons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromMegausGallons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromMetricCups(QuantityValue)" />
        public static Volume MetricCups<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromMetricCups(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromMetricCups(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromMetricTablespoons(QuantityValue)" />
        public static Volume MetricTablespoons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromMetricTablespoons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromMetricTablespoons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromMetricTeaspoons(QuantityValue)" />
        public static Volume MetricTeaspoons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromMetricTeaspoons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromMetricTeaspoons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromMicroliters(QuantityValue)" />
        public static Volume Microliters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromMicroliters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromMicroliters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromMilliliters(QuantityValue)" />
        public static Volume Milliliters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromMilliliters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromMilliliters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromNanoliters(QuantityValue)" />
        public static Volume Nanoliters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromNanoliters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromNanoliters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromOilBarrels(QuantityValue)" />
        public static Volume OilBarrels<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromOilBarrels(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromOilBarrels(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUkTablespoons(QuantityValue)" />
        public static Volume UkTablespoons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUkTablespoons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUkTablespoons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUsBeerBarrels(QuantityValue)" />
        public static Volume UsBeerBarrels<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUsBeerBarrels(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUsBeerBarrels(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUsCustomaryCups(QuantityValue)" />
        public static Volume UsCustomaryCups<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUsCustomaryCups(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUsCustomaryCups(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUsGallons(QuantityValue)" />
        public static Volume UsGallons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUsGallons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUsGallons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUsLegalCups(QuantityValue)" />
        public static Volume UsLegalCups<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUsLegalCups(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUsLegalCups(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUsOunces(QuantityValue)" />
        public static Volume UsOunces<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUsOunces(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUsOunces(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUsPints(QuantityValue)" />
        public static Volume UsPints<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUsPints(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUsPints(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUsQuarts(QuantityValue)" />
        public static Volume UsQuarts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUsQuarts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUsQuarts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUsTablespoons(QuantityValue)" />
        public static Volume UsTablespoons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUsTablespoons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUsTablespoons(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Volume.FromUsTeaspoons(QuantityValue)" />
        public static Volume UsTeaspoons<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Volume.FromUsTeaspoons(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Volume.FromUsTeaspoons(value.ToQuantityValue());
#endif

    }
}
