//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToTemperatureDelta
{
    /// <summary>
    /// A number to TemperatureDelta Extensions
    /// </summary>
    public static class NumberToTemperatureDeltaExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="TemperatureDelta.FromDegreesCelsius(double)" />
            public TemperatureDelta DegreesCelsius
#if NET7_0_OR_GREATER
                => TemperatureDelta.FromDegreesCelsius(double.CreateChecked(value));
#else
                => TemperatureDelta.FromDegreesCelsius(value.ToDouble(null));
#endif

            /// <inheritdoc cref="TemperatureDelta.FromDegreesDelisle(double)" />
            public TemperatureDelta DegreesDelisle
#if NET7_0_OR_GREATER
                => TemperatureDelta.FromDegreesDelisle(double.CreateChecked(value));
#else
                => TemperatureDelta.FromDegreesDelisle(value.ToDouble(null));
#endif

            /// <inheritdoc cref="TemperatureDelta.FromDegreesFahrenheit(double)" />
            public TemperatureDelta DegreesFahrenheit
#if NET7_0_OR_GREATER
                => TemperatureDelta.FromDegreesFahrenheit(double.CreateChecked(value));
#else
                => TemperatureDelta.FromDegreesFahrenheit(value.ToDouble(null));
#endif

            /// <inheritdoc cref="TemperatureDelta.FromDegreesNewton(double)" />
            public TemperatureDelta DegreesNewton
#if NET7_0_OR_GREATER
                => TemperatureDelta.FromDegreesNewton(double.CreateChecked(value));
#else
                => TemperatureDelta.FromDegreesNewton(value.ToDouble(null));
#endif

            /// <inheritdoc cref="TemperatureDelta.FromDegreesRankine(double)" />
            public TemperatureDelta DegreesRankine
#if NET7_0_OR_GREATER
                => TemperatureDelta.FromDegreesRankine(double.CreateChecked(value));
#else
                => TemperatureDelta.FromDegreesRankine(value.ToDouble(null));
#endif

            /// <inheritdoc cref="TemperatureDelta.FromDegreesReaumur(double)" />
            public TemperatureDelta DegreesReaumur
#if NET7_0_OR_GREATER
                => TemperatureDelta.FromDegreesReaumur(double.CreateChecked(value));
#else
                => TemperatureDelta.FromDegreesReaumur(value.ToDouble(null));
#endif

            /// <inheritdoc cref="TemperatureDelta.FromDegreesRoemer(double)" />
            public TemperatureDelta DegreesRoemer
#if NET7_0_OR_GREATER
                => TemperatureDelta.FromDegreesRoemer(double.CreateChecked(value));
#else
                => TemperatureDelta.FromDegreesRoemer(value.ToDouble(null));
#endif

            /// <inheritdoc cref="TemperatureDelta.FromKelvins(double)" />
            public TemperatureDelta Kelvins
#if NET7_0_OR_GREATER
                => TemperatureDelta.FromKelvins(double.CreateChecked(value));
#else
                => TemperatureDelta.FromKelvins(value.ToDouble(null));
#endif

            /// <inheritdoc cref="TemperatureDelta.FromMillidegreesCelsius(double)" />
            public TemperatureDelta MillidegreesCelsius
#if NET7_0_OR_GREATER
                => TemperatureDelta.FromMillidegreesCelsius(double.CreateChecked(value));
#else
                => TemperatureDelta.FromMillidegreesCelsius(value.ToDouble(null));
#endif

        }
    }
}
