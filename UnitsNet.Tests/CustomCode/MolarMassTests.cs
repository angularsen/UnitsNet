//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated (once) by \generate-code.bat, but will not be
//     regenerated when it already exists. The purpose of creating this file is to make
//     it easier to remember to implement all the unit conversion test cases.
//
//     Whenever a new unit is added to this quantity and \generate-code.bat is run,
//     the base test class will get a new abstract property and cause a compile error
//     in this derived class, reminding the developer to implement the test case
//     for the new unit.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run GeneratUnits.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.


using System;
using Xunit;

namespace UnitsNet.Tests.CustomCode
{
    public class MolarMassTests : MolarMassTestsBase
    {
        protected override double CentigramsPerMoleInOneKilogramPerMole => 1e5;
        protected override double DecagramsPerMoleInOneKilogramPerMole => 1e2;
        protected override double DecigramsPerMoleInOneKilogramPerMole => 1e4;
        protected override double GramsPerMoleInOneKilogramPerMole => 1e3;
        protected override double HectogramsPerMoleInOneKilogramPerMole => 10;
        protected override double KilogramsPerMoleInOneKilogramPerMole => 1;
        protected override double KilopoundsPerMoleInOneKilogramPerMole => 2.2046226218487757e-3;
        protected override double MegapoundsPerMoleInOneKilogramPerMole => 2.2046226218487757e-6;
        protected override double MicrogramsPerMoleInOneKilogramPerMole => 1e9;
        protected override double MilligramsPerMoleInOneKilogramPerMole => 1e6;
        protected override double NanogramsPerMoleTolerance => 1e-3;
        protected override double NanogramsPerMoleInOneKilogramPerMole => 1e12;
        protected override double PoundsPerMoleInOneKilogramPerMole => 2.2046226218487757;
        protected override double KilogramsPerKilomoleInOneKilogramPerMole => 1e3;

        [Fact]
        public void MolarMassTimesAmountOfSubstanceEqualsMass()
        {
            Mass mass = MolarMass.FromKilogramsPerMole(2) * AmountOfSubstance.FromMoles(5);
            Assert.Equal(Mass.FromKilograms(10), mass);
        }

        [Fact]
        public void MolarMassTimesMolarityEqualsMassConcentration()
        {
            MassConcentration massConcentration = MolarMass.FromKilogramsPerMole(2) * Molarity.FromMolesPerCubicMeter(5);
            Assert.Equal(MassConcentration.FromKilogramsPerCubicMeter(10), massConcentration);
        }

        [Fact]
        public void MolarMassTimesMolarFlowEqualsMassFlow()
        {
            MassFlow massFlow = MolarMass.FromKilogramsPerMole(2) * MolarFlow.FromMolesPerSecond(5);
            Assert.Equal(MassFlow.FromKilogramsPerSecond(10), massFlow);
        }
    }
}
