//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Mass.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MassTestsBase : QuantityTestsBase
    {
        protected abstract double CentigramsInOneKilogram { get; }
        protected abstract double DecagramsInOneKilogram { get; }
        protected abstract double DecigramsInOneKilogram { get; }
        protected abstract double EarthMassesInOneKilogram { get; }
        protected abstract double FemtogramsInOneKilogram { get; }
        protected abstract double GrainsInOneKilogram { get; }
        protected abstract double GramsInOneKilogram { get; }
        protected abstract double HectogramsInOneKilogram { get; }
        protected abstract double KilogramsInOneKilogram { get; }
        protected abstract double KilopoundsInOneKilogram { get; }
        protected abstract double KilotonnesInOneKilogram { get; }
        protected abstract double LongHundredweightInOneKilogram { get; }
        protected abstract double LongTonsInOneKilogram { get; }
        protected abstract double MegapoundsInOneKilogram { get; }
        protected abstract double MegatonnesInOneKilogram { get; }
        protected abstract double MicrogramsInOneKilogram { get; }
        protected abstract double MilligramsInOneKilogram { get; }
        protected abstract double NanogramsInOneKilogram { get; }
        protected abstract double OuncesInOneKilogram { get; }
        protected abstract double PicogramsInOneKilogram { get; }
        protected abstract double PoundsInOneKilogram { get; }
        protected abstract double ShortHundredweightInOneKilogram { get; }
        protected abstract double ShortTonsInOneKilogram { get; }
        protected abstract double SlugsInOneKilogram { get; }
        protected abstract double SolarMassesInOneKilogram { get; }
        protected abstract double StoneInOneKilogram { get; }
        protected abstract double TonnesInOneKilogram { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsTolerance { get { return 1e-5; } }
        protected virtual double DecagramsTolerance { get { return 1e-5; } }
        protected virtual double DecigramsTolerance { get { return 1e-5; } }
        protected virtual double EarthMassesTolerance { get { return 1e-5; } }
        protected virtual double FemtogramsTolerance { get { return 1e-5; } }
        protected virtual double GrainsTolerance { get { return 1e-5; } }
        protected virtual double GramsTolerance { get { return 1e-5; } }
        protected virtual double HectogramsTolerance { get { return 1e-5; } }
        protected virtual double KilogramsTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsTolerance { get { return 1e-5; } }
        protected virtual double KilotonnesTolerance { get { return 1e-5; } }
        protected virtual double LongHundredweightTolerance { get { return 1e-5; } }
        protected virtual double LongTonsTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsTolerance { get { return 1e-5; } }
        protected virtual double MegatonnesTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsTolerance { get { return 1e-5; } }
        protected virtual double MilligramsTolerance { get { return 1e-5; } }
        protected virtual double NanogramsTolerance { get { return 1e-5; } }
        protected virtual double OuncesTolerance { get { return 1e-5; } }
        protected virtual double PicogramsTolerance { get { return 1e-5; } }
        protected virtual double PoundsTolerance { get { return 1e-5; } }
        protected virtual double ShortHundredweightTolerance { get { return 1e-5; } }
        protected virtual double ShortTonsTolerance { get { return 1e-5; } }
        protected virtual double SlugsTolerance { get { return 1e-5; } }
        protected virtual double SolarMassesTolerance { get { return 1e-5; } }
        protected virtual double StoneTolerance { get { return 1e-5; } }
        protected virtual double TonnesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MassUnit unit)
        {
            return unit switch
            {
                MassUnit.Centigram => (CentigramsInOneKilogram, CentigramsTolerance),
                MassUnit.Decagram => (DecagramsInOneKilogram, DecagramsTolerance),
                MassUnit.Decigram => (DecigramsInOneKilogram, DecigramsTolerance),
                MassUnit.EarthMass => (EarthMassesInOneKilogram, EarthMassesTolerance),
                MassUnit.Femtogram => (FemtogramsInOneKilogram, FemtogramsTolerance),
                MassUnit.Grain => (GrainsInOneKilogram, GrainsTolerance),
                MassUnit.Gram => (GramsInOneKilogram, GramsTolerance),
                MassUnit.Hectogram => (HectogramsInOneKilogram, HectogramsTolerance),
                MassUnit.Kilogram => (KilogramsInOneKilogram, KilogramsTolerance),
                MassUnit.Kilopound => (KilopoundsInOneKilogram, KilopoundsTolerance),
                MassUnit.Kilotonne => (KilotonnesInOneKilogram, KilotonnesTolerance),
                MassUnit.LongHundredweight => (LongHundredweightInOneKilogram, LongHundredweightTolerance),
                MassUnit.LongTon => (LongTonsInOneKilogram, LongTonsTolerance),
                MassUnit.Megapound => (MegapoundsInOneKilogram, MegapoundsTolerance),
                MassUnit.Megatonne => (MegatonnesInOneKilogram, MegatonnesTolerance),
                MassUnit.Microgram => (MicrogramsInOneKilogram, MicrogramsTolerance),
                MassUnit.Milligram => (MilligramsInOneKilogram, MilligramsTolerance),
                MassUnit.Nanogram => (NanogramsInOneKilogram, NanogramsTolerance),
                MassUnit.Ounce => (OuncesInOneKilogram, OuncesTolerance),
                MassUnit.Picogram => (PicogramsInOneKilogram, PicogramsTolerance),
                MassUnit.Pound => (PoundsInOneKilogram, PoundsTolerance),
                MassUnit.ShortHundredweight => (ShortHundredweightInOneKilogram, ShortHundredweightTolerance),
                MassUnit.ShortTon => (ShortTonsInOneKilogram, ShortTonsTolerance),
                MassUnit.Slug => (SlugsInOneKilogram, SlugsTolerance),
                MassUnit.SolarMass => (SolarMassesInOneKilogram, SolarMassesTolerance),
                MassUnit.Stone => (StoneInOneKilogram, StoneTolerance),
                MassUnit.Tonne => (TonnesInOneKilogram, TonnesTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MassUnit.Centigram },
            new object[] { MassUnit.Decagram },
            new object[] { MassUnit.Decigram },
            new object[] { MassUnit.EarthMass },
            new object[] { MassUnit.Femtogram },
            new object[] { MassUnit.Grain },
            new object[] { MassUnit.Gram },
            new object[] { MassUnit.Hectogram },
            new object[] { MassUnit.Kilogram },
            new object[] { MassUnit.Kilopound },
            new object[] { MassUnit.Kilotonne },
            new object[] { MassUnit.LongHundredweight },
            new object[] { MassUnit.LongTon },
            new object[] { MassUnit.Megapound },
            new object[] { MassUnit.Megatonne },
            new object[] { MassUnit.Microgram },
            new object[] { MassUnit.Milligram },
            new object[] { MassUnit.Nanogram },
            new object[] { MassUnit.Ounce },
            new object[] { MassUnit.Picogram },
            new object[] { MassUnit.Pound },
            new object[] { MassUnit.ShortHundredweight },
            new object[] { MassUnit.ShortTon },
            new object[] { MassUnit.Slug },
            new object[] { MassUnit.SolarMass },
            new object[] { MassUnit.Stone },
            new object[] { MassUnit.Tonne },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Mass();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MassUnit.Kilogram, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Mass(double.PositiveInfinity, MassUnit.Kilogram));
            var exception2 = Record.Exception(() => new Mass(double.NegativeInfinity, MassUnit.Kilogram));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Mass(double.NaN, MassUnit.Kilogram));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Mass(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Mass(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Mass(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Mass_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            MassUnit[] unitsOrderedByName = EnumHelper.GetValues<MassUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Mass(1, MassUnit.Kilogram);

            QuantityInfo<Mass, MassUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Mass", quantityInfo.Name);
            Assert.Equal(Mass.Zero, quantityInfo.Zero);
            Assert.Equal(Mass.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Mass.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<MassUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void KilogramToMassUnits()
        {
            Mass kilogram = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(CentigramsInOneKilogram, kilogram.Centigrams, CentigramsTolerance);
            AssertEx.EqualTolerance(DecagramsInOneKilogram, kilogram.Decagrams, DecagramsTolerance);
            AssertEx.EqualTolerance(DecigramsInOneKilogram, kilogram.Decigrams, DecigramsTolerance);
            AssertEx.EqualTolerance(EarthMassesInOneKilogram, kilogram.EarthMasses, EarthMassesTolerance);
            AssertEx.EqualTolerance(FemtogramsInOneKilogram, kilogram.Femtograms, FemtogramsTolerance);
            AssertEx.EqualTolerance(GrainsInOneKilogram, kilogram.Grains, GrainsTolerance);
            AssertEx.EqualTolerance(GramsInOneKilogram, kilogram.Grams, GramsTolerance);
            AssertEx.EqualTolerance(HectogramsInOneKilogram, kilogram.Hectograms, HectogramsTolerance);
            AssertEx.EqualTolerance(KilogramsInOneKilogram, kilogram.Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(KilopoundsInOneKilogram, kilogram.Kilopounds, KilopoundsTolerance);
            AssertEx.EqualTolerance(KilotonnesInOneKilogram, kilogram.Kilotonnes, KilotonnesTolerance);
            AssertEx.EqualTolerance(LongHundredweightInOneKilogram, kilogram.LongHundredweight, LongHundredweightTolerance);
            AssertEx.EqualTolerance(LongTonsInOneKilogram, kilogram.LongTons, LongTonsTolerance);
            AssertEx.EqualTolerance(MegapoundsInOneKilogram, kilogram.Megapounds, MegapoundsTolerance);
            AssertEx.EqualTolerance(MegatonnesInOneKilogram, kilogram.Megatonnes, MegatonnesTolerance);
            AssertEx.EqualTolerance(MicrogramsInOneKilogram, kilogram.Micrograms, MicrogramsTolerance);
            AssertEx.EqualTolerance(MilligramsInOneKilogram, kilogram.Milligrams, MilligramsTolerance);
            AssertEx.EqualTolerance(NanogramsInOneKilogram, kilogram.Nanograms, NanogramsTolerance);
            AssertEx.EqualTolerance(OuncesInOneKilogram, kilogram.Ounces, OuncesTolerance);
            AssertEx.EqualTolerance(PicogramsInOneKilogram, kilogram.Picograms, PicogramsTolerance);
            AssertEx.EqualTolerance(PoundsInOneKilogram, kilogram.Pounds, PoundsTolerance);
            AssertEx.EqualTolerance(ShortHundredweightInOneKilogram, kilogram.ShortHundredweight, ShortHundredweightTolerance);
            AssertEx.EqualTolerance(ShortTonsInOneKilogram, kilogram.ShortTons, ShortTonsTolerance);
            AssertEx.EqualTolerance(SlugsInOneKilogram, kilogram.Slugs, SlugsTolerance);
            AssertEx.EqualTolerance(SolarMassesInOneKilogram, kilogram.SolarMasses, SolarMassesTolerance);
            AssertEx.EqualTolerance(StoneInOneKilogram, kilogram.Stone, StoneTolerance);
            AssertEx.EqualTolerance(TonnesInOneKilogram, kilogram.Tonnes, TonnesTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<MassUnit>(), unit =>
            {
                var quantity = Mass.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromKilograms_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Mass.FromKilograms(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Mass.FromKilograms(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromKilograms_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Mass.FromKilograms(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var kilogram = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(CentigramsInOneKilogram, kilogram.As(MassUnit.Centigram), CentigramsTolerance);
            AssertEx.EqualTolerance(DecagramsInOneKilogram, kilogram.As(MassUnit.Decagram), DecagramsTolerance);
            AssertEx.EqualTolerance(DecigramsInOneKilogram, kilogram.As(MassUnit.Decigram), DecigramsTolerance);
            AssertEx.EqualTolerance(EarthMassesInOneKilogram, kilogram.As(MassUnit.EarthMass), EarthMassesTolerance);
            AssertEx.EqualTolerance(FemtogramsInOneKilogram, kilogram.As(MassUnit.Femtogram), FemtogramsTolerance);
            AssertEx.EqualTolerance(GrainsInOneKilogram, kilogram.As(MassUnit.Grain), GrainsTolerance);
            AssertEx.EqualTolerance(GramsInOneKilogram, kilogram.As(MassUnit.Gram), GramsTolerance);
            AssertEx.EqualTolerance(HectogramsInOneKilogram, kilogram.As(MassUnit.Hectogram), HectogramsTolerance);
            AssertEx.EqualTolerance(KilogramsInOneKilogram, kilogram.As(MassUnit.Kilogram), KilogramsTolerance);
            AssertEx.EqualTolerance(KilopoundsInOneKilogram, kilogram.As(MassUnit.Kilopound), KilopoundsTolerance);
            AssertEx.EqualTolerance(KilotonnesInOneKilogram, kilogram.As(MassUnit.Kilotonne), KilotonnesTolerance);
            AssertEx.EqualTolerance(LongHundredweightInOneKilogram, kilogram.As(MassUnit.LongHundredweight), LongHundredweightTolerance);
            AssertEx.EqualTolerance(LongTonsInOneKilogram, kilogram.As(MassUnit.LongTon), LongTonsTolerance);
            AssertEx.EqualTolerance(MegapoundsInOneKilogram, kilogram.As(MassUnit.Megapound), MegapoundsTolerance);
            AssertEx.EqualTolerance(MegatonnesInOneKilogram, kilogram.As(MassUnit.Megatonne), MegatonnesTolerance);
            AssertEx.EqualTolerance(MicrogramsInOneKilogram, kilogram.As(MassUnit.Microgram), MicrogramsTolerance);
            AssertEx.EqualTolerance(MilligramsInOneKilogram, kilogram.As(MassUnit.Milligram), MilligramsTolerance);
            AssertEx.EqualTolerance(NanogramsInOneKilogram, kilogram.As(MassUnit.Nanogram), NanogramsTolerance);
            AssertEx.EqualTolerance(OuncesInOneKilogram, kilogram.As(MassUnit.Ounce), OuncesTolerance);
            AssertEx.EqualTolerance(PicogramsInOneKilogram, kilogram.As(MassUnit.Picogram), PicogramsTolerance);
            AssertEx.EqualTolerance(PoundsInOneKilogram, kilogram.As(MassUnit.Pound), PoundsTolerance);
            AssertEx.EqualTolerance(ShortHundredweightInOneKilogram, kilogram.As(MassUnit.ShortHundredweight), ShortHundredweightTolerance);
            AssertEx.EqualTolerance(ShortTonsInOneKilogram, kilogram.As(MassUnit.ShortTon), ShortTonsTolerance);
            AssertEx.EqualTolerance(SlugsInOneKilogram, kilogram.As(MassUnit.Slug), SlugsTolerance);
            AssertEx.EqualTolerance(SolarMassesInOneKilogram, kilogram.As(MassUnit.SolarMass), SolarMassesTolerance);
            AssertEx.EqualTolerance(StoneInOneKilogram, kilogram.As(MassUnit.Stone), StoneTolerance);
            AssertEx.EqualTolerance(TonnesInOneKilogram, kilogram.As(MassUnit.Tonne), TonnesTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Mass.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Mass(value: 1, unit: Mass.BaseUnit);
            var expectedValue = quantity.As(Mass.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Mass(value: 1, unit: Mass.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Mass(value: 1, unit: Mass.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Mass(value: 1, unit: Mass.BaseUnit);
            var expectedUnit = Mass.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Mass quantityToConvert = quantity;

                Mass convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<MassUnit> quantityToConvert = quantity;

                IQuantity<MassUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Mass(value: 1, unit: Mass.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<MassUnit> quantity = new Mass(value: 1, unit: Mass.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Mass(value: 1, unit: Mass.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Mass(value: 1, unit: Mass.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<MassUnit> quantity = new Mass(value: 1, unit: Mass.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Mass(value: 1, unit: Mass.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cg", MassUnit.Centigram, 4.2)]
        [InlineData("en-US", "4.2 dag", MassUnit.Decagram, 4.2)]
        [InlineData("en-US", "4.2 dg", MassUnit.Decigram, 4.2)]
        [InlineData("en-US", "4.2 em", MassUnit.EarthMass, 4.2)]
        [InlineData("en-US", "4.2 fg", MassUnit.Femtogram, 4.2)]
        [InlineData("en-US", "4.2 gr", MassUnit.Grain, 4.2)]
        [InlineData("en-US", "4.2 g", MassUnit.Gram, 4.2)]
        [InlineData("en-US", "4.2 hg", MassUnit.Hectogram, 4.2)]
        [InlineData("en-US", "4.2 kg", MassUnit.Kilogram, 4.2)]
        [InlineData("en-US", "4.2 klb", MassUnit.Kilopound, 4.2)]
        [InlineData("en-US", "4.2 klbs", MassUnit.Kilopound, 4.2)]
        [InlineData("en-US", "4.2 klbm", MassUnit.Kilopound, 4.2)]
        [InlineData("en-US", "4.2 kt", MassUnit.Kilotonne, 4.2)]
        [InlineData("en-US", "4.2 long tn", MassUnit.LongTon, 4.2)]
        [InlineData("en-US", "4.2 Mlb", MassUnit.Megapound, 4.2)]
        [InlineData("en-US", "4.2 Mlbs", MassUnit.Megapound, 4.2)]
        [InlineData("en-US", "4.2 Mlbm", MassUnit.Megapound, 4.2)]
        [InlineData("en-US", "4.2 Mt", MassUnit.Megatonne, 4.2)]
        [InlineData("en-US", "4.2 µg", MassUnit.Microgram, 4.2)]
        [InlineData("en-US", "4.2 mg", MassUnit.Milligram, 4.2)]
        [InlineData("en-US", "4.2 ng", MassUnit.Nanogram, 4.2)]
        [InlineData("en-US", "4.2 oz", MassUnit.Ounce, 4.2)]
        [InlineData("en-US", "4.2 pg", MassUnit.Picogram, 4.2)]
        [InlineData("en-US", "4.2 lb", MassUnit.Pound, 4.2)]
        [InlineData("en-US", "4.2 lbs", MassUnit.Pound, 4.2)]
        [InlineData("en-US", "4.2 lbm", MassUnit.Pound, 4.2)]
        [InlineData("en-US", "4.2 t (short)", MassUnit.ShortTon, 4.2)]
        [InlineData("en-US", "4.2 short tn", MassUnit.ShortTon, 4.2)]
        [InlineData("en-US", "4.2 ST", MassUnit.ShortTon, 4.2)]
        [InlineData("en-US", "4.2 slug", MassUnit.Slug, 4.2)]
        [InlineData("en-US", "4.2 M☉", MassUnit.SolarMass, 4.2)]
        [InlineData("en-US", "4.2 M⊙", MassUnit.SolarMass, 4.2)]
        [InlineData("en-US", "4.2 st", MassUnit.Stone, 4.2)]
        [InlineData("en-US", "4.2 t", MassUnit.Tonne, 4.2)]
        [InlineData("ru-RU", "4,2 сг", MassUnit.Centigram, 4.2)]
        [InlineData("ru-RU", "4,2 даг", MassUnit.Decagram, 4.2)]
        [InlineData("ru-RU", "4,2 дг", MassUnit.Decigram, 4.2)]
        [InlineData("ru-RU", "4,2 фг", MassUnit.Femtogram, 4.2)]
        [InlineData("ru-RU", "4,2 г", MassUnit.Gram, 4.2)]
        [InlineData("ru-RU", "4,2 гг", MassUnit.Hectogram, 4.2)]
        [InlineData("ru-RU", "4,2 кг", MassUnit.Kilogram, 4.2)]
        [InlineData("ru-RU", "4,2 кфунт", MassUnit.Kilopound, 4.2)]
        [InlineData("ru-RU", "4,2 кт", MassUnit.Kilotonne, 4.2)]
        [InlineData("ru-RU", "4,2 тонна большая", MassUnit.LongTon, 4.2)]
        [InlineData("ru-RU", "4,2 Мфунт", MassUnit.Megapound, 4.2)]
        [InlineData("ru-RU", "4,2 Мт", MassUnit.Megatonne, 4.2)]
        [InlineData("ru-RU", "4,2 мкг", MassUnit.Microgram, 4.2)]
        [InlineData("ru-RU", "4,2 мг", MassUnit.Milligram, 4.2)]
        [InlineData("ru-RU", "4,2 нг", MassUnit.Nanogram, 4.2)]
        [InlineData("ru-RU", "4,2 пг", MassUnit.Picogram, 4.2)]
        [InlineData("ru-RU", "4,2 фунт", MassUnit.Pound, 4.2)]
        [InlineData("ru-RU", "4,2 тонна малая", MassUnit.ShortTon, 4.2)]
        [InlineData("ru-RU", "4,2 т", MassUnit.Tonne, 4.2)]
        [InlineData("zh-CN", "4.2 厘克", MassUnit.Centigram, 4.2)]
        [InlineData("zh-CN", "4.2 十克", MassUnit.Decagram, 4.2)]
        [InlineData("zh-CN", "4.2 分克", MassUnit.Decigram, 4.2)]
        [InlineData("zh-CN", "4.2 飞克", MassUnit.Femtogram, 4.2)]
        [InlineData("zh-CN", "4.2 克", MassUnit.Gram, 4.2)]
        [InlineData("zh-CN", "4.2 百克", MassUnit.Hectogram, 4.2)]
        [InlineData("zh-CN", "4.2 千克", MassUnit.Kilogram, 4.2)]
        [InlineData("zh-CN", "4.2 千磅", MassUnit.Kilopound, 4.2)]
        [InlineData("zh-CN", "4.2 千吨", MassUnit.Kilotonne, 4.2)]
        [InlineData("zh-CN", "4.2 长吨", MassUnit.LongTon, 4.2)]
        [InlineData("zh-CN", "4.2 兆磅", MassUnit.Megapound, 4.2)]
        [InlineData("zh-CN", "4.2 兆吨", MassUnit.Megatonne, 4.2)]
        [InlineData("zh-CN", "4.2 微克", MassUnit.Microgram, 4.2)]
        [InlineData("zh-CN", "4.2 毫克", MassUnit.Milligram, 4.2)]
        [InlineData("zh-CN", "4.2 纳克", MassUnit.Nanogram, 4.2)]
        [InlineData("zh-CN", "4.2 盎司", MassUnit.Ounce, 4.2)]
        [InlineData("zh-CN", "4.2 皮克", MassUnit.Picogram, 4.2)]
        [InlineData("zh-CN", "4.2 磅", MassUnit.Pound, 4.2)]
        [InlineData("zh-CN", "4.2 短吨", MassUnit.ShortTon, 4.2)]
        [InlineData("zh-CN", "4.2 吨", MassUnit.Tonne, 4.2)]
        public void Parse(string culture, string quantityString, MassUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Mass.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "1 cwt")] // [LongHundredweight, ShortHundredweight] 
        public void ParseWithAmbiguousAbbreviation(string culture, string quantityString)
        {
            Assert.Throws<AmbiguousUnitParseException>(() => Mass.Parse(quantityString, CultureInfo.GetCultureInfo(culture)));
        }

        [Theory]
        [InlineData("en-US", "4.2 cg", MassUnit.Centigram, 4.2)]
        [InlineData("en-US", "4.2 dag", MassUnit.Decagram, 4.2)]
        [InlineData("en-US", "4.2 dg", MassUnit.Decigram, 4.2)]
        [InlineData("en-US", "4.2 em", MassUnit.EarthMass, 4.2)]
        [InlineData("en-US", "4.2 fg", MassUnit.Femtogram, 4.2)]
        [InlineData("en-US", "4.2 gr", MassUnit.Grain, 4.2)]
        [InlineData("en-US", "4.2 g", MassUnit.Gram, 4.2)]
        [InlineData("en-US", "4.2 hg", MassUnit.Hectogram, 4.2)]
        [InlineData("en-US", "4.2 kg", MassUnit.Kilogram, 4.2)]
        [InlineData("en-US", "4.2 klb", MassUnit.Kilopound, 4.2)]
        [InlineData("en-US", "4.2 klbs", MassUnit.Kilopound, 4.2)]
        [InlineData("en-US", "4.2 klbm", MassUnit.Kilopound, 4.2)]
        [InlineData("en-US", "4.2 kt", MassUnit.Kilotonne, 4.2)]
        [InlineData("en-US", "4.2 long tn", MassUnit.LongTon, 4.2)]
        [InlineData("en-US", "4.2 Mlb", MassUnit.Megapound, 4.2)]
        [InlineData("en-US", "4.2 Mlbs", MassUnit.Megapound, 4.2)]
        [InlineData("en-US", "4.2 Mlbm", MassUnit.Megapound, 4.2)]
        [InlineData("en-US", "4.2 Mt", MassUnit.Megatonne, 4.2)]
        [InlineData("en-US", "4.2 µg", MassUnit.Microgram, 4.2)]
        [InlineData("en-US", "4.2 mg", MassUnit.Milligram, 4.2)]
        [InlineData("en-US", "4.2 ng", MassUnit.Nanogram, 4.2)]
        [InlineData("en-US", "4.2 oz", MassUnit.Ounce, 4.2)]
        [InlineData("en-US", "4.2 pg", MassUnit.Picogram, 4.2)]
        [InlineData("en-US", "4.2 lb", MassUnit.Pound, 4.2)]
        [InlineData("en-US", "4.2 lbs", MassUnit.Pound, 4.2)]
        [InlineData("en-US", "4.2 lbm", MassUnit.Pound, 4.2)]
        [InlineData("en-US", "4.2 t (short)", MassUnit.ShortTon, 4.2)]
        [InlineData("en-US", "4.2 short tn", MassUnit.ShortTon, 4.2)]
        [InlineData("en-US", "4.2 ST", MassUnit.ShortTon, 4.2)]
        [InlineData("en-US", "4.2 slug", MassUnit.Slug, 4.2)]
        [InlineData("en-US", "4.2 M☉", MassUnit.SolarMass, 4.2)]
        [InlineData("en-US", "4.2 M⊙", MassUnit.SolarMass, 4.2)]
        [InlineData("en-US", "4.2 st", MassUnit.Stone, 4.2)]
        [InlineData("en-US", "4.2 t", MassUnit.Tonne, 4.2)]
        [InlineData("ru-RU", "4,2 сг", MassUnit.Centigram, 4.2)]
        [InlineData("ru-RU", "4,2 даг", MassUnit.Decagram, 4.2)]
        [InlineData("ru-RU", "4,2 дг", MassUnit.Decigram, 4.2)]
        [InlineData("ru-RU", "4,2 фг", MassUnit.Femtogram, 4.2)]
        [InlineData("ru-RU", "4,2 г", MassUnit.Gram, 4.2)]
        [InlineData("ru-RU", "4,2 гг", MassUnit.Hectogram, 4.2)]
        [InlineData("ru-RU", "4,2 кг", MassUnit.Kilogram, 4.2)]
        [InlineData("ru-RU", "4,2 кфунт", MassUnit.Kilopound, 4.2)]
        [InlineData("ru-RU", "4,2 кт", MassUnit.Kilotonne, 4.2)]
        [InlineData("ru-RU", "4,2 тонна большая", MassUnit.LongTon, 4.2)]
        [InlineData("ru-RU", "4,2 Мфунт", MassUnit.Megapound, 4.2)]
        [InlineData("ru-RU", "4,2 Мт", MassUnit.Megatonne, 4.2)]
        [InlineData("ru-RU", "4,2 мкг", MassUnit.Microgram, 4.2)]
        [InlineData("ru-RU", "4,2 мг", MassUnit.Milligram, 4.2)]
        [InlineData("ru-RU", "4,2 нг", MassUnit.Nanogram, 4.2)]
        [InlineData("ru-RU", "4,2 пг", MassUnit.Picogram, 4.2)]
        [InlineData("ru-RU", "4,2 фунт", MassUnit.Pound, 4.2)]
        [InlineData("ru-RU", "4,2 тонна малая", MassUnit.ShortTon, 4.2)]
        [InlineData("ru-RU", "4,2 т", MassUnit.Tonne, 4.2)]
        [InlineData("zh-CN", "4.2 厘克", MassUnit.Centigram, 4.2)]
        [InlineData("zh-CN", "4.2 十克", MassUnit.Decagram, 4.2)]
        [InlineData("zh-CN", "4.2 分克", MassUnit.Decigram, 4.2)]
        [InlineData("zh-CN", "4.2 飞克", MassUnit.Femtogram, 4.2)]
        [InlineData("zh-CN", "4.2 克", MassUnit.Gram, 4.2)]
        [InlineData("zh-CN", "4.2 百克", MassUnit.Hectogram, 4.2)]
        [InlineData("zh-CN", "4.2 千克", MassUnit.Kilogram, 4.2)]
        [InlineData("zh-CN", "4.2 千磅", MassUnit.Kilopound, 4.2)]
        [InlineData("zh-CN", "4.2 千吨", MassUnit.Kilotonne, 4.2)]
        [InlineData("zh-CN", "4.2 长吨", MassUnit.LongTon, 4.2)]
        [InlineData("zh-CN", "4.2 兆磅", MassUnit.Megapound, 4.2)]
        [InlineData("zh-CN", "4.2 兆吨", MassUnit.Megatonne, 4.2)]
        [InlineData("zh-CN", "4.2 微克", MassUnit.Microgram, 4.2)]
        [InlineData("zh-CN", "4.2 毫克", MassUnit.Milligram, 4.2)]
        [InlineData("zh-CN", "4.2 纳克", MassUnit.Nanogram, 4.2)]
        [InlineData("zh-CN", "4.2 盎司", MassUnit.Ounce, 4.2)]
        [InlineData("zh-CN", "4.2 皮克", MassUnit.Picogram, 4.2)]
        [InlineData("zh-CN", "4.2 磅", MassUnit.Pound, 4.2)]
        [InlineData("zh-CN", "4.2 短吨", MassUnit.ShortTon, 4.2)]
        [InlineData("zh-CN", "4.2 吨", MassUnit.Tonne, 4.2)]
        public void TryParse(string culture, string quantityString, MassUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Mass.TryParse(quantityString, out Mass parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "1 cwt")] // [LongHundredweight, ShortHundredweight] 
        public void TryParseWithAmbiguousAbbreviation(string culture, string quantityString)
        {
            Assert.False(Mass.TryParse(quantityString, CultureInfo.GetCultureInfo(culture), out _));
        }

        [Theory]
        [InlineData("cg", MassUnit.Centigram)]
        [InlineData("dag", MassUnit.Decagram)]
        [InlineData("dg", MassUnit.Decigram)]
        [InlineData("em", MassUnit.EarthMass)]
        [InlineData("fg", MassUnit.Femtogram)]
        [InlineData("gr", MassUnit.Grain)]
        [InlineData("g", MassUnit.Gram)]
        [InlineData("hg", MassUnit.Hectogram)]
        [InlineData("kg", MassUnit.Kilogram)]
        [InlineData("klb", MassUnit.Kilopound)]
        [InlineData("klbs", MassUnit.Kilopound)]
        [InlineData("klbm", MassUnit.Kilopound)]
        [InlineData("kt", MassUnit.Kilotonne)]
        [InlineData("long tn", MassUnit.LongTon)]
        [InlineData("Mlb", MassUnit.Megapound)]
        [InlineData("Mlbs", MassUnit.Megapound)]
        [InlineData("Mlbm", MassUnit.Megapound)]
        [InlineData("Mt", MassUnit.Megatonne)]
        [InlineData("µg", MassUnit.Microgram)]
        [InlineData("mg", MassUnit.Milligram)]
        [InlineData("ng", MassUnit.Nanogram)]
        [InlineData("oz", MassUnit.Ounce)]
        [InlineData("pg", MassUnit.Picogram)]
        [InlineData("lb", MassUnit.Pound)]
        [InlineData("lbs", MassUnit.Pound)]
        [InlineData("lbm", MassUnit.Pound)]
        [InlineData("t (short)", MassUnit.ShortTon)]
        [InlineData("short tn", MassUnit.ShortTon)]
        [InlineData("ST", MassUnit.ShortTon)]
        [InlineData("slug", MassUnit.Slug)]
        [InlineData("M☉", MassUnit.SolarMass)]
        [InlineData("M⊙", MassUnit.SolarMass)]
        [InlineData("st", MassUnit.Stone)]
        [InlineData("t", MassUnit.Tonne)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MassUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            MassUnit parsedUnit = Mass.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg", MassUnit.Centigram)]
        [InlineData("dag", MassUnit.Decagram)]
        [InlineData("dg", MassUnit.Decigram)]
        [InlineData("em", MassUnit.EarthMass)]
        [InlineData("fg", MassUnit.Femtogram)]
        [InlineData("gr", MassUnit.Grain)]
        [InlineData("g", MassUnit.Gram)]
        [InlineData("hg", MassUnit.Hectogram)]
        [InlineData("kg", MassUnit.Kilogram)]
        [InlineData("klb", MassUnit.Kilopound)]
        [InlineData("klbs", MassUnit.Kilopound)]
        [InlineData("klbm", MassUnit.Kilopound)]
        [InlineData("kt", MassUnit.Kilotonne)]
        [InlineData("long tn", MassUnit.LongTon)]
        [InlineData("Mlb", MassUnit.Megapound)]
        [InlineData("Mlbs", MassUnit.Megapound)]
        [InlineData("Mlbm", MassUnit.Megapound)]
        [InlineData("Mt", MassUnit.Megatonne)]
        [InlineData("µg", MassUnit.Microgram)]
        [InlineData("mg", MassUnit.Milligram)]
        [InlineData("ng", MassUnit.Nanogram)]
        [InlineData("oz", MassUnit.Ounce)]
        [InlineData("pg", MassUnit.Picogram)]
        [InlineData("lb", MassUnit.Pound)]
        [InlineData("lbs", MassUnit.Pound)]
        [InlineData("lbm", MassUnit.Pound)]
        [InlineData("t (short)", MassUnit.ShortTon)]
        [InlineData("short tn", MassUnit.ShortTon)]
        [InlineData("ST", MassUnit.ShortTon)]
        [InlineData("slug", MassUnit.Slug)]
        [InlineData("M☉", MassUnit.SolarMass)]
        [InlineData("M⊙", MassUnit.SolarMass)]
        [InlineData("st", MassUnit.Stone)]
        [InlineData("t", MassUnit.Tonne)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MassUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            MassUnit parsedUnit = Mass.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg", MassUnit.Centigram)]
        [InlineData("en-US", "dag", MassUnit.Decagram)]
        [InlineData("en-US", "dg", MassUnit.Decigram)]
        [InlineData("en-US", "em", MassUnit.EarthMass)]
        [InlineData("en-US", "fg", MassUnit.Femtogram)]
        [InlineData("en-US", "gr", MassUnit.Grain)]
        [InlineData("en-US", "g", MassUnit.Gram)]
        [InlineData("en-US", "hg", MassUnit.Hectogram)]
        [InlineData("en-US", "kg", MassUnit.Kilogram)]
        [InlineData("en-US", "klb", MassUnit.Kilopound)]
        [InlineData("en-US", "klbs", MassUnit.Kilopound)]
        [InlineData("en-US", "klbm", MassUnit.Kilopound)]
        [InlineData("en-US", "kt", MassUnit.Kilotonne)]
        [InlineData("en-US", "long tn", MassUnit.LongTon)]
        [InlineData("en-US", "Mlb", MassUnit.Megapound)]
        [InlineData("en-US", "Mlbs", MassUnit.Megapound)]
        [InlineData("en-US", "Mlbm", MassUnit.Megapound)]
        [InlineData("en-US", "Mt", MassUnit.Megatonne)]
        [InlineData("en-US", "µg", MassUnit.Microgram)]
        [InlineData("en-US", "mg", MassUnit.Milligram)]
        [InlineData("en-US", "ng", MassUnit.Nanogram)]
        [InlineData("en-US", "oz", MassUnit.Ounce)]
        [InlineData("en-US", "pg", MassUnit.Picogram)]
        [InlineData("en-US", "lb", MassUnit.Pound)]
        [InlineData("en-US", "lbs", MassUnit.Pound)]
        [InlineData("en-US", "lbm", MassUnit.Pound)]
        [InlineData("en-US", "t (short)", MassUnit.ShortTon)]
        [InlineData("en-US", "short tn", MassUnit.ShortTon)]
        [InlineData("en-US", "ST", MassUnit.ShortTon)]
        [InlineData("en-US", "slug", MassUnit.Slug)]
        [InlineData("en-US", "M☉", MassUnit.SolarMass)]
        [InlineData("en-US", "M⊙", MassUnit.SolarMass)]
        [InlineData("en-US", "st", MassUnit.Stone)]
        [InlineData("en-US", "t", MassUnit.Tonne)]
        [InlineData("ru-RU", "сг", MassUnit.Centigram)]
        [InlineData("ru-RU", "даг", MassUnit.Decagram)]
        [InlineData("ru-RU", "дг", MassUnit.Decigram)]
        [InlineData("ru-RU", "фг", MassUnit.Femtogram)]
        [InlineData("ru-RU", "г", MassUnit.Gram)]
        [InlineData("ru-RU", "гг", MassUnit.Hectogram)]
        [InlineData("ru-RU", "кг", MassUnit.Kilogram)]
        [InlineData("ru-RU", "кфунт", MassUnit.Kilopound)]
        [InlineData("ru-RU", "кт", MassUnit.Kilotonne)]
        [InlineData("ru-RU", "тонна большая", MassUnit.LongTon)]
        [InlineData("ru-RU", "Мфунт", MassUnit.Megapound)]
        [InlineData("ru-RU", "Мт", MassUnit.Megatonne)]
        [InlineData("ru-RU", "мкг", MassUnit.Microgram)]
        [InlineData("ru-RU", "мг", MassUnit.Milligram)]
        [InlineData("ru-RU", "нг", MassUnit.Nanogram)]
        [InlineData("ru-RU", "пг", MassUnit.Picogram)]
        [InlineData("ru-RU", "фунт", MassUnit.Pound)]
        [InlineData("ru-RU", "тонна малая", MassUnit.ShortTon)]
        [InlineData("ru-RU", "т", MassUnit.Tonne)]
        [InlineData("zh-CN", "厘克", MassUnit.Centigram)]
        [InlineData("zh-CN", "十克", MassUnit.Decagram)]
        [InlineData("zh-CN", "分克", MassUnit.Decigram)]
        [InlineData("zh-CN", "飞克", MassUnit.Femtogram)]
        [InlineData("zh-CN", "克", MassUnit.Gram)]
        [InlineData("zh-CN", "百克", MassUnit.Hectogram)]
        [InlineData("zh-CN", "千克", MassUnit.Kilogram)]
        [InlineData("zh-CN", "千磅", MassUnit.Kilopound)]
        [InlineData("zh-CN", "千吨", MassUnit.Kilotonne)]
        [InlineData("zh-CN", "长吨", MassUnit.LongTon)]
        [InlineData("zh-CN", "兆磅", MassUnit.Megapound)]
        [InlineData("zh-CN", "兆吨", MassUnit.Megatonne)]
        [InlineData("zh-CN", "微克", MassUnit.Microgram)]
        [InlineData("zh-CN", "毫克", MassUnit.Milligram)]
        [InlineData("zh-CN", "纳克", MassUnit.Nanogram)]
        [InlineData("zh-CN", "盎司", MassUnit.Ounce)]
        [InlineData("zh-CN", "皮克", MassUnit.Picogram)]
        [InlineData("zh-CN", "磅", MassUnit.Pound)]
        [InlineData("zh-CN", "短吨", MassUnit.ShortTon)]
        [InlineData("zh-CN", "吨", MassUnit.Tonne)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, MassUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            MassUnit parsedUnit = Mass.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg", MassUnit.Centigram)]
        [InlineData("en-US", "dag", MassUnit.Decagram)]
        [InlineData("en-US", "dg", MassUnit.Decigram)]
        [InlineData("en-US", "em", MassUnit.EarthMass)]
        [InlineData("en-US", "fg", MassUnit.Femtogram)]
        [InlineData("en-US", "gr", MassUnit.Grain)]
        [InlineData("en-US", "g", MassUnit.Gram)]
        [InlineData("en-US", "hg", MassUnit.Hectogram)]
        [InlineData("en-US", "kg", MassUnit.Kilogram)]
        [InlineData("en-US", "klb", MassUnit.Kilopound)]
        [InlineData("en-US", "klbs", MassUnit.Kilopound)]
        [InlineData("en-US", "klbm", MassUnit.Kilopound)]
        [InlineData("en-US", "kt", MassUnit.Kilotonne)]
        [InlineData("en-US", "long tn", MassUnit.LongTon)]
        [InlineData("en-US", "Mlb", MassUnit.Megapound)]
        [InlineData("en-US", "Mlbs", MassUnit.Megapound)]
        [InlineData("en-US", "Mlbm", MassUnit.Megapound)]
        [InlineData("en-US", "Mt", MassUnit.Megatonne)]
        [InlineData("en-US", "µg", MassUnit.Microgram)]
        [InlineData("en-US", "mg", MassUnit.Milligram)]
        [InlineData("en-US", "ng", MassUnit.Nanogram)]
        [InlineData("en-US", "oz", MassUnit.Ounce)]
        [InlineData("en-US", "pg", MassUnit.Picogram)]
        [InlineData("en-US", "lb", MassUnit.Pound)]
        [InlineData("en-US", "lbs", MassUnit.Pound)]
        [InlineData("en-US", "lbm", MassUnit.Pound)]
        [InlineData("en-US", "t (short)", MassUnit.ShortTon)]
        [InlineData("en-US", "short tn", MassUnit.ShortTon)]
        [InlineData("en-US", "ST", MassUnit.ShortTon)]
        [InlineData("en-US", "slug", MassUnit.Slug)]
        [InlineData("en-US", "M☉", MassUnit.SolarMass)]
        [InlineData("en-US", "M⊙", MassUnit.SolarMass)]
        [InlineData("en-US", "st", MassUnit.Stone)]
        [InlineData("en-US", "t", MassUnit.Tonne)]
        [InlineData("ru-RU", "сг", MassUnit.Centigram)]
        [InlineData("ru-RU", "даг", MassUnit.Decagram)]
        [InlineData("ru-RU", "дг", MassUnit.Decigram)]
        [InlineData("ru-RU", "фг", MassUnit.Femtogram)]
        [InlineData("ru-RU", "г", MassUnit.Gram)]
        [InlineData("ru-RU", "гг", MassUnit.Hectogram)]
        [InlineData("ru-RU", "кг", MassUnit.Kilogram)]
        [InlineData("ru-RU", "кфунт", MassUnit.Kilopound)]
        [InlineData("ru-RU", "кт", MassUnit.Kilotonne)]
        [InlineData("ru-RU", "тонна большая", MassUnit.LongTon)]
        [InlineData("ru-RU", "Мфунт", MassUnit.Megapound)]
        [InlineData("ru-RU", "Мт", MassUnit.Megatonne)]
        [InlineData("ru-RU", "мкг", MassUnit.Microgram)]
        [InlineData("ru-RU", "мг", MassUnit.Milligram)]
        [InlineData("ru-RU", "нг", MassUnit.Nanogram)]
        [InlineData("ru-RU", "пг", MassUnit.Picogram)]
        [InlineData("ru-RU", "фунт", MassUnit.Pound)]
        [InlineData("ru-RU", "тонна малая", MassUnit.ShortTon)]
        [InlineData("ru-RU", "т", MassUnit.Tonne)]
        [InlineData("zh-CN", "厘克", MassUnit.Centigram)]
        [InlineData("zh-CN", "十克", MassUnit.Decagram)]
        [InlineData("zh-CN", "分克", MassUnit.Decigram)]
        [InlineData("zh-CN", "飞克", MassUnit.Femtogram)]
        [InlineData("zh-CN", "克", MassUnit.Gram)]
        [InlineData("zh-CN", "百克", MassUnit.Hectogram)]
        [InlineData("zh-CN", "千克", MassUnit.Kilogram)]
        [InlineData("zh-CN", "千磅", MassUnit.Kilopound)]
        [InlineData("zh-CN", "千吨", MassUnit.Kilotonne)]
        [InlineData("zh-CN", "长吨", MassUnit.LongTon)]
        [InlineData("zh-CN", "兆磅", MassUnit.Megapound)]
        [InlineData("zh-CN", "兆吨", MassUnit.Megatonne)]
        [InlineData("zh-CN", "微克", MassUnit.Microgram)]
        [InlineData("zh-CN", "毫克", MassUnit.Milligram)]
        [InlineData("zh-CN", "纳克", MassUnit.Nanogram)]
        [InlineData("zh-CN", "盎司", MassUnit.Ounce)]
        [InlineData("zh-CN", "皮克", MassUnit.Picogram)]
        [InlineData("zh-CN", "磅", MassUnit.Pound)]
        [InlineData("zh-CN", "短吨", MassUnit.ShortTon)]
        [InlineData("zh-CN", "吨", MassUnit.Tonne)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, MassUnit expectedUnit)
        {
            MassUnit parsedUnit = Mass.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cwt")] // [LongHundredweight, ShortHundredweight]
        public void ParseUnitWithAmbiguousAbbreviation(string culture, string abbreviation)
        {
            Assert.Throws<AmbiguousUnitParseException>(() => Mass.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture)));
        }

        [Theory]
        [InlineData("cg", MassUnit.Centigram)]
        [InlineData("dag", MassUnit.Decagram)]
        [InlineData("dg", MassUnit.Decigram)]
        [InlineData("em", MassUnit.EarthMass)]
        [InlineData("fg", MassUnit.Femtogram)]
        [InlineData("gr", MassUnit.Grain)]
        [InlineData("g", MassUnit.Gram)]
        [InlineData("hg", MassUnit.Hectogram)]
        [InlineData("kg", MassUnit.Kilogram)]
        [InlineData("klb", MassUnit.Kilopound)]
        [InlineData("klbs", MassUnit.Kilopound)]
        [InlineData("klbm", MassUnit.Kilopound)]
        [InlineData("kt", MassUnit.Kilotonne)]
        [InlineData("long tn", MassUnit.LongTon)]
        [InlineData("Mlb", MassUnit.Megapound)]
        [InlineData("Mlbs", MassUnit.Megapound)]
        [InlineData("Mlbm", MassUnit.Megapound)]
        [InlineData("Mt", MassUnit.Megatonne)]
        [InlineData("µg", MassUnit.Microgram)]
        [InlineData("mg", MassUnit.Milligram)]
        [InlineData("ng", MassUnit.Nanogram)]
        [InlineData("oz", MassUnit.Ounce)]
        [InlineData("pg", MassUnit.Picogram)]
        [InlineData("lb", MassUnit.Pound)]
        [InlineData("lbs", MassUnit.Pound)]
        [InlineData("lbm", MassUnit.Pound)]
        [InlineData("t (short)", MassUnit.ShortTon)]
        [InlineData("short tn", MassUnit.ShortTon)]
        [InlineData("ST", MassUnit.ShortTon)]
        [InlineData("slug", MassUnit.Slug)]
        [InlineData("M☉", MassUnit.SolarMass)]
        [InlineData("M⊙", MassUnit.SolarMass)]
        [InlineData("st", MassUnit.Stone)]
        [InlineData("t", MassUnit.Tonne)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MassUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Mass.TryParseUnit(abbreviation, out MassUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg", MassUnit.Centigram)]
        [InlineData("dag", MassUnit.Decagram)]
        [InlineData("dg", MassUnit.Decigram)]
        [InlineData("em", MassUnit.EarthMass)]
        [InlineData("fg", MassUnit.Femtogram)]
        [InlineData("gr", MassUnit.Grain)]
        [InlineData("g", MassUnit.Gram)]
        [InlineData("hg", MassUnit.Hectogram)]
        [InlineData("kg", MassUnit.Kilogram)]
        [InlineData("klb", MassUnit.Kilopound)]
        [InlineData("klbs", MassUnit.Kilopound)]
        [InlineData("klbm", MassUnit.Kilopound)]
        [InlineData("kt", MassUnit.Kilotonne)]
        [InlineData("long tn", MassUnit.LongTon)]
        [InlineData("Mlb", MassUnit.Megapound)]
        [InlineData("Mlbs", MassUnit.Megapound)]
        [InlineData("Mlbm", MassUnit.Megapound)]
        [InlineData("Mt", MassUnit.Megatonne)]
        [InlineData("µg", MassUnit.Microgram)]
        [InlineData("mg", MassUnit.Milligram)]
        [InlineData("ng", MassUnit.Nanogram)]
        [InlineData("oz", MassUnit.Ounce)]
        [InlineData("pg", MassUnit.Picogram)]
        [InlineData("lb", MassUnit.Pound)]
        [InlineData("lbs", MassUnit.Pound)]
        [InlineData("lbm", MassUnit.Pound)]
        [InlineData("t (short)", MassUnit.ShortTon)]
        [InlineData("short tn", MassUnit.ShortTon)]
        [InlineData("ST", MassUnit.ShortTon)]
        [InlineData("slug", MassUnit.Slug)]
        [InlineData("M☉", MassUnit.SolarMass)]
        [InlineData("M⊙", MassUnit.SolarMass)]
        [InlineData("st", MassUnit.Stone)]
        [InlineData("t", MassUnit.Tonne)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MassUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Mass.TryParseUnit(abbreviation, out MassUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg", MassUnit.Centigram)]
        [InlineData("en-US", "dag", MassUnit.Decagram)]
        [InlineData("en-US", "dg", MassUnit.Decigram)]
        [InlineData("en-US", "em", MassUnit.EarthMass)]
        [InlineData("en-US", "fg", MassUnit.Femtogram)]
        [InlineData("en-US", "gr", MassUnit.Grain)]
        [InlineData("en-US", "g", MassUnit.Gram)]
        [InlineData("en-US", "hg", MassUnit.Hectogram)]
        [InlineData("en-US", "kg", MassUnit.Kilogram)]
        [InlineData("en-US", "klb", MassUnit.Kilopound)]
        [InlineData("en-US", "klbs", MassUnit.Kilopound)]
        [InlineData("en-US", "klbm", MassUnit.Kilopound)]
        [InlineData("en-US", "kt", MassUnit.Kilotonne)]
        [InlineData("en-US", "long tn", MassUnit.LongTon)]
        [InlineData("en-US", "Mlb", MassUnit.Megapound)]
        [InlineData("en-US", "Mlbs", MassUnit.Megapound)]
        [InlineData("en-US", "Mlbm", MassUnit.Megapound)]
        [InlineData("en-US", "Mt", MassUnit.Megatonne)]
        [InlineData("en-US", "µg", MassUnit.Microgram)]
        [InlineData("en-US", "mg", MassUnit.Milligram)]
        [InlineData("en-US", "ng", MassUnit.Nanogram)]
        [InlineData("en-US", "oz", MassUnit.Ounce)]
        [InlineData("en-US", "pg", MassUnit.Picogram)]
        [InlineData("en-US", "lb", MassUnit.Pound)]
        [InlineData("en-US", "lbs", MassUnit.Pound)]
        [InlineData("en-US", "lbm", MassUnit.Pound)]
        [InlineData("en-US", "t (short)", MassUnit.ShortTon)]
        [InlineData("en-US", "short tn", MassUnit.ShortTon)]
        [InlineData("en-US", "ST", MassUnit.ShortTon)]
        [InlineData("en-US", "slug", MassUnit.Slug)]
        [InlineData("en-US", "M☉", MassUnit.SolarMass)]
        [InlineData("en-US", "M⊙", MassUnit.SolarMass)]
        [InlineData("en-US", "st", MassUnit.Stone)]
        [InlineData("en-US", "t", MassUnit.Tonne)]
        [InlineData("ru-RU", "сг", MassUnit.Centigram)]
        [InlineData("ru-RU", "даг", MassUnit.Decagram)]
        [InlineData("ru-RU", "дг", MassUnit.Decigram)]
        [InlineData("ru-RU", "фг", MassUnit.Femtogram)]
        [InlineData("ru-RU", "г", MassUnit.Gram)]
        [InlineData("ru-RU", "гг", MassUnit.Hectogram)]
        [InlineData("ru-RU", "кг", MassUnit.Kilogram)]
        [InlineData("ru-RU", "кфунт", MassUnit.Kilopound)]
        [InlineData("ru-RU", "кт", MassUnit.Kilotonne)]
        [InlineData("ru-RU", "тонна большая", MassUnit.LongTon)]
        [InlineData("ru-RU", "Мфунт", MassUnit.Megapound)]
        [InlineData("ru-RU", "Мт", MassUnit.Megatonne)]
        [InlineData("ru-RU", "мкг", MassUnit.Microgram)]
        [InlineData("ru-RU", "мг", MassUnit.Milligram)]
        [InlineData("ru-RU", "нг", MassUnit.Nanogram)]
        [InlineData("ru-RU", "пг", MassUnit.Picogram)]
        [InlineData("ru-RU", "фунт", MassUnit.Pound)]
        [InlineData("ru-RU", "тонна малая", MassUnit.ShortTon)]
        [InlineData("ru-RU", "т", MassUnit.Tonne)]
        [InlineData("zh-CN", "厘克", MassUnit.Centigram)]
        [InlineData("zh-CN", "十克", MassUnit.Decagram)]
        [InlineData("zh-CN", "分克", MassUnit.Decigram)]
        [InlineData("zh-CN", "飞克", MassUnit.Femtogram)]
        [InlineData("zh-CN", "克", MassUnit.Gram)]
        [InlineData("zh-CN", "百克", MassUnit.Hectogram)]
        [InlineData("zh-CN", "千克", MassUnit.Kilogram)]
        [InlineData("zh-CN", "千磅", MassUnit.Kilopound)]
        [InlineData("zh-CN", "千吨", MassUnit.Kilotonne)]
        [InlineData("zh-CN", "长吨", MassUnit.LongTon)]
        [InlineData("zh-CN", "兆磅", MassUnit.Megapound)]
        [InlineData("zh-CN", "兆吨", MassUnit.Megatonne)]
        [InlineData("zh-CN", "微克", MassUnit.Microgram)]
        [InlineData("zh-CN", "毫克", MassUnit.Milligram)]
        [InlineData("zh-CN", "纳克", MassUnit.Nanogram)]
        [InlineData("zh-CN", "盎司", MassUnit.Ounce)]
        [InlineData("zh-CN", "皮克", MassUnit.Picogram)]
        [InlineData("zh-CN", "磅", MassUnit.Pound)]
        [InlineData("zh-CN", "短吨", MassUnit.ShortTon)]
        [InlineData("zh-CN", "吨", MassUnit.Tonne)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, MassUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Mass.TryParseUnit(abbreviation, out MassUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg", MassUnit.Centigram)]
        [InlineData("en-US", "dag", MassUnit.Decagram)]
        [InlineData("en-US", "dg", MassUnit.Decigram)]
        [InlineData("en-US", "em", MassUnit.EarthMass)]
        [InlineData("en-US", "fg", MassUnit.Femtogram)]
        [InlineData("en-US", "gr", MassUnit.Grain)]
        [InlineData("en-US", "g", MassUnit.Gram)]
        [InlineData("en-US", "hg", MassUnit.Hectogram)]
        [InlineData("en-US", "kg", MassUnit.Kilogram)]
        [InlineData("en-US", "klb", MassUnit.Kilopound)]
        [InlineData("en-US", "klbs", MassUnit.Kilopound)]
        [InlineData("en-US", "klbm", MassUnit.Kilopound)]
        [InlineData("en-US", "kt", MassUnit.Kilotonne)]
        [InlineData("en-US", "long tn", MassUnit.LongTon)]
        [InlineData("en-US", "Mlb", MassUnit.Megapound)]
        [InlineData("en-US", "Mlbs", MassUnit.Megapound)]
        [InlineData("en-US", "Mlbm", MassUnit.Megapound)]
        [InlineData("en-US", "Mt", MassUnit.Megatonne)]
        [InlineData("en-US", "µg", MassUnit.Microgram)]
        [InlineData("en-US", "mg", MassUnit.Milligram)]
        [InlineData("en-US", "ng", MassUnit.Nanogram)]
        [InlineData("en-US", "oz", MassUnit.Ounce)]
        [InlineData("en-US", "pg", MassUnit.Picogram)]
        [InlineData("en-US", "lb", MassUnit.Pound)]
        [InlineData("en-US", "lbs", MassUnit.Pound)]
        [InlineData("en-US", "lbm", MassUnit.Pound)]
        [InlineData("en-US", "t (short)", MassUnit.ShortTon)]
        [InlineData("en-US", "short tn", MassUnit.ShortTon)]
        [InlineData("en-US", "ST", MassUnit.ShortTon)]
        [InlineData("en-US", "slug", MassUnit.Slug)]
        [InlineData("en-US", "M☉", MassUnit.SolarMass)]
        [InlineData("en-US", "M⊙", MassUnit.SolarMass)]
        [InlineData("en-US", "st", MassUnit.Stone)]
        [InlineData("en-US", "t", MassUnit.Tonne)]
        [InlineData("ru-RU", "сг", MassUnit.Centigram)]
        [InlineData("ru-RU", "даг", MassUnit.Decagram)]
        [InlineData("ru-RU", "дг", MassUnit.Decigram)]
        [InlineData("ru-RU", "фг", MassUnit.Femtogram)]
        [InlineData("ru-RU", "г", MassUnit.Gram)]
        [InlineData("ru-RU", "гг", MassUnit.Hectogram)]
        [InlineData("ru-RU", "кг", MassUnit.Kilogram)]
        [InlineData("ru-RU", "кфунт", MassUnit.Kilopound)]
        [InlineData("ru-RU", "кт", MassUnit.Kilotonne)]
        [InlineData("ru-RU", "тонна большая", MassUnit.LongTon)]
        [InlineData("ru-RU", "Мфунт", MassUnit.Megapound)]
        [InlineData("ru-RU", "Мт", MassUnit.Megatonne)]
        [InlineData("ru-RU", "мкг", MassUnit.Microgram)]
        [InlineData("ru-RU", "мг", MassUnit.Milligram)]
        [InlineData("ru-RU", "нг", MassUnit.Nanogram)]
        [InlineData("ru-RU", "пг", MassUnit.Picogram)]
        [InlineData("ru-RU", "фунт", MassUnit.Pound)]
        [InlineData("ru-RU", "тонна малая", MassUnit.ShortTon)]
        [InlineData("ru-RU", "т", MassUnit.Tonne)]
        [InlineData("zh-CN", "厘克", MassUnit.Centigram)]
        [InlineData("zh-CN", "十克", MassUnit.Decagram)]
        [InlineData("zh-CN", "分克", MassUnit.Decigram)]
        [InlineData("zh-CN", "飞克", MassUnit.Femtogram)]
        [InlineData("zh-CN", "克", MassUnit.Gram)]
        [InlineData("zh-CN", "百克", MassUnit.Hectogram)]
        [InlineData("zh-CN", "千克", MassUnit.Kilogram)]
        [InlineData("zh-CN", "千磅", MassUnit.Kilopound)]
        [InlineData("zh-CN", "千吨", MassUnit.Kilotonne)]
        [InlineData("zh-CN", "长吨", MassUnit.LongTon)]
        [InlineData("zh-CN", "兆磅", MassUnit.Megapound)]
        [InlineData("zh-CN", "兆吨", MassUnit.Megatonne)]
        [InlineData("zh-CN", "微克", MassUnit.Microgram)]
        [InlineData("zh-CN", "毫克", MassUnit.Milligram)]
        [InlineData("zh-CN", "纳克", MassUnit.Nanogram)]
        [InlineData("zh-CN", "盎司", MassUnit.Ounce)]
        [InlineData("zh-CN", "皮克", MassUnit.Picogram)]
        [InlineData("zh-CN", "磅", MassUnit.Pound)]
        [InlineData("zh-CN", "短吨", MassUnit.ShortTon)]
        [InlineData("zh-CN", "吨", MassUnit.Tonne)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, MassUnit expectedUnit)
        {
            Assert.True(Mass.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out MassUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cwt")] // [LongHundredweight, ShortHundredweight]
        public void TryParseUnitWithAmbiguousAbbreviation(string culture, string abbreviation)
        {
            Assert.False(Mass.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out _));
        }

        [Theory]
        [InlineData("en-US", MassUnit.Centigram, "cg")]
        [InlineData("en-US", MassUnit.Decagram, "dag")]
        [InlineData("en-US", MassUnit.Decigram, "dg")]
        [InlineData("en-US", MassUnit.EarthMass, "em")]
        [InlineData("en-US", MassUnit.Femtogram, "fg")]
        [InlineData("en-US", MassUnit.Grain, "gr")]
        [InlineData("en-US", MassUnit.Gram, "g")]
        [InlineData("en-US", MassUnit.Hectogram, "hg")]
        [InlineData("en-US", MassUnit.Kilogram, "kg")]
        [InlineData("en-US", MassUnit.Kilopound, "klb")]
        [InlineData("en-US", MassUnit.Kilotonne, "kt")]
        [InlineData("en-US", MassUnit.LongHundredweight, "cwt")]
        [InlineData("en-US", MassUnit.LongTon, "long tn")]
        [InlineData("en-US", MassUnit.Megapound, "Mlb")]
        [InlineData("en-US", MassUnit.Megatonne, "Mt")]
        [InlineData("en-US", MassUnit.Microgram, "µg")]
        [InlineData("en-US", MassUnit.Milligram, "mg")]
        [InlineData("en-US", MassUnit.Nanogram, "ng")]
        [InlineData("en-US", MassUnit.Ounce, "oz")]
        [InlineData("en-US", MassUnit.Picogram, "pg")]
        [InlineData("en-US", MassUnit.Pound, "lb")]
        [InlineData("en-US", MassUnit.ShortHundredweight, "cwt")]
        [InlineData("en-US", MassUnit.ShortTon, "t (short)")]
        [InlineData("en-US", MassUnit.Slug, "slug")]
        [InlineData("en-US", MassUnit.SolarMass, "M☉")]
        [InlineData("en-US", MassUnit.Stone, "st")]
        [InlineData("en-US", MassUnit.Tonne, "t")]
        [InlineData("ru-RU", MassUnit.Centigram, "сг")]
        [InlineData("ru-RU", MassUnit.Decagram, "даг")]
        [InlineData("ru-RU", MassUnit.Decigram, "дг")]
        [InlineData("ru-RU", MassUnit.Femtogram, "фг")]
        [InlineData("ru-RU", MassUnit.Gram, "г")]
        [InlineData("ru-RU", MassUnit.Hectogram, "гг")]
        [InlineData("ru-RU", MassUnit.Kilogram, "кг")]
        [InlineData("ru-RU", MassUnit.Kilopound, "кфунт")]
        [InlineData("ru-RU", MassUnit.Kilotonne, "кт")]
        [InlineData("ru-RU", MassUnit.LongTon, "тонна большая")]
        [InlineData("ru-RU", MassUnit.Megapound, "Мфунт")]
        [InlineData("ru-RU", MassUnit.Megatonne, "Мт")]
        [InlineData("ru-RU", MassUnit.Microgram, "мкг")]
        [InlineData("ru-RU", MassUnit.Milligram, "мг")]
        [InlineData("ru-RU", MassUnit.Nanogram, "нг")]
        [InlineData("ru-RU", MassUnit.Picogram, "пг")]
        [InlineData("ru-RU", MassUnit.Pound, "фунт")]
        [InlineData("ru-RU", MassUnit.ShortTon, "тонна малая")]
        [InlineData("ru-RU", MassUnit.Tonne, "т")]
        [InlineData("zh-CN", MassUnit.Centigram, "厘克")]
        [InlineData("zh-CN", MassUnit.Decagram, "十克")]
        [InlineData("zh-CN", MassUnit.Decigram, "分克")]
        [InlineData("zh-CN", MassUnit.Femtogram, "飞克")]
        [InlineData("zh-CN", MassUnit.Gram, "克")]
        [InlineData("zh-CN", MassUnit.Hectogram, "百克")]
        [InlineData("zh-CN", MassUnit.Kilogram, "千克")]
        [InlineData("zh-CN", MassUnit.Kilopound, "千磅")]
        [InlineData("zh-CN", MassUnit.Kilotonne, "千吨")]
        [InlineData("zh-CN", MassUnit.LongTon, "长吨")]
        [InlineData("zh-CN", MassUnit.Megapound, "兆磅")]
        [InlineData("zh-CN", MassUnit.Megatonne, "兆吨")]
        [InlineData("zh-CN", MassUnit.Microgram, "微克")]
        [InlineData("zh-CN", MassUnit.Milligram, "毫克")]
        [InlineData("zh-CN", MassUnit.Nanogram, "纳克")]
        [InlineData("zh-CN", MassUnit.Ounce, "盎司")]
        [InlineData("zh-CN", MassUnit.Picogram, "皮克")]
        [InlineData("zh-CN", MassUnit.Pound, "磅")]
        [InlineData("zh-CN", MassUnit.ShortTon, "短吨")]
        [InlineData("zh-CN", MassUnit.Tonne, "吨")]
        public void GetAbbreviationForCulture(string culture, MassUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Mass.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Mass.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Mass.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MassUnit unit)
        {
            var inBaseUnits = Mass.From(1.0, Mass.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MassUnit unit)
        {
            var quantity = Mass.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MassUnit unit)
        {
            Assert.All(Mass.Units.Where(u => u != Mass.BaseUnit), fromUnit =>
            {
                var quantity = Mass.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MassUnit unit)
        {
            var quantity = default(Mass);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(MassUnit unit)
        {
            var quantity = Mass.From(3, Mass.BaseUnit);
            Mass expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<MassUnit> quantityToConvert = quantity;
                IQuantity<MassUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Mass kilogram = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(1, Mass.FromCentigrams(kilogram.Centigrams).Kilograms, CentigramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromDecagrams(kilogram.Decagrams).Kilograms, DecagramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromDecigrams(kilogram.Decigrams).Kilograms, DecigramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromEarthMasses(kilogram.EarthMasses).Kilograms, EarthMassesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromFemtograms(kilogram.Femtograms).Kilograms, FemtogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromGrains(kilogram.Grains).Kilograms, GrainsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromGrams(kilogram.Grams).Kilograms, GramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromHectograms(kilogram.Hectograms).Kilograms, HectogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromKilograms(kilogram.Kilograms).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromKilopounds(kilogram.Kilopounds).Kilograms, KilopoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromKilotonnes(kilogram.Kilotonnes).Kilograms, KilotonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromLongHundredweight(kilogram.LongHundredweight).Kilograms, LongHundredweightTolerance);
            AssertEx.EqualTolerance(1, Mass.FromLongTons(kilogram.LongTons).Kilograms, LongTonsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMegapounds(kilogram.Megapounds).Kilograms, MegapoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMegatonnes(kilogram.Megatonnes).Kilograms, MegatonnesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMicrograms(kilogram.Micrograms).Kilograms, MicrogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromMilligrams(kilogram.Milligrams).Kilograms, MilligramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromNanograms(kilogram.Nanograms).Kilograms, NanogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromOunces(kilogram.Ounces).Kilograms, OuncesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromPicograms(kilogram.Picograms).Kilograms, PicogramsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromPounds(kilogram.Pounds).Kilograms, PoundsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromShortHundredweight(kilogram.ShortHundredweight).Kilograms, ShortHundredweightTolerance);
            AssertEx.EqualTolerance(1, Mass.FromShortTons(kilogram.ShortTons).Kilograms, ShortTonsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromSlugs(kilogram.Slugs).Kilograms, SlugsTolerance);
            AssertEx.EqualTolerance(1, Mass.FromSolarMasses(kilogram.SolarMasses).Kilograms, SolarMassesTolerance);
            AssertEx.EqualTolerance(1, Mass.FromStone(kilogram.Stone).Kilograms, StoneTolerance);
            AssertEx.EqualTolerance(1, Mass.FromTonnes(kilogram.Tonnes).Kilograms, TonnesTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Mass v = Mass.FromKilograms(1);
            AssertEx.EqualTolerance(-1, -v.Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, (Mass.FromKilograms(3)-v).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, (Mass.FromKilograms(10)/5).Kilograms, KilogramsTolerance);
            AssertEx.EqualTolerance(2, Mass.FromKilograms(10)/Mass.FromKilograms(5), KilogramsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Mass oneKilogram = Mass.FromKilograms(1);
            Mass twoKilograms = Mass.FromKilograms(2);

            Assert.True(oneKilogram < twoKilograms);
            Assert.True(oneKilogram <= twoKilograms);
            Assert.True(twoKilograms > oneKilogram);
            Assert.True(twoKilograms >= oneKilogram);

            Assert.False(oneKilogram > twoKilograms);
            Assert.False(oneKilogram >= twoKilograms);
            Assert.False(twoKilograms < oneKilogram);
            Assert.False(twoKilograms <= oneKilogram);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.Equal(0, kilogram.CompareTo(kilogram));
            Assert.True(kilogram.CompareTo(Mass.Zero) > 0);
            Assert.True(Mass.Zero.CompareTo(kilogram) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.Throws<ArgumentException>(() => kilogram.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.Throws<ArgumentNullException>(() => kilogram.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MassUnit.Kilogram, 1, MassUnit.Kilogram, true)]  // Same value and unit.
        [InlineData(1, MassUnit.Kilogram, 2, MassUnit.Kilogram, false)] // Different value.
        [InlineData(2, MassUnit.Kilogram, 1, MassUnit.Centigram, false)] // Different value and unit.
        [InlineData(1, MassUnit.Kilogram, 1, MassUnit.Centigram, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MassUnit unitA, double valueB, MassUnit unitB, bool expectEqual)
        {
            var a = new Mass(valueA, unitA);
            var b = new Mass(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Mass.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.False(kilogram.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Mass kilogram = Mass.FromKilograms(1);
            Assert.False(kilogram.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Mass.FromKilograms(firstValue);
            var otherQuantity = Mass.FromKilograms(secondValue);
            Mass maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, Mass.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Mass.FromKilograms(1);
            var negativeTolerance = Mass.FromKilograms(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<MassUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Mass.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cg", new Mass(1, MassUnit.Centigram).ToString());
            Assert.Equal("1 dag", new Mass(1, MassUnit.Decagram).ToString());
            Assert.Equal("1 dg", new Mass(1, MassUnit.Decigram).ToString());
            Assert.Equal("1 em", new Mass(1, MassUnit.EarthMass).ToString());
            Assert.Equal("1 fg", new Mass(1, MassUnit.Femtogram).ToString());
            Assert.Equal("1 gr", new Mass(1, MassUnit.Grain).ToString());
            Assert.Equal("1 g", new Mass(1, MassUnit.Gram).ToString());
            Assert.Equal("1 hg", new Mass(1, MassUnit.Hectogram).ToString());
            Assert.Equal("1 kg", new Mass(1, MassUnit.Kilogram).ToString());
            Assert.Equal("1 klb", new Mass(1, MassUnit.Kilopound).ToString());
            Assert.Equal("1 kt", new Mass(1, MassUnit.Kilotonne).ToString());
            Assert.Equal("1 cwt", new Mass(1, MassUnit.LongHundredweight).ToString());
            Assert.Equal("1 long tn", new Mass(1, MassUnit.LongTon).ToString());
            Assert.Equal("1 Mlb", new Mass(1, MassUnit.Megapound).ToString());
            Assert.Equal("1 Mt", new Mass(1, MassUnit.Megatonne).ToString());
            Assert.Equal("1 µg", new Mass(1, MassUnit.Microgram).ToString());
            Assert.Equal("1 mg", new Mass(1, MassUnit.Milligram).ToString());
            Assert.Equal("1 ng", new Mass(1, MassUnit.Nanogram).ToString());
            Assert.Equal("1 oz", new Mass(1, MassUnit.Ounce).ToString());
            Assert.Equal("1 pg", new Mass(1, MassUnit.Picogram).ToString());
            Assert.Equal("1 lb", new Mass(1, MassUnit.Pound).ToString());
            Assert.Equal("1 cwt", new Mass(1, MassUnit.ShortHundredweight).ToString());
            Assert.Equal("1 t (short)", new Mass(1, MassUnit.ShortTon).ToString());
            Assert.Equal("1 slug", new Mass(1, MassUnit.Slug).ToString());
            Assert.Equal("1 M☉", new Mass(1, MassUnit.SolarMass).ToString());
            Assert.Equal("1 st", new Mass(1, MassUnit.Stone).ToString());
            Assert.Equal("1 t", new Mass(1, MassUnit.Tonne).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg", new Mass(1, MassUnit.Centigram).ToString(swedishCulture));
            Assert.Equal("1 dag", new Mass(1, MassUnit.Decagram).ToString(swedishCulture));
            Assert.Equal("1 dg", new Mass(1, MassUnit.Decigram).ToString(swedishCulture));
            Assert.Equal("1 em", new Mass(1, MassUnit.EarthMass).ToString(swedishCulture));
            Assert.Equal("1 fg", new Mass(1, MassUnit.Femtogram).ToString(swedishCulture));
            Assert.Equal("1 gr", new Mass(1, MassUnit.Grain).ToString(swedishCulture));
            Assert.Equal("1 g", new Mass(1, MassUnit.Gram).ToString(swedishCulture));
            Assert.Equal("1 hg", new Mass(1, MassUnit.Hectogram).ToString(swedishCulture));
            Assert.Equal("1 kg", new Mass(1, MassUnit.Kilogram).ToString(swedishCulture));
            Assert.Equal("1 klb", new Mass(1, MassUnit.Kilopound).ToString(swedishCulture));
            Assert.Equal("1 kt", new Mass(1, MassUnit.Kilotonne).ToString(swedishCulture));
            Assert.Equal("1 cwt", new Mass(1, MassUnit.LongHundredweight).ToString(swedishCulture));
            Assert.Equal("1 long tn", new Mass(1, MassUnit.LongTon).ToString(swedishCulture));
            Assert.Equal("1 Mlb", new Mass(1, MassUnit.Megapound).ToString(swedishCulture));
            Assert.Equal("1 Mt", new Mass(1, MassUnit.Megatonne).ToString(swedishCulture));
            Assert.Equal("1 µg", new Mass(1, MassUnit.Microgram).ToString(swedishCulture));
            Assert.Equal("1 mg", new Mass(1, MassUnit.Milligram).ToString(swedishCulture));
            Assert.Equal("1 ng", new Mass(1, MassUnit.Nanogram).ToString(swedishCulture));
            Assert.Equal("1 oz", new Mass(1, MassUnit.Ounce).ToString(swedishCulture));
            Assert.Equal("1 pg", new Mass(1, MassUnit.Picogram).ToString(swedishCulture));
            Assert.Equal("1 lb", new Mass(1, MassUnit.Pound).ToString(swedishCulture));
            Assert.Equal("1 cwt", new Mass(1, MassUnit.ShortHundredweight).ToString(swedishCulture));
            Assert.Equal("1 t (short)", new Mass(1, MassUnit.ShortTon).ToString(swedishCulture));
            Assert.Equal("1 slug", new Mass(1, MassUnit.Slug).ToString(swedishCulture));
            Assert.Equal("1 M☉", new Mass(1, MassUnit.SolarMass).ToString(swedishCulture));
            Assert.Equal("1 st", new Mass(1, MassUnit.Stone).ToString(swedishCulture));
            Assert.Equal("1 t", new Mass(1, MassUnit.Tonne).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s1"));
            Assert.Equal("0.12 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s2"));
            Assert.Equal("0.123 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s3"));
            Assert.Equal("0.1235 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s1", culture));
            Assert.Equal("0.12 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s2", culture));
            Assert.Equal("0.123 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s3", culture));
            Assert.Equal("0.1235 kg", new Mass(0.123456, MassUnit.Kilogram).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Mass.FromKilograms(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Mass.FromKilograms(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Mass.FromKilograms(value);
            Assert.Equal(Mass.FromKilograms(-value), -quantity);
        }
    }
}
