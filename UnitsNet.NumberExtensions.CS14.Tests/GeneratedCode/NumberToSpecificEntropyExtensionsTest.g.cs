//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToSpecificEntropy;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToSpecificEntropyExtensionsTests
    {
        [Fact]
        public void NumberToBtusPerPoundFahrenheitTest() =>
            Assert.Equal(SpecificEntropy.FromBtusPerPoundFahrenheit(2), 2.BtusPerPoundFahrenheit);

        [Fact]
        public void NumberToCaloriesPerGramKelvinTest() =>
            Assert.Equal(SpecificEntropy.FromCaloriesPerGramKelvin(2), 2.CaloriesPerGramKelvin);

        [Fact]
        public void NumberToJoulesPerKilogramDegreeCelsiusTest() =>
            Assert.Equal(SpecificEntropy.FromJoulesPerKilogramDegreeCelsius(2), 2.JoulesPerKilogramDegreeCelsius);

        [Fact]
        public void NumberToJoulesPerKilogramKelvinTest() =>
            Assert.Equal(SpecificEntropy.FromJoulesPerKilogramKelvin(2), 2.JoulesPerKilogramKelvin);

        [Fact]
        public void NumberToKilocaloriesPerGramKelvinTest() =>
            Assert.Equal(SpecificEntropy.FromKilocaloriesPerGramKelvin(2), 2.KilocaloriesPerGramKelvin);

        [Fact]
        public void NumberToKilojoulesPerKilogramDegreeCelsiusTest() =>
            Assert.Equal(SpecificEntropy.FromKilojoulesPerKilogramDegreeCelsius(2), 2.KilojoulesPerKilogramDegreeCelsius);

        [Fact]
        public void NumberToKilojoulesPerKilogramKelvinTest() =>
            Assert.Equal(SpecificEntropy.FromKilojoulesPerKilogramKelvin(2), 2.KilojoulesPerKilogramKelvin);

        [Fact]
        public void NumberToMegajoulesPerKilogramDegreeCelsiusTest() =>
            Assert.Equal(SpecificEntropy.FromMegajoulesPerKilogramDegreeCelsius(2), 2.MegajoulesPerKilogramDegreeCelsius);

        [Fact]
        public void NumberToMegajoulesPerKilogramKelvinTest() =>
            Assert.Equal(SpecificEntropy.FromMegajoulesPerKilogramKelvin(2), 2.MegajoulesPerKilogramKelvin);

    }
}
