//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of VolumeConcentration.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class VolumeConcentrationTestsBase : QuantityTestsBase
    {
        protected abstract double CentilitersPerLiterInOneDecimalFraction { get; }
        protected abstract double CentilitersPerMilliliterInOneDecimalFraction { get; }
        protected abstract double DecilitersPerLiterInOneDecimalFraction { get; }
        protected abstract double DecilitersPerMilliliterInOneDecimalFraction { get; }
        protected abstract double DecimalFractionsInOneDecimalFraction { get; }
        protected abstract double LitersPerLiterInOneDecimalFraction { get; }
        protected abstract double LitersPerMilliliterInOneDecimalFraction { get; }
        protected abstract double MicrolitersPerLiterInOneDecimalFraction { get; }
        protected abstract double MicrolitersPerMilliliterInOneDecimalFraction { get; }
        protected abstract double MillilitersPerLiterInOneDecimalFraction { get; }
        protected abstract double MillilitersPerMilliliterInOneDecimalFraction { get; }
        protected abstract double NanolitersPerLiterInOneDecimalFraction { get; }
        protected abstract double NanolitersPerMilliliterInOneDecimalFraction { get; }
        protected abstract double PartsPerBillionInOneDecimalFraction { get; }
        protected abstract double PartsPerMillionInOneDecimalFraction { get; }
        protected abstract double PartsPerThousandInOneDecimalFraction { get; }
        protected abstract double PartsPerTrillionInOneDecimalFraction { get; }
        protected abstract double PercentInOneDecimalFraction { get; }
        protected abstract double PicolitersPerLiterInOneDecimalFraction { get; }
        protected abstract double PicolitersPerMilliliterInOneDecimalFraction { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentilitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double CentilitersPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double DecilitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double DecilitersPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double DecimalFractionsTolerance { get { return 1e-5; } }
        protected virtual double LitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double LitersPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double MillilitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MillilitersPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double NanolitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double NanolitersPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PartsPerBillionTolerance { get { return 1e-5; } }
        protected virtual double PartsPerMillionTolerance { get { return 1e-5; } }
        protected virtual double PartsPerThousandTolerance { get { return 1e-5; } }
        protected virtual double PartsPerTrillionTolerance { get { return 1e-5; } }
        protected virtual double PercentTolerance { get { return 1e-5; } }
        protected virtual double PicolitersPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PicolitersPerMilliliterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(VolumeConcentrationUnit unit)
        {
            return unit switch
            {
                VolumeConcentrationUnit.CentiliterPerLiter => (CentilitersPerLiterInOneDecimalFraction, CentilitersPerLiterTolerance),
                VolumeConcentrationUnit.CentiliterPerMilliliter => (CentilitersPerMilliliterInOneDecimalFraction, CentilitersPerMilliliterTolerance),
                VolumeConcentrationUnit.DeciliterPerLiter => (DecilitersPerLiterInOneDecimalFraction, DecilitersPerLiterTolerance),
                VolumeConcentrationUnit.DeciliterPerMilliliter => (DecilitersPerMilliliterInOneDecimalFraction, DecilitersPerMilliliterTolerance),
                VolumeConcentrationUnit.DecimalFraction => (DecimalFractionsInOneDecimalFraction, DecimalFractionsTolerance),
                VolumeConcentrationUnit.LiterPerLiter => (LitersPerLiterInOneDecimalFraction, LitersPerLiterTolerance),
                VolumeConcentrationUnit.LiterPerMilliliter => (LitersPerMilliliterInOneDecimalFraction, LitersPerMilliliterTolerance),
                VolumeConcentrationUnit.MicroliterPerLiter => (MicrolitersPerLiterInOneDecimalFraction, MicrolitersPerLiterTolerance),
                VolumeConcentrationUnit.MicroliterPerMilliliter => (MicrolitersPerMilliliterInOneDecimalFraction, MicrolitersPerMilliliterTolerance),
                VolumeConcentrationUnit.MilliliterPerLiter => (MillilitersPerLiterInOneDecimalFraction, MillilitersPerLiterTolerance),
                VolumeConcentrationUnit.MilliliterPerMilliliter => (MillilitersPerMilliliterInOneDecimalFraction, MillilitersPerMilliliterTolerance),
                VolumeConcentrationUnit.NanoliterPerLiter => (NanolitersPerLiterInOneDecimalFraction, NanolitersPerLiterTolerance),
                VolumeConcentrationUnit.NanoliterPerMilliliter => (NanolitersPerMilliliterInOneDecimalFraction, NanolitersPerMilliliterTolerance),
                VolumeConcentrationUnit.PartPerBillion => (PartsPerBillionInOneDecimalFraction, PartsPerBillionTolerance),
                VolumeConcentrationUnit.PartPerMillion => (PartsPerMillionInOneDecimalFraction, PartsPerMillionTolerance),
                VolumeConcentrationUnit.PartPerThousand => (PartsPerThousandInOneDecimalFraction, PartsPerThousandTolerance),
                VolumeConcentrationUnit.PartPerTrillion => (PartsPerTrillionInOneDecimalFraction, PartsPerTrillionTolerance),
                VolumeConcentrationUnit.Percent => (PercentInOneDecimalFraction, PercentTolerance),
                VolumeConcentrationUnit.PicoliterPerLiter => (PicolitersPerLiterInOneDecimalFraction, PicolitersPerLiterTolerance),
                VolumeConcentrationUnit.PicoliterPerMilliliter => (PicolitersPerMilliliterInOneDecimalFraction, PicolitersPerMilliliterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { VolumeConcentrationUnit.CentiliterPerLiter },
            new object[] { VolumeConcentrationUnit.CentiliterPerMilliliter },
            new object[] { VolumeConcentrationUnit.DeciliterPerLiter },
            new object[] { VolumeConcentrationUnit.DeciliterPerMilliliter },
            new object[] { VolumeConcentrationUnit.DecimalFraction },
            new object[] { VolumeConcentrationUnit.LiterPerLiter },
            new object[] { VolumeConcentrationUnit.LiterPerMilliliter },
            new object[] { VolumeConcentrationUnit.MicroliterPerLiter },
            new object[] { VolumeConcentrationUnit.MicroliterPerMilliliter },
            new object[] { VolumeConcentrationUnit.MilliliterPerLiter },
            new object[] { VolumeConcentrationUnit.MilliliterPerMilliliter },
            new object[] { VolumeConcentrationUnit.NanoliterPerLiter },
            new object[] { VolumeConcentrationUnit.NanoliterPerMilliliter },
            new object[] { VolumeConcentrationUnit.PartPerBillion },
            new object[] { VolumeConcentrationUnit.PartPerMillion },
            new object[] { VolumeConcentrationUnit.PartPerThousand },
            new object[] { VolumeConcentrationUnit.PartPerTrillion },
            new object[] { VolumeConcentrationUnit.Percent },
            new object[] { VolumeConcentrationUnit.PicoliterPerLiter },
            new object[] { VolumeConcentrationUnit.PicoliterPerMilliliter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new VolumeConcentration();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(VolumeConcentrationUnit.DecimalFraction, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new VolumeConcentration(double.PositiveInfinity, VolumeConcentrationUnit.DecimalFraction));
            var exception2 = Record.Exception(() => new VolumeConcentration(double.NegativeInfinity, VolumeConcentrationUnit.DecimalFraction));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new VolumeConcentration(double.NaN, VolumeConcentrationUnit.DecimalFraction));

            Assert.Null(exception);
        }

        [Fact]
        public void VolumeConcentration_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            VolumeConcentrationUnit[] unitsOrderedByName = EnumHelper.GetValues<VolumeConcentrationUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new VolumeConcentration(1, VolumeConcentrationUnit.DecimalFraction);

            QuantityInfo<VolumeConcentration, VolumeConcentrationUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("VolumeConcentration", quantityInfo.Name);
            Assert.Equal(VolumeConcentration.Zero, quantityInfo.Zero);
            Assert.Equal(VolumeConcentration.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(VolumeConcentration.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<VolumeConcentrationUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void DecimalFractionToVolumeConcentrationUnits()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            AssertEx.EqualTolerance(CentilitersPerLiterInOneDecimalFraction, decimalfraction.CentilitersPerLiter, CentilitersPerLiterTolerance);
            AssertEx.EqualTolerance(CentilitersPerMilliliterInOneDecimalFraction, decimalfraction.CentilitersPerMilliliter, CentilitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecilitersPerLiterInOneDecimalFraction, decimalfraction.DecilitersPerLiter, DecilitersPerLiterTolerance);
            AssertEx.EqualTolerance(DecilitersPerMilliliterInOneDecimalFraction, decimalfraction.DecilitersPerMilliliter, DecilitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecimalFractionsInOneDecimalFraction, decimalfraction.DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(LitersPerLiterInOneDecimalFraction, decimalfraction.LitersPerLiter, LitersPerLiterTolerance);
            AssertEx.EqualTolerance(LitersPerMilliliterInOneDecimalFraction, decimalfraction.LitersPerMilliliter, LitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(MicrolitersPerLiterInOneDecimalFraction, decimalfraction.MicrolitersPerLiter, MicrolitersPerLiterTolerance);
            AssertEx.EqualTolerance(MicrolitersPerMilliliterInOneDecimalFraction, decimalfraction.MicrolitersPerMilliliter, MicrolitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(MillilitersPerLiterInOneDecimalFraction, decimalfraction.MillilitersPerLiter, MillilitersPerLiterTolerance);
            AssertEx.EqualTolerance(MillilitersPerMilliliterInOneDecimalFraction, decimalfraction.MillilitersPerMilliliter, MillilitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanolitersPerLiterInOneDecimalFraction, decimalfraction.NanolitersPerLiter, NanolitersPerLiterTolerance);
            AssertEx.EqualTolerance(NanolitersPerMilliliterInOneDecimalFraction, decimalfraction.NanolitersPerMilliliter, NanolitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(PartsPerBillionInOneDecimalFraction, decimalfraction.PartsPerBillion, PartsPerBillionTolerance);
            AssertEx.EqualTolerance(PartsPerMillionInOneDecimalFraction, decimalfraction.PartsPerMillion, PartsPerMillionTolerance);
            AssertEx.EqualTolerance(PartsPerThousandInOneDecimalFraction, decimalfraction.PartsPerThousand, PartsPerThousandTolerance);
            AssertEx.EqualTolerance(PartsPerTrillionInOneDecimalFraction, decimalfraction.PartsPerTrillion, PartsPerTrillionTolerance);
            AssertEx.EqualTolerance(PercentInOneDecimalFraction, decimalfraction.Percent, PercentTolerance);
            AssertEx.EqualTolerance(PicolitersPerLiterInOneDecimalFraction, decimalfraction.PicolitersPerLiter, PicolitersPerLiterTolerance);
            AssertEx.EqualTolerance(PicolitersPerMilliliterInOneDecimalFraction, decimalfraction.PicolitersPerMilliliter, PicolitersPerMilliliterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<VolumeConcentrationUnit>(), unit =>
            {
                var quantity = VolumeConcentration.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromDecimalFractions_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => VolumeConcentration.FromDecimalFractions(double.PositiveInfinity));
            var exception2 = Record.Exception(() => VolumeConcentration.FromDecimalFractions(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromDecimalFractions_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => VolumeConcentration.FromDecimalFractions(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            AssertEx.EqualTolerance(CentilitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.CentiliterPerLiter), CentilitersPerLiterTolerance);
            AssertEx.EqualTolerance(CentilitersPerMilliliterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.CentiliterPerMilliliter), CentilitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecilitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.DeciliterPerLiter), DecilitersPerLiterTolerance);
            AssertEx.EqualTolerance(DecilitersPerMilliliterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.DeciliterPerMilliliter), DecilitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecimalFractionsInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.DecimalFraction), DecimalFractionsTolerance);
            AssertEx.EqualTolerance(LitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.LiterPerLiter), LitersPerLiterTolerance);
            AssertEx.EqualTolerance(LitersPerMilliliterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.LiterPerMilliliter), LitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(MicrolitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.MicroliterPerLiter), MicrolitersPerLiterTolerance);
            AssertEx.EqualTolerance(MicrolitersPerMilliliterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.MicroliterPerMilliliter), MicrolitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(MillilitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.MilliliterPerLiter), MillilitersPerLiterTolerance);
            AssertEx.EqualTolerance(MillilitersPerMilliliterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.MilliliterPerMilliliter), MillilitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanolitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.NanoliterPerLiter), NanolitersPerLiterTolerance);
            AssertEx.EqualTolerance(NanolitersPerMilliliterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.NanoliterPerMilliliter), NanolitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(PartsPerBillionInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PartPerBillion), PartsPerBillionTolerance);
            AssertEx.EqualTolerance(PartsPerMillionInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PartPerMillion), PartsPerMillionTolerance);
            AssertEx.EqualTolerance(PartsPerThousandInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PartPerThousand), PartsPerThousandTolerance);
            AssertEx.EqualTolerance(PartsPerTrillionInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PartPerTrillion), PartsPerTrillionTolerance);
            AssertEx.EqualTolerance(PercentInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.Percent), PercentTolerance);
            AssertEx.EqualTolerance(PicolitersPerLiterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PicoliterPerLiter), PicolitersPerLiterTolerance);
            AssertEx.EqualTolerance(PicolitersPerMilliliterInOneDecimalFraction, decimalfraction.As(VolumeConcentrationUnit.PicoliterPerMilliliter), PicolitersPerMilliliterTolerance);
        }

        [Fact]
        public void As_UnitSystem_ReturnsValueInDimensionlessUnit()
        {
            var quantity = new VolumeConcentration(value: 1, unit: VolumeConcentrationUnit.DecimalFraction);

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(quantity.Value, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new VolumeConcentration(value: 1, unit: VolumeConcentration.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void ToUnit_UnitSystem_ReturnsValueInDimensionlessUnit()
        {
            Assert.Multiple(() =>
            {
                var quantity = new VolumeConcentration(value: 1, unit: VolumeConcentrationUnit.DecimalFraction);

                VolumeConcentration convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(VolumeConcentrationUnit.DecimalFraction, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<VolumeConcentrationUnit> quantity = new VolumeConcentration(value: 1, unit: VolumeConcentrationUnit.DecimalFraction);

                IQuantity<VolumeConcentrationUnit> convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(VolumeConcentrationUnit.DecimalFraction, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnitUntyped_UnitSystem_ReturnsValueInDimensionlessUnit()
        {
            IQuantity quantity = new VolumeConcentration(value: 1, unit: VolumeConcentrationUnit.DecimalFraction);

            IQuantity convertedQuantity = quantity.ToUnitUntyped(UnitSystem.SI);

            Assert.Equal(VolumeConcentrationUnit.DecimalFraction, convertedQuantity.Unit);
            Assert.Equal(quantity.Value, convertedQuantity.Value);
        }


        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new VolumeConcentration(value: 1, unit: VolumeConcentration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnitUntyped(nullUnitSystem));
            }, () =>
            {
                IQuantity<VolumeConcentrationUnit> quantity = new VolumeConcentration(value: 1, unit: VolumeConcentration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnitUntyped(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new VolumeConcentration(value: 1, unit: VolumeConcentration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnitUntyped(nullUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cl/l", VolumeConcentrationUnit.CentiliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 dl/l", VolumeConcentrationUnit.DeciliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 ", VolumeConcentrationUnit.DecimalFraction, 4.2)]
        [InlineData("en-US", "4.2 l/l", VolumeConcentrationUnit.LiterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 l/ml", VolumeConcentrationUnit.LiterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 µl/l", VolumeConcentrationUnit.MicroliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 ml/l", VolumeConcentrationUnit.MilliliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 nl/l", VolumeConcentrationUnit.NanoliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 ppb", VolumeConcentrationUnit.PartPerBillion, 4.2)]
        [InlineData("en-US", "4.2 ppm", VolumeConcentrationUnit.PartPerMillion, 4.2)]
        [InlineData("en-US", "4.2 ‰", VolumeConcentrationUnit.PartPerThousand, 4.2)]
        [InlineData("en-US", "4.2 ppt", VolumeConcentrationUnit.PartPerTrillion, 4.2)]
        [InlineData("en-US", "4.2 %", VolumeConcentrationUnit.Percent, 4.2)]
        [InlineData("en-US", "4.2 % (v/v)", VolumeConcentrationUnit.Percent, 4.2)]
        [InlineData("en-US", "4.2 pl/l", VolumeConcentrationUnit.PicoliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter, 4.2)]
        public void Parse(string culture, string quantityString, VolumeConcentrationUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = VolumeConcentration.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 cl/l", VolumeConcentrationUnit.CentiliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 dl/l", VolumeConcentrationUnit.DeciliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 ", VolumeConcentrationUnit.DecimalFraction, 4.2)]
        [InlineData("en-US", "4.2 l/l", VolumeConcentrationUnit.LiterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 l/ml", VolumeConcentrationUnit.LiterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 µl/l", VolumeConcentrationUnit.MicroliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 ml/l", VolumeConcentrationUnit.MilliliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 nl/l", VolumeConcentrationUnit.NanoliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter, 4.2)]
        [InlineData("en-US", "4.2 ppb", VolumeConcentrationUnit.PartPerBillion, 4.2)]
        [InlineData("en-US", "4.2 ppm", VolumeConcentrationUnit.PartPerMillion, 4.2)]
        [InlineData("en-US", "4.2 ‰", VolumeConcentrationUnit.PartPerThousand, 4.2)]
        [InlineData("en-US", "4.2 ppt", VolumeConcentrationUnit.PartPerTrillion, 4.2)]
        [InlineData("en-US", "4.2 %", VolumeConcentrationUnit.Percent, 4.2)]
        [InlineData("en-US", "4.2 % (v/v)", VolumeConcentrationUnit.Percent, 4.2)]
        [InlineData("en-US", "4.2 pl/l", VolumeConcentrationUnit.PicoliterPerLiter, 4.2)]
        [InlineData("en-US", "4.2 pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter, 4.2)]
        public void TryParse(string culture, string quantityString, VolumeConcentrationUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(VolumeConcentration.TryParse(quantityString, out VolumeConcentration parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("cl/l", VolumeConcentrationUnit.CentiliterPerLiter)]
        [InlineData("cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter)]
        [InlineData("dl/l", VolumeConcentrationUnit.DeciliterPerLiter)]
        [InlineData("dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter)]
        [InlineData("", VolumeConcentrationUnit.DecimalFraction)]
        [InlineData("l/l", VolumeConcentrationUnit.LiterPerLiter)]
        [InlineData("l/ml", VolumeConcentrationUnit.LiterPerMilliliter)]
        [InlineData("µl/l", VolumeConcentrationUnit.MicroliterPerLiter)]
        [InlineData("µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter)]
        [InlineData("ml/l", VolumeConcentrationUnit.MilliliterPerLiter)]
        [InlineData("ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter)]
        [InlineData("nl/l", VolumeConcentrationUnit.NanoliterPerLiter)]
        [InlineData("nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter)]
        [InlineData("ppb", VolumeConcentrationUnit.PartPerBillion)]
        [InlineData("ppm", VolumeConcentrationUnit.PartPerMillion)]
        [InlineData("‰", VolumeConcentrationUnit.PartPerThousand)]
        [InlineData("ppt", VolumeConcentrationUnit.PartPerTrillion)]
        [InlineData("%", VolumeConcentrationUnit.Percent)]
        [InlineData("% (v/v)", VolumeConcentrationUnit.Percent)]
        [InlineData("pl/l", VolumeConcentrationUnit.PicoliterPerLiter)]
        [InlineData("pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, VolumeConcentrationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            VolumeConcentrationUnit parsedUnit = VolumeConcentration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cl/l", VolumeConcentrationUnit.CentiliterPerLiter)]
        [InlineData("cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter)]
        [InlineData("dl/l", VolumeConcentrationUnit.DeciliterPerLiter)]
        [InlineData("dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter)]
        [InlineData("", VolumeConcentrationUnit.DecimalFraction)]
        [InlineData("l/l", VolumeConcentrationUnit.LiterPerLiter)]
        [InlineData("l/ml", VolumeConcentrationUnit.LiterPerMilliliter)]
        [InlineData("µl/l", VolumeConcentrationUnit.MicroliterPerLiter)]
        [InlineData("µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter)]
        [InlineData("ml/l", VolumeConcentrationUnit.MilliliterPerLiter)]
        [InlineData("ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter)]
        [InlineData("nl/l", VolumeConcentrationUnit.NanoliterPerLiter)]
        [InlineData("nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter)]
        [InlineData("ppb", VolumeConcentrationUnit.PartPerBillion)]
        [InlineData("ppm", VolumeConcentrationUnit.PartPerMillion)]
        [InlineData("‰", VolumeConcentrationUnit.PartPerThousand)]
        [InlineData("ppt", VolumeConcentrationUnit.PartPerTrillion)]
        [InlineData("%", VolumeConcentrationUnit.Percent)]
        [InlineData("% (v/v)", VolumeConcentrationUnit.Percent)]
        [InlineData("pl/l", VolumeConcentrationUnit.PicoliterPerLiter)]
        [InlineData("pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, VolumeConcentrationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            VolumeConcentrationUnit parsedUnit = VolumeConcentration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cl/l", VolumeConcentrationUnit.CentiliterPerLiter)]
        [InlineData("en-US", "cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter)]
        [InlineData("en-US", "dl/l", VolumeConcentrationUnit.DeciliterPerLiter)]
        [InlineData("en-US", "dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter)]
        [InlineData("en-US", "", VolumeConcentrationUnit.DecimalFraction)]
        [InlineData("en-US", "l/l", VolumeConcentrationUnit.LiterPerLiter)]
        [InlineData("en-US", "l/ml", VolumeConcentrationUnit.LiterPerMilliliter)]
        [InlineData("en-US", "µl/l", VolumeConcentrationUnit.MicroliterPerLiter)]
        [InlineData("en-US", "µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter)]
        [InlineData("en-US", "ml/l", VolumeConcentrationUnit.MilliliterPerLiter)]
        [InlineData("en-US", "ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter)]
        [InlineData("en-US", "nl/l", VolumeConcentrationUnit.NanoliterPerLiter)]
        [InlineData("en-US", "nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter)]
        [InlineData("en-US", "ppb", VolumeConcentrationUnit.PartPerBillion)]
        [InlineData("en-US", "ppm", VolumeConcentrationUnit.PartPerMillion)]
        [InlineData("en-US", "‰", VolumeConcentrationUnit.PartPerThousand)]
        [InlineData("en-US", "ppt", VolumeConcentrationUnit.PartPerTrillion)]
        [InlineData("en-US", "%", VolumeConcentrationUnit.Percent)]
        [InlineData("en-US", "% (v/v)", VolumeConcentrationUnit.Percent)]
        [InlineData("en-US", "pl/l", VolumeConcentrationUnit.PicoliterPerLiter)]
        [InlineData("en-US", "pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, VolumeConcentrationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            VolumeConcentrationUnit parsedUnit = VolumeConcentration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cl/l", VolumeConcentrationUnit.CentiliterPerLiter)]
        [InlineData("en-US", "cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter)]
        [InlineData("en-US", "dl/l", VolumeConcentrationUnit.DeciliterPerLiter)]
        [InlineData("en-US", "dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter)]
        [InlineData("en-US", "", VolumeConcentrationUnit.DecimalFraction)]
        [InlineData("en-US", "l/l", VolumeConcentrationUnit.LiterPerLiter)]
        [InlineData("en-US", "l/ml", VolumeConcentrationUnit.LiterPerMilliliter)]
        [InlineData("en-US", "µl/l", VolumeConcentrationUnit.MicroliterPerLiter)]
        [InlineData("en-US", "µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter)]
        [InlineData("en-US", "ml/l", VolumeConcentrationUnit.MilliliterPerLiter)]
        [InlineData("en-US", "ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter)]
        [InlineData("en-US", "nl/l", VolumeConcentrationUnit.NanoliterPerLiter)]
        [InlineData("en-US", "nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter)]
        [InlineData("en-US", "ppb", VolumeConcentrationUnit.PartPerBillion)]
        [InlineData("en-US", "ppm", VolumeConcentrationUnit.PartPerMillion)]
        [InlineData("en-US", "‰", VolumeConcentrationUnit.PartPerThousand)]
        [InlineData("en-US", "ppt", VolumeConcentrationUnit.PartPerTrillion)]
        [InlineData("en-US", "%", VolumeConcentrationUnit.Percent)]
        [InlineData("en-US", "% (v/v)", VolumeConcentrationUnit.Percent)]
        [InlineData("en-US", "pl/l", VolumeConcentrationUnit.PicoliterPerLiter)]
        [InlineData("en-US", "pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, VolumeConcentrationUnit expectedUnit)
        {
            VolumeConcentrationUnit parsedUnit = VolumeConcentration.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cl/l", VolumeConcentrationUnit.CentiliterPerLiter)]
        [InlineData("cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter)]
        [InlineData("dl/l", VolumeConcentrationUnit.DeciliterPerLiter)]
        [InlineData("dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter)]
        [InlineData("", VolumeConcentrationUnit.DecimalFraction)]
        [InlineData("l/l", VolumeConcentrationUnit.LiterPerLiter)]
        [InlineData("l/ml", VolumeConcentrationUnit.LiterPerMilliliter)]
        [InlineData("µl/l", VolumeConcentrationUnit.MicroliterPerLiter)]
        [InlineData("µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter)]
        [InlineData("ml/l", VolumeConcentrationUnit.MilliliterPerLiter)]
        [InlineData("ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter)]
        [InlineData("nl/l", VolumeConcentrationUnit.NanoliterPerLiter)]
        [InlineData("nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter)]
        [InlineData("ppb", VolumeConcentrationUnit.PartPerBillion)]
        [InlineData("ppm", VolumeConcentrationUnit.PartPerMillion)]
        [InlineData("‰", VolumeConcentrationUnit.PartPerThousand)]
        [InlineData("ppt", VolumeConcentrationUnit.PartPerTrillion)]
        [InlineData("%", VolumeConcentrationUnit.Percent)]
        [InlineData("% (v/v)", VolumeConcentrationUnit.Percent)]
        [InlineData("pl/l", VolumeConcentrationUnit.PicoliterPerLiter)]
        [InlineData("pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, VolumeConcentrationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(VolumeConcentration.TryParseUnit(abbreviation, out VolumeConcentrationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cl/l", VolumeConcentrationUnit.CentiliterPerLiter)]
        [InlineData("cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter)]
        [InlineData("dl/l", VolumeConcentrationUnit.DeciliterPerLiter)]
        [InlineData("dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter)]
        [InlineData("", VolumeConcentrationUnit.DecimalFraction)]
        [InlineData("l/l", VolumeConcentrationUnit.LiterPerLiter)]
        [InlineData("l/ml", VolumeConcentrationUnit.LiterPerMilliliter)]
        [InlineData("µl/l", VolumeConcentrationUnit.MicroliterPerLiter)]
        [InlineData("µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter)]
        [InlineData("ml/l", VolumeConcentrationUnit.MilliliterPerLiter)]
        [InlineData("ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter)]
        [InlineData("nl/l", VolumeConcentrationUnit.NanoliterPerLiter)]
        [InlineData("nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter)]
        [InlineData("ppb", VolumeConcentrationUnit.PartPerBillion)]
        [InlineData("ppm", VolumeConcentrationUnit.PartPerMillion)]
        [InlineData("‰", VolumeConcentrationUnit.PartPerThousand)]
        [InlineData("ppt", VolumeConcentrationUnit.PartPerTrillion)]
        [InlineData("%", VolumeConcentrationUnit.Percent)]
        [InlineData("% (v/v)", VolumeConcentrationUnit.Percent)]
        [InlineData("pl/l", VolumeConcentrationUnit.PicoliterPerLiter)]
        [InlineData("pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, VolumeConcentrationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(VolumeConcentration.TryParseUnit(abbreviation, out VolumeConcentrationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cl/l", VolumeConcentrationUnit.CentiliterPerLiter)]
        [InlineData("en-US", "cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter)]
        [InlineData("en-US", "dl/l", VolumeConcentrationUnit.DeciliterPerLiter)]
        [InlineData("en-US", "dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter)]
        [InlineData("en-US", "", VolumeConcentrationUnit.DecimalFraction)]
        [InlineData("en-US", "l/l", VolumeConcentrationUnit.LiterPerLiter)]
        [InlineData("en-US", "l/ml", VolumeConcentrationUnit.LiterPerMilliliter)]
        [InlineData("en-US", "µl/l", VolumeConcentrationUnit.MicroliterPerLiter)]
        [InlineData("en-US", "µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter)]
        [InlineData("en-US", "ml/l", VolumeConcentrationUnit.MilliliterPerLiter)]
        [InlineData("en-US", "ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter)]
        [InlineData("en-US", "nl/l", VolumeConcentrationUnit.NanoliterPerLiter)]
        [InlineData("en-US", "nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter)]
        [InlineData("en-US", "ppb", VolumeConcentrationUnit.PartPerBillion)]
        [InlineData("en-US", "ppm", VolumeConcentrationUnit.PartPerMillion)]
        [InlineData("en-US", "‰", VolumeConcentrationUnit.PartPerThousand)]
        [InlineData("en-US", "ppt", VolumeConcentrationUnit.PartPerTrillion)]
        [InlineData("en-US", "%", VolumeConcentrationUnit.Percent)]
        [InlineData("en-US", "% (v/v)", VolumeConcentrationUnit.Percent)]
        [InlineData("en-US", "pl/l", VolumeConcentrationUnit.PicoliterPerLiter)]
        [InlineData("en-US", "pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, VolumeConcentrationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(VolumeConcentration.TryParseUnit(abbreviation, out VolumeConcentrationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cl/l", VolumeConcentrationUnit.CentiliterPerLiter)]
        [InlineData("en-US", "cl/ml", VolumeConcentrationUnit.CentiliterPerMilliliter)]
        [InlineData("en-US", "dl/l", VolumeConcentrationUnit.DeciliterPerLiter)]
        [InlineData("en-US", "dl/ml", VolumeConcentrationUnit.DeciliterPerMilliliter)]
        [InlineData("en-US", "", VolumeConcentrationUnit.DecimalFraction)]
        [InlineData("en-US", "l/l", VolumeConcentrationUnit.LiterPerLiter)]
        [InlineData("en-US", "l/ml", VolumeConcentrationUnit.LiterPerMilliliter)]
        [InlineData("en-US", "µl/l", VolumeConcentrationUnit.MicroliterPerLiter)]
        [InlineData("en-US", "µl/ml", VolumeConcentrationUnit.MicroliterPerMilliliter)]
        [InlineData("en-US", "ml/l", VolumeConcentrationUnit.MilliliterPerLiter)]
        [InlineData("en-US", "ml/ml", VolumeConcentrationUnit.MilliliterPerMilliliter)]
        [InlineData("en-US", "nl/l", VolumeConcentrationUnit.NanoliterPerLiter)]
        [InlineData("en-US", "nl/ml", VolumeConcentrationUnit.NanoliterPerMilliliter)]
        [InlineData("en-US", "ppb", VolumeConcentrationUnit.PartPerBillion)]
        [InlineData("en-US", "ppm", VolumeConcentrationUnit.PartPerMillion)]
        [InlineData("en-US", "‰", VolumeConcentrationUnit.PartPerThousand)]
        [InlineData("en-US", "ppt", VolumeConcentrationUnit.PartPerTrillion)]
        [InlineData("en-US", "%", VolumeConcentrationUnit.Percent)]
        [InlineData("en-US", "% (v/v)", VolumeConcentrationUnit.Percent)]
        [InlineData("en-US", "pl/l", VolumeConcentrationUnit.PicoliterPerLiter)]
        [InlineData("en-US", "pl/ml", VolumeConcentrationUnit.PicoliterPerMilliliter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, VolumeConcentrationUnit expectedUnit)
        {
            Assert.True(VolumeConcentration.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out VolumeConcentrationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", VolumeConcentrationUnit.CentiliterPerLiter, "cl/l")]
        [InlineData("en-US", VolumeConcentrationUnit.CentiliterPerMilliliter, "cl/ml")]
        [InlineData("en-US", VolumeConcentrationUnit.DeciliterPerLiter, "dl/l")]
        [InlineData("en-US", VolumeConcentrationUnit.DeciliterPerMilliliter, "dl/ml")]
        [InlineData("en-US", VolumeConcentrationUnit.DecimalFraction, "")]
        [InlineData("en-US", VolumeConcentrationUnit.LiterPerLiter, "l/l")]
        [InlineData("en-US", VolumeConcentrationUnit.LiterPerMilliliter, "l/ml")]
        [InlineData("en-US", VolumeConcentrationUnit.MicroliterPerLiter, "µl/l")]
        [InlineData("en-US", VolumeConcentrationUnit.MicroliterPerMilliliter, "µl/ml")]
        [InlineData("en-US", VolumeConcentrationUnit.MilliliterPerLiter, "ml/l")]
        [InlineData("en-US", VolumeConcentrationUnit.MilliliterPerMilliliter, "ml/ml")]
        [InlineData("en-US", VolumeConcentrationUnit.NanoliterPerLiter, "nl/l")]
        [InlineData("en-US", VolumeConcentrationUnit.NanoliterPerMilliliter, "nl/ml")]
        [InlineData("en-US", VolumeConcentrationUnit.PartPerBillion, "ppb")]
        [InlineData("en-US", VolumeConcentrationUnit.PartPerMillion, "ppm")]
        [InlineData("en-US", VolumeConcentrationUnit.PartPerThousand, "‰")]
        [InlineData("en-US", VolumeConcentrationUnit.PartPerTrillion, "ppt")]
        [InlineData("en-US", VolumeConcentrationUnit.Percent, "%")]
        [InlineData("en-US", VolumeConcentrationUnit.PicoliterPerLiter, "pl/l")]
        [InlineData("en-US", VolumeConcentrationUnit.PicoliterPerMilliliter, "pl/ml")]
        public void GetAbbreviationForCulture(string culture, VolumeConcentrationUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = VolumeConcentration.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(VolumeConcentration.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = VolumeConcentration.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(VolumeConcentrationUnit unit)
        {
            var inBaseUnits = VolumeConcentration.From(1.0, VolumeConcentration.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(VolumeConcentrationUnit unit)
        {
            var quantity = VolumeConcentration.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(VolumeConcentrationUnit unit)
        {
            Assert.All(VolumeConcentration.Units.Where(u => u != VolumeConcentration.BaseUnit), fromUnit =>
            {
                var quantity = VolumeConcentration.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(VolumeConcentrationUnit unit)
        {
            var quantity = default(VolumeConcentration);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(VolumeConcentrationUnit unit)
        {
            var quantity = VolumeConcentration.From(3, VolumeConcentration.BaseUnit);
            VolumeConcentration expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<VolumeConcentrationUnit> quantityToConvert = quantity;
                IQuantity<VolumeConcentrationUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromCentilitersPerLiter(decimalfraction.CentilitersPerLiter).DecimalFractions, CentilitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromCentilitersPerMilliliter(decimalfraction.CentilitersPerMilliliter).DecimalFractions, CentilitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromDecilitersPerLiter(decimalfraction.DecilitersPerLiter).DecimalFractions, DecilitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromDecilitersPerMilliliter(decimalfraction.DecilitersPerMilliliter).DecimalFractions, DecilitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromDecimalFractions(decimalfraction.DecimalFractions).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromLitersPerLiter(decimalfraction.LitersPerLiter).DecimalFractions, LitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromLitersPerMilliliter(decimalfraction.LitersPerMilliliter).DecimalFractions, LitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromMicrolitersPerLiter(decimalfraction.MicrolitersPerLiter).DecimalFractions, MicrolitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromMicrolitersPerMilliliter(decimalfraction.MicrolitersPerMilliliter).DecimalFractions, MicrolitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromMillilitersPerLiter(decimalfraction.MillilitersPerLiter).DecimalFractions, MillilitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromMillilitersPerMilliliter(decimalfraction.MillilitersPerMilliliter).DecimalFractions, MillilitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromNanolitersPerLiter(decimalfraction.NanolitersPerLiter).DecimalFractions, NanolitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromNanolitersPerMilliliter(decimalfraction.NanolitersPerMilliliter).DecimalFractions, NanolitersPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPartsPerBillion(decimalfraction.PartsPerBillion).DecimalFractions, PartsPerBillionTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPartsPerMillion(decimalfraction.PartsPerMillion).DecimalFractions, PartsPerMillionTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPartsPerThousand(decimalfraction.PartsPerThousand).DecimalFractions, PartsPerThousandTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPartsPerTrillion(decimalfraction.PartsPerTrillion).DecimalFractions, PartsPerTrillionTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPercent(decimalfraction.Percent).DecimalFractions, PercentTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPicolitersPerLiter(decimalfraction.PicolitersPerLiter).DecimalFractions, PicolitersPerLiterTolerance);
            AssertEx.EqualTolerance(1, VolumeConcentration.FromPicolitersPerMilliliter(decimalfraction.PicolitersPerMilliliter).DecimalFractions, PicolitersPerMilliliterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            VolumeConcentration v = VolumeConcentration.FromDecimalFractions(1);
            AssertEx.EqualTolerance(-1, -v.DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, (VolumeConcentration.FromDecimalFractions(3)-v).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, (v + v).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(10, (v*10).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(10, (10*v).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, (VolumeConcentration.FromDecimalFractions(10)/5).DecimalFractions, DecimalFractionsTolerance);
            AssertEx.EqualTolerance(2, VolumeConcentration.FromDecimalFractions(10)/VolumeConcentration.FromDecimalFractions(5), DecimalFractionsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            VolumeConcentration oneDecimalFraction = VolumeConcentration.FromDecimalFractions(1);
            VolumeConcentration twoDecimalFractions = VolumeConcentration.FromDecimalFractions(2);

            Assert.True(oneDecimalFraction < twoDecimalFractions);
            Assert.True(oneDecimalFraction <= twoDecimalFractions);
            Assert.True(twoDecimalFractions > oneDecimalFraction);
            Assert.True(twoDecimalFractions >= oneDecimalFraction);

            Assert.False(oneDecimalFraction > twoDecimalFractions);
            Assert.False(oneDecimalFraction >= twoDecimalFractions);
            Assert.False(twoDecimalFractions < oneDecimalFraction);
            Assert.False(twoDecimalFractions <= oneDecimalFraction);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.Equal(0, decimalfraction.CompareTo(decimalfraction));
            Assert.True(decimalfraction.CompareTo(VolumeConcentration.Zero) > 0);
            Assert.True(VolumeConcentration.Zero.CompareTo(decimalfraction) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.Throws<ArgumentException>(() => decimalfraction.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.Throws<ArgumentNullException>(() => decimalfraction.CompareTo(null));
        }

        [Theory]
        [InlineData(1, VolumeConcentrationUnit.DecimalFraction, 1, VolumeConcentrationUnit.DecimalFraction, true)]  // Same value and unit.
        [InlineData(1, VolumeConcentrationUnit.DecimalFraction, 2, VolumeConcentrationUnit.DecimalFraction, false)] // Different value.
        [InlineData(2, VolumeConcentrationUnit.DecimalFraction, 1, VolumeConcentrationUnit.CentiliterPerLiter, false)] // Different value and unit.
        [InlineData(1, VolumeConcentrationUnit.DecimalFraction, 1, VolumeConcentrationUnit.CentiliterPerLiter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, VolumeConcentrationUnit unitA, double valueB, VolumeConcentrationUnit unitB, bool expectEqual)
        {
            var a = new VolumeConcentration(valueA, unitA);
            var b = new VolumeConcentration(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = VolumeConcentration.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.False(decimalfraction.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            VolumeConcentration decimalfraction = VolumeConcentration.FromDecimalFractions(1);
            Assert.False(decimalfraction.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = VolumeConcentration.FromDecimalFractions(firstValue);
            var otherQuantity = VolumeConcentration.FromDecimalFractions(secondValue);
            VolumeConcentration maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, VolumeConcentration.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1);
            var negativeTolerance = VolumeConcentration.FromDecimalFractions(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<VolumeConcentrationUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(VolumeConcentration.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cl/l", new VolumeConcentration(1, VolumeConcentrationUnit.CentiliterPerLiter).ToString());
            Assert.Equal("1 cl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.CentiliterPerMilliliter).ToString());
            Assert.Equal("1 dl/l", new VolumeConcentration(1, VolumeConcentrationUnit.DeciliterPerLiter).ToString());
            Assert.Equal("1 dl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.DeciliterPerMilliliter).ToString());
            Assert.Equal("1", new VolumeConcentration(1, VolumeConcentrationUnit.DecimalFraction).ToString());
            Assert.Equal("1 l/l", new VolumeConcentration(1, VolumeConcentrationUnit.LiterPerLiter).ToString());
            Assert.Equal("1 l/ml", new VolumeConcentration(1, VolumeConcentrationUnit.LiterPerMilliliter).ToString());
            Assert.Equal("1 µl/l", new VolumeConcentration(1, VolumeConcentrationUnit.MicroliterPerLiter).ToString());
            Assert.Equal("1 µl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.MicroliterPerMilliliter).ToString());
            Assert.Equal("1 ml/l", new VolumeConcentration(1, VolumeConcentrationUnit.MilliliterPerLiter).ToString());
            Assert.Equal("1 ml/ml", new VolumeConcentration(1, VolumeConcentrationUnit.MilliliterPerMilliliter).ToString());
            Assert.Equal("1 nl/l", new VolumeConcentration(1, VolumeConcentrationUnit.NanoliterPerLiter).ToString());
            Assert.Equal("1 nl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.NanoliterPerMilliliter).ToString());
            Assert.Equal("1 ppb", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerBillion).ToString());
            Assert.Equal("1 ppm", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerMillion).ToString());
            Assert.Equal("1 ‰", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerThousand).ToString());
            Assert.Equal("1 ppt", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerTrillion).ToString());
            Assert.Equal("1 %", new VolumeConcentration(1, VolumeConcentrationUnit.Percent).ToString());
            Assert.Equal("1 pl/l", new VolumeConcentration(1, VolumeConcentrationUnit.PicoliterPerLiter).ToString());
            Assert.Equal("1 pl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.PicoliterPerMilliliter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cl/l", new VolumeConcentration(1, VolumeConcentrationUnit.CentiliterPerLiter).ToString(swedishCulture));
            Assert.Equal("1 cl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.CentiliterPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 dl/l", new VolumeConcentration(1, VolumeConcentrationUnit.DeciliterPerLiter).ToString(swedishCulture));
            Assert.Equal("1 dl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.DeciliterPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1", new VolumeConcentration(1, VolumeConcentrationUnit.DecimalFraction).ToString(swedishCulture));
            Assert.Equal("1 l/l", new VolumeConcentration(1, VolumeConcentrationUnit.LiterPerLiter).ToString(swedishCulture));
            Assert.Equal("1 l/ml", new VolumeConcentration(1, VolumeConcentrationUnit.LiterPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 µl/l", new VolumeConcentration(1, VolumeConcentrationUnit.MicroliterPerLiter).ToString(swedishCulture));
            Assert.Equal("1 µl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.MicroliterPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 ml/l", new VolumeConcentration(1, VolumeConcentrationUnit.MilliliterPerLiter).ToString(swedishCulture));
            Assert.Equal("1 ml/ml", new VolumeConcentration(1, VolumeConcentrationUnit.MilliliterPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 nl/l", new VolumeConcentration(1, VolumeConcentrationUnit.NanoliterPerLiter).ToString(swedishCulture));
            Assert.Equal("1 nl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.NanoliterPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 ppb", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerBillion).ToString(swedishCulture));
            Assert.Equal("1 ppm", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerMillion).ToString(swedishCulture));
            Assert.Equal("1 ‰", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerThousand).ToString(swedishCulture));
            Assert.Equal("1 ppt", new VolumeConcentration(1, VolumeConcentrationUnit.PartPerTrillion).ToString(swedishCulture));
            Assert.Equal("1 %", new VolumeConcentration(1, VolumeConcentrationUnit.Percent).ToString(swedishCulture));
            Assert.Equal("1 pl/l", new VolumeConcentration(1, VolumeConcentrationUnit.PicoliterPerLiter).ToString(swedishCulture));
            Assert.Equal("1 pl/ml", new VolumeConcentration(1, VolumeConcentrationUnit.PicoliterPerMilliliter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s1"));
            Assert.Equal("0.12", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s2"));
            Assert.Equal("0.123", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s3"));
            Assert.Equal("0.1235", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s1", culture));
            Assert.Equal("0.12", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s2", culture));
            Assert.Equal("0.123", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s3", culture));
            Assert.Equal("0.1235", new VolumeConcentration(0.123456, VolumeConcentrationUnit.DecimalFraction).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = VolumeConcentration.FromDecimalFractions(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = VolumeConcentration.FromDecimalFractions(value);
            Assert.Equal(VolumeConcentration.FromDecimalFractions(-value), -quantity);
        }
    }
}
