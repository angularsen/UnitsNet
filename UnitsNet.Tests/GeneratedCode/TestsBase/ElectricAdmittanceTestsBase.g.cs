//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricAdmittance.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricAdmittanceTestsBase : QuantityTestsBase
    {
        protected abstract double GigamhosInOneSiemens { get; }
        protected abstract double GigasiemensInOneSiemens { get; }
        protected abstract double KilomhosInOneSiemens { get; }
        protected abstract double KilosiemensInOneSiemens { get; }
        protected abstract double MegamhosInOneSiemens { get; }
        protected abstract double MegasiemensInOneSiemens { get; }
        protected abstract double MhosInOneSiemens { get; }
        protected abstract double MicromhosInOneSiemens { get; }
        protected abstract double MicrosiemensInOneSiemens { get; }
        protected abstract double MillimhosInOneSiemens { get; }
        protected abstract double MillisiemensInOneSiemens { get; }
        protected abstract double NanomhosInOneSiemens { get; }
        protected abstract double NanosiemensInOneSiemens { get; }
        protected abstract double SiemensInOneSiemens { get; }
        protected abstract double TeramhosInOneSiemens { get; }
        protected abstract double TerasiemensInOneSiemens { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GigamhosTolerance { get { return 1e-5; } }
        protected virtual double GigasiemensTolerance { get { return 1e-5; } }
        protected virtual double KilomhosTolerance { get { return 1e-5; } }
        protected virtual double KilosiemensTolerance { get { return 1e-5; } }
        protected virtual double MegamhosTolerance { get { return 1e-5; } }
        protected virtual double MegasiemensTolerance { get { return 1e-5; } }
        protected virtual double MhosTolerance { get { return 1e-5; } }
        protected virtual double MicromhosTolerance { get { return 1e-5; } }
        protected virtual double MicrosiemensTolerance { get { return 1e-5; } }
        protected virtual double MillimhosTolerance { get { return 1e-5; } }
        protected virtual double MillisiemensTolerance { get { return 1e-5; } }
        protected virtual double NanomhosTolerance { get { return 1e-5; } }
        protected virtual double NanosiemensTolerance { get { return 1e-5; } }
        protected virtual double SiemensTolerance { get { return 1e-5; } }
        protected virtual double TeramhosTolerance { get { return 1e-5; } }
        protected virtual double TerasiemensTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricAdmittanceUnit unit)
        {
            return unit switch
            {
                ElectricAdmittanceUnit.Gigamho => (GigamhosInOneSiemens, GigamhosTolerance),
                ElectricAdmittanceUnit.Gigasiemens => (GigasiemensInOneSiemens, GigasiemensTolerance),
                ElectricAdmittanceUnit.Kilomho => (KilomhosInOneSiemens, KilomhosTolerance),
                ElectricAdmittanceUnit.Kilosiemens => (KilosiemensInOneSiemens, KilosiemensTolerance),
                ElectricAdmittanceUnit.Megamho => (MegamhosInOneSiemens, MegamhosTolerance),
                ElectricAdmittanceUnit.Megasiemens => (MegasiemensInOneSiemens, MegasiemensTolerance),
                ElectricAdmittanceUnit.Mho => (MhosInOneSiemens, MhosTolerance),
                ElectricAdmittanceUnit.Micromho => (MicromhosInOneSiemens, MicromhosTolerance),
                ElectricAdmittanceUnit.Microsiemens => (MicrosiemensInOneSiemens, MicrosiemensTolerance),
                ElectricAdmittanceUnit.Millimho => (MillimhosInOneSiemens, MillimhosTolerance),
                ElectricAdmittanceUnit.Millisiemens => (MillisiemensInOneSiemens, MillisiemensTolerance),
                ElectricAdmittanceUnit.Nanomho => (NanomhosInOneSiemens, NanomhosTolerance),
                ElectricAdmittanceUnit.Nanosiemens => (NanosiemensInOneSiemens, NanosiemensTolerance),
                ElectricAdmittanceUnit.Siemens => (SiemensInOneSiemens, SiemensTolerance),
                ElectricAdmittanceUnit.Teramho => (TeramhosInOneSiemens, TeramhosTolerance),
                ElectricAdmittanceUnit.Terasiemens => (TerasiemensInOneSiemens, TerasiemensTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricAdmittanceUnit.Gigamho },
            new object[] { ElectricAdmittanceUnit.Gigasiemens },
            new object[] { ElectricAdmittanceUnit.Kilomho },
            new object[] { ElectricAdmittanceUnit.Kilosiemens },
            new object[] { ElectricAdmittanceUnit.Megamho },
            new object[] { ElectricAdmittanceUnit.Megasiemens },
            new object[] { ElectricAdmittanceUnit.Mho },
            new object[] { ElectricAdmittanceUnit.Micromho },
            new object[] { ElectricAdmittanceUnit.Microsiemens },
            new object[] { ElectricAdmittanceUnit.Millimho },
            new object[] { ElectricAdmittanceUnit.Millisiemens },
            new object[] { ElectricAdmittanceUnit.Nanomho },
            new object[] { ElectricAdmittanceUnit.Nanosiemens },
            new object[] { ElectricAdmittanceUnit.Siemens },
            new object[] { ElectricAdmittanceUnit.Teramho },
            new object[] { ElectricAdmittanceUnit.Terasiemens },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricAdmittance();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricAdmittanceUnit.Siemens, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ElectricAdmittance(double.PositiveInfinity, ElectricAdmittanceUnit.Siemens));
            var exception2 = Record.Exception(() => new ElectricAdmittance(double.NegativeInfinity, ElectricAdmittanceUnit.Siemens));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ElectricAdmittance(double.NaN, ElectricAdmittanceUnit.Siemens));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricAdmittance(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ElectricAdmittance(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ElectricAdmittance(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ElectricAdmittance_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ElectricAdmittanceUnit[] unitsOrderedByName = EnumHelper.GetValues<ElectricAdmittanceUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new ElectricAdmittance(1, ElectricAdmittanceUnit.Siemens);

            QuantityInfo<ElectricAdmittance, ElectricAdmittanceUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("ElectricAdmittance", quantityInfo.Name);
            Assert.Equal(ElectricAdmittance.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricAdmittance.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(ElectricAdmittance.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ElectricAdmittanceUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void SiemensToElectricAdmittanceUnits()
        {
            ElectricAdmittance siemens = ElectricAdmittance.FromSiemens(1);
            AssertEx.EqualTolerance(GigamhosInOneSiemens, siemens.Gigamhos, GigamhosTolerance);
            AssertEx.EqualTolerance(GigasiemensInOneSiemens, siemens.Gigasiemens, GigasiemensTolerance);
            AssertEx.EqualTolerance(KilomhosInOneSiemens, siemens.Kilomhos, KilomhosTolerance);
            AssertEx.EqualTolerance(KilosiemensInOneSiemens, siemens.Kilosiemens, KilosiemensTolerance);
            AssertEx.EqualTolerance(MegamhosInOneSiemens, siemens.Megamhos, MegamhosTolerance);
            AssertEx.EqualTolerance(MegasiemensInOneSiemens, siemens.Megasiemens, MegasiemensTolerance);
            AssertEx.EqualTolerance(MhosInOneSiemens, siemens.Mhos, MhosTolerance);
            AssertEx.EqualTolerance(MicromhosInOneSiemens, siemens.Micromhos, MicromhosTolerance);
            AssertEx.EqualTolerance(MicrosiemensInOneSiemens, siemens.Microsiemens, MicrosiemensTolerance);
            AssertEx.EqualTolerance(MillimhosInOneSiemens, siemens.Millimhos, MillimhosTolerance);
            AssertEx.EqualTolerance(MillisiemensInOneSiemens, siemens.Millisiemens, MillisiemensTolerance);
            AssertEx.EqualTolerance(NanomhosInOneSiemens, siemens.Nanomhos, NanomhosTolerance);
            AssertEx.EqualTolerance(NanosiemensInOneSiemens, siemens.Nanosiemens, NanosiemensTolerance);
            AssertEx.EqualTolerance(SiemensInOneSiemens, siemens.Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(TeramhosInOneSiemens, siemens.Teramhos, TeramhosTolerance);
            AssertEx.EqualTolerance(TerasiemensInOneSiemens, siemens.Terasiemens, TerasiemensTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Gigamho);
            AssertEx.EqualTolerance(1, quantity00.Gigamhos, GigamhosTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Gigamho, quantity00.Unit);

            var quantity01 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Gigasiemens);
            AssertEx.EqualTolerance(1, quantity01.Gigasiemens, GigasiemensTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Gigasiemens, quantity01.Unit);

            var quantity02 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Kilomho);
            AssertEx.EqualTolerance(1, quantity02.Kilomhos, KilomhosTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Kilomho, quantity02.Unit);

            var quantity03 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Kilosiemens);
            AssertEx.EqualTolerance(1, quantity03.Kilosiemens, KilosiemensTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Kilosiemens, quantity03.Unit);

            var quantity04 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Megamho);
            AssertEx.EqualTolerance(1, quantity04.Megamhos, MegamhosTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Megamho, quantity04.Unit);

            var quantity05 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Megasiemens);
            AssertEx.EqualTolerance(1, quantity05.Megasiemens, MegasiemensTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Megasiemens, quantity05.Unit);

            var quantity06 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Mho);
            AssertEx.EqualTolerance(1, quantity06.Mhos, MhosTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Mho, quantity06.Unit);

            var quantity07 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Micromho);
            AssertEx.EqualTolerance(1, quantity07.Micromhos, MicromhosTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Micromho, quantity07.Unit);

            var quantity08 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Microsiemens);
            AssertEx.EqualTolerance(1, quantity08.Microsiemens, MicrosiemensTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Microsiemens, quantity08.Unit);

            var quantity09 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Millimho);
            AssertEx.EqualTolerance(1, quantity09.Millimhos, MillimhosTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Millimho, quantity09.Unit);

            var quantity10 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Millisiemens);
            AssertEx.EqualTolerance(1, quantity10.Millisiemens, MillisiemensTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Millisiemens, quantity10.Unit);

            var quantity11 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Nanomho);
            AssertEx.EqualTolerance(1, quantity11.Nanomhos, NanomhosTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Nanomho, quantity11.Unit);

            var quantity12 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Nanosiemens);
            AssertEx.EqualTolerance(1, quantity12.Nanosiemens, NanosiemensTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Nanosiemens, quantity12.Unit);

            var quantity13 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Siemens);
            AssertEx.EqualTolerance(1, quantity13.Siemens, SiemensTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Siemens, quantity13.Unit);

            var quantity14 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Teramho);
            AssertEx.EqualTolerance(1, quantity14.Teramhos, TeramhosTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Teramho, quantity14.Unit);

            var quantity15 = ElectricAdmittance.From(1, ElectricAdmittanceUnit.Terasiemens);
            AssertEx.EqualTolerance(1, quantity15.Terasiemens, TerasiemensTolerance);
            Assert.Equal(ElectricAdmittanceUnit.Terasiemens, quantity15.Unit);

        }

        [Fact]
        public void FromSiemens_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ElectricAdmittance.FromSiemens(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ElectricAdmittance.FromSiemens(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromSiemens_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ElectricAdmittance.FromSiemens(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var siemens = ElectricAdmittance.FromSiemens(1);
            AssertEx.EqualTolerance(GigamhosInOneSiemens, siemens.As(ElectricAdmittanceUnit.Gigamho), GigamhosTolerance);
            AssertEx.EqualTolerance(GigasiemensInOneSiemens, siemens.As(ElectricAdmittanceUnit.Gigasiemens), GigasiemensTolerance);
            AssertEx.EqualTolerance(KilomhosInOneSiemens, siemens.As(ElectricAdmittanceUnit.Kilomho), KilomhosTolerance);
            AssertEx.EqualTolerance(KilosiemensInOneSiemens, siemens.As(ElectricAdmittanceUnit.Kilosiemens), KilosiemensTolerance);
            AssertEx.EqualTolerance(MegamhosInOneSiemens, siemens.As(ElectricAdmittanceUnit.Megamho), MegamhosTolerance);
            AssertEx.EqualTolerance(MegasiemensInOneSiemens, siemens.As(ElectricAdmittanceUnit.Megasiemens), MegasiemensTolerance);
            AssertEx.EqualTolerance(MhosInOneSiemens, siemens.As(ElectricAdmittanceUnit.Mho), MhosTolerance);
            AssertEx.EqualTolerance(MicromhosInOneSiemens, siemens.As(ElectricAdmittanceUnit.Micromho), MicromhosTolerance);
            AssertEx.EqualTolerance(MicrosiemensInOneSiemens, siemens.As(ElectricAdmittanceUnit.Microsiemens), MicrosiemensTolerance);
            AssertEx.EqualTolerance(MillimhosInOneSiemens, siemens.As(ElectricAdmittanceUnit.Millimho), MillimhosTolerance);
            AssertEx.EqualTolerance(MillisiemensInOneSiemens, siemens.As(ElectricAdmittanceUnit.Millisiemens), MillisiemensTolerance);
            AssertEx.EqualTolerance(NanomhosInOneSiemens, siemens.As(ElectricAdmittanceUnit.Nanomho), NanomhosTolerance);
            AssertEx.EqualTolerance(NanosiemensInOneSiemens, siemens.As(ElectricAdmittanceUnit.Nanosiemens), NanosiemensTolerance);
            AssertEx.EqualTolerance(SiemensInOneSiemens, siemens.As(ElectricAdmittanceUnit.Siemens), SiemensTolerance);
            AssertEx.EqualTolerance(TeramhosInOneSiemens, siemens.As(ElectricAdmittanceUnit.Teramho), TeramhosTolerance);
            AssertEx.EqualTolerance(TerasiemensInOneSiemens, siemens.As(ElectricAdmittanceUnit.Terasiemens), TerasiemensTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ElectricAdmittance.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
            var expectedValue = quantity.As(ElectricAdmittance.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
            var expectedUnit = ElectricAdmittance.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ElectricAdmittance quantityToConvert = quantity;

                ElectricAdmittance convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ElectricAdmittanceUnit> quantityToConvert = quantity;

                IQuantity<ElectricAdmittanceUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ElectricAdmittanceUnit> quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ElectricAdmittanceUnit> quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricAdmittance(value: 1, unit: ElectricAdmittance.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = ElectricAdmittance.Parse("1 G℧", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Gigamhos, GigamhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Gigamho, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 GS", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Gigasiemens, GigasiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Gigasiemens, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 k℧", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilomhos, KilomhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Kilomho, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 kS", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilosiemens, KilosiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Kilosiemens, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 M℧", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megamhos, MegamhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Megamho, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 MS", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megasiemens, MegasiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Megasiemens, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 ℧", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Mhos, MhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Mho, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 µ℧", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Micromhos, MicromhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Micromho, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 µS", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Microsiemens, MicrosiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Microsiemens, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 m℧", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Millimhos, MillimhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Millimho, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 mS", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Millisiemens, MillisiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Millisiemens, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 n℧", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nanomhos, NanomhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Nanomho, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 nS", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Nanosiemens, NanosiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Nanosiemens, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Siemens, SiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Siemens, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 T℧", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Teramhos, TeramhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Teramho, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricAdmittance.Parse("1 TS", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Terasiemens, TerasiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Terasiemens, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(ElectricAdmittance.TryParse("1 G℧", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Gigamhos, GigamhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Gigamho, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 GS", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Gigasiemens, GigasiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Gigasiemens, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 k℧", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilomhos, KilomhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Kilomho, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 kS", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilosiemens, KilosiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Kilosiemens, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 ℧", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Mhos, MhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Mho, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 µ℧", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Micromhos, MicromhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Micromho, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 µS", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microsiemens, MicrosiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Microsiemens, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 n℧", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanomhos, NanomhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Nanomho, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 nS", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Nanosiemens, NanosiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Nanosiemens, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Siemens, SiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Siemens, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 T℧", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Teramhos, TeramhosTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Teramho, parsed.Unit);
            }

            {
                Assert.True(ElectricAdmittance.TryParse("1 TS", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Terasiemens, TerasiemensTolerance);
                Assert.Equal(ElectricAdmittanceUnit.Terasiemens, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("G℧", ElectricAdmittanceUnit.Gigamho)]
        [InlineData("GS", ElectricAdmittanceUnit.Gigasiemens)]
        [InlineData("k℧", ElectricAdmittanceUnit.Kilomho)]
        [InlineData("kS", ElectricAdmittanceUnit.Kilosiemens)]
        [InlineData("M℧", ElectricAdmittanceUnit.Megamho)]
        [InlineData("MS", ElectricAdmittanceUnit.Megasiemens)]
        [InlineData("℧", ElectricAdmittanceUnit.Mho)]
        [InlineData("µ℧", ElectricAdmittanceUnit.Micromho)]
        [InlineData("µS", ElectricAdmittanceUnit.Microsiemens)]
        [InlineData("m℧", ElectricAdmittanceUnit.Millimho)]
        [InlineData("mS", ElectricAdmittanceUnit.Millisiemens)]
        [InlineData("n℧", ElectricAdmittanceUnit.Nanomho)]
        [InlineData("nS", ElectricAdmittanceUnit.Nanosiemens)]
        [InlineData("S", ElectricAdmittanceUnit.Siemens)]
        [InlineData("T℧", ElectricAdmittanceUnit.Teramho)]
        [InlineData("TS", ElectricAdmittanceUnit.Terasiemens)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricAdmittanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ElectricAdmittanceUnit parsedUnit = ElectricAdmittance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("G℧", ElectricAdmittanceUnit.Gigamho)]
        [InlineData("GS", ElectricAdmittanceUnit.Gigasiemens)]
        [InlineData("k℧", ElectricAdmittanceUnit.Kilomho)]
        [InlineData("kS", ElectricAdmittanceUnit.Kilosiemens)]
        [InlineData("M℧", ElectricAdmittanceUnit.Megamho)]
        [InlineData("MS", ElectricAdmittanceUnit.Megasiemens)]
        [InlineData("℧", ElectricAdmittanceUnit.Mho)]
        [InlineData("µ℧", ElectricAdmittanceUnit.Micromho)]
        [InlineData("µS", ElectricAdmittanceUnit.Microsiemens)]
        [InlineData("m℧", ElectricAdmittanceUnit.Millimho)]
        [InlineData("mS", ElectricAdmittanceUnit.Millisiemens)]
        [InlineData("n℧", ElectricAdmittanceUnit.Nanomho)]
        [InlineData("nS", ElectricAdmittanceUnit.Nanosiemens)]
        [InlineData("S", ElectricAdmittanceUnit.Siemens)]
        [InlineData("T℧", ElectricAdmittanceUnit.Teramho)]
        [InlineData("TS", ElectricAdmittanceUnit.Terasiemens)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricAdmittanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ElectricAdmittanceUnit parsedUnit = ElectricAdmittance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "G℧", ElectricAdmittanceUnit.Gigamho)]
        [InlineData("en-US", "GS", ElectricAdmittanceUnit.Gigasiemens)]
        [InlineData("en-US", "k℧", ElectricAdmittanceUnit.Kilomho)]
        [InlineData("en-US", "kS", ElectricAdmittanceUnit.Kilosiemens)]
        [InlineData("en-US", "M℧", ElectricAdmittanceUnit.Megamho)]
        [InlineData("en-US", "MS", ElectricAdmittanceUnit.Megasiemens)]
        [InlineData("en-US", "℧", ElectricAdmittanceUnit.Mho)]
        [InlineData("en-US", "µ℧", ElectricAdmittanceUnit.Micromho)]
        [InlineData("en-US", "µS", ElectricAdmittanceUnit.Microsiemens)]
        [InlineData("en-US", "m℧", ElectricAdmittanceUnit.Millimho)]
        [InlineData("en-US", "mS", ElectricAdmittanceUnit.Millisiemens)]
        [InlineData("en-US", "n℧", ElectricAdmittanceUnit.Nanomho)]
        [InlineData("en-US", "nS", ElectricAdmittanceUnit.Nanosiemens)]
        [InlineData("en-US", "S", ElectricAdmittanceUnit.Siemens)]
        [InlineData("en-US", "T℧", ElectricAdmittanceUnit.Teramho)]
        [InlineData("en-US", "TS", ElectricAdmittanceUnit.Terasiemens)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricAdmittanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ElectricAdmittanceUnit parsedUnit = ElectricAdmittance.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "G℧", ElectricAdmittanceUnit.Gigamho)]
        [InlineData("en-US", "GS", ElectricAdmittanceUnit.Gigasiemens)]
        [InlineData("en-US", "k℧", ElectricAdmittanceUnit.Kilomho)]
        [InlineData("en-US", "kS", ElectricAdmittanceUnit.Kilosiemens)]
        [InlineData("en-US", "M℧", ElectricAdmittanceUnit.Megamho)]
        [InlineData("en-US", "MS", ElectricAdmittanceUnit.Megasiemens)]
        [InlineData("en-US", "℧", ElectricAdmittanceUnit.Mho)]
        [InlineData("en-US", "µ℧", ElectricAdmittanceUnit.Micromho)]
        [InlineData("en-US", "µS", ElectricAdmittanceUnit.Microsiemens)]
        [InlineData("en-US", "m℧", ElectricAdmittanceUnit.Millimho)]
        [InlineData("en-US", "mS", ElectricAdmittanceUnit.Millisiemens)]
        [InlineData("en-US", "n℧", ElectricAdmittanceUnit.Nanomho)]
        [InlineData("en-US", "nS", ElectricAdmittanceUnit.Nanosiemens)]
        [InlineData("en-US", "S", ElectricAdmittanceUnit.Siemens)]
        [InlineData("en-US", "T℧", ElectricAdmittanceUnit.Teramho)]
        [InlineData("en-US", "TS", ElectricAdmittanceUnit.Terasiemens)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ElectricAdmittanceUnit expectedUnit)
        {
            ElectricAdmittanceUnit parsedUnit = ElectricAdmittance.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("G℧", ElectricAdmittanceUnit.Gigamho)]
        [InlineData("GS", ElectricAdmittanceUnit.Gigasiemens)]
        [InlineData("k℧", ElectricAdmittanceUnit.Kilomho)]
        [InlineData("kS", ElectricAdmittanceUnit.Kilosiemens)]
        [InlineData("M℧", ElectricAdmittanceUnit.Megamho)]
        [InlineData("MS", ElectricAdmittanceUnit.Megasiemens)]
        [InlineData("℧", ElectricAdmittanceUnit.Mho)]
        [InlineData("µ℧", ElectricAdmittanceUnit.Micromho)]
        [InlineData("µS", ElectricAdmittanceUnit.Microsiemens)]
        [InlineData("m℧", ElectricAdmittanceUnit.Millimho)]
        [InlineData("mS", ElectricAdmittanceUnit.Millisiemens)]
        [InlineData("n℧", ElectricAdmittanceUnit.Nanomho)]
        [InlineData("nS", ElectricAdmittanceUnit.Nanosiemens)]
        [InlineData("S", ElectricAdmittanceUnit.Siemens)]
        [InlineData("T℧", ElectricAdmittanceUnit.Teramho)]
        [InlineData("TS", ElectricAdmittanceUnit.Terasiemens)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricAdmittanceUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ElectricAdmittance.TryParseUnit(abbreviation, out ElectricAdmittanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("G℧", ElectricAdmittanceUnit.Gigamho)]
        [InlineData("GS", ElectricAdmittanceUnit.Gigasiemens)]
        [InlineData("k℧", ElectricAdmittanceUnit.Kilomho)]
        [InlineData("kS", ElectricAdmittanceUnit.Kilosiemens)]
        [InlineData("M℧", ElectricAdmittanceUnit.Megamho)]
        [InlineData("MS", ElectricAdmittanceUnit.Megasiemens)]
        [InlineData("℧", ElectricAdmittanceUnit.Mho)]
        [InlineData("µ℧", ElectricAdmittanceUnit.Micromho)]
        [InlineData("µS", ElectricAdmittanceUnit.Microsiemens)]
        [InlineData("m℧", ElectricAdmittanceUnit.Millimho)]
        [InlineData("mS", ElectricAdmittanceUnit.Millisiemens)]
        [InlineData("n℧", ElectricAdmittanceUnit.Nanomho)]
        [InlineData("nS", ElectricAdmittanceUnit.Nanosiemens)]
        [InlineData("S", ElectricAdmittanceUnit.Siemens)]
        [InlineData("T℧", ElectricAdmittanceUnit.Teramho)]
        [InlineData("TS", ElectricAdmittanceUnit.Terasiemens)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricAdmittanceUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ElectricAdmittance.TryParseUnit(abbreviation, out ElectricAdmittanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "G℧", ElectricAdmittanceUnit.Gigamho)]
        [InlineData("en-US", "GS", ElectricAdmittanceUnit.Gigasiemens)]
        [InlineData("en-US", "k℧", ElectricAdmittanceUnit.Kilomho)]
        [InlineData("en-US", "kS", ElectricAdmittanceUnit.Kilosiemens)]
        [InlineData("en-US", "M℧", ElectricAdmittanceUnit.Megamho)]
        [InlineData("en-US", "MS", ElectricAdmittanceUnit.Megasiemens)]
        [InlineData("en-US", "℧", ElectricAdmittanceUnit.Mho)]
        [InlineData("en-US", "µ℧", ElectricAdmittanceUnit.Micromho)]
        [InlineData("en-US", "µS", ElectricAdmittanceUnit.Microsiemens)]
        [InlineData("en-US", "m℧", ElectricAdmittanceUnit.Millimho)]
        [InlineData("en-US", "mS", ElectricAdmittanceUnit.Millisiemens)]
        [InlineData("en-US", "n℧", ElectricAdmittanceUnit.Nanomho)]
        [InlineData("en-US", "nS", ElectricAdmittanceUnit.Nanosiemens)]
        [InlineData("en-US", "S", ElectricAdmittanceUnit.Siemens)]
        [InlineData("en-US", "T℧", ElectricAdmittanceUnit.Teramho)]
        [InlineData("en-US", "TS", ElectricAdmittanceUnit.Terasiemens)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricAdmittanceUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricAdmittance.TryParseUnit(abbreviation, out ElectricAdmittanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "G℧", ElectricAdmittanceUnit.Gigamho)]
        [InlineData("en-US", "GS", ElectricAdmittanceUnit.Gigasiemens)]
        [InlineData("en-US", "k℧", ElectricAdmittanceUnit.Kilomho)]
        [InlineData("en-US", "kS", ElectricAdmittanceUnit.Kilosiemens)]
        [InlineData("en-US", "M℧", ElectricAdmittanceUnit.Megamho)]
        [InlineData("en-US", "MS", ElectricAdmittanceUnit.Megasiemens)]
        [InlineData("en-US", "℧", ElectricAdmittanceUnit.Mho)]
        [InlineData("en-US", "µ℧", ElectricAdmittanceUnit.Micromho)]
        [InlineData("en-US", "µS", ElectricAdmittanceUnit.Microsiemens)]
        [InlineData("en-US", "m℧", ElectricAdmittanceUnit.Millimho)]
        [InlineData("en-US", "mS", ElectricAdmittanceUnit.Millisiemens)]
        [InlineData("en-US", "n℧", ElectricAdmittanceUnit.Nanomho)]
        [InlineData("en-US", "nS", ElectricAdmittanceUnit.Nanosiemens)]
        [InlineData("en-US", "S", ElectricAdmittanceUnit.Siemens)]
        [InlineData("en-US", "T℧", ElectricAdmittanceUnit.Teramho)]
        [InlineData("en-US", "TS", ElectricAdmittanceUnit.Terasiemens)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ElectricAdmittanceUnit expectedUnit)
        {
            Assert.True(ElectricAdmittance.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ElectricAdmittanceUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricAdmittanceUnit unit)
        {
            var inBaseUnits = ElectricAdmittance.From(1.0, ElectricAdmittance.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricAdmittanceUnit unit)
        {
            var quantity = ElectricAdmittance.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricAdmittanceUnit unit)
        {
            Assert.All(ElectricAdmittance.Units.Where(u => u != ElectricAdmittance.BaseUnit), fromUnit =>
            {
                var quantity = ElectricAdmittance.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricAdmittanceUnit unit)
        {
            var quantity = default(ElectricAdmittance);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ElectricAdmittanceUnit unit)
        {
            var quantity = ElectricAdmittance.From(3, ElectricAdmittance.BaseUnit);
            ElectricAdmittance expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ElectricAdmittanceUnit> quantityToConvert = quantity;
                IQuantity<ElectricAdmittanceUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricAdmittance siemens = ElectricAdmittance.FromSiemens(1);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromGigamhos(siemens.Gigamhos).Siemens, GigamhosTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromGigasiemens(siemens.Gigasiemens).Siemens, GigasiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromKilomhos(siemens.Kilomhos).Siemens, KilomhosTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromKilosiemens(siemens.Kilosiemens).Siemens, KilosiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromMegamhos(siemens.Megamhos).Siemens, MegamhosTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromMegasiemens(siemens.Megasiemens).Siemens, MegasiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromMhos(siemens.Mhos).Siemens, MhosTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromMicromhos(siemens.Micromhos).Siemens, MicromhosTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromMicrosiemens(siemens.Microsiemens).Siemens, MicrosiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromMillimhos(siemens.Millimhos).Siemens, MillimhosTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromMillisiemens(siemens.Millisiemens).Siemens, MillisiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromNanomhos(siemens.Nanomhos).Siemens, NanomhosTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromNanosiemens(siemens.Nanosiemens).Siemens, NanosiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromSiemens(siemens.Siemens).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromTeramhos(siemens.Teramhos).Siemens, TeramhosTolerance);
            AssertEx.EqualTolerance(1, ElectricAdmittance.FromTerasiemens(siemens.Terasiemens).Siemens, TerasiemensTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricAdmittance v = ElectricAdmittance.FromSiemens(1);
            AssertEx.EqualTolerance(-1, -v.Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(2, (ElectricAdmittance.FromSiemens(3)-v).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(2, (v + v).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(10, (v*10).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(10, (10*v).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(2, (ElectricAdmittance.FromSiemens(10)/5).Siemens, SiemensTolerance);
            AssertEx.EqualTolerance(2, ElectricAdmittance.FromSiemens(10)/ElectricAdmittance.FromSiemens(5), SiemensTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricAdmittance oneSiemens = ElectricAdmittance.FromSiemens(1);
            ElectricAdmittance twoSiemens = ElectricAdmittance.FromSiemens(2);

            Assert.True(oneSiemens < twoSiemens);
            Assert.True(oneSiemens <= twoSiemens);
            Assert.True(twoSiemens > oneSiemens);
            Assert.True(twoSiemens >= oneSiemens);

            Assert.False(oneSiemens > twoSiemens);
            Assert.False(oneSiemens >= twoSiemens);
            Assert.False(twoSiemens < oneSiemens);
            Assert.False(twoSiemens <= oneSiemens);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricAdmittance siemens = ElectricAdmittance.FromSiemens(1);
            Assert.Equal(0, siemens.CompareTo(siemens));
            Assert.True(siemens.CompareTo(ElectricAdmittance.Zero) > 0);
            Assert.True(ElectricAdmittance.Zero.CompareTo(siemens) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricAdmittance siemens = ElectricAdmittance.FromSiemens(1);
            Assert.Throws<ArgumentException>(() => siemens.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricAdmittance siemens = ElectricAdmittance.FromSiemens(1);
            Assert.Throws<ArgumentNullException>(() => siemens.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricAdmittanceUnit.Siemens, 1, ElectricAdmittanceUnit.Siemens, true)]  // Same value and unit.
        [InlineData(1, ElectricAdmittanceUnit.Siemens, 2, ElectricAdmittanceUnit.Siemens, false)] // Different value.
        [InlineData(2, ElectricAdmittanceUnit.Siemens, 1, ElectricAdmittanceUnit.Gigamho, false)] // Different value and unit.
        [InlineData(1, ElectricAdmittanceUnit.Siemens, 1, ElectricAdmittanceUnit.Gigamho, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricAdmittanceUnit unitA, double valueB, ElectricAdmittanceUnit unitB, bool expectEqual)
        {
            var a = new ElectricAdmittance(valueA, unitA);
            var b = new ElectricAdmittance(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricAdmittance.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = ElectricAdmittance.FromSiemens(1);
            Assert.True(v.Equals(ElectricAdmittance.FromSiemens(1), SiemensTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ElectricAdmittance.Zero, SiemensTolerance, ComparisonType.Relative));
            Assert.True(ElectricAdmittance.FromSiemens(100).Equals(ElectricAdmittance.FromSiemens(120), 0.3, ComparisonType.Relative));
            Assert.False(ElectricAdmittance.FromSiemens(100).Equals(ElectricAdmittance.FromSiemens(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = ElectricAdmittance.FromSiemens(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(ElectricAdmittance.FromSiemens(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricAdmittance siemens = ElectricAdmittance.FromSiemens(1);
            Assert.False(siemens.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricAdmittance siemens = ElectricAdmittance.FromSiemens(1);
            Assert.False(siemens.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<ElectricAdmittanceUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricAdmittance.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 G℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Gigamho).ToString());
            Assert.Equal("1 GS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Gigasiemens).ToString());
            Assert.Equal("1 k℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Kilomho).ToString());
            Assert.Equal("1 kS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Kilosiemens).ToString());
            Assert.Equal("1 M℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Megamho).ToString());
            Assert.Equal("1 MS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Megasiemens).ToString());
            Assert.Equal("1 ℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Mho).ToString());
            Assert.Equal("1 µ℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Micromho).ToString());
            Assert.Equal("1 µS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Microsiemens).ToString());
            Assert.Equal("1 m℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Millimho).ToString());
            Assert.Equal("1 mS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Millisiemens).ToString());
            Assert.Equal("1 n℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Nanomho).ToString());
            Assert.Equal("1 nS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Nanosiemens).ToString());
            Assert.Equal("1 S", new ElectricAdmittance(1, ElectricAdmittanceUnit.Siemens).ToString());
            Assert.Equal("1 T℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Teramho).ToString());
            Assert.Equal("1 TS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Terasiemens).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 G℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Gigamho).ToString(swedishCulture));
            Assert.Equal("1 GS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Gigasiemens).ToString(swedishCulture));
            Assert.Equal("1 k℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Kilomho).ToString(swedishCulture));
            Assert.Equal("1 kS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Kilosiemens).ToString(swedishCulture));
            Assert.Equal("1 M℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Megamho).ToString(swedishCulture));
            Assert.Equal("1 MS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Megasiemens).ToString(swedishCulture));
            Assert.Equal("1 ℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Mho).ToString(swedishCulture));
            Assert.Equal("1 µ℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Micromho).ToString(swedishCulture));
            Assert.Equal("1 µS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Microsiemens).ToString(swedishCulture));
            Assert.Equal("1 m℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Millimho).ToString(swedishCulture));
            Assert.Equal("1 mS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Millisiemens).ToString(swedishCulture));
            Assert.Equal("1 n℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Nanomho).ToString(swedishCulture));
            Assert.Equal("1 nS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Nanosiemens).ToString(swedishCulture));
            Assert.Equal("1 S", new ElectricAdmittance(1, ElectricAdmittanceUnit.Siemens).ToString(swedishCulture));
            Assert.Equal("1 T℧", new ElectricAdmittance(1, ElectricAdmittanceUnit.Teramho).ToString(swedishCulture));
            Assert.Equal("1 TS", new ElectricAdmittance(1, ElectricAdmittanceUnit.Terasiemens).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 S", new ElectricAdmittance(0.123456, ElectricAdmittanceUnit.Siemens).ToString("s1"));
            Assert.Equal("0.12 S", new ElectricAdmittance(0.123456, ElectricAdmittanceUnit.Siemens).ToString("s2"));
            Assert.Equal("0.123 S", new ElectricAdmittance(0.123456, ElectricAdmittanceUnit.Siemens).ToString("s3"));
            Assert.Equal("0.1235 S", new ElectricAdmittance(0.123456, ElectricAdmittanceUnit.Siemens).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 S", new ElectricAdmittance(0.123456, ElectricAdmittanceUnit.Siemens).ToString("s1", culture));
            Assert.Equal("0.12 S", new ElectricAdmittance(0.123456, ElectricAdmittanceUnit.Siemens).ToString("s2", culture));
            Assert.Equal("0.123 S", new ElectricAdmittance(0.123456, ElectricAdmittanceUnit.Siemens).ToString("s3", culture));
            Assert.Equal("0.1235 S", new ElectricAdmittance(0.123456, ElectricAdmittanceUnit.Siemens).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricAdmittance.FromSiemens(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricAdmittance.FromSiemens(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricAdmittance.FromSiemens(1.0);
            Assert.Equal(new {ElectricAdmittance.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricAdmittance.FromSiemens(value);
            Assert.Equal(ElectricAdmittance.FromSiemens(-value), -quantity);
        }
    }
}
