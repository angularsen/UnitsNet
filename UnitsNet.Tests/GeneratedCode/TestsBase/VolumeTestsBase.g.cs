//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Volume.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class VolumeTestsBase : QuantityTestsBase
    {
        protected abstract double AcreFeetInOneCubicMeter { get; }
        protected abstract double AuTablespoonsInOneCubicMeter { get; }
        protected abstract double BoardFeetInOneCubicMeter { get; }
        protected abstract double CentilitersInOneCubicMeter { get; }
        protected abstract double CubicCentimetersInOneCubicMeter { get; }
        protected abstract double CubicDecimetersInOneCubicMeter { get; }
        protected abstract double CubicFeetInOneCubicMeter { get; }
        protected abstract double CubicHectometersInOneCubicMeter { get; }
        protected abstract double CubicInchesInOneCubicMeter { get; }
        protected abstract double CubicKilometersInOneCubicMeter { get; }
        protected abstract double CubicMetersInOneCubicMeter { get; }
        protected abstract double CubicMicrometersInOneCubicMeter { get; }
        protected abstract double CubicMilesInOneCubicMeter { get; }
        protected abstract double CubicMillimetersInOneCubicMeter { get; }
        protected abstract double CubicYardsInOneCubicMeter { get; }
        protected abstract double DecalitersInOneCubicMeter { get; }
        protected abstract double DecausGallonsInOneCubicMeter { get; }
        protected abstract double DecilitersInOneCubicMeter { get; }
        protected abstract double DeciusGallonsInOneCubicMeter { get; }
        protected abstract double HectocubicFeetInOneCubicMeter { get; }
        protected abstract double HectocubicMetersInOneCubicMeter { get; }
        protected abstract double HectolitersInOneCubicMeter { get; }
        protected abstract double HectousGallonsInOneCubicMeter { get; }
        protected abstract double ImperialBeerBarrelsInOneCubicMeter { get; }
        protected abstract double ImperialGallonsInOneCubicMeter { get; }
        protected abstract double ImperialOuncesInOneCubicMeter { get; }
        protected abstract double ImperialPintsInOneCubicMeter { get; }
        protected abstract double ImperialQuartsInOneCubicMeter { get; }
        protected abstract double KilocubicFeetInOneCubicMeter { get; }
        protected abstract double KilocubicMetersInOneCubicMeter { get; }
        protected abstract double KiloimperialGallonsInOneCubicMeter { get; }
        protected abstract double KilolitersInOneCubicMeter { get; }
        protected abstract double KilousGallonsInOneCubicMeter { get; }
        protected abstract double LitersInOneCubicMeter { get; }
        protected abstract double MegacubicFeetInOneCubicMeter { get; }
        protected abstract double MegaimperialGallonsInOneCubicMeter { get; }
        protected abstract double MegalitersInOneCubicMeter { get; }
        protected abstract double MegausGallonsInOneCubicMeter { get; }
        protected abstract double MetricCupsInOneCubicMeter { get; }
        protected abstract double MetricTeaspoonsInOneCubicMeter { get; }
        protected abstract double MicrolitersInOneCubicMeter { get; }
        protected abstract double MillilitersInOneCubicMeter { get; }
        protected abstract double NanolitersInOneCubicMeter { get; }
        protected abstract double OilBarrelsInOneCubicMeter { get; }
        protected abstract double UkTablespoonsInOneCubicMeter { get; }
        protected abstract double UsBeerBarrelsInOneCubicMeter { get; }
        protected abstract double UsCustomaryCupsInOneCubicMeter { get; }
        protected abstract double UsGallonsInOneCubicMeter { get; }
        protected abstract double UsLegalCupsInOneCubicMeter { get; }
        protected abstract double UsOuncesInOneCubicMeter { get; }
        protected abstract double UsPintsInOneCubicMeter { get; }
        protected abstract double UsQuartsInOneCubicMeter { get; }
        protected abstract double UsTablespoonsInOneCubicMeter { get; }
        protected abstract double UsTeaspoonsInOneCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AcreFeetTolerance { get { return 1e-5; } }
        protected virtual double AuTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double BoardFeetTolerance { get { return 1e-5; } }
        protected virtual double CentilitersTolerance { get { return 1e-5; } }
        protected virtual double CubicCentimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicDecimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicFeetTolerance { get { return 1e-5; } }
        protected virtual double CubicHectometersTolerance { get { return 1e-5; } }
        protected virtual double CubicInchesTolerance { get { return 1e-5; } }
        protected virtual double CubicKilometersTolerance { get { return 1e-5; } }
        protected virtual double CubicMetersTolerance { get { return 1e-5; } }
        protected virtual double CubicMicrometersTolerance { get { return 1e-5; } }
        protected virtual double CubicMilesTolerance { get { return 1e-5; } }
        protected virtual double CubicMillimetersTolerance { get { return 1e-5; } }
        protected virtual double CubicYardsTolerance { get { return 1e-5; } }
        protected virtual double DecalitersTolerance { get { return 1e-5; } }
        protected virtual double DecausGallonsTolerance { get { return 1e-5; } }
        protected virtual double DecilitersTolerance { get { return 1e-5; } }
        protected virtual double DeciusGallonsTolerance { get { return 1e-5; } }
        protected virtual double HectocubicFeetTolerance { get { return 1e-5; } }
        protected virtual double HectocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double HectolitersTolerance { get { return 1e-5; } }
        protected virtual double HectousGallonsTolerance { get { return 1e-5; } }
        protected virtual double ImperialBeerBarrelsTolerance { get { return 1e-5; } }
        protected virtual double ImperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double ImperialOuncesTolerance { get { return 1e-5; } }
        protected virtual double ImperialPintsTolerance { get { return 1e-5; } }
        protected virtual double ImperialQuartsTolerance { get { return 1e-5; } }
        protected virtual double KilocubicFeetTolerance { get { return 1e-5; } }
        protected virtual double KilocubicMetersTolerance { get { return 1e-5; } }
        protected virtual double KiloimperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double KilolitersTolerance { get { return 1e-5; } }
        protected virtual double KilousGallonsTolerance { get { return 1e-5; } }
        protected virtual double LitersTolerance { get { return 1e-5; } }
        protected virtual double MegacubicFeetTolerance { get { return 1e-5; } }
        protected virtual double MegaimperialGallonsTolerance { get { return 1e-5; } }
        protected virtual double MegalitersTolerance { get { return 1e-5; } }
        protected virtual double MegausGallonsTolerance { get { return 1e-5; } }
        protected virtual double MetricCupsTolerance { get { return 1e-5; } }
        protected virtual double MetricTeaspoonsTolerance { get { return 1e-5; } }
        protected virtual double MicrolitersTolerance { get { return 1e-5; } }
        protected virtual double MillilitersTolerance { get { return 1e-5; } }
        protected virtual double NanolitersTolerance { get { return 1e-5; } }
        protected virtual double OilBarrelsTolerance { get { return 1e-5; } }
        protected virtual double UkTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double UsBeerBarrelsTolerance { get { return 1e-5; } }
        protected virtual double UsCustomaryCupsTolerance { get { return 1e-5; } }
        protected virtual double UsGallonsTolerance { get { return 1e-5; } }
        protected virtual double UsLegalCupsTolerance { get { return 1e-5; } }
        protected virtual double UsOuncesTolerance { get { return 1e-5; } }
        protected virtual double UsPintsTolerance { get { return 1e-5; } }
        protected virtual double UsQuartsTolerance { get { return 1e-5; } }
        protected virtual double UsTablespoonsTolerance { get { return 1e-5; } }
        protected virtual double UsTeaspoonsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(VolumeUnit unit)
        {
            return unit switch
            {
                VolumeUnit.AcreFoot => (AcreFeetInOneCubicMeter, AcreFeetTolerance),
                VolumeUnit.AuTablespoon => (AuTablespoonsInOneCubicMeter, AuTablespoonsTolerance),
                VolumeUnit.BoardFoot => (BoardFeetInOneCubicMeter, BoardFeetTolerance),
                VolumeUnit.Centiliter => (CentilitersInOneCubicMeter, CentilitersTolerance),
                VolumeUnit.CubicCentimeter => (CubicCentimetersInOneCubicMeter, CubicCentimetersTolerance),
                VolumeUnit.CubicDecimeter => (CubicDecimetersInOneCubicMeter, CubicDecimetersTolerance),
                VolumeUnit.CubicFoot => (CubicFeetInOneCubicMeter, CubicFeetTolerance),
                VolumeUnit.CubicHectometer => (CubicHectometersInOneCubicMeter, CubicHectometersTolerance),
                VolumeUnit.CubicInch => (CubicInchesInOneCubicMeter, CubicInchesTolerance),
                VolumeUnit.CubicKilometer => (CubicKilometersInOneCubicMeter, CubicKilometersTolerance),
                VolumeUnit.CubicMeter => (CubicMetersInOneCubicMeter, CubicMetersTolerance),
                VolumeUnit.CubicMicrometer => (CubicMicrometersInOneCubicMeter, CubicMicrometersTolerance),
                VolumeUnit.CubicMile => (CubicMilesInOneCubicMeter, CubicMilesTolerance),
                VolumeUnit.CubicMillimeter => (CubicMillimetersInOneCubicMeter, CubicMillimetersTolerance),
                VolumeUnit.CubicYard => (CubicYardsInOneCubicMeter, CubicYardsTolerance),
                VolumeUnit.Decaliter => (DecalitersInOneCubicMeter, DecalitersTolerance),
                VolumeUnit.DecausGallon => (DecausGallonsInOneCubicMeter, DecausGallonsTolerance),
                VolumeUnit.Deciliter => (DecilitersInOneCubicMeter, DecilitersTolerance),
                VolumeUnit.DeciusGallon => (DeciusGallonsInOneCubicMeter, DeciusGallonsTolerance),
                VolumeUnit.HectocubicFoot => (HectocubicFeetInOneCubicMeter, HectocubicFeetTolerance),
                VolumeUnit.HectocubicMeter => (HectocubicMetersInOneCubicMeter, HectocubicMetersTolerance),
                VolumeUnit.Hectoliter => (HectolitersInOneCubicMeter, HectolitersTolerance),
                VolumeUnit.HectousGallon => (HectousGallonsInOneCubicMeter, HectousGallonsTolerance),
                VolumeUnit.ImperialBeerBarrel => (ImperialBeerBarrelsInOneCubicMeter, ImperialBeerBarrelsTolerance),
                VolumeUnit.ImperialGallon => (ImperialGallonsInOneCubicMeter, ImperialGallonsTolerance),
                VolumeUnit.ImperialOunce => (ImperialOuncesInOneCubicMeter, ImperialOuncesTolerance),
                VolumeUnit.ImperialPint => (ImperialPintsInOneCubicMeter, ImperialPintsTolerance),
                VolumeUnit.ImperialQuart => (ImperialQuartsInOneCubicMeter, ImperialQuartsTolerance),
                VolumeUnit.KilocubicFoot => (KilocubicFeetInOneCubicMeter, KilocubicFeetTolerance),
                VolumeUnit.KilocubicMeter => (KilocubicMetersInOneCubicMeter, KilocubicMetersTolerance),
                VolumeUnit.KiloimperialGallon => (KiloimperialGallonsInOneCubicMeter, KiloimperialGallonsTolerance),
                VolumeUnit.Kiloliter => (KilolitersInOneCubicMeter, KilolitersTolerance),
                VolumeUnit.KilousGallon => (KilousGallonsInOneCubicMeter, KilousGallonsTolerance),
                VolumeUnit.Liter => (LitersInOneCubicMeter, LitersTolerance),
                VolumeUnit.MegacubicFoot => (MegacubicFeetInOneCubicMeter, MegacubicFeetTolerance),
                VolumeUnit.MegaimperialGallon => (MegaimperialGallonsInOneCubicMeter, MegaimperialGallonsTolerance),
                VolumeUnit.Megaliter => (MegalitersInOneCubicMeter, MegalitersTolerance),
                VolumeUnit.MegausGallon => (MegausGallonsInOneCubicMeter, MegausGallonsTolerance),
                VolumeUnit.MetricCup => (MetricCupsInOneCubicMeter, MetricCupsTolerance),
                VolumeUnit.MetricTeaspoon => (MetricTeaspoonsInOneCubicMeter, MetricTeaspoonsTolerance),
                VolumeUnit.Microliter => (MicrolitersInOneCubicMeter, MicrolitersTolerance),
                VolumeUnit.Milliliter => (MillilitersInOneCubicMeter, MillilitersTolerance),
                VolumeUnit.Nanoliter => (NanolitersInOneCubicMeter, NanolitersTolerance),
                VolumeUnit.OilBarrel => (OilBarrelsInOneCubicMeter, OilBarrelsTolerance),
                VolumeUnit.UkTablespoon => (UkTablespoonsInOneCubicMeter, UkTablespoonsTolerance),
                VolumeUnit.UsBeerBarrel => (UsBeerBarrelsInOneCubicMeter, UsBeerBarrelsTolerance),
                VolumeUnit.UsCustomaryCup => (UsCustomaryCupsInOneCubicMeter, UsCustomaryCupsTolerance),
                VolumeUnit.UsGallon => (UsGallonsInOneCubicMeter, UsGallonsTolerance),
                VolumeUnit.UsLegalCup => (UsLegalCupsInOneCubicMeter, UsLegalCupsTolerance),
                VolumeUnit.UsOunce => (UsOuncesInOneCubicMeter, UsOuncesTolerance),
                VolumeUnit.UsPint => (UsPintsInOneCubicMeter, UsPintsTolerance),
                VolumeUnit.UsQuart => (UsQuartsInOneCubicMeter, UsQuartsTolerance),
                VolumeUnit.UsTablespoon => (UsTablespoonsInOneCubicMeter, UsTablespoonsTolerance),
                VolumeUnit.UsTeaspoon => (UsTeaspoonsInOneCubicMeter, UsTeaspoonsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { VolumeUnit.AcreFoot },
            new object[] { VolumeUnit.AuTablespoon },
            new object[] { VolumeUnit.BoardFoot },
            new object[] { VolumeUnit.Centiliter },
            new object[] { VolumeUnit.CubicCentimeter },
            new object[] { VolumeUnit.CubicDecimeter },
            new object[] { VolumeUnit.CubicFoot },
            new object[] { VolumeUnit.CubicHectometer },
            new object[] { VolumeUnit.CubicInch },
            new object[] { VolumeUnit.CubicKilometer },
            new object[] { VolumeUnit.CubicMeter },
            new object[] { VolumeUnit.CubicMicrometer },
            new object[] { VolumeUnit.CubicMile },
            new object[] { VolumeUnit.CubicMillimeter },
            new object[] { VolumeUnit.CubicYard },
            new object[] { VolumeUnit.Decaliter },
            new object[] { VolumeUnit.DecausGallon },
            new object[] { VolumeUnit.Deciliter },
            new object[] { VolumeUnit.DeciusGallon },
            new object[] { VolumeUnit.HectocubicFoot },
            new object[] { VolumeUnit.HectocubicMeter },
            new object[] { VolumeUnit.Hectoliter },
            new object[] { VolumeUnit.HectousGallon },
            new object[] { VolumeUnit.ImperialBeerBarrel },
            new object[] { VolumeUnit.ImperialGallon },
            new object[] { VolumeUnit.ImperialOunce },
            new object[] { VolumeUnit.ImperialPint },
            new object[] { VolumeUnit.ImperialQuart },
            new object[] { VolumeUnit.KilocubicFoot },
            new object[] { VolumeUnit.KilocubicMeter },
            new object[] { VolumeUnit.KiloimperialGallon },
            new object[] { VolumeUnit.Kiloliter },
            new object[] { VolumeUnit.KilousGallon },
            new object[] { VolumeUnit.Liter },
            new object[] { VolumeUnit.MegacubicFoot },
            new object[] { VolumeUnit.MegaimperialGallon },
            new object[] { VolumeUnit.Megaliter },
            new object[] { VolumeUnit.MegausGallon },
            new object[] { VolumeUnit.MetricCup },
            new object[] { VolumeUnit.MetricTeaspoon },
            new object[] { VolumeUnit.Microliter },
            new object[] { VolumeUnit.Milliliter },
            new object[] { VolumeUnit.Nanoliter },
            new object[] { VolumeUnit.OilBarrel },
            new object[] { VolumeUnit.UkTablespoon },
            new object[] { VolumeUnit.UsBeerBarrel },
            new object[] { VolumeUnit.UsCustomaryCup },
            new object[] { VolumeUnit.UsGallon },
            new object[] { VolumeUnit.UsLegalCup },
            new object[] { VolumeUnit.UsOunce },
            new object[] { VolumeUnit.UsPint },
            new object[] { VolumeUnit.UsQuart },
            new object[] { VolumeUnit.UsTablespoon },
            new object[] { VolumeUnit.UsTeaspoon },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Volume();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(VolumeUnit.CubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Volume(double.PositiveInfinity, VolumeUnit.CubicMeter));
            var exception2 = Record.Exception(() => new Volume(double.NegativeInfinity, VolumeUnit.CubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Volume(double.NaN, VolumeUnit.CubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Volume(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Volume(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Volume(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Volume_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            VolumeUnit[] unitsOrderedByName = EnumUtils.GetEnumValues<VolumeUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Volume(1, VolumeUnit.CubicMeter);

            QuantityInfo<Volume, VolumeUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Volume", quantityInfo.Name);
            Assert.Equal(Volume.Zero, quantityInfo.Zero);
            Assert.Equal(Volume.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Volume.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<VolumeUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void VolumeInfo_CreateWithCustomUnitInfos()
        {
            VolumeUnit[] expectedUnits = [VolumeUnit.CubicMeter];

            Volume.VolumeInfo quantityInfo = Volume.VolumeInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Volume", quantityInfo.Name);
            Assert.Equal(Volume.Zero, quantityInfo.Zero);
            Assert.Equal(Volume.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void CubicMeterToVolumeUnits()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, cubicmeter.AcreFeet, AcreFeetTolerance);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, cubicmeter.AuTablespoons, AuTablespoonsTolerance);
            AssertEx.EqualTolerance(BoardFeetInOneCubicMeter, cubicmeter.BoardFeet, BoardFeetTolerance);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, cubicmeter.Centiliters, CentilitersTolerance);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, cubicmeter.CubicCentimeters, CubicCentimetersTolerance);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, cubicmeter.CubicDecimeters, CubicDecimetersTolerance);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, cubicmeter.CubicFeet, CubicFeetTolerance);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, cubicmeter.CubicHectometers, CubicHectometersTolerance);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, cubicmeter.CubicInches, CubicInchesTolerance);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, cubicmeter.CubicKilometers, CubicKilometersTolerance);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.CubicMeters, CubicMetersTolerance);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, cubicmeter.CubicMicrometers, CubicMicrometersTolerance);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, cubicmeter.CubicMiles, CubicMilesTolerance);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, cubicmeter.CubicMillimeters, CubicMillimetersTolerance);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, cubicmeter.CubicYards, CubicYardsTolerance);
            AssertEx.EqualTolerance(DecalitersInOneCubicMeter, cubicmeter.Decaliters, DecalitersTolerance);
            AssertEx.EqualTolerance(DecausGallonsInOneCubicMeter, cubicmeter.DecausGallons, DecausGallonsTolerance);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, cubicmeter.Deciliters, DecilitersTolerance);
            AssertEx.EqualTolerance(DeciusGallonsInOneCubicMeter, cubicmeter.DeciusGallons, DeciusGallonsTolerance);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, cubicmeter.HectocubicFeet, HectocubicFeetTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.HectocubicMeters, HectocubicMetersTolerance);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, cubicmeter.Hectoliters, HectolitersTolerance);
            AssertEx.EqualTolerance(HectousGallonsInOneCubicMeter, cubicmeter.HectousGallons, HectousGallonsTolerance);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, cubicmeter.ImperialBeerBarrels, ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, cubicmeter.ImperialGallons, ImperialGallonsTolerance);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, cubicmeter.ImperialOunces, ImperialOuncesTolerance);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, cubicmeter.ImperialPints, ImperialPintsTolerance);
            AssertEx.EqualTolerance(ImperialQuartsInOneCubicMeter, cubicmeter.ImperialQuarts, ImperialQuartsTolerance);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, cubicmeter.KilocubicFeet, KilocubicFeetTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.KilocubicMeters, KilocubicMetersTolerance);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, cubicmeter.KiloimperialGallons, KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, cubicmeter.Kiloliters, KilolitersTolerance);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, cubicmeter.KilousGallons, KilousGallonsTolerance);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, cubicmeter.Liters, LitersTolerance);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, cubicmeter.MegacubicFeet, MegacubicFeetTolerance);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, cubicmeter.MegaimperialGallons, MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, cubicmeter.Megaliters, MegalitersTolerance);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, cubicmeter.MegausGallons, MegausGallonsTolerance);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, cubicmeter.MetricCups, MetricCupsTolerance);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, cubicmeter.MetricTeaspoons, MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, cubicmeter.Microliters, MicrolitersTolerance);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, cubicmeter.Milliliters, MillilitersTolerance);
            AssertEx.EqualTolerance(NanolitersInOneCubicMeter, cubicmeter.Nanoliters, NanolitersTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.OilBarrels, OilBarrelsTolerance);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, cubicmeter.UkTablespoons, UkTablespoonsTolerance);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, cubicmeter.UsBeerBarrels, UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, cubicmeter.UsCustomaryCups, UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, cubicmeter.UsGallons, UsGallonsTolerance);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, cubicmeter.UsLegalCups, UsLegalCupsTolerance);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, cubicmeter.UsOunces, UsOuncesTolerance);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, cubicmeter.UsPints, UsPintsTolerance);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, cubicmeter.UsQuarts, UsQuartsTolerance);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, cubicmeter.UsTablespoons, UsTablespoonsTolerance);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, cubicmeter.UsTeaspoons, UsTeaspoonsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Volume.From(1, VolumeUnit.AcreFoot);
            Assert.Equal(1, quantity00.AcreFeet);
            Assert.Equal(VolumeUnit.AcreFoot, quantity00.Unit);

            var quantity01 = Volume.From(1, VolumeUnit.AuTablespoon);
            Assert.Equal(1, quantity01.AuTablespoons);
            Assert.Equal(VolumeUnit.AuTablespoon, quantity01.Unit);

            var quantity02 = Volume.From(1, VolumeUnit.BoardFoot);
            Assert.Equal(1, quantity02.BoardFeet);
            Assert.Equal(VolumeUnit.BoardFoot, quantity02.Unit);

            var quantity03 = Volume.From(1, VolumeUnit.Centiliter);
            Assert.Equal(1, quantity03.Centiliters);
            Assert.Equal(VolumeUnit.Centiliter, quantity03.Unit);

            var quantity04 = Volume.From(1, VolumeUnit.CubicCentimeter);
            Assert.Equal(1, quantity04.CubicCentimeters);
            Assert.Equal(VolumeUnit.CubicCentimeter, quantity04.Unit);

            var quantity05 = Volume.From(1, VolumeUnit.CubicDecimeter);
            Assert.Equal(1, quantity05.CubicDecimeters);
            Assert.Equal(VolumeUnit.CubicDecimeter, quantity05.Unit);

            var quantity06 = Volume.From(1, VolumeUnit.CubicFoot);
            Assert.Equal(1, quantity06.CubicFeet);
            Assert.Equal(VolumeUnit.CubicFoot, quantity06.Unit);

            var quantity07 = Volume.From(1, VolumeUnit.CubicHectometer);
            Assert.Equal(1, quantity07.CubicHectometers);
            Assert.Equal(VolumeUnit.CubicHectometer, quantity07.Unit);

            var quantity08 = Volume.From(1, VolumeUnit.CubicInch);
            Assert.Equal(1, quantity08.CubicInches);
            Assert.Equal(VolumeUnit.CubicInch, quantity08.Unit);

            var quantity09 = Volume.From(1, VolumeUnit.CubicKilometer);
            Assert.Equal(1, quantity09.CubicKilometers);
            Assert.Equal(VolumeUnit.CubicKilometer, quantity09.Unit);

            var quantity10 = Volume.From(1, VolumeUnit.CubicMeter);
            Assert.Equal(1, quantity10.CubicMeters);
            Assert.Equal(VolumeUnit.CubicMeter, quantity10.Unit);

            var quantity11 = Volume.From(1, VolumeUnit.CubicMicrometer);
            Assert.Equal(1, quantity11.CubicMicrometers);
            Assert.Equal(VolumeUnit.CubicMicrometer, quantity11.Unit);

            var quantity12 = Volume.From(1, VolumeUnit.CubicMile);
            Assert.Equal(1, quantity12.CubicMiles);
            Assert.Equal(VolumeUnit.CubicMile, quantity12.Unit);

            var quantity13 = Volume.From(1, VolumeUnit.CubicMillimeter);
            Assert.Equal(1, quantity13.CubicMillimeters);
            Assert.Equal(VolumeUnit.CubicMillimeter, quantity13.Unit);

            var quantity14 = Volume.From(1, VolumeUnit.CubicYard);
            Assert.Equal(1, quantity14.CubicYards);
            Assert.Equal(VolumeUnit.CubicYard, quantity14.Unit);

            var quantity15 = Volume.From(1, VolumeUnit.Decaliter);
            Assert.Equal(1, quantity15.Decaliters);
            Assert.Equal(VolumeUnit.Decaliter, quantity15.Unit);

            var quantity16 = Volume.From(1, VolumeUnit.DecausGallon);
            Assert.Equal(1, quantity16.DecausGallons);
            Assert.Equal(VolumeUnit.DecausGallon, quantity16.Unit);

            var quantity17 = Volume.From(1, VolumeUnit.Deciliter);
            Assert.Equal(1, quantity17.Deciliters);
            Assert.Equal(VolumeUnit.Deciliter, quantity17.Unit);

            var quantity18 = Volume.From(1, VolumeUnit.DeciusGallon);
            Assert.Equal(1, quantity18.DeciusGallons);
            Assert.Equal(VolumeUnit.DeciusGallon, quantity18.Unit);

            var quantity19 = Volume.From(1, VolumeUnit.HectocubicFoot);
            Assert.Equal(1, quantity19.HectocubicFeet);
            Assert.Equal(VolumeUnit.HectocubicFoot, quantity19.Unit);

            var quantity20 = Volume.From(1, VolumeUnit.HectocubicMeter);
            Assert.Equal(1, quantity20.HectocubicMeters);
            Assert.Equal(VolumeUnit.HectocubicMeter, quantity20.Unit);

            var quantity21 = Volume.From(1, VolumeUnit.Hectoliter);
            Assert.Equal(1, quantity21.Hectoliters);
            Assert.Equal(VolumeUnit.Hectoliter, quantity21.Unit);

            var quantity22 = Volume.From(1, VolumeUnit.HectousGallon);
            Assert.Equal(1, quantity22.HectousGallons);
            Assert.Equal(VolumeUnit.HectousGallon, quantity22.Unit);

            var quantity23 = Volume.From(1, VolumeUnit.ImperialBeerBarrel);
            Assert.Equal(1, quantity23.ImperialBeerBarrels);
            Assert.Equal(VolumeUnit.ImperialBeerBarrel, quantity23.Unit);

            var quantity24 = Volume.From(1, VolumeUnit.ImperialGallon);
            Assert.Equal(1, quantity24.ImperialGallons);
            Assert.Equal(VolumeUnit.ImperialGallon, quantity24.Unit);

            var quantity25 = Volume.From(1, VolumeUnit.ImperialOunce);
            Assert.Equal(1, quantity25.ImperialOunces);
            Assert.Equal(VolumeUnit.ImperialOunce, quantity25.Unit);

            var quantity26 = Volume.From(1, VolumeUnit.ImperialPint);
            Assert.Equal(1, quantity26.ImperialPints);
            Assert.Equal(VolumeUnit.ImperialPint, quantity26.Unit);

            var quantity27 = Volume.From(1, VolumeUnit.ImperialQuart);
            Assert.Equal(1, quantity27.ImperialQuarts);
            Assert.Equal(VolumeUnit.ImperialQuart, quantity27.Unit);

            var quantity28 = Volume.From(1, VolumeUnit.KilocubicFoot);
            Assert.Equal(1, quantity28.KilocubicFeet);
            Assert.Equal(VolumeUnit.KilocubicFoot, quantity28.Unit);

            var quantity29 = Volume.From(1, VolumeUnit.KilocubicMeter);
            Assert.Equal(1, quantity29.KilocubicMeters);
            Assert.Equal(VolumeUnit.KilocubicMeter, quantity29.Unit);

            var quantity30 = Volume.From(1, VolumeUnit.KiloimperialGallon);
            Assert.Equal(1, quantity30.KiloimperialGallons);
            Assert.Equal(VolumeUnit.KiloimperialGallon, quantity30.Unit);

            var quantity31 = Volume.From(1, VolumeUnit.Kiloliter);
            Assert.Equal(1, quantity31.Kiloliters);
            Assert.Equal(VolumeUnit.Kiloliter, quantity31.Unit);

            var quantity32 = Volume.From(1, VolumeUnit.KilousGallon);
            Assert.Equal(1, quantity32.KilousGallons);
            Assert.Equal(VolumeUnit.KilousGallon, quantity32.Unit);

            var quantity33 = Volume.From(1, VolumeUnit.Liter);
            Assert.Equal(1, quantity33.Liters);
            Assert.Equal(VolumeUnit.Liter, quantity33.Unit);

            var quantity34 = Volume.From(1, VolumeUnit.MegacubicFoot);
            Assert.Equal(1, quantity34.MegacubicFeet);
            Assert.Equal(VolumeUnit.MegacubicFoot, quantity34.Unit);

            var quantity35 = Volume.From(1, VolumeUnit.MegaimperialGallon);
            Assert.Equal(1, quantity35.MegaimperialGallons);
            Assert.Equal(VolumeUnit.MegaimperialGallon, quantity35.Unit);

            var quantity36 = Volume.From(1, VolumeUnit.Megaliter);
            Assert.Equal(1, quantity36.Megaliters);
            Assert.Equal(VolumeUnit.Megaliter, quantity36.Unit);

            var quantity37 = Volume.From(1, VolumeUnit.MegausGallon);
            Assert.Equal(1, quantity37.MegausGallons);
            Assert.Equal(VolumeUnit.MegausGallon, quantity37.Unit);

            var quantity38 = Volume.From(1, VolumeUnit.MetricCup);
            Assert.Equal(1, quantity38.MetricCups);
            Assert.Equal(VolumeUnit.MetricCup, quantity38.Unit);

            var quantity39 = Volume.From(1, VolumeUnit.MetricTeaspoon);
            Assert.Equal(1, quantity39.MetricTeaspoons);
            Assert.Equal(VolumeUnit.MetricTeaspoon, quantity39.Unit);

            var quantity40 = Volume.From(1, VolumeUnit.Microliter);
            Assert.Equal(1, quantity40.Microliters);
            Assert.Equal(VolumeUnit.Microliter, quantity40.Unit);

            var quantity41 = Volume.From(1, VolumeUnit.Milliliter);
            Assert.Equal(1, quantity41.Milliliters);
            Assert.Equal(VolumeUnit.Milliliter, quantity41.Unit);

            var quantity42 = Volume.From(1, VolumeUnit.Nanoliter);
            Assert.Equal(1, quantity42.Nanoliters);
            Assert.Equal(VolumeUnit.Nanoliter, quantity42.Unit);

            var quantity43 = Volume.From(1, VolumeUnit.OilBarrel);
            Assert.Equal(1, quantity43.OilBarrels);
            Assert.Equal(VolumeUnit.OilBarrel, quantity43.Unit);

            var quantity44 = Volume.From(1, VolumeUnit.UkTablespoon);
            Assert.Equal(1, quantity44.UkTablespoons);
            Assert.Equal(VolumeUnit.UkTablespoon, quantity44.Unit);

            var quantity45 = Volume.From(1, VolumeUnit.UsBeerBarrel);
            Assert.Equal(1, quantity45.UsBeerBarrels);
            Assert.Equal(VolumeUnit.UsBeerBarrel, quantity45.Unit);

            var quantity46 = Volume.From(1, VolumeUnit.UsCustomaryCup);
            Assert.Equal(1, quantity46.UsCustomaryCups);
            Assert.Equal(VolumeUnit.UsCustomaryCup, quantity46.Unit);

            var quantity47 = Volume.From(1, VolumeUnit.UsGallon);
            Assert.Equal(1, quantity47.UsGallons);
            Assert.Equal(VolumeUnit.UsGallon, quantity47.Unit);

            var quantity48 = Volume.From(1, VolumeUnit.UsLegalCup);
            Assert.Equal(1, quantity48.UsLegalCups);
            Assert.Equal(VolumeUnit.UsLegalCup, quantity48.Unit);

            var quantity49 = Volume.From(1, VolumeUnit.UsOunce);
            Assert.Equal(1, quantity49.UsOunces);
            Assert.Equal(VolumeUnit.UsOunce, quantity49.Unit);

            var quantity50 = Volume.From(1, VolumeUnit.UsPint);
            Assert.Equal(1, quantity50.UsPints);
            Assert.Equal(VolumeUnit.UsPint, quantity50.Unit);

            var quantity51 = Volume.From(1, VolumeUnit.UsQuart);
            Assert.Equal(1, quantity51.UsQuarts);
            Assert.Equal(VolumeUnit.UsQuart, quantity51.Unit);

            var quantity52 = Volume.From(1, VolumeUnit.UsTablespoon);
            Assert.Equal(1, quantity52.UsTablespoons);
            Assert.Equal(VolumeUnit.UsTablespoon, quantity52.Unit);

            var quantity53 = Volume.From(1, VolumeUnit.UsTeaspoon);
            Assert.Equal(1, quantity53.UsTeaspoons);
            Assert.Equal(VolumeUnit.UsTeaspoon, quantity53.Unit);

        }

        [Fact]
        public void FromCubicMeters_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Volume.FromCubicMeters(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Volume.FromCubicMeters(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromCubicMeters_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Volume.FromCubicMeters(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var cubicmeter = Volume.FromCubicMeters(1);
            AssertEx.EqualTolerance(AcreFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.AcreFoot), AcreFeetTolerance);
            AssertEx.EqualTolerance(AuTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.AuTablespoon), AuTablespoonsTolerance);
            AssertEx.EqualTolerance(BoardFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.BoardFoot), BoardFeetTolerance);
            AssertEx.EqualTolerance(CentilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Centiliter), CentilitersTolerance);
            AssertEx.EqualTolerance(CubicCentimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicCentimeter), CubicCentimetersTolerance);
            AssertEx.EqualTolerance(CubicDecimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicDecimeter), CubicDecimetersTolerance);
            AssertEx.EqualTolerance(CubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicFoot), CubicFeetTolerance);
            AssertEx.EqualTolerance(CubicHectometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicHectometer), CubicHectometersTolerance);
            AssertEx.EqualTolerance(CubicInchesInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicInch), CubicInchesTolerance);
            AssertEx.EqualTolerance(CubicKilometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicKilometer), CubicKilometersTolerance);
            AssertEx.EqualTolerance(CubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMeter), CubicMetersTolerance);
            AssertEx.EqualTolerance(CubicMicrometersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMicrometer), CubicMicrometersTolerance);
            AssertEx.EqualTolerance(CubicMilesInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMile), CubicMilesTolerance);
            AssertEx.EqualTolerance(CubicMillimetersInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicMillimeter), CubicMillimetersTolerance);
            AssertEx.EqualTolerance(CubicYardsInOneCubicMeter, cubicmeter.As(VolumeUnit.CubicYard), CubicYardsTolerance);
            AssertEx.EqualTolerance(DecalitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Decaliter), DecalitersTolerance);
            AssertEx.EqualTolerance(DecausGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.DecausGallon), DecausGallonsTolerance);
            AssertEx.EqualTolerance(DecilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Deciliter), DecilitersTolerance);
            AssertEx.EqualTolerance(DeciusGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.DeciusGallon), DeciusGallonsTolerance);
            AssertEx.EqualTolerance(HectocubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.HectocubicFoot), HectocubicFeetTolerance);
            AssertEx.EqualTolerance(HectocubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.HectocubicMeter), HectocubicMetersTolerance);
            AssertEx.EqualTolerance(HectolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Hectoliter), HectolitersTolerance);
            AssertEx.EqualTolerance(HectousGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.HectousGallon), HectousGallonsTolerance);
            AssertEx.EqualTolerance(ImperialBeerBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialBeerBarrel), ImperialBeerBarrelsTolerance);
            AssertEx.EqualTolerance(ImperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialGallon), ImperialGallonsTolerance);
            AssertEx.EqualTolerance(ImperialOuncesInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialOunce), ImperialOuncesTolerance);
            AssertEx.EqualTolerance(ImperialPintsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialPint), ImperialPintsTolerance);
            AssertEx.EqualTolerance(ImperialQuartsInOneCubicMeter, cubicmeter.As(VolumeUnit.ImperialQuart), ImperialQuartsTolerance);
            AssertEx.EqualTolerance(KilocubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.KilocubicFoot), KilocubicFeetTolerance);
            AssertEx.EqualTolerance(KilocubicMetersInOneCubicMeter, cubicmeter.As(VolumeUnit.KilocubicMeter), KilocubicMetersTolerance);
            AssertEx.EqualTolerance(KiloimperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.KiloimperialGallon), KiloimperialGallonsTolerance);
            AssertEx.EqualTolerance(KilolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Kiloliter), KilolitersTolerance);
            AssertEx.EqualTolerance(KilousGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.KilousGallon), KilousGallonsTolerance);
            AssertEx.EqualTolerance(LitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Liter), LitersTolerance);
            AssertEx.EqualTolerance(MegacubicFeetInOneCubicMeter, cubicmeter.As(VolumeUnit.MegacubicFoot), MegacubicFeetTolerance);
            AssertEx.EqualTolerance(MegaimperialGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MegaimperialGallon), MegaimperialGallonsTolerance);
            AssertEx.EqualTolerance(MegalitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Megaliter), MegalitersTolerance);
            AssertEx.EqualTolerance(MegausGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MegausGallon), MegausGallonsTolerance);
            AssertEx.EqualTolerance(MetricCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.MetricCup), MetricCupsTolerance);
            AssertEx.EqualTolerance(MetricTeaspoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.MetricTeaspoon), MetricTeaspoonsTolerance);
            AssertEx.EqualTolerance(MicrolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Microliter), MicrolitersTolerance);
            AssertEx.EqualTolerance(MillilitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Milliliter), MillilitersTolerance);
            AssertEx.EqualTolerance(NanolitersInOneCubicMeter, cubicmeter.As(VolumeUnit.Nanoliter), NanolitersTolerance);
            AssertEx.EqualTolerance(OilBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.OilBarrel), OilBarrelsTolerance);
            AssertEx.EqualTolerance(UkTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UkTablespoon), UkTablespoonsTolerance);
            AssertEx.EqualTolerance(UsBeerBarrelsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsBeerBarrel), UsBeerBarrelsTolerance);
            AssertEx.EqualTolerance(UsCustomaryCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsCustomaryCup), UsCustomaryCupsTolerance);
            AssertEx.EqualTolerance(UsGallonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsGallon), UsGallonsTolerance);
            AssertEx.EqualTolerance(UsLegalCupsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsLegalCup), UsLegalCupsTolerance);
            AssertEx.EqualTolerance(UsOuncesInOneCubicMeter, cubicmeter.As(VolumeUnit.UsOunce), UsOuncesTolerance);
            AssertEx.EqualTolerance(UsPintsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsPint), UsPintsTolerance);
            AssertEx.EqualTolerance(UsQuartsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsQuart), UsQuartsTolerance);
            AssertEx.EqualTolerance(UsTablespoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsTablespoon), UsTablespoonsTolerance);
            AssertEx.EqualTolerance(UsTeaspoonsInOneCubicMeter, cubicmeter.As(VolumeUnit.UsTeaspoon), UsTeaspoonsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Volume.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Volume(value: 1, unit: Volume.BaseUnit);
            var expectedValue = quantity.As(Volume.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Volume(value: 1, unit: Volume.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Volume(value: 1, unit: Volume.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Volume(value: 1, unit: Volume.BaseUnit);
            var expectedUnit = Volume.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Volume quantityToConvert = quantity;

                Volume convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<VolumeUnit> quantityToConvert = quantity;

                IQuantity<VolumeUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Volume(value: 1, unit: Volume.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<VolumeUnit> quantity = new Volume(value: 1, unit: Volume.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Volume(value: 1, unit: Volume.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Volume(value: 1, unit: Volume.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<VolumeUnit> quantity = new Volume(value: 1, unit: Volume.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Volume(value: 1, unit: Volume.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 ac-ft", VolumeUnit.AcreFoot, 4.2)]
        [InlineData("en-US", "4.2 acre-foot", VolumeUnit.AcreFoot, 4.2)]
        [InlineData("en-US", "4.2 acre-feet", VolumeUnit.AcreFoot, 4.2)]
        [InlineData("en-US", "4.2 tablespoon (A.U.)", VolumeUnit.AuTablespoon, 4.2)]
        [InlineData("en-US", "4.2 bf", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("en-US", "4.2 board foot", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("en-US", "4.2 board feet", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("en-US", "4.2 cl", VolumeUnit.Centiliter, 4.2)]
        [InlineData("en-US", "4.2 cm³", VolumeUnit.CubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 dm³", VolumeUnit.CubicDecimeter, 4.2)]
        [InlineData("en-US", "4.2 ft³", VolumeUnit.CubicFoot, 4.2)]
        [InlineData("en-US", "4.2 in³", VolumeUnit.CubicInch, 4.2)]
        [InlineData("en-US", "4.2 m³", VolumeUnit.CubicMeter, 4.2)]
        [InlineData("en-US", "4.2 µm³", VolumeUnit.CubicMicrometer, 4.2)]
        [InlineData("en-US", "4.2 mi³", VolumeUnit.CubicMile, 4.2)]
        [InlineData("en-US", "4.2 mm³", VolumeUnit.CubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 yd³", VolumeUnit.CubicYard, 4.2)]
        [InlineData("en-US", "4.2 dal", VolumeUnit.Decaliter, 4.2)]
        [InlineData("en-US", "4.2 dagal (U.S.)", VolumeUnit.DecausGallon, 4.2)]
        [InlineData("en-US", "4.2 dl", VolumeUnit.Deciliter, 4.2)]
        [InlineData("en-US", "4.2 dgal (U.S.)", VolumeUnit.DeciusGallon, 4.2)]
        [InlineData("en-US", "4.2 hft³", VolumeUnit.HectocubicFoot, 4.2)]
        [InlineData("en-US", "4.2 hl", VolumeUnit.Hectoliter, 4.2)]
        [InlineData("en-US", "4.2 hgal (U.S.)", VolumeUnit.HectousGallon, 4.2)]
        [InlineData("en-US", "4.2 bl (imp.)", VolumeUnit.ImperialBeerBarrel, 4.2)]
        [InlineData("en-US", "4.2 gal (imp.)", VolumeUnit.ImperialGallon, 4.2)]
        [InlineData("en-US", "4.2 oz (imp.)", VolumeUnit.ImperialOunce, 4.2)]
        [InlineData("en-US", "4.2 pt (imp.)", VolumeUnit.ImperialPint, 4.2)]
        [InlineData("en-US", "4.2 UK pt", VolumeUnit.ImperialPint, 4.2)]
        [InlineData("en-US", "4.2 pt", VolumeUnit.ImperialPint, 4.2)]
        [InlineData("en-US", "4.2 p", VolumeUnit.ImperialPint, 4.2)]
        [InlineData("en-US", "4.2 qt (imp.)", VolumeUnit.ImperialQuart, 4.2)]
        [InlineData("en-US", "4.2 kft³", VolumeUnit.KilocubicFoot, 4.2)]
        [InlineData("en-US", "4.2 kgal (imp.)", VolumeUnit.KiloimperialGallon, 4.2)]
        [InlineData("en-US", "4.2 kl", VolumeUnit.Kiloliter, 4.2)]
        [InlineData("en-US", "4.2 kgal (U.S.)", VolumeUnit.KilousGallon, 4.2)]
        [InlineData("en-US", "4.2 l", VolumeUnit.Liter, 4.2)]
        [InlineData("en-US", "4.2 Mft³", VolumeUnit.MegacubicFoot, 4.2)]
        [InlineData("en-US", "4.2 Mgal (imp.)", VolumeUnit.MegaimperialGallon, 4.2)]
        [InlineData("en-US", "4.2 Ml", VolumeUnit.Megaliter, 4.2)]
        [InlineData("en-US", "4.2 Mgal (U.S.)", VolumeUnit.MegausGallon, 4.2)]
        [InlineData("en-US", "4.2 metric cup", VolumeUnit.MetricCup, 4.2)]
        [InlineData("en-US", "4.2 tsp", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 t", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 ts", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 tspn", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 t.", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 ts.", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 tsp.", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 tspn.", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 teaspoon", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 µl", VolumeUnit.Microliter, 4.2)]
        [InlineData("en-US", "4.2 ml", VolumeUnit.Milliliter, 4.2)]
        [InlineData("en-US", "4.2 nl", VolumeUnit.Nanoliter, 4.2)]
        [InlineData("en-US", "4.2 bbl", VolumeUnit.OilBarrel, 4.2)]
        [InlineData("en-US", "4.2 tablespoon (U.K.)", VolumeUnit.UkTablespoon, 4.2)]
        [InlineData("en-US", "4.2 bl (U.S.)", VolumeUnit.UsBeerBarrel, 4.2)]
        [InlineData("en-US", "4.2 cup (U.S. customary)", VolumeUnit.UsCustomaryCup, 4.2)]
        [InlineData("en-US", "4.2 gal (U.S.)", VolumeUnit.UsGallon, 4.2)]
        [InlineData("en-US", "4.2 cup (U.S.)", VolumeUnit.UsLegalCup, 4.2)]
        [InlineData("en-US", "4.2 oz (U.S.)", VolumeUnit.UsOunce, 4.2)]
        [InlineData("en-US", "4.2 pt (U.S.)", VolumeUnit.UsPint, 4.2)]
        [InlineData("en-US", "4.2 qt (U.S.)", VolumeUnit.UsQuart, 4.2)]
        [InlineData("en-US", "4.2 tablespoon (U.S.)", VolumeUnit.UsTablespoon, 4.2)]
        [InlineData("en-US", "4.2 teaspoon (U.S.)", VolumeUnit.UsTeaspoon, 4.2)]
        [InlineData("fr-CA", "4,2 pmp", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("fr-CA", "4,2 pied-planche", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("fr-CA", "4,2 pied de planche", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("ru-RU", "4,2 сл", VolumeUnit.Centiliter, 4.2)]
        [InlineData("ru-RU", "4,2 см³", VolumeUnit.CubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дм³", VolumeUnit.CubicDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 фут³", VolumeUnit.CubicFoot, 4.2)]
        [InlineData("ru-RU", "4,2 дюйм³", VolumeUnit.CubicInch, 4.2)]
        [InlineData("ru-RU", "4,2 м³", VolumeUnit.CubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкм³", VolumeUnit.CubicMicrometer, 4.2)]
        [InlineData("ru-RU", "4,2 миля³", VolumeUnit.CubicMile, 4.2)]
        [InlineData("ru-RU", "4,2 мм³", VolumeUnit.CubicMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 ярд³", VolumeUnit.CubicYard, 4.2)]
        [InlineData("ru-RU", "4,2 дал", VolumeUnit.Decaliter, 4.2)]
        [InlineData("ru-RU", "4,2 даАмериканский галлон", VolumeUnit.DecausGallon, 4.2)]
        [InlineData("ru-RU", "4,2 дл", VolumeUnit.Deciliter, 4.2)]
        [InlineData("ru-RU", "4,2 дАмериканский галлон", VolumeUnit.DeciusGallon, 4.2)]
        [InlineData("ru-RU", "4,2 гфут³", VolumeUnit.HectocubicFoot, 4.2)]
        [InlineData("ru-RU", "4,2 гл", VolumeUnit.Hectoliter, 4.2)]
        [InlineData("ru-RU", "4,2 гАмериканский галлон", VolumeUnit.HectousGallon, 4.2)]
        [InlineData("ru-RU", "4,2 Английский галлон", VolumeUnit.ImperialGallon, 4.2)]
        [InlineData("ru-RU", "4,2 Английская унция", VolumeUnit.ImperialOunce, 4.2)]
        [InlineData("ru-RU", "4,2 кфут³", VolumeUnit.KilocubicFoot, 4.2)]
        [InlineData("ru-RU", "4,2 кАнглийский галлон", VolumeUnit.KiloimperialGallon, 4.2)]
        [InlineData("ru-RU", "4,2 кл", VolumeUnit.Kiloliter, 4.2)]
        [InlineData("ru-RU", "4,2 кАмериканский галлон", VolumeUnit.KilousGallon, 4.2)]
        [InlineData("ru-RU", "4,2 л", VolumeUnit.Liter, 4.2)]
        [InlineData("ru-RU", "4,2 Мфут³", VolumeUnit.MegacubicFoot, 4.2)]
        [InlineData("ru-RU", "4,2 МАнглийский галлон", VolumeUnit.MegaimperialGallon, 4.2)]
        [InlineData("ru-RU", "4,2 Мл", VolumeUnit.Megaliter, 4.2)]
        [InlineData("ru-RU", "4,2 МАмериканский галлон", VolumeUnit.MegausGallon, 4.2)]
        [InlineData("ru-RU", "4,2 мкл", VolumeUnit.Microliter, 4.2)]
        [InlineData("ru-RU", "4,2 мл", VolumeUnit.Milliliter, 4.2)]
        [InlineData("ru-RU", "4,2 нл", VolumeUnit.Nanoliter, 4.2)]
        [InlineData("ru-RU", "4,2 Американский галлон", VolumeUnit.UsGallon, 4.2)]
        [InlineData("ru-RU", "4,2 Американская унция", VolumeUnit.UsOunce, 4.2)]
        public void Parse(string culture, string quantityString, VolumeUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Volume.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "1 hm³")] // [CubicHectometer, HectocubicMeter] 
        [InlineData("en-US", "1 km³")] // [CubicKilometer, KilocubicMeter] 
        [InlineData("ru-RU", "1 гм³")] // [CubicHectometer, HectocubicMeter] 
        [InlineData("ru-RU", "1 км³")] // [CubicKilometer, KilocubicMeter] 
        public void ParseWithAmbiguousAbbreviation(string culture, string quantityString)
        {
            Assert.Throws<AmbiguousUnitParseException>(() => Volume.Parse(quantityString, CultureInfo.GetCultureInfo(culture)));
        }

        [Theory]
        [InlineData("en-US", "4.2 ac-ft", VolumeUnit.AcreFoot, 4.2)]
        [InlineData("en-US", "4.2 acre-foot", VolumeUnit.AcreFoot, 4.2)]
        [InlineData("en-US", "4.2 acre-feet", VolumeUnit.AcreFoot, 4.2)]
        [InlineData("en-US", "4.2 tablespoon (A.U.)", VolumeUnit.AuTablespoon, 4.2)]
        [InlineData("en-US", "4.2 bf", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("en-US", "4.2 board foot", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("en-US", "4.2 board feet", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("en-US", "4.2 cl", VolumeUnit.Centiliter, 4.2)]
        [InlineData("en-US", "4.2 cm³", VolumeUnit.CubicCentimeter, 4.2)]
        [InlineData("en-US", "4.2 dm³", VolumeUnit.CubicDecimeter, 4.2)]
        [InlineData("en-US", "4.2 ft³", VolumeUnit.CubicFoot, 4.2)]
        [InlineData("en-US", "4.2 in³", VolumeUnit.CubicInch, 4.2)]
        [InlineData("en-US", "4.2 m³", VolumeUnit.CubicMeter, 4.2)]
        [InlineData("en-US", "4.2 µm³", VolumeUnit.CubicMicrometer, 4.2)]
        [InlineData("en-US", "4.2 mi³", VolumeUnit.CubicMile, 4.2)]
        [InlineData("en-US", "4.2 mm³", VolumeUnit.CubicMillimeter, 4.2)]
        [InlineData("en-US", "4.2 yd³", VolumeUnit.CubicYard, 4.2)]
        [InlineData("en-US", "4.2 dal", VolumeUnit.Decaliter, 4.2)]
        [InlineData("en-US", "4.2 dagal (U.S.)", VolumeUnit.DecausGallon, 4.2)]
        [InlineData("en-US", "4.2 dl", VolumeUnit.Deciliter, 4.2)]
        [InlineData("en-US", "4.2 dgal (U.S.)", VolumeUnit.DeciusGallon, 4.2)]
        [InlineData("en-US", "4.2 hft³", VolumeUnit.HectocubicFoot, 4.2)]
        [InlineData("en-US", "4.2 hl", VolumeUnit.Hectoliter, 4.2)]
        [InlineData("en-US", "4.2 hgal (U.S.)", VolumeUnit.HectousGallon, 4.2)]
        [InlineData("en-US", "4.2 bl (imp.)", VolumeUnit.ImperialBeerBarrel, 4.2)]
        [InlineData("en-US", "4.2 gal (imp.)", VolumeUnit.ImperialGallon, 4.2)]
        [InlineData("en-US", "4.2 oz (imp.)", VolumeUnit.ImperialOunce, 4.2)]
        [InlineData("en-US", "4.2 pt (imp.)", VolumeUnit.ImperialPint, 4.2)]
        [InlineData("en-US", "4.2 UK pt", VolumeUnit.ImperialPint, 4.2)]
        [InlineData("en-US", "4.2 pt", VolumeUnit.ImperialPint, 4.2)]
        [InlineData("en-US", "4.2 p", VolumeUnit.ImperialPint, 4.2)]
        [InlineData("en-US", "4.2 qt (imp.)", VolumeUnit.ImperialQuart, 4.2)]
        [InlineData("en-US", "4.2 kft³", VolumeUnit.KilocubicFoot, 4.2)]
        [InlineData("en-US", "4.2 kgal (imp.)", VolumeUnit.KiloimperialGallon, 4.2)]
        [InlineData("en-US", "4.2 kl", VolumeUnit.Kiloliter, 4.2)]
        [InlineData("en-US", "4.2 kgal (U.S.)", VolumeUnit.KilousGallon, 4.2)]
        [InlineData("en-US", "4.2 l", VolumeUnit.Liter, 4.2)]
        [InlineData("en-US", "4.2 Mft³", VolumeUnit.MegacubicFoot, 4.2)]
        [InlineData("en-US", "4.2 Mgal (imp.)", VolumeUnit.MegaimperialGallon, 4.2)]
        [InlineData("en-US", "4.2 Ml", VolumeUnit.Megaliter, 4.2)]
        [InlineData("en-US", "4.2 Mgal (U.S.)", VolumeUnit.MegausGallon, 4.2)]
        [InlineData("en-US", "4.2 metric cup", VolumeUnit.MetricCup, 4.2)]
        [InlineData("en-US", "4.2 tsp", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 t", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 ts", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 tspn", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 t.", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 ts.", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 tsp.", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 tspn.", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 teaspoon", VolumeUnit.MetricTeaspoon, 4.2)]
        [InlineData("en-US", "4.2 µl", VolumeUnit.Microliter, 4.2)]
        [InlineData("en-US", "4.2 ml", VolumeUnit.Milliliter, 4.2)]
        [InlineData("en-US", "4.2 nl", VolumeUnit.Nanoliter, 4.2)]
        [InlineData("en-US", "4.2 bbl", VolumeUnit.OilBarrel, 4.2)]
        [InlineData("en-US", "4.2 tablespoon (U.K.)", VolumeUnit.UkTablespoon, 4.2)]
        [InlineData("en-US", "4.2 bl (U.S.)", VolumeUnit.UsBeerBarrel, 4.2)]
        [InlineData("en-US", "4.2 cup (U.S. customary)", VolumeUnit.UsCustomaryCup, 4.2)]
        [InlineData("en-US", "4.2 gal (U.S.)", VolumeUnit.UsGallon, 4.2)]
        [InlineData("en-US", "4.2 cup (U.S.)", VolumeUnit.UsLegalCup, 4.2)]
        [InlineData("en-US", "4.2 oz (U.S.)", VolumeUnit.UsOunce, 4.2)]
        [InlineData("en-US", "4.2 pt (U.S.)", VolumeUnit.UsPint, 4.2)]
        [InlineData("en-US", "4.2 qt (U.S.)", VolumeUnit.UsQuart, 4.2)]
        [InlineData("en-US", "4.2 tablespoon (U.S.)", VolumeUnit.UsTablespoon, 4.2)]
        [InlineData("en-US", "4.2 teaspoon (U.S.)", VolumeUnit.UsTeaspoon, 4.2)]
        [InlineData("fr-CA", "4,2 pmp", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("fr-CA", "4,2 pied-planche", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("fr-CA", "4,2 pied de planche", VolumeUnit.BoardFoot, 4.2)]
        [InlineData("ru-RU", "4,2 сл", VolumeUnit.Centiliter, 4.2)]
        [InlineData("ru-RU", "4,2 см³", VolumeUnit.CubicCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дм³", VolumeUnit.CubicDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 фут³", VolumeUnit.CubicFoot, 4.2)]
        [InlineData("ru-RU", "4,2 дюйм³", VolumeUnit.CubicInch, 4.2)]
        [InlineData("ru-RU", "4,2 м³", VolumeUnit.CubicMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкм³", VolumeUnit.CubicMicrometer, 4.2)]
        [InlineData("ru-RU", "4,2 миля³", VolumeUnit.CubicMile, 4.2)]
        [InlineData("ru-RU", "4,2 мм³", VolumeUnit.CubicMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 ярд³", VolumeUnit.CubicYard, 4.2)]
        [InlineData("ru-RU", "4,2 дал", VolumeUnit.Decaliter, 4.2)]
        [InlineData("ru-RU", "4,2 даАмериканский галлон", VolumeUnit.DecausGallon, 4.2)]
        [InlineData("ru-RU", "4,2 дл", VolumeUnit.Deciliter, 4.2)]
        [InlineData("ru-RU", "4,2 дАмериканский галлон", VolumeUnit.DeciusGallon, 4.2)]
        [InlineData("ru-RU", "4,2 гфут³", VolumeUnit.HectocubicFoot, 4.2)]
        [InlineData("ru-RU", "4,2 гл", VolumeUnit.Hectoliter, 4.2)]
        [InlineData("ru-RU", "4,2 гАмериканский галлон", VolumeUnit.HectousGallon, 4.2)]
        [InlineData("ru-RU", "4,2 Английский галлон", VolumeUnit.ImperialGallon, 4.2)]
        [InlineData("ru-RU", "4,2 Английская унция", VolumeUnit.ImperialOunce, 4.2)]
        [InlineData("ru-RU", "4,2 кфут³", VolumeUnit.KilocubicFoot, 4.2)]
        [InlineData("ru-RU", "4,2 кАнглийский галлон", VolumeUnit.KiloimperialGallon, 4.2)]
        [InlineData("ru-RU", "4,2 кл", VolumeUnit.Kiloliter, 4.2)]
        [InlineData("ru-RU", "4,2 кАмериканский галлон", VolumeUnit.KilousGallon, 4.2)]
        [InlineData("ru-RU", "4,2 л", VolumeUnit.Liter, 4.2)]
        [InlineData("ru-RU", "4,2 Мфут³", VolumeUnit.MegacubicFoot, 4.2)]
        [InlineData("ru-RU", "4,2 МАнглийский галлон", VolumeUnit.MegaimperialGallon, 4.2)]
        [InlineData("ru-RU", "4,2 Мл", VolumeUnit.Megaliter, 4.2)]
        [InlineData("ru-RU", "4,2 МАмериканский галлон", VolumeUnit.MegausGallon, 4.2)]
        [InlineData("ru-RU", "4,2 мкл", VolumeUnit.Microliter, 4.2)]
        [InlineData("ru-RU", "4,2 мл", VolumeUnit.Milliliter, 4.2)]
        [InlineData("ru-RU", "4,2 нл", VolumeUnit.Nanoliter, 4.2)]
        [InlineData("ru-RU", "4,2 Американский галлон", VolumeUnit.UsGallon, 4.2)]
        [InlineData("ru-RU", "4,2 Американская унция", VolumeUnit.UsOunce, 4.2)]
        public void TryParse(string culture, string quantityString, VolumeUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Volume.TryParse(quantityString, out Volume parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "1 hm³")] // [CubicHectometer, HectocubicMeter] 
        [InlineData("en-US", "1 km³")] // [CubicKilometer, KilocubicMeter] 
        [InlineData("ru-RU", "1 гм³")] // [CubicHectometer, HectocubicMeter] 
        [InlineData("ru-RU", "1 км³")] // [CubicKilometer, KilocubicMeter] 
        public void TryParseWithAmbiguousAbbreviation(string culture, string quantityString)
        {
            Assert.False(Volume.TryParse(quantityString, CultureInfo.GetCultureInfo(culture), out _));
        }

        [Theory]
        [InlineData("ac-ft", VolumeUnit.AcreFoot)]
        [InlineData("acre-foot", VolumeUnit.AcreFoot)]
        [InlineData("acre-feet", VolumeUnit.AcreFoot)]
        [InlineData("tablespoon (A.U.)", VolumeUnit.AuTablespoon)]
        [InlineData("bf", VolumeUnit.BoardFoot)]
        [InlineData("board foot", VolumeUnit.BoardFoot)]
        [InlineData("board feet", VolumeUnit.BoardFoot)]
        [InlineData("cl", VolumeUnit.Centiliter)]
        [InlineData("cm³", VolumeUnit.CubicCentimeter)]
        [InlineData("dm³", VolumeUnit.CubicDecimeter)]
        [InlineData("ft³", VolumeUnit.CubicFoot)]
        [InlineData("in³", VolumeUnit.CubicInch)]
        [InlineData("m³", VolumeUnit.CubicMeter)]
        [InlineData("µm³", VolumeUnit.CubicMicrometer)]
        [InlineData("mi³", VolumeUnit.CubicMile)]
        [InlineData("mm³", VolumeUnit.CubicMillimeter)]
        [InlineData("yd³", VolumeUnit.CubicYard)]
        [InlineData("dal", VolumeUnit.Decaliter)]
        [InlineData("dagal (U.S.)", VolumeUnit.DecausGallon)]
        [InlineData("dl", VolumeUnit.Deciliter)]
        [InlineData("dgal (U.S.)", VolumeUnit.DeciusGallon)]
        [InlineData("hft³", VolumeUnit.HectocubicFoot)]
        [InlineData("hl", VolumeUnit.Hectoliter)]
        [InlineData("hgal (U.S.)", VolumeUnit.HectousGallon)]
        [InlineData("bl (imp.)", VolumeUnit.ImperialBeerBarrel)]
        [InlineData("gal (imp.)", VolumeUnit.ImperialGallon)]
        [InlineData("oz (imp.)", VolumeUnit.ImperialOunce)]
        [InlineData("pt (imp.)", VolumeUnit.ImperialPint)]
        [InlineData("UK pt", VolumeUnit.ImperialPint)]
        [InlineData("pt", VolumeUnit.ImperialPint)]
        [InlineData("p", VolumeUnit.ImperialPint)]
        [InlineData("qt (imp.)", VolumeUnit.ImperialQuart)]
        [InlineData("kft³", VolumeUnit.KilocubicFoot)]
        [InlineData("kgal (imp.)", VolumeUnit.KiloimperialGallon)]
        [InlineData("kl", VolumeUnit.Kiloliter)]
        [InlineData("kgal (U.S.)", VolumeUnit.KilousGallon)]
        [InlineData("l", VolumeUnit.Liter)]
        [InlineData("Mft³", VolumeUnit.MegacubicFoot)]
        [InlineData("Mgal (imp.)", VolumeUnit.MegaimperialGallon)]
        [InlineData("Ml", VolumeUnit.Megaliter)]
        [InlineData("Mgal (U.S.)", VolumeUnit.MegausGallon)]
        [InlineData("metric cup", VolumeUnit.MetricCup)]
        [InlineData("tsp", VolumeUnit.MetricTeaspoon)]
        [InlineData("t", VolumeUnit.MetricTeaspoon)]
        [InlineData("ts", VolumeUnit.MetricTeaspoon)]
        [InlineData("tspn", VolumeUnit.MetricTeaspoon)]
        [InlineData("t.", VolumeUnit.MetricTeaspoon)]
        [InlineData("ts.", VolumeUnit.MetricTeaspoon)]
        [InlineData("tsp.", VolumeUnit.MetricTeaspoon)]
        [InlineData("tspn.", VolumeUnit.MetricTeaspoon)]
        [InlineData("teaspoon", VolumeUnit.MetricTeaspoon)]
        [InlineData("µl", VolumeUnit.Microliter)]
        [InlineData("ml", VolumeUnit.Milliliter)]
        [InlineData("nl", VolumeUnit.Nanoliter)]
        [InlineData("bbl", VolumeUnit.OilBarrel)]
        [InlineData("tablespoon (U.K.)", VolumeUnit.UkTablespoon)]
        [InlineData("bl (U.S.)", VolumeUnit.UsBeerBarrel)]
        [InlineData("cup (U.S. customary)", VolumeUnit.UsCustomaryCup)]
        [InlineData("gal (U.S.)", VolumeUnit.UsGallon)]
        [InlineData("cup (U.S.)", VolumeUnit.UsLegalCup)]
        [InlineData("oz (U.S.)", VolumeUnit.UsOunce)]
        [InlineData("pt (U.S.)", VolumeUnit.UsPint)]
        [InlineData("qt (U.S.)", VolumeUnit.UsQuart)]
        [InlineData("tablespoon (U.S.)", VolumeUnit.UsTablespoon)]
        [InlineData("teaspoon (U.S.)", VolumeUnit.UsTeaspoon)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, VolumeUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            VolumeUnit parsedUnit = Volume.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("ac-ft", VolumeUnit.AcreFoot)]
        [InlineData("acre-foot", VolumeUnit.AcreFoot)]
        [InlineData("acre-feet", VolumeUnit.AcreFoot)]
        [InlineData("tablespoon (A.U.)", VolumeUnit.AuTablespoon)]
        [InlineData("bf", VolumeUnit.BoardFoot)]
        [InlineData("board foot", VolumeUnit.BoardFoot)]
        [InlineData("board feet", VolumeUnit.BoardFoot)]
        [InlineData("cl", VolumeUnit.Centiliter)]
        [InlineData("cm³", VolumeUnit.CubicCentimeter)]
        [InlineData("dm³", VolumeUnit.CubicDecimeter)]
        [InlineData("ft³", VolumeUnit.CubicFoot)]
        [InlineData("in³", VolumeUnit.CubicInch)]
        [InlineData("m³", VolumeUnit.CubicMeter)]
        [InlineData("µm³", VolumeUnit.CubicMicrometer)]
        [InlineData("mi³", VolumeUnit.CubicMile)]
        [InlineData("mm³", VolumeUnit.CubicMillimeter)]
        [InlineData("yd³", VolumeUnit.CubicYard)]
        [InlineData("dal", VolumeUnit.Decaliter)]
        [InlineData("dagal (U.S.)", VolumeUnit.DecausGallon)]
        [InlineData("dl", VolumeUnit.Deciliter)]
        [InlineData("dgal (U.S.)", VolumeUnit.DeciusGallon)]
        [InlineData("hft³", VolumeUnit.HectocubicFoot)]
        [InlineData("hl", VolumeUnit.Hectoliter)]
        [InlineData("hgal (U.S.)", VolumeUnit.HectousGallon)]
        [InlineData("bl (imp.)", VolumeUnit.ImperialBeerBarrel)]
        [InlineData("gal (imp.)", VolumeUnit.ImperialGallon)]
        [InlineData("oz (imp.)", VolumeUnit.ImperialOunce)]
        [InlineData("pt (imp.)", VolumeUnit.ImperialPint)]
        [InlineData("UK pt", VolumeUnit.ImperialPint)]
        [InlineData("pt", VolumeUnit.ImperialPint)]
        [InlineData("p", VolumeUnit.ImperialPint)]
        [InlineData("qt (imp.)", VolumeUnit.ImperialQuart)]
        [InlineData("kft³", VolumeUnit.KilocubicFoot)]
        [InlineData("kgal (imp.)", VolumeUnit.KiloimperialGallon)]
        [InlineData("kl", VolumeUnit.Kiloliter)]
        [InlineData("kgal (U.S.)", VolumeUnit.KilousGallon)]
        [InlineData("l", VolumeUnit.Liter)]
        [InlineData("Mft³", VolumeUnit.MegacubicFoot)]
        [InlineData("Mgal (imp.)", VolumeUnit.MegaimperialGallon)]
        [InlineData("Ml", VolumeUnit.Megaliter)]
        [InlineData("Mgal (U.S.)", VolumeUnit.MegausGallon)]
        [InlineData("metric cup", VolumeUnit.MetricCup)]
        [InlineData("tsp", VolumeUnit.MetricTeaspoon)]
        [InlineData("t", VolumeUnit.MetricTeaspoon)]
        [InlineData("ts", VolumeUnit.MetricTeaspoon)]
        [InlineData("tspn", VolumeUnit.MetricTeaspoon)]
        [InlineData("t.", VolumeUnit.MetricTeaspoon)]
        [InlineData("ts.", VolumeUnit.MetricTeaspoon)]
        [InlineData("tsp.", VolumeUnit.MetricTeaspoon)]
        [InlineData("tspn.", VolumeUnit.MetricTeaspoon)]
        [InlineData("teaspoon", VolumeUnit.MetricTeaspoon)]
        [InlineData("µl", VolumeUnit.Microliter)]
        [InlineData("ml", VolumeUnit.Milliliter)]
        [InlineData("nl", VolumeUnit.Nanoliter)]
        [InlineData("bbl", VolumeUnit.OilBarrel)]
        [InlineData("tablespoon (U.K.)", VolumeUnit.UkTablespoon)]
        [InlineData("bl (U.S.)", VolumeUnit.UsBeerBarrel)]
        [InlineData("cup (U.S. customary)", VolumeUnit.UsCustomaryCup)]
        [InlineData("gal (U.S.)", VolumeUnit.UsGallon)]
        [InlineData("cup (U.S.)", VolumeUnit.UsLegalCup)]
        [InlineData("oz (U.S.)", VolumeUnit.UsOunce)]
        [InlineData("pt (U.S.)", VolumeUnit.UsPint)]
        [InlineData("qt (U.S.)", VolumeUnit.UsQuart)]
        [InlineData("tablespoon (U.S.)", VolumeUnit.UsTablespoon)]
        [InlineData("teaspoon (U.S.)", VolumeUnit.UsTeaspoon)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, VolumeUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            VolumeUnit parsedUnit = Volume.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "ac-ft", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "acre-foot", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "acre-feet", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "tablespoon (A.U.)", VolumeUnit.AuTablespoon)]
        [InlineData("en-US", "bf", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "board foot", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "board feet", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "cl", VolumeUnit.Centiliter)]
        [InlineData("en-US", "cm³", VolumeUnit.CubicCentimeter)]
        [InlineData("en-US", "dm³", VolumeUnit.CubicDecimeter)]
        [InlineData("en-US", "ft³", VolumeUnit.CubicFoot)]
        [InlineData("en-US", "in³", VolumeUnit.CubicInch)]
        [InlineData("en-US", "m³", VolumeUnit.CubicMeter)]
        [InlineData("en-US", "µm³", VolumeUnit.CubicMicrometer)]
        [InlineData("en-US", "mi³", VolumeUnit.CubicMile)]
        [InlineData("en-US", "mm³", VolumeUnit.CubicMillimeter)]
        [InlineData("en-US", "yd³", VolumeUnit.CubicYard)]
        [InlineData("en-US", "dal", VolumeUnit.Decaliter)]
        [InlineData("en-US", "dagal (U.S.)", VolumeUnit.DecausGallon)]
        [InlineData("en-US", "dl", VolumeUnit.Deciliter)]
        [InlineData("en-US", "dgal (U.S.)", VolumeUnit.DeciusGallon)]
        [InlineData("en-US", "hft³", VolumeUnit.HectocubicFoot)]
        [InlineData("en-US", "hl", VolumeUnit.Hectoliter)]
        [InlineData("en-US", "hgal (U.S.)", VolumeUnit.HectousGallon)]
        [InlineData("en-US", "bl (imp.)", VolumeUnit.ImperialBeerBarrel)]
        [InlineData("en-US", "gal (imp.)", VolumeUnit.ImperialGallon)]
        [InlineData("en-US", "oz (imp.)", VolumeUnit.ImperialOunce)]
        [InlineData("en-US", "pt (imp.)", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "UK pt", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "pt", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "p", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "qt (imp.)", VolumeUnit.ImperialQuart)]
        [InlineData("en-US", "kft³", VolumeUnit.KilocubicFoot)]
        [InlineData("en-US", "kgal (imp.)", VolumeUnit.KiloimperialGallon)]
        [InlineData("en-US", "kl", VolumeUnit.Kiloliter)]
        [InlineData("en-US", "kgal (U.S.)", VolumeUnit.KilousGallon)]
        [InlineData("en-US", "l", VolumeUnit.Liter)]
        [InlineData("en-US", "Mft³", VolumeUnit.MegacubicFoot)]
        [InlineData("en-US", "Mgal (imp.)", VolumeUnit.MegaimperialGallon)]
        [InlineData("en-US", "Ml", VolumeUnit.Megaliter)]
        [InlineData("en-US", "Mgal (U.S.)", VolumeUnit.MegausGallon)]
        [InlineData("en-US", "metric cup", VolumeUnit.MetricCup)]
        [InlineData("en-US", "tsp", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "t", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "ts", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tspn", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "t.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "ts.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tsp.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tspn.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "teaspoon", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "µl", VolumeUnit.Microliter)]
        [InlineData("en-US", "ml", VolumeUnit.Milliliter)]
        [InlineData("en-US", "nl", VolumeUnit.Nanoliter)]
        [InlineData("en-US", "bbl", VolumeUnit.OilBarrel)]
        [InlineData("en-US", "tablespoon (U.K.)", VolumeUnit.UkTablespoon)]
        [InlineData("en-US", "bl (U.S.)", VolumeUnit.UsBeerBarrel)]
        [InlineData("en-US", "cup (U.S. customary)", VolumeUnit.UsCustomaryCup)]
        [InlineData("en-US", "gal (U.S.)", VolumeUnit.UsGallon)]
        [InlineData("en-US", "cup (U.S.)", VolumeUnit.UsLegalCup)]
        [InlineData("en-US", "oz (U.S.)", VolumeUnit.UsOunce)]
        [InlineData("en-US", "pt (U.S.)", VolumeUnit.UsPint)]
        [InlineData("en-US", "qt (U.S.)", VolumeUnit.UsQuart)]
        [InlineData("en-US", "tablespoon (U.S.)", VolumeUnit.UsTablespoon)]
        [InlineData("en-US", "teaspoon (U.S.)", VolumeUnit.UsTeaspoon)]
        [InlineData("fr-CA", "pmp", VolumeUnit.BoardFoot)]
        [InlineData("fr-CA", "pied-planche", VolumeUnit.BoardFoot)]
        [InlineData("fr-CA", "pied de planche", VolumeUnit.BoardFoot)]
        [InlineData("ru-RU", "сл", VolumeUnit.Centiliter)]
        [InlineData("ru-RU", "см³", VolumeUnit.CubicCentimeter)]
        [InlineData("ru-RU", "дм³", VolumeUnit.CubicDecimeter)]
        [InlineData("ru-RU", "фут³", VolumeUnit.CubicFoot)]
        [InlineData("ru-RU", "дюйм³", VolumeUnit.CubicInch)]
        [InlineData("ru-RU", "м³", VolumeUnit.CubicMeter)]
        [InlineData("ru-RU", "мкм³", VolumeUnit.CubicMicrometer)]
        [InlineData("ru-RU", "миля³", VolumeUnit.CubicMile)]
        [InlineData("ru-RU", "мм³", VolumeUnit.CubicMillimeter)]
        [InlineData("ru-RU", "ярд³", VolumeUnit.CubicYard)]
        [InlineData("ru-RU", "дал", VolumeUnit.Decaliter)]
        [InlineData("ru-RU", "даАмериканский галлон", VolumeUnit.DecausGallon)]
        [InlineData("ru-RU", "дл", VolumeUnit.Deciliter)]
        [InlineData("ru-RU", "дАмериканский галлон", VolumeUnit.DeciusGallon)]
        [InlineData("ru-RU", "гфут³", VolumeUnit.HectocubicFoot)]
        [InlineData("ru-RU", "гл", VolumeUnit.Hectoliter)]
        [InlineData("ru-RU", "гАмериканский галлон", VolumeUnit.HectousGallon)]
        [InlineData("ru-RU", "Английский галлон", VolumeUnit.ImperialGallon)]
        [InlineData("ru-RU", "Английская унция", VolumeUnit.ImperialOunce)]
        [InlineData("ru-RU", "кфут³", VolumeUnit.KilocubicFoot)]
        [InlineData("ru-RU", "кАнглийский галлон", VolumeUnit.KiloimperialGallon)]
        [InlineData("ru-RU", "кл", VolumeUnit.Kiloliter)]
        [InlineData("ru-RU", "кАмериканский галлон", VolumeUnit.KilousGallon)]
        [InlineData("ru-RU", "л", VolumeUnit.Liter)]
        [InlineData("ru-RU", "Мфут³", VolumeUnit.MegacubicFoot)]
        [InlineData("ru-RU", "МАнглийский галлон", VolumeUnit.MegaimperialGallon)]
        [InlineData("ru-RU", "Мл", VolumeUnit.Megaliter)]
        [InlineData("ru-RU", "МАмериканский галлон", VolumeUnit.MegausGallon)]
        [InlineData("ru-RU", "мкл", VolumeUnit.Microliter)]
        [InlineData("ru-RU", "мл", VolumeUnit.Milliliter)]
        [InlineData("ru-RU", "нл", VolumeUnit.Nanoliter)]
        [InlineData("ru-RU", "Американский галлон", VolumeUnit.UsGallon)]
        [InlineData("ru-RU", "Американская унция", VolumeUnit.UsOunce)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, VolumeUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            VolumeUnit parsedUnit = Volume.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "ac-ft", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "acre-foot", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "acre-feet", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "tablespoon (A.U.)", VolumeUnit.AuTablespoon)]
        [InlineData("en-US", "bf", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "board foot", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "board feet", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "cl", VolumeUnit.Centiliter)]
        [InlineData("en-US", "cm³", VolumeUnit.CubicCentimeter)]
        [InlineData("en-US", "dm³", VolumeUnit.CubicDecimeter)]
        [InlineData("en-US", "ft³", VolumeUnit.CubicFoot)]
        [InlineData("en-US", "in³", VolumeUnit.CubicInch)]
        [InlineData("en-US", "m³", VolumeUnit.CubicMeter)]
        [InlineData("en-US", "µm³", VolumeUnit.CubicMicrometer)]
        [InlineData("en-US", "mi³", VolumeUnit.CubicMile)]
        [InlineData("en-US", "mm³", VolumeUnit.CubicMillimeter)]
        [InlineData("en-US", "yd³", VolumeUnit.CubicYard)]
        [InlineData("en-US", "dal", VolumeUnit.Decaliter)]
        [InlineData("en-US", "dagal (U.S.)", VolumeUnit.DecausGallon)]
        [InlineData("en-US", "dl", VolumeUnit.Deciliter)]
        [InlineData("en-US", "dgal (U.S.)", VolumeUnit.DeciusGallon)]
        [InlineData("en-US", "hft³", VolumeUnit.HectocubicFoot)]
        [InlineData("en-US", "hl", VolumeUnit.Hectoliter)]
        [InlineData("en-US", "hgal (U.S.)", VolumeUnit.HectousGallon)]
        [InlineData("en-US", "bl (imp.)", VolumeUnit.ImperialBeerBarrel)]
        [InlineData("en-US", "gal (imp.)", VolumeUnit.ImperialGallon)]
        [InlineData("en-US", "oz (imp.)", VolumeUnit.ImperialOunce)]
        [InlineData("en-US", "pt (imp.)", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "UK pt", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "pt", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "p", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "qt (imp.)", VolumeUnit.ImperialQuart)]
        [InlineData("en-US", "kft³", VolumeUnit.KilocubicFoot)]
        [InlineData("en-US", "kgal (imp.)", VolumeUnit.KiloimperialGallon)]
        [InlineData("en-US", "kl", VolumeUnit.Kiloliter)]
        [InlineData("en-US", "kgal (U.S.)", VolumeUnit.KilousGallon)]
        [InlineData("en-US", "l", VolumeUnit.Liter)]
        [InlineData("en-US", "Mft³", VolumeUnit.MegacubicFoot)]
        [InlineData("en-US", "Mgal (imp.)", VolumeUnit.MegaimperialGallon)]
        [InlineData("en-US", "Ml", VolumeUnit.Megaliter)]
        [InlineData("en-US", "Mgal (U.S.)", VolumeUnit.MegausGallon)]
        [InlineData("en-US", "metric cup", VolumeUnit.MetricCup)]
        [InlineData("en-US", "tsp", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "t", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "ts", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tspn", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "t.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "ts.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tsp.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tspn.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "teaspoon", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "µl", VolumeUnit.Microliter)]
        [InlineData("en-US", "ml", VolumeUnit.Milliliter)]
        [InlineData("en-US", "nl", VolumeUnit.Nanoliter)]
        [InlineData("en-US", "bbl", VolumeUnit.OilBarrel)]
        [InlineData("en-US", "tablespoon (U.K.)", VolumeUnit.UkTablespoon)]
        [InlineData("en-US", "bl (U.S.)", VolumeUnit.UsBeerBarrel)]
        [InlineData("en-US", "cup (U.S. customary)", VolumeUnit.UsCustomaryCup)]
        [InlineData("en-US", "gal (U.S.)", VolumeUnit.UsGallon)]
        [InlineData("en-US", "cup (U.S.)", VolumeUnit.UsLegalCup)]
        [InlineData("en-US", "oz (U.S.)", VolumeUnit.UsOunce)]
        [InlineData("en-US", "pt (U.S.)", VolumeUnit.UsPint)]
        [InlineData("en-US", "qt (U.S.)", VolumeUnit.UsQuart)]
        [InlineData("en-US", "tablespoon (U.S.)", VolumeUnit.UsTablespoon)]
        [InlineData("en-US", "teaspoon (U.S.)", VolumeUnit.UsTeaspoon)]
        [InlineData("fr-CA", "pmp", VolumeUnit.BoardFoot)]
        [InlineData("fr-CA", "pied-planche", VolumeUnit.BoardFoot)]
        [InlineData("fr-CA", "pied de planche", VolumeUnit.BoardFoot)]
        [InlineData("ru-RU", "сл", VolumeUnit.Centiliter)]
        [InlineData("ru-RU", "см³", VolumeUnit.CubicCentimeter)]
        [InlineData("ru-RU", "дм³", VolumeUnit.CubicDecimeter)]
        [InlineData("ru-RU", "фут³", VolumeUnit.CubicFoot)]
        [InlineData("ru-RU", "дюйм³", VolumeUnit.CubicInch)]
        [InlineData("ru-RU", "м³", VolumeUnit.CubicMeter)]
        [InlineData("ru-RU", "мкм³", VolumeUnit.CubicMicrometer)]
        [InlineData("ru-RU", "миля³", VolumeUnit.CubicMile)]
        [InlineData("ru-RU", "мм³", VolumeUnit.CubicMillimeter)]
        [InlineData("ru-RU", "ярд³", VolumeUnit.CubicYard)]
        [InlineData("ru-RU", "дал", VolumeUnit.Decaliter)]
        [InlineData("ru-RU", "даАмериканский галлон", VolumeUnit.DecausGallon)]
        [InlineData("ru-RU", "дл", VolumeUnit.Deciliter)]
        [InlineData("ru-RU", "дАмериканский галлон", VolumeUnit.DeciusGallon)]
        [InlineData("ru-RU", "гфут³", VolumeUnit.HectocubicFoot)]
        [InlineData("ru-RU", "гл", VolumeUnit.Hectoliter)]
        [InlineData("ru-RU", "гАмериканский галлон", VolumeUnit.HectousGallon)]
        [InlineData("ru-RU", "Английский галлон", VolumeUnit.ImperialGallon)]
        [InlineData("ru-RU", "Английская унция", VolumeUnit.ImperialOunce)]
        [InlineData("ru-RU", "кфут³", VolumeUnit.KilocubicFoot)]
        [InlineData("ru-RU", "кАнглийский галлон", VolumeUnit.KiloimperialGallon)]
        [InlineData("ru-RU", "кл", VolumeUnit.Kiloliter)]
        [InlineData("ru-RU", "кАмериканский галлон", VolumeUnit.KilousGallon)]
        [InlineData("ru-RU", "л", VolumeUnit.Liter)]
        [InlineData("ru-RU", "Мфут³", VolumeUnit.MegacubicFoot)]
        [InlineData("ru-RU", "МАнглийский галлон", VolumeUnit.MegaimperialGallon)]
        [InlineData("ru-RU", "Мл", VolumeUnit.Megaliter)]
        [InlineData("ru-RU", "МАмериканский галлон", VolumeUnit.MegausGallon)]
        [InlineData("ru-RU", "мкл", VolumeUnit.Microliter)]
        [InlineData("ru-RU", "мл", VolumeUnit.Milliliter)]
        [InlineData("ru-RU", "нл", VolumeUnit.Nanoliter)]
        [InlineData("ru-RU", "Американский галлон", VolumeUnit.UsGallon)]
        [InlineData("ru-RU", "Американская унция", VolumeUnit.UsOunce)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, VolumeUnit expectedUnit)
        {
            VolumeUnit parsedUnit = Volume.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hm³")] // [CubicHectometer, HectocubicMeter]
        [InlineData("en-US", "km³")] // [CubicKilometer, KilocubicMeter]
        [InlineData("ru-RU", "гм³")] // [CubicHectometer, HectocubicMeter]
        [InlineData("ru-RU", "км³")] // [CubicKilometer, KilocubicMeter]
        public void ParseUnitWithAmbiguousAbbreviation(string culture, string abbreviation)
        {
            Assert.Throws<AmbiguousUnitParseException>(() => Volume.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture)));
        }

        [Theory]
        [InlineData("ac-ft", VolumeUnit.AcreFoot)]
        [InlineData("acre-foot", VolumeUnit.AcreFoot)]
        [InlineData("acre-feet", VolumeUnit.AcreFoot)]
        [InlineData("tablespoon (A.U.)", VolumeUnit.AuTablespoon)]
        [InlineData("bf", VolumeUnit.BoardFoot)]
        [InlineData("board foot", VolumeUnit.BoardFoot)]
        [InlineData("board feet", VolumeUnit.BoardFoot)]
        [InlineData("cl", VolumeUnit.Centiliter)]
        [InlineData("cm³", VolumeUnit.CubicCentimeter)]
        [InlineData("dm³", VolumeUnit.CubicDecimeter)]
        [InlineData("ft³", VolumeUnit.CubicFoot)]
        [InlineData("in³", VolumeUnit.CubicInch)]
        [InlineData("m³", VolumeUnit.CubicMeter)]
        [InlineData("µm³", VolumeUnit.CubicMicrometer)]
        [InlineData("mi³", VolumeUnit.CubicMile)]
        [InlineData("mm³", VolumeUnit.CubicMillimeter)]
        [InlineData("yd³", VolumeUnit.CubicYard)]
        [InlineData("dal", VolumeUnit.Decaliter)]
        [InlineData("dagal (U.S.)", VolumeUnit.DecausGallon)]
        [InlineData("dl", VolumeUnit.Deciliter)]
        [InlineData("dgal (U.S.)", VolumeUnit.DeciusGallon)]
        [InlineData("hft³", VolumeUnit.HectocubicFoot)]
        [InlineData("hl", VolumeUnit.Hectoliter)]
        [InlineData("hgal (U.S.)", VolumeUnit.HectousGallon)]
        [InlineData("bl (imp.)", VolumeUnit.ImperialBeerBarrel)]
        [InlineData("gal (imp.)", VolumeUnit.ImperialGallon)]
        [InlineData("oz (imp.)", VolumeUnit.ImperialOunce)]
        [InlineData("pt (imp.)", VolumeUnit.ImperialPint)]
        [InlineData("UK pt", VolumeUnit.ImperialPint)]
        [InlineData("pt", VolumeUnit.ImperialPint)]
        [InlineData("p", VolumeUnit.ImperialPint)]
        [InlineData("qt (imp.)", VolumeUnit.ImperialQuart)]
        [InlineData("kft³", VolumeUnit.KilocubicFoot)]
        [InlineData("kgal (imp.)", VolumeUnit.KiloimperialGallon)]
        [InlineData("kl", VolumeUnit.Kiloliter)]
        [InlineData("kgal (U.S.)", VolumeUnit.KilousGallon)]
        [InlineData("l", VolumeUnit.Liter)]
        [InlineData("Mft³", VolumeUnit.MegacubicFoot)]
        [InlineData("Mgal (imp.)", VolumeUnit.MegaimperialGallon)]
        [InlineData("Ml", VolumeUnit.Megaliter)]
        [InlineData("Mgal (U.S.)", VolumeUnit.MegausGallon)]
        [InlineData("metric cup", VolumeUnit.MetricCup)]
        [InlineData("tsp", VolumeUnit.MetricTeaspoon)]
        [InlineData("t", VolumeUnit.MetricTeaspoon)]
        [InlineData("ts", VolumeUnit.MetricTeaspoon)]
        [InlineData("tspn", VolumeUnit.MetricTeaspoon)]
        [InlineData("t.", VolumeUnit.MetricTeaspoon)]
        [InlineData("ts.", VolumeUnit.MetricTeaspoon)]
        [InlineData("tsp.", VolumeUnit.MetricTeaspoon)]
        [InlineData("tspn.", VolumeUnit.MetricTeaspoon)]
        [InlineData("teaspoon", VolumeUnit.MetricTeaspoon)]
        [InlineData("µl", VolumeUnit.Microliter)]
        [InlineData("ml", VolumeUnit.Milliliter)]
        [InlineData("nl", VolumeUnit.Nanoliter)]
        [InlineData("bbl", VolumeUnit.OilBarrel)]
        [InlineData("tablespoon (U.K.)", VolumeUnit.UkTablespoon)]
        [InlineData("bl (U.S.)", VolumeUnit.UsBeerBarrel)]
        [InlineData("cup (U.S. customary)", VolumeUnit.UsCustomaryCup)]
        [InlineData("gal (U.S.)", VolumeUnit.UsGallon)]
        [InlineData("cup (U.S.)", VolumeUnit.UsLegalCup)]
        [InlineData("oz (U.S.)", VolumeUnit.UsOunce)]
        [InlineData("pt (U.S.)", VolumeUnit.UsPint)]
        [InlineData("qt (U.S.)", VolumeUnit.UsQuart)]
        [InlineData("tablespoon (U.S.)", VolumeUnit.UsTablespoon)]
        [InlineData("teaspoon (U.S.)", VolumeUnit.UsTeaspoon)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, VolumeUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Volume.TryParseUnit(abbreviation, out VolumeUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("ac-ft", VolumeUnit.AcreFoot)]
        [InlineData("acre-foot", VolumeUnit.AcreFoot)]
        [InlineData("acre-feet", VolumeUnit.AcreFoot)]
        [InlineData("tablespoon (A.U.)", VolumeUnit.AuTablespoon)]
        [InlineData("bf", VolumeUnit.BoardFoot)]
        [InlineData("board foot", VolumeUnit.BoardFoot)]
        [InlineData("board feet", VolumeUnit.BoardFoot)]
        [InlineData("cl", VolumeUnit.Centiliter)]
        [InlineData("cm³", VolumeUnit.CubicCentimeter)]
        [InlineData("dm³", VolumeUnit.CubicDecimeter)]
        [InlineData("ft³", VolumeUnit.CubicFoot)]
        [InlineData("in³", VolumeUnit.CubicInch)]
        [InlineData("m³", VolumeUnit.CubicMeter)]
        [InlineData("µm³", VolumeUnit.CubicMicrometer)]
        [InlineData("mi³", VolumeUnit.CubicMile)]
        [InlineData("mm³", VolumeUnit.CubicMillimeter)]
        [InlineData("yd³", VolumeUnit.CubicYard)]
        [InlineData("dal", VolumeUnit.Decaliter)]
        [InlineData("dagal (U.S.)", VolumeUnit.DecausGallon)]
        [InlineData("dl", VolumeUnit.Deciliter)]
        [InlineData("dgal (U.S.)", VolumeUnit.DeciusGallon)]
        [InlineData("hft³", VolumeUnit.HectocubicFoot)]
        [InlineData("hl", VolumeUnit.Hectoliter)]
        [InlineData("hgal (U.S.)", VolumeUnit.HectousGallon)]
        [InlineData("bl (imp.)", VolumeUnit.ImperialBeerBarrel)]
        [InlineData("gal (imp.)", VolumeUnit.ImperialGallon)]
        [InlineData("oz (imp.)", VolumeUnit.ImperialOunce)]
        [InlineData("pt (imp.)", VolumeUnit.ImperialPint)]
        [InlineData("UK pt", VolumeUnit.ImperialPint)]
        [InlineData("pt", VolumeUnit.ImperialPint)]
        [InlineData("p", VolumeUnit.ImperialPint)]
        [InlineData("qt (imp.)", VolumeUnit.ImperialQuart)]
        [InlineData("kft³", VolumeUnit.KilocubicFoot)]
        [InlineData("kgal (imp.)", VolumeUnit.KiloimperialGallon)]
        [InlineData("kl", VolumeUnit.Kiloliter)]
        [InlineData("kgal (U.S.)", VolumeUnit.KilousGallon)]
        [InlineData("l", VolumeUnit.Liter)]
        [InlineData("Mft³", VolumeUnit.MegacubicFoot)]
        [InlineData("Mgal (imp.)", VolumeUnit.MegaimperialGallon)]
        [InlineData("Ml", VolumeUnit.Megaliter)]
        [InlineData("Mgal (U.S.)", VolumeUnit.MegausGallon)]
        [InlineData("metric cup", VolumeUnit.MetricCup)]
        [InlineData("tsp", VolumeUnit.MetricTeaspoon)]
        [InlineData("t", VolumeUnit.MetricTeaspoon)]
        [InlineData("ts", VolumeUnit.MetricTeaspoon)]
        [InlineData("tspn", VolumeUnit.MetricTeaspoon)]
        [InlineData("t.", VolumeUnit.MetricTeaspoon)]
        [InlineData("ts.", VolumeUnit.MetricTeaspoon)]
        [InlineData("tsp.", VolumeUnit.MetricTeaspoon)]
        [InlineData("tspn.", VolumeUnit.MetricTeaspoon)]
        [InlineData("teaspoon", VolumeUnit.MetricTeaspoon)]
        [InlineData("µl", VolumeUnit.Microliter)]
        [InlineData("ml", VolumeUnit.Milliliter)]
        [InlineData("nl", VolumeUnit.Nanoliter)]
        [InlineData("bbl", VolumeUnit.OilBarrel)]
        [InlineData("tablespoon (U.K.)", VolumeUnit.UkTablespoon)]
        [InlineData("bl (U.S.)", VolumeUnit.UsBeerBarrel)]
        [InlineData("cup (U.S. customary)", VolumeUnit.UsCustomaryCup)]
        [InlineData("gal (U.S.)", VolumeUnit.UsGallon)]
        [InlineData("cup (U.S.)", VolumeUnit.UsLegalCup)]
        [InlineData("oz (U.S.)", VolumeUnit.UsOunce)]
        [InlineData("pt (U.S.)", VolumeUnit.UsPint)]
        [InlineData("qt (U.S.)", VolumeUnit.UsQuart)]
        [InlineData("tablespoon (U.S.)", VolumeUnit.UsTablespoon)]
        [InlineData("teaspoon (U.S.)", VolumeUnit.UsTeaspoon)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, VolumeUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Volume.TryParseUnit(abbreviation, out VolumeUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "ac-ft", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "acre-foot", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "acre-feet", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "tablespoon (A.U.)", VolumeUnit.AuTablespoon)]
        [InlineData("en-US", "bf", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "board foot", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "board feet", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "cl", VolumeUnit.Centiliter)]
        [InlineData("en-US", "cm³", VolumeUnit.CubicCentimeter)]
        [InlineData("en-US", "dm³", VolumeUnit.CubicDecimeter)]
        [InlineData("en-US", "ft³", VolumeUnit.CubicFoot)]
        [InlineData("en-US", "in³", VolumeUnit.CubicInch)]
        [InlineData("en-US", "m³", VolumeUnit.CubicMeter)]
        [InlineData("en-US", "µm³", VolumeUnit.CubicMicrometer)]
        [InlineData("en-US", "mi³", VolumeUnit.CubicMile)]
        [InlineData("en-US", "mm³", VolumeUnit.CubicMillimeter)]
        [InlineData("en-US", "yd³", VolumeUnit.CubicYard)]
        [InlineData("en-US", "dal", VolumeUnit.Decaliter)]
        [InlineData("en-US", "dagal (U.S.)", VolumeUnit.DecausGallon)]
        [InlineData("en-US", "dl", VolumeUnit.Deciliter)]
        [InlineData("en-US", "dgal (U.S.)", VolumeUnit.DeciusGallon)]
        [InlineData("en-US", "hft³", VolumeUnit.HectocubicFoot)]
        [InlineData("en-US", "hl", VolumeUnit.Hectoliter)]
        [InlineData("en-US", "hgal (U.S.)", VolumeUnit.HectousGallon)]
        [InlineData("en-US", "bl (imp.)", VolumeUnit.ImperialBeerBarrel)]
        [InlineData("en-US", "gal (imp.)", VolumeUnit.ImperialGallon)]
        [InlineData("en-US", "oz (imp.)", VolumeUnit.ImperialOunce)]
        [InlineData("en-US", "pt (imp.)", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "UK pt", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "pt", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "p", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "qt (imp.)", VolumeUnit.ImperialQuart)]
        [InlineData("en-US", "kft³", VolumeUnit.KilocubicFoot)]
        [InlineData("en-US", "kgal (imp.)", VolumeUnit.KiloimperialGallon)]
        [InlineData("en-US", "kl", VolumeUnit.Kiloliter)]
        [InlineData("en-US", "kgal (U.S.)", VolumeUnit.KilousGallon)]
        [InlineData("en-US", "l", VolumeUnit.Liter)]
        [InlineData("en-US", "Mft³", VolumeUnit.MegacubicFoot)]
        [InlineData("en-US", "Mgal (imp.)", VolumeUnit.MegaimperialGallon)]
        [InlineData("en-US", "Ml", VolumeUnit.Megaliter)]
        [InlineData("en-US", "Mgal (U.S.)", VolumeUnit.MegausGallon)]
        [InlineData("en-US", "metric cup", VolumeUnit.MetricCup)]
        [InlineData("en-US", "tsp", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "t", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "ts", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tspn", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "t.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "ts.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tsp.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tspn.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "teaspoon", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "µl", VolumeUnit.Microliter)]
        [InlineData("en-US", "ml", VolumeUnit.Milliliter)]
        [InlineData("en-US", "nl", VolumeUnit.Nanoliter)]
        [InlineData("en-US", "bbl", VolumeUnit.OilBarrel)]
        [InlineData("en-US", "tablespoon (U.K.)", VolumeUnit.UkTablespoon)]
        [InlineData("en-US", "bl (U.S.)", VolumeUnit.UsBeerBarrel)]
        [InlineData("en-US", "cup (U.S. customary)", VolumeUnit.UsCustomaryCup)]
        [InlineData("en-US", "gal (U.S.)", VolumeUnit.UsGallon)]
        [InlineData("en-US", "cup (U.S.)", VolumeUnit.UsLegalCup)]
        [InlineData("en-US", "oz (U.S.)", VolumeUnit.UsOunce)]
        [InlineData("en-US", "pt (U.S.)", VolumeUnit.UsPint)]
        [InlineData("en-US", "qt (U.S.)", VolumeUnit.UsQuart)]
        [InlineData("en-US", "tablespoon (U.S.)", VolumeUnit.UsTablespoon)]
        [InlineData("en-US", "teaspoon (U.S.)", VolumeUnit.UsTeaspoon)]
        [InlineData("fr-CA", "pmp", VolumeUnit.BoardFoot)]
        [InlineData("fr-CA", "pied-planche", VolumeUnit.BoardFoot)]
        [InlineData("fr-CA", "pied de planche", VolumeUnit.BoardFoot)]
        [InlineData("ru-RU", "сл", VolumeUnit.Centiliter)]
        [InlineData("ru-RU", "см³", VolumeUnit.CubicCentimeter)]
        [InlineData("ru-RU", "дм³", VolumeUnit.CubicDecimeter)]
        [InlineData("ru-RU", "фут³", VolumeUnit.CubicFoot)]
        [InlineData("ru-RU", "дюйм³", VolumeUnit.CubicInch)]
        [InlineData("ru-RU", "м³", VolumeUnit.CubicMeter)]
        [InlineData("ru-RU", "мкм³", VolumeUnit.CubicMicrometer)]
        [InlineData("ru-RU", "миля³", VolumeUnit.CubicMile)]
        [InlineData("ru-RU", "мм³", VolumeUnit.CubicMillimeter)]
        [InlineData("ru-RU", "ярд³", VolumeUnit.CubicYard)]
        [InlineData("ru-RU", "дал", VolumeUnit.Decaliter)]
        [InlineData("ru-RU", "даАмериканский галлон", VolumeUnit.DecausGallon)]
        [InlineData("ru-RU", "дл", VolumeUnit.Deciliter)]
        [InlineData("ru-RU", "дАмериканский галлон", VolumeUnit.DeciusGallon)]
        [InlineData("ru-RU", "гфут³", VolumeUnit.HectocubicFoot)]
        [InlineData("ru-RU", "гл", VolumeUnit.Hectoliter)]
        [InlineData("ru-RU", "гАмериканский галлон", VolumeUnit.HectousGallon)]
        [InlineData("ru-RU", "Английский галлон", VolumeUnit.ImperialGallon)]
        [InlineData("ru-RU", "Английская унция", VolumeUnit.ImperialOunce)]
        [InlineData("ru-RU", "кфут³", VolumeUnit.KilocubicFoot)]
        [InlineData("ru-RU", "кАнглийский галлон", VolumeUnit.KiloimperialGallon)]
        [InlineData("ru-RU", "кл", VolumeUnit.Kiloliter)]
        [InlineData("ru-RU", "кАмериканский галлон", VolumeUnit.KilousGallon)]
        [InlineData("ru-RU", "л", VolumeUnit.Liter)]
        [InlineData("ru-RU", "Мфут³", VolumeUnit.MegacubicFoot)]
        [InlineData("ru-RU", "МАнглийский галлон", VolumeUnit.MegaimperialGallon)]
        [InlineData("ru-RU", "Мл", VolumeUnit.Megaliter)]
        [InlineData("ru-RU", "МАмериканский галлон", VolumeUnit.MegausGallon)]
        [InlineData("ru-RU", "мкл", VolumeUnit.Microliter)]
        [InlineData("ru-RU", "мл", VolumeUnit.Milliliter)]
        [InlineData("ru-RU", "нл", VolumeUnit.Nanoliter)]
        [InlineData("ru-RU", "Американский галлон", VolumeUnit.UsGallon)]
        [InlineData("ru-RU", "Американская унция", VolumeUnit.UsOunce)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, VolumeUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Volume.TryParseUnit(abbreviation, out VolumeUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "ac-ft", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "acre-foot", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "acre-feet", VolumeUnit.AcreFoot)]
        [InlineData("en-US", "tablespoon (A.U.)", VolumeUnit.AuTablespoon)]
        [InlineData("en-US", "bf", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "board foot", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "board feet", VolumeUnit.BoardFoot)]
        [InlineData("en-US", "cl", VolumeUnit.Centiliter)]
        [InlineData("en-US", "cm³", VolumeUnit.CubicCentimeter)]
        [InlineData("en-US", "dm³", VolumeUnit.CubicDecimeter)]
        [InlineData("en-US", "ft³", VolumeUnit.CubicFoot)]
        [InlineData("en-US", "in³", VolumeUnit.CubicInch)]
        [InlineData("en-US", "m³", VolumeUnit.CubicMeter)]
        [InlineData("en-US", "µm³", VolumeUnit.CubicMicrometer)]
        [InlineData("en-US", "mi³", VolumeUnit.CubicMile)]
        [InlineData("en-US", "mm³", VolumeUnit.CubicMillimeter)]
        [InlineData("en-US", "yd³", VolumeUnit.CubicYard)]
        [InlineData("en-US", "dal", VolumeUnit.Decaliter)]
        [InlineData("en-US", "dagal (U.S.)", VolumeUnit.DecausGallon)]
        [InlineData("en-US", "dl", VolumeUnit.Deciliter)]
        [InlineData("en-US", "dgal (U.S.)", VolumeUnit.DeciusGallon)]
        [InlineData("en-US", "hft³", VolumeUnit.HectocubicFoot)]
        [InlineData("en-US", "hl", VolumeUnit.Hectoliter)]
        [InlineData("en-US", "hgal (U.S.)", VolumeUnit.HectousGallon)]
        [InlineData("en-US", "bl (imp.)", VolumeUnit.ImperialBeerBarrel)]
        [InlineData("en-US", "gal (imp.)", VolumeUnit.ImperialGallon)]
        [InlineData("en-US", "oz (imp.)", VolumeUnit.ImperialOunce)]
        [InlineData("en-US", "pt (imp.)", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "UK pt", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "pt", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "p", VolumeUnit.ImperialPint)]
        [InlineData("en-US", "qt (imp.)", VolumeUnit.ImperialQuart)]
        [InlineData("en-US", "kft³", VolumeUnit.KilocubicFoot)]
        [InlineData("en-US", "kgal (imp.)", VolumeUnit.KiloimperialGallon)]
        [InlineData("en-US", "kl", VolumeUnit.Kiloliter)]
        [InlineData("en-US", "kgal (U.S.)", VolumeUnit.KilousGallon)]
        [InlineData("en-US", "l", VolumeUnit.Liter)]
        [InlineData("en-US", "Mft³", VolumeUnit.MegacubicFoot)]
        [InlineData("en-US", "Mgal (imp.)", VolumeUnit.MegaimperialGallon)]
        [InlineData("en-US", "Ml", VolumeUnit.Megaliter)]
        [InlineData("en-US", "Mgal (U.S.)", VolumeUnit.MegausGallon)]
        [InlineData("en-US", "metric cup", VolumeUnit.MetricCup)]
        [InlineData("en-US", "tsp", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "t", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "ts", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tspn", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "t.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "ts.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tsp.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "tspn.", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "teaspoon", VolumeUnit.MetricTeaspoon)]
        [InlineData("en-US", "µl", VolumeUnit.Microliter)]
        [InlineData("en-US", "ml", VolumeUnit.Milliliter)]
        [InlineData("en-US", "nl", VolumeUnit.Nanoliter)]
        [InlineData("en-US", "bbl", VolumeUnit.OilBarrel)]
        [InlineData("en-US", "tablespoon (U.K.)", VolumeUnit.UkTablespoon)]
        [InlineData("en-US", "bl (U.S.)", VolumeUnit.UsBeerBarrel)]
        [InlineData("en-US", "cup (U.S. customary)", VolumeUnit.UsCustomaryCup)]
        [InlineData("en-US", "gal (U.S.)", VolumeUnit.UsGallon)]
        [InlineData("en-US", "cup (U.S.)", VolumeUnit.UsLegalCup)]
        [InlineData("en-US", "oz (U.S.)", VolumeUnit.UsOunce)]
        [InlineData("en-US", "pt (U.S.)", VolumeUnit.UsPint)]
        [InlineData("en-US", "qt (U.S.)", VolumeUnit.UsQuart)]
        [InlineData("en-US", "tablespoon (U.S.)", VolumeUnit.UsTablespoon)]
        [InlineData("en-US", "teaspoon (U.S.)", VolumeUnit.UsTeaspoon)]
        [InlineData("fr-CA", "pmp", VolumeUnit.BoardFoot)]
        [InlineData("fr-CA", "pied-planche", VolumeUnit.BoardFoot)]
        [InlineData("fr-CA", "pied de planche", VolumeUnit.BoardFoot)]
        [InlineData("ru-RU", "сл", VolumeUnit.Centiliter)]
        [InlineData("ru-RU", "см³", VolumeUnit.CubicCentimeter)]
        [InlineData("ru-RU", "дм³", VolumeUnit.CubicDecimeter)]
        [InlineData("ru-RU", "фут³", VolumeUnit.CubicFoot)]
        [InlineData("ru-RU", "дюйм³", VolumeUnit.CubicInch)]
        [InlineData("ru-RU", "м³", VolumeUnit.CubicMeter)]
        [InlineData("ru-RU", "мкм³", VolumeUnit.CubicMicrometer)]
        [InlineData("ru-RU", "миля³", VolumeUnit.CubicMile)]
        [InlineData("ru-RU", "мм³", VolumeUnit.CubicMillimeter)]
        [InlineData("ru-RU", "ярд³", VolumeUnit.CubicYard)]
        [InlineData("ru-RU", "дал", VolumeUnit.Decaliter)]
        [InlineData("ru-RU", "даАмериканский галлон", VolumeUnit.DecausGallon)]
        [InlineData("ru-RU", "дл", VolumeUnit.Deciliter)]
        [InlineData("ru-RU", "дАмериканский галлон", VolumeUnit.DeciusGallon)]
        [InlineData("ru-RU", "гфут³", VolumeUnit.HectocubicFoot)]
        [InlineData("ru-RU", "гл", VolumeUnit.Hectoliter)]
        [InlineData("ru-RU", "гАмериканский галлон", VolumeUnit.HectousGallon)]
        [InlineData("ru-RU", "Английский галлон", VolumeUnit.ImperialGallon)]
        [InlineData("ru-RU", "Английская унция", VolumeUnit.ImperialOunce)]
        [InlineData("ru-RU", "кфут³", VolumeUnit.KilocubicFoot)]
        [InlineData("ru-RU", "кАнглийский галлон", VolumeUnit.KiloimperialGallon)]
        [InlineData("ru-RU", "кл", VolumeUnit.Kiloliter)]
        [InlineData("ru-RU", "кАмериканский галлон", VolumeUnit.KilousGallon)]
        [InlineData("ru-RU", "л", VolumeUnit.Liter)]
        [InlineData("ru-RU", "Мфут³", VolumeUnit.MegacubicFoot)]
        [InlineData("ru-RU", "МАнглийский галлон", VolumeUnit.MegaimperialGallon)]
        [InlineData("ru-RU", "Мл", VolumeUnit.Megaliter)]
        [InlineData("ru-RU", "МАмериканский галлон", VolumeUnit.MegausGallon)]
        [InlineData("ru-RU", "мкл", VolumeUnit.Microliter)]
        [InlineData("ru-RU", "мл", VolumeUnit.Milliliter)]
        [InlineData("ru-RU", "нл", VolumeUnit.Nanoliter)]
        [InlineData("ru-RU", "Американский галлон", VolumeUnit.UsGallon)]
        [InlineData("ru-RU", "Американская унция", VolumeUnit.UsOunce)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, VolumeUnit expectedUnit)
        {
            Assert.True(Volume.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out VolumeUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hm³")] // [CubicHectometer, HectocubicMeter]
        [InlineData("en-US", "km³")] // [CubicKilometer, KilocubicMeter]
        [InlineData("ru-RU", "гм³")] // [CubicHectometer, HectocubicMeter]
        [InlineData("ru-RU", "км³")] // [CubicKilometer, KilocubicMeter]
        public void TryParseUnitWithAmbiguousAbbreviation(string culture, string abbreviation)
        {
            Assert.False(Volume.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out _));
        }

        [Theory]
        [InlineData("en-US", VolumeUnit.AcreFoot, "ac-ft")]
        [InlineData("en-US", VolumeUnit.AuTablespoon, "tablespoon (A.U.)")]
        [InlineData("en-US", VolumeUnit.BoardFoot, "bf")]
        [InlineData("en-US", VolumeUnit.Centiliter, "cl")]
        [InlineData("en-US", VolumeUnit.CubicCentimeter, "cm³")]
        [InlineData("en-US", VolumeUnit.CubicDecimeter, "dm³")]
        [InlineData("en-US", VolumeUnit.CubicFoot, "ft³")]
        [InlineData("en-US", VolumeUnit.CubicHectometer, "hm³")]
        [InlineData("en-US", VolumeUnit.CubicInch, "in³")]
        [InlineData("en-US", VolumeUnit.CubicKilometer, "km³")]
        [InlineData("en-US", VolumeUnit.CubicMeter, "m³")]
        [InlineData("en-US", VolumeUnit.CubicMicrometer, "µm³")]
        [InlineData("en-US", VolumeUnit.CubicMile, "mi³")]
        [InlineData("en-US", VolumeUnit.CubicMillimeter, "mm³")]
        [InlineData("en-US", VolumeUnit.CubicYard, "yd³")]
        [InlineData("en-US", VolumeUnit.Decaliter, "dal")]
        [InlineData("en-US", VolumeUnit.DecausGallon, "dagal (U.S.)")]
        [InlineData("en-US", VolumeUnit.Deciliter, "dl")]
        [InlineData("en-US", VolumeUnit.DeciusGallon, "dgal (U.S.)")]
        [InlineData("en-US", VolumeUnit.HectocubicFoot, "hft³")]
        [InlineData("en-US", VolumeUnit.HectocubicMeter, "hm³")]
        [InlineData("en-US", VolumeUnit.Hectoliter, "hl")]
        [InlineData("en-US", VolumeUnit.HectousGallon, "hgal (U.S.)")]
        [InlineData("en-US", VolumeUnit.ImperialBeerBarrel, "bl (imp.)")]
        [InlineData("en-US", VolumeUnit.ImperialGallon, "gal (imp.)")]
        [InlineData("en-US", VolumeUnit.ImperialOunce, "oz (imp.)")]
        [InlineData("en-US", VolumeUnit.ImperialPint, "pt (imp.)")]
        [InlineData("en-US", VolumeUnit.ImperialQuart, "qt (imp.)")]
        [InlineData("en-US", VolumeUnit.KilocubicFoot, "kft³")]
        [InlineData("en-US", VolumeUnit.KilocubicMeter, "km³")]
        [InlineData("en-US", VolumeUnit.KiloimperialGallon, "kgal (imp.)")]
        [InlineData("en-US", VolumeUnit.Kiloliter, "kl")]
        [InlineData("en-US", VolumeUnit.KilousGallon, "kgal (U.S.)")]
        [InlineData("en-US", VolumeUnit.Liter, "l")]
        [InlineData("en-US", VolumeUnit.MegacubicFoot, "Mft³")]
        [InlineData("en-US", VolumeUnit.MegaimperialGallon, "Mgal (imp.)")]
        [InlineData("en-US", VolumeUnit.Megaliter, "Ml")]
        [InlineData("en-US", VolumeUnit.MegausGallon, "Mgal (U.S.)")]
        [InlineData("en-US", VolumeUnit.MetricCup, "metric cup")]
        [InlineData("en-US", VolumeUnit.MetricTeaspoon, "tsp")]
        [InlineData("en-US", VolumeUnit.Microliter, "µl")]
        [InlineData("en-US", VolumeUnit.Milliliter, "ml")]
        [InlineData("en-US", VolumeUnit.Nanoliter, "nl")]
        [InlineData("en-US", VolumeUnit.OilBarrel, "bbl")]
        [InlineData("en-US", VolumeUnit.UkTablespoon, "tablespoon (U.K.)")]
        [InlineData("en-US", VolumeUnit.UsBeerBarrel, "bl (U.S.)")]
        [InlineData("en-US", VolumeUnit.UsCustomaryCup, "cup (U.S. customary)")]
        [InlineData("en-US", VolumeUnit.UsGallon, "gal (U.S.)")]
        [InlineData("en-US", VolumeUnit.UsLegalCup, "cup (U.S.)")]
        [InlineData("en-US", VolumeUnit.UsOunce, "oz (U.S.)")]
        [InlineData("en-US", VolumeUnit.UsPint, "pt (U.S.)")]
        [InlineData("en-US", VolumeUnit.UsQuart, "qt (U.S.)")]
        [InlineData("en-US", VolumeUnit.UsTablespoon, "tablespoon (U.S.)")]
        [InlineData("en-US", VolumeUnit.UsTeaspoon, "teaspoon (U.S.)")]
        [InlineData("fr-CA", VolumeUnit.BoardFoot, "pmp")]
        [InlineData("ru-RU", VolumeUnit.Centiliter, "сл")]
        [InlineData("ru-RU", VolumeUnit.CubicCentimeter, "см³")]
        [InlineData("ru-RU", VolumeUnit.CubicDecimeter, "дм³")]
        [InlineData("ru-RU", VolumeUnit.CubicFoot, "фут³")]
        [InlineData("ru-RU", VolumeUnit.CubicHectometer, "гм³")]
        [InlineData("ru-RU", VolumeUnit.CubicInch, "дюйм³")]
        [InlineData("ru-RU", VolumeUnit.CubicKilometer, "км³")]
        [InlineData("ru-RU", VolumeUnit.CubicMeter, "м³")]
        [InlineData("ru-RU", VolumeUnit.CubicMicrometer, "мкм³")]
        [InlineData("ru-RU", VolumeUnit.CubicMile, "миля³")]
        [InlineData("ru-RU", VolumeUnit.CubicMillimeter, "мм³")]
        [InlineData("ru-RU", VolumeUnit.CubicYard, "ярд³")]
        [InlineData("ru-RU", VolumeUnit.Decaliter, "дал")]
        [InlineData("ru-RU", VolumeUnit.DecausGallon, "даАмериканский галлон")]
        [InlineData("ru-RU", VolumeUnit.Deciliter, "дл")]
        [InlineData("ru-RU", VolumeUnit.DeciusGallon, "дАмериканский галлон")]
        [InlineData("ru-RU", VolumeUnit.HectocubicFoot, "гфут³")]
        [InlineData("ru-RU", VolumeUnit.HectocubicMeter, "гм³")]
        [InlineData("ru-RU", VolumeUnit.Hectoliter, "гл")]
        [InlineData("ru-RU", VolumeUnit.HectousGallon, "гАмериканский галлон")]
        [InlineData("ru-RU", VolumeUnit.ImperialGallon, "Английский галлон")]
        [InlineData("ru-RU", VolumeUnit.ImperialOunce, "Английская унция")]
        [InlineData("ru-RU", VolumeUnit.KilocubicFoot, "кфут³")]
        [InlineData("ru-RU", VolumeUnit.KilocubicMeter, "км³")]
        [InlineData("ru-RU", VolumeUnit.KiloimperialGallon, "кАнглийский галлон")]
        [InlineData("ru-RU", VolumeUnit.Kiloliter, "кл")]
        [InlineData("ru-RU", VolumeUnit.KilousGallon, "кАмериканский галлон")]
        [InlineData("ru-RU", VolumeUnit.Liter, "л")]
        [InlineData("ru-RU", VolumeUnit.MegacubicFoot, "Мфут³")]
        [InlineData("ru-RU", VolumeUnit.MegaimperialGallon, "МАнглийский галлон")]
        [InlineData("ru-RU", VolumeUnit.Megaliter, "Мл")]
        [InlineData("ru-RU", VolumeUnit.MegausGallon, "МАмериканский галлон")]
        [InlineData("ru-RU", VolumeUnit.Microliter, "мкл")]
        [InlineData("ru-RU", VolumeUnit.Milliliter, "мл")]
        [InlineData("ru-RU", VolumeUnit.Nanoliter, "нл")]
        [InlineData("ru-RU", VolumeUnit.UsGallon, "Американский галлон")]
        [InlineData("ru-RU", VolumeUnit.UsOunce, "Американская унция")]
        public void GetAbbreviationForCulture(string culture, VolumeUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Volume.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Volume.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Volume.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(VolumeUnit unit)
        {
            var inBaseUnits = Volume.From(1.0, Volume.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(VolumeUnit unit)
        {
            var quantity = Volume.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(VolumeUnit unit)
        {
            Assert.All(Volume.Units.Where(u => u != Volume.BaseUnit), fromUnit =>
            {
                var quantity = Volume.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(VolumeUnit unit)
        {
            var quantity = default(Volume);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(VolumeUnit unit)
        {
            var quantity = Volume.From(3, Volume.BaseUnit);
            Volume expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<VolumeUnit> quantityToConvert = quantity;
                IQuantity<VolumeUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Volume cubicmeter = Volume.FromCubicMeters(3);
            Assert.Equal(3, Volume.FromAcreFeet(cubicmeter.AcreFeet).CubicMeters);
            Assert.Equal(3, Volume.FromAuTablespoons(cubicmeter.AuTablespoons).CubicMeters);
            Assert.Equal(3, Volume.FromBoardFeet(cubicmeter.BoardFeet).CubicMeters);
            Assert.Equal(3, Volume.FromCentiliters(cubicmeter.Centiliters).CubicMeters);
            Assert.Equal(3, Volume.FromCubicCentimeters(cubicmeter.CubicCentimeters).CubicMeters);
            Assert.Equal(3, Volume.FromCubicDecimeters(cubicmeter.CubicDecimeters).CubicMeters);
            Assert.Equal(3, Volume.FromCubicFeet(cubicmeter.CubicFeet).CubicMeters);
            Assert.Equal(3, Volume.FromCubicHectometers(cubicmeter.CubicHectometers).CubicMeters);
            Assert.Equal(3, Volume.FromCubicInches(cubicmeter.CubicInches).CubicMeters);
            Assert.Equal(3, Volume.FromCubicKilometers(cubicmeter.CubicKilometers).CubicMeters);
            Assert.Equal(3, Volume.FromCubicMeters(cubicmeter.CubicMeters).CubicMeters);
            Assert.Equal(3, Volume.FromCubicMicrometers(cubicmeter.CubicMicrometers).CubicMeters);
            Assert.Equal(3, Volume.FromCubicMiles(cubicmeter.CubicMiles).CubicMeters);
            Assert.Equal(3, Volume.FromCubicMillimeters(cubicmeter.CubicMillimeters).CubicMeters);
            Assert.Equal(3, Volume.FromCubicYards(cubicmeter.CubicYards).CubicMeters);
            Assert.Equal(3, Volume.FromDecaliters(cubicmeter.Decaliters).CubicMeters);
            Assert.Equal(3, Volume.FromDecausGallons(cubicmeter.DecausGallons).CubicMeters);
            Assert.Equal(3, Volume.FromDeciliters(cubicmeter.Deciliters).CubicMeters);
            Assert.Equal(3, Volume.FromDeciusGallons(cubicmeter.DeciusGallons).CubicMeters);
            Assert.Equal(3, Volume.FromHectocubicFeet(cubicmeter.HectocubicFeet).CubicMeters);
            Assert.Equal(3, Volume.FromHectocubicMeters(cubicmeter.HectocubicMeters).CubicMeters);
            Assert.Equal(3, Volume.FromHectoliters(cubicmeter.Hectoliters).CubicMeters);
            Assert.Equal(3, Volume.FromHectousGallons(cubicmeter.HectousGallons).CubicMeters);
            Assert.Equal(3, Volume.FromImperialBeerBarrels(cubicmeter.ImperialBeerBarrels).CubicMeters);
            Assert.Equal(3, Volume.FromImperialGallons(cubicmeter.ImperialGallons).CubicMeters);
            Assert.Equal(3, Volume.FromImperialOunces(cubicmeter.ImperialOunces).CubicMeters);
            Assert.Equal(3, Volume.FromImperialPints(cubicmeter.ImperialPints).CubicMeters);
            Assert.Equal(3, Volume.FromImperialQuarts(cubicmeter.ImperialQuarts).CubicMeters);
            Assert.Equal(3, Volume.FromKilocubicFeet(cubicmeter.KilocubicFeet).CubicMeters);
            Assert.Equal(3, Volume.FromKilocubicMeters(cubicmeter.KilocubicMeters).CubicMeters);
            Assert.Equal(3, Volume.FromKiloimperialGallons(cubicmeter.KiloimperialGallons).CubicMeters);
            Assert.Equal(3, Volume.FromKiloliters(cubicmeter.Kiloliters).CubicMeters);
            Assert.Equal(3, Volume.FromKilousGallons(cubicmeter.KilousGallons).CubicMeters);
            Assert.Equal(3, Volume.FromLiters(cubicmeter.Liters).CubicMeters);
            Assert.Equal(3, Volume.FromMegacubicFeet(cubicmeter.MegacubicFeet).CubicMeters);
            Assert.Equal(3, Volume.FromMegaimperialGallons(cubicmeter.MegaimperialGallons).CubicMeters);
            Assert.Equal(3, Volume.FromMegaliters(cubicmeter.Megaliters).CubicMeters);
            Assert.Equal(3, Volume.FromMegausGallons(cubicmeter.MegausGallons).CubicMeters);
            Assert.Equal(3, Volume.FromMetricCups(cubicmeter.MetricCups).CubicMeters);
            Assert.Equal(3, Volume.FromMetricTeaspoons(cubicmeter.MetricTeaspoons).CubicMeters);
            Assert.Equal(3, Volume.FromMicroliters(cubicmeter.Microliters).CubicMeters);
            Assert.Equal(3, Volume.FromMilliliters(cubicmeter.Milliliters).CubicMeters);
            Assert.Equal(3, Volume.FromNanoliters(cubicmeter.Nanoliters).CubicMeters);
            Assert.Equal(3, Volume.FromOilBarrels(cubicmeter.OilBarrels).CubicMeters);
            Assert.Equal(3, Volume.FromUkTablespoons(cubicmeter.UkTablespoons).CubicMeters);
            Assert.Equal(3, Volume.FromUsBeerBarrels(cubicmeter.UsBeerBarrels).CubicMeters);
            Assert.Equal(3, Volume.FromUsCustomaryCups(cubicmeter.UsCustomaryCups).CubicMeters);
            Assert.Equal(3, Volume.FromUsGallons(cubicmeter.UsGallons).CubicMeters);
            Assert.Equal(3, Volume.FromUsLegalCups(cubicmeter.UsLegalCups).CubicMeters);
            Assert.Equal(3, Volume.FromUsOunces(cubicmeter.UsOunces).CubicMeters);
            Assert.Equal(3, Volume.FromUsPints(cubicmeter.UsPints).CubicMeters);
            Assert.Equal(3, Volume.FromUsQuarts(cubicmeter.UsQuarts).CubicMeters);
            Assert.Equal(3, Volume.FromUsTablespoons(cubicmeter.UsTablespoons).CubicMeters);
            Assert.Equal(3, Volume.FromUsTeaspoons(cubicmeter.UsTeaspoons).CubicMeters);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Volume v = Volume.FromCubicMeters(1);
            Assert.Equal(-1, -v.CubicMeters);
            Assert.Equal(2, (Volume.FromCubicMeters(3) - v).CubicMeters);
            Assert.Equal(2, (v + v).CubicMeters);
            Assert.Equal(10, (v * 10).CubicMeters);
            Assert.Equal(10, (10 * v).CubicMeters);
            Assert.Equal(2, (Volume.FromCubicMeters(10) / 5).CubicMeters);
            Assert.Equal(2, Volume.FromCubicMeters(10) / Volume.FromCubicMeters(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Volume oneCubicMeter = Volume.FromCubicMeters(1);
            Volume twoCubicMeters = Volume.FromCubicMeters(2);

            Assert.True(oneCubicMeter < twoCubicMeters);
            Assert.True(oneCubicMeter <= twoCubicMeters);
            Assert.True(twoCubicMeters > oneCubicMeter);
            Assert.True(twoCubicMeters >= oneCubicMeter);

            Assert.False(oneCubicMeter > twoCubicMeters);
            Assert.False(oneCubicMeter >= twoCubicMeters);
            Assert.False(twoCubicMeters < oneCubicMeter);
            Assert.False(twoCubicMeters <= oneCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Equal(0, cubicmeter.CompareTo(cubicmeter));
            Assert.True(cubicmeter.CompareTo(Volume.Zero) > 0);
            Assert.True(Volume.Zero.CompareTo(cubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentException>(() => cubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.Throws<ArgumentNullException>(() => cubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, VolumeUnit.CubicMeter, 1, VolumeUnit.CubicMeter, true)]  // Same value and unit.
        [InlineData(1, VolumeUnit.CubicMeter, 2, VolumeUnit.CubicMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, VolumeUnit unitA, double valueB, VolumeUnit unitB, bool expectEqual)
        {
            var a = new Volume(valueA, unitA);
            var b = new Volume(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Volume.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Volume cubicmeter = Volume.FromCubicMeters(1);
            Assert.False(cubicmeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance_IsImplemented(double firstValue, double secondValue)
        {
            var quantity = Volume.FromCubicMeters(firstValue);
            var otherQuantity = Volume.FromCubicMeters(secondValue);
            Volume maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Volume.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Volume.FromCubicMeters(1);
            var negativeTolerance = Volume.FromCubicMeters(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumUtils.GetEnumValues<VolumeUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Volume.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Volume.Info.Units, Volume.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Volume.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 ac-ft", new Volume(1, VolumeUnit.AcreFoot).ToString());
            Assert.Equal("1 tablespoon (A.U.)", new Volume(1, VolumeUnit.AuTablespoon).ToString());
            Assert.Equal("1 bf", new Volume(1, VolumeUnit.BoardFoot).ToString());
            Assert.Equal("1 cl", new Volume(1, VolumeUnit.Centiliter).ToString());
            Assert.Equal("1 cm³", new Volume(1, VolumeUnit.CubicCentimeter).ToString());
            Assert.Equal("1 dm³", new Volume(1, VolumeUnit.CubicDecimeter).ToString());
            Assert.Equal("1 ft³", new Volume(1, VolumeUnit.CubicFoot).ToString());
            Assert.Equal("1 hm³", new Volume(1, VolumeUnit.CubicHectometer).ToString());
            Assert.Equal("1 in³", new Volume(1, VolumeUnit.CubicInch).ToString());
            Assert.Equal("1 km³", new Volume(1, VolumeUnit.CubicKilometer).ToString());
            Assert.Equal("1 m³", new Volume(1, VolumeUnit.CubicMeter).ToString());
            Assert.Equal("1 µm³", new Volume(1, VolumeUnit.CubicMicrometer).ToString());
            Assert.Equal("1 mi³", new Volume(1, VolumeUnit.CubicMile).ToString());
            Assert.Equal("1 mm³", new Volume(1, VolumeUnit.CubicMillimeter).ToString());
            Assert.Equal("1 yd³", new Volume(1, VolumeUnit.CubicYard).ToString());
            Assert.Equal("1 dal", new Volume(1, VolumeUnit.Decaliter).ToString());
            Assert.Equal("1 dagal (U.S.)", new Volume(1, VolumeUnit.DecausGallon).ToString());
            Assert.Equal("1 dl", new Volume(1, VolumeUnit.Deciliter).ToString());
            Assert.Equal("1 dgal (U.S.)", new Volume(1, VolumeUnit.DeciusGallon).ToString());
            Assert.Equal("1 hft³", new Volume(1, VolumeUnit.HectocubicFoot).ToString());
            Assert.Equal("1 hm³", new Volume(1, VolumeUnit.HectocubicMeter).ToString());
            Assert.Equal("1 hl", new Volume(1, VolumeUnit.Hectoliter).ToString());
            Assert.Equal("1 hgal (U.S.)", new Volume(1, VolumeUnit.HectousGallon).ToString());
            Assert.Equal("1 bl (imp.)", new Volume(1, VolumeUnit.ImperialBeerBarrel).ToString());
            Assert.Equal("1 gal (imp.)", new Volume(1, VolumeUnit.ImperialGallon).ToString());
            Assert.Equal("1 oz (imp.)", new Volume(1, VolumeUnit.ImperialOunce).ToString());
            Assert.Equal("1 pt (imp.)", new Volume(1, VolumeUnit.ImperialPint).ToString());
            Assert.Equal("1 qt (imp.)", new Volume(1, VolumeUnit.ImperialQuart).ToString());
            Assert.Equal("1 kft³", new Volume(1, VolumeUnit.KilocubicFoot).ToString());
            Assert.Equal("1 km³", new Volume(1, VolumeUnit.KilocubicMeter).ToString());
            Assert.Equal("1 kgal (imp.)", new Volume(1, VolumeUnit.KiloimperialGallon).ToString());
            Assert.Equal("1 kl", new Volume(1, VolumeUnit.Kiloliter).ToString());
            Assert.Equal("1 kgal (U.S.)", new Volume(1, VolumeUnit.KilousGallon).ToString());
            Assert.Equal("1 l", new Volume(1, VolumeUnit.Liter).ToString());
            Assert.Equal("1 Mft³", new Volume(1, VolumeUnit.MegacubicFoot).ToString());
            Assert.Equal("1 Mgal (imp.)", new Volume(1, VolumeUnit.MegaimperialGallon).ToString());
            Assert.Equal("1 Ml", new Volume(1, VolumeUnit.Megaliter).ToString());
            Assert.Equal("1 Mgal (U.S.)", new Volume(1, VolumeUnit.MegausGallon).ToString());
            Assert.Equal("1 metric cup", new Volume(1, VolumeUnit.MetricCup).ToString());
            Assert.Equal("1 tsp", new Volume(1, VolumeUnit.MetricTeaspoon).ToString());
            Assert.Equal("1 µl", new Volume(1, VolumeUnit.Microliter).ToString());
            Assert.Equal("1 ml", new Volume(1, VolumeUnit.Milliliter).ToString());
            Assert.Equal("1 nl", new Volume(1, VolumeUnit.Nanoliter).ToString());
            Assert.Equal("1 bbl", new Volume(1, VolumeUnit.OilBarrel).ToString());
            Assert.Equal("1 tablespoon (U.K.)", new Volume(1, VolumeUnit.UkTablespoon).ToString());
            Assert.Equal("1 bl (U.S.)", new Volume(1, VolumeUnit.UsBeerBarrel).ToString());
            Assert.Equal("1 cup (U.S. customary)", new Volume(1, VolumeUnit.UsCustomaryCup).ToString());
            Assert.Equal("1 gal (U.S.)", new Volume(1, VolumeUnit.UsGallon).ToString());
            Assert.Equal("1 cup (U.S.)", new Volume(1, VolumeUnit.UsLegalCup).ToString());
            Assert.Equal("1 oz (U.S.)", new Volume(1, VolumeUnit.UsOunce).ToString());
            Assert.Equal("1 pt (U.S.)", new Volume(1, VolumeUnit.UsPint).ToString());
            Assert.Equal("1 qt (U.S.)", new Volume(1, VolumeUnit.UsQuart).ToString());
            Assert.Equal("1 tablespoon (U.S.)", new Volume(1, VolumeUnit.UsTablespoon).ToString());
            Assert.Equal("1 teaspoon (U.S.)", new Volume(1, VolumeUnit.UsTeaspoon).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 ac-ft", new Volume(1, VolumeUnit.AcreFoot).ToString(swedishCulture));
            Assert.Equal("1 tablespoon (A.U.)", new Volume(1, VolumeUnit.AuTablespoon).ToString(swedishCulture));
            Assert.Equal("1 bf", new Volume(1, VolumeUnit.BoardFoot).ToString(swedishCulture));
            Assert.Equal("1 cl", new Volume(1, VolumeUnit.Centiliter).ToString(swedishCulture));
            Assert.Equal("1 cm³", new Volume(1, VolumeUnit.CubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 dm³", new Volume(1, VolumeUnit.CubicDecimeter).ToString(swedishCulture));
            Assert.Equal("1 ft³", new Volume(1, VolumeUnit.CubicFoot).ToString(swedishCulture));
            Assert.Equal("1 hm³", new Volume(1, VolumeUnit.CubicHectometer).ToString(swedishCulture));
            Assert.Equal("1 in³", new Volume(1, VolumeUnit.CubicInch).ToString(swedishCulture));
            Assert.Equal("1 km³", new Volume(1, VolumeUnit.CubicKilometer).ToString(swedishCulture));
            Assert.Equal("1 m³", new Volume(1, VolumeUnit.CubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µm³", new Volume(1, VolumeUnit.CubicMicrometer).ToString(swedishCulture));
            Assert.Equal("1 mi³", new Volume(1, VolumeUnit.CubicMile).ToString(swedishCulture));
            Assert.Equal("1 mm³", new Volume(1, VolumeUnit.CubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 yd³", new Volume(1, VolumeUnit.CubicYard).ToString(swedishCulture));
            Assert.Equal("1 dal", new Volume(1, VolumeUnit.Decaliter).ToString(swedishCulture));
            Assert.Equal("1 dagal (U.S.)", new Volume(1, VolumeUnit.DecausGallon).ToString(swedishCulture));
            Assert.Equal("1 dl", new Volume(1, VolumeUnit.Deciliter).ToString(swedishCulture));
            Assert.Equal("1 dgal (U.S.)", new Volume(1, VolumeUnit.DeciusGallon).ToString(swedishCulture));
            Assert.Equal("1 hft³", new Volume(1, VolumeUnit.HectocubicFoot).ToString(swedishCulture));
            Assert.Equal("1 hm³", new Volume(1, VolumeUnit.HectocubicMeter).ToString(swedishCulture));
            Assert.Equal("1 hl", new Volume(1, VolumeUnit.Hectoliter).ToString(swedishCulture));
            Assert.Equal("1 hgal (U.S.)", new Volume(1, VolumeUnit.HectousGallon).ToString(swedishCulture));
            Assert.Equal("1 bl (imp.)", new Volume(1, VolumeUnit.ImperialBeerBarrel).ToString(swedishCulture));
            Assert.Equal("1 gal (imp.)", new Volume(1, VolumeUnit.ImperialGallon).ToString(swedishCulture));
            Assert.Equal("1 oz (imp.)", new Volume(1, VolumeUnit.ImperialOunce).ToString(swedishCulture));
            Assert.Equal("1 pt (imp.)", new Volume(1, VolumeUnit.ImperialPint).ToString(swedishCulture));
            Assert.Equal("1 qt (imp.)", new Volume(1, VolumeUnit.ImperialQuart).ToString(swedishCulture));
            Assert.Equal("1 kft³", new Volume(1, VolumeUnit.KilocubicFoot).ToString(swedishCulture));
            Assert.Equal("1 km³", new Volume(1, VolumeUnit.KilocubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kgal (imp.)", new Volume(1, VolumeUnit.KiloimperialGallon).ToString(swedishCulture));
            Assert.Equal("1 kl", new Volume(1, VolumeUnit.Kiloliter).ToString(swedishCulture));
            Assert.Equal("1 kgal (U.S.)", new Volume(1, VolumeUnit.KilousGallon).ToString(swedishCulture));
            Assert.Equal("1 l", new Volume(1, VolumeUnit.Liter).ToString(swedishCulture));
            Assert.Equal("1 Mft³", new Volume(1, VolumeUnit.MegacubicFoot).ToString(swedishCulture));
            Assert.Equal("1 Mgal (imp.)", new Volume(1, VolumeUnit.MegaimperialGallon).ToString(swedishCulture));
            Assert.Equal("1 Ml", new Volume(1, VolumeUnit.Megaliter).ToString(swedishCulture));
            Assert.Equal("1 Mgal (U.S.)", new Volume(1, VolumeUnit.MegausGallon).ToString(swedishCulture));
            Assert.Equal("1 metric cup", new Volume(1, VolumeUnit.MetricCup).ToString(swedishCulture));
            Assert.Equal("1 tsp", new Volume(1, VolumeUnit.MetricTeaspoon).ToString(swedishCulture));
            Assert.Equal("1 µl", new Volume(1, VolumeUnit.Microliter).ToString(swedishCulture));
            Assert.Equal("1 ml", new Volume(1, VolumeUnit.Milliliter).ToString(swedishCulture));
            Assert.Equal("1 nl", new Volume(1, VolumeUnit.Nanoliter).ToString(swedishCulture));
            Assert.Equal("1 bbl", new Volume(1, VolumeUnit.OilBarrel).ToString(swedishCulture));
            Assert.Equal("1 tablespoon (U.K.)", new Volume(1, VolumeUnit.UkTablespoon).ToString(swedishCulture));
            Assert.Equal("1 bl (U.S.)", new Volume(1, VolumeUnit.UsBeerBarrel).ToString(swedishCulture));
            Assert.Equal("1 cup (U.S. customary)", new Volume(1, VolumeUnit.UsCustomaryCup).ToString(swedishCulture));
            Assert.Equal("1 gal (U.S.)", new Volume(1, VolumeUnit.UsGallon).ToString(swedishCulture));
            Assert.Equal("1 cup (U.S.)", new Volume(1, VolumeUnit.UsLegalCup).ToString(swedishCulture));
            Assert.Equal("1 oz (U.S.)", new Volume(1, VolumeUnit.UsOunce).ToString(swedishCulture));
            Assert.Equal("1 pt (U.S.)", new Volume(1, VolumeUnit.UsPint).ToString(swedishCulture));
            Assert.Equal("1 qt (U.S.)", new Volume(1, VolumeUnit.UsQuart).ToString(swedishCulture));
            Assert.Equal("1 tablespoon (U.S.)", new Volume(1, VolumeUnit.UsTablespoon).ToString(swedishCulture));
            Assert.Equal("1 teaspoon (U.S.)", new Volume(1, VolumeUnit.UsTeaspoon).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s1"));
            Assert.Equal("0.12 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s2"));
            Assert.Equal("0.123 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s3"));
            Assert.Equal("0.1235 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 m³", new Volume(0.123456, VolumeUnit.CubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Volume.FromCubicMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Volume.FromCubicMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Volume.FromCubicMeters(1.0);
            var expected = Comparison.GetHashCode(typeof(Volume), quantity.As(Volume.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Volume.FromCubicMeters(value);
            Assert.Equal(Volume.FromCubicMeters(-value), -quantity);
        }
    }
}
