//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System.Globalization;
using System.Resources;
using System.Runtime.Serialization;
using UnitsNet.Debug;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In physics, a force is any influence that causes an object to undergo a certain change, either concerning its movement, direction, or geometrical construction. In other words, a force can cause an object with mass to change its velocity (which includes to begin moving from a state of rest), i.e., to accelerate, or a flexible object to deform, or both. Force can also be described by intuitive concepts such as a push or a pull. A force has both magnitude and direction, making it a vector quantity. It is measured in the SI unit of newtons and represented by the symbol F.
    /// </summary>
    [DataContract]
    [DebuggerDisplay(QuantityDebugProxy.DisplayFormat)]
    [DebuggerTypeProxy(typeof(QuantityDebugProxy))]
    public readonly partial struct Force :
        IArithmeticQuantity<Force, ForceUnit>,
#if NET7_0_OR_GREATER
        IDivisionOperators<Force, Mass, Acceleration>,
        IDivisionOperators<Force, Pressure, Area>,
        IDivisionOperators<Force, ForceChangeRate, Duration>,
        IDivisionOperators<Force, Duration, ForceChangeRate>,
        IMultiplyOperators<Force, ReciprocalLength, ForcePerLength>,
        IDivisionOperators<Force, Length, ForcePerLength>,
        IDivisionOperators<Force, ForcePerLength, Length>,
        IDivisionOperators<Force, Acceleration, Mass>,
        IMultiplyOperators<Force, Speed, Power>,
        IMultiplyOperators<Force, ReciprocalArea, Pressure>,
        IDivisionOperators<Force, Area, Pressure>,
        IMultiplyOperators<Force, Length, Torque>,
#endif
#if NET7_0_OR_GREATER
        IComparisonOperators<Force, Force, bool>,
        IParsable<Force>,
#endif
        IComparable,
        IComparable<Force>,
        IEquatable<Force>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly ForceUnit? _unit;

        /// <summary>
        ///     Provides detailed information about the <see cref="Force"/> quantity, including its name, base unit, unit mappings, base dimensions, and conversion functions.
        /// </summary>
        public sealed class ForceInfo: QuantityInfo<Force, ForceUnit>
        {
            /// <inheritdoc />
            public ForceInfo(string name, ForceUnit baseUnit, IEnumerable<IUnitDefinition<ForceUnit>> unitMappings, Force zero, BaseDimensions baseDimensions,
                QuantityFromDelegate<Force, ForceUnit> fromDelegate, ResourceManager? unitAbbreviations)
                : base(name, baseUnit, unitMappings, zero, baseDimensions, fromDelegate, unitAbbreviations)
            {
            }

            /// <inheritdoc />
            public ForceInfo(string name, ForceUnit baseUnit, IEnumerable<IUnitDefinition<ForceUnit>> unitMappings, Force zero, BaseDimensions baseDimensions)
                : this(name, baseUnit, unitMappings, zero, baseDimensions, Force.From, new ResourceManager("UnitsNet.GeneratedCode.Resources.Force", typeof(Force).Assembly))
            {
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="ForceInfo"/> class with the default settings for the Force quantity.
            /// </summary>
            /// <returns>A new instance of the <see cref="ForceInfo"/> class with the default settings.</returns>
            public static ForceInfo CreateDefault()
            {
                return new ForceInfo(nameof(Force), DefaultBaseUnit, GetDefaultMappings(), new Force(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="ForceInfo"/> class with the default settings for the Force quantity and a callback for customizing the default unit mappings.
            /// </summary>
            /// <param name="customizeUnits">
            ///     A callback function for customizing the default unit mappings.
            /// </param>
            /// <returns>
            ///     A new instance of the <see cref="ForceInfo"/> class with the default settings.
            /// </returns>
            public static ForceInfo CreateDefault(Func<IEnumerable<UnitDefinition<ForceUnit>>, IEnumerable<IUnitDefinition<ForceUnit>>> customizeUnits)
            {
                return new ForceInfo(nameof(Force), DefaultBaseUnit, customizeUnits(GetDefaultMappings()), new Force(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     The <see cref="BaseDimensions" /> for <see cref="Force"/> is T^-2LM.
            /// </summary>
            public static BaseDimensions DefaultBaseDimensions { get; } = new BaseDimensions(1, 1, -2, 0, 0, 0, 0);

            /// <summary>
            ///     The default base unit of Force is Newton. All conversions, as defined in the <see cref="GetDefaultMappings"/>, go via this value.
            /// </summary>
            public static ForceUnit DefaultBaseUnit { get; } = ForceUnit.Newton;

            /// <summary>
            ///     Retrieves the default mappings for <see cref="ForceUnit"/>.
            /// </summary>
            /// <returns>An <see cref="IEnumerable{T}"/> of <see cref="UnitDefinition{ForceUnit}"/> representing the default unit mappings for Force.</returns>
            public static IEnumerable<UnitDefinition<ForceUnit>> GetDefaultMappings()
            {
                yield return new (ForceUnit.Decanewton, "Decanewton", "Decanewtons", new BaseUnits(length: LengthUnit.Decameter, mass: MassUnit.Kilogram, time: DurationUnit.Second),
                     new QuantityValue(1, 10)             
                );
                yield return new (ForceUnit.Dyn, "Dyn", "Dyne", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Gram, time: DurationUnit.Second),
                     100000             
                );
                yield return new (ForceUnit.KilogramForce, "KilogramForce", "KilogramsForce", BaseUnits.Undefined,
                     new QuantityValue(20000, 196133)             
                );
                yield return new (ForceUnit.Kilonewton, "Kilonewton", "Kilonewtons", new BaseUnits(length: LengthUnit.Kilometer, mass: MassUnit.Kilogram, time: DurationUnit.Second),
                     new QuantityValue(1, 1000)             
                );
                yield return new (ForceUnit.Kilopond, "Kilopond", "Kiloponds", BaseUnits.Undefined,
                     new QuantityValue(20000, 196133)             
                );
                yield return new (ForceUnit.KilopoundForce, "KilopoundForce", "KilopoundsForce", BaseUnits.Undefined,
                     new QuantityValue(2000000000, 8896443230521)             
                );
                yield return new (ForceUnit.Meganewton, "Meganewton", "Meganewtons", new BaseUnits(length: LengthUnit.Megameter, mass: MassUnit.Kilogram, time: DurationUnit.Second),
                     new QuantityValue(1, 1000000)             
                );
                yield return new (ForceUnit.Micronewton, "Micronewton", "Micronewtons", new BaseUnits(length: LengthUnit.Micrometer, mass: MassUnit.Kilogram, time: DurationUnit.Second),
                     1000000             
                );
                yield return new (ForceUnit.Millinewton, "Millinewton", "Millinewtons", new BaseUnits(length: LengthUnit.Millimeter, mass: MassUnit.Kilogram, time: DurationUnit.Second),
                     1000             
                );
                yield return new (ForceUnit.Newton, "Newton", "Newtons", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second));
                yield return new (ForceUnit.OunceForce, "OunceForce", "OunceForce", BaseUnits.Undefined,
                     new QuantityValue(32000000000000, 8896443230521)             
                );
                yield return new (ForceUnit.Poundal, "Poundal", "Poundals", BaseUnits.Undefined,
                     new QuantityValue(125000000000, 17281869297)             
                );
                yield return new (ForceUnit.PoundForce, "PoundForce", "PoundsForce", BaseUnits.Undefined,
                     new QuantityValue(2000000000000, 8896443230521)             
                );
                yield return new (ForceUnit.ShortTonForce, "ShortTonForce", "ShortTonsForce", BaseUnits.Undefined,
                     new QuantityValue(1000000000, 8896443230521)             
                );
                yield return new (ForceUnit.TonneForce, "TonneForce", "TonnesForce", BaseUnits.Undefined,
                     new QuantityValue(20, 196133)             
                );
            }
        }

        static Force()
        {
            Info = UnitsNetSetup.CreateQuantityInfo(ForceInfo.CreateDefault);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Force(QuantityValue value, ForceUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Force(QuantityValue value, UnitSystem unitSystem)
        {
            _value = value;
            _unit = Info.GetDefaultUnit(unitSystem);
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Force" /> instances.
        /// </summary>
        [Obsolete("Replaced by UnitConverter.Default")]
        public static UnitConverter DefaultConversionFunctions => UnitConverter.Default;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<Force, ForceUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions => Info.BaseDimensions;

        /// <summary>
        ///     The base unit of Force, which is Newton. All conversions go via this value.
        /// </summary>
        public static ForceUnit BaseUnit => Info.BaseUnitInfo.Value;

        /// <summary>
        ///     All units of measurement for the Force quantity.
        /// </summary>
        public static IReadOnlyCollection<ForceUnit> Units => Info.Units;

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Newton.
        /// </summary>
        public static Force Zero => Info.Zero;

        #endregion

        #region Properties

        /// <inheritdoc />
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public ForceUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<Force, ForceUnit> QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Force.BaseDimensions;

        #region Explicit implementations

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Enum IQuantity.Unit => Unit;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UnitKey IQuantity.UnitKey => UnitKey.ForUnit(Unit);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo IQuantity.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo<ForceUnit> IQuantity<ForceUnit>.QuantityInfo => Info;

#if NETSTANDARD2_0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuantityInstanceInfo<Force> IQuantityOfType<Force>.QuantityInfo => Info;
#endif

        #endregion

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.Decanewton"/>
        /// </summary>
        public QuantityValue Decanewtons => this.As(ForceUnit.Decanewton);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.Dyn"/>
        /// </summary>
        public QuantityValue Dyne => this.As(ForceUnit.Dyn);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.KilogramForce"/>
        /// </summary>
        public QuantityValue KilogramsForce => this.As(ForceUnit.KilogramForce);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.Kilonewton"/>
        /// </summary>
        public QuantityValue Kilonewtons => this.As(ForceUnit.Kilonewton);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.Kilopond"/>
        /// </summary>
        public QuantityValue Kiloponds => this.As(ForceUnit.Kilopond);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.KilopoundForce"/>
        /// </summary>
        public QuantityValue KilopoundsForce => this.As(ForceUnit.KilopoundForce);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.Meganewton"/>
        /// </summary>
        public QuantityValue Meganewtons => this.As(ForceUnit.Meganewton);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.Micronewton"/>
        /// </summary>
        public QuantityValue Micronewtons => this.As(ForceUnit.Micronewton);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.Millinewton"/>
        /// </summary>
        public QuantityValue Millinewtons => this.As(ForceUnit.Millinewton);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.Newton"/>
        /// </summary>
        public QuantityValue Newtons => this.As(ForceUnit.Newton);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.OunceForce"/>
        /// </summary>
        public QuantityValue OunceForce => this.As(ForceUnit.OunceForce);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.Poundal"/>
        /// </summary>
        public QuantityValue Poundals => this.As(ForceUnit.Poundal);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.PoundForce"/>
        /// </summary>
        public QuantityValue PoundsForce => this.As(ForceUnit.PoundForce);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.ShortTonForce"/>
        /// </summary>
        public QuantityValue ShortTonsForce => this.As(ForceUnit.ShortTonForce);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="ForceUnit.TonneForce"/>
        /// </summary>
        public QuantityValue TonnesForce => this.As(ForceUnit.TonneForce);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(ForceUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(ForceUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.Decanewton"/>.
        /// </summary>
        public static Force FromDecanewtons(QuantityValue value)
        {
            return new Force(value, ForceUnit.Decanewton);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.Dyn"/>.
        /// </summary>
        public static Force FromDyne(QuantityValue value)
        {
            return new Force(value, ForceUnit.Dyn);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.KilogramForce"/>.
        /// </summary>
        public static Force FromKilogramsForce(QuantityValue value)
        {
            return new Force(value, ForceUnit.KilogramForce);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.Kilonewton"/>.
        /// </summary>
        public static Force FromKilonewtons(QuantityValue value)
        {
            return new Force(value, ForceUnit.Kilonewton);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.Kilopond"/>.
        /// </summary>
        public static Force FromKiloponds(QuantityValue value)
        {
            return new Force(value, ForceUnit.Kilopond);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.KilopoundForce"/>.
        /// </summary>
        public static Force FromKilopoundsForce(QuantityValue value)
        {
            return new Force(value, ForceUnit.KilopoundForce);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.Meganewton"/>.
        /// </summary>
        public static Force FromMeganewtons(QuantityValue value)
        {
            return new Force(value, ForceUnit.Meganewton);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.Micronewton"/>.
        /// </summary>
        public static Force FromMicronewtons(QuantityValue value)
        {
            return new Force(value, ForceUnit.Micronewton);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.Millinewton"/>.
        /// </summary>
        public static Force FromMillinewtons(QuantityValue value)
        {
            return new Force(value, ForceUnit.Millinewton);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.Newton"/>.
        /// </summary>
        public static Force FromNewtons(QuantityValue value)
        {
            return new Force(value, ForceUnit.Newton);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.OunceForce"/>.
        /// </summary>
        public static Force FromOunceForce(QuantityValue value)
        {
            return new Force(value, ForceUnit.OunceForce);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.Poundal"/>.
        /// </summary>
        public static Force FromPoundals(QuantityValue value)
        {
            return new Force(value, ForceUnit.Poundal);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.PoundForce"/>.
        /// </summary>
        public static Force FromPoundsForce(QuantityValue value)
        {
            return new Force(value, ForceUnit.PoundForce);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.ShortTonForce"/>.
        /// </summary>
        public static Force FromShortTonsForce(QuantityValue value)
        {
            return new Force(value, ForceUnit.ShortTonForce);
        }

        /// <summary>
        ///     Creates a <see cref="Force"/> from <see cref="ForceUnit.TonneForce"/>.
        /// </summary>
        public static Force FromTonnesForce(QuantityValue value)
        {
            return new Force(value, ForceUnit.TonneForce);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ForceUnit" /> to <see cref="Force" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Force unit value.</returns>
        public static Force From(QuantityValue value, ForceUnit fromUnit)
        {
            return new Force(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Force Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Force Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Force, ForceUnit>(str, provider, From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse([NotNullWhen(true)]string? str, out Force result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse([NotNullWhen(true)]string? str, IFormatProvider? provider, out Force result)
        {
            return QuantityParser.Default.TryParse<Force, ForceUnit>(str, provider, From, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ForceUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static ForceUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse(str, Info.UnitInfos, provider).Value;
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider?,out UnitsNet.Units.ForceUnit)"/>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, out ForceUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, IFormatProvider? provider, out ForceUnit unit)
        {
            return UnitParser.Default.TryParse(str, Info, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Force operator -(Force right)
        {
            return new Force(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Force"/> from adding two <see cref="Force"/>.</summary>
        public static Force operator +(Force left, Force right)
        {
            return new Force(left.Value + right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Force"/> from subtracting two <see cref="Force"/>.</summary>
        public static Force operator -(Force left, Force right)
        {
            return new Force(left.Value - right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Force"/> from multiplying value and <see cref="Force"/>.</summary>
        public static Force operator *(QuantityValue left, Force right)
        {
            return new Force(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Force"/> from multiplying value and <see cref="Force"/>.</summary>
        public static Force operator *(Force left, QuantityValue right)
        {
            return new Force(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Force"/> from dividing <see cref="Force"/> by value.</summary>
        public static Force operator /(Force left, QuantityValue right)
        {
            return new Force(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Force"/> by <see cref="Force"/>.</summary>
        public static QuantityValue operator /(Force left, Force right)
        {
            return left.Newtons / right.Newtons;
        }

        #endregion

        #region Relational Operators

        /// <summary>Get <see cref="Acceleration"/> from <see cref="Force"/> / <see cref="Mass"/>.</summary>
        public static Acceleration operator /(Force force, Mass mass)
        {
            return Acceleration.FromMetersPerSecondSquared(force.Newtons / mass.Kilograms);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Force"/> / <see cref="Pressure"/>.</summary>
        public static Area operator /(Force force, Pressure pressure)
        {
            return Area.FromSquareMeters(force.Newtons / pressure.Pascals);
        }

        /// <summary>Get <see cref="Duration"/> from <see cref="Force"/> / <see cref="ForceChangeRate"/>.</summary>
        public static Duration operator /(Force force, ForceChangeRate forceChangeRate)
        {
            return Duration.FromSeconds(force.Newtons / forceChangeRate.NewtonsPerSecond);
        }

        /// <summary>Get <see cref="ForceChangeRate"/> from <see cref="Force"/> / <see cref="Duration"/>.</summary>
        public static ForceChangeRate operator /(Force force, Duration duration)
        {
            return ForceChangeRate.FromNewtonsPerSecond(force.Newtons / duration.Seconds);
        }

        /// <summary>Get <see cref="ForcePerLength"/> from <see cref="Force"/> * <see cref="ReciprocalLength"/>.</summary>
        public static ForcePerLength operator *(Force force, ReciprocalLength reciprocalLength)
        {
            return ForcePerLength.FromNewtonsPerMeter(force.Newtons * reciprocalLength.InverseMeters);
        }

        /// <summary>Get <see cref="ForcePerLength"/> from <see cref="Force"/> / <see cref="Length"/>.</summary>
        public static ForcePerLength operator /(Force force, Length length)
        {
            return ForcePerLength.FromNewtonsPerMeter(force.Newtons / length.Meters);
        }

        /// <summary>Get <see cref="Length"/> from <see cref="Force"/> / <see cref="ForcePerLength"/>.</summary>
        public static Length operator /(Force force, ForcePerLength forcePerLength)
        {
            return Length.FromMeters(force.Newtons / forcePerLength.NewtonsPerMeter);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Force"/> / <see cref="Acceleration"/>.</summary>
        public static Mass operator /(Force force, Acceleration acceleration)
        {
            return Mass.FromKilograms(force.Newtons / acceleration.MetersPerSecondSquared);
        }

        /// <summary>Get <see cref="Power"/> from <see cref="Force"/> * <see cref="Speed"/>.</summary>
        public static Power operator *(Force force, Speed speed)
        {
            return Power.FromWatts(force.Newtons * speed.MetersPerSecond);
        }

        /// <summary>Get <see cref="Pressure"/> from <see cref="Force"/> * <see cref="ReciprocalArea"/>.</summary>
        public static Pressure operator *(Force force, ReciprocalArea reciprocalArea)
        {
            return Pressure.FromNewtonsPerSquareMeter(force.Newtons * reciprocalArea.InverseSquareMeters);
        }

        /// <summary>Get <see cref="Pressure"/> from <see cref="Force"/> / <see cref="Area"/>.</summary>
        public static Pressure operator /(Force force, Area area)
        {
            return Pressure.FromPascals(force.Newtons / area.SquareMeters);
        }

        /// <summary>Get <see cref="Torque"/> from <see cref="Force"/> * <see cref="Length"/>.</summary>
        public static Torque operator *(Force force, Length length)
        {
            return Torque.FromNewtonMeters(force.Newtons * length.Meters);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Force left, Force right)
        {
            return left.Value <= right.As(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Force left, Force right)
        {
            return left.Value >= right.As(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Force left, Force right)
        {
            return left.Value < right.As(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Force left, Force right)
        {
            return left.Value > right.As(left.Unit);
        }

        /// <summary>Indicates strict equality of two <see cref="Force"/> quantities.</summary>
        public static bool operator ==(Force left, Force right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Force"/> quantities.</summary>
        public static bool operator !=(Force left, Force right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Force"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is not Force otherQuantity)
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Force"/> quantities.</summary>
        public bool Equals(Force other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Force.</returns>
        public override int GetHashCode()
        {
            return Comparison.GetHashCode(typeof(Force), this.As(BaseUnit));
        }
        
        /// <inheritdoc  cref="CompareTo(Force)" />
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        public int CompareTo(object? obj)
        {
            if (obj is not Force otherQuantity)
                throw obj is null ? new ArgumentNullException(nameof(obj)) : ExceptionHelper.CreateArgumentException<Force>(obj, nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>
        ///     Compares the current <see cref="Force"/> with another <see cref="Force"/> and returns an integer that indicates
        ///     whether the current instance precedes, follows, or occurs in the same position in the sort order as the other quantity, when converted to the same unit.
        /// </summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Force other)
        {
            return _value.CompareTo(other.As(this.Unit));
        }

        #endregion

        #region Conversion Methods (explicit implementations for netstandard2.0)

#if NETSTANDARD2_0
        QuantityValue IQuantity.As(Enum unit) => UnitConverter.Default.ConvertValue(Value, UnitKey.ForUnit(Unit), unit);

        IQuantity IQuantity.ToUnit(Enum unit) => UnitConverter.Default.ConvertTo(this, unit);

        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);

        IQuantity<ForceUnit> IQuantity<ForceUnit>.ToUnit(ForceUnit unit) => this.ToUnit(unit);

        IQuantity<ForceUnit> IQuantity<ForceUnit>.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);
#endif

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null, null);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TQuantity}(TQuantity, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Default.Format(this, format, provider);
        }

        #endregion

    }
}
