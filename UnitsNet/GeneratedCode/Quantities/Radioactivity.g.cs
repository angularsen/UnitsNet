//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System.Globalization;
using System.Resources;
using System.Runtime.Serialization;
using UnitsNet.Debug;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Amount of ionizing radiation released when an element spontaneously emits energy as a result of the radioactive decay of an unstable atom per unit time.
    /// </summary>
    [DataContract]
    [DebuggerDisplay(QuantityDebugProxy.DisplayFormat)]
    [DebuggerTypeProxy(typeof(QuantityDebugProxy))]
    public readonly partial struct Radioactivity :
        IArithmeticQuantity<Radioactivity, RadioactivityUnit>,
#if NET7_0_OR_GREATER
        IDivisionOperators<Radioactivity, Radioactivity, QuantityValue>,
        IComparisonOperators<Radioactivity, Radioactivity, bool>,
        IParsable<Radioactivity>,
#endif
        IComparable,
        IComparable<Radioactivity>,
        IEquatable<Radioactivity>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly RadioactivityUnit? _unit;

        /// <summary>
        ///     Provides detailed information about the <see cref="Radioactivity"/> quantity, including its name, base unit, unit mappings, base dimensions, and conversion functions.
        /// </summary>
        public sealed class RadioactivityInfo: QuantityInfo<Radioactivity, RadioactivityUnit>
        {
            /// <inheritdoc />
            public RadioactivityInfo(string name, RadioactivityUnit baseUnit, IEnumerable<IUnitDefinition<RadioactivityUnit>> unitMappings, Radioactivity zero, BaseDimensions baseDimensions,
                QuantityFromDelegate<Radioactivity, RadioactivityUnit> fromDelegate, ResourceManager? unitAbbreviations)
                : base(name, baseUnit, unitMappings, zero, baseDimensions, fromDelegate, unitAbbreviations)
            {
            }

            /// <inheritdoc />
            public RadioactivityInfo(string name, RadioactivityUnit baseUnit, IEnumerable<IUnitDefinition<RadioactivityUnit>> unitMappings, Radioactivity zero, BaseDimensions baseDimensions)
                : this(name, baseUnit, unitMappings, zero, baseDimensions, Radioactivity.From, new ResourceManager("UnitsNet.GeneratedCode.Resources.Radioactivity", typeof(Radioactivity).Assembly))
            {
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="RadioactivityInfo"/> class with the default settings for the Radioactivity quantity.
            /// </summary>
            /// <returns>A new instance of the <see cref="RadioactivityInfo"/> class with the default settings.</returns>
            public static RadioactivityInfo CreateDefault()
            {
                return new RadioactivityInfo(nameof(Radioactivity), DefaultBaseUnit, GetDefaultMappings(), new Radioactivity(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="RadioactivityInfo"/> class with the default settings for the Radioactivity quantity and a callback for customizing the default unit mappings.
            /// </summary>
            /// <param name="customizeUnits">
            ///     A callback function for customizing the default unit mappings.
            /// </param>
            /// <returns>
            ///     A new instance of the <see cref="RadioactivityInfo"/> class with the default settings.
            /// </returns>
            public static RadioactivityInfo CreateDefault(Func<IEnumerable<UnitDefinition<RadioactivityUnit>>, IEnumerable<IUnitDefinition<RadioactivityUnit>>> customizeUnits)
            {
                return new RadioactivityInfo(nameof(Radioactivity), DefaultBaseUnit, customizeUnits(GetDefaultMappings()), new Radioactivity(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     The <see cref="BaseDimensions" /> for <see cref="Radioactivity"/> is T^-1.
            /// </summary>
            public static BaseDimensions DefaultBaseDimensions { get; } = new BaseDimensions(0, 0, -1, 0, 0, 0, 0);

            /// <summary>
            ///     The default base unit of Radioactivity is Becquerel. All conversions, as defined in the <see cref="GetDefaultMappings"/>, go via this value.
            /// </summary>
            public static RadioactivityUnit DefaultBaseUnit { get; } = RadioactivityUnit.Becquerel;

            /// <summary>
            ///     Retrieves the default mappings for <see cref="RadioactivityUnit"/>.
            /// </summary>
            /// <returns>An <see cref="IEnumerable{T}"/> of <see cref="UnitDefinition{RadioactivityUnit}"/> representing the default unit mappings for Radioactivity.</returns>
            public static IEnumerable<UnitDefinition<RadioactivityUnit>> GetDefaultMappings()
            {
                yield return new (RadioactivityUnit.Becquerel, "Becquerel", "Becquerels", new BaseUnits(time: DurationUnit.Second));
                yield return new (RadioactivityUnit.Curie, "Curie", "Curies", new BaseUnits(time: DurationUnit.Second),
                     new QuantityValue(1, 37000000000)             
                );
                yield return new (RadioactivityUnit.Exabecquerel, "Exabecquerel", "Exabecquerels", BaseUnits.Undefined,
                     new QuantityValue(1, 1000000000000000000)             
                );
                yield return new (RadioactivityUnit.Gigabecquerel, "Gigabecquerel", "Gigabecquerels", new BaseUnits(time: DurationUnit.Nanosecond),
                     new QuantityValue(1, 1000000000)             
                );
                yield return new (RadioactivityUnit.Gigacurie, "Gigacurie", "Gigacuries", new BaseUnits(time: DurationUnit.Nanosecond),
                     new QuantityValue(1, new BigInteger(37) * QuantityValue.PowerOfTen(18))             
                );
                yield return new (RadioactivityUnit.Gigarutherford, "Gigarutherford", "Gigarutherfords", new BaseUnits(time: DurationUnit.Nanosecond),
                     new QuantityValue(1, 1000000000000000)             
                );
                yield return new (RadioactivityUnit.Kilobecquerel, "Kilobecquerel", "Kilobecquerels", new BaseUnits(time: DurationUnit.Millisecond),
                     new QuantityValue(1, 1000)             
                );
                yield return new (RadioactivityUnit.Kilocurie, "Kilocurie", "Kilocuries", new BaseUnits(time: DurationUnit.Millisecond),
                     new QuantityValue(1, 37000000000000)             
                );
                yield return new (RadioactivityUnit.Kilorutherford, "Kilorutherford", "Kilorutherfords", new BaseUnits(time: DurationUnit.Millisecond),
                     new QuantityValue(1, 1000000000)             
                );
                yield return new (RadioactivityUnit.Megabecquerel, "Megabecquerel", "Megabecquerels", new BaseUnits(time: DurationUnit.Microsecond),
                     new QuantityValue(1, 1000000)             
                );
                yield return new (RadioactivityUnit.Megacurie, "Megacurie", "Megacuries", new BaseUnits(time: DurationUnit.Microsecond),
                     new QuantityValue(1, 37000000000000000)             
                );
                yield return new (RadioactivityUnit.Megarutherford, "Megarutherford", "Megarutherfords", new BaseUnits(time: DurationUnit.Microsecond),
                     new QuantityValue(1, 1000000000000)             
                );
                yield return new (RadioactivityUnit.Microbecquerel, "Microbecquerel", "Microbecquerels", BaseUnits.Undefined,
                     1000000             
                );
                yield return new (RadioactivityUnit.Microcurie, "Microcurie", "Microcuries", BaseUnits.Undefined,
                     new QuantityValue(1, 37000)             
                );
                yield return new (RadioactivityUnit.Microrutherford, "Microrutherford", "Microrutherfords", BaseUnits.Undefined,
                     1             
                );
                yield return new (RadioactivityUnit.Millibecquerel, "Millibecquerel", "Millibecquerels", BaseUnits.Undefined,
                     1000             
                );
                yield return new (RadioactivityUnit.Millicurie, "Millicurie", "Millicuries", BaseUnits.Undefined,
                     new QuantityValue(1, 37000000)             
                );
                yield return new (RadioactivityUnit.Millirutherford, "Millirutherford", "Millirutherfords", BaseUnits.Undefined,
                     new QuantityValue(1, 1000)             
                );
                yield return new (RadioactivityUnit.Nanobecquerel, "Nanobecquerel", "Nanobecquerels", BaseUnits.Undefined,
                     1000000000             
                );
                yield return new (RadioactivityUnit.Nanocurie, "Nanocurie", "Nanocuries", BaseUnits.Undefined,
                     new QuantityValue(1, 37)             
                );
                yield return new (RadioactivityUnit.Nanorutherford, "Nanorutherford", "Nanorutherfords", BaseUnits.Undefined,
                     1000             
                );
                yield return new (RadioactivityUnit.Petabecquerel, "Petabecquerel", "Petabecquerels", BaseUnits.Undefined,
                     new QuantityValue(1, 1000000000000000)             
                );
                yield return new (RadioactivityUnit.Picobecquerel, "Picobecquerel", "Picobecquerels", BaseUnits.Undefined,
                     1000000000000             
                );
                yield return new (RadioactivityUnit.Picocurie, "Picocurie", "Picocuries", BaseUnits.Undefined,
                     new QuantityValue(1000, 37)             
                );
                yield return new (RadioactivityUnit.Picorutherford, "Picorutherford", "Picorutherfords", BaseUnits.Undefined,
                     1000000             
                );
                yield return new (RadioactivityUnit.Rutherford, "Rutherford", "Rutherfords", new BaseUnits(time: DurationUnit.Second),
                     new QuantityValue(1, 1000000)             
                );
                yield return new (RadioactivityUnit.Terabecquerel, "Terabecquerel", "Terabecquerels", new BaseUnits(time: DurationUnit.Picosecond),
                     new QuantityValue(1, 1000000000000)             
                );
                yield return new (RadioactivityUnit.Teracurie, "Teracurie", "Teracuries", new BaseUnits(time: DurationUnit.Picosecond),
                     new QuantityValue(1, new BigInteger(37) * QuantityValue.PowerOfTen(21))             
                );
                yield return new (RadioactivityUnit.Terarutherford, "Terarutherford", "Terarutherfords", new BaseUnits(time: DurationUnit.Picosecond),
                     new QuantityValue(1, 1000000000000000000)             
                );
            }
        }

        static Radioactivity()
        {
            Info = UnitsNetSetup.CreateQuantityInfo(RadioactivityInfo.CreateDefault);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Radioactivity(QuantityValue value, RadioactivityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Radioactivity(QuantityValue value, UnitSystem unitSystem)
        {
            _value = value;
            _unit = Info.GetDefaultUnit(unitSystem);
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Radioactivity" /> instances.
        /// </summary>
        [Obsolete("Replaced by UnitConverter.Default")]
        public static UnitConverter DefaultConversionFunctions => UnitConverter.Default;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<Radioactivity, RadioactivityUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions => Info.BaseDimensions;

        /// <summary>
        ///     The base unit of Radioactivity, which is Becquerel. All conversions go via this value.
        /// </summary>
        public static RadioactivityUnit BaseUnit => Info.BaseUnitInfo.Value;

        /// <summary>
        ///     All units of measurement for the Radioactivity quantity.
        /// </summary>
        public static IReadOnlyCollection<RadioactivityUnit> Units => Info.Units;

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Becquerel.
        /// </summary>
        public static Radioactivity Zero => Info.Zero;

        #endregion

        #region Properties

        /// <inheritdoc />
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public RadioactivityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<Radioactivity, RadioactivityUnit> QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Radioactivity.BaseDimensions;

        #region Explicit implementations

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UnitKey IQuantity.UnitKey => UnitKey.ForUnit(Unit);

#if NETSTANDARD2_0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuantityInstanceInfo<Radioactivity> IQuantityOfType<Radioactivity>.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo<RadioactivityUnit> IQuantity<RadioactivityUnit>.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo IQuantity.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Enum IQuantity.Unit => Unit;
#endif

        #endregion

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Becquerel"/>
        /// </summary>
        public QuantityValue Becquerels => this.As(RadioactivityUnit.Becquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Curie"/>
        /// </summary>
        public QuantityValue Curies => this.As(RadioactivityUnit.Curie);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Exabecquerel"/>
        /// </summary>
        public QuantityValue Exabecquerels => this.As(RadioactivityUnit.Exabecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Gigabecquerel"/>
        /// </summary>
        public QuantityValue Gigabecquerels => this.As(RadioactivityUnit.Gigabecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Gigacurie"/>
        /// </summary>
        public QuantityValue Gigacuries => this.As(RadioactivityUnit.Gigacurie);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Gigarutherford"/>
        /// </summary>
        public QuantityValue Gigarutherfords => this.As(RadioactivityUnit.Gigarutherford);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Kilobecquerel"/>
        /// </summary>
        public QuantityValue Kilobecquerels => this.As(RadioactivityUnit.Kilobecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Kilocurie"/>
        /// </summary>
        public QuantityValue Kilocuries => this.As(RadioactivityUnit.Kilocurie);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Kilorutherford"/>
        /// </summary>
        public QuantityValue Kilorutherfords => this.As(RadioactivityUnit.Kilorutherford);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Megabecquerel"/>
        /// </summary>
        public QuantityValue Megabecquerels => this.As(RadioactivityUnit.Megabecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Megacurie"/>
        /// </summary>
        public QuantityValue Megacuries => this.As(RadioactivityUnit.Megacurie);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Megarutherford"/>
        /// </summary>
        public QuantityValue Megarutherfords => this.As(RadioactivityUnit.Megarutherford);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Microbecquerel"/>
        /// </summary>
        public QuantityValue Microbecquerels => this.As(RadioactivityUnit.Microbecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Microcurie"/>
        /// </summary>
        public QuantityValue Microcuries => this.As(RadioactivityUnit.Microcurie);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Microrutherford"/>
        /// </summary>
        public QuantityValue Microrutherfords => this.As(RadioactivityUnit.Microrutherford);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Millibecquerel"/>
        /// </summary>
        public QuantityValue Millibecquerels => this.As(RadioactivityUnit.Millibecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Millicurie"/>
        /// </summary>
        public QuantityValue Millicuries => this.As(RadioactivityUnit.Millicurie);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Millirutherford"/>
        /// </summary>
        public QuantityValue Millirutherfords => this.As(RadioactivityUnit.Millirutherford);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Nanobecquerel"/>
        /// </summary>
        public QuantityValue Nanobecquerels => this.As(RadioactivityUnit.Nanobecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Nanocurie"/>
        /// </summary>
        public QuantityValue Nanocuries => this.As(RadioactivityUnit.Nanocurie);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Nanorutherford"/>
        /// </summary>
        public QuantityValue Nanorutherfords => this.As(RadioactivityUnit.Nanorutherford);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Petabecquerel"/>
        /// </summary>
        public QuantityValue Petabecquerels => this.As(RadioactivityUnit.Petabecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Picobecquerel"/>
        /// </summary>
        public QuantityValue Picobecquerels => this.As(RadioactivityUnit.Picobecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Picocurie"/>
        /// </summary>
        public QuantityValue Picocuries => this.As(RadioactivityUnit.Picocurie);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Picorutherford"/>
        /// </summary>
        public QuantityValue Picorutherfords => this.As(RadioactivityUnit.Picorutherford);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Rutherford"/>
        /// </summary>
        public QuantityValue Rutherfords => this.As(RadioactivityUnit.Rutherford);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Terabecquerel"/>
        /// </summary>
        public QuantityValue Terabecquerels => this.As(RadioactivityUnit.Terabecquerel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Teracurie"/>
        /// </summary>
        public QuantityValue Teracuries => this.As(RadioactivityUnit.Teracurie);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="RadioactivityUnit.Terarutherford"/>
        /// </summary>
        public QuantityValue Terarutherfords => this.As(RadioactivityUnit.Terarutherford);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(RadioactivityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(RadioactivityUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Becquerel"/>.
        /// </summary>
        public static Radioactivity FromBecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Becquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Curie"/>.
        /// </summary>
        public static Radioactivity FromCuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Curie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Exabecquerel"/>.
        /// </summary>
        public static Radioactivity FromExabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Exabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Gigabecquerel"/>.
        /// </summary>
        public static Radioactivity FromGigabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Gigabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Gigacurie"/>.
        /// </summary>
        public static Radioactivity FromGigacuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Gigacurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Gigarutherford"/>.
        /// </summary>
        public static Radioactivity FromGigarutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Gigarutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Kilobecquerel"/>.
        /// </summary>
        public static Radioactivity FromKilobecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Kilobecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Kilocurie"/>.
        /// </summary>
        public static Radioactivity FromKilocuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Kilocurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Kilorutherford"/>.
        /// </summary>
        public static Radioactivity FromKilorutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Kilorutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Megabecquerel"/>.
        /// </summary>
        public static Radioactivity FromMegabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Megabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Megacurie"/>.
        /// </summary>
        public static Radioactivity FromMegacuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Megacurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Megarutherford"/>.
        /// </summary>
        public static Radioactivity FromMegarutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Megarutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Microbecquerel"/>.
        /// </summary>
        public static Radioactivity FromMicrobecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Microbecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Microcurie"/>.
        /// </summary>
        public static Radioactivity FromMicrocuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Microcurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Microrutherford"/>.
        /// </summary>
        public static Radioactivity FromMicrorutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Microrutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Millibecquerel"/>.
        /// </summary>
        public static Radioactivity FromMillibecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Millibecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Millicurie"/>.
        /// </summary>
        public static Radioactivity FromMillicuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Millicurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Millirutherford"/>.
        /// </summary>
        public static Radioactivity FromMillirutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Millirutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Nanobecquerel"/>.
        /// </summary>
        public static Radioactivity FromNanobecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Nanobecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Nanocurie"/>.
        /// </summary>
        public static Radioactivity FromNanocuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Nanocurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Nanorutherford"/>.
        /// </summary>
        public static Radioactivity FromNanorutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Nanorutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Petabecquerel"/>.
        /// </summary>
        public static Radioactivity FromPetabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Petabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Picobecquerel"/>.
        /// </summary>
        public static Radioactivity FromPicobecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Picobecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Picocurie"/>.
        /// </summary>
        public static Radioactivity FromPicocuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Picocurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Picorutherford"/>.
        /// </summary>
        public static Radioactivity FromPicorutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Picorutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Rutherford"/>.
        /// </summary>
        public static Radioactivity FromRutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Rutherford);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Terabecquerel"/>.
        /// </summary>
        public static Radioactivity FromTerabecquerels(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Terabecquerel);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Teracurie"/>.
        /// </summary>
        public static Radioactivity FromTeracuries(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Teracurie);
        }

        /// <summary>
        ///     Creates a <see cref="Radioactivity"/> from <see cref="RadioactivityUnit.Terarutherford"/>.
        /// </summary>
        public static Radioactivity FromTerarutherfords(QuantityValue value)
        {
            return new Radioactivity(value, RadioactivityUnit.Terarutherford);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RadioactivityUnit" /> to <see cref="Radioactivity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Radioactivity unit value.</returns>
        public static Radioactivity From(QuantityValue value, RadioactivityUnit fromUnit)
        {
            return new Radioactivity(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Radioactivity Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Radioactivity Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Radioactivity, RadioactivityUnit>(str, provider, From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse([NotNullWhen(true)]string? str, out Radioactivity result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse([NotNullWhen(true)]string? str, IFormatProvider? provider, out Radioactivity result)
        {
            return QuantityParser.Default.TryParse<Radioactivity, RadioactivityUnit>(str, provider, From, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static RadioactivityUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static RadioactivityUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse(str, Info.UnitInfos, provider).Value;
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider?,out UnitsNet.Units.RadioactivityUnit)"/>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, out RadioactivityUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, IFormatProvider? provider, out RadioactivityUnit unit)
        {
            return UnitParser.Default.TryParse(str, Info, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Radioactivity operator -(Radioactivity right)
        {
            return new Radioactivity(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from adding two <see cref="Radioactivity"/>.</summary>
        public static Radioactivity operator +(Radioactivity left, Radioactivity right)
        {
            return new Radioactivity(left.Value + right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from subtracting two <see cref="Radioactivity"/>.</summary>
        public static Radioactivity operator -(Radioactivity left, Radioactivity right)
        {
            return new Radioactivity(left.Value - right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from multiplying value and <see cref="Radioactivity"/>.</summary>
        public static Radioactivity operator *(QuantityValue left, Radioactivity right)
        {
            return new Radioactivity(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from multiplying value and <see cref="Radioactivity"/>.</summary>
        public static Radioactivity operator *(Radioactivity left, QuantityValue right)
        {
            return new Radioactivity(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Radioactivity"/> from dividing <see cref="Radioactivity"/> by value.</summary>
        public static Radioactivity operator /(Radioactivity left, QuantityValue right)
        {
            return new Radioactivity(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Radioactivity"/> by <see cref="Radioactivity"/>.</summary>
        public static QuantityValue operator /(Radioactivity left, Radioactivity right)
        {
            return left.Becquerels / right.Becquerels;
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Radioactivity left, Radioactivity right)
        {
            return left.Value <= right.As(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Radioactivity left, Radioactivity right)
        {
            return left.Value >= right.As(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Radioactivity left, Radioactivity right)
        {
            return left.Value < right.As(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Radioactivity left, Radioactivity right)
        {
            return left.Value > right.As(left.Unit);
        }

        /// <summary>Indicates strict equality of two <see cref="Radioactivity"/> quantities.</summary>
        public static bool operator ==(Radioactivity left, Radioactivity right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Radioactivity"/> quantities.</summary>
        public static bool operator !=(Radioactivity left, Radioactivity right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Radioactivity"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is not Radioactivity otherQuantity)
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Radioactivity"/> quantities.</summary>
        public bool Equals(Radioactivity other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Radioactivity.</returns>
        public override int GetHashCode()
        {
            return Comparison.GetHashCode(typeof(Radioactivity), this.As(BaseUnit));
        }
        
        /// <inheritdoc  cref="CompareTo(Radioactivity)" />
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        public int CompareTo(object? obj)
        {
            if (obj is not Radioactivity otherQuantity)
                throw obj is null ? new ArgumentNullException(nameof(obj)) : ExceptionHelper.CreateArgumentException<Radioactivity>(obj, nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>
        ///     Compares the current <see cref="Radioactivity"/> with another <see cref="Radioactivity"/> and returns an integer that indicates
        ///     whether the current instance precedes, follows, or occurs in the same position in the sort order as the other quantity, when converted to the same unit.
        /// </summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Radioactivity other)
        {
            return _value.CompareTo(other.As(this.Unit));
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null, null);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TQuantity}(TQuantity, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Default.Format(this, format, provider);
        }

        #endregion

    }
}
