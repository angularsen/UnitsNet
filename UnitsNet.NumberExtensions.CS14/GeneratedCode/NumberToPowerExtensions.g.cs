//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToPower
{
    /// <summary>
    /// A number to Power Extensions
    /// </summary>
    public static class NumberToPowerExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Power.FromBoilerHorsepower(QuantityValue)" />
            public Power BoilerHorsepower
#if NET7_0_OR_GREATER
                => Power.FromBoilerHorsepower(QuantityValue.CreateChecked(value));
#else
                => Power.FromBoilerHorsepower(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromBritishThermalUnitsPerHour(QuantityValue)" />
            public Power BritishThermalUnitsPerHour
#if NET7_0_OR_GREATER
                => Power.FromBritishThermalUnitsPerHour(QuantityValue.CreateChecked(value));
#else
                => Power.FromBritishThermalUnitsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromDecawatts(QuantityValue)" />
            public Power Decawatts
#if NET7_0_OR_GREATER
                => Power.FromDecawatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromDecawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromDeciwatts(QuantityValue)" />
            public Power Deciwatts
#if NET7_0_OR_GREATER
                => Power.FromDeciwatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromDeciwatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromElectricalHorsepower(QuantityValue)" />
            public Power ElectricalHorsepower
#if NET7_0_OR_GREATER
                => Power.FromElectricalHorsepower(QuantityValue.CreateChecked(value));
#else
                => Power.FromElectricalHorsepower(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromFemtowatts(QuantityValue)" />
            public Power Femtowatts
#if NET7_0_OR_GREATER
                => Power.FromFemtowatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromFemtowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromGigajoulesPerHour(QuantityValue)" />
            public Power GigajoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromGigajoulesPerHour(QuantityValue.CreateChecked(value));
#else
                => Power.FromGigajoulesPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromGigawatts(QuantityValue)" />
            public Power Gigawatts
#if NET7_0_OR_GREATER
                => Power.FromGigawatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromGigawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromHydraulicHorsepower(QuantityValue)" />
            public Power HydraulicHorsepower
#if NET7_0_OR_GREATER
                => Power.FromHydraulicHorsepower(QuantityValue.CreateChecked(value));
#else
                => Power.FromHydraulicHorsepower(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromJoulesPerHour(QuantityValue)" />
            public Power JoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromJoulesPerHour(QuantityValue.CreateChecked(value));
#else
                => Power.FromJoulesPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromKilobritishThermalUnitsPerHour(QuantityValue)" />
            public Power KilobritishThermalUnitsPerHour
#if NET7_0_OR_GREATER
                => Power.FromKilobritishThermalUnitsPerHour(QuantityValue.CreateChecked(value));
#else
                => Power.FromKilobritishThermalUnitsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromKilojoulesPerHour(QuantityValue)" />
            public Power KilojoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromKilojoulesPerHour(QuantityValue.CreateChecked(value));
#else
                => Power.FromKilojoulesPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromKilowatts(QuantityValue)" />
            public Power Kilowatts
#if NET7_0_OR_GREATER
                => Power.FromKilowatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromKilowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromMechanicalHorsepower(QuantityValue)" />
            public Power MechanicalHorsepower
#if NET7_0_OR_GREATER
                => Power.FromMechanicalHorsepower(QuantityValue.CreateChecked(value));
#else
                => Power.FromMechanicalHorsepower(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromMegabritishThermalUnitsPerHour(QuantityValue)" />
            public Power MegabritishThermalUnitsPerHour
#if NET7_0_OR_GREATER
                => Power.FromMegabritishThermalUnitsPerHour(QuantityValue.CreateChecked(value));
#else
                => Power.FromMegabritishThermalUnitsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromMegajoulesPerHour(QuantityValue)" />
            public Power MegajoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromMegajoulesPerHour(QuantityValue.CreateChecked(value));
#else
                => Power.FromMegajoulesPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromMegawatts(QuantityValue)" />
            public Power Megawatts
#if NET7_0_OR_GREATER
                => Power.FromMegawatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromMegawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromMetricHorsepower(QuantityValue)" />
            public Power MetricHorsepower
#if NET7_0_OR_GREATER
                => Power.FromMetricHorsepower(QuantityValue.CreateChecked(value));
#else
                => Power.FromMetricHorsepower(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromMicrowatts(QuantityValue)" />
            public Power Microwatts
#if NET7_0_OR_GREATER
                => Power.FromMicrowatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromMicrowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromMillijoulesPerHour(QuantityValue)" />
            public Power MillijoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromMillijoulesPerHour(QuantityValue.CreateChecked(value));
#else
                => Power.FromMillijoulesPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromMilliwatts(QuantityValue)" />
            public Power Milliwatts
#if NET7_0_OR_GREATER
                => Power.FromMilliwatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromMilliwatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromNanowatts(QuantityValue)" />
            public Power Nanowatts
#if NET7_0_OR_GREATER
                => Power.FromNanowatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromNanowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromPetawatts(QuantityValue)" />
            public Power Petawatts
#if NET7_0_OR_GREATER
                => Power.FromPetawatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromPetawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromPicowatts(QuantityValue)" />
            public Power Picowatts
#if NET7_0_OR_GREATER
                => Power.FromPicowatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromPicowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromTerawatts(QuantityValue)" />
            public Power Terawatts
#if NET7_0_OR_GREATER
                => Power.FromTerawatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromTerawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromTonsOfRefrigeration(QuantityValue)" />
            public Power TonsOfRefrigeration
#if NET7_0_OR_GREATER
                => Power.FromTonsOfRefrigeration(QuantityValue.CreateChecked(value));
#else
                => Power.FromTonsOfRefrigeration(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Power.FromWatts(QuantityValue)" />
            public Power Watts
#if NET7_0_OR_GREATER
                => Power.FromWatts(QuantityValue.CreateChecked(value));
#else
                => Power.FromWatts(value.ToQuantityValue());
#endif

        }
    }
}
