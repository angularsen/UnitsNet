//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricReactivePower.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricReactivePowerTestsBase : QuantityTestsBase
    {
        protected abstract double GigavoltamperesReactiveInOneVoltampereReactive { get; }
        protected abstract double KilovoltamperesReactiveInOneVoltampereReactive { get; }
        protected abstract double MegavoltamperesReactiveInOneVoltampereReactive { get; }
        protected abstract double VoltamperesReactiveInOneVoltampereReactive { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GigavoltamperesReactiveTolerance { get { return 1e-5; } }
        protected virtual double KilovoltamperesReactiveTolerance { get { return 1e-5; } }
        protected virtual double MegavoltamperesReactiveTolerance { get { return 1e-5; } }
        protected virtual double VoltamperesReactiveTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricReactivePowerUnit unit)
        {
            return unit switch
            {
                ElectricReactivePowerUnit.GigavoltampereReactive => (GigavoltamperesReactiveInOneVoltampereReactive, GigavoltamperesReactiveTolerance),
                ElectricReactivePowerUnit.KilovoltampereReactive => (KilovoltamperesReactiveInOneVoltampereReactive, KilovoltamperesReactiveTolerance),
                ElectricReactivePowerUnit.MegavoltampereReactive => (MegavoltamperesReactiveInOneVoltampereReactive, MegavoltamperesReactiveTolerance),
                ElectricReactivePowerUnit.VoltampereReactive => (VoltamperesReactiveInOneVoltampereReactive, VoltamperesReactiveTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricReactivePowerUnit.GigavoltampereReactive },
            new object[] { ElectricReactivePowerUnit.KilovoltampereReactive },
            new object[] { ElectricReactivePowerUnit.MegavoltampereReactive },
            new object[] { ElectricReactivePowerUnit.VoltampereReactive },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricReactivePower();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricReactivePowerUnit.VoltampereReactive, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ElectricReactivePower(double.PositiveInfinity, ElectricReactivePowerUnit.VoltampereReactive));
            var exception2 = Record.Exception(() => new ElectricReactivePower(double.NegativeInfinity, ElectricReactivePowerUnit.VoltampereReactive));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ElectricReactivePower(double.NaN, ElectricReactivePowerUnit.VoltampereReactive));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricReactivePower(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ElectricReactivePower(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ElectricReactivePower(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ElectricReactivePower_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ElectricReactivePowerUnit[] unitsOrderedByName = EnumHelper.GetValues<ElectricReactivePowerUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new ElectricReactivePower(1, ElectricReactivePowerUnit.VoltampereReactive);

            QuantityInfo<ElectricReactivePower, ElectricReactivePowerUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("ElectricReactivePower", quantityInfo.Name);
            Assert.Equal(ElectricReactivePower.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricReactivePower.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(ElectricReactivePower.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ElectricReactivePowerUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void VoltampereReactiveToElectricReactivePowerUnits()
        {
            ElectricReactivePower voltamperereactive = ElectricReactivePower.FromVoltamperesReactive(1);
            AssertEx.EqualTolerance(GigavoltamperesReactiveInOneVoltampereReactive, voltamperereactive.GigavoltamperesReactive, GigavoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(KilovoltamperesReactiveInOneVoltampereReactive, voltamperereactive.KilovoltamperesReactive, KilovoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(MegavoltamperesReactiveInOneVoltampereReactive, voltamperereactive.MegavoltamperesReactive, MegavoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(VoltamperesReactiveInOneVoltampereReactive, voltamperereactive.VoltamperesReactive, VoltamperesReactiveTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<ElectricReactivePowerUnit>(), unit =>
            {
                var quantity = ElectricReactivePower.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromVoltamperesReactive_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ElectricReactivePower.FromVoltamperesReactive(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ElectricReactivePower.FromVoltamperesReactive(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromVoltamperesReactive_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ElectricReactivePower.FromVoltamperesReactive(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var voltamperereactive = ElectricReactivePower.FromVoltamperesReactive(1);
            AssertEx.EqualTolerance(GigavoltamperesReactiveInOneVoltampereReactive, voltamperereactive.As(ElectricReactivePowerUnit.GigavoltampereReactive), GigavoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(KilovoltamperesReactiveInOneVoltampereReactive, voltamperereactive.As(ElectricReactivePowerUnit.KilovoltampereReactive), KilovoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(MegavoltamperesReactiveInOneVoltampereReactive, voltamperereactive.As(ElectricReactivePowerUnit.MegavoltampereReactive), MegavoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(VoltamperesReactiveInOneVoltampereReactive, voltamperereactive.As(ElectricReactivePowerUnit.VoltampereReactive), VoltamperesReactiveTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ElectricReactivePower.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricReactivePower(value: 1, unit: ElectricReactivePower.BaseUnit);
            var expectedValue = quantity.As(ElectricReactivePower.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ElectricReactivePower(value: 1, unit: ElectricReactivePower.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricReactivePower(value: 1, unit: ElectricReactivePower.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricReactivePower(value: 1, unit: ElectricReactivePower.BaseUnit);
            var expectedUnit = ElectricReactivePower.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            ElectricReactivePower convertedQuantity = quantity.ToUnit(UnitSystem.SI);

            Assert.Equal(expectedUnit, convertedQuantity.Unit);
            Assert.Equal(expectedValue, convertedQuantity.Value);
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            var quantity = new ElectricReactivePower(value: 1, unit: ElectricReactivePower.BaseUnit);
            Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            var quantity = new ElectricReactivePower(value: 1, unit: ElectricReactivePower.BaseUnit);
            Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
        }

        [Theory]
        [InlineData("en-US", "4.2 Gvar", ElectricReactivePowerUnit.GigavoltampereReactive, 4.2)]
        [InlineData("en-US", "4.2 kvar", ElectricReactivePowerUnit.KilovoltampereReactive, 4.2)]
        [InlineData("en-US", "4.2 Mvar", ElectricReactivePowerUnit.MegavoltampereReactive, 4.2)]
        [InlineData("en-US", "4.2 var", ElectricReactivePowerUnit.VoltampereReactive, 4.2)]
        public void Parse(string culture, string quantityString, ElectricReactivePowerUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = ElectricReactivePower.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 Gvar", ElectricReactivePowerUnit.GigavoltampereReactive, 4.2)]
        [InlineData("en-US", "4.2 kvar", ElectricReactivePowerUnit.KilovoltampereReactive, 4.2)]
        [InlineData("en-US", "4.2 Mvar", ElectricReactivePowerUnit.MegavoltampereReactive, 4.2)]
        [InlineData("en-US", "4.2 var", ElectricReactivePowerUnit.VoltampereReactive, 4.2)]
        public void TryParse(string culture, string quantityString, ElectricReactivePowerUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricReactivePower.TryParse(quantityString, out ElectricReactivePower parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("Gvar", ElectricReactivePowerUnit.GigavoltampereReactive)]
        [InlineData("kvar", ElectricReactivePowerUnit.KilovoltampereReactive)]
        [InlineData("Mvar", ElectricReactivePowerUnit.MegavoltampereReactive)]
        [InlineData("var", ElectricReactivePowerUnit.VoltampereReactive)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricReactivePowerUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ElectricReactivePowerUnit parsedUnit = ElectricReactivePower.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Gvar", ElectricReactivePowerUnit.GigavoltampereReactive)]
        [InlineData("kvar", ElectricReactivePowerUnit.KilovoltampereReactive)]
        [InlineData("Mvar", ElectricReactivePowerUnit.MegavoltampereReactive)]
        [InlineData("var", ElectricReactivePowerUnit.VoltampereReactive)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricReactivePowerUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ElectricReactivePowerUnit parsedUnit = ElectricReactivePower.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Gvar", ElectricReactivePowerUnit.GigavoltampereReactive)]
        [InlineData("en-US", "kvar", ElectricReactivePowerUnit.KilovoltampereReactive)]
        [InlineData("en-US", "Mvar", ElectricReactivePowerUnit.MegavoltampereReactive)]
        [InlineData("en-US", "var", ElectricReactivePowerUnit.VoltampereReactive)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricReactivePowerUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ElectricReactivePowerUnit parsedUnit = ElectricReactivePower.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Gvar", ElectricReactivePowerUnit.GigavoltampereReactive)]
        [InlineData("en-US", "kvar", ElectricReactivePowerUnit.KilovoltampereReactive)]
        [InlineData("en-US", "Mvar", ElectricReactivePowerUnit.MegavoltampereReactive)]
        [InlineData("en-US", "var", ElectricReactivePowerUnit.VoltampereReactive)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ElectricReactivePowerUnit expectedUnit)
        {
            ElectricReactivePowerUnit parsedUnit = ElectricReactivePower.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Gvar", ElectricReactivePowerUnit.GigavoltampereReactive)]
        [InlineData("kvar", ElectricReactivePowerUnit.KilovoltampereReactive)]
        [InlineData("Mvar", ElectricReactivePowerUnit.MegavoltampereReactive)]
        [InlineData("var", ElectricReactivePowerUnit.VoltampereReactive)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricReactivePowerUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ElectricReactivePower.TryParseUnit(abbreviation, out ElectricReactivePowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("Gvar", ElectricReactivePowerUnit.GigavoltampereReactive)]
        [InlineData("kvar", ElectricReactivePowerUnit.KilovoltampereReactive)]
        [InlineData("Mvar", ElectricReactivePowerUnit.MegavoltampereReactive)]
        [InlineData("var", ElectricReactivePowerUnit.VoltampereReactive)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricReactivePowerUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ElectricReactivePower.TryParseUnit(abbreviation, out ElectricReactivePowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Gvar", ElectricReactivePowerUnit.GigavoltampereReactive)]
        [InlineData("en-US", "kvar", ElectricReactivePowerUnit.KilovoltampereReactive)]
        [InlineData("en-US", "Mvar", ElectricReactivePowerUnit.MegavoltampereReactive)]
        [InlineData("en-US", "var", ElectricReactivePowerUnit.VoltampereReactive)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricReactivePowerUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricReactivePower.TryParseUnit(abbreviation, out ElectricReactivePowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "Gvar", ElectricReactivePowerUnit.GigavoltampereReactive)]
        [InlineData("en-US", "kvar", ElectricReactivePowerUnit.KilovoltampereReactive)]
        [InlineData("en-US", "Mvar", ElectricReactivePowerUnit.MegavoltampereReactive)]
        [InlineData("en-US", "var", ElectricReactivePowerUnit.VoltampereReactive)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ElectricReactivePowerUnit expectedUnit)
        {
            Assert.True(ElectricReactivePower.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ElectricReactivePowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", ElectricReactivePowerUnit.GigavoltampereReactive, "Gvar")]
        [InlineData("en-US", ElectricReactivePowerUnit.KilovoltampereReactive, "kvar")]
        [InlineData("en-US", ElectricReactivePowerUnit.MegavoltampereReactive, "Mvar")]
        [InlineData("en-US", ElectricReactivePowerUnit.VoltampereReactive, "var")]
        public void GetAbbreviationForCulture(string culture, ElectricReactivePowerUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = ElectricReactivePower.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(ElectricReactivePower.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = ElectricReactivePower.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricReactivePowerUnit unit)
        {
            var inBaseUnits = ElectricReactivePower.From(1.0, ElectricReactivePower.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricReactivePowerUnit unit)
        {
            var quantity = ElectricReactivePower.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricReactivePowerUnit unit)
        {
            Assert.All(ElectricReactivePower.Units.Where(u => u != ElectricReactivePower.BaseUnit), fromUnit =>
            {
                var quantity = ElectricReactivePower.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricReactivePowerUnit unit)
        {
            var quantity = default(ElectricReactivePower);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ElectricReactivePowerUnit unit)
        {
            var quantity = ElectricReactivePower.From(3, ElectricReactivePower.BaseUnit);
            ElectricReactivePower expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ElectricReactivePowerUnit> quantityToConvert = quantity;
                IQuantity<ElectricReactivePowerUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricReactivePower voltamperereactive = ElectricReactivePower.FromVoltamperesReactive(1);
            AssertEx.EqualTolerance(1, ElectricReactivePower.FromGigavoltamperesReactive(voltamperereactive.GigavoltamperesReactive).VoltamperesReactive, GigavoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(1, ElectricReactivePower.FromKilovoltamperesReactive(voltamperereactive.KilovoltamperesReactive).VoltamperesReactive, KilovoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(1, ElectricReactivePower.FromMegavoltamperesReactive(voltamperereactive.MegavoltamperesReactive).VoltamperesReactive, MegavoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(1, ElectricReactivePower.FromVoltamperesReactive(voltamperereactive.VoltamperesReactive).VoltamperesReactive, VoltamperesReactiveTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricReactivePower v = ElectricReactivePower.FromVoltamperesReactive(1);
            AssertEx.EqualTolerance(-1, -v.VoltamperesReactive, VoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(2, (ElectricReactivePower.FromVoltamperesReactive(3)-v).VoltamperesReactive, VoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(2, (v + v).VoltamperesReactive, VoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(10, (v*10).VoltamperesReactive, VoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(10, (10*v).VoltamperesReactive, VoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(2, (ElectricReactivePower.FromVoltamperesReactive(10)/5).VoltamperesReactive, VoltamperesReactiveTolerance);
            AssertEx.EqualTolerance(2, ElectricReactivePower.FromVoltamperesReactive(10)/ElectricReactivePower.FromVoltamperesReactive(5), VoltamperesReactiveTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricReactivePower oneVoltampereReactive = ElectricReactivePower.FromVoltamperesReactive(1);
            ElectricReactivePower twoVoltamperesReactive = ElectricReactivePower.FromVoltamperesReactive(2);

            Assert.True(oneVoltampereReactive < twoVoltamperesReactive);
            Assert.True(oneVoltampereReactive <= twoVoltamperesReactive);
            Assert.True(twoVoltamperesReactive > oneVoltampereReactive);
            Assert.True(twoVoltamperesReactive >= oneVoltampereReactive);

            Assert.False(oneVoltampereReactive > twoVoltamperesReactive);
            Assert.False(oneVoltampereReactive >= twoVoltamperesReactive);
            Assert.False(twoVoltamperesReactive < oneVoltampereReactive);
            Assert.False(twoVoltamperesReactive <= oneVoltampereReactive);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricReactivePower voltamperereactive = ElectricReactivePower.FromVoltamperesReactive(1);
            Assert.Equal(0, voltamperereactive.CompareTo(voltamperereactive));
            Assert.True(voltamperereactive.CompareTo(ElectricReactivePower.Zero) > 0);
            Assert.True(ElectricReactivePower.Zero.CompareTo(voltamperereactive) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricReactivePower voltamperereactive = ElectricReactivePower.FromVoltamperesReactive(1);
            Assert.Throws<ArgumentException>(() => voltamperereactive.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricReactivePower voltamperereactive = ElectricReactivePower.FromVoltamperesReactive(1);
            Assert.Throws<ArgumentNullException>(() => voltamperereactive.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricReactivePowerUnit.VoltampereReactive, 1, ElectricReactivePowerUnit.VoltampereReactive, true)]  // Same value and unit.
        [InlineData(1, ElectricReactivePowerUnit.VoltampereReactive, 2, ElectricReactivePowerUnit.VoltampereReactive, false)] // Different value.
        [InlineData(2, ElectricReactivePowerUnit.VoltampereReactive, 1, ElectricReactivePowerUnit.GigavoltampereReactive, false)] // Different value and unit.
        [InlineData(1, ElectricReactivePowerUnit.VoltampereReactive, 1, ElectricReactivePowerUnit.GigavoltampereReactive, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricReactivePowerUnit unitA, double valueB, ElectricReactivePowerUnit unitB, bool expectEqual)
        {
            var a = new ElectricReactivePower(valueA, unitA);
            var b = new ElectricReactivePower(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricReactivePower.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricReactivePower voltamperereactive = ElectricReactivePower.FromVoltamperesReactive(1);
            Assert.False(voltamperereactive.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricReactivePower voltamperereactive = ElectricReactivePower.FromVoltamperesReactive(1);
            Assert.False(voltamperereactive.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = ElectricReactivePower.FromVoltamperesReactive(firstValue);
            var otherQuantity = ElectricReactivePower.FromVoltamperesReactive(secondValue);
            ElectricReactivePower maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, ElectricReactivePower.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = ElectricReactivePower.FromVoltamperesReactive(1);
            var negativeTolerance = ElectricReactivePower.FromVoltamperesReactive(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<ElectricReactivePowerUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricReactivePower.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 Gvar", new ElectricReactivePower(1, ElectricReactivePowerUnit.GigavoltampereReactive).ToString());
            Assert.Equal("1 kvar", new ElectricReactivePower(1, ElectricReactivePowerUnit.KilovoltampereReactive).ToString());
            Assert.Equal("1 Mvar", new ElectricReactivePower(1, ElectricReactivePowerUnit.MegavoltampereReactive).ToString());
            Assert.Equal("1 var", new ElectricReactivePower(1, ElectricReactivePowerUnit.VoltampereReactive).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 Gvar", new ElectricReactivePower(1, ElectricReactivePowerUnit.GigavoltampereReactive).ToString(swedishCulture));
            Assert.Equal("1 kvar", new ElectricReactivePower(1, ElectricReactivePowerUnit.KilovoltampereReactive).ToString(swedishCulture));
            Assert.Equal("1 Mvar", new ElectricReactivePower(1, ElectricReactivePowerUnit.MegavoltampereReactive).ToString(swedishCulture));
            Assert.Equal("1 var", new ElectricReactivePower(1, ElectricReactivePowerUnit.VoltampereReactive).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 var", new ElectricReactivePower(0.123456, ElectricReactivePowerUnit.VoltampereReactive).ToString("s1"));
            Assert.Equal("0.12 var", new ElectricReactivePower(0.123456, ElectricReactivePowerUnit.VoltampereReactive).ToString("s2"));
            Assert.Equal("0.123 var", new ElectricReactivePower(0.123456, ElectricReactivePowerUnit.VoltampereReactive).ToString("s3"));
            Assert.Equal("0.1235 var", new ElectricReactivePower(0.123456, ElectricReactivePowerUnit.VoltampereReactive).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 var", new ElectricReactivePower(0.123456, ElectricReactivePowerUnit.VoltampereReactive).ToString("s1", culture));
            Assert.Equal("0.12 var", new ElectricReactivePower(0.123456, ElectricReactivePowerUnit.VoltampereReactive).ToString("s2", culture));
            Assert.Equal("0.123 var", new ElectricReactivePower(0.123456, ElectricReactivePowerUnit.VoltampereReactive).ToString("s3", culture));
            Assert.Equal("0.1235 var", new ElectricReactivePower(0.123456, ElectricReactivePowerUnit.VoltampereReactive).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricReactivePower.FromVoltamperesReactive(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricReactivePower.FromVoltamperesReactive(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricReactivePower.FromVoltamperesReactive(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricReactivePower.FromVoltamperesReactive(value);
            Assert.Equal(ElectricReactivePower.FromVoltamperesReactive(-value), -quantity);
        }
    }
}
