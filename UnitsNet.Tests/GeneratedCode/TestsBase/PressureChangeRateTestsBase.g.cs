//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of PressureChangeRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PressureChangeRateTestsBase : QuantityTestsBase
    {
        protected abstract double AtmospheresPerSecondInOnePascalPerSecond { get; }
        protected abstract double BarsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double BarsPerSecondInOnePascalPerSecond { get; }
        protected abstract double KilopascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double KilopascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double KilopoundsForcePerSquareInchPerMinuteInOnePascalPerSecond { get; }
        protected abstract double KilopoundsForcePerSquareInchPerSecondInOnePascalPerSecond { get; }
        protected abstract double MegapascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double MegapascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double MegapoundsForcePerSquareInchPerMinuteInOnePascalPerSecond { get; }
        protected abstract double MegapoundsForcePerSquareInchPerSecondInOnePascalPerSecond { get; }
        protected abstract double MillibarsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double MillibarsPerSecondInOnePascalPerSecond { get; }
        protected abstract double MillimetersOfMercuryPerSecondInOnePascalPerSecond { get; }
        protected abstract double PascalsPerMinuteInOnePascalPerSecond { get; }
        protected abstract double PascalsPerSecondInOnePascalPerSecond { get; }
        protected abstract double PoundsForcePerSquareInchPerMinuteInOnePascalPerSecond { get; }
        protected abstract double PoundsForcePerSquareInchPerSecondInOnePascalPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AtmospheresPerSecondTolerance { get { return 1e-5; } }
        protected virtual double BarsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double BarsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilopascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilopascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareInchPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareInchPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegapascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MegapascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsForcePerSquareInchPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsForcePerSquareInchPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillibarsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MillibarsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillimetersOfMercuryPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PascalsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PascalsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareInchPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareInchPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(PressureChangeRateUnit unit)
        {
            return unit switch
            {
                PressureChangeRateUnit.AtmospherePerSecond => (AtmospheresPerSecondInOnePascalPerSecond, AtmospheresPerSecondTolerance),
                PressureChangeRateUnit.BarPerMinute => (BarsPerMinuteInOnePascalPerSecond, BarsPerMinuteTolerance),
                PressureChangeRateUnit.BarPerSecond => (BarsPerSecondInOnePascalPerSecond, BarsPerSecondTolerance),
                PressureChangeRateUnit.KilopascalPerMinute => (KilopascalsPerMinuteInOnePascalPerSecond, KilopascalsPerMinuteTolerance),
                PressureChangeRateUnit.KilopascalPerSecond => (KilopascalsPerSecondInOnePascalPerSecond, KilopascalsPerSecondTolerance),
                PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute => (KilopoundsForcePerSquareInchPerMinuteInOnePascalPerSecond, KilopoundsForcePerSquareInchPerMinuteTolerance),
                PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond => (KilopoundsForcePerSquareInchPerSecondInOnePascalPerSecond, KilopoundsForcePerSquareInchPerSecondTolerance),
                PressureChangeRateUnit.MegapascalPerMinute => (MegapascalsPerMinuteInOnePascalPerSecond, MegapascalsPerMinuteTolerance),
                PressureChangeRateUnit.MegapascalPerSecond => (MegapascalsPerSecondInOnePascalPerSecond, MegapascalsPerSecondTolerance),
                PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute => (MegapoundsForcePerSquareInchPerMinuteInOnePascalPerSecond, MegapoundsForcePerSquareInchPerMinuteTolerance),
                PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond => (MegapoundsForcePerSquareInchPerSecondInOnePascalPerSecond, MegapoundsForcePerSquareInchPerSecondTolerance),
                PressureChangeRateUnit.MillibarPerMinute => (MillibarsPerMinuteInOnePascalPerSecond, MillibarsPerMinuteTolerance),
                PressureChangeRateUnit.MillibarPerSecond => (MillibarsPerSecondInOnePascalPerSecond, MillibarsPerSecondTolerance),
                PressureChangeRateUnit.MillimeterOfMercuryPerSecond => (MillimetersOfMercuryPerSecondInOnePascalPerSecond, MillimetersOfMercuryPerSecondTolerance),
                PressureChangeRateUnit.PascalPerMinute => (PascalsPerMinuteInOnePascalPerSecond, PascalsPerMinuteTolerance),
                PressureChangeRateUnit.PascalPerSecond => (PascalsPerSecondInOnePascalPerSecond, PascalsPerSecondTolerance),
                PressureChangeRateUnit.PoundForcePerSquareInchPerMinute => (PoundsForcePerSquareInchPerMinuteInOnePascalPerSecond, PoundsForcePerSquareInchPerMinuteTolerance),
                PressureChangeRateUnit.PoundForcePerSquareInchPerSecond => (PoundsForcePerSquareInchPerSecondInOnePascalPerSecond, PoundsForcePerSquareInchPerSecondTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { PressureChangeRateUnit.AtmospherePerSecond },
            new object[] { PressureChangeRateUnit.BarPerMinute },
            new object[] { PressureChangeRateUnit.BarPerSecond },
            new object[] { PressureChangeRateUnit.KilopascalPerMinute },
            new object[] { PressureChangeRateUnit.KilopascalPerSecond },
            new object[] { PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute },
            new object[] { PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond },
            new object[] { PressureChangeRateUnit.MegapascalPerMinute },
            new object[] { PressureChangeRateUnit.MegapascalPerSecond },
            new object[] { PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute },
            new object[] { PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond },
            new object[] { PressureChangeRateUnit.MillibarPerMinute },
            new object[] { PressureChangeRateUnit.MillibarPerSecond },
            new object[] { PressureChangeRateUnit.MillimeterOfMercuryPerSecond },
            new object[] { PressureChangeRateUnit.PascalPerMinute },
            new object[] { PressureChangeRateUnit.PascalPerSecond },
            new object[] { PressureChangeRateUnit.PoundForcePerSquareInchPerMinute },
            new object[] { PressureChangeRateUnit.PoundForcePerSquareInchPerSecond },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new PressureChangeRate();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(PressureChangeRateUnit.PascalPerSecond, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new PressureChangeRate(double.PositiveInfinity, PressureChangeRateUnit.PascalPerSecond));
            var exception2 = Record.Exception(() => new PressureChangeRate(double.NegativeInfinity, PressureChangeRateUnit.PascalPerSecond));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new PressureChangeRate(double.NaN, PressureChangeRateUnit.PascalPerSecond));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new PressureChangeRate(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new PressureChangeRate(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new PressureChangeRate(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void PressureChangeRate_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            PressureChangeRateUnit[] unitsOrderedByName = EnumHelper.GetValues<PressureChangeRateUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new PressureChangeRate(1, PressureChangeRateUnit.PascalPerSecond);

            QuantityInfo<PressureChangeRate, PressureChangeRateUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("PressureChangeRate", quantityInfo.Name);
            Assert.Equal(PressureChangeRate.Zero, quantityInfo.Zero);
            Assert.Equal(PressureChangeRate.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(PressureChangeRate.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<PressureChangeRateUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void PressureChangeRateInfo_CreateWithCustomUnitInfos()
        {
            PressureChangeRateUnit[] expectedUnits = [PressureChangeRateUnit.PascalPerSecond];

            PressureChangeRate.PressureChangeRateInfo quantityInfo = PressureChangeRate.PressureChangeRateInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("PressureChangeRate", quantityInfo.Name);
            Assert.Equal(PressureChangeRate.Zero, quantityInfo.Zero);
            Assert.Equal(PressureChangeRate.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void PascalPerSecondToPressureChangeRateUnits()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            AssertEx.EqualTolerance(AtmospheresPerSecondInOnePascalPerSecond, pascalpersecond.AtmospheresPerSecond, AtmospheresPerSecondTolerance);
            AssertEx.EqualTolerance(BarsPerMinuteInOnePascalPerSecond, pascalpersecond.BarsPerMinute, BarsPerMinuteTolerance);
            AssertEx.EqualTolerance(BarsPerSecondInOnePascalPerSecond, pascalpersecond.BarsPerSecond, BarsPerSecondTolerance);
            AssertEx.EqualTolerance(KilopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.KilopascalsPerMinute, KilopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilopascalsPerSecondInOnePascalPerSecond, pascalpersecond.KilopascalsPerSecond, KilopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareInchPerMinuteInOnePascalPerSecond, pascalpersecond.KilopoundsForcePerSquareInchPerMinute, KilopoundsForcePerSquareInchPerMinuteTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareInchPerSecondInOnePascalPerSecond, pascalpersecond.KilopoundsForcePerSquareInchPerSecond, KilopoundsForcePerSquareInchPerSecondTolerance);
            AssertEx.EqualTolerance(MegapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.MegapascalsPerMinute, MegapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(MegapascalsPerSecondInOnePascalPerSecond, pascalpersecond.MegapascalsPerSecond, MegapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(MegapoundsForcePerSquareInchPerMinuteInOnePascalPerSecond, pascalpersecond.MegapoundsForcePerSquareInchPerMinute, MegapoundsForcePerSquareInchPerMinuteTolerance);
            AssertEx.EqualTolerance(MegapoundsForcePerSquareInchPerSecondInOnePascalPerSecond, pascalpersecond.MegapoundsForcePerSquareInchPerSecond, MegapoundsForcePerSquareInchPerSecondTolerance);
            AssertEx.EqualTolerance(MillibarsPerMinuteInOnePascalPerSecond, pascalpersecond.MillibarsPerMinute, MillibarsPerMinuteTolerance);
            AssertEx.EqualTolerance(MillibarsPerSecondInOnePascalPerSecond, pascalpersecond.MillibarsPerSecond, MillibarsPerSecondTolerance);
            AssertEx.EqualTolerance(MillimetersOfMercuryPerSecondInOnePascalPerSecond, pascalpersecond.MillimetersOfMercuryPerSecond, MillimetersOfMercuryPerSecondTolerance);
            AssertEx.EqualTolerance(PascalsPerMinuteInOnePascalPerSecond, pascalpersecond.PascalsPerMinute, PascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(PascalsPerSecondInOnePascalPerSecond, pascalpersecond.PascalsPerSecond, PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareInchPerMinuteInOnePascalPerSecond, pascalpersecond.PoundsForcePerSquareInchPerMinute, PoundsForcePerSquareInchPerMinuteTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareInchPerSecondInOnePascalPerSecond, pascalpersecond.PoundsForcePerSquareInchPerSecond, PoundsForcePerSquareInchPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = PressureChangeRate.From(1, PressureChangeRateUnit.AtmospherePerSecond);
            Assert.Equal(1, quantity00.AtmospheresPerSecond);
            Assert.Equal(PressureChangeRateUnit.AtmospherePerSecond, quantity00.Unit);

            var quantity01 = PressureChangeRate.From(1, PressureChangeRateUnit.BarPerMinute);
            Assert.Equal(1, quantity01.BarsPerMinute);
            Assert.Equal(PressureChangeRateUnit.BarPerMinute, quantity01.Unit);

            var quantity02 = PressureChangeRate.From(1, PressureChangeRateUnit.BarPerSecond);
            Assert.Equal(1, quantity02.BarsPerSecond);
            Assert.Equal(PressureChangeRateUnit.BarPerSecond, quantity02.Unit);

            var quantity03 = PressureChangeRate.From(1, PressureChangeRateUnit.KilopascalPerMinute);
            Assert.Equal(1, quantity03.KilopascalsPerMinute);
            Assert.Equal(PressureChangeRateUnit.KilopascalPerMinute, quantity03.Unit);

            var quantity04 = PressureChangeRate.From(1, PressureChangeRateUnit.KilopascalPerSecond);
            Assert.Equal(1, quantity04.KilopascalsPerSecond);
            Assert.Equal(PressureChangeRateUnit.KilopascalPerSecond, quantity04.Unit);

            var quantity05 = PressureChangeRate.From(1, PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute);
            Assert.Equal(1, quantity05.KilopoundsForcePerSquareInchPerMinute);
            Assert.Equal(PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, quantity05.Unit);

            var quantity06 = PressureChangeRate.From(1, PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond);
            Assert.Equal(1, quantity06.KilopoundsForcePerSquareInchPerSecond);
            Assert.Equal(PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, quantity06.Unit);

            var quantity07 = PressureChangeRate.From(1, PressureChangeRateUnit.MegapascalPerMinute);
            Assert.Equal(1, quantity07.MegapascalsPerMinute);
            Assert.Equal(PressureChangeRateUnit.MegapascalPerMinute, quantity07.Unit);

            var quantity08 = PressureChangeRate.From(1, PressureChangeRateUnit.MegapascalPerSecond);
            Assert.Equal(1, quantity08.MegapascalsPerSecond);
            Assert.Equal(PressureChangeRateUnit.MegapascalPerSecond, quantity08.Unit);

            var quantity09 = PressureChangeRate.From(1, PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute);
            Assert.Equal(1, quantity09.MegapoundsForcePerSquareInchPerMinute);
            Assert.Equal(PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, quantity09.Unit);

            var quantity10 = PressureChangeRate.From(1, PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond);
            Assert.Equal(1, quantity10.MegapoundsForcePerSquareInchPerSecond);
            Assert.Equal(PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, quantity10.Unit);

            var quantity11 = PressureChangeRate.From(1, PressureChangeRateUnit.MillibarPerMinute);
            Assert.Equal(1, quantity11.MillibarsPerMinute);
            Assert.Equal(PressureChangeRateUnit.MillibarPerMinute, quantity11.Unit);

            var quantity12 = PressureChangeRate.From(1, PressureChangeRateUnit.MillibarPerSecond);
            Assert.Equal(1, quantity12.MillibarsPerSecond);
            Assert.Equal(PressureChangeRateUnit.MillibarPerSecond, quantity12.Unit);

            var quantity13 = PressureChangeRate.From(1, PressureChangeRateUnit.MillimeterOfMercuryPerSecond);
            Assert.Equal(1, quantity13.MillimetersOfMercuryPerSecond);
            Assert.Equal(PressureChangeRateUnit.MillimeterOfMercuryPerSecond, quantity13.Unit);

            var quantity14 = PressureChangeRate.From(1, PressureChangeRateUnit.PascalPerMinute);
            Assert.Equal(1, quantity14.PascalsPerMinute);
            Assert.Equal(PressureChangeRateUnit.PascalPerMinute, quantity14.Unit);

            var quantity15 = PressureChangeRate.From(1, PressureChangeRateUnit.PascalPerSecond);
            Assert.Equal(1, quantity15.PascalsPerSecond);
            Assert.Equal(PressureChangeRateUnit.PascalPerSecond, quantity15.Unit);

            var quantity16 = PressureChangeRate.From(1, PressureChangeRateUnit.PoundForcePerSquareInchPerMinute);
            Assert.Equal(1, quantity16.PoundsForcePerSquareInchPerMinute);
            Assert.Equal(PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, quantity16.Unit);

            var quantity17 = PressureChangeRate.From(1, PressureChangeRateUnit.PoundForcePerSquareInchPerSecond);
            Assert.Equal(1, quantity17.PoundsForcePerSquareInchPerSecond);
            Assert.Equal(PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, quantity17.Unit);

        }

        [Fact]
        public void FromPascalsPerSecond_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => PressureChangeRate.FromPascalsPerSecond(double.PositiveInfinity));
            var exception2 = Record.Exception(() => PressureChangeRate.FromPascalsPerSecond(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromPascalsPerSecond_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => PressureChangeRate.FromPascalsPerSecond(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            AssertEx.EqualTolerance(AtmospheresPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.AtmospherePerSecond), AtmospheresPerSecondTolerance);
            AssertEx.EqualTolerance(BarsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.BarPerMinute), BarsPerMinuteTolerance);
            AssertEx.EqualTolerance(BarsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.BarPerSecond), BarsPerSecondTolerance);
            AssertEx.EqualTolerance(KilopascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.KilopascalPerMinute), KilopascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilopascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.KilopascalPerSecond), KilopascalsPerSecondTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareInchPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute), KilopoundsForcePerSquareInchPerMinuteTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareInchPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond), KilopoundsForcePerSquareInchPerSecondTolerance);
            AssertEx.EqualTolerance(MegapascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MegapascalPerMinute), MegapascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(MegapascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MegapascalPerSecond), MegapascalsPerSecondTolerance);
            AssertEx.EqualTolerance(MegapoundsForcePerSquareInchPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute), MegapoundsForcePerSquareInchPerMinuteTolerance);
            AssertEx.EqualTolerance(MegapoundsForcePerSquareInchPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond), MegapoundsForcePerSquareInchPerSecondTolerance);
            AssertEx.EqualTolerance(MillibarsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MillibarPerMinute), MillibarsPerMinuteTolerance);
            AssertEx.EqualTolerance(MillibarsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MillibarPerSecond), MillibarsPerSecondTolerance);
            AssertEx.EqualTolerance(MillimetersOfMercuryPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.MillimeterOfMercuryPerSecond), MillimetersOfMercuryPerSecondTolerance);
            AssertEx.EqualTolerance(PascalsPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PascalPerMinute), PascalsPerMinuteTolerance);
            AssertEx.EqualTolerance(PascalsPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PascalPerSecond), PascalsPerSecondTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareInchPerMinuteInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PoundForcePerSquareInchPerMinute), PoundsForcePerSquareInchPerMinuteTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareInchPerSecondInOnePascalPerSecond, pascalpersecond.As(PressureChangeRateUnit.PoundForcePerSquareInchPerSecond), PoundsForcePerSquareInchPerSecondTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = PressureChangeRate.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
            var expectedValue = quantity.As(PressureChangeRate.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
            var expectedUnit = PressureChangeRate.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                PressureChangeRate quantityToConvert = quantity;

                PressureChangeRate convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<PressureChangeRateUnit> quantityToConvert = quantity;

                IQuantity<PressureChangeRateUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<PressureChangeRateUnit> quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<PressureChangeRateUnit> quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new PressureChangeRate(value: 1, unit: PressureChangeRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 atm/s", PressureChangeRateUnit.AtmospherePerSecond, 4.2)]
        [InlineData("en-US", "4.2 bar/min", PressureChangeRateUnit.BarPerMinute, 4.2)]
        [InlineData("en-US", "4.2 bar/s", PressureChangeRateUnit.BarPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kPa/min", PressureChangeRateUnit.KilopascalPerMinute, 4.2)]
        [InlineData("en-US", "4.2 kPa/s", PressureChangeRateUnit.KilopascalPerSecond, 4.2)]
        [InlineData("en-US", "4.2 ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 MPa/min", PressureChangeRateUnit.MegapascalPerMinute, 4.2)]
        [InlineData("en-US", "4.2 MPa/s", PressureChangeRateUnit.MegapascalPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 mbar/min", PressureChangeRateUnit.MillibarPerMinute, 4.2)]
        [InlineData("en-US", "4.2 mbar/s", PressureChangeRateUnit.MillibarPerSecond, 4.2)]
        [InlineData("en-US", "4.2 mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pa/min", PressureChangeRateUnit.PascalPerMinute, 4.2)]
        [InlineData("en-US", "4.2 Pa/s", PressureChangeRateUnit.PascalPerSecond, 4.2)]
        [InlineData("en-US", "4.2 psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 атм/с", PressureChangeRateUnit.AtmospherePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 бар/мин", PressureChangeRateUnit.BarPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 бар/с", PressureChangeRateUnit.BarPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 кПа/мин", PressureChangeRateUnit.KilopascalPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 кПа/с", PressureChangeRateUnit.KilopascalPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 ksi/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 kipf/in²/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 ksi/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 kipf/in²/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 МПа/мин", PressureChangeRateUnit.MegapascalPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 МПа/с", PressureChangeRateUnit.MegapascalPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 Мpsi/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 Мlb/in²/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 Мpsi/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 Мlb/in²/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мбар/мин", PressureChangeRateUnit.MillibarPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 мбар/с", PressureChangeRateUnit.MillibarPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 mmHg/с", PressureChangeRateUnit.MillimeterOfMercuryPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 Па/мин", PressureChangeRateUnit.PascalPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 Па/с", PressureChangeRateUnit.PascalPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 psi/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 lb/in²/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 psi/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 lb/in²/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, 4.2)]
        public void Parse(string culture, string quantityString, PressureChangeRateUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = PressureChangeRate.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 atm/s", PressureChangeRateUnit.AtmospherePerSecond, 4.2)]
        [InlineData("en-US", "4.2 bar/min", PressureChangeRateUnit.BarPerMinute, 4.2)]
        [InlineData("en-US", "4.2 bar/s", PressureChangeRateUnit.BarPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kPa/min", PressureChangeRateUnit.KilopascalPerMinute, 4.2)]
        [InlineData("en-US", "4.2 kPa/s", PressureChangeRateUnit.KilopascalPerSecond, 4.2)]
        [InlineData("en-US", "4.2 ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 MPa/min", PressureChangeRateUnit.MegapascalPerMinute, 4.2)]
        [InlineData("en-US", "4.2 MPa/s", PressureChangeRateUnit.MegapascalPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 mbar/min", PressureChangeRateUnit.MillibarPerMinute, 4.2)]
        [InlineData("en-US", "4.2 mbar/s", PressureChangeRateUnit.MillibarPerSecond, 4.2)]
        [InlineData("en-US", "4.2 mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pa/min", PressureChangeRateUnit.PascalPerMinute, 4.2)]
        [InlineData("en-US", "4.2 Pa/s", PressureChangeRateUnit.PascalPerSecond, 4.2)]
        [InlineData("en-US", "4.2 psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("en-US", "4.2 psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("en-US", "4.2 lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 атм/с", PressureChangeRateUnit.AtmospherePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 бар/мин", PressureChangeRateUnit.BarPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 бар/с", PressureChangeRateUnit.BarPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 кПа/мин", PressureChangeRateUnit.KilopascalPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 кПа/с", PressureChangeRateUnit.KilopascalPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 ksi/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 kipf/in²/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 ksi/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 kipf/in²/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 МПа/мин", PressureChangeRateUnit.MegapascalPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 МПа/с", PressureChangeRateUnit.MegapascalPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 Мpsi/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 Мlb/in²/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 Мpsi/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 Мlb/in²/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мбар/мин", PressureChangeRateUnit.MillibarPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 мбар/с", PressureChangeRateUnit.MillibarPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 mmHg/с", PressureChangeRateUnit.MillimeterOfMercuryPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 Па/мин", PressureChangeRateUnit.PascalPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 Па/с", PressureChangeRateUnit.PascalPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 psi/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 lb/in²/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 psi/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 lb/in²/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, 4.2)]
        public void TryParse(string culture, string quantityString, PressureChangeRateUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(PressureChangeRate.TryParse(quantityString, out PressureChangeRate parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("atm/s", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("bar/min", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("bar/s", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("kPa/min", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("kPa/s", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("MPa/min", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("MPa/s", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("mbar/min", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("mbar/s", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("Pa/min", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("Pa/s", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PressureChangeRateUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            PressureChangeRateUnit parsedUnit = PressureChangeRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("atm/s", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("bar/min", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("bar/s", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("kPa/min", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("kPa/s", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("MPa/min", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("MPa/s", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("mbar/min", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("mbar/s", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("Pa/min", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("Pa/s", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PressureChangeRateUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            PressureChangeRateUnit parsedUnit = PressureChangeRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm/s", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("en-US", "bar/min", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("en-US", "bar/s", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("en-US", "kPa/min", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("en-US", "kPa/s", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("en-US", "ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "MPa/min", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("en-US", "MPa/s", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("en-US", "Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "mbar/min", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("en-US", "mbar/s", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("en-US", "mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("en-US", "Pa/min", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("en-US", "Pa/s", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("en-US", "psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "атм/с", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("ru-RU", "бар/мин", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("ru-RU", "бар/с", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("ru-RU", "кПа/мин", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("ru-RU", "кПа/с", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("ru-RU", "ksi/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "kipf/in²/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "ksi/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "kipf/in²/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "МПа/мин", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("ru-RU", "МПа/с", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("ru-RU", "Мpsi/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "Мlb/in²/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "Мpsi/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "Мlb/in²/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "мбар/мин", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("ru-RU", "мбар/с", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("ru-RU", "mmHg/с", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("ru-RU", "Па/мин", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("ru-RU", "Па/с", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("ru-RU", "psi/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "lb/in²/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "psi/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "lb/in²/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, PressureChangeRateUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            PressureChangeRateUnit parsedUnit = PressureChangeRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm/s", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("en-US", "bar/min", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("en-US", "bar/s", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("en-US", "kPa/min", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("en-US", "kPa/s", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("en-US", "ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "MPa/min", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("en-US", "MPa/s", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("en-US", "Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "mbar/min", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("en-US", "mbar/s", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("en-US", "mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("en-US", "Pa/min", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("en-US", "Pa/s", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("en-US", "psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "атм/с", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("ru-RU", "бар/мин", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("ru-RU", "бар/с", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("ru-RU", "кПа/мин", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("ru-RU", "кПа/с", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("ru-RU", "ksi/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "kipf/in²/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "ksi/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "kipf/in²/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "МПа/мин", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("ru-RU", "МПа/с", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("ru-RU", "Мpsi/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "Мlb/in²/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "Мpsi/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "Мlb/in²/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "мбар/мин", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("ru-RU", "мбар/с", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("ru-RU", "mmHg/с", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("ru-RU", "Па/мин", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("ru-RU", "Па/с", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("ru-RU", "psi/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "lb/in²/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "psi/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "lb/in²/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, PressureChangeRateUnit expectedUnit)
        {
            PressureChangeRateUnit parsedUnit = PressureChangeRate.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("atm/s", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("bar/min", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("bar/s", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("kPa/min", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("kPa/s", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("MPa/min", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("MPa/s", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("mbar/min", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("mbar/s", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("Pa/min", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("Pa/s", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PressureChangeRateUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(PressureChangeRate.TryParseUnit(abbreviation, out PressureChangeRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("atm/s", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("bar/min", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("bar/s", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("kPa/min", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("kPa/s", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("MPa/min", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("MPa/s", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("mbar/min", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("mbar/s", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("Pa/min", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("Pa/s", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PressureChangeRateUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(PressureChangeRate.TryParseUnit(abbreviation, out PressureChangeRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm/s", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("en-US", "bar/min", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("en-US", "bar/s", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("en-US", "kPa/min", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("en-US", "kPa/s", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("en-US", "ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "MPa/min", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("en-US", "MPa/s", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("en-US", "Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "mbar/min", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("en-US", "mbar/s", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("en-US", "mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("en-US", "Pa/min", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("en-US", "Pa/s", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("en-US", "psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "атм/с", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("ru-RU", "бар/мин", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("ru-RU", "бар/с", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("ru-RU", "кПа/мин", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("ru-RU", "кПа/с", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("ru-RU", "ksi/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "kipf/in²/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "ksi/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "kipf/in²/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "МПа/мин", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("ru-RU", "МПа/с", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("ru-RU", "Мpsi/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "Мlb/in²/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "Мpsi/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "Мlb/in²/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "мбар/мин", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("ru-RU", "мбар/с", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("ru-RU", "mmHg/с", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("ru-RU", "Па/мин", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("ru-RU", "Па/с", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("ru-RU", "psi/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "lb/in²/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "psi/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "lb/in²/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, PressureChangeRateUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(PressureChangeRate.TryParseUnit(abbreviation, out PressureChangeRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm/s", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("en-US", "bar/min", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("en-US", "bar/s", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("en-US", "kPa/min", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("en-US", "kPa/s", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("en-US", "ksi/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "kipf/in²/min", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "ksi/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "kipf/in²/s", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "MPa/min", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("en-US", "MPa/s", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("en-US", "Mpsi/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "Mlb/in²/min", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "Mpsi/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "Mlb/in²/s", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "mbar/min", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("en-US", "mbar/s", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("en-US", "mmHg/s", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("en-US", "Pa/min", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("en-US", "Pa/s", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("en-US", "psi/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "lb/in²/min", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("en-US", "psi/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("en-US", "lb/in²/s", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "атм/с", PressureChangeRateUnit.AtmospherePerSecond)]
        [InlineData("ru-RU", "бар/мин", PressureChangeRateUnit.BarPerMinute)]
        [InlineData("ru-RU", "бар/с", PressureChangeRateUnit.BarPerSecond)]
        [InlineData("ru-RU", "кПа/мин", PressureChangeRateUnit.KilopascalPerMinute)]
        [InlineData("ru-RU", "кПа/с", PressureChangeRateUnit.KilopascalPerSecond)]
        [InlineData("ru-RU", "ksi/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "kipf/in²/мин", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "ksi/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "kipf/in²/с", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "МПа/мин", PressureChangeRateUnit.MegapascalPerMinute)]
        [InlineData("ru-RU", "МПа/с", PressureChangeRateUnit.MegapascalPerSecond)]
        [InlineData("ru-RU", "Мpsi/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "Мlb/in²/мин", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "Мpsi/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "Мlb/in²/с", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "мбар/мин", PressureChangeRateUnit.MillibarPerMinute)]
        [InlineData("ru-RU", "мбар/с", PressureChangeRateUnit.MillibarPerSecond)]
        [InlineData("ru-RU", "mmHg/с", PressureChangeRateUnit.MillimeterOfMercuryPerSecond)]
        [InlineData("ru-RU", "Па/мин", PressureChangeRateUnit.PascalPerMinute)]
        [InlineData("ru-RU", "Па/с", PressureChangeRateUnit.PascalPerSecond)]
        [InlineData("ru-RU", "psi/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "lb/in²/мин", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute)]
        [InlineData("ru-RU", "psi/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        [InlineData("ru-RU", "lb/in²/с", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, PressureChangeRateUnit expectedUnit)
        {
            Assert.True(PressureChangeRate.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out PressureChangeRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", PressureChangeRateUnit.AtmospherePerSecond, "atm/s")]
        [InlineData("en-US", PressureChangeRateUnit.BarPerMinute, "bar/min")]
        [InlineData("en-US", PressureChangeRateUnit.BarPerSecond, "bar/s")]
        [InlineData("en-US", PressureChangeRateUnit.KilopascalPerMinute, "kPa/min")]
        [InlineData("en-US", PressureChangeRateUnit.KilopascalPerSecond, "kPa/s")]
        [InlineData("en-US", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, "ksi/min")]
        [InlineData("en-US", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, "ksi/s")]
        [InlineData("en-US", PressureChangeRateUnit.MegapascalPerMinute, "MPa/min")]
        [InlineData("en-US", PressureChangeRateUnit.MegapascalPerSecond, "MPa/s")]
        [InlineData("en-US", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, "Mpsi/min")]
        [InlineData("en-US", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, "Mpsi/s")]
        [InlineData("en-US", PressureChangeRateUnit.MillibarPerMinute, "mbar/min")]
        [InlineData("en-US", PressureChangeRateUnit.MillibarPerSecond, "mbar/s")]
        [InlineData("en-US", PressureChangeRateUnit.MillimeterOfMercuryPerSecond, "mmHg/s")]
        [InlineData("en-US", PressureChangeRateUnit.PascalPerMinute, "Pa/min")]
        [InlineData("en-US", PressureChangeRateUnit.PascalPerSecond, "Pa/s")]
        [InlineData("en-US", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, "psi/min")]
        [InlineData("en-US", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, "psi/s")]
        [InlineData("ru-RU", PressureChangeRateUnit.AtmospherePerSecond, "атм/с")]
        [InlineData("ru-RU", PressureChangeRateUnit.BarPerMinute, "бар/мин")]
        [InlineData("ru-RU", PressureChangeRateUnit.BarPerSecond, "бар/с")]
        [InlineData("ru-RU", PressureChangeRateUnit.KilopascalPerMinute, "кПа/мин")]
        [InlineData("ru-RU", PressureChangeRateUnit.KilopascalPerSecond, "кПа/с")]
        [InlineData("ru-RU", PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute, "ksi/мин")]
        [InlineData("ru-RU", PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond, "ksi/с")]
        [InlineData("ru-RU", PressureChangeRateUnit.MegapascalPerMinute, "МПа/мин")]
        [InlineData("ru-RU", PressureChangeRateUnit.MegapascalPerSecond, "МПа/с")]
        [InlineData("ru-RU", PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute, "Мpsi/мин")]
        [InlineData("ru-RU", PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond, "Мpsi/с")]
        [InlineData("ru-RU", PressureChangeRateUnit.MillibarPerMinute, "мбар/мин")]
        [InlineData("ru-RU", PressureChangeRateUnit.MillibarPerSecond, "мбар/с")]
        [InlineData("ru-RU", PressureChangeRateUnit.MillimeterOfMercuryPerSecond, "mmHg/с")]
        [InlineData("ru-RU", PressureChangeRateUnit.PascalPerMinute, "Па/мин")]
        [InlineData("ru-RU", PressureChangeRateUnit.PascalPerSecond, "Па/с")]
        [InlineData("ru-RU", PressureChangeRateUnit.PoundForcePerSquareInchPerMinute, "psi/мин")]
        [InlineData("ru-RU", PressureChangeRateUnit.PoundForcePerSquareInchPerSecond, "psi/с")]
        public void GetAbbreviationForCulture(string culture, PressureChangeRateUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = PressureChangeRate.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(PressureChangeRate.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = PressureChangeRate.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(PressureChangeRateUnit unit)
        {
            var inBaseUnits = PressureChangeRate.From(1.0, PressureChangeRate.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(PressureChangeRateUnit unit)
        {
            var quantity = PressureChangeRate.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(PressureChangeRateUnit unit)
        {
            Assert.All(PressureChangeRate.Units.Where(u => u != PressureChangeRate.BaseUnit), fromUnit =>
            {
                var quantity = PressureChangeRate.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(PressureChangeRateUnit unit)
        {
            var quantity = default(PressureChangeRate);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(PressureChangeRateUnit unit)
        {
            var quantity = PressureChangeRate.From(3, PressureChangeRate.BaseUnit);
            PressureChangeRate expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<PressureChangeRateUnit> quantityToConvert = quantity;
                IQuantity<PressureChangeRateUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(3);
            Assert.Equal(3, PressureChangeRate.FromAtmospheresPerSecond(pascalpersecond.AtmospheresPerSecond).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromBarsPerMinute(pascalpersecond.BarsPerMinute).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromBarsPerSecond(pascalpersecond.BarsPerSecond).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromKilopascalsPerMinute(pascalpersecond.KilopascalsPerMinute).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromKilopascalsPerSecond(pascalpersecond.KilopascalsPerSecond).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromKilopoundsForcePerSquareInchPerMinute(pascalpersecond.KilopoundsForcePerSquareInchPerMinute).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromKilopoundsForcePerSquareInchPerSecond(pascalpersecond.KilopoundsForcePerSquareInchPerSecond).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromMegapascalsPerMinute(pascalpersecond.MegapascalsPerMinute).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromMegapascalsPerSecond(pascalpersecond.MegapascalsPerSecond).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromMegapoundsForcePerSquareInchPerMinute(pascalpersecond.MegapoundsForcePerSquareInchPerMinute).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromMegapoundsForcePerSquareInchPerSecond(pascalpersecond.MegapoundsForcePerSquareInchPerSecond).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromMillibarsPerMinute(pascalpersecond.MillibarsPerMinute).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromMillibarsPerSecond(pascalpersecond.MillibarsPerSecond).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromMillimetersOfMercuryPerSecond(pascalpersecond.MillimetersOfMercuryPerSecond).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromPascalsPerMinute(pascalpersecond.PascalsPerMinute).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromPascalsPerSecond(pascalpersecond.PascalsPerSecond).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromPoundsForcePerSquareInchPerMinute(pascalpersecond.PoundsForcePerSquareInchPerMinute).PascalsPerSecond);
            Assert.Equal(3, PressureChangeRate.FromPoundsForcePerSquareInchPerSecond(pascalpersecond.PoundsForcePerSquareInchPerSecond).PascalsPerSecond);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            PressureChangeRate v = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.Equal(-1, -v.PascalsPerSecond);
            Assert.Equal(2, (PressureChangeRate.FromPascalsPerSecond(3) - v).PascalsPerSecond);
            Assert.Equal(2, (v + v).PascalsPerSecond);
            Assert.Equal(10, (v * 10).PascalsPerSecond);
            Assert.Equal(10, (10 * v).PascalsPerSecond);
            Assert.Equal(2, (PressureChangeRate.FromPascalsPerSecond(10) / 5).PascalsPerSecond);
            Assert.Equal(2, PressureChangeRate.FromPascalsPerSecond(10) / PressureChangeRate.FromPascalsPerSecond(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            PressureChangeRate onePascalPerSecond = PressureChangeRate.FromPascalsPerSecond(1);
            PressureChangeRate twoPascalsPerSecond = PressureChangeRate.FromPascalsPerSecond(2);

            Assert.True(onePascalPerSecond < twoPascalsPerSecond);
            Assert.True(onePascalPerSecond <= twoPascalsPerSecond);
            Assert.True(twoPascalsPerSecond > onePascalPerSecond);
            Assert.True(twoPascalsPerSecond >= onePascalPerSecond);

            Assert.False(onePascalPerSecond > twoPascalsPerSecond);
            Assert.False(onePascalPerSecond >= twoPascalsPerSecond);
            Assert.False(twoPascalsPerSecond < onePascalPerSecond);
            Assert.False(twoPascalsPerSecond <= onePascalPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.Equal(0, pascalpersecond.CompareTo(pascalpersecond));
            Assert.True(pascalpersecond.CompareTo(PressureChangeRate.Zero) > 0);
            Assert.True(PressureChangeRate.Zero.CompareTo(pascalpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.Throws<ArgumentException>(() => pascalpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => pascalpersecond.CompareTo(null));
        }

        [Theory]
        [InlineData(1, PressureChangeRateUnit.PascalPerSecond, 1, PressureChangeRateUnit.PascalPerSecond, true)]  // Same value and unit.
        [InlineData(1, PressureChangeRateUnit.PascalPerSecond, 2, PressureChangeRateUnit.PascalPerSecond, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, PressureChangeRateUnit unitA, double valueB, PressureChangeRateUnit unitB, bool expectEqual)
        {
            var a = new PressureChangeRate(valueA, unitA);
            var b = new PressureChangeRate(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = PressureChangeRate.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.False(pascalpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            PressureChangeRate pascalpersecond = PressureChangeRate.FromPascalsPerSecond(1);
            Assert.False(pascalpersecond.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance_IsImplemented(double firstValue, double secondValue)
        {
            var quantity = PressureChangeRate.FromPascalsPerSecond(firstValue);
            var otherQuantity = PressureChangeRate.FromPascalsPerSecond(secondValue);
            PressureChangeRate maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, PressureChangeRate.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = PressureChangeRate.FromPascalsPerSecond(1);
            var negativeTolerance = PressureChangeRate.FromPascalsPerSecond(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<PressureChangeRateUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(PressureChangeRate.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(PressureChangeRate.Info.Units, PressureChangeRate.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, PressureChangeRate.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 atm/s", new PressureChangeRate(1, PressureChangeRateUnit.AtmospherePerSecond).ToString());
            Assert.Equal("1 bar/min", new PressureChangeRate(1, PressureChangeRateUnit.BarPerMinute).ToString());
            Assert.Equal("1 bar/s", new PressureChangeRate(1, PressureChangeRateUnit.BarPerSecond).ToString());
            Assert.Equal("1 kPa/min", new PressureChangeRate(1, PressureChangeRateUnit.KilopascalPerMinute).ToString());
            Assert.Equal("1 kPa/s", new PressureChangeRate(1, PressureChangeRateUnit.KilopascalPerSecond).ToString());
            Assert.Equal("1 ksi/min", new PressureChangeRate(1, PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute).ToString());
            Assert.Equal("1 ksi/s", new PressureChangeRate(1, PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond).ToString());
            Assert.Equal("1 MPa/min", new PressureChangeRate(1, PressureChangeRateUnit.MegapascalPerMinute).ToString());
            Assert.Equal("1 MPa/s", new PressureChangeRate(1, PressureChangeRateUnit.MegapascalPerSecond).ToString());
            Assert.Equal("1 Mpsi/min", new PressureChangeRate(1, PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute).ToString());
            Assert.Equal("1 Mpsi/s", new PressureChangeRate(1, PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond).ToString());
            Assert.Equal("1 mbar/min", new PressureChangeRate(1, PressureChangeRateUnit.MillibarPerMinute).ToString());
            Assert.Equal("1 mbar/s", new PressureChangeRate(1, PressureChangeRateUnit.MillibarPerSecond).ToString());
            Assert.Equal("1 mmHg/s", new PressureChangeRate(1, PressureChangeRateUnit.MillimeterOfMercuryPerSecond).ToString());
            Assert.Equal("1 Pa/min", new PressureChangeRate(1, PressureChangeRateUnit.PascalPerMinute).ToString());
            Assert.Equal("1 Pa/s", new PressureChangeRate(1, PressureChangeRateUnit.PascalPerSecond).ToString());
            Assert.Equal("1 psi/min", new PressureChangeRate(1, PressureChangeRateUnit.PoundForcePerSquareInchPerMinute).ToString());
            Assert.Equal("1 psi/s", new PressureChangeRate(1, PressureChangeRateUnit.PoundForcePerSquareInchPerSecond).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 atm/s", new PressureChangeRate(1, PressureChangeRateUnit.AtmospherePerSecond).ToString(swedishCulture));
            Assert.Equal("1 bar/min", new PressureChangeRate(1, PressureChangeRateUnit.BarPerMinute).ToString(swedishCulture));
            Assert.Equal("1 bar/s", new PressureChangeRate(1, PressureChangeRateUnit.BarPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kPa/min", new PressureChangeRate(1, PressureChangeRateUnit.KilopascalPerMinute).ToString(swedishCulture));
            Assert.Equal("1 kPa/s", new PressureChangeRate(1, PressureChangeRateUnit.KilopascalPerSecond).ToString(swedishCulture));
            Assert.Equal("1 ksi/min", new PressureChangeRate(1, PressureChangeRateUnit.KilopoundForcePerSquareInchPerMinute).ToString(swedishCulture));
            Assert.Equal("1 ksi/s", new PressureChangeRate(1, PressureChangeRateUnit.KilopoundForcePerSquareInchPerSecond).ToString(swedishCulture));
            Assert.Equal("1 MPa/min", new PressureChangeRate(1, PressureChangeRateUnit.MegapascalPerMinute).ToString(swedishCulture));
            Assert.Equal("1 MPa/s", new PressureChangeRate(1, PressureChangeRateUnit.MegapascalPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Mpsi/min", new PressureChangeRate(1, PressureChangeRateUnit.MegapoundForcePerSquareInchPerMinute).ToString(swedishCulture));
            Assert.Equal("1 Mpsi/s", new PressureChangeRate(1, PressureChangeRateUnit.MegapoundForcePerSquareInchPerSecond).ToString(swedishCulture));
            Assert.Equal("1 mbar/min", new PressureChangeRate(1, PressureChangeRateUnit.MillibarPerMinute).ToString(swedishCulture));
            Assert.Equal("1 mbar/s", new PressureChangeRate(1, PressureChangeRateUnit.MillibarPerSecond).ToString(swedishCulture));
            Assert.Equal("1 mmHg/s", new PressureChangeRate(1, PressureChangeRateUnit.MillimeterOfMercuryPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Pa/min", new PressureChangeRate(1, PressureChangeRateUnit.PascalPerMinute).ToString(swedishCulture));
            Assert.Equal("1 Pa/s", new PressureChangeRate(1, PressureChangeRateUnit.PascalPerSecond).ToString(swedishCulture));
            Assert.Equal("1 psi/min", new PressureChangeRate(1, PressureChangeRateUnit.PoundForcePerSquareInchPerMinute).ToString(swedishCulture));
            Assert.Equal("1 psi/s", new PressureChangeRate(1, PressureChangeRateUnit.PoundForcePerSquareInchPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Pa/s", new PressureChangeRate(0.123456, PressureChangeRateUnit.PascalPerSecond).ToString("s1"));
            Assert.Equal("0.12 Pa/s", new PressureChangeRate(0.123456, PressureChangeRateUnit.PascalPerSecond).ToString("s2"));
            Assert.Equal("0.123 Pa/s", new PressureChangeRate(0.123456, PressureChangeRateUnit.PascalPerSecond).ToString("s3"));
            Assert.Equal("0.1235 Pa/s", new PressureChangeRate(0.123456, PressureChangeRateUnit.PascalPerSecond).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Pa/s", new PressureChangeRate(0.123456, PressureChangeRateUnit.PascalPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 Pa/s", new PressureChangeRate(0.123456, PressureChangeRateUnit.PascalPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 Pa/s", new PressureChangeRate(0.123456, PressureChangeRateUnit.PascalPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 Pa/s", new PressureChangeRate(0.123456, PressureChangeRateUnit.PascalPerSecond).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = PressureChangeRate.FromPascalsPerSecond(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = PressureChangeRate.FromPascalsPerSecond(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = PressureChangeRate.FromPascalsPerSecond(1.0);
            var expected = Comparison.GetHashCode(typeof(PressureChangeRate), quantity.As(PressureChangeRate.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = PressureChangeRate.FromPascalsPerSecond(value);
            Assert.Equal(PressureChangeRate.FromPascalsPerSecond(-value), -quantity);
        }
    }
}
