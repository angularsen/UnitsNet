//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ReciprocalLength.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ReciprocalLengthTestsBase : QuantityTestsBase
    {
        protected abstract double InverseCentimetersInOneInverseMeter { get; }
        protected abstract double InverseFeetInOneInverseMeter { get; }
        protected abstract double InverseInchesInOneInverseMeter { get; }
        protected abstract double InverseMetersInOneInverseMeter { get; }
        protected abstract double InverseMicroinchesInOneInverseMeter { get; }
        protected abstract double InverseMilsInOneInverseMeter { get; }
        protected abstract double InverseMilesInOneInverseMeter { get; }
        protected abstract double InverseMillimetersInOneInverseMeter { get; }
        protected abstract double InverseUsSurveyFeetInOneInverseMeter { get; }
        protected abstract double InverseYardsInOneInverseMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double InverseCentimetersTolerance { get { return 1e-5; } }
        protected virtual double InverseFeetTolerance { get { return 1e-5; } }
        protected virtual double InverseInchesTolerance { get { return 1e-5; } }
        protected virtual double InverseMetersTolerance { get { return 1e-5; } }
        protected virtual double InverseMicroinchesTolerance { get { return 1e-5; } }
        protected virtual double InverseMilsTolerance { get { return 1e-5; } }
        protected virtual double InverseMilesTolerance { get { return 1e-5; } }
        protected virtual double InverseMillimetersTolerance { get { return 1e-5; } }
        protected virtual double InverseUsSurveyFeetTolerance { get { return 1e-5; } }
        protected virtual double InverseYardsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ReciprocalLengthUnit unit)
        {
            return unit switch
            {
                ReciprocalLengthUnit.InverseCentimeter => (InverseCentimetersInOneInverseMeter, InverseCentimetersTolerance),
                ReciprocalLengthUnit.InverseFoot => (InverseFeetInOneInverseMeter, InverseFeetTolerance),
                ReciprocalLengthUnit.InverseInch => (InverseInchesInOneInverseMeter, InverseInchesTolerance),
                ReciprocalLengthUnit.InverseMeter => (InverseMetersInOneInverseMeter, InverseMetersTolerance),
                ReciprocalLengthUnit.InverseMicroinch => (InverseMicroinchesInOneInverseMeter, InverseMicroinchesTolerance),
                ReciprocalLengthUnit.InverseMil => (InverseMilsInOneInverseMeter, InverseMilsTolerance),
                ReciprocalLengthUnit.InverseMile => (InverseMilesInOneInverseMeter, InverseMilesTolerance),
                ReciprocalLengthUnit.InverseMillimeter => (InverseMillimetersInOneInverseMeter, InverseMillimetersTolerance),
                ReciprocalLengthUnit.InverseUsSurveyFoot => (InverseUsSurveyFeetInOneInverseMeter, InverseUsSurveyFeetTolerance),
                ReciprocalLengthUnit.InverseYard => (InverseYardsInOneInverseMeter, InverseYardsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ReciprocalLengthUnit.InverseCentimeter },
            new object[] { ReciprocalLengthUnit.InverseFoot },
            new object[] { ReciprocalLengthUnit.InverseInch },
            new object[] { ReciprocalLengthUnit.InverseMeter },
            new object[] { ReciprocalLengthUnit.InverseMicroinch },
            new object[] { ReciprocalLengthUnit.InverseMil },
            new object[] { ReciprocalLengthUnit.InverseMile },
            new object[] { ReciprocalLengthUnit.InverseMillimeter },
            new object[] { ReciprocalLengthUnit.InverseUsSurveyFoot },
            new object[] { ReciprocalLengthUnit.InverseYard },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ReciprocalLength();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ReciprocalLengthUnit.InverseMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ReciprocalLength(double.PositiveInfinity, ReciprocalLengthUnit.InverseMeter));
            var exception2 = Record.Exception(() => new ReciprocalLength(double.NegativeInfinity, ReciprocalLengthUnit.InverseMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ReciprocalLength(double.NaN, ReciprocalLengthUnit.InverseMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ReciprocalLength(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ReciprocalLength(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ReciprocalLength(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ReciprocalLength_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new ReciprocalLength(1, ReciprocalLengthUnit.InverseMeter);

            QuantityInfo<ReciprocalLengthUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(ReciprocalLength.Zero, quantityInfo.Zero);
            Assert.Equal("ReciprocalLength", quantityInfo.Name);

            var units = Enum.GetValues<ReciprocalLengthUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void InverseMeterToReciprocalLengthUnits()
        {
            ReciprocalLength inversemeter = ReciprocalLength.FromInverseMeters(1);
            AssertEx.EqualTolerance(InverseCentimetersInOneInverseMeter, inversemeter.InverseCentimeters, InverseCentimetersTolerance);
            AssertEx.EqualTolerance(InverseFeetInOneInverseMeter, inversemeter.InverseFeet, InverseFeetTolerance);
            AssertEx.EqualTolerance(InverseInchesInOneInverseMeter, inversemeter.InverseInches, InverseInchesTolerance);
            AssertEx.EqualTolerance(InverseMetersInOneInverseMeter, inversemeter.InverseMeters, InverseMetersTolerance);
            AssertEx.EqualTolerance(InverseMicroinchesInOneInverseMeter, inversemeter.InverseMicroinches, InverseMicroinchesTolerance);
            AssertEx.EqualTolerance(InverseMilsInOneInverseMeter, inversemeter.InverseMils, InverseMilsTolerance);
            AssertEx.EqualTolerance(InverseMilesInOneInverseMeter, inversemeter.InverseMiles, InverseMilesTolerance);
            AssertEx.EqualTolerance(InverseMillimetersInOneInverseMeter, inversemeter.InverseMillimeters, InverseMillimetersTolerance);
            AssertEx.EqualTolerance(InverseUsSurveyFeetInOneInverseMeter, inversemeter.InverseUsSurveyFeet, InverseUsSurveyFeetTolerance);
            AssertEx.EqualTolerance(InverseYardsInOneInverseMeter, inversemeter.InverseYards, InverseYardsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseCentimeter);
            AssertEx.EqualTolerance(1, quantity00.InverseCentimeters, InverseCentimetersTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseCentimeter, quantity00.Unit);

            var quantity01 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseFoot);
            AssertEx.EqualTolerance(1, quantity01.InverseFeet, InverseFeetTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseFoot, quantity01.Unit);

            var quantity02 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseInch);
            AssertEx.EqualTolerance(1, quantity02.InverseInches, InverseInchesTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseInch, quantity02.Unit);

            var quantity03 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseMeter);
            AssertEx.EqualTolerance(1, quantity03.InverseMeters, InverseMetersTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseMeter, quantity03.Unit);

            var quantity04 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseMicroinch);
            AssertEx.EqualTolerance(1, quantity04.InverseMicroinches, InverseMicroinchesTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseMicroinch, quantity04.Unit);

            var quantity05 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseMil);
            AssertEx.EqualTolerance(1, quantity05.InverseMils, InverseMilsTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseMil, quantity05.Unit);

            var quantity06 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseMile);
            AssertEx.EqualTolerance(1, quantity06.InverseMiles, InverseMilesTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseMile, quantity06.Unit);

            var quantity07 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseMillimeter);
            AssertEx.EqualTolerance(1, quantity07.InverseMillimeters, InverseMillimetersTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseMillimeter, quantity07.Unit);

            var quantity08 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseUsSurveyFoot);
            AssertEx.EqualTolerance(1, quantity08.InverseUsSurveyFeet, InverseUsSurveyFeetTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseUsSurveyFoot, quantity08.Unit);

            var quantity09 = ReciprocalLength.From(1, ReciprocalLengthUnit.InverseYard);
            AssertEx.EqualTolerance(1, quantity09.InverseYards, InverseYardsTolerance);
            Assert.Equal(ReciprocalLengthUnit.InverseYard, quantity09.Unit);

        }

        [Fact]
        public void FromInverseMeters_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ReciprocalLength.FromInverseMeters(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ReciprocalLength.FromInverseMeters(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromInverseMeters_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ReciprocalLength.FromInverseMeters(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var inversemeter = ReciprocalLength.FromInverseMeters(1);
            AssertEx.EqualTolerance(InverseCentimetersInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseCentimeter), InverseCentimetersTolerance);
            AssertEx.EqualTolerance(InverseFeetInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseFoot), InverseFeetTolerance);
            AssertEx.EqualTolerance(InverseInchesInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseInch), InverseInchesTolerance);
            AssertEx.EqualTolerance(InverseMetersInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseMeter), InverseMetersTolerance);
            AssertEx.EqualTolerance(InverseMicroinchesInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseMicroinch), InverseMicroinchesTolerance);
            AssertEx.EqualTolerance(InverseMilsInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseMil), InverseMilsTolerance);
            AssertEx.EqualTolerance(InverseMilesInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseMile), InverseMilesTolerance);
            AssertEx.EqualTolerance(InverseMillimetersInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseMillimeter), InverseMillimetersTolerance);
            AssertEx.EqualTolerance(InverseUsSurveyFeetInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseUsSurveyFoot), InverseUsSurveyFeetTolerance);
            AssertEx.EqualTolerance(InverseYardsInOneInverseMeter, inversemeter.As(ReciprocalLengthUnit.InverseYard), InverseYardsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ReciprocalLength.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
            var expectedValue = quantity.As(ReciprocalLength.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
            var expectedUnit = ReciprocalLength.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ReciprocalLength quantityToConvert = quantity;

                ReciprocalLength convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ReciprocalLengthUnit> quantityToConvert = quantity;

                IQuantity<ReciprocalLengthUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ReciprocalLengthUnit> quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ReciprocalLengthUnit> quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ReciprocalLength(value: 1, unit: ReciprocalLength.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = ReciprocalLength.Parse("1 cm⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseCentimeters, InverseCentimetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseCentimeters, InverseCentimetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 ft⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseFeet, InverseFeetTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseFeet, InverseFeetTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 in⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseInches, InverseInchesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseInches, InverseInchesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 m⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMeters, InverseMetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMeters, InverseMetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 µin⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMicroinches, InverseMicroinchesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMicroinch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/µin", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMicroinches, InverseMicroinchesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMicroinch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 mil⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMils, InverseMilsTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMil, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/mil", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMils, InverseMilsTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMil, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 mi⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMiles, InverseMilesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/mi", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMiles, InverseMilesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMile, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 mm⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMillimeters, InverseMillimetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseMillimeters, InverseMillimetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 ftUS⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseUsSurveyFeet, InverseUsSurveyFeetTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseUsSurveyFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/ftUS", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseUsSurveyFeet, InverseUsSurveyFeetTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseUsSurveyFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 yd⁻¹", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseYards, InverseYardsTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseYard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ReciprocalLength.Parse("1 1/yd", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.InverseYards, InverseYardsTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseYard, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(ReciprocalLength.TryParse("1 cm⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseCentimeters, InverseCentimetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseCentimeter, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseCentimeters, InverseCentimetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseCentimeter, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 ft⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseFeet, InverseFeetTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseFoot, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseFeet, InverseFeetTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseFoot, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 in⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseInches, InverseInchesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseInch, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseInches, InverseInchesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseInch, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 m⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMeters, InverseMetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMeter, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMeters, InverseMetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMeter, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 µin⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMicroinches, InverseMicroinchesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMicroinch, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/µin", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMicroinches, InverseMicroinchesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMicroinch, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 mil⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMils, InverseMilsTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMil, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/mil", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMils, InverseMilsTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMil, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 mi⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMiles, InverseMilesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMile, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/mi", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMiles, InverseMilesTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMile, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 mm⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMillimeters, InverseMillimetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMillimeter, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseMillimeters, InverseMillimetersTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseMillimeter, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 ftUS⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseUsSurveyFeet, InverseUsSurveyFeetTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseUsSurveyFoot, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/ftUS", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseUsSurveyFeet, InverseUsSurveyFeetTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseUsSurveyFoot, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 yd⁻¹", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseYards, InverseYardsTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseYard, parsed.Unit);
            }

            {
                Assert.True(ReciprocalLength.TryParse("1 1/yd", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.InverseYards, InverseYardsTolerance);
                Assert.Equal(ReciprocalLengthUnit.InverseYard, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("cm⁻¹", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("1/cm", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("ft⁻¹", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("1/ft", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("in⁻¹", ReciprocalLengthUnit.InverseInch)]
        [InlineData("1/in", ReciprocalLengthUnit.InverseInch)]
        [InlineData("m⁻¹", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("1/m", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("µin⁻¹", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("1/µin", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("mil⁻¹", ReciprocalLengthUnit.InverseMil)]
        [InlineData("1/mil", ReciprocalLengthUnit.InverseMil)]
        [InlineData("mi⁻¹", ReciprocalLengthUnit.InverseMile)]
        [InlineData("1/mi", ReciprocalLengthUnit.InverseMile)]
        [InlineData("mm⁻¹", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("1/mm", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("ftUS⁻¹", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("1/ftUS", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("yd⁻¹", ReciprocalLengthUnit.InverseYard)]
        [InlineData("1/yd", ReciprocalLengthUnit.InverseYard)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ReciprocalLengthUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ReciprocalLengthUnit parsedUnit = ReciprocalLength.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cm⁻¹", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("1/cm", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("ft⁻¹", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("1/ft", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("in⁻¹", ReciprocalLengthUnit.InverseInch)]
        [InlineData("1/in", ReciprocalLengthUnit.InverseInch)]
        [InlineData("m⁻¹", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("1/m", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("µin⁻¹", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("1/µin", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("mil⁻¹", ReciprocalLengthUnit.InverseMil)]
        [InlineData("1/mil", ReciprocalLengthUnit.InverseMil)]
        [InlineData("mi⁻¹", ReciprocalLengthUnit.InverseMile)]
        [InlineData("1/mi", ReciprocalLengthUnit.InverseMile)]
        [InlineData("mm⁻¹", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("1/mm", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("ftUS⁻¹", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("1/ftUS", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("yd⁻¹", ReciprocalLengthUnit.InverseYard)]
        [InlineData("1/yd", ReciprocalLengthUnit.InverseYard)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ReciprocalLengthUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ReciprocalLengthUnit parsedUnit = ReciprocalLength.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm⁻¹", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("en-US", "1/cm", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("en-US", "ft⁻¹", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("en-US", "1/ft", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("en-US", "in⁻¹", ReciprocalLengthUnit.InverseInch)]
        [InlineData("en-US", "1/in", ReciprocalLengthUnit.InverseInch)]
        [InlineData("en-US", "m⁻¹", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("en-US", "1/m", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("en-US", "µin⁻¹", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("en-US", "1/µin", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("en-US", "mil⁻¹", ReciprocalLengthUnit.InverseMil)]
        [InlineData("en-US", "1/mil", ReciprocalLengthUnit.InverseMil)]
        [InlineData("en-US", "mi⁻¹", ReciprocalLengthUnit.InverseMile)]
        [InlineData("en-US", "1/mi", ReciprocalLengthUnit.InverseMile)]
        [InlineData("en-US", "mm⁻¹", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("en-US", "1/mm", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("en-US", "ftUS⁻¹", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("en-US", "1/ftUS", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("en-US", "yd⁻¹", ReciprocalLengthUnit.InverseYard)]
        [InlineData("en-US", "1/yd", ReciprocalLengthUnit.InverseYard)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ReciprocalLengthUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ReciprocalLengthUnit parsedUnit = ReciprocalLength.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm⁻¹", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("en-US", "1/cm", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("en-US", "ft⁻¹", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("en-US", "1/ft", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("en-US", "in⁻¹", ReciprocalLengthUnit.InverseInch)]
        [InlineData("en-US", "1/in", ReciprocalLengthUnit.InverseInch)]
        [InlineData("en-US", "m⁻¹", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("en-US", "1/m", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("en-US", "µin⁻¹", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("en-US", "1/µin", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("en-US", "mil⁻¹", ReciprocalLengthUnit.InverseMil)]
        [InlineData("en-US", "1/mil", ReciprocalLengthUnit.InverseMil)]
        [InlineData("en-US", "mi⁻¹", ReciprocalLengthUnit.InverseMile)]
        [InlineData("en-US", "1/mi", ReciprocalLengthUnit.InverseMile)]
        [InlineData("en-US", "mm⁻¹", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("en-US", "1/mm", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("en-US", "ftUS⁻¹", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("en-US", "1/ftUS", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("en-US", "yd⁻¹", ReciprocalLengthUnit.InverseYard)]
        [InlineData("en-US", "1/yd", ReciprocalLengthUnit.InverseYard)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ReciprocalLengthUnit expectedUnit)
        {
            ReciprocalLengthUnit parsedUnit = ReciprocalLength.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cm⁻¹", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("1/cm", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("ft⁻¹", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("1/ft", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("in⁻¹", ReciprocalLengthUnit.InverseInch)]
        [InlineData("1/in", ReciprocalLengthUnit.InverseInch)]
        [InlineData("m⁻¹", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("1/m", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("µin⁻¹", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("1/µin", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("mil⁻¹", ReciprocalLengthUnit.InverseMil)]
        [InlineData("1/mil", ReciprocalLengthUnit.InverseMil)]
        [InlineData("mi⁻¹", ReciprocalLengthUnit.InverseMile)]
        [InlineData("1/mi", ReciprocalLengthUnit.InverseMile)]
        [InlineData("mm⁻¹", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("1/mm", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("ftUS⁻¹", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("1/ftUS", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("yd⁻¹", ReciprocalLengthUnit.InverseYard)]
        [InlineData("1/yd", ReciprocalLengthUnit.InverseYard)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ReciprocalLengthUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ReciprocalLength.TryParseUnit(abbreviation, out ReciprocalLengthUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cm⁻¹", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("1/cm", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("ft⁻¹", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("1/ft", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("in⁻¹", ReciprocalLengthUnit.InverseInch)]
        [InlineData("1/in", ReciprocalLengthUnit.InverseInch)]
        [InlineData("m⁻¹", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("1/m", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("µin⁻¹", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("1/µin", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("mil⁻¹", ReciprocalLengthUnit.InverseMil)]
        [InlineData("1/mil", ReciprocalLengthUnit.InverseMil)]
        [InlineData("mi⁻¹", ReciprocalLengthUnit.InverseMile)]
        [InlineData("1/mi", ReciprocalLengthUnit.InverseMile)]
        [InlineData("mm⁻¹", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("1/mm", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("ftUS⁻¹", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("1/ftUS", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("yd⁻¹", ReciprocalLengthUnit.InverseYard)]
        [InlineData("1/yd", ReciprocalLengthUnit.InverseYard)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ReciprocalLengthUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ReciprocalLength.TryParseUnit(abbreviation, out ReciprocalLengthUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm⁻¹", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("en-US", "1/cm", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("en-US", "ft⁻¹", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("en-US", "1/ft", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("en-US", "in⁻¹", ReciprocalLengthUnit.InverseInch)]
        [InlineData("en-US", "1/in", ReciprocalLengthUnit.InverseInch)]
        [InlineData("en-US", "m⁻¹", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("en-US", "1/m", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("en-US", "µin⁻¹", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("en-US", "1/µin", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("en-US", "mil⁻¹", ReciprocalLengthUnit.InverseMil)]
        [InlineData("en-US", "1/mil", ReciprocalLengthUnit.InverseMil)]
        [InlineData("en-US", "mi⁻¹", ReciprocalLengthUnit.InverseMile)]
        [InlineData("en-US", "1/mi", ReciprocalLengthUnit.InverseMile)]
        [InlineData("en-US", "mm⁻¹", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("en-US", "1/mm", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("en-US", "ftUS⁻¹", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("en-US", "1/ftUS", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("en-US", "yd⁻¹", ReciprocalLengthUnit.InverseYard)]
        [InlineData("en-US", "1/yd", ReciprocalLengthUnit.InverseYard)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ReciprocalLengthUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ReciprocalLength.TryParseUnit(abbreviation, out ReciprocalLengthUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm⁻¹", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("en-US", "1/cm", ReciprocalLengthUnit.InverseCentimeter)]
        [InlineData("en-US", "ft⁻¹", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("en-US", "1/ft", ReciprocalLengthUnit.InverseFoot)]
        [InlineData("en-US", "in⁻¹", ReciprocalLengthUnit.InverseInch)]
        [InlineData("en-US", "1/in", ReciprocalLengthUnit.InverseInch)]
        [InlineData("en-US", "m⁻¹", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("en-US", "1/m", ReciprocalLengthUnit.InverseMeter)]
        [InlineData("en-US", "µin⁻¹", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("en-US", "1/µin", ReciprocalLengthUnit.InverseMicroinch)]
        [InlineData("en-US", "mil⁻¹", ReciprocalLengthUnit.InverseMil)]
        [InlineData("en-US", "1/mil", ReciprocalLengthUnit.InverseMil)]
        [InlineData("en-US", "mi⁻¹", ReciprocalLengthUnit.InverseMile)]
        [InlineData("en-US", "1/mi", ReciprocalLengthUnit.InverseMile)]
        [InlineData("en-US", "mm⁻¹", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("en-US", "1/mm", ReciprocalLengthUnit.InverseMillimeter)]
        [InlineData("en-US", "ftUS⁻¹", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("en-US", "1/ftUS", ReciprocalLengthUnit.InverseUsSurveyFoot)]
        [InlineData("en-US", "yd⁻¹", ReciprocalLengthUnit.InverseYard)]
        [InlineData("en-US", "1/yd", ReciprocalLengthUnit.InverseYard)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ReciprocalLengthUnit expectedUnit)
        {
            Assert.True(ReciprocalLength.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ReciprocalLengthUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ReciprocalLengthUnit unit)
        {
            var inBaseUnits = ReciprocalLength.From(1.0, ReciprocalLength.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ReciprocalLengthUnit unit)
        {
            var quantity = ReciprocalLength.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ReciprocalLengthUnit unit)
        {
            Assert.All(ReciprocalLength.Units.Where(u => u != ReciprocalLength.BaseUnit), fromUnit =>
            {
                var quantity = ReciprocalLength.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ReciprocalLengthUnit unit)
        {
            var quantity = default(ReciprocalLength);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ReciprocalLengthUnit unit)
        {
            var quantity = ReciprocalLength.From(3, ReciprocalLength.BaseUnit);
            ReciprocalLength expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ReciprocalLengthUnit> quantityToConvert = quantity;
                IQuantity<ReciprocalLengthUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ReciprocalLength inversemeter = ReciprocalLength.FromInverseMeters(1);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseCentimeters(inversemeter.InverseCentimeters).InverseMeters, InverseCentimetersTolerance);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseFeet(inversemeter.InverseFeet).InverseMeters, InverseFeetTolerance);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseInches(inversemeter.InverseInches).InverseMeters, InverseInchesTolerance);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseMeters(inversemeter.InverseMeters).InverseMeters, InverseMetersTolerance);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseMicroinches(inversemeter.InverseMicroinches).InverseMeters, InverseMicroinchesTolerance);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseMils(inversemeter.InverseMils).InverseMeters, InverseMilsTolerance);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseMiles(inversemeter.InverseMiles).InverseMeters, InverseMilesTolerance);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseMillimeters(inversemeter.InverseMillimeters).InverseMeters, InverseMillimetersTolerance);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseUsSurveyFeet(inversemeter.InverseUsSurveyFeet).InverseMeters, InverseUsSurveyFeetTolerance);
            AssertEx.EqualTolerance(1, ReciprocalLength.FromInverseYards(inversemeter.InverseYards).InverseMeters, InverseYardsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ReciprocalLength v = ReciprocalLength.FromInverseMeters(1);
            AssertEx.EqualTolerance(-1, -v.InverseMeters, InverseMetersTolerance);
            AssertEx.EqualTolerance(2, (ReciprocalLength.FromInverseMeters(3)-v).InverseMeters, InverseMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).InverseMeters, InverseMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).InverseMeters, InverseMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).InverseMeters, InverseMetersTolerance);
            AssertEx.EqualTolerance(2, (ReciprocalLength.FromInverseMeters(10)/5).InverseMeters, InverseMetersTolerance);
            AssertEx.EqualTolerance(2, ReciprocalLength.FromInverseMeters(10)/ReciprocalLength.FromInverseMeters(5), InverseMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ReciprocalLength oneInverseMeter = ReciprocalLength.FromInverseMeters(1);
            ReciprocalLength twoInverseMeters = ReciprocalLength.FromInverseMeters(2);

            Assert.True(oneInverseMeter < twoInverseMeters);
            Assert.True(oneInverseMeter <= twoInverseMeters);
            Assert.True(twoInverseMeters > oneInverseMeter);
            Assert.True(twoInverseMeters >= oneInverseMeter);

            Assert.False(oneInverseMeter > twoInverseMeters);
            Assert.False(oneInverseMeter >= twoInverseMeters);
            Assert.False(twoInverseMeters < oneInverseMeter);
            Assert.False(twoInverseMeters <= oneInverseMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ReciprocalLength inversemeter = ReciprocalLength.FromInverseMeters(1);
            Assert.Equal(0, inversemeter.CompareTo(inversemeter));
            Assert.True(inversemeter.CompareTo(ReciprocalLength.Zero) > 0);
            Assert.True(ReciprocalLength.Zero.CompareTo(inversemeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ReciprocalLength inversemeter = ReciprocalLength.FromInverseMeters(1);
            Assert.Throws<ArgumentException>(() => inversemeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ReciprocalLength inversemeter = ReciprocalLength.FromInverseMeters(1);
            Assert.Throws<ArgumentNullException>(() => inversemeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ReciprocalLengthUnit.InverseMeter, 1, ReciprocalLengthUnit.InverseMeter, true)]  // Same value and unit.
        [InlineData(1, ReciprocalLengthUnit.InverseMeter, 2, ReciprocalLengthUnit.InverseMeter, false)] // Different value.
        [InlineData(2, ReciprocalLengthUnit.InverseMeter, 1, ReciprocalLengthUnit.InverseCentimeter, false)] // Different value and unit.
        [InlineData(1, ReciprocalLengthUnit.InverseMeter, 1, ReciprocalLengthUnit.InverseCentimeter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ReciprocalLengthUnit unitA, double valueB, ReciprocalLengthUnit unitB, bool expectEqual)
        {
            var a = new ReciprocalLength(valueA, unitA);
            var b = new ReciprocalLength(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ReciprocalLength.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = ReciprocalLength.FromInverseMeters(1);
            Assert.True(v.Equals(ReciprocalLength.FromInverseMeters(1), InverseMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ReciprocalLength.Zero, InverseMetersTolerance, ComparisonType.Relative));
            Assert.True(ReciprocalLength.FromInverseMeters(100).Equals(ReciprocalLength.FromInverseMeters(120), 0.3, ComparisonType.Relative));
            Assert.False(ReciprocalLength.FromInverseMeters(100).Equals(ReciprocalLength.FromInverseMeters(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = ReciprocalLength.FromInverseMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(ReciprocalLength.FromInverseMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ReciprocalLength inversemeter = ReciprocalLength.FromInverseMeters(1);
            Assert.False(inversemeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ReciprocalLength inversemeter = ReciprocalLength.FromInverseMeters(1);
            Assert.False(inversemeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<ReciprocalLengthUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ReciprocalLength.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cm⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseCentimeter).ToString());
            Assert.Equal("1 ft⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseFoot).ToString());
            Assert.Equal("1 in⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseInch).ToString());
            Assert.Equal("1 m⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMeter).ToString());
            Assert.Equal("1 µin⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMicroinch).ToString());
            Assert.Equal("1 mil⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMil).ToString());
            Assert.Equal("1 mi⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMile).ToString());
            Assert.Equal("1 mm⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMillimeter).ToString());
            Assert.Equal("1 ftUS⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseUsSurveyFoot).ToString());
            Assert.Equal("1 yd⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseYard).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cm⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseCentimeter).ToString(swedishCulture));
            Assert.Equal("1 ft⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseFoot).ToString(swedishCulture));
            Assert.Equal("1 in⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseInch).ToString(swedishCulture));
            Assert.Equal("1 m⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMeter).ToString(swedishCulture));
            Assert.Equal("1 µin⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMicroinch).ToString(swedishCulture));
            Assert.Equal("1 mil⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMil).ToString(swedishCulture));
            Assert.Equal("1 mi⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMile).ToString(swedishCulture));
            Assert.Equal("1 mm⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseMillimeter).ToString(swedishCulture));
            Assert.Equal("1 ftUS⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseUsSurveyFoot).ToString(swedishCulture));
            Assert.Equal("1 yd⁻¹", new ReciprocalLength(1, ReciprocalLengthUnit.InverseYard).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 m⁻¹", new ReciprocalLength(0.123456, ReciprocalLengthUnit.InverseMeter).ToString("s1"));
            Assert.Equal("0.12 m⁻¹", new ReciprocalLength(0.123456, ReciprocalLengthUnit.InverseMeter).ToString("s2"));
            Assert.Equal("0.123 m⁻¹", new ReciprocalLength(0.123456, ReciprocalLengthUnit.InverseMeter).ToString("s3"));
            Assert.Equal("0.1235 m⁻¹", new ReciprocalLength(0.123456, ReciprocalLengthUnit.InverseMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m⁻¹", new ReciprocalLength(0.123456, ReciprocalLengthUnit.InverseMeter).ToString("s1", culture));
            Assert.Equal("0.12 m⁻¹", new ReciprocalLength(0.123456, ReciprocalLengthUnit.InverseMeter).ToString("s2", culture));
            Assert.Equal("0.123 m⁻¹", new ReciprocalLength(0.123456, ReciprocalLengthUnit.InverseMeter).ToString("s3", culture));
            Assert.Equal("0.1235 m⁻¹", new ReciprocalLength(0.123456, ReciprocalLengthUnit.InverseMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ReciprocalLength.FromInverseMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ReciprocalLength.FromInverseMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ReciprocalLength.FromInverseMeters(1.0);
            Assert.Equal(new {ReciprocalLength.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ReciprocalLength.FromInverseMeters(value);
            Assert.Equal(ReciprocalLength.FromInverseMeters(-value), -quantity);
        }
    }
}
