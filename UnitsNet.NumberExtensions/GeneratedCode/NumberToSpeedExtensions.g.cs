//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToSpeed
{
    /// <summary>
    /// A number to Speed Extensions
    /// </summary>
    public static class NumberToSpeedExtensions
    {
        /// <inheritdoc cref="Speed.FromCentimetersPerHour(QuantityValue)" />
        public static Speed CentimetersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromCentimetersPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromCentimetersPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromCentimetersPerMinute(QuantityValue)" />
        public static Speed CentimetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromCentimetersPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromCentimetersPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromCentimetersPerSecond(QuantityValue)" />
        public static Speed CentimetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromCentimetersPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromCentimetersPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromDecimetersPerMinute(QuantityValue)" />
        public static Speed DecimetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromDecimetersPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromDecimetersPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromDecimetersPerSecond(QuantityValue)" />
        public static Speed DecimetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromDecimetersPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromDecimetersPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromFeetPerHour(QuantityValue)" />
        public static Speed FeetPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromFeetPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromFeetPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromFeetPerMinute(QuantityValue)" />
        public static Speed FeetPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromFeetPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromFeetPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromFeetPerSecond(QuantityValue)" />
        public static Speed FeetPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromFeetPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromFeetPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromInchesPerHour(QuantityValue)" />
        public static Speed InchesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromInchesPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromInchesPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromInchesPerMinute(QuantityValue)" />
        public static Speed InchesPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromInchesPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromInchesPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromInchesPerSecond(QuantityValue)" />
        public static Speed InchesPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromInchesPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromInchesPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromKilometersPerHour(QuantityValue)" />
        public static Speed KilometersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromKilometersPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromKilometersPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromKilometersPerMinute(QuantityValue)" />
        public static Speed KilometersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromKilometersPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromKilometersPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromKilometersPerSecond(QuantityValue)" />
        public static Speed KilometersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromKilometersPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromKilometersPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromKnots(QuantityValue)" />
        public static Speed Knots<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromKnots(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromKnots(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMach(QuantityValue)" />
        public static Speed Mach<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMach(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMach(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMetersPerHour(QuantityValue)" />
        public static Speed MetersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMetersPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMetersPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMetersPerMinute(QuantityValue)" />
        public static Speed MetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMetersPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMetersPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMetersPerSecond(QuantityValue)" />
        public static Speed MetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMetersPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMetersPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMicrometersPerMinute(QuantityValue)" />
        public static Speed MicrometersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMicrometersPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMicrometersPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMicrometersPerSecond(QuantityValue)" />
        public static Speed MicrometersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMicrometersPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMicrometersPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMilesPerHour(QuantityValue)" />
        public static Speed MilesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMilesPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMilesPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMillimetersPerHour(QuantityValue)" />
        public static Speed MillimetersPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMillimetersPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMillimetersPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMillimetersPerMinute(QuantityValue)" />
        public static Speed MillimetersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMillimetersPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMillimetersPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromMillimetersPerSecond(QuantityValue)" />
        public static Speed MillimetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromMillimetersPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromMillimetersPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromNanometersPerMinute(QuantityValue)" />
        public static Speed NanometersPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromNanometersPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromNanometersPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromNanometersPerSecond(QuantityValue)" />
        public static Speed NanometersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromNanometersPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromNanometersPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerHour(QuantityValue)" />
        public static Speed UsSurveyFeetPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromUsSurveyFeetPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromUsSurveyFeetPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerMinute(QuantityValue)" />
        public static Speed UsSurveyFeetPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromUsSurveyFeetPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromUsSurveyFeetPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromUsSurveyFeetPerSecond(QuantityValue)" />
        public static Speed UsSurveyFeetPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromUsSurveyFeetPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromUsSurveyFeetPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromYardsPerHour(QuantityValue)" />
        public static Speed YardsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromYardsPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromYardsPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromYardsPerMinute(QuantityValue)" />
        public static Speed YardsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromYardsPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromYardsPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Speed.FromYardsPerSecond(QuantityValue)" />
        public static Speed YardsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Speed.FromYardsPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Speed.FromYardsPerSecond(value.ToQuantityValue());
#endif

    }
}
