//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricCharge.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricChargeTestsBase : QuantityTestsBase
    {
        protected abstract double AmpereHoursInOneCoulomb { get; }
        protected abstract double CoulombsInOneCoulomb { get; }
        protected abstract double KiloampereHoursInOneCoulomb { get; }
        protected abstract double KilocoulombsInOneCoulomb { get; }
        protected abstract double MegaampereHoursInOneCoulomb { get; }
        protected abstract double MegacoulombsInOneCoulomb { get; }
        protected abstract double MicrocoulombsInOneCoulomb { get; }
        protected abstract double MilliampereHoursInOneCoulomb { get; }
        protected abstract double MillicoulombsInOneCoulomb { get; }
        protected abstract double NanocoulombsInOneCoulomb { get; }
        protected abstract double PicocoulombsInOneCoulomb { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AmpereHoursTolerance { get { return 1e-5; } }
        protected virtual double CoulombsTolerance { get { return 1e-5; } }
        protected virtual double KiloampereHoursTolerance { get { return 1e-5; } }
        protected virtual double KilocoulombsTolerance { get { return 1e-5; } }
        protected virtual double MegaampereHoursTolerance { get { return 1e-5; } }
        protected virtual double MegacoulombsTolerance { get { return 1e-5; } }
        protected virtual double MicrocoulombsTolerance { get { return 1e-5; } }
        protected virtual double MilliampereHoursTolerance { get { return 1e-5; } }
        protected virtual double MillicoulombsTolerance { get { return 1e-5; } }
        protected virtual double NanocoulombsTolerance { get { return 1e-5; } }
        protected virtual double PicocoulombsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricChargeUnit unit)
        {
            return unit switch
            {
                ElectricChargeUnit.AmpereHour => (AmpereHoursInOneCoulomb, AmpereHoursTolerance),
                ElectricChargeUnit.Coulomb => (CoulombsInOneCoulomb, CoulombsTolerance),
                ElectricChargeUnit.KiloampereHour => (KiloampereHoursInOneCoulomb, KiloampereHoursTolerance),
                ElectricChargeUnit.Kilocoulomb => (KilocoulombsInOneCoulomb, KilocoulombsTolerance),
                ElectricChargeUnit.MegaampereHour => (MegaampereHoursInOneCoulomb, MegaampereHoursTolerance),
                ElectricChargeUnit.Megacoulomb => (MegacoulombsInOneCoulomb, MegacoulombsTolerance),
                ElectricChargeUnit.Microcoulomb => (MicrocoulombsInOneCoulomb, MicrocoulombsTolerance),
                ElectricChargeUnit.MilliampereHour => (MilliampereHoursInOneCoulomb, MilliampereHoursTolerance),
                ElectricChargeUnit.Millicoulomb => (MillicoulombsInOneCoulomb, MillicoulombsTolerance),
                ElectricChargeUnit.Nanocoulomb => (NanocoulombsInOneCoulomb, NanocoulombsTolerance),
                ElectricChargeUnit.Picocoulomb => (PicocoulombsInOneCoulomb, PicocoulombsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricChargeUnit.AmpereHour },
            new object[] { ElectricChargeUnit.Coulomb },
            new object[] { ElectricChargeUnit.KiloampereHour },
            new object[] { ElectricChargeUnit.Kilocoulomb },
            new object[] { ElectricChargeUnit.MegaampereHour },
            new object[] { ElectricChargeUnit.Megacoulomb },
            new object[] { ElectricChargeUnit.Microcoulomb },
            new object[] { ElectricChargeUnit.MilliampereHour },
            new object[] { ElectricChargeUnit.Millicoulomb },
            new object[] { ElectricChargeUnit.Nanocoulomb },
            new object[] { ElectricChargeUnit.Picocoulomb },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricCharge();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricChargeUnit.Coulomb, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ElectricCharge(double.PositiveInfinity, ElectricChargeUnit.Coulomb));
            var exception2 = Record.Exception(() => new ElectricCharge(double.NegativeInfinity, ElectricChargeUnit.Coulomb));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ElectricCharge(double.NaN, ElectricChargeUnit.Coulomb));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricCharge(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ElectricCharge(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ElectricCharge(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ElectricCharge_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ElectricChargeUnit[] unitsOrderedByName = EnumHelper.GetValues<ElectricChargeUnit>().OrderBy(x => x.ToString(), StringComparer.Ordinal).ToArray();
            var quantity = new ElectricCharge(1, ElectricChargeUnit.Coulomb);

            QuantityInfo<ElectricCharge, ElectricChargeUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("ElectricCharge", quantityInfo.Name);
            Assert.Equal(ElectricCharge.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricCharge.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(ElectricCharge.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ElectricChargeUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void CoulombToElectricChargeUnits()
        {
            ElectricCharge coulomb = ElectricCharge.FromCoulombs(1);
            AssertEx.EqualTolerance(AmpereHoursInOneCoulomb, coulomb.AmpereHours, AmpereHoursTolerance);
            AssertEx.EqualTolerance(CoulombsInOneCoulomb, coulomb.Coulombs, CoulombsTolerance);
            AssertEx.EqualTolerance(KiloampereHoursInOneCoulomb, coulomb.KiloampereHours, KiloampereHoursTolerance);
            AssertEx.EqualTolerance(KilocoulombsInOneCoulomb, coulomb.Kilocoulombs, KilocoulombsTolerance);
            AssertEx.EqualTolerance(MegaampereHoursInOneCoulomb, coulomb.MegaampereHours, MegaampereHoursTolerance);
            AssertEx.EqualTolerance(MegacoulombsInOneCoulomb, coulomb.Megacoulombs, MegacoulombsTolerance);
            AssertEx.EqualTolerance(MicrocoulombsInOneCoulomb, coulomb.Microcoulombs, MicrocoulombsTolerance);
            AssertEx.EqualTolerance(MilliampereHoursInOneCoulomb, coulomb.MilliampereHours, MilliampereHoursTolerance);
            AssertEx.EqualTolerance(MillicoulombsInOneCoulomb, coulomb.Millicoulombs, MillicoulombsTolerance);
            AssertEx.EqualTolerance(NanocoulombsInOneCoulomb, coulomb.Nanocoulombs, NanocoulombsTolerance);
            AssertEx.EqualTolerance(PicocoulombsInOneCoulomb, coulomb.Picocoulombs, PicocoulombsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<ElectricChargeUnit>(), unit =>
            {
                var quantity = ElectricCharge.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromCoulombs_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ElectricCharge.FromCoulombs(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ElectricCharge.FromCoulombs(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromCoulombs_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ElectricCharge.FromCoulombs(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var coulomb = ElectricCharge.FromCoulombs(1);
            AssertEx.EqualTolerance(AmpereHoursInOneCoulomb, coulomb.As(ElectricChargeUnit.AmpereHour), AmpereHoursTolerance);
            AssertEx.EqualTolerance(CoulombsInOneCoulomb, coulomb.As(ElectricChargeUnit.Coulomb), CoulombsTolerance);
            AssertEx.EqualTolerance(KiloampereHoursInOneCoulomb, coulomb.As(ElectricChargeUnit.KiloampereHour), KiloampereHoursTolerance);
            AssertEx.EqualTolerance(KilocoulombsInOneCoulomb, coulomb.As(ElectricChargeUnit.Kilocoulomb), KilocoulombsTolerance);
            AssertEx.EqualTolerance(MegaampereHoursInOneCoulomb, coulomb.As(ElectricChargeUnit.MegaampereHour), MegaampereHoursTolerance);
            AssertEx.EqualTolerance(MegacoulombsInOneCoulomb, coulomb.As(ElectricChargeUnit.Megacoulomb), MegacoulombsTolerance);
            AssertEx.EqualTolerance(MicrocoulombsInOneCoulomb, coulomb.As(ElectricChargeUnit.Microcoulomb), MicrocoulombsTolerance);
            AssertEx.EqualTolerance(MilliampereHoursInOneCoulomb, coulomb.As(ElectricChargeUnit.MilliampereHour), MilliampereHoursTolerance);
            AssertEx.EqualTolerance(MillicoulombsInOneCoulomb, coulomb.As(ElectricChargeUnit.Millicoulomb), MillicoulombsTolerance);
            AssertEx.EqualTolerance(NanocoulombsInOneCoulomb, coulomb.As(ElectricChargeUnit.Nanocoulomb), NanocoulombsTolerance);
            AssertEx.EqualTolerance(PicocoulombsInOneCoulomb, coulomb.As(ElectricChargeUnit.Picocoulomb), PicocoulombsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ElectricCharge.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
            var expectedValue = quantity.As(ElectricCharge.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
            var expectedUnit = ElectricCharge.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ElectricCharge quantityToConvert = quantity;

                ElectricCharge convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ElectricChargeUnit> quantityToConvert = quantity;

                IQuantity<ElectricChargeUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ElectricChargeUnit> quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ElectricChargeUnit> quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricCharge(value: 1, unit: ElectricCharge.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 A-h", ElectricChargeUnit.AmpereHour, 4.2)]
        [InlineData("en-US", "4.2 Ah", ElectricChargeUnit.AmpereHour, 4.2)]
        [InlineData("en-US", "4.2 C", ElectricChargeUnit.Coulomb, 4.2)]
        [InlineData("en-US", "4.2 kA-h", ElectricChargeUnit.KiloampereHour, 4.2)]
        [InlineData("en-US", "4.2 kAh", ElectricChargeUnit.KiloampereHour, 4.2)]
        [InlineData("en-US", "4.2 kC", ElectricChargeUnit.Kilocoulomb, 4.2)]
        [InlineData("en-US", "4.2 MA-h", ElectricChargeUnit.MegaampereHour, 4.2)]
        [InlineData("en-US", "4.2 MAh", ElectricChargeUnit.MegaampereHour, 4.2)]
        [InlineData("en-US", "4.2 MC", ElectricChargeUnit.Megacoulomb, 4.2)]
        [InlineData("en-US", "4.2 µC", ElectricChargeUnit.Microcoulomb, 4.2)]
        [InlineData("en-US", "4.2 mA-h", ElectricChargeUnit.MilliampereHour, 4.2)]
        [InlineData("en-US", "4.2 mAh", ElectricChargeUnit.MilliampereHour, 4.2)]
        [InlineData("en-US", "4.2 mC", ElectricChargeUnit.Millicoulomb, 4.2)]
        [InlineData("en-US", "4.2 nC", ElectricChargeUnit.Nanocoulomb, 4.2)]
        [InlineData("en-US", "4.2 pC", ElectricChargeUnit.Picocoulomb, 4.2)]
        public void Parse(string culture, string quantityString, ElectricChargeUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = ElectricCharge.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 A-h", ElectricChargeUnit.AmpereHour, 4.2)]
        [InlineData("en-US", "4.2 Ah", ElectricChargeUnit.AmpereHour, 4.2)]
        [InlineData("en-US", "4.2 C", ElectricChargeUnit.Coulomb, 4.2)]
        [InlineData("en-US", "4.2 kA-h", ElectricChargeUnit.KiloampereHour, 4.2)]
        [InlineData("en-US", "4.2 kAh", ElectricChargeUnit.KiloampereHour, 4.2)]
        [InlineData("en-US", "4.2 kC", ElectricChargeUnit.Kilocoulomb, 4.2)]
        [InlineData("en-US", "4.2 MA-h", ElectricChargeUnit.MegaampereHour, 4.2)]
        [InlineData("en-US", "4.2 MAh", ElectricChargeUnit.MegaampereHour, 4.2)]
        [InlineData("en-US", "4.2 MC", ElectricChargeUnit.Megacoulomb, 4.2)]
        [InlineData("en-US", "4.2 µC", ElectricChargeUnit.Microcoulomb, 4.2)]
        [InlineData("en-US", "4.2 mA-h", ElectricChargeUnit.MilliampereHour, 4.2)]
        [InlineData("en-US", "4.2 mAh", ElectricChargeUnit.MilliampereHour, 4.2)]
        [InlineData("en-US", "4.2 mC", ElectricChargeUnit.Millicoulomb, 4.2)]
        [InlineData("en-US", "4.2 nC", ElectricChargeUnit.Nanocoulomb, 4.2)]
        [InlineData("en-US", "4.2 pC", ElectricChargeUnit.Picocoulomb, 4.2)]
        public void TryParse(string culture, string quantityString, ElectricChargeUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricCharge.TryParse(quantityString, out ElectricCharge parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("A-h", ElectricChargeUnit.AmpereHour)]
        [InlineData("Ah", ElectricChargeUnit.AmpereHour)]
        [InlineData("C", ElectricChargeUnit.Coulomb)]
        [InlineData("kA-h", ElectricChargeUnit.KiloampereHour)]
        [InlineData("kAh", ElectricChargeUnit.KiloampereHour)]
        [InlineData("kC", ElectricChargeUnit.Kilocoulomb)]
        [InlineData("MA-h", ElectricChargeUnit.MegaampereHour)]
        [InlineData("MAh", ElectricChargeUnit.MegaampereHour)]
        [InlineData("MC", ElectricChargeUnit.Megacoulomb)]
        [InlineData("µC", ElectricChargeUnit.Microcoulomb)]
        [InlineData("mA-h", ElectricChargeUnit.MilliampereHour)]
        [InlineData("mAh", ElectricChargeUnit.MilliampereHour)]
        [InlineData("mC", ElectricChargeUnit.Millicoulomb)]
        [InlineData("nC", ElectricChargeUnit.Nanocoulomb)]
        [InlineData("pC", ElectricChargeUnit.Picocoulomb)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricChargeUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ElectricChargeUnit parsedUnit = ElectricCharge.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("A-h", ElectricChargeUnit.AmpereHour)]
        [InlineData("Ah", ElectricChargeUnit.AmpereHour)]
        [InlineData("C", ElectricChargeUnit.Coulomb)]
        [InlineData("kA-h", ElectricChargeUnit.KiloampereHour)]
        [InlineData("kAh", ElectricChargeUnit.KiloampereHour)]
        [InlineData("kC", ElectricChargeUnit.Kilocoulomb)]
        [InlineData("MA-h", ElectricChargeUnit.MegaampereHour)]
        [InlineData("MAh", ElectricChargeUnit.MegaampereHour)]
        [InlineData("MC", ElectricChargeUnit.Megacoulomb)]
        [InlineData("µC", ElectricChargeUnit.Microcoulomb)]
        [InlineData("mA-h", ElectricChargeUnit.MilliampereHour)]
        [InlineData("mAh", ElectricChargeUnit.MilliampereHour)]
        [InlineData("mC", ElectricChargeUnit.Millicoulomb)]
        [InlineData("nC", ElectricChargeUnit.Nanocoulomb)]
        [InlineData("pC", ElectricChargeUnit.Picocoulomb)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricChargeUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ElectricChargeUnit parsedUnit = ElectricCharge.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "A-h", ElectricChargeUnit.AmpereHour)]
        [InlineData("en-US", "Ah", ElectricChargeUnit.AmpereHour)]
        [InlineData("en-US", "C", ElectricChargeUnit.Coulomb)]
        [InlineData("en-US", "kA-h", ElectricChargeUnit.KiloampereHour)]
        [InlineData("en-US", "kAh", ElectricChargeUnit.KiloampereHour)]
        [InlineData("en-US", "kC", ElectricChargeUnit.Kilocoulomb)]
        [InlineData("en-US", "MA-h", ElectricChargeUnit.MegaampereHour)]
        [InlineData("en-US", "MAh", ElectricChargeUnit.MegaampereHour)]
        [InlineData("en-US", "MC", ElectricChargeUnit.Megacoulomb)]
        [InlineData("en-US", "µC", ElectricChargeUnit.Microcoulomb)]
        [InlineData("en-US", "mA-h", ElectricChargeUnit.MilliampereHour)]
        [InlineData("en-US", "mAh", ElectricChargeUnit.MilliampereHour)]
        [InlineData("en-US", "mC", ElectricChargeUnit.Millicoulomb)]
        [InlineData("en-US", "nC", ElectricChargeUnit.Nanocoulomb)]
        [InlineData("en-US", "pC", ElectricChargeUnit.Picocoulomb)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricChargeUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ElectricChargeUnit parsedUnit = ElectricCharge.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "A-h", ElectricChargeUnit.AmpereHour)]
        [InlineData("en-US", "Ah", ElectricChargeUnit.AmpereHour)]
        [InlineData("en-US", "C", ElectricChargeUnit.Coulomb)]
        [InlineData("en-US", "kA-h", ElectricChargeUnit.KiloampereHour)]
        [InlineData("en-US", "kAh", ElectricChargeUnit.KiloampereHour)]
        [InlineData("en-US", "kC", ElectricChargeUnit.Kilocoulomb)]
        [InlineData("en-US", "MA-h", ElectricChargeUnit.MegaampereHour)]
        [InlineData("en-US", "MAh", ElectricChargeUnit.MegaampereHour)]
        [InlineData("en-US", "MC", ElectricChargeUnit.Megacoulomb)]
        [InlineData("en-US", "µC", ElectricChargeUnit.Microcoulomb)]
        [InlineData("en-US", "mA-h", ElectricChargeUnit.MilliampereHour)]
        [InlineData("en-US", "mAh", ElectricChargeUnit.MilliampereHour)]
        [InlineData("en-US", "mC", ElectricChargeUnit.Millicoulomb)]
        [InlineData("en-US", "nC", ElectricChargeUnit.Nanocoulomb)]
        [InlineData("en-US", "pC", ElectricChargeUnit.Picocoulomb)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ElectricChargeUnit expectedUnit)
        {
            ElectricChargeUnit parsedUnit = ElectricCharge.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("A-h", ElectricChargeUnit.AmpereHour)]
        [InlineData("Ah", ElectricChargeUnit.AmpereHour)]
        [InlineData("C", ElectricChargeUnit.Coulomb)]
        [InlineData("kA-h", ElectricChargeUnit.KiloampereHour)]
        [InlineData("kAh", ElectricChargeUnit.KiloampereHour)]
        [InlineData("kC", ElectricChargeUnit.Kilocoulomb)]
        [InlineData("MA-h", ElectricChargeUnit.MegaampereHour)]
        [InlineData("MAh", ElectricChargeUnit.MegaampereHour)]
        [InlineData("MC", ElectricChargeUnit.Megacoulomb)]
        [InlineData("µC", ElectricChargeUnit.Microcoulomb)]
        [InlineData("mA-h", ElectricChargeUnit.MilliampereHour)]
        [InlineData("mAh", ElectricChargeUnit.MilliampereHour)]
        [InlineData("mC", ElectricChargeUnit.Millicoulomb)]
        [InlineData("nC", ElectricChargeUnit.Nanocoulomb)]
        [InlineData("pC", ElectricChargeUnit.Picocoulomb)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricChargeUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ElectricCharge.TryParseUnit(abbreviation, out ElectricChargeUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("A-h", ElectricChargeUnit.AmpereHour)]
        [InlineData("Ah", ElectricChargeUnit.AmpereHour)]
        [InlineData("C", ElectricChargeUnit.Coulomb)]
        [InlineData("kA-h", ElectricChargeUnit.KiloampereHour)]
        [InlineData("kAh", ElectricChargeUnit.KiloampereHour)]
        [InlineData("kC", ElectricChargeUnit.Kilocoulomb)]
        [InlineData("MA-h", ElectricChargeUnit.MegaampereHour)]
        [InlineData("MAh", ElectricChargeUnit.MegaampereHour)]
        [InlineData("MC", ElectricChargeUnit.Megacoulomb)]
        [InlineData("µC", ElectricChargeUnit.Microcoulomb)]
        [InlineData("mA-h", ElectricChargeUnit.MilliampereHour)]
        [InlineData("mAh", ElectricChargeUnit.MilliampereHour)]
        [InlineData("mC", ElectricChargeUnit.Millicoulomb)]
        [InlineData("nC", ElectricChargeUnit.Nanocoulomb)]
        [InlineData("pC", ElectricChargeUnit.Picocoulomb)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricChargeUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ElectricCharge.TryParseUnit(abbreviation, out ElectricChargeUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "A-h", ElectricChargeUnit.AmpereHour)]
        [InlineData("en-US", "Ah", ElectricChargeUnit.AmpereHour)]
        [InlineData("en-US", "C", ElectricChargeUnit.Coulomb)]
        [InlineData("en-US", "kA-h", ElectricChargeUnit.KiloampereHour)]
        [InlineData("en-US", "kAh", ElectricChargeUnit.KiloampereHour)]
        [InlineData("en-US", "kC", ElectricChargeUnit.Kilocoulomb)]
        [InlineData("en-US", "MA-h", ElectricChargeUnit.MegaampereHour)]
        [InlineData("en-US", "MAh", ElectricChargeUnit.MegaampereHour)]
        [InlineData("en-US", "MC", ElectricChargeUnit.Megacoulomb)]
        [InlineData("en-US", "µC", ElectricChargeUnit.Microcoulomb)]
        [InlineData("en-US", "mA-h", ElectricChargeUnit.MilliampereHour)]
        [InlineData("en-US", "mAh", ElectricChargeUnit.MilliampereHour)]
        [InlineData("en-US", "mC", ElectricChargeUnit.Millicoulomb)]
        [InlineData("en-US", "nC", ElectricChargeUnit.Nanocoulomb)]
        [InlineData("en-US", "pC", ElectricChargeUnit.Picocoulomb)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricChargeUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricCharge.TryParseUnit(abbreviation, out ElectricChargeUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "A-h", ElectricChargeUnit.AmpereHour)]
        [InlineData("en-US", "Ah", ElectricChargeUnit.AmpereHour)]
        [InlineData("en-US", "C", ElectricChargeUnit.Coulomb)]
        [InlineData("en-US", "kA-h", ElectricChargeUnit.KiloampereHour)]
        [InlineData("en-US", "kAh", ElectricChargeUnit.KiloampereHour)]
        [InlineData("en-US", "kC", ElectricChargeUnit.Kilocoulomb)]
        [InlineData("en-US", "MA-h", ElectricChargeUnit.MegaampereHour)]
        [InlineData("en-US", "MAh", ElectricChargeUnit.MegaampereHour)]
        [InlineData("en-US", "MC", ElectricChargeUnit.Megacoulomb)]
        [InlineData("en-US", "µC", ElectricChargeUnit.Microcoulomb)]
        [InlineData("en-US", "mA-h", ElectricChargeUnit.MilliampereHour)]
        [InlineData("en-US", "mAh", ElectricChargeUnit.MilliampereHour)]
        [InlineData("en-US", "mC", ElectricChargeUnit.Millicoulomb)]
        [InlineData("en-US", "nC", ElectricChargeUnit.Nanocoulomb)]
        [InlineData("en-US", "pC", ElectricChargeUnit.Picocoulomb)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ElectricChargeUnit expectedUnit)
        {
            Assert.True(ElectricCharge.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ElectricChargeUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", ElectricChargeUnit.AmpereHour, "A-h")]
        [InlineData("en-US", ElectricChargeUnit.Coulomb, "C")]
        [InlineData("en-US", ElectricChargeUnit.KiloampereHour, "kA-h")]
        [InlineData("en-US", ElectricChargeUnit.Kilocoulomb, "kC")]
        [InlineData("en-US", ElectricChargeUnit.MegaampereHour, "MA-h")]
        [InlineData("en-US", ElectricChargeUnit.Megacoulomb, "MC")]
        [InlineData("en-US", ElectricChargeUnit.Microcoulomb, "µC")]
        [InlineData("en-US", ElectricChargeUnit.MilliampereHour, "mA-h")]
        [InlineData("en-US", ElectricChargeUnit.Millicoulomb, "mC")]
        [InlineData("en-US", ElectricChargeUnit.Nanocoulomb, "nC")]
        [InlineData("en-US", ElectricChargeUnit.Picocoulomb, "pC")]
        public void GetAbbreviationForCulture(string culture, ElectricChargeUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = ElectricCharge.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(ElectricCharge.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = ElectricCharge.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricChargeUnit unit)
        {
            var inBaseUnits = ElectricCharge.From(1.0, ElectricCharge.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricChargeUnit unit)
        {
            var quantity = ElectricCharge.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricChargeUnit unit)
        {
            Assert.All(ElectricCharge.Units.Where(u => u != ElectricCharge.BaseUnit), fromUnit =>
            {
                var quantity = ElectricCharge.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricChargeUnit unit)
        {
            var quantity = default(ElectricCharge);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ElectricChargeUnit unit)
        {
            var quantity = ElectricCharge.From(3, ElectricCharge.BaseUnit);
            ElectricCharge expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ElectricChargeUnit> quantityToConvert = quantity;
                IQuantity<ElectricChargeUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricCharge coulomb = ElectricCharge.FromCoulombs(1);
            AssertEx.EqualTolerance(1, ElectricCharge.FromAmpereHours(coulomb.AmpereHours).Coulombs, AmpereHoursTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromCoulombs(coulomb.Coulombs).Coulombs, CoulombsTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromKiloampereHours(coulomb.KiloampereHours).Coulombs, KiloampereHoursTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromKilocoulombs(coulomb.Kilocoulombs).Coulombs, KilocoulombsTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromMegaampereHours(coulomb.MegaampereHours).Coulombs, MegaampereHoursTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromMegacoulombs(coulomb.Megacoulombs).Coulombs, MegacoulombsTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromMicrocoulombs(coulomb.Microcoulombs).Coulombs, MicrocoulombsTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromMilliampereHours(coulomb.MilliampereHours).Coulombs, MilliampereHoursTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromMillicoulombs(coulomb.Millicoulombs).Coulombs, MillicoulombsTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromNanocoulombs(coulomb.Nanocoulombs).Coulombs, NanocoulombsTolerance);
            AssertEx.EqualTolerance(1, ElectricCharge.FromPicocoulombs(coulomb.Picocoulombs).Coulombs, PicocoulombsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricCharge v = ElectricCharge.FromCoulombs(1);
            AssertEx.EqualTolerance(-1, -v.Coulombs, CoulombsTolerance);
            AssertEx.EqualTolerance(2, (ElectricCharge.FromCoulombs(3)-v).Coulombs, CoulombsTolerance);
            AssertEx.EqualTolerance(2, (v + v).Coulombs, CoulombsTolerance);
            AssertEx.EqualTolerance(10, (v*10).Coulombs, CoulombsTolerance);
            AssertEx.EqualTolerance(10, (10*v).Coulombs, CoulombsTolerance);
            AssertEx.EqualTolerance(2, (ElectricCharge.FromCoulombs(10)/5).Coulombs, CoulombsTolerance);
            AssertEx.EqualTolerance(2, ElectricCharge.FromCoulombs(10)/ElectricCharge.FromCoulombs(5), CoulombsTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricCharge oneCoulomb = ElectricCharge.FromCoulombs(1);
            ElectricCharge twoCoulombs = ElectricCharge.FromCoulombs(2);

            Assert.True(oneCoulomb < twoCoulombs);
            Assert.True(oneCoulomb <= twoCoulombs);
            Assert.True(twoCoulombs > oneCoulomb);
            Assert.True(twoCoulombs >= oneCoulomb);

            Assert.False(oneCoulomb > twoCoulombs);
            Assert.False(oneCoulomb >= twoCoulombs);
            Assert.False(twoCoulombs < oneCoulomb);
            Assert.False(twoCoulombs <= oneCoulomb);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricCharge coulomb = ElectricCharge.FromCoulombs(1);
            Assert.Equal(0, coulomb.CompareTo(coulomb));
            Assert.True(coulomb.CompareTo(ElectricCharge.Zero) > 0);
            Assert.True(ElectricCharge.Zero.CompareTo(coulomb) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricCharge coulomb = ElectricCharge.FromCoulombs(1);
            Assert.Throws<ArgumentException>(() => coulomb.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricCharge coulomb = ElectricCharge.FromCoulombs(1);
            Assert.Throws<ArgumentNullException>(() => coulomb.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricChargeUnit.Coulomb, 1, ElectricChargeUnit.Coulomb, true)]  // Same value and unit.
        [InlineData(1, ElectricChargeUnit.Coulomb, 2, ElectricChargeUnit.Coulomb, false)] // Different value.
        [InlineData(2, ElectricChargeUnit.Coulomb, 1, ElectricChargeUnit.AmpereHour, false)] // Different value and unit.
        [InlineData(1, ElectricChargeUnit.Coulomb, 1, ElectricChargeUnit.AmpereHour, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricChargeUnit unitA, double valueB, ElectricChargeUnit unitB, bool expectEqual)
        {
            var a = new ElectricCharge(valueA, unitA);
            var b = new ElectricCharge(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricCharge.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricCharge coulomb = ElectricCharge.FromCoulombs(1);
            Assert.False(coulomb.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricCharge coulomb = ElectricCharge.FromCoulombs(1);
            Assert.False(coulomb.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = ElectricCharge.FromCoulombs(firstValue);
            var otherQuantity = ElectricCharge.FromCoulombs(secondValue);
            ElectricCharge maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, ElectricCharge.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = ElectricCharge.FromCoulombs(1);
            var negativeTolerance = ElectricCharge.FromCoulombs(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<ElectricChargeUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricCharge.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 A-h", new ElectricCharge(1, ElectricChargeUnit.AmpereHour).ToString());
            Assert.Equal("1 C", new ElectricCharge(1, ElectricChargeUnit.Coulomb).ToString());
            Assert.Equal("1 kA-h", new ElectricCharge(1, ElectricChargeUnit.KiloampereHour).ToString());
            Assert.Equal("1 kC", new ElectricCharge(1, ElectricChargeUnit.Kilocoulomb).ToString());
            Assert.Equal("1 MA-h", new ElectricCharge(1, ElectricChargeUnit.MegaampereHour).ToString());
            Assert.Equal("1 MC", new ElectricCharge(1, ElectricChargeUnit.Megacoulomb).ToString());
            Assert.Equal("1 µC", new ElectricCharge(1, ElectricChargeUnit.Microcoulomb).ToString());
            Assert.Equal("1 mA-h", new ElectricCharge(1, ElectricChargeUnit.MilliampereHour).ToString());
            Assert.Equal("1 mC", new ElectricCharge(1, ElectricChargeUnit.Millicoulomb).ToString());
            Assert.Equal("1 nC", new ElectricCharge(1, ElectricChargeUnit.Nanocoulomb).ToString());
            Assert.Equal("1 pC", new ElectricCharge(1, ElectricChargeUnit.Picocoulomb).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 A-h", new ElectricCharge(1, ElectricChargeUnit.AmpereHour).ToString(swedishCulture));
            Assert.Equal("1 C", new ElectricCharge(1, ElectricChargeUnit.Coulomb).ToString(swedishCulture));
            Assert.Equal("1 kA-h", new ElectricCharge(1, ElectricChargeUnit.KiloampereHour).ToString(swedishCulture));
            Assert.Equal("1 kC", new ElectricCharge(1, ElectricChargeUnit.Kilocoulomb).ToString(swedishCulture));
            Assert.Equal("1 MA-h", new ElectricCharge(1, ElectricChargeUnit.MegaampereHour).ToString(swedishCulture));
            Assert.Equal("1 MC", new ElectricCharge(1, ElectricChargeUnit.Megacoulomb).ToString(swedishCulture));
            Assert.Equal("1 µC", new ElectricCharge(1, ElectricChargeUnit.Microcoulomb).ToString(swedishCulture));
            Assert.Equal("1 mA-h", new ElectricCharge(1, ElectricChargeUnit.MilliampereHour).ToString(swedishCulture));
            Assert.Equal("1 mC", new ElectricCharge(1, ElectricChargeUnit.Millicoulomb).ToString(swedishCulture));
            Assert.Equal("1 nC", new ElectricCharge(1, ElectricChargeUnit.Nanocoulomb).ToString(swedishCulture));
            Assert.Equal("1 pC", new ElectricCharge(1, ElectricChargeUnit.Picocoulomb).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 C", new ElectricCharge(0.123456, ElectricChargeUnit.Coulomb).ToString("s1"));
            Assert.Equal("0.12 C", new ElectricCharge(0.123456, ElectricChargeUnit.Coulomb).ToString("s2"));
            Assert.Equal("0.123 C", new ElectricCharge(0.123456, ElectricChargeUnit.Coulomb).ToString("s3"));
            Assert.Equal("0.1235 C", new ElectricCharge(0.123456, ElectricChargeUnit.Coulomb).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 C", new ElectricCharge(0.123456, ElectricChargeUnit.Coulomb).ToString("s1", culture));
            Assert.Equal("0.12 C", new ElectricCharge(0.123456, ElectricChargeUnit.Coulomb).ToString("s2", culture));
            Assert.Equal("0.123 C", new ElectricCharge(0.123456, ElectricChargeUnit.Coulomb).ToString("s3", culture));
            Assert.Equal("0.1235 C", new ElectricCharge(0.123456, ElectricChargeUnit.Coulomb).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricCharge.FromCoulombs(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricCharge.FromCoulombs(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricCharge.FromCoulombs(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricCharge.FromCoulombs(value);
            Assert.Equal(ElectricCharge.FromCoulombs(-value), -quantity);
        }
    }
}
