//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToLinearPowerDensity
{
    /// <summary>
    /// A number to LinearPowerDensity Extensions
    /// </summary>
    public static class NumberToLinearPowerDensityExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="LinearPowerDensity.FromGigawattsPerCentimeter(double)" />
            public LinearPowerDensity GigawattsPerCentimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromGigawattsPerCentimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromGigawattsPerCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromGigawattsPerFoot(double)" />
            public LinearPowerDensity GigawattsPerFoot
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromGigawattsPerFoot(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromGigawattsPerFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromGigawattsPerInch(double)" />
            public LinearPowerDensity GigawattsPerInch
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromGigawattsPerInch(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromGigawattsPerInch(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromGigawattsPerMeter(double)" />
            public LinearPowerDensity GigawattsPerMeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromGigawattsPerMeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromGigawattsPerMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromGigawattsPerMillimeter(double)" />
            public LinearPowerDensity GigawattsPerMillimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromGigawattsPerMillimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromGigawattsPerMillimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromKilowattsPerCentimeter(double)" />
            public LinearPowerDensity KilowattsPerCentimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromKilowattsPerCentimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromKilowattsPerCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromKilowattsPerFoot(double)" />
            public LinearPowerDensity KilowattsPerFoot
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromKilowattsPerFoot(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromKilowattsPerFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromKilowattsPerInch(double)" />
            public LinearPowerDensity KilowattsPerInch
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromKilowattsPerInch(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromKilowattsPerInch(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromKilowattsPerMeter(double)" />
            public LinearPowerDensity KilowattsPerMeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromKilowattsPerMeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromKilowattsPerMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromKilowattsPerMillimeter(double)" />
            public LinearPowerDensity KilowattsPerMillimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromKilowattsPerMillimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromKilowattsPerMillimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMegawattsPerCentimeter(double)" />
            public LinearPowerDensity MegawattsPerCentimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMegawattsPerCentimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMegawattsPerCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMegawattsPerFoot(double)" />
            public LinearPowerDensity MegawattsPerFoot
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMegawattsPerFoot(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMegawattsPerFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMegawattsPerInch(double)" />
            public LinearPowerDensity MegawattsPerInch
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMegawattsPerInch(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMegawattsPerInch(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMegawattsPerMeter(double)" />
            public LinearPowerDensity MegawattsPerMeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMegawattsPerMeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMegawattsPerMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMegawattsPerMillimeter(double)" />
            public LinearPowerDensity MegawattsPerMillimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMegawattsPerMillimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMegawattsPerMillimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMilliwattsPerCentimeter(double)" />
            public LinearPowerDensity MilliwattsPerCentimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMilliwattsPerCentimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMilliwattsPerCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMilliwattsPerFoot(double)" />
            public LinearPowerDensity MilliwattsPerFoot
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMilliwattsPerFoot(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMilliwattsPerFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMilliwattsPerInch(double)" />
            public LinearPowerDensity MilliwattsPerInch
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMilliwattsPerInch(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMilliwattsPerInch(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMilliwattsPerMeter(double)" />
            public LinearPowerDensity MilliwattsPerMeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMilliwattsPerMeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMilliwattsPerMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromMilliwattsPerMillimeter(double)" />
            public LinearPowerDensity MilliwattsPerMillimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromMilliwattsPerMillimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromMilliwattsPerMillimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromWattsPerCentimeter(double)" />
            public LinearPowerDensity WattsPerCentimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromWattsPerCentimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromWattsPerCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromWattsPerFoot(double)" />
            public LinearPowerDensity WattsPerFoot
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromWattsPerFoot(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromWattsPerFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromWattsPerInch(double)" />
            public LinearPowerDensity WattsPerInch
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromWattsPerInch(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromWattsPerInch(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromWattsPerMeter(double)" />
            public LinearPowerDensity WattsPerMeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromWattsPerMeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromWattsPerMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="LinearPowerDensity.FromWattsPerMillimeter(double)" />
            public LinearPowerDensity WattsPerMillimeter
#if NET7_0_OR_GREATER
                => LinearPowerDensity.FromWattsPerMillimeter(double.CreateChecked(value));
#else
                => LinearPowerDensity.FromWattsPerMillimeter(value.ToDouble(null));
#endif

        }
    }
}
