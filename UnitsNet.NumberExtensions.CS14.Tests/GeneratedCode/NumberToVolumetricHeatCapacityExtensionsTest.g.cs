//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToVolumetricHeatCapacity;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToVolumetricHeatCapacityExtensionsTests
    {
        [Fact]
        public void NumberToBtusPerCubicFootDegreeFahrenheitTest() =>
            Assert.Equal(VolumetricHeatCapacity.FromBtusPerCubicFootDegreeFahrenheit(2), 2.BtusPerCubicFootDegreeFahrenheit);

        [Fact]
        public void NumberToCaloriesPerCubicCentimeterDegreeCelsiusTest() =>
            Assert.Equal(VolumetricHeatCapacity.FromCaloriesPerCubicCentimeterDegreeCelsius(2), 2.CaloriesPerCubicCentimeterDegreeCelsius);

        [Fact]
        public void NumberToJoulesPerCubicMeterDegreeCelsiusTest() =>
            Assert.Equal(VolumetricHeatCapacity.FromJoulesPerCubicMeterDegreeCelsius(2), 2.JoulesPerCubicMeterDegreeCelsius);

        [Fact]
        public void NumberToJoulesPerCubicMeterKelvinTest() =>
            Assert.Equal(VolumetricHeatCapacity.FromJoulesPerCubicMeterKelvin(2), 2.JoulesPerCubicMeterKelvin);

        [Fact]
        public void NumberToKilocaloriesPerCubicCentimeterDegreeCelsiusTest() =>
            Assert.Equal(VolumetricHeatCapacity.FromKilocaloriesPerCubicCentimeterDegreeCelsius(2), 2.KilocaloriesPerCubicCentimeterDegreeCelsius);

        [Fact]
        public void NumberToKilojoulesPerCubicMeterDegreeCelsiusTest() =>
            Assert.Equal(VolumetricHeatCapacity.FromKilojoulesPerCubicMeterDegreeCelsius(2), 2.KilojoulesPerCubicMeterDegreeCelsius);

        [Fact]
        public void NumberToKilojoulesPerCubicMeterKelvinTest() =>
            Assert.Equal(VolumetricHeatCapacity.FromKilojoulesPerCubicMeterKelvin(2), 2.KilojoulesPerCubicMeterKelvin);

        [Fact]
        public void NumberToMegajoulesPerCubicMeterDegreeCelsiusTest() =>
            Assert.Equal(VolumetricHeatCapacity.FromMegajoulesPerCubicMeterDegreeCelsius(2), 2.MegajoulesPerCubicMeterDegreeCelsius);

        [Fact]
        public void NumberToMegajoulesPerCubicMeterKelvinTest() =>
            Assert.Equal(VolumetricHeatCapacity.FromMegajoulesPerCubicMeterKelvin(2), 2.MegajoulesPerCubicMeterKelvin);

    }
}
