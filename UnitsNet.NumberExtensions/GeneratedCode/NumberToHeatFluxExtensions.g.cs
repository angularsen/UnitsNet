//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToHeatFlux
{
    /// <summary>
    /// A number to HeatFlux Extensions
    /// </summary>
    public static class NumberToHeatFluxExtensions
    {
        /// <inheritdoc cref="HeatFlux.FromBtusPerHourSquareFoot(QuantityValue)" />
        public static HeatFlux BtusPerHourSquareFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromBtusPerHourSquareFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromBtusPerHourSquareFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromBtusPerMinuteSquareFoot(QuantityValue)" />
        public static HeatFlux BtusPerMinuteSquareFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromBtusPerMinuteSquareFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromBtusPerMinuteSquareFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromBtusPerSecondSquareFoot(QuantityValue)" />
        public static HeatFlux BtusPerSecondSquareFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromBtusPerSecondSquareFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromBtusPerSecondSquareFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromBtusPerSecondSquareInch(QuantityValue)" />
        public static HeatFlux BtusPerSecondSquareInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromBtusPerSecondSquareInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromBtusPerSecondSquareInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromCaloriesPerSecondSquareCentimeter(QuantityValue)" />
        public static HeatFlux CaloriesPerSecondSquareCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromCaloriesPerSecondSquareCentimeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromCaloriesPerSecondSquareCentimeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(QuantityValue)" />
        public static HeatFlux CentiwattsPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromCentiwattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromCentiwattsPerSquareMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(QuantityValue)" />
        public static HeatFlux DeciwattsPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromDeciwattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromDeciwattsPerSquareMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromKilocaloriesPerHourSquareMeter(QuantityValue)" />
        public static HeatFlux KilocaloriesPerHourSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromKilocaloriesPerHourSquareMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromKilocaloriesPerHourSquareMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(QuantityValue)" />
        public static HeatFlux KilocaloriesPerSecondSquareCentimeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(QuantityValue)" />
        public static HeatFlux KilowattsPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromKilowattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromKilowattsPerSquareMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(QuantityValue)" />
        public static HeatFlux MicrowattsPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromMicrowattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromMicrowattsPerSquareMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(QuantityValue)" />
        public static HeatFlux MilliwattsPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromMilliwattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromMilliwattsPerSquareMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(QuantityValue)" />
        public static HeatFlux NanowattsPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromNanowattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromNanowattsPerSquareMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromPoundsForcePerFootSecond(QuantityValue)" />
        public static HeatFlux PoundsForcePerFootSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromPoundsForcePerFootSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromPoundsForcePerFootSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromPoundsPerSecondCubed(QuantityValue)" />
        public static HeatFlux PoundsPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromPoundsPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromPoundsPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareFoot(QuantityValue)" />
        public static HeatFlux WattsPerSquareFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromWattsPerSquareFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromWattsPerSquareFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareInch(QuantityValue)" />
        public static HeatFlux WattsPerSquareInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromWattsPerSquareInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromWattsPerSquareInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(QuantityValue)" />
        public static HeatFlux WattsPerSquareMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => HeatFlux.FromWattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => HeatFlux.FromWattsPerSquareMeter(value.ToQuantityValue());
#endif

    }
}
