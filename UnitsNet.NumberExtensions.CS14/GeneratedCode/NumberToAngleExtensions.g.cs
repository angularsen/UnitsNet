//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToAngle
{
    /// <summary>
    /// A number to Angle Extensions
    /// </summary>
    public static class NumberToAngleExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Angle.FromArcminutes(QuantityValue)" />
            public Angle Arcminutes
#if NET7_0_OR_GREATER
                => Angle.FromArcminutes(QuantityValue.CreateChecked(value));
#else
                => Angle.FromArcminutes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromArcseconds(QuantityValue)" />
            public Angle Arcseconds
#if NET7_0_OR_GREATER
                => Angle.FromArcseconds(QuantityValue.CreateChecked(value));
#else
                => Angle.FromArcseconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromCentiradians(QuantityValue)" />
            public Angle Centiradians
#if NET7_0_OR_GREATER
                => Angle.FromCentiradians(QuantityValue.CreateChecked(value));
#else
                => Angle.FromCentiradians(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromDeciradians(QuantityValue)" />
            public Angle Deciradians
#if NET7_0_OR_GREATER
                => Angle.FromDeciradians(QuantityValue.CreateChecked(value));
#else
                => Angle.FromDeciradians(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromDegrees(QuantityValue)" />
            public Angle Degrees
#if NET7_0_OR_GREATER
                => Angle.FromDegrees(QuantityValue.CreateChecked(value));
#else
                => Angle.FromDegrees(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromGradians(QuantityValue)" />
            public Angle Gradians
#if NET7_0_OR_GREATER
                => Angle.FromGradians(QuantityValue.CreateChecked(value));
#else
                => Angle.FromGradians(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromMicrodegrees(QuantityValue)" />
            public Angle Microdegrees
#if NET7_0_OR_GREATER
                => Angle.FromMicrodegrees(QuantityValue.CreateChecked(value));
#else
                => Angle.FromMicrodegrees(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromMicroradians(QuantityValue)" />
            public Angle Microradians
#if NET7_0_OR_GREATER
                => Angle.FromMicroradians(QuantityValue.CreateChecked(value));
#else
                => Angle.FromMicroradians(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromMillidegrees(QuantityValue)" />
            public Angle Millidegrees
#if NET7_0_OR_GREATER
                => Angle.FromMillidegrees(QuantityValue.CreateChecked(value));
#else
                => Angle.FromMillidegrees(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromMilliradians(QuantityValue)" />
            public Angle Milliradians
#if NET7_0_OR_GREATER
                => Angle.FromMilliradians(QuantityValue.CreateChecked(value));
#else
                => Angle.FromMilliradians(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromNanodegrees(QuantityValue)" />
            public Angle Nanodegrees
#if NET7_0_OR_GREATER
                => Angle.FromNanodegrees(QuantityValue.CreateChecked(value));
#else
                => Angle.FromNanodegrees(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromNanoradians(QuantityValue)" />
            public Angle Nanoradians
#if NET7_0_OR_GREATER
                => Angle.FromNanoradians(QuantityValue.CreateChecked(value));
#else
                => Angle.FromNanoradians(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromNatoMils(QuantityValue)" />
            public Angle NatoMils
#if NET7_0_OR_GREATER
                => Angle.FromNatoMils(QuantityValue.CreateChecked(value));
#else
                => Angle.FromNatoMils(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromRadians(QuantityValue)" />
            public Angle Radians
#if NET7_0_OR_GREATER
                => Angle.FromRadians(QuantityValue.CreateChecked(value));
#else
                => Angle.FromRadians(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Angle.FromRevolutions(QuantityValue)" />
            public Angle Revolutions
#if NET7_0_OR_GREATER
                => Angle.FromRevolutions(QuantityValue.CreateChecked(value));
#else
                => Angle.FromRevolutions(value.ToQuantityValue());
#endif

        }
    }
}
