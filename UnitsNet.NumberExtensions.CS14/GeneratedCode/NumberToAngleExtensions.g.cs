//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToAngle
{
    /// <summary>
    /// A number to Angle Extensions
    /// </summary>
    public static class NumberToAngleExtensions
    {
        extension<T>(T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Angle.FromArcminutes(double)" />
            public Angle Arcminutes
#if NET7_0_OR_GREATER
                => Angle.FromArcminutes(double.CreateChecked(value));
#else
                => Angle.FromArcminutes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromArcseconds(double)" />
            public Angle Arcseconds
#if NET7_0_OR_GREATER
                => Angle.FromArcseconds(double.CreateChecked(value));
#else
                => Angle.FromArcseconds(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromCentiradians(double)" />
            public Angle Centiradians
#if NET7_0_OR_GREATER
                => Angle.FromCentiradians(double.CreateChecked(value));
#else
                => Angle.FromCentiradians(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromDeciradians(double)" />
            public Angle Deciradians
#if NET7_0_OR_GREATER
                => Angle.FromDeciradians(double.CreateChecked(value));
#else
                => Angle.FromDeciradians(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromDegrees(double)" />
            public Angle Degrees
#if NET7_0_OR_GREATER
                => Angle.FromDegrees(double.CreateChecked(value));
#else
                => Angle.FromDegrees(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromGradians(double)" />
            public Angle Gradians
#if NET7_0_OR_GREATER
                => Angle.FromGradians(double.CreateChecked(value));
#else
                => Angle.FromGradians(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromMicrodegrees(double)" />
            public Angle Microdegrees
#if NET7_0_OR_GREATER
                => Angle.FromMicrodegrees(double.CreateChecked(value));
#else
                => Angle.FromMicrodegrees(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromMicroradians(double)" />
            public Angle Microradians
#if NET7_0_OR_GREATER
                => Angle.FromMicroradians(double.CreateChecked(value));
#else
                => Angle.FromMicroradians(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromMillidegrees(double)" />
            public Angle Millidegrees
#if NET7_0_OR_GREATER
                => Angle.FromMillidegrees(double.CreateChecked(value));
#else
                => Angle.FromMillidegrees(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromMilliradians(double)" />
            public Angle Milliradians
#if NET7_0_OR_GREATER
                => Angle.FromMilliradians(double.CreateChecked(value));
#else
                => Angle.FromMilliradians(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromNanodegrees(double)" />
            public Angle Nanodegrees
#if NET7_0_OR_GREATER
                => Angle.FromNanodegrees(double.CreateChecked(value));
#else
                => Angle.FromNanodegrees(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromNanoradians(double)" />
            public Angle Nanoradians
#if NET7_0_OR_GREATER
                => Angle.FromNanoradians(double.CreateChecked(value));
#else
                => Angle.FromNanoradians(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromNatoMils(double)" />
            public Angle NatoMils
#if NET7_0_OR_GREATER
                => Angle.FromNatoMils(double.CreateChecked(value));
#else
                => Angle.FromNatoMils(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromRadians(double)" />
            public Angle Radians
#if NET7_0_OR_GREATER
                => Angle.FromRadians(double.CreateChecked(value));
#else
                => Angle.FromRadians(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Angle.FromRevolutions(double)" />
            public Angle Revolutions
#if NET7_0_OR_GREATER
                => Angle.FromRevolutions(double.CreateChecked(value));
#else
                => Angle.FromRevolutions(value.ToDouble(null));
#endif

        }
    }
}
