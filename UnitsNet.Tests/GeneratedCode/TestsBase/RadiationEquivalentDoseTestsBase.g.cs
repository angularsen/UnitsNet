//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RadiationEquivalentDose.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RadiationEquivalentDoseTestsBase : QuantityTestsBase
    {
        protected abstract double MicrosievertsInOneSievert { get; }
        protected abstract double MilliroentgensEquivalentManInOneSievert { get; }
        protected abstract double MillisievertsInOneSievert { get; }
        protected abstract double NanosievertsInOneSievert { get; }
        protected abstract double RoentgensEquivalentManInOneSievert { get; }
        protected abstract double SievertsInOneSievert { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double MicrosievertsTolerance { get { return 1e-5; } }
        protected virtual double MilliroentgensEquivalentManTolerance { get { return 1e-5; } }
        protected virtual double MillisievertsTolerance { get { return 1e-5; } }
        protected virtual double NanosievertsTolerance { get { return 1e-5; } }
        protected virtual double RoentgensEquivalentManTolerance { get { return 1e-5; } }
        protected virtual double SievertsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(RadiationEquivalentDoseUnit unit)
        {
            return unit switch
            {
                RadiationEquivalentDoseUnit.Microsievert => (MicrosievertsInOneSievert, MicrosievertsTolerance),
                RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan => (MilliroentgensEquivalentManInOneSievert, MilliroentgensEquivalentManTolerance),
                RadiationEquivalentDoseUnit.Millisievert => (MillisievertsInOneSievert, MillisievertsTolerance),
                RadiationEquivalentDoseUnit.Nanosievert => (NanosievertsInOneSievert, NanosievertsTolerance),
                RadiationEquivalentDoseUnit.RoentgenEquivalentMan => (RoentgensEquivalentManInOneSievert, RoentgensEquivalentManTolerance),
                RadiationEquivalentDoseUnit.Sievert => (SievertsInOneSievert, SievertsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { RadiationEquivalentDoseUnit.Microsievert },
            new object[] { RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan },
            new object[] { RadiationEquivalentDoseUnit.Millisievert },
            new object[] { RadiationEquivalentDoseUnit.Nanosievert },
            new object[] { RadiationEquivalentDoseUnit.RoentgenEquivalentMan },
            new object[] { RadiationEquivalentDoseUnit.Sievert },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new RadiationEquivalentDose();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RadiationEquivalentDoseUnit.Sievert, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new RadiationEquivalentDose(double.PositiveInfinity, RadiationEquivalentDoseUnit.Sievert));
            var exception2 = Record.Exception(() => new RadiationEquivalentDose(double.NegativeInfinity, RadiationEquivalentDoseUnit.Sievert));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new RadiationEquivalentDose(double.NaN, RadiationEquivalentDoseUnit.Sievert));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new RadiationEquivalentDose(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new RadiationEquivalentDose(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new RadiationEquivalentDose(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void RadiationEquivalentDose_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            RadiationEquivalentDoseUnit[] unitsOrderedByName = EnumUtils.GetEnumValues<RadiationEquivalentDoseUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.Sievert);

            QuantityInfo<RadiationEquivalentDose, RadiationEquivalentDoseUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("RadiationEquivalentDose", quantityInfo.Name);
            Assert.Equal(RadiationEquivalentDose.Zero, quantityInfo.Zero);
            Assert.Equal(RadiationEquivalentDose.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(RadiationEquivalentDose.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<RadiationEquivalentDoseUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void RadiationEquivalentDoseInfo_CreateWithCustomUnitInfos()
        {
            RadiationEquivalentDoseUnit[] expectedUnits = [RadiationEquivalentDoseUnit.Sievert];

            RadiationEquivalentDose.RadiationEquivalentDoseInfo quantityInfo = RadiationEquivalentDose.RadiationEquivalentDoseInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("RadiationEquivalentDose", quantityInfo.Name);
            Assert.Equal(RadiationEquivalentDose.Zero, quantityInfo.Zero);
            Assert.Equal(RadiationEquivalentDose.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void SievertToRadiationEquivalentDoseUnits()
        {
            RadiationEquivalentDose sievert = RadiationEquivalentDose.FromSieverts(1);
            AssertEx.EqualTolerance(MicrosievertsInOneSievert, sievert.Microsieverts, MicrosievertsTolerance);
            AssertEx.EqualTolerance(MilliroentgensEquivalentManInOneSievert, sievert.MilliroentgensEquivalentMan, MilliroentgensEquivalentManTolerance);
            AssertEx.EqualTolerance(MillisievertsInOneSievert, sievert.Millisieverts, MillisievertsTolerance);
            AssertEx.EqualTolerance(NanosievertsInOneSievert, sievert.Nanosieverts, NanosievertsTolerance);
            AssertEx.EqualTolerance(RoentgensEquivalentManInOneSievert, sievert.RoentgensEquivalentMan, RoentgensEquivalentManTolerance);
            AssertEx.EqualTolerance(SievertsInOneSievert, sievert.Sieverts, SievertsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = RadiationEquivalentDose.From(1, RadiationEquivalentDoseUnit.Microsievert);
            Assert.Equal(1, quantity00.Microsieverts);
            Assert.Equal(RadiationEquivalentDoseUnit.Microsievert, quantity00.Unit);

            var quantity01 = RadiationEquivalentDose.From(1, RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan);
            Assert.Equal(1, quantity01.MilliroentgensEquivalentMan);
            Assert.Equal(RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan, quantity01.Unit);

            var quantity02 = RadiationEquivalentDose.From(1, RadiationEquivalentDoseUnit.Millisievert);
            Assert.Equal(1, quantity02.Millisieverts);
            Assert.Equal(RadiationEquivalentDoseUnit.Millisievert, quantity02.Unit);

            var quantity03 = RadiationEquivalentDose.From(1, RadiationEquivalentDoseUnit.Nanosievert);
            Assert.Equal(1, quantity03.Nanosieverts);
            Assert.Equal(RadiationEquivalentDoseUnit.Nanosievert, quantity03.Unit);

            var quantity04 = RadiationEquivalentDose.From(1, RadiationEquivalentDoseUnit.RoentgenEquivalentMan);
            Assert.Equal(1, quantity04.RoentgensEquivalentMan);
            Assert.Equal(RadiationEquivalentDoseUnit.RoentgenEquivalentMan, quantity04.Unit);

            var quantity05 = RadiationEquivalentDose.From(1, RadiationEquivalentDoseUnit.Sievert);
            Assert.Equal(1, quantity05.Sieverts);
            Assert.Equal(RadiationEquivalentDoseUnit.Sievert, quantity05.Unit);

        }

        [Fact]
        public void FromSieverts_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => RadiationEquivalentDose.FromSieverts(double.PositiveInfinity));
            var exception2 = Record.Exception(() => RadiationEquivalentDose.FromSieverts(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromSieverts_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => RadiationEquivalentDose.FromSieverts(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var sievert = RadiationEquivalentDose.FromSieverts(1);
            AssertEx.EqualTolerance(MicrosievertsInOneSievert, sievert.As(RadiationEquivalentDoseUnit.Microsievert), MicrosievertsTolerance);
            AssertEx.EqualTolerance(MilliroentgensEquivalentManInOneSievert, sievert.As(RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan), MilliroentgensEquivalentManTolerance);
            AssertEx.EqualTolerance(MillisievertsInOneSievert, sievert.As(RadiationEquivalentDoseUnit.Millisievert), MillisievertsTolerance);
            AssertEx.EqualTolerance(NanosievertsInOneSievert, sievert.As(RadiationEquivalentDoseUnit.Nanosievert), NanosievertsTolerance);
            AssertEx.EqualTolerance(RoentgensEquivalentManInOneSievert, sievert.As(RadiationEquivalentDoseUnit.RoentgenEquivalentMan), RoentgensEquivalentManTolerance);
            AssertEx.EqualTolerance(SievertsInOneSievert, sievert.As(RadiationEquivalentDoseUnit.Sievert), SievertsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = RadiationEquivalentDose.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
            var expectedValue = quantity.As(RadiationEquivalentDose.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
            var expectedUnit = RadiationEquivalentDose.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                RadiationEquivalentDose quantityToConvert = quantity;

                RadiationEquivalentDose convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<RadiationEquivalentDoseUnit> quantityToConvert = quantity;

                IQuantity<RadiationEquivalentDoseUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<RadiationEquivalentDoseUnit> quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<RadiationEquivalentDoseUnit> quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new RadiationEquivalentDose(value: 1, unit: RadiationEquivalentDose.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 µSv", RadiationEquivalentDoseUnit.Microsievert, 4.2)]
        [InlineData("en-US", "4.2 mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan, 4.2)]
        [InlineData("en-US", "4.2 mSv", RadiationEquivalentDoseUnit.Millisievert, 4.2)]
        [InlineData("en-US", "4.2 nSv", RadiationEquivalentDoseUnit.Nanosievert, 4.2)]
        [InlineData("en-US", "4.2 rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan, 4.2)]
        [InlineData("en-US", "4.2 Sv", RadiationEquivalentDoseUnit.Sievert, 4.2)]
        [InlineData("ru-RU", "4,2 мкЗв", RadiationEquivalentDoseUnit.Microsievert, 4.2)]
        [InlineData("ru-RU", "4,2 мЗв", RadiationEquivalentDoseUnit.Millisievert, 4.2)]
        [InlineData("ru-RU", "4,2 нЗв", RadiationEquivalentDoseUnit.Nanosievert, 4.2)]
        [InlineData("ru-RU", "4,2 Зв", RadiationEquivalentDoseUnit.Sievert, 4.2)]
        public void Parse(string culture, string quantityString, RadiationEquivalentDoseUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = RadiationEquivalentDose.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 µSv", RadiationEquivalentDoseUnit.Microsievert, 4.2)]
        [InlineData("en-US", "4.2 mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan, 4.2)]
        [InlineData("en-US", "4.2 mSv", RadiationEquivalentDoseUnit.Millisievert, 4.2)]
        [InlineData("en-US", "4.2 nSv", RadiationEquivalentDoseUnit.Nanosievert, 4.2)]
        [InlineData("en-US", "4.2 rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan, 4.2)]
        [InlineData("en-US", "4.2 Sv", RadiationEquivalentDoseUnit.Sievert, 4.2)]
        [InlineData("ru-RU", "4,2 мкЗв", RadiationEquivalentDoseUnit.Microsievert, 4.2)]
        [InlineData("ru-RU", "4,2 мЗв", RadiationEquivalentDoseUnit.Millisievert, 4.2)]
        [InlineData("ru-RU", "4,2 нЗв", RadiationEquivalentDoseUnit.Nanosievert, 4.2)]
        [InlineData("ru-RU", "4,2 Зв", RadiationEquivalentDoseUnit.Sievert, 4.2)]
        public void TryParse(string culture, string quantityString, RadiationEquivalentDoseUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(RadiationEquivalentDose.TryParse(quantityString, out RadiationEquivalentDose parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("µSv", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan)]
        [InlineData("mSv", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("nSv", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan)]
        [InlineData("Sv", RadiationEquivalentDoseUnit.Sievert)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RadiationEquivalentDoseUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            RadiationEquivalentDoseUnit parsedUnit = RadiationEquivalentDose.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("µSv", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan)]
        [InlineData("mSv", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("nSv", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan)]
        [InlineData("Sv", RadiationEquivalentDoseUnit.Sievert)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RadiationEquivalentDoseUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            RadiationEquivalentDoseUnit parsedUnit = RadiationEquivalentDose.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "µSv", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("en-US", "mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan)]
        [InlineData("en-US", "mSv", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("en-US", "nSv", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("en-US", "rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan)]
        [InlineData("en-US", "Sv", RadiationEquivalentDoseUnit.Sievert)]
        [InlineData("ru-RU", "мкЗв", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("ru-RU", "мЗв", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("ru-RU", "нЗв", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("ru-RU", "Зв", RadiationEquivalentDoseUnit.Sievert)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, RadiationEquivalentDoseUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            RadiationEquivalentDoseUnit parsedUnit = RadiationEquivalentDose.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "µSv", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("en-US", "mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan)]
        [InlineData("en-US", "mSv", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("en-US", "nSv", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("en-US", "rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan)]
        [InlineData("en-US", "Sv", RadiationEquivalentDoseUnit.Sievert)]
        [InlineData("ru-RU", "мкЗв", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("ru-RU", "мЗв", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("ru-RU", "нЗв", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("ru-RU", "Зв", RadiationEquivalentDoseUnit.Sievert)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, RadiationEquivalentDoseUnit expectedUnit)
        {
            RadiationEquivalentDoseUnit parsedUnit = RadiationEquivalentDose.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("µSv", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan)]
        [InlineData("mSv", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("nSv", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan)]
        [InlineData("Sv", RadiationEquivalentDoseUnit.Sievert)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RadiationEquivalentDoseUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(RadiationEquivalentDose.TryParseUnit(abbreviation, out RadiationEquivalentDoseUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("µSv", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan)]
        [InlineData("mSv", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("nSv", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan)]
        [InlineData("Sv", RadiationEquivalentDoseUnit.Sievert)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RadiationEquivalentDoseUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(RadiationEquivalentDose.TryParseUnit(abbreviation, out RadiationEquivalentDoseUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "µSv", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("en-US", "mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan)]
        [InlineData("en-US", "mSv", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("en-US", "nSv", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("en-US", "rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan)]
        [InlineData("en-US", "Sv", RadiationEquivalentDoseUnit.Sievert)]
        [InlineData("ru-RU", "мкЗв", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("ru-RU", "мЗв", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("ru-RU", "нЗв", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("ru-RU", "Зв", RadiationEquivalentDoseUnit.Sievert)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, RadiationEquivalentDoseUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(RadiationEquivalentDose.TryParseUnit(abbreviation, out RadiationEquivalentDoseUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "µSv", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("en-US", "mrem", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan)]
        [InlineData("en-US", "mSv", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("en-US", "nSv", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("en-US", "rem", RadiationEquivalentDoseUnit.RoentgenEquivalentMan)]
        [InlineData("en-US", "Sv", RadiationEquivalentDoseUnit.Sievert)]
        [InlineData("ru-RU", "мкЗв", RadiationEquivalentDoseUnit.Microsievert)]
        [InlineData("ru-RU", "мЗв", RadiationEquivalentDoseUnit.Millisievert)]
        [InlineData("ru-RU", "нЗв", RadiationEquivalentDoseUnit.Nanosievert)]
        [InlineData("ru-RU", "Зв", RadiationEquivalentDoseUnit.Sievert)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, RadiationEquivalentDoseUnit expectedUnit)
        {
            Assert.True(RadiationEquivalentDose.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out RadiationEquivalentDoseUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", RadiationEquivalentDoseUnit.Microsievert, "µSv")]
        [InlineData("en-US", RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan, "mrem")]
        [InlineData("en-US", RadiationEquivalentDoseUnit.Millisievert, "mSv")]
        [InlineData("en-US", RadiationEquivalentDoseUnit.Nanosievert, "nSv")]
        [InlineData("en-US", RadiationEquivalentDoseUnit.RoentgenEquivalentMan, "rem")]
        [InlineData("en-US", RadiationEquivalentDoseUnit.Sievert, "Sv")]
        [InlineData("ru-RU", RadiationEquivalentDoseUnit.Microsievert, "мкЗв")]
        [InlineData("ru-RU", RadiationEquivalentDoseUnit.Millisievert, "мЗв")]
        [InlineData("ru-RU", RadiationEquivalentDoseUnit.Nanosievert, "нЗв")]
        [InlineData("ru-RU", RadiationEquivalentDoseUnit.Sievert, "Зв")]
        public void GetAbbreviationForCulture(string culture, RadiationEquivalentDoseUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = RadiationEquivalentDose.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(RadiationEquivalentDose.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = RadiationEquivalentDose.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(RadiationEquivalentDoseUnit unit)
        {
            var inBaseUnits = RadiationEquivalentDose.From(1.0, RadiationEquivalentDose.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(RadiationEquivalentDoseUnit unit)
        {
            var quantity = RadiationEquivalentDose.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(RadiationEquivalentDoseUnit unit)
        {
            Assert.All(RadiationEquivalentDose.Units.Where(u => u != RadiationEquivalentDose.BaseUnit), fromUnit =>
            {
                var quantity = RadiationEquivalentDose.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(RadiationEquivalentDoseUnit unit)
        {
            var quantity = default(RadiationEquivalentDose);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(RadiationEquivalentDoseUnit unit)
        {
            var quantity = RadiationEquivalentDose.From(3, RadiationEquivalentDose.BaseUnit);
            RadiationEquivalentDose expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<RadiationEquivalentDoseUnit> quantityToConvert = quantity;
                IQuantity<RadiationEquivalentDoseUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RadiationEquivalentDose sievert = RadiationEquivalentDose.FromSieverts(3);
            Assert.Equal(3, RadiationEquivalentDose.FromMicrosieverts(sievert.Microsieverts).Sieverts);
            Assert.Equal(3, RadiationEquivalentDose.FromMilliroentgensEquivalentMan(sievert.MilliroentgensEquivalentMan).Sieverts);
            Assert.Equal(3, RadiationEquivalentDose.FromMillisieverts(sievert.Millisieverts).Sieverts);
            Assert.Equal(3, RadiationEquivalentDose.FromNanosieverts(sievert.Nanosieverts).Sieverts);
            Assert.Equal(3, RadiationEquivalentDose.FromRoentgensEquivalentMan(sievert.RoentgensEquivalentMan).Sieverts);
            Assert.Equal(3, RadiationEquivalentDose.FromSieverts(sievert.Sieverts).Sieverts);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RadiationEquivalentDose v = RadiationEquivalentDose.FromSieverts(1);
            Assert.Equal(-1, -v.Sieverts);
            Assert.Equal(2, (RadiationEquivalentDose.FromSieverts(3) - v).Sieverts);
            Assert.Equal(2, (v + v).Sieverts);
            Assert.Equal(10, (v * 10).Sieverts);
            Assert.Equal(10, (10 * v).Sieverts);
            Assert.Equal(2, (RadiationEquivalentDose.FromSieverts(10) / 5).Sieverts);
            Assert.Equal(2, RadiationEquivalentDose.FromSieverts(10) / RadiationEquivalentDose.FromSieverts(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            RadiationEquivalentDose oneSievert = RadiationEquivalentDose.FromSieverts(1);
            RadiationEquivalentDose twoSieverts = RadiationEquivalentDose.FromSieverts(2);

            Assert.True(oneSievert < twoSieverts);
            Assert.True(oneSievert <= twoSieverts);
            Assert.True(twoSieverts > oneSievert);
            Assert.True(twoSieverts >= oneSievert);

            Assert.False(oneSievert > twoSieverts);
            Assert.False(oneSievert >= twoSieverts);
            Assert.False(twoSieverts < oneSievert);
            Assert.False(twoSieverts <= oneSievert);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RadiationEquivalentDose sievert = RadiationEquivalentDose.FromSieverts(1);
            Assert.Equal(0, sievert.CompareTo(sievert));
            Assert.True(sievert.CompareTo(RadiationEquivalentDose.Zero) > 0);
            Assert.True(RadiationEquivalentDose.Zero.CompareTo(sievert) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RadiationEquivalentDose sievert = RadiationEquivalentDose.FromSieverts(1);
            Assert.Throws<ArgumentException>(() => sievert.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RadiationEquivalentDose sievert = RadiationEquivalentDose.FromSieverts(1);
            Assert.Throws<ArgumentNullException>(() => sievert.CompareTo(null));
        }

        [Theory]
        [InlineData(1, RadiationEquivalentDoseUnit.Sievert, 1, RadiationEquivalentDoseUnit.Sievert, true)]  // Same value and unit.
        [InlineData(1, RadiationEquivalentDoseUnit.Sievert, 2, RadiationEquivalentDoseUnit.Sievert, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, RadiationEquivalentDoseUnit unitA, double valueB, RadiationEquivalentDoseUnit unitB, bool expectEqual)
        {
            var a = new RadiationEquivalentDose(valueA, unitA);
            var b = new RadiationEquivalentDose(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = RadiationEquivalentDose.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RadiationEquivalentDose sievert = RadiationEquivalentDose.FromSieverts(1);
            Assert.False(sievert.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RadiationEquivalentDose sievert = RadiationEquivalentDose.FromSieverts(1);
            Assert.False(sievert.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance_IsImplemented(double firstValue, double secondValue)
        {
            var quantity = RadiationEquivalentDose.FromSieverts(firstValue);
            var otherQuantity = RadiationEquivalentDose.FromSieverts(secondValue);
            RadiationEquivalentDose maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, RadiationEquivalentDose.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = RadiationEquivalentDose.FromSieverts(1);
            var negativeTolerance = RadiationEquivalentDose.FromSieverts(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumUtils.GetEnumValues<RadiationEquivalentDoseUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RadiationEquivalentDose.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(RadiationEquivalentDose.Info.Units, RadiationEquivalentDose.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, RadiationEquivalentDose.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 µSv", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.Microsievert).ToString());
            Assert.Equal("1 mrem", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan).ToString());
            Assert.Equal("1 mSv", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.Millisievert).ToString());
            Assert.Equal("1 nSv", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.Nanosievert).ToString());
            Assert.Equal("1 rem", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.RoentgenEquivalentMan).ToString());
            Assert.Equal("1 Sv", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.Sievert).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 µSv", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.Microsievert).ToString(swedishCulture));
            Assert.Equal("1 mrem", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan).ToString(swedishCulture));
            Assert.Equal("1 mSv", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.Millisievert).ToString(swedishCulture));
            Assert.Equal("1 nSv", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.Nanosievert).ToString(swedishCulture));
            Assert.Equal("1 rem", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.RoentgenEquivalentMan).ToString(swedishCulture));
            Assert.Equal("1 Sv", new RadiationEquivalentDose(1, RadiationEquivalentDoseUnit.Sievert).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Sv", new RadiationEquivalentDose(0.123456, RadiationEquivalentDoseUnit.Sievert).ToString("s1"));
            Assert.Equal("0.12 Sv", new RadiationEquivalentDose(0.123456, RadiationEquivalentDoseUnit.Sievert).ToString("s2"));
            Assert.Equal("0.123 Sv", new RadiationEquivalentDose(0.123456, RadiationEquivalentDoseUnit.Sievert).ToString("s3"));
            Assert.Equal("0.1235 Sv", new RadiationEquivalentDose(0.123456, RadiationEquivalentDoseUnit.Sievert).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Sv", new RadiationEquivalentDose(0.123456, RadiationEquivalentDoseUnit.Sievert).ToString("s1", culture));
            Assert.Equal("0.12 Sv", new RadiationEquivalentDose(0.123456, RadiationEquivalentDoseUnit.Sievert).ToString("s2", culture));
            Assert.Equal("0.123 Sv", new RadiationEquivalentDose(0.123456, RadiationEquivalentDoseUnit.Sievert).ToString("s3", culture));
            Assert.Equal("0.1235 Sv", new RadiationEquivalentDose(0.123456, RadiationEquivalentDoseUnit.Sievert).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = RadiationEquivalentDose.FromSieverts(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = RadiationEquivalentDose.FromSieverts(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = RadiationEquivalentDose.FromSieverts(1.0);
            var expected = Comparison.GetHashCode(typeof(RadiationEquivalentDose), quantity.As(RadiationEquivalentDose.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = RadiationEquivalentDose.FromSieverts(value);
            Assert.Equal(RadiationEquivalentDose.FromSieverts(-value), -quantity);
        }
    }
}
