//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricResistivity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricResistivityTestsBase : QuantityTestsBase
    {
        protected abstract double KiloohmsCentimeterInOneOhmMeter { get; }
        protected abstract double KiloohmMetersInOneOhmMeter { get; }
        protected abstract double MegaohmsCentimeterInOneOhmMeter { get; }
        protected abstract double MegaohmMetersInOneOhmMeter { get; }
        protected abstract double MicroohmsCentimeterInOneOhmMeter { get; }
        protected abstract double MicroohmMetersInOneOhmMeter { get; }
        protected abstract double MilliohmsCentimeterInOneOhmMeter { get; }
        protected abstract double MilliohmMetersInOneOhmMeter { get; }
        protected abstract double NanoohmsCentimeterInOneOhmMeter { get; }
        protected abstract double NanoohmMetersInOneOhmMeter { get; }
        protected abstract double OhmsCentimeterInOneOhmMeter { get; }
        protected abstract double OhmMetersInOneOhmMeter { get; }
        protected abstract double PicoohmsCentimeterInOneOhmMeter { get; }
        protected abstract double PicoohmMetersInOneOhmMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KiloohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KiloohmMetersTolerance { get { return 1e-5; } }
        protected virtual double MegaohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MegaohmMetersTolerance { get { return 1e-5; } }
        protected virtual double MicroohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MicroohmMetersTolerance { get { return 1e-5; } }
        protected virtual double MilliohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MilliohmMetersTolerance { get { return 1e-5; } }
        protected virtual double NanoohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NanoohmMetersTolerance { get { return 1e-5; } }
        protected virtual double OhmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double OhmMetersTolerance { get { return 1e-5; } }
        protected virtual double PicoohmsCentimeterTolerance { get { return 1e-5; } }
        protected virtual double PicoohmMetersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricResistivityUnit unit)
        {
            return unit switch
            {
                ElectricResistivityUnit.KiloohmCentimeter => (KiloohmsCentimeterInOneOhmMeter, KiloohmsCentimeterTolerance),
                ElectricResistivityUnit.KiloohmMeter => (KiloohmMetersInOneOhmMeter, KiloohmMetersTolerance),
                ElectricResistivityUnit.MegaohmCentimeter => (MegaohmsCentimeterInOneOhmMeter, MegaohmsCentimeterTolerance),
                ElectricResistivityUnit.MegaohmMeter => (MegaohmMetersInOneOhmMeter, MegaohmMetersTolerance),
                ElectricResistivityUnit.MicroohmCentimeter => (MicroohmsCentimeterInOneOhmMeter, MicroohmsCentimeterTolerance),
                ElectricResistivityUnit.MicroohmMeter => (MicroohmMetersInOneOhmMeter, MicroohmMetersTolerance),
                ElectricResistivityUnit.MilliohmCentimeter => (MilliohmsCentimeterInOneOhmMeter, MilliohmsCentimeterTolerance),
                ElectricResistivityUnit.MilliohmMeter => (MilliohmMetersInOneOhmMeter, MilliohmMetersTolerance),
                ElectricResistivityUnit.NanoohmCentimeter => (NanoohmsCentimeterInOneOhmMeter, NanoohmsCentimeterTolerance),
                ElectricResistivityUnit.NanoohmMeter => (NanoohmMetersInOneOhmMeter, NanoohmMetersTolerance),
                ElectricResistivityUnit.OhmCentimeter => (OhmsCentimeterInOneOhmMeter, OhmsCentimeterTolerance),
                ElectricResistivityUnit.OhmMeter => (OhmMetersInOneOhmMeter, OhmMetersTolerance),
                ElectricResistivityUnit.PicoohmCentimeter => (PicoohmsCentimeterInOneOhmMeter, PicoohmsCentimeterTolerance),
                ElectricResistivityUnit.PicoohmMeter => (PicoohmMetersInOneOhmMeter, PicoohmMetersTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricResistivityUnit.KiloohmCentimeter },
            new object[] { ElectricResistivityUnit.KiloohmMeter },
            new object[] { ElectricResistivityUnit.MegaohmCentimeter },
            new object[] { ElectricResistivityUnit.MegaohmMeter },
            new object[] { ElectricResistivityUnit.MicroohmCentimeter },
            new object[] { ElectricResistivityUnit.MicroohmMeter },
            new object[] { ElectricResistivityUnit.MilliohmCentimeter },
            new object[] { ElectricResistivityUnit.MilliohmMeter },
            new object[] { ElectricResistivityUnit.NanoohmCentimeter },
            new object[] { ElectricResistivityUnit.NanoohmMeter },
            new object[] { ElectricResistivityUnit.OhmCentimeter },
            new object[] { ElectricResistivityUnit.OhmMeter },
            new object[] { ElectricResistivityUnit.PicoohmCentimeter },
            new object[] { ElectricResistivityUnit.PicoohmMeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricResistivity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricResistivityUnit.OhmMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ElectricResistivity(double.PositiveInfinity, ElectricResistivityUnit.OhmMeter));
            var exception2 = Record.Exception(() => new ElectricResistivity(double.NegativeInfinity, ElectricResistivityUnit.OhmMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ElectricResistivity(double.NaN, ElectricResistivityUnit.OhmMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricResistivity(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ElectricResistivity(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ElectricResistivity(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ElectricResistivity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ElectricResistivityUnit[] unitsOrderedByName = EnumHelper.GetValues<ElectricResistivityUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new ElectricResistivity(1, ElectricResistivityUnit.OhmMeter);

            QuantityInfo<ElectricResistivity, ElectricResistivityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("ElectricResistivity", quantityInfo.Name);
            Assert.Equal(ElectricResistivity.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricResistivity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(ElectricResistivity.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ElectricResistivityUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void ElectricResistivityInfo_CreateWithCustomUnitInfos()
        {
            ElectricResistivityUnit[] expectedUnits = [ElectricResistivityUnit.OhmMeter];

            ElectricResistivity.ElectricResistivityInfo quantityInfo = ElectricResistivity.ElectricResistivityInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("ElectricResistivity", quantityInfo.Name);
            Assert.Equal(ElectricResistivity.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricResistivity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void OhmMeterToElectricResistivityUnits()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmMeters(1);
            AssertEx.EqualTolerance(KiloohmsCentimeterInOneOhmMeter, ohmmeter.KiloohmsCentimeter, KiloohmsCentimeterTolerance);
            AssertEx.EqualTolerance(KiloohmMetersInOneOhmMeter, ohmmeter.KiloohmMeters, KiloohmMetersTolerance);
            AssertEx.EqualTolerance(MegaohmsCentimeterInOneOhmMeter, ohmmeter.MegaohmsCentimeter, MegaohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MegaohmMetersInOneOhmMeter, ohmmeter.MegaohmMeters, MegaohmMetersTolerance);
            AssertEx.EqualTolerance(MicroohmsCentimeterInOneOhmMeter, ohmmeter.MicroohmsCentimeter, MicroohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MicroohmMetersInOneOhmMeter, ohmmeter.MicroohmMeters, MicroohmMetersTolerance);
            AssertEx.EqualTolerance(MilliohmsCentimeterInOneOhmMeter, ohmmeter.MilliohmsCentimeter, MilliohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MilliohmMetersInOneOhmMeter, ohmmeter.MilliohmMeters, MilliohmMetersTolerance);
            AssertEx.EqualTolerance(NanoohmsCentimeterInOneOhmMeter, ohmmeter.NanoohmsCentimeter, NanoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(NanoohmMetersInOneOhmMeter, ohmmeter.NanoohmMeters, NanoohmMetersTolerance);
            AssertEx.EqualTolerance(OhmsCentimeterInOneOhmMeter, ohmmeter.OhmsCentimeter, OhmsCentimeterTolerance);
            AssertEx.EqualTolerance(OhmMetersInOneOhmMeter, ohmmeter.OhmMeters, OhmMetersTolerance);
            AssertEx.EqualTolerance(PicoohmsCentimeterInOneOhmMeter, ohmmeter.PicoohmsCentimeter, PicoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(PicoohmMetersInOneOhmMeter, ohmmeter.PicoohmMeters, PicoohmMetersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<ElectricResistivityUnit>(), unit =>
            {
                var quantity = ElectricResistivity.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromOhmMeters_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ElectricResistivity.FromOhmMeters(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ElectricResistivity.FromOhmMeters(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromOhmMeters_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ElectricResistivity.FromOhmMeters(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var ohmmeter = ElectricResistivity.FromOhmMeters(1);
            AssertEx.EqualTolerance(KiloohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.KiloohmCentimeter), KiloohmsCentimeterTolerance);
            AssertEx.EqualTolerance(KiloohmMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.KiloohmMeter), KiloohmMetersTolerance);
            AssertEx.EqualTolerance(MegaohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MegaohmCentimeter), MegaohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MegaohmMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MegaohmMeter), MegaohmMetersTolerance);
            AssertEx.EqualTolerance(MicroohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MicroohmCentimeter), MicroohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MicroohmMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MicroohmMeter), MicroohmMetersTolerance);
            AssertEx.EqualTolerance(MilliohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MilliohmCentimeter), MilliohmsCentimeterTolerance);
            AssertEx.EqualTolerance(MilliohmMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.MilliohmMeter), MilliohmMetersTolerance);
            AssertEx.EqualTolerance(NanoohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.NanoohmCentimeter), NanoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(NanoohmMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.NanoohmMeter), NanoohmMetersTolerance);
            AssertEx.EqualTolerance(OhmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.OhmCentimeter), OhmsCentimeterTolerance);
            AssertEx.EqualTolerance(OhmMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.OhmMeter), OhmMetersTolerance);
            AssertEx.EqualTolerance(PicoohmsCentimeterInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.PicoohmCentimeter), PicoohmsCentimeterTolerance);
            AssertEx.EqualTolerance(PicoohmMetersInOneOhmMeter, ohmmeter.As(ElectricResistivityUnit.PicoohmMeter), PicoohmMetersTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ElectricResistivity.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
            var expectedValue = quantity.As(ElectricResistivity.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
            var expectedUnit = ElectricResistivity.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ElectricResistivity quantityToConvert = quantity;

                ElectricResistivity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ElectricResistivityUnit> quantityToConvert = quantity;

                IQuantity<ElectricResistivityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ElectricResistivityUnit> quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ElectricResistivityUnit> quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricResistivity(value: 1, unit: ElectricResistivity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kΩ·m", ElectricResistivityUnit.KiloohmMeter, 4.2)]
        [InlineData("en-US", "4.2 MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 MΩ·m", ElectricResistivityUnit.MegaohmMeter, 4.2)]
        [InlineData("en-US", "4.2 µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 µΩ·m", ElectricResistivityUnit.MicroohmMeter, 4.2)]
        [InlineData("en-US", "4.2 mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mΩ·m", ElectricResistivityUnit.MilliohmMeter, 4.2)]
        [InlineData("en-US", "4.2 nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 nΩ·m", ElectricResistivityUnit.NanoohmMeter, 4.2)]
        [InlineData("en-US", "4.2 Ω·cm", ElectricResistivityUnit.OhmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Ω·m", ElectricResistivityUnit.OhmMeter, 4.2)]
        [InlineData("en-US", "4.2 pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 pΩ·m", ElectricResistivityUnit.PicoohmMeter, 4.2)]
        public void Parse(string culture, string quantityString, ElectricResistivityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = ElectricResistivity.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kΩ·m", ElectricResistivityUnit.KiloohmMeter, 4.2)]
        [InlineData("en-US", "4.2 MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 MΩ·m", ElectricResistivityUnit.MegaohmMeter, 4.2)]
        [InlineData("en-US", "4.2 µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 µΩ·m", ElectricResistivityUnit.MicroohmMeter, 4.2)]
        [InlineData("en-US", "4.2 mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mΩ·m", ElectricResistivityUnit.MilliohmMeter, 4.2)]
        [InlineData("en-US", "4.2 nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 nΩ·m", ElectricResistivityUnit.NanoohmMeter, 4.2)]
        [InlineData("en-US", "4.2 Ω·cm", ElectricResistivityUnit.OhmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Ω·m", ElectricResistivityUnit.OhmMeter, 4.2)]
        [InlineData("en-US", "4.2 pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter, 4.2)]
        [InlineData("en-US", "4.2 pΩ·m", ElectricResistivityUnit.PicoohmMeter, 4.2)]
        public void TryParse(string culture, string quantityString, ElectricResistivityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricResistivity.TryParse(quantityString, out ElectricResistivity parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter)]
        [InlineData("kΩ·m", ElectricResistivityUnit.KiloohmMeter)]
        [InlineData("MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter)]
        [InlineData("MΩ·m", ElectricResistivityUnit.MegaohmMeter)]
        [InlineData("µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter)]
        [InlineData("µΩ·m", ElectricResistivityUnit.MicroohmMeter)]
        [InlineData("mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter)]
        [InlineData("mΩ·m", ElectricResistivityUnit.MilliohmMeter)]
        [InlineData("nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter)]
        [InlineData("nΩ·m", ElectricResistivityUnit.NanoohmMeter)]
        [InlineData("Ω·cm", ElectricResistivityUnit.OhmCentimeter)]
        [InlineData("Ω·m", ElectricResistivityUnit.OhmMeter)]
        [InlineData("pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter)]
        [InlineData("pΩ·m", ElectricResistivityUnit.PicoohmMeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricResistivityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ElectricResistivityUnit parsedUnit = ElectricResistivity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter)]
        [InlineData("kΩ·m", ElectricResistivityUnit.KiloohmMeter)]
        [InlineData("MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter)]
        [InlineData("MΩ·m", ElectricResistivityUnit.MegaohmMeter)]
        [InlineData("µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter)]
        [InlineData("µΩ·m", ElectricResistivityUnit.MicroohmMeter)]
        [InlineData("mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter)]
        [InlineData("mΩ·m", ElectricResistivityUnit.MilliohmMeter)]
        [InlineData("nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter)]
        [InlineData("nΩ·m", ElectricResistivityUnit.NanoohmMeter)]
        [InlineData("Ω·cm", ElectricResistivityUnit.OhmCentimeter)]
        [InlineData("Ω·m", ElectricResistivityUnit.OhmMeter)]
        [InlineData("pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter)]
        [InlineData("pΩ·m", ElectricResistivityUnit.PicoohmMeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricResistivityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ElectricResistivityUnit parsedUnit = ElectricResistivity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter)]
        [InlineData("en-US", "kΩ·m", ElectricResistivityUnit.KiloohmMeter)]
        [InlineData("en-US", "MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter)]
        [InlineData("en-US", "MΩ·m", ElectricResistivityUnit.MegaohmMeter)]
        [InlineData("en-US", "µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter)]
        [InlineData("en-US", "µΩ·m", ElectricResistivityUnit.MicroohmMeter)]
        [InlineData("en-US", "mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter)]
        [InlineData("en-US", "mΩ·m", ElectricResistivityUnit.MilliohmMeter)]
        [InlineData("en-US", "nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter)]
        [InlineData("en-US", "nΩ·m", ElectricResistivityUnit.NanoohmMeter)]
        [InlineData("en-US", "Ω·cm", ElectricResistivityUnit.OhmCentimeter)]
        [InlineData("en-US", "Ω·m", ElectricResistivityUnit.OhmMeter)]
        [InlineData("en-US", "pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter)]
        [InlineData("en-US", "pΩ·m", ElectricResistivityUnit.PicoohmMeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricResistivityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ElectricResistivityUnit parsedUnit = ElectricResistivity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter)]
        [InlineData("en-US", "kΩ·m", ElectricResistivityUnit.KiloohmMeter)]
        [InlineData("en-US", "MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter)]
        [InlineData("en-US", "MΩ·m", ElectricResistivityUnit.MegaohmMeter)]
        [InlineData("en-US", "µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter)]
        [InlineData("en-US", "µΩ·m", ElectricResistivityUnit.MicroohmMeter)]
        [InlineData("en-US", "mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter)]
        [InlineData("en-US", "mΩ·m", ElectricResistivityUnit.MilliohmMeter)]
        [InlineData("en-US", "nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter)]
        [InlineData("en-US", "nΩ·m", ElectricResistivityUnit.NanoohmMeter)]
        [InlineData("en-US", "Ω·cm", ElectricResistivityUnit.OhmCentimeter)]
        [InlineData("en-US", "Ω·m", ElectricResistivityUnit.OhmMeter)]
        [InlineData("en-US", "pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter)]
        [InlineData("en-US", "pΩ·m", ElectricResistivityUnit.PicoohmMeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ElectricResistivityUnit expectedUnit)
        {
            ElectricResistivityUnit parsedUnit = ElectricResistivity.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter)]
        [InlineData("kΩ·m", ElectricResistivityUnit.KiloohmMeter)]
        [InlineData("MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter)]
        [InlineData("MΩ·m", ElectricResistivityUnit.MegaohmMeter)]
        [InlineData("µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter)]
        [InlineData("µΩ·m", ElectricResistivityUnit.MicroohmMeter)]
        [InlineData("mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter)]
        [InlineData("mΩ·m", ElectricResistivityUnit.MilliohmMeter)]
        [InlineData("nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter)]
        [InlineData("nΩ·m", ElectricResistivityUnit.NanoohmMeter)]
        [InlineData("Ω·cm", ElectricResistivityUnit.OhmCentimeter)]
        [InlineData("Ω·m", ElectricResistivityUnit.OhmMeter)]
        [InlineData("pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter)]
        [InlineData("pΩ·m", ElectricResistivityUnit.PicoohmMeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricResistivityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ElectricResistivity.TryParseUnit(abbreviation, out ElectricResistivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter)]
        [InlineData("kΩ·m", ElectricResistivityUnit.KiloohmMeter)]
        [InlineData("MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter)]
        [InlineData("MΩ·m", ElectricResistivityUnit.MegaohmMeter)]
        [InlineData("µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter)]
        [InlineData("µΩ·m", ElectricResistivityUnit.MicroohmMeter)]
        [InlineData("mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter)]
        [InlineData("mΩ·m", ElectricResistivityUnit.MilliohmMeter)]
        [InlineData("nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter)]
        [InlineData("nΩ·m", ElectricResistivityUnit.NanoohmMeter)]
        [InlineData("Ω·cm", ElectricResistivityUnit.OhmCentimeter)]
        [InlineData("Ω·m", ElectricResistivityUnit.OhmMeter)]
        [InlineData("pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter)]
        [InlineData("pΩ·m", ElectricResistivityUnit.PicoohmMeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricResistivityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ElectricResistivity.TryParseUnit(abbreviation, out ElectricResistivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter)]
        [InlineData("en-US", "kΩ·m", ElectricResistivityUnit.KiloohmMeter)]
        [InlineData("en-US", "MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter)]
        [InlineData("en-US", "MΩ·m", ElectricResistivityUnit.MegaohmMeter)]
        [InlineData("en-US", "µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter)]
        [InlineData("en-US", "µΩ·m", ElectricResistivityUnit.MicroohmMeter)]
        [InlineData("en-US", "mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter)]
        [InlineData("en-US", "mΩ·m", ElectricResistivityUnit.MilliohmMeter)]
        [InlineData("en-US", "nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter)]
        [InlineData("en-US", "nΩ·m", ElectricResistivityUnit.NanoohmMeter)]
        [InlineData("en-US", "Ω·cm", ElectricResistivityUnit.OhmCentimeter)]
        [InlineData("en-US", "Ω·m", ElectricResistivityUnit.OhmMeter)]
        [InlineData("en-US", "pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter)]
        [InlineData("en-US", "pΩ·m", ElectricResistivityUnit.PicoohmMeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricResistivityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricResistivity.TryParseUnit(abbreviation, out ElectricResistivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kΩ·cm", ElectricResistivityUnit.KiloohmCentimeter)]
        [InlineData("en-US", "kΩ·m", ElectricResistivityUnit.KiloohmMeter)]
        [InlineData("en-US", "MΩ·cm", ElectricResistivityUnit.MegaohmCentimeter)]
        [InlineData("en-US", "MΩ·m", ElectricResistivityUnit.MegaohmMeter)]
        [InlineData("en-US", "µΩ·cm", ElectricResistivityUnit.MicroohmCentimeter)]
        [InlineData("en-US", "µΩ·m", ElectricResistivityUnit.MicroohmMeter)]
        [InlineData("en-US", "mΩ·cm", ElectricResistivityUnit.MilliohmCentimeter)]
        [InlineData("en-US", "mΩ·m", ElectricResistivityUnit.MilliohmMeter)]
        [InlineData("en-US", "nΩ·cm", ElectricResistivityUnit.NanoohmCentimeter)]
        [InlineData("en-US", "nΩ·m", ElectricResistivityUnit.NanoohmMeter)]
        [InlineData("en-US", "Ω·cm", ElectricResistivityUnit.OhmCentimeter)]
        [InlineData("en-US", "Ω·m", ElectricResistivityUnit.OhmMeter)]
        [InlineData("en-US", "pΩ·cm", ElectricResistivityUnit.PicoohmCentimeter)]
        [InlineData("en-US", "pΩ·m", ElectricResistivityUnit.PicoohmMeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ElectricResistivityUnit expectedUnit)
        {
            Assert.True(ElectricResistivity.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ElectricResistivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", ElectricResistivityUnit.KiloohmCentimeter, "kΩ·cm")]
        [InlineData("en-US", ElectricResistivityUnit.KiloohmMeter, "kΩ·m")]
        [InlineData("en-US", ElectricResistivityUnit.MegaohmCentimeter, "MΩ·cm")]
        [InlineData("en-US", ElectricResistivityUnit.MegaohmMeter, "MΩ·m")]
        [InlineData("en-US", ElectricResistivityUnit.MicroohmCentimeter, "µΩ·cm")]
        [InlineData("en-US", ElectricResistivityUnit.MicroohmMeter, "µΩ·m")]
        [InlineData("en-US", ElectricResistivityUnit.MilliohmCentimeter, "mΩ·cm")]
        [InlineData("en-US", ElectricResistivityUnit.MilliohmMeter, "mΩ·m")]
        [InlineData("en-US", ElectricResistivityUnit.NanoohmCentimeter, "nΩ·cm")]
        [InlineData("en-US", ElectricResistivityUnit.NanoohmMeter, "nΩ·m")]
        [InlineData("en-US", ElectricResistivityUnit.OhmCentimeter, "Ω·cm")]
        [InlineData("en-US", ElectricResistivityUnit.OhmMeter, "Ω·m")]
        [InlineData("en-US", ElectricResistivityUnit.PicoohmCentimeter, "pΩ·cm")]
        [InlineData("en-US", ElectricResistivityUnit.PicoohmMeter, "pΩ·m")]
        public void GetAbbreviationForCulture(string culture, ElectricResistivityUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = ElectricResistivity.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(ElectricResistivity.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = ElectricResistivity.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricResistivityUnit unit)
        {
            var inBaseUnits = ElectricResistivity.From(1.0, ElectricResistivity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricResistivityUnit unit)
        {
            var quantity = ElectricResistivity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricResistivityUnit unit)
        {
            Assert.All(ElectricResistivity.Units.Where(u => u != ElectricResistivity.BaseUnit), fromUnit =>
            {
                var quantity = ElectricResistivity.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricResistivityUnit unit)
        {
            var quantity = default(ElectricResistivity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ElectricResistivityUnit unit)
        {
            var quantity = ElectricResistivity.From(3, ElectricResistivity.BaseUnit);
            ElectricResistivity expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ElectricResistivityUnit> quantityToConvert = quantity;
                IQuantity<ElectricResistivityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmMeters(3);
            Assert.Equal(3, ElectricResistivity.FromKiloohmsCentimeter(ohmmeter.KiloohmsCentimeter).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromKiloohmMeters(ohmmeter.KiloohmMeters).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromMegaohmsCentimeter(ohmmeter.MegaohmsCentimeter).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromMegaohmMeters(ohmmeter.MegaohmMeters).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromMicroohmsCentimeter(ohmmeter.MicroohmsCentimeter).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromMicroohmMeters(ohmmeter.MicroohmMeters).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromMilliohmsCentimeter(ohmmeter.MilliohmsCentimeter).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromMilliohmMeters(ohmmeter.MilliohmMeters).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromNanoohmsCentimeter(ohmmeter.NanoohmsCentimeter).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromNanoohmMeters(ohmmeter.NanoohmMeters).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromOhmsCentimeter(ohmmeter.OhmsCentimeter).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromOhmMeters(ohmmeter.OhmMeters).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromPicoohmsCentimeter(ohmmeter.PicoohmsCentimeter).OhmMeters);
            Assert.Equal(3, ElectricResistivity.FromPicoohmMeters(ohmmeter.PicoohmMeters).OhmMeters);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricResistivity v = ElectricResistivity.FromOhmMeters(1);
            Assert.Equal(-1, -v.OhmMeters);
            Assert.Equal(2, (ElectricResistivity.FromOhmMeters(3) - v).OhmMeters);
            Assert.Equal(2, (v + v).OhmMeters);
            Assert.Equal(10, (v * 10).OhmMeters);
            Assert.Equal(10, (10 * v).OhmMeters);
            Assert.Equal(2, (ElectricResistivity.FromOhmMeters(10) / 5).OhmMeters);
            Assert.Equal(2, ElectricResistivity.FromOhmMeters(10) / ElectricResistivity.FromOhmMeters(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricResistivity oneOhmMeter = ElectricResistivity.FromOhmMeters(1);
            ElectricResistivity twoOhmMeters = ElectricResistivity.FromOhmMeters(2);

            Assert.True(oneOhmMeter < twoOhmMeters);
            Assert.True(oneOhmMeter <= twoOhmMeters);
            Assert.True(twoOhmMeters > oneOhmMeter);
            Assert.True(twoOhmMeters >= oneOhmMeter);

            Assert.False(oneOhmMeter > twoOhmMeters);
            Assert.False(oneOhmMeter >= twoOhmMeters);
            Assert.False(twoOhmMeters < oneOhmMeter);
            Assert.False(twoOhmMeters <= oneOhmMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmMeters(1);
            Assert.Equal(0, ohmmeter.CompareTo(ohmmeter));
            Assert.True(ohmmeter.CompareTo(ElectricResistivity.Zero) > 0);
            Assert.True(ElectricResistivity.Zero.CompareTo(ohmmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmMeters(1);
            Assert.Throws<ArgumentException>(() => ohmmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmMeters(1);
            Assert.Throws<ArgumentNullException>(() => ohmmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricResistivityUnit.OhmMeter, 1, ElectricResistivityUnit.OhmMeter, true)]  // Same value and unit.
        [InlineData(1, ElectricResistivityUnit.OhmMeter, 2, ElectricResistivityUnit.OhmMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricResistivityUnit unitA, double valueB, ElectricResistivityUnit unitB, bool expectEqual)
        {
            var a = new ElectricResistivity(valueA, unitA);
            var b = new ElectricResistivity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricResistivity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmMeters(1);
            Assert.False(ohmmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricResistivity ohmmeter = ElectricResistivity.FromOhmMeters(1);
            Assert.False(ohmmeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = ElectricResistivity.FromOhmMeters(firstValue);
            var otherQuantity = ElectricResistivity.FromOhmMeters(secondValue);
            ElectricResistivity maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, ElectricResistivity.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = ElectricResistivity.FromOhmMeters(1);
            var negativeTolerance = ElectricResistivity.FromOhmMeters(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<ElectricResistivityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricResistivity.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(ElectricResistivity.Info.Units, ElectricResistivity.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, ElectricResistivity.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 kΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.KiloohmCentimeter).ToString());
            Assert.Equal("1 kΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.KiloohmMeter).ToString());
            Assert.Equal("1 MΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.MegaohmCentimeter).ToString());
            Assert.Equal("1 MΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.MegaohmMeter).ToString());
            Assert.Equal("1 µΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.MicroohmCentimeter).ToString());
            Assert.Equal("1 µΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.MicroohmMeter).ToString());
            Assert.Equal("1 mΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.MilliohmCentimeter).ToString());
            Assert.Equal("1 mΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.MilliohmMeter).ToString());
            Assert.Equal("1 nΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.NanoohmCentimeter).ToString());
            Assert.Equal("1 nΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.NanoohmMeter).ToString());
            Assert.Equal("1 Ω·cm", new ElectricResistivity(1, ElectricResistivityUnit.OhmCentimeter).ToString());
            Assert.Equal("1 Ω·m", new ElectricResistivity(1, ElectricResistivityUnit.OhmMeter).ToString());
            Assert.Equal("1 pΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.PicoohmCentimeter).ToString());
            Assert.Equal("1 pΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.PicoohmMeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.KiloohmCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.KiloohmMeter).ToString(swedishCulture));
            Assert.Equal("1 MΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.MegaohmCentimeter).ToString(swedishCulture));
            Assert.Equal("1 MΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.MegaohmMeter).ToString(swedishCulture));
            Assert.Equal("1 µΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.MicroohmCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.MicroohmMeter).ToString(swedishCulture));
            Assert.Equal("1 mΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.MilliohmCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.MilliohmMeter).ToString(swedishCulture));
            Assert.Equal("1 nΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.NanoohmCentimeter).ToString(swedishCulture));
            Assert.Equal("1 nΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.NanoohmMeter).ToString(swedishCulture));
            Assert.Equal("1 Ω·cm", new ElectricResistivity(1, ElectricResistivityUnit.OhmCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Ω·m", new ElectricResistivity(1, ElectricResistivityUnit.OhmMeter).ToString(swedishCulture));
            Assert.Equal("1 pΩ·cm", new ElectricResistivity(1, ElectricResistivityUnit.PicoohmCentimeter).ToString(swedishCulture));
            Assert.Equal("1 pΩ·m", new ElectricResistivity(1, ElectricResistivityUnit.PicoohmMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Ω·m", new ElectricResistivity(0.123456, ElectricResistivityUnit.OhmMeter).ToString("s1"));
            Assert.Equal("0.12 Ω·m", new ElectricResistivity(0.123456, ElectricResistivityUnit.OhmMeter).ToString("s2"));
            Assert.Equal("0.123 Ω·m", new ElectricResistivity(0.123456, ElectricResistivityUnit.OhmMeter).ToString("s3"));
            Assert.Equal("0.1235 Ω·m", new ElectricResistivity(0.123456, ElectricResistivityUnit.OhmMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Ω·m", new ElectricResistivity(0.123456, ElectricResistivityUnit.OhmMeter).ToString("s1", culture));
            Assert.Equal("0.12 Ω·m", new ElectricResistivity(0.123456, ElectricResistivityUnit.OhmMeter).ToString("s2", culture));
            Assert.Equal("0.123 Ω·m", new ElectricResistivity(0.123456, ElectricResistivityUnit.OhmMeter).ToString("s3", culture));
            Assert.Equal("0.1235 Ω·m", new ElectricResistivity(0.123456, ElectricResistivityUnit.OhmMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricResistivity.FromOhmMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricResistivity.FromOhmMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricResistivity.FromOhmMeters(1.0);
            var expected = Comparison.GetHashCode(typeof(ElectricResistivity), quantity.As(ElectricResistivity.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricResistivity.FromOhmMeters(value);
            Assert.Equal(ElectricResistivity.FromOhmMeters(-value), -quantity);
        }
    }
}
