//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Diagnostics;
using System.Diagnostics.CodeAnalysis;
using System.Globalization;
using System.Numerics;
using System.Resources;
using System.Runtime.Serialization;
using UnitsNet.Units;
using UnitsNet.Debug;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Torque, moment or moment of force (see the terminology below), is the tendency of a force to rotate an object about an axis,[1] fulcrum, or pivot. Just as a force is a push or a pull, a torque can be thought of as a twist to an object. Mathematically, torque is defined as the cross product of the lever-arm distance and force, which tends to produce rotation. Loosely speaking, torque is a measure of the turning force on an object such as a bolt or a flywheel. For example, pushing or pulling the handle of a wrench connected to a nut or bolt produces a torque (turning force) that loosens or tightens the nut or bolt.
    /// </summary>
    [DataContract]
    [DebuggerDisplay(QuantityDebugProxy.DisplayFormat)]
    [DebuggerTypeProxy(typeof(QuantityDebugProxy))]
    public readonly partial struct Torque :
        IArithmeticQuantity<Torque, TorqueUnit>,
#if NET7_0_OR_GREATER
        IDivisionOperators<Torque, RotationalStiffness, Angle>,
        IDivisionOperators<Torque, ForcePerLength, Area>,
        IDivisionOperators<Torque, Length, Force>,
        IDivisionOperators<Torque, Area, ForcePerLength>,
        IDivisionOperators<Torque, Force, Length>,
        IMultiplyOperators<Torque, RotationalSpeed, Power>,
        IDivisionOperators<Torque, Angle, RotationalStiffness>,
#endif
#if NET7_0_OR_GREATER
        IComparisonOperators<Torque, Torque, bool>,
        IParsable<Torque>,
#endif
        IComparable,
        IComparable<Torque>,
        IEquatable<Torque>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly TorqueUnit? _unit;

        /// <summary>
        ///     Provides detailed information about the <see cref="Torque"/> quantity, including its name, base unit, unit mappings, base dimensions, and conversion functions.
        /// </summary>
        public sealed class TorqueInfo: QuantityInfo<Torque, TorqueUnit>
        {
            /// <inheritdoc />
            public TorqueInfo(string name, TorqueUnit baseUnit, IEnumerable<IUnitDefinition<TorqueUnit>> unitMappings, Torque zero, BaseDimensions baseDimensions,
                QuantityFromDelegate<Torque, TorqueUnit> fromDelegate, ResourceManager? unitAbbreviations)
                : base(name, baseUnit, unitMappings, zero, baseDimensions, fromDelegate, unitAbbreviations)
            {
            }

            /// <inheritdoc />
            public TorqueInfo(string name, TorqueUnit baseUnit, IEnumerable<IUnitDefinition<TorqueUnit>> unitMappings, Torque zero, BaseDimensions baseDimensions)
                : this(name, baseUnit, unitMappings, zero, baseDimensions, Torque.From, new ResourceManager("UnitsNet.GeneratedCode.Resources.Torque", typeof(Torque).Assembly))
            {
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="TorqueInfo"/> class with the default settings for the Torque quantity.
            /// </summary>
            /// <returns>A new instance of the <see cref="TorqueInfo"/> class with the default settings.</returns>
            public static TorqueInfo CreateDefault()
            {
                return new TorqueInfo(nameof(Torque), DefaultBaseUnit, GetDefaultMappings(), new Torque(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="TorqueInfo"/> class with the default settings for the Torque quantity and a callback for customizing the default unit mappings.
            /// </summary>
            /// <param name="customizeUnits">
            ///     A callback function for customizing the default unit mappings.
            /// </param>
            /// <returns>
            ///     A new instance of the <see cref="TorqueInfo"/> class with the default settings.
            /// </returns>
            public static TorqueInfo CreateDefault(Func<IEnumerable<UnitDefinition<TorqueUnit>>, IEnumerable<IUnitDefinition<TorqueUnit>>> customizeUnits)
            {
                return new TorqueInfo(nameof(Torque), DefaultBaseUnit, customizeUnits(GetDefaultMappings()), new Torque(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     The <see cref="BaseDimensions" /> for <see cref="Torque"/> is T^-2L^2M.
            /// </summary>
            public static BaseDimensions DefaultBaseDimensions { get; } = new BaseDimensions(2, 1, -2, 0, 0, 0, 0);

            /// <summary>
            ///     The default base unit of Torque is NewtonMeter. All conversions, as defined in the <see cref="GetDefaultMappings"/>, go via this value.
            /// </summary>
            public static TorqueUnit DefaultBaseUnit { get; } = TorqueUnit.NewtonMeter;

            /// <summary>
            ///     Retrieves the default mappings for <see cref="TorqueUnit"/>.
            /// </summary>
            /// <returns>An <see cref="IEnumerable{T}"/> of <see cref="UnitDefinition{TorqueUnit}"/> representing the default unit mappings for Torque.</returns>
            public static IEnumerable<UnitDefinition<TorqueUnit>> GetDefaultMappings()
            {
                yield return new (TorqueUnit.GramForceCentimeter, "GramForceCentimeter", "GramForceCentimeters", BaseUnits.Undefined,
                     new QuantityValue(2000000000, 196133)             
                );
                yield return new (TorqueUnit.GramForceMeter, "GramForceMeter", "GramForceMeters", BaseUnits.Undefined,
                     new QuantityValue(20000000, 196133)             
                );
                yield return new (TorqueUnit.GramForceMillimeter, "GramForceMillimeter", "GramForceMillimeters", BaseUnits.Undefined,
                     new QuantityValue(20000000000, 196133)             
                );
                yield return new (TorqueUnit.KilogramForceCentimeter, "KilogramForceCentimeter", "KilogramForceCentimeters", BaseUnits.Undefined,
                     new QuantityValue(2000000, 196133)             
                );
                yield return new (TorqueUnit.KilogramForceMeter, "KilogramForceMeter", "KilogramForceMeters", BaseUnits.Undefined,
                     new QuantityValue(20000, 196133)             
                );
                yield return new (TorqueUnit.KilogramForceMillimeter, "KilogramForceMillimeter", "KilogramForceMillimeters", BaseUnits.Undefined,
                     new QuantityValue(20000000, 196133)             
                );
                yield return new (TorqueUnit.KilonewtonCentimeter, "KilonewtonCentimeter", "KilonewtonCentimeters", BaseUnits.Undefined,
                     new QuantityValue(1, 10)             
                );
                yield return new (TorqueUnit.KilonewtonMeter, "KilonewtonMeter", "KilonewtonMeters", BaseUnits.Undefined,
                     new QuantityValue(1, 1000)             
                );
                yield return new (TorqueUnit.KilonewtonMillimeter, "KilonewtonMillimeter", "KilonewtonMillimeters", BaseUnits.Undefined,
                     1             
                );
                yield return new (TorqueUnit.KilopoundForceFoot, "KilopoundForceFoot", "KilopoundForceFeet", BaseUnits.Undefined,
                     new QuantityValue(2500000000000, 3389544870828501)             
                );
                yield return new (TorqueUnit.KilopoundForceInch, "KilopoundForceInch", "KilopoundForceInches", BaseUnits.Undefined,
                     new QuantityValue(10000000000000, 1129848290276167)             
                );
                yield return new (TorqueUnit.MeganewtonCentimeter, "MeganewtonCentimeter", "MeganewtonCentimeters", BaseUnits.Undefined,
                     new QuantityValue(1, 10000)             
                );
                yield return new (TorqueUnit.MeganewtonMeter, "MeganewtonMeter", "MeganewtonMeters", new BaseUnits(length: LengthUnit.Kilometer, mass: MassUnit.Kilogram, time: DurationUnit.Second),
                     new QuantityValue(1, 1000000)             
                );
                yield return new (TorqueUnit.MeganewtonMillimeter, "MeganewtonMillimeter", "MeganewtonMillimeters", BaseUnits.Undefined,
                     new QuantityValue(1, 1000)             
                );
                yield return new (TorqueUnit.MegapoundForceFoot, "MegapoundForceFoot", "MegapoundForceFeet", BaseUnits.Undefined,
                     new QuantityValue(2500000000, 3389544870828501)             
                );
                yield return new (TorqueUnit.MegapoundForceInch, "MegapoundForceInch", "MegapoundForceInches", BaseUnits.Undefined,
                     new QuantityValue(10000000000, 1129848290276167)             
                );
                yield return new (TorqueUnit.NewtonCentimeter, "NewtonCentimeter", "NewtonCentimeters", BaseUnits.Undefined,
                     100             
                );
                yield return new (TorqueUnit.NewtonMeter, "NewtonMeter", "NewtonMeters", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram, time: DurationUnit.Second));
                yield return new (TorqueUnit.NewtonMillimeter, "NewtonMillimeter", "NewtonMillimeters", BaseUnits.Undefined,
                     1000             
                );
                yield return new (TorqueUnit.PoundalFoot, "PoundalFoot", "PoundalFeet", BaseUnits.Undefined,
                     new QuantityValue(156250000000000, 6584392202157)             
                );
                yield return new (TorqueUnit.PoundForceFoot, "PoundForceFoot", "PoundForceFeet", BaseUnits.Undefined,
                     new QuantityValue(2500000000000000, 3389544870828501)             
                );
                yield return new (TorqueUnit.PoundForceInch, "PoundForceInch", "PoundForceInches", BaseUnits.Undefined,
                     new QuantityValue(10000000000000000, 1129848290276167)             
                );
                yield return new (TorqueUnit.TonneForceCentimeter, "TonneForceCentimeter", "TonneForceCentimeters", BaseUnits.Undefined,
                     new QuantityValue(2000, 196133)             
                );
                yield return new (TorqueUnit.TonneForceMeter, "TonneForceMeter", "TonneForceMeters", BaseUnits.Undefined,
                     new QuantityValue(20, 196133)             
                );
                yield return new (TorqueUnit.TonneForceMillimeter, "TonneForceMillimeter", "TonneForceMillimeters", BaseUnits.Undefined,
                     new QuantityValue(20000, 196133)             
                );
            }
        }

        static Torque()
        {
            Info = UnitsNetSetup.CreateQuantityInfo(TorqueInfo.CreateDefault);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Torque(QuantityValue value, TorqueUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Torque(QuantityValue value, UnitSystem unitSystem)
        {
            _value = value;
            _unit = Info.GetDefaultUnit(unitSystem);
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Torque" /> instances.
        /// </summary>
        [Obsolete("Replaced by UnitConverter.Default")]
        public static UnitConverter DefaultConversionFunctions => UnitConverter.Default;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<Torque, TorqueUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions => Info.BaseDimensions;

        /// <summary>
        ///     The base unit of Torque, which is NewtonMeter. All conversions go via this value.
        /// </summary>
        public static TorqueUnit BaseUnit => Info.BaseUnitInfo.Value;

        /// <summary>
        ///     All units of measurement for the Torque quantity.
        /// </summary>
        public static IReadOnlyCollection<TorqueUnit> Units => Info.Units;

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit NewtonMeter.
        /// </summary>
        public static Torque Zero => Info.Zero;

        #endregion

        #region Properties

        /// <inheritdoc />
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public TorqueUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<Torque, TorqueUnit> QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Torque.BaseDimensions;

        #region Explicit implementations

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Enum IQuantity.Unit => Unit;
        
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UnitKey IQuantity.UnitKey => UnitKey.ForUnit(Unit);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo IQuantity.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo<TorqueUnit> IQuantity<TorqueUnit>.QuantityInfo => Info;

#if NETSTANDARD2_0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuantityInstanceInfo<Torque> IQuantityInstance<Torque>.QuantityInfo => Info;
#endif

        #endregion

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.GramForceCentimeter"/>
        /// </summary>
        public QuantityValue GramForceCentimeters => this.As(TorqueUnit.GramForceCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.GramForceMeter"/>
        /// </summary>
        public QuantityValue GramForceMeters => this.As(TorqueUnit.GramForceMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.GramForceMillimeter"/>
        /// </summary>
        public QuantityValue GramForceMillimeters => this.As(TorqueUnit.GramForceMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.KilogramForceCentimeter"/>
        /// </summary>
        public QuantityValue KilogramForceCentimeters => this.As(TorqueUnit.KilogramForceCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.KilogramForceMeter"/>
        /// </summary>
        public QuantityValue KilogramForceMeters => this.As(TorqueUnit.KilogramForceMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.KilogramForceMillimeter"/>
        /// </summary>
        public QuantityValue KilogramForceMillimeters => this.As(TorqueUnit.KilogramForceMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.KilonewtonCentimeter"/>
        /// </summary>
        public QuantityValue KilonewtonCentimeters => this.As(TorqueUnit.KilonewtonCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.KilonewtonMeter"/>
        /// </summary>
        public QuantityValue KilonewtonMeters => this.As(TorqueUnit.KilonewtonMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.KilonewtonMillimeter"/>
        /// </summary>
        public QuantityValue KilonewtonMillimeters => this.As(TorqueUnit.KilonewtonMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.KilopoundForceFoot"/>
        /// </summary>
        public QuantityValue KilopoundForceFeet => this.As(TorqueUnit.KilopoundForceFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.KilopoundForceInch"/>
        /// </summary>
        public QuantityValue KilopoundForceInches => this.As(TorqueUnit.KilopoundForceInch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.MeganewtonCentimeter"/>
        /// </summary>
        public QuantityValue MeganewtonCentimeters => this.As(TorqueUnit.MeganewtonCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.MeganewtonMeter"/>
        /// </summary>
        public QuantityValue MeganewtonMeters => this.As(TorqueUnit.MeganewtonMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.MeganewtonMillimeter"/>
        /// </summary>
        public QuantityValue MeganewtonMillimeters => this.As(TorqueUnit.MeganewtonMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.MegapoundForceFoot"/>
        /// </summary>
        public QuantityValue MegapoundForceFeet => this.As(TorqueUnit.MegapoundForceFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.MegapoundForceInch"/>
        /// </summary>
        public QuantityValue MegapoundForceInches => this.As(TorqueUnit.MegapoundForceInch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.NewtonCentimeter"/>
        /// </summary>
        public QuantityValue NewtonCentimeters => this.As(TorqueUnit.NewtonCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.NewtonMeter"/>
        /// </summary>
        public QuantityValue NewtonMeters => this.As(TorqueUnit.NewtonMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.NewtonMillimeter"/>
        /// </summary>
        public QuantityValue NewtonMillimeters => this.As(TorqueUnit.NewtonMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.PoundalFoot"/>
        /// </summary>
        public QuantityValue PoundalFeet => this.As(TorqueUnit.PoundalFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.PoundForceFoot"/>
        /// </summary>
        public QuantityValue PoundForceFeet => this.As(TorqueUnit.PoundForceFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.PoundForceInch"/>
        /// </summary>
        public QuantityValue PoundForceInches => this.As(TorqueUnit.PoundForceInch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.TonneForceCentimeter"/>
        /// </summary>
        public QuantityValue TonneForceCentimeters => this.As(TorqueUnit.TonneForceCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.TonneForceMeter"/>
        /// </summary>
        public QuantityValue TonneForceMeters => this.As(TorqueUnit.TonneForceMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="TorqueUnit.TonneForceMillimeter"/>
        /// </summary>
        public QuantityValue TonneForceMillimeters => this.As(TorqueUnit.TonneForceMillimeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(TorqueUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(TorqueUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.GramForceCentimeter"/>.
        /// </summary>
        public static Torque FromGramForceCentimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.GramForceCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.GramForceMeter"/>.
        /// </summary>
        public static Torque FromGramForceMeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.GramForceMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.GramForceMillimeter"/>.
        /// </summary>
        public static Torque FromGramForceMillimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.GramForceMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilogramForceCentimeter"/>.
        /// </summary>
        public static Torque FromKilogramForceCentimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.KilogramForceCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilogramForceMeter"/>.
        /// </summary>
        public static Torque FromKilogramForceMeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.KilogramForceMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilogramForceMillimeter"/>.
        /// </summary>
        public static Torque FromKilogramForceMillimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.KilogramForceMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilonewtonCentimeter"/>.
        /// </summary>
        public static Torque FromKilonewtonCentimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.KilonewtonCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilonewtonMeter"/>.
        /// </summary>
        public static Torque FromKilonewtonMeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.KilonewtonMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilonewtonMillimeter"/>.
        /// </summary>
        public static Torque FromKilonewtonMillimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.KilonewtonMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilopoundForceFoot"/>.
        /// </summary>
        public static Torque FromKilopoundForceFeet(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.KilopoundForceFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilopoundForceInch"/>.
        /// </summary>
        public static Torque FromKilopoundForceInches(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.KilopoundForceInch);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MeganewtonCentimeter"/>.
        /// </summary>
        public static Torque FromMeganewtonCentimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.MeganewtonCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MeganewtonMeter"/>.
        /// </summary>
        public static Torque FromMeganewtonMeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.MeganewtonMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MeganewtonMillimeter"/>.
        /// </summary>
        public static Torque FromMeganewtonMillimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.MeganewtonMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MegapoundForceFoot"/>.
        /// </summary>
        public static Torque FromMegapoundForceFeet(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.MegapoundForceFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MegapoundForceInch"/>.
        /// </summary>
        public static Torque FromMegapoundForceInches(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.MegapoundForceInch);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.NewtonCentimeter"/>.
        /// </summary>
        public static Torque FromNewtonCentimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.NewtonCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.NewtonMeter"/>.
        /// </summary>
        public static Torque FromNewtonMeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.NewtonMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.NewtonMillimeter"/>.
        /// </summary>
        public static Torque FromNewtonMillimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.NewtonMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.PoundalFoot"/>.
        /// </summary>
        public static Torque FromPoundalFeet(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.PoundalFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.PoundForceFoot"/>.
        /// </summary>
        public static Torque FromPoundForceFeet(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.PoundForceFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.PoundForceInch"/>.
        /// </summary>
        public static Torque FromPoundForceInches(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.PoundForceInch);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.TonneForceCentimeter"/>.
        /// </summary>
        public static Torque FromTonneForceCentimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.TonneForceCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.TonneForceMeter"/>.
        /// </summary>
        public static Torque FromTonneForceMeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.TonneForceMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.TonneForceMillimeter"/>.
        /// </summary>
        public static Torque FromTonneForceMillimeters(QuantityValue value)
        {
            return new Torque(value, TorqueUnit.TonneForceMillimeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorqueUnit" /> to <see cref="Torque" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Torque unit value.</returns>
        public static Torque From(QuantityValue value, TorqueUnit fromUnit)
        {
            return new Torque(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Torque Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Torque Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Torque, TorqueUnit>(str, provider, From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse([NotNullWhen(true)]string? str, out Torque result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse([NotNullWhen(true)]string? str, IFormatProvider? provider, out Torque result)
        {
            return QuantityParser.Default.TryParse<Torque, TorqueUnit>(str, provider, From, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorqueUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static TorqueUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse(str, Info.UnitInfos, provider).Value;
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider?,out UnitsNet.Units.TorqueUnit)"/>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, out TorqueUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, IFormatProvider? provider, out TorqueUnit unit)
        {
            return UnitParser.Default.TryParse(str, Info, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Torque operator -(Torque right)
        {
            return new Torque(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from adding two <see cref="Torque"/>.</summary>
        public static Torque operator +(Torque left, Torque right)
        {
            return new Torque(left.Value + right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from subtracting two <see cref="Torque"/>.</summary>
        public static Torque operator -(Torque left, Torque right)
        {
            return new Torque(left.Value - right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from multiplying value and <see cref="Torque"/>.</summary>
        public static Torque operator *(QuantityValue left, Torque right)
        {
            return new Torque(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from multiplying value and <see cref="Torque"/>.</summary>
        public static Torque operator *(Torque left, QuantityValue right)
        {
            return new Torque(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Torque"/> from dividing <see cref="Torque"/> by value.</summary>
        public static Torque operator /(Torque left, QuantityValue right)
        {
            return new Torque(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Torque"/> by <see cref="Torque"/>.</summary>
        public static QuantityValue operator /(Torque left, Torque right)
        {
            return left.NewtonMeters / right.NewtonMeters;
        }

        #endregion

        #region Relational Operators

        /// <summary>Get <see cref="Angle"/> from <see cref="Torque"/> / <see cref="RotationalStiffness"/>.</summary>
        public static Angle operator /(Torque torque, RotationalStiffness rotationalStiffness)
        {
            return Angle.FromRadians(torque.NewtonMeters / rotationalStiffness.NewtonMetersPerRadian);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Torque"/> / <see cref="ForcePerLength"/>.</summary>
        public static Area operator /(Torque torque, ForcePerLength forcePerLength)
        {
            return Area.FromSquareMeters(torque.NewtonMeters / forcePerLength.NewtonsPerMeter);
        }

        /// <summary>Get <see cref="Force"/> from <see cref="Torque"/> / <see cref="Length"/>.</summary>
        public static Force operator /(Torque torque, Length length)
        {
            return Force.FromNewtons(torque.NewtonMeters / length.Meters);
        }

        /// <summary>Get <see cref="ForcePerLength"/> from <see cref="Torque"/> / <see cref="Area"/>.</summary>
        public static ForcePerLength operator /(Torque torque, Area area)
        {
            return ForcePerLength.FromNewtonsPerMeter(torque.NewtonMeters / area.SquareMeters);
        }

        /// <summary>Get <see cref="Length"/> from <see cref="Torque"/> / <see cref="Force"/>.</summary>
        public static Length operator /(Torque torque, Force force)
        {
            return Length.FromMeters(torque.NewtonMeters / force.Newtons);
        }

        /// <summary>Get <see cref="Power"/> from <see cref="Torque"/> * <see cref="RotationalSpeed"/>.</summary>
        public static Power operator *(Torque torque, RotationalSpeed rotationalSpeed)
        {
            return Power.FromWatts(torque.NewtonMeters * rotationalSpeed.RadiansPerSecond);
        }

        /// <summary>Get <see cref="RotationalStiffness"/> from <see cref="Torque"/> / <see cref="Angle"/>.</summary>
        public static RotationalStiffness operator /(Torque torque, Angle angle)
        {
            return RotationalStiffness.FromNewtonMetersPerRadian(torque.NewtonMeters / angle.Radians);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Torque left, Torque right)
        {
            return left.Value <= right.As(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Torque left, Torque right)
        {
            return left.Value >= right.As(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Torque left, Torque right)
        {
            return left.Value < right.As(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Torque left, Torque right)
        {
            return left.Value > right.As(left.Unit);
        }

        /// <summary>Indicates strict equality of two <see cref="Torque"/> quantities.</summary>
        public static bool operator ==(Torque left, Torque right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Torque"/> quantities.</summary>
        public static bool operator !=(Torque left, Torque right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Torque"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is not Torque otherQuantity)
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Torque"/> quantities.</summary>
        public bool Equals(Torque other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Torque.</returns>
        public override int GetHashCode()
        {
            return Comparison.GetHashCode(typeof(Torque), this.As(BaseUnit));
        }
        
        /// <inheritdoc  cref="CompareTo(Torque)" />
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        public int CompareTo(object? obj)
        {
            if (obj is not Torque otherQuantity)
                throw obj is null ? new ArgumentNullException(nameof(obj)) : ExceptionHelper.CreateArgumentException<Torque>(obj, nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>
        ///     Compares the current <see cref="Torque"/> with another <see cref="Torque"/> and returns an integer that indicates
        ///     whether the current instance precedes, follows, or occurs in the same position in the sort order as the other quantity, when converted to the same unit.
        /// </summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Torque other)
        {
            return _value.CompareTo(other.As(this.Unit));
        }

        #endregion

        #region Conversion Methods (explicit implementations for netstandard2.0)

#if NETSTANDARD2_0
        QuantityValue IQuantity.As(Enum unit) => UnitConverter.Default.ConvertValue(Value, UnitKey.ForUnit(Unit), unit);

        IQuantity IQuantity.ToUnit(Enum unit) => UnitConverter.Default.ConvertTo(this, unit);

        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);

        IQuantity<TorqueUnit> IQuantity<TorqueUnit>.ToUnit(TorqueUnit unit) => this.ToUnit(unit);

        IQuantity<TorqueUnit> IQuantity<TorqueUnit>.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);
#endif

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null, null);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TQuantity}(TQuantity, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Default.Format(this, format, provider);
        }

        #endregion

    }
}
