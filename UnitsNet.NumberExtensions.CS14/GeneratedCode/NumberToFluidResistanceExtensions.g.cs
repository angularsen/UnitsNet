//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToFluidResistance
{
    /// <summary>
    /// A number to FluidResistance Extensions
    /// </summary>
    public static class NumberToFluidResistanceExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="FluidResistance.FromDyneSecondsPerCentimeterToTheFifth(double)" />
            public FluidResistance DyneSecondsPerCentimeterToTheFifth
#if NET7_0_OR_GREATER
                => FluidResistance.FromDyneSecondsPerCentimeterToTheFifth(double.CreateChecked(value));
#else
                => FluidResistance.FromDyneSecondsPerCentimeterToTheFifth(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromMegapascalSecondsPerCubicMeter(double)" />
            public FluidResistance MegapascalSecondsPerCubicMeter
#if NET7_0_OR_GREATER
                => FluidResistance.FromMegapascalSecondsPerCubicMeter(double.CreateChecked(value));
#else
                => FluidResistance.FromMegapascalSecondsPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromMillimeterMercuryMinutesPerCubicCentimeter(double)" />
            public FluidResistance MillimeterMercuryMinutesPerCubicCentimeter
#if NET7_0_OR_GREATER
                => FluidResistance.FromMillimeterMercuryMinutesPerCubicCentimeter(double.CreateChecked(value));
#else
                => FluidResistance.FromMillimeterMercuryMinutesPerCubicCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromMillimeterMercuryMinutesPerCubicMeter(double)" />
            public FluidResistance MillimeterMercuryMinutesPerCubicMeter
#if NET7_0_OR_GREATER
                => FluidResistance.FromMillimeterMercuryMinutesPerCubicMeter(double.CreateChecked(value));
#else
                => FluidResistance.FromMillimeterMercuryMinutesPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromMillimeterMercuryMinutesPerLiter(double)" />
            public FluidResistance MillimeterMercuryMinutesPerLiter
#if NET7_0_OR_GREATER
                => FluidResistance.FromMillimeterMercuryMinutesPerLiter(double.CreateChecked(value));
#else
                => FluidResistance.FromMillimeterMercuryMinutesPerLiter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromMillimeterMercuryMinutesPerMilliliter(double)" />
            public FluidResistance MillimeterMercuryMinutesPerMilliliter
#if NET7_0_OR_GREATER
                => FluidResistance.FromMillimeterMercuryMinutesPerMilliliter(double.CreateChecked(value));
#else
                => FluidResistance.FromMillimeterMercuryMinutesPerMilliliter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromMillimeterMercurySecondsPerCubicCentimeter(double)" />
            public FluidResistance MillimeterMercurySecondsPerCubicCentimeter
#if NET7_0_OR_GREATER
                => FluidResistance.FromMillimeterMercurySecondsPerCubicCentimeter(double.CreateChecked(value));
#else
                => FluidResistance.FromMillimeterMercurySecondsPerCubicCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromMillimeterMercurySecondsPerCubicMeter(double)" />
            public FluidResistance MillimeterMercurySecondsPerCubicMeter
#if NET7_0_OR_GREATER
                => FluidResistance.FromMillimeterMercurySecondsPerCubicMeter(double.CreateChecked(value));
#else
                => FluidResistance.FromMillimeterMercurySecondsPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromMillimeterMercurySecondsPerLiter(double)" />
            public FluidResistance MillimeterMercurySecondsPerLiter
#if NET7_0_OR_GREATER
                => FluidResistance.FromMillimeterMercurySecondsPerLiter(double.CreateChecked(value));
#else
                => FluidResistance.FromMillimeterMercurySecondsPerLiter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromMillimeterMercurySecondsPerMilliliter(double)" />
            public FluidResistance MillimeterMercurySecondsPerMilliliter
#if NET7_0_OR_GREATER
                => FluidResistance.FromMillimeterMercurySecondsPerMilliliter(double.CreateChecked(value));
#else
                => FluidResistance.FromMillimeterMercurySecondsPerMilliliter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromPascalMinutesPerCubicCentimeter(double)" />
            public FluidResistance PascalMinutesPerCubicCentimeter
#if NET7_0_OR_GREATER
                => FluidResistance.FromPascalMinutesPerCubicCentimeter(double.CreateChecked(value));
#else
                => FluidResistance.FromPascalMinutesPerCubicCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromPascalMinutesPerCubicMeter(double)" />
            public FluidResistance PascalMinutesPerCubicMeter
#if NET7_0_OR_GREATER
                => FluidResistance.FromPascalMinutesPerCubicMeter(double.CreateChecked(value));
#else
                => FluidResistance.FromPascalMinutesPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromPascalMinutesPerLiter(double)" />
            public FluidResistance PascalMinutesPerLiter
#if NET7_0_OR_GREATER
                => FluidResistance.FromPascalMinutesPerLiter(double.CreateChecked(value));
#else
                => FluidResistance.FromPascalMinutesPerLiter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromPascalMinutesPerMilliliter(double)" />
            public FluidResistance PascalMinutesPerMilliliter
#if NET7_0_OR_GREATER
                => FluidResistance.FromPascalMinutesPerMilliliter(double.CreateChecked(value));
#else
                => FluidResistance.FromPascalMinutesPerMilliliter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromPascalSecondsPerCubicCentimeter(double)" />
            public FluidResistance PascalSecondsPerCubicCentimeter
#if NET7_0_OR_GREATER
                => FluidResistance.FromPascalSecondsPerCubicCentimeter(double.CreateChecked(value));
#else
                => FluidResistance.FromPascalSecondsPerCubicCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromPascalSecondsPerCubicMeter(double)" />
            public FluidResistance PascalSecondsPerCubicMeter
#if NET7_0_OR_GREATER
                => FluidResistance.FromPascalSecondsPerCubicMeter(double.CreateChecked(value));
#else
                => FluidResistance.FromPascalSecondsPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromPascalSecondsPerLiter(double)" />
            public FluidResistance PascalSecondsPerLiter
#if NET7_0_OR_GREATER
                => FluidResistance.FromPascalSecondsPerLiter(double.CreateChecked(value));
#else
                => FluidResistance.FromPascalSecondsPerLiter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromPascalSecondsPerMilliliter(double)" />
            public FluidResistance PascalSecondsPerMilliliter
#if NET7_0_OR_GREATER
                => FluidResistance.FromPascalSecondsPerMilliliter(double.CreateChecked(value));
#else
                => FluidResistance.FromPascalSecondsPerMilliliter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="FluidResistance.FromWoodUnits(double)" />
            public FluidResistance WoodUnits
#if NET7_0_OR_GREATER
                => FluidResistance.FromWoodUnits(double.CreateChecked(value));
#else
                => FluidResistance.FromWoodUnits(value.ToDouble(null));
#endif

        }
    }
}
