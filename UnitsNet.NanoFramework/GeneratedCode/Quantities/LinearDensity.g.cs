//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The Linear Density, or more precisely, the linear mass density, of a substance is its mass per unit length.  The term linear density is most often used when describing the characteristics of one-dimensional objects, although linear density can also be used to describe the density of a three-dimensional quantity along one particular dimension.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Linear_density
    /// </remarks>
    public struct  LinearDensity
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly LinearDensityUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public LinearDensityUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public LinearDensity(double value, LinearDensityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of LinearDensity, which is Second. All conversions go via this value.
        /// </summary>
        public static LinearDensityUnit BaseUnit { get; } = LinearDensityUnit.KilogramPerMeter;

        /// <summary>
        /// Represents the largest possible value of LinearDensity.
        /// </summary>
        public static LinearDensity MaxValue { get; } = new LinearDensity(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of LinearDensity.
        /// </summary>
        public static LinearDensity MinValue { get; } = new LinearDensity(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static LinearDensity Zero { get; } = new LinearDensity(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.GramPerCentimeter"/>
        /// </summary>
        public double GramsPerCentimeter => As(LinearDensityUnit.GramPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.GramPerFoot"/>
        /// </summary>
        public double GramsPerFoot => As(LinearDensityUnit.GramPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.GramPerMeter"/>
        /// </summary>
        public double GramsPerMeter => As(LinearDensityUnit.GramPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.GramPerMillimeter"/>
        /// </summary>
        public double GramsPerMillimeter => As(LinearDensityUnit.GramPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.KilogramPerCentimeter"/>
        /// </summary>
        public double KilogramsPerCentimeter => As(LinearDensityUnit.KilogramPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.KilogramPerFoot"/>
        /// </summary>
        public double KilogramsPerFoot => As(LinearDensityUnit.KilogramPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.KilogramPerMeter"/>
        /// </summary>
        public double KilogramsPerMeter => As(LinearDensityUnit.KilogramPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.KilogramPerMillimeter"/>
        /// </summary>
        public double KilogramsPerMillimeter => As(LinearDensityUnit.KilogramPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.MicrogramPerCentimeter"/>
        /// </summary>
        public double MicrogramsPerCentimeter => As(LinearDensityUnit.MicrogramPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.MicrogramPerFoot"/>
        /// </summary>
        public double MicrogramsPerFoot => As(LinearDensityUnit.MicrogramPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.MicrogramPerMeter"/>
        /// </summary>
        public double MicrogramsPerMeter => As(LinearDensityUnit.MicrogramPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.MicrogramPerMillimeter"/>
        /// </summary>
        public double MicrogramsPerMillimeter => As(LinearDensityUnit.MicrogramPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.MilligramPerCentimeter"/>
        /// </summary>
        public double MilligramsPerCentimeter => As(LinearDensityUnit.MilligramPerCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.MilligramPerFoot"/>
        /// </summary>
        public double MilligramsPerFoot => As(LinearDensityUnit.MilligramPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.MilligramPerMeter"/>
        /// </summary>
        public double MilligramsPerMeter => As(LinearDensityUnit.MilligramPerMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.MilligramPerMillimeter"/>
        /// </summary>
        public double MilligramsPerMillimeter => As(LinearDensityUnit.MilligramPerMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.PoundPerFoot"/>
        /// </summary>
        public double PoundsPerFoot => As(LinearDensityUnit.PoundPerFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LinearDensityUnit.PoundPerInch"/>
        /// </summary>
        public double PoundsPerInch => As(LinearDensityUnit.PoundPerInch);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.GramPerCentimeter"/>.
        /// </summary>
        public static LinearDensity FromGramsPerCentimeter(double gramspercentimeter) => new LinearDensity(gramspercentimeter, LinearDensityUnit.GramPerCentimeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.GramPerFoot"/>.
        /// </summary>
        public static LinearDensity FromGramsPerFoot(double gramsperfoot) => new LinearDensity(gramsperfoot, LinearDensityUnit.GramPerFoot);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.GramPerMeter"/>.
        /// </summary>
        public static LinearDensity FromGramsPerMeter(double gramspermeter) => new LinearDensity(gramspermeter, LinearDensityUnit.GramPerMeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.GramPerMillimeter"/>.
        /// </summary>
        public static LinearDensity FromGramsPerMillimeter(double gramspermillimeter) => new LinearDensity(gramspermillimeter, LinearDensityUnit.GramPerMillimeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.KilogramPerCentimeter"/>.
        /// </summary>
        public static LinearDensity FromKilogramsPerCentimeter(double kilogramspercentimeter) => new LinearDensity(kilogramspercentimeter, LinearDensityUnit.KilogramPerCentimeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.KilogramPerFoot"/>.
        /// </summary>
        public static LinearDensity FromKilogramsPerFoot(double kilogramsperfoot) => new LinearDensity(kilogramsperfoot, LinearDensityUnit.KilogramPerFoot);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.KilogramPerMeter"/>.
        /// </summary>
        public static LinearDensity FromKilogramsPerMeter(double kilogramspermeter) => new LinearDensity(kilogramspermeter, LinearDensityUnit.KilogramPerMeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.KilogramPerMillimeter"/>.
        /// </summary>
        public static LinearDensity FromKilogramsPerMillimeter(double kilogramspermillimeter) => new LinearDensity(kilogramspermillimeter, LinearDensityUnit.KilogramPerMillimeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.MicrogramPerCentimeter"/>.
        /// </summary>
        public static LinearDensity FromMicrogramsPerCentimeter(double microgramspercentimeter) => new LinearDensity(microgramspercentimeter, LinearDensityUnit.MicrogramPerCentimeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.MicrogramPerFoot"/>.
        /// </summary>
        public static LinearDensity FromMicrogramsPerFoot(double microgramsperfoot) => new LinearDensity(microgramsperfoot, LinearDensityUnit.MicrogramPerFoot);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.MicrogramPerMeter"/>.
        /// </summary>
        public static LinearDensity FromMicrogramsPerMeter(double microgramspermeter) => new LinearDensity(microgramspermeter, LinearDensityUnit.MicrogramPerMeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.MicrogramPerMillimeter"/>.
        /// </summary>
        public static LinearDensity FromMicrogramsPerMillimeter(double microgramspermillimeter) => new LinearDensity(microgramspermillimeter, LinearDensityUnit.MicrogramPerMillimeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.MilligramPerCentimeter"/>.
        /// </summary>
        public static LinearDensity FromMilligramsPerCentimeter(double milligramspercentimeter) => new LinearDensity(milligramspercentimeter, LinearDensityUnit.MilligramPerCentimeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.MilligramPerFoot"/>.
        /// </summary>
        public static LinearDensity FromMilligramsPerFoot(double milligramsperfoot) => new LinearDensity(milligramsperfoot, LinearDensityUnit.MilligramPerFoot);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.MilligramPerMeter"/>.
        /// </summary>
        public static LinearDensity FromMilligramsPerMeter(double milligramspermeter) => new LinearDensity(milligramspermeter, LinearDensityUnit.MilligramPerMeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.MilligramPerMillimeter"/>.
        /// </summary>
        public static LinearDensity FromMilligramsPerMillimeter(double milligramspermillimeter) => new LinearDensity(milligramspermillimeter, LinearDensityUnit.MilligramPerMillimeter);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.PoundPerFoot"/>.
        /// </summary>
        public static LinearDensity FromPoundsPerFoot(double poundsperfoot) => new LinearDensity(poundsperfoot, LinearDensityUnit.PoundPerFoot);

        /// <summary>
        ///     Creates a <see cref="LinearDensity"/> from <see cref="LinearDensityUnit.PoundPerInch"/>.
        /// </summary>
        public static LinearDensity FromPoundsPerInch(double poundsperinch) => new LinearDensity(poundsperinch, LinearDensityUnit.PoundPerInch);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LinearDensityUnit" /> to <see cref="LinearDensity" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>LinearDensity unit value.</returns>
        public static LinearDensity From(double value, LinearDensityUnit fromUnit)
        {
            return new LinearDensity(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(LinearDensityUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this LinearDensity to another LinearDensity with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A LinearDensity with the specified unit.</returns>
                public LinearDensity ToUnit(LinearDensityUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new LinearDensity(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        LinearDensityUnit.GramPerCentimeter => _value * 1e-1,
                        LinearDensityUnit.GramPerFoot => _value * ( 1e-3 / 0.3048 ),
                        LinearDensityUnit.GramPerMeter => _value * 1e-3,
                        LinearDensityUnit.GramPerMillimeter => _value,
                        LinearDensityUnit.KilogramPerCentimeter => (_value * 1e-1) * 1e3d,
                        LinearDensityUnit.KilogramPerFoot => (_value * ( 1e-3 / 0.3048 )) * 1e3d,
                        LinearDensityUnit.KilogramPerMeter => (_value * 1e-3) * 1e3d,
                        LinearDensityUnit.KilogramPerMillimeter => (_value) * 1e3d,
                        LinearDensityUnit.MicrogramPerCentimeter => (_value * 1e-1) * 1e-6d,
                        LinearDensityUnit.MicrogramPerFoot => (_value * ( 1e-3 / 0.3048 )) * 1e-6d,
                        LinearDensityUnit.MicrogramPerMeter => (_value * 1e-3) * 1e-6d,
                        LinearDensityUnit.MicrogramPerMillimeter => (_value) * 1e-6d,
                        LinearDensityUnit.MilligramPerCentimeter => (_value * 1e-1) * 1e-3d,
                        LinearDensityUnit.MilligramPerFoot => (_value * ( 1e-3 / 0.3048 )) * 1e-3d,
                        LinearDensityUnit.MilligramPerMeter => (_value * 1e-3) * 1e-3d,
                        LinearDensityUnit.MilligramPerMillimeter => (_value) * 1e-3d,
                        LinearDensityUnit.PoundPerFoot => _value * 0.45359237 / 0.3048,
                        LinearDensityUnit.PoundPerInch => _value * 0.45359237 / 2.54e-2,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(LinearDensityUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        LinearDensityUnit.GramPerCentimeter => baseUnitValue / 1e-1,
                        LinearDensityUnit.GramPerFoot => baseUnitValue / ( 1e-3 / 0.3048 ),
                        LinearDensityUnit.GramPerMeter => baseUnitValue / 1e-3,
                        LinearDensityUnit.GramPerMillimeter => baseUnitValue,
                        LinearDensityUnit.KilogramPerCentimeter => (baseUnitValue / 1e-1) / 1e3d,
                        LinearDensityUnit.KilogramPerFoot => (baseUnitValue / ( 1e-3 / 0.3048 )) / 1e3d,
                        LinearDensityUnit.KilogramPerMeter => (baseUnitValue / 1e-3) / 1e3d,
                        LinearDensityUnit.KilogramPerMillimeter => (baseUnitValue) / 1e3d,
                        LinearDensityUnit.MicrogramPerCentimeter => (baseUnitValue / 1e-1) / 1e-6d,
                        LinearDensityUnit.MicrogramPerFoot => (baseUnitValue / ( 1e-3 / 0.3048 )) / 1e-6d,
                        LinearDensityUnit.MicrogramPerMeter => (baseUnitValue / 1e-3) / 1e-6d,
                        LinearDensityUnit.MicrogramPerMillimeter => (baseUnitValue) / 1e-6d,
                        LinearDensityUnit.MilligramPerCentimeter => (baseUnitValue / 1e-1) / 1e-3d,
                        LinearDensityUnit.MilligramPerFoot => (baseUnitValue / ( 1e-3 / 0.3048 )) / 1e-3d,
                        LinearDensityUnit.MilligramPerMeter => (baseUnitValue / 1e-3) / 1e-3d,
                        LinearDensityUnit.MilligramPerMillimeter => (baseUnitValue) / 1e-3d,
                        LinearDensityUnit.PoundPerFoot => baseUnitValue * 0.3048 / 0.45359237,
                        LinearDensityUnit.PoundPerInch => baseUnitValue * 2.54e-2 / 0.45359237,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

