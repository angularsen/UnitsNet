//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MassConcentration.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MassConcentrationTestsBase : QuantityTestsBase
    {
        protected abstract double CentigramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double CentigramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double CentigramsPerMicroliterInOneKilogramPerCubicMeter { get; }
        protected abstract double CentigramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerMicroliterInOneKilogramPerCubicMeter { get; }
        protected abstract double DecigramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerMicroliterInOneKilogramPerCubicMeter { get; }
        protected abstract double GramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double KilopoundsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerMicroliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MicrogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerMicroliterInOneKilogramPerCubicMeter { get; }
        protected abstract double MilligramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerMicroliterInOneKilogramPerCubicMeter { get; }
        protected abstract double NanogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double OuncesPerImperialGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double OuncesPerUSGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerDeciliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerLiterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerMicroliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PicogramsPerMilliliterInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerCubicInchInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerImperialGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double PoundsPerUSGallonInOneKilogramPerCubicMeter { get; }
        protected abstract double SlugsPerCubicFootInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicCentimeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicMeterInOneKilogramPerCubicMeter { get; }
        protected abstract double TonnesPerCubicMillimeterInOneKilogramPerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerMicroliterTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerMicroliterTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMicroliterTolerance { get { return 1e-5; } }
        protected virtual double GramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerCubicMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMicroliterTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMicroliterTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerMicroliterTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double OuncesPerImperialGallonTolerance { get { return 1e-5; } }
        protected virtual double OuncesPerUSGallonTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerDeciliterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerMicroliterTolerance { get { return 1e-5; } }
        protected virtual double PicogramsPerMilliliterTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerImperialGallonTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerUSGallonTolerance { get { return 1e-5; } }
        protected virtual double SlugsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerCubicMillimeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MassConcentrationUnit unit)
        {
            return unit switch
            {
                MassConcentrationUnit.CentigramPerDeciliter => (CentigramsPerDeciliterInOneKilogramPerCubicMeter, CentigramsPerDeciliterTolerance),
                MassConcentrationUnit.CentigramPerLiter => (CentigramsPerLiterInOneKilogramPerCubicMeter, CentigramsPerLiterTolerance),
                MassConcentrationUnit.CentigramPerMicroliter => (CentigramsPerMicroliterInOneKilogramPerCubicMeter, CentigramsPerMicroliterTolerance),
                MassConcentrationUnit.CentigramPerMilliliter => (CentigramsPerMilliliterInOneKilogramPerCubicMeter, CentigramsPerMilliliterTolerance),
                MassConcentrationUnit.DecigramPerDeciliter => (DecigramsPerDeciliterInOneKilogramPerCubicMeter, DecigramsPerDeciliterTolerance),
                MassConcentrationUnit.DecigramPerLiter => (DecigramsPerLiterInOneKilogramPerCubicMeter, DecigramsPerLiterTolerance),
                MassConcentrationUnit.DecigramPerMicroliter => (DecigramsPerMicroliterInOneKilogramPerCubicMeter, DecigramsPerMicroliterTolerance),
                MassConcentrationUnit.DecigramPerMilliliter => (DecigramsPerMilliliterInOneKilogramPerCubicMeter, DecigramsPerMilliliterTolerance),
                MassConcentrationUnit.GramPerCubicCentimeter => (GramsPerCubicCentimeterInOneKilogramPerCubicMeter, GramsPerCubicCentimeterTolerance),
                MassConcentrationUnit.GramPerCubicMeter => (GramsPerCubicMeterInOneKilogramPerCubicMeter, GramsPerCubicMeterTolerance),
                MassConcentrationUnit.GramPerCubicMillimeter => (GramsPerCubicMillimeterInOneKilogramPerCubicMeter, GramsPerCubicMillimeterTolerance),
                MassConcentrationUnit.GramPerDeciliter => (GramsPerDeciliterInOneKilogramPerCubicMeter, GramsPerDeciliterTolerance),
                MassConcentrationUnit.GramPerLiter => (GramsPerLiterInOneKilogramPerCubicMeter, GramsPerLiterTolerance),
                MassConcentrationUnit.GramPerMicroliter => (GramsPerMicroliterInOneKilogramPerCubicMeter, GramsPerMicroliterTolerance),
                MassConcentrationUnit.GramPerMilliliter => (GramsPerMilliliterInOneKilogramPerCubicMeter, GramsPerMilliliterTolerance),
                MassConcentrationUnit.KilogramPerCubicCentimeter => (KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, KilogramsPerCubicCentimeterTolerance),
                MassConcentrationUnit.KilogramPerCubicMeter => (KilogramsPerCubicMeterInOneKilogramPerCubicMeter, KilogramsPerCubicMeterTolerance),
                MassConcentrationUnit.KilogramPerCubicMillimeter => (KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, KilogramsPerCubicMillimeterTolerance),
                MassConcentrationUnit.KilogramPerLiter => (KilogramsPerLiterInOneKilogramPerCubicMeter, KilogramsPerLiterTolerance),
                MassConcentrationUnit.KilopoundPerCubicFoot => (KilopoundsPerCubicFootInOneKilogramPerCubicMeter, KilopoundsPerCubicFootTolerance),
                MassConcentrationUnit.KilopoundPerCubicInch => (KilopoundsPerCubicInchInOneKilogramPerCubicMeter, KilopoundsPerCubicInchTolerance),
                MassConcentrationUnit.MicrogramPerCubicMeter => (MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, MicrogramsPerCubicMeterTolerance),
                MassConcentrationUnit.MicrogramPerDeciliter => (MicrogramsPerDeciliterInOneKilogramPerCubicMeter, MicrogramsPerDeciliterTolerance),
                MassConcentrationUnit.MicrogramPerLiter => (MicrogramsPerLiterInOneKilogramPerCubicMeter, MicrogramsPerLiterTolerance),
                MassConcentrationUnit.MicrogramPerMicroliter => (MicrogramsPerMicroliterInOneKilogramPerCubicMeter, MicrogramsPerMicroliterTolerance),
                MassConcentrationUnit.MicrogramPerMilliliter => (MicrogramsPerMilliliterInOneKilogramPerCubicMeter, MicrogramsPerMilliliterTolerance),
                MassConcentrationUnit.MilligramPerCubicMeter => (MilligramsPerCubicMeterInOneKilogramPerCubicMeter, MilligramsPerCubicMeterTolerance),
                MassConcentrationUnit.MilligramPerDeciliter => (MilligramsPerDeciliterInOneKilogramPerCubicMeter, MilligramsPerDeciliterTolerance),
                MassConcentrationUnit.MilligramPerLiter => (MilligramsPerLiterInOneKilogramPerCubicMeter, MilligramsPerLiterTolerance),
                MassConcentrationUnit.MilligramPerMicroliter => (MilligramsPerMicroliterInOneKilogramPerCubicMeter, MilligramsPerMicroliterTolerance),
                MassConcentrationUnit.MilligramPerMilliliter => (MilligramsPerMilliliterInOneKilogramPerCubicMeter, MilligramsPerMilliliterTolerance),
                MassConcentrationUnit.NanogramPerDeciliter => (NanogramsPerDeciliterInOneKilogramPerCubicMeter, NanogramsPerDeciliterTolerance),
                MassConcentrationUnit.NanogramPerLiter => (NanogramsPerLiterInOneKilogramPerCubicMeter, NanogramsPerLiterTolerance),
                MassConcentrationUnit.NanogramPerMicroliter => (NanogramsPerMicroliterInOneKilogramPerCubicMeter, NanogramsPerMicroliterTolerance),
                MassConcentrationUnit.NanogramPerMilliliter => (NanogramsPerMilliliterInOneKilogramPerCubicMeter, NanogramsPerMilliliterTolerance),
                MassConcentrationUnit.OuncePerImperialGallon => (OuncesPerImperialGallonInOneKilogramPerCubicMeter, OuncesPerImperialGallonTolerance),
                MassConcentrationUnit.OuncePerUSGallon => (OuncesPerUSGallonInOneKilogramPerCubicMeter, OuncesPerUSGallonTolerance),
                MassConcentrationUnit.PicogramPerDeciliter => (PicogramsPerDeciliterInOneKilogramPerCubicMeter, PicogramsPerDeciliterTolerance),
                MassConcentrationUnit.PicogramPerLiter => (PicogramsPerLiterInOneKilogramPerCubicMeter, PicogramsPerLiterTolerance),
                MassConcentrationUnit.PicogramPerMicroliter => (PicogramsPerMicroliterInOneKilogramPerCubicMeter, PicogramsPerMicroliterTolerance),
                MassConcentrationUnit.PicogramPerMilliliter => (PicogramsPerMilliliterInOneKilogramPerCubicMeter, PicogramsPerMilliliterTolerance),
                MassConcentrationUnit.PoundPerCubicFoot => (PoundsPerCubicFootInOneKilogramPerCubicMeter, PoundsPerCubicFootTolerance),
                MassConcentrationUnit.PoundPerCubicInch => (PoundsPerCubicInchInOneKilogramPerCubicMeter, PoundsPerCubicInchTolerance),
                MassConcentrationUnit.PoundPerImperialGallon => (PoundsPerImperialGallonInOneKilogramPerCubicMeter, PoundsPerImperialGallonTolerance),
                MassConcentrationUnit.PoundPerUSGallon => (PoundsPerUSGallonInOneKilogramPerCubicMeter, PoundsPerUSGallonTolerance),
                MassConcentrationUnit.SlugPerCubicFoot => (SlugsPerCubicFootInOneKilogramPerCubicMeter, SlugsPerCubicFootTolerance),
                MassConcentrationUnit.TonnePerCubicCentimeter => (TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, TonnesPerCubicCentimeterTolerance),
                MassConcentrationUnit.TonnePerCubicMeter => (TonnesPerCubicMeterInOneKilogramPerCubicMeter, TonnesPerCubicMeterTolerance),
                MassConcentrationUnit.TonnePerCubicMillimeter => (TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, TonnesPerCubicMillimeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MassConcentrationUnit.CentigramPerDeciliter },
            new object[] { MassConcentrationUnit.CentigramPerLiter },
            new object[] { MassConcentrationUnit.CentigramPerMicroliter },
            new object[] { MassConcentrationUnit.CentigramPerMilliliter },
            new object[] { MassConcentrationUnit.DecigramPerDeciliter },
            new object[] { MassConcentrationUnit.DecigramPerLiter },
            new object[] { MassConcentrationUnit.DecigramPerMicroliter },
            new object[] { MassConcentrationUnit.DecigramPerMilliliter },
            new object[] { MassConcentrationUnit.GramPerCubicCentimeter },
            new object[] { MassConcentrationUnit.GramPerCubicMeter },
            new object[] { MassConcentrationUnit.GramPerCubicMillimeter },
            new object[] { MassConcentrationUnit.GramPerDeciliter },
            new object[] { MassConcentrationUnit.GramPerLiter },
            new object[] { MassConcentrationUnit.GramPerMicroliter },
            new object[] { MassConcentrationUnit.GramPerMilliliter },
            new object[] { MassConcentrationUnit.KilogramPerCubicCentimeter },
            new object[] { MassConcentrationUnit.KilogramPerCubicMeter },
            new object[] { MassConcentrationUnit.KilogramPerCubicMillimeter },
            new object[] { MassConcentrationUnit.KilogramPerLiter },
            new object[] { MassConcentrationUnit.KilopoundPerCubicFoot },
            new object[] { MassConcentrationUnit.KilopoundPerCubicInch },
            new object[] { MassConcentrationUnit.MicrogramPerCubicMeter },
            new object[] { MassConcentrationUnit.MicrogramPerDeciliter },
            new object[] { MassConcentrationUnit.MicrogramPerLiter },
            new object[] { MassConcentrationUnit.MicrogramPerMicroliter },
            new object[] { MassConcentrationUnit.MicrogramPerMilliliter },
            new object[] { MassConcentrationUnit.MilligramPerCubicMeter },
            new object[] { MassConcentrationUnit.MilligramPerDeciliter },
            new object[] { MassConcentrationUnit.MilligramPerLiter },
            new object[] { MassConcentrationUnit.MilligramPerMicroliter },
            new object[] { MassConcentrationUnit.MilligramPerMilliliter },
            new object[] { MassConcentrationUnit.NanogramPerDeciliter },
            new object[] { MassConcentrationUnit.NanogramPerLiter },
            new object[] { MassConcentrationUnit.NanogramPerMicroliter },
            new object[] { MassConcentrationUnit.NanogramPerMilliliter },
            new object[] { MassConcentrationUnit.OuncePerImperialGallon },
            new object[] { MassConcentrationUnit.OuncePerUSGallon },
            new object[] { MassConcentrationUnit.PicogramPerDeciliter },
            new object[] { MassConcentrationUnit.PicogramPerLiter },
            new object[] { MassConcentrationUnit.PicogramPerMicroliter },
            new object[] { MassConcentrationUnit.PicogramPerMilliliter },
            new object[] { MassConcentrationUnit.PoundPerCubicFoot },
            new object[] { MassConcentrationUnit.PoundPerCubicInch },
            new object[] { MassConcentrationUnit.PoundPerImperialGallon },
            new object[] { MassConcentrationUnit.PoundPerUSGallon },
            new object[] { MassConcentrationUnit.SlugPerCubicFoot },
            new object[] { MassConcentrationUnit.TonnePerCubicCentimeter },
            new object[] { MassConcentrationUnit.TonnePerCubicMeter },
            new object[] { MassConcentrationUnit.TonnePerCubicMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MassConcentration();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MassConcentrationUnit.KilogramPerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new MassConcentration(double.PositiveInfinity, MassConcentrationUnit.KilogramPerCubicMeter));
            var exception2 = Record.Exception(() => new MassConcentration(double.NegativeInfinity, MassConcentrationUnit.KilogramPerCubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new MassConcentration(double.NaN, MassConcentrationUnit.KilogramPerCubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MassConcentration(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new MassConcentration(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new MassConcentration(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void MassConcentration_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            MassConcentrationUnit[] unitsOrderedByName = EnumHelper.GetValues<MassConcentrationUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new MassConcentration(1, MassConcentrationUnit.KilogramPerCubicMeter);

            QuantityInfo<MassConcentration, MassConcentrationUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("MassConcentration", quantityInfo.Name);
            Assert.Equal(MassConcentration.Zero, quantityInfo.Zero);
            Assert.Equal(MassConcentration.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(MassConcentration.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<MassConcentrationUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void KilogramPerCubicMeterToMassConcentrationUnits()
        {
            MassConcentration kilogrampercubicmeter = MassConcentration.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(CentigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerDeciliter, CentigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(CentigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerLiter, CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerMicroliter, CentigramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.CentigramsPerMilliliter, CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerDeciliter, DecigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerLiter, DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerMicroliter, DecigramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.DecigramsPerMilliliter, DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicCentimeter, GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerCubicMillimeter, GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(GramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerDeciliter, GramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(GramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerLiter, GramsPerLiterTolerance);
            AssertEx.EqualTolerance(GramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerMicroliter, GramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(GramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.GramsPerMilliliter, GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicCentimeter, KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerCubicMillimeter, KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilogramsPerLiter, KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicFoot, KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.KilopoundsPerCubicInch, KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerDeciliter, MicrogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerLiter, MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerMicroliter, MicrogramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MicrogramsPerMilliliter, MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerDeciliter, MilligramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerLiter, MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerMicroliter, MilligramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.MilligramsPerMilliliter, MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerDeciliter, NanogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerLiter, NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerMicroliter, NanogramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.NanogramsPerMilliliter, NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(OuncesPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.OuncesPerImperialGallon, OuncesPerImperialGallonTolerance);
            AssertEx.EqualTolerance(OuncesPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.OuncesPerUSGallon, OuncesPerUSGallonTolerance);
            AssertEx.EqualTolerance(PicogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerDeciliter, PicogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerLiter, PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerMicroliter, PicogramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.PicogramsPerMilliliter, PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicFoot, PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerCubicInch, PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PoundsPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerImperialGallon, PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(PoundsPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.PoundsPerUSGallon, PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.SlugsPerCubicFoot, SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicCentimeter, TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicMeter, TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.TonnesPerCubicMillimeter, TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MassConcentration.From(1, MassConcentrationUnit.CentigramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity00.CentigramsPerDeciliter, CentigramsPerDeciliterTolerance);
            Assert.Equal(MassConcentrationUnit.CentigramPerDeciliter, quantity00.Unit);

            var quantity01 = MassConcentration.From(1, MassConcentrationUnit.CentigramPerLiter);
            AssertEx.EqualTolerance(1, quantity01.CentigramsPerLiter, CentigramsPerLiterTolerance);
            Assert.Equal(MassConcentrationUnit.CentigramPerLiter, quantity01.Unit);

            var quantity02 = MassConcentration.From(1, MassConcentrationUnit.CentigramPerMicroliter);
            AssertEx.EqualTolerance(1, quantity02.CentigramsPerMicroliter, CentigramsPerMicroliterTolerance);
            Assert.Equal(MassConcentrationUnit.CentigramPerMicroliter, quantity02.Unit);

            var quantity03 = MassConcentration.From(1, MassConcentrationUnit.CentigramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity03.CentigramsPerMilliliter, CentigramsPerMilliliterTolerance);
            Assert.Equal(MassConcentrationUnit.CentigramPerMilliliter, quantity03.Unit);

            var quantity04 = MassConcentration.From(1, MassConcentrationUnit.DecigramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity04.DecigramsPerDeciliter, DecigramsPerDeciliterTolerance);
            Assert.Equal(MassConcentrationUnit.DecigramPerDeciliter, quantity04.Unit);

            var quantity05 = MassConcentration.From(1, MassConcentrationUnit.DecigramPerLiter);
            AssertEx.EqualTolerance(1, quantity05.DecigramsPerLiter, DecigramsPerLiterTolerance);
            Assert.Equal(MassConcentrationUnit.DecigramPerLiter, quantity05.Unit);

            var quantity06 = MassConcentration.From(1, MassConcentrationUnit.DecigramPerMicroliter);
            AssertEx.EqualTolerance(1, quantity06.DecigramsPerMicroliter, DecigramsPerMicroliterTolerance);
            Assert.Equal(MassConcentrationUnit.DecigramPerMicroliter, quantity06.Unit);

            var quantity07 = MassConcentration.From(1, MassConcentrationUnit.DecigramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity07.DecigramsPerMilliliter, DecigramsPerMilliliterTolerance);
            Assert.Equal(MassConcentrationUnit.DecigramPerMilliliter, quantity07.Unit);

            var quantity08 = MassConcentration.From(1, MassConcentrationUnit.GramPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity08.GramsPerCubicCentimeter, GramsPerCubicCentimeterTolerance);
            Assert.Equal(MassConcentrationUnit.GramPerCubicCentimeter, quantity08.Unit);

            var quantity09 = MassConcentration.From(1, MassConcentrationUnit.GramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity09.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
            Assert.Equal(MassConcentrationUnit.GramPerCubicMeter, quantity09.Unit);

            var quantity10 = MassConcentration.From(1, MassConcentrationUnit.GramPerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity10.GramsPerCubicMillimeter, GramsPerCubicMillimeterTolerance);
            Assert.Equal(MassConcentrationUnit.GramPerCubicMillimeter, quantity10.Unit);

            var quantity11 = MassConcentration.From(1, MassConcentrationUnit.GramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity11.GramsPerDeciliter, GramsPerDeciliterTolerance);
            Assert.Equal(MassConcentrationUnit.GramPerDeciliter, quantity11.Unit);

            var quantity12 = MassConcentration.From(1, MassConcentrationUnit.GramPerLiter);
            AssertEx.EqualTolerance(1, quantity12.GramsPerLiter, GramsPerLiterTolerance);
            Assert.Equal(MassConcentrationUnit.GramPerLiter, quantity12.Unit);

            var quantity13 = MassConcentration.From(1, MassConcentrationUnit.GramPerMicroliter);
            AssertEx.EqualTolerance(1, quantity13.GramsPerMicroliter, GramsPerMicroliterTolerance);
            Assert.Equal(MassConcentrationUnit.GramPerMicroliter, quantity13.Unit);

            var quantity14 = MassConcentration.From(1, MassConcentrationUnit.GramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity14.GramsPerMilliliter, GramsPerMilliliterTolerance);
            Assert.Equal(MassConcentrationUnit.GramPerMilliliter, quantity14.Unit);

            var quantity15 = MassConcentration.From(1, MassConcentrationUnit.KilogramPerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity15.KilogramsPerCubicCentimeter, KilogramsPerCubicCentimeterTolerance);
            Assert.Equal(MassConcentrationUnit.KilogramPerCubicCentimeter, quantity15.Unit);

            var quantity16 = MassConcentration.From(1, MassConcentrationUnit.KilogramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity16.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            Assert.Equal(MassConcentrationUnit.KilogramPerCubicMeter, quantity16.Unit);

            var quantity17 = MassConcentration.From(1, MassConcentrationUnit.KilogramPerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity17.KilogramsPerCubicMillimeter, KilogramsPerCubicMillimeterTolerance);
            Assert.Equal(MassConcentrationUnit.KilogramPerCubicMillimeter, quantity17.Unit);

            var quantity18 = MassConcentration.From(1, MassConcentrationUnit.KilogramPerLiter);
            AssertEx.EqualTolerance(1, quantity18.KilogramsPerLiter, KilogramsPerLiterTolerance);
            Assert.Equal(MassConcentrationUnit.KilogramPerLiter, quantity18.Unit);

            var quantity19 = MassConcentration.From(1, MassConcentrationUnit.KilopoundPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity19.KilopoundsPerCubicFoot, KilopoundsPerCubicFootTolerance);
            Assert.Equal(MassConcentrationUnit.KilopoundPerCubicFoot, quantity19.Unit);

            var quantity20 = MassConcentration.From(1, MassConcentrationUnit.KilopoundPerCubicInch);
            AssertEx.EqualTolerance(1, quantity20.KilopoundsPerCubicInch, KilopoundsPerCubicInchTolerance);
            Assert.Equal(MassConcentrationUnit.KilopoundPerCubicInch, quantity20.Unit);

            var quantity21 = MassConcentration.From(1, MassConcentrationUnit.MicrogramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity21.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            Assert.Equal(MassConcentrationUnit.MicrogramPerCubicMeter, quantity21.Unit);

            var quantity22 = MassConcentration.From(1, MassConcentrationUnit.MicrogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity22.MicrogramsPerDeciliter, MicrogramsPerDeciliterTolerance);
            Assert.Equal(MassConcentrationUnit.MicrogramPerDeciliter, quantity22.Unit);

            var quantity23 = MassConcentration.From(1, MassConcentrationUnit.MicrogramPerLiter);
            AssertEx.EqualTolerance(1, quantity23.MicrogramsPerLiter, MicrogramsPerLiterTolerance);
            Assert.Equal(MassConcentrationUnit.MicrogramPerLiter, quantity23.Unit);

            var quantity24 = MassConcentration.From(1, MassConcentrationUnit.MicrogramPerMicroliter);
            AssertEx.EqualTolerance(1, quantity24.MicrogramsPerMicroliter, MicrogramsPerMicroliterTolerance);
            Assert.Equal(MassConcentrationUnit.MicrogramPerMicroliter, quantity24.Unit);

            var quantity25 = MassConcentration.From(1, MassConcentrationUnit.MicrogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity25.MicrogramsPerMilliliter, MicrogramsPerMilliliterTolerance);
            Assert.Equal(MassConcentrationUnit.MicrogramPerMilliliter, quantity25.Unit);

            var quantity26 = MassConcentration.From(1, MassConcentrationUnit.MilligramPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity26.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            Assert.Equal(MassConcentrationUnit.MilligramPerCubicMeter, quantity26.Unit);

            var quantity27 = MassConcentration.From(1, MassConcentrationUnit.MilligramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity27.MilligramsPerDeciliter, MilligramsPerDeciliterTolerance);
            Assert.Equal(MassConcentrationUnit.MilligramPerDeciliter, quantity27.Unit);

            var quantity28 = MassConcentration.From(1, MassConcentrationUnit.MilligramPerLiter);
            AssertEx.EqualTolerance(1, quantity28.MilligramsPerLiter, MilligramsPerLiterTolerance);
            Assert.Equal(MassConcentrationUnit.MilligramPerLiter, quantity28.Unit);

            var quantity29 = MassConcentration.From(1, MassConcentrationUnit.MilligramPerMicroliter);
            AssertEx.EqualTolerance(1, quantity29.MilligramsPerMicroliter, MilligramsPerMicroliterTolerance);
            Assert.Equal(MassConcentrationUnit.MilligramPerMicroliter, quantity29.Unit);

            var quantity30 = MassConcentration.From(1, MassConcentrationUnit.MilligramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity30.MilligramsPerMilliliter, MilligramsPerMilliliterTolerance);
            Assert.Equal(MassConcentrationUnit.MilligramPerMilliliter, quantity30.Unit);

            var quantity31 = MassConcentration.From(1, MassConcentrationUnit.NanogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity31.NanogramsPerDeciliter, NanogramsPerDeciliterTolerance);
            Assert.Equal(MassConcentrationUnit.NanogramPerDeciliter, quantity31.Unit);

            var quantity32 = MassConcentration.From(1, MassConcentrationUnit.NanogramPerLiter);
            AssertEx.EqualTolerance(1, quantity32.NanogramsPerLiter, NanogramsPerLiterTolerance);
            Assert.Equal(MassConcentrationUnit.NanogramPerLiter, quantity32.Unit);

            var quantity33 = MassConcentration.From(1, MassConcentrationUnit.NanogramPerMicroliter);
            AssertEx.EqualTolerance(1, quantity33.NanogramsPerMicroliter, NanogramsPerMicroliterTolerance);
            Assert.Equal(MassConcentrationUnit.NanogramPerMicroliter, quantity33.Unit);

            var quantity34 = MassConcentration.From(1, MassConcentrationUnit.NanogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity34.NanogramsPerMilliliter, NanogramsPerMilliliterTolerance);
            Assert.Equal(MassConcentrationUnit.NanogramPerMilliliter, quantity34.Unit);

            var quantity35 = MassConcentration.From(1, MassConcentrationUnit.OuncePerImperialGallon);
            AssertEx.EqualTolerance(1, quantity35.OuncesPerImperialGallon, OuncesPerImperialGallonTolerance);
            Assert.Equal(MassConcentrationUnit.OuncePerImperialGallon, quantity35.Unit);

            var quantity36 = MassConcentration.From(1, MassConcentrationUnit.OuncePerUSGallon);
            AssertEx.EqualTolerance(1, quantity36.OuncesPerUSGallon, OuncesPerUSGallonTolerance);
            Assert.Equal(MassConcentrationUnit.OuncePerUSGallon, quantity36.Unit);

            var quantity37 = MassConcentration.From(1, MassConcentrationUnit.PicogramPerDeciliter);
            AssertEx.EqualTolerance(1, quantity37.PicogramsPerDeciliter, PicogramsPerDeciliterTolerance);
            Assert.Equal(MassConcentrationUnit.PicogramPerDeciliter, quantity37.Unit);

            var quantity38 = MassConcentration.From(1, MassConcentrationUnit.PicogramPerLiter);
            AssertEx.EqualTolerance(1, quantity38.PicogramsPerLiter, PicogramsPerLiterTolerance);
            Assert.Equal(MassConcentrationUnit.PicogramPerLiter, quantity38.Unit);

            var quantity39 = MassConcentration.From(1, MassConcentrationUnit.PicogramPerMicroliter);
            AssertEx.EqualTolerance(1, quantity39.PicogramsPerMicroliter, PicogramsPerMicroliterTolerance);
            Assert.Equal(MassConcentrationUnit.PicogramPerMicroliter, quantity39.Unit);

            var quantity40 = MassConcentration.From(1, MassConcentrationUnit.PicogramPerMilliliter);
            AssertEx.EqualTolerance(1, quantity40.PicogramsPerMilliliter, PicogramsPerMilliliterTolerance);
            Assert.Equal(MassConcentrationUnit.PicogramPerMilliliter, quantity40.Unit);

            var quantity41 = MassConcentration.From(1, MassConcentrationUnit.PoundPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity41.PoundsPerCubicFoot, PoundsPerCubicFootTolerance);
            Assert.Equal(MassConcentrationUnit.PoundPerCubicFoot, quantity41.Unit);

            var quantity42 = MassConcentration.From(1, MassConcentrationUnit.PoundPerCubicInch);
            AssertEx.EqualTolerance(1, quantity42.PoundsPerCubicInch, PoundsPerCubicInchTolerance);
            Assert.Equal(MassConcentrationUnit.PoundPerCubicInch, quantity42.Unit);

            var quantity43 = MassConcentration.From(1, MassConcentrationUnit.PoundPerImperialGallon);
            AssertEx.EqualTolerance(1, quantity43.PoundsPerImperialGallon, PoundsPerImperialGallonTolerance);
            Assert.Equal(MassConcentrationUnit.PoundPerImperialGallon, quantity43.Unit);

            var quantity44 = MassConcentration.From(1, MassConcentrationUnit.PoundPerUSGallon);
            AssertEx.EqualTolerance(1, quantity44.PoundsPerUSGallon, PoundsPerUSGallonTolerance);
            Assert.Equal(MassConcentrationUnit.PoundPerUSGallon, quantity44.Unit);

            var quantity45 = MassConcentration.From(1, MassConcentrationUnit.SlugPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity45.SlugsPerCubicFoot, SlugsPerCubicFootTolerance);
            Assert.Equal(MassConcentrationUnit.SlugPerCubicFoot, quantity45.Unit);

            var quantity46 = MassConcentration.From(1, MassConcentrationUnit.TonnePerCubicCentimeter);
            AssertEx.EqualTolerance(1, quantity46.TonnesPerCubicCentimeter, TonnesPerCubicCentimeterTolerance);
            Assert.Equal(MassConcentrationUnit.TonnePerCubicCentimeter, quantity46.Unit);

            var quantity47 = MassConcentration.From(1, MassConcentrationUnit.TonnePerCubicMeter);
            AssertEx.EqualTolerance(1, quantity47.TonnesPerCubicMeter, TonnesPerCubicMeterTolerance);
            Assert.Equal(MassConcentrationUnit.TonnePerCubicMeter, quantity47.Unit);

            var quantity48 = MassConcentration.From(1, MassConcentrationUnit.TonnePerCubicMillimeter);
            AssertEx.EqualTolerance(1, quantity48.TonnesPerCubicMillimeter, TonnesPerCubicMillimeterTolerance);
            Assert.Equal(MassConcentrationUnit.TonnePerCubicMillimeter, quantity48.Unit);

        }

        [Fact]
        public void FromKilogramsPerCubicMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => MassConcentration.FromKilogramsPerCubicMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => MassConcentration.FromKilogramsPerCubicMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromKilogramsPerCubicMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => MassConcentration.FromKilogramsPerCubicMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var kilogrampercubicmeter = MassConcentration.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(CentigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.CentigramPerDeciliter), CentigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(CentigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.CentigramPerLiter), CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.CentigramPerMicroliter), CentigramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(CentigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.CentigramPerMilliliter), CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.DecigramPerDeciliter), DecigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.DecigramPerLiter), DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.DecigramPerMicroliter), DecigramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(DecigramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.DecigramPerMilliliter), DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.GramPerCubicCentimeter), GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.GramPerCubicMeter), GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.GramPerCubicMillimeter), GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(GramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.GramPerDeciliter), GramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(GramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.GramPerLiter), GramsPerLiterTolerance);
            AssertEx.EqualTolerance(GramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.GramPerMicroliter), GramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(GramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.GramPerMilliliter), GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.KilogramPerCubicCentimeter), KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.KilogramPerCubicMeter), KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.KilogramPerCubicMillimeter), KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.KilogramPerLiter), KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.KilopoundPerCubicFoot), KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilopoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.KilopoundPerCubicInch), KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MicrogramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MicrogramPerCubicMeter), MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MicrogramPerDeciliter), MicrogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MicrogramPerLiter), MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MicrogramPerMicroliter), MicrogramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(MicrogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MicrogramPerMilliliter), MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MilligramPerCubicMeter), MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilligramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MilligramPerDeciliter), MilligramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MilligramPerLiter), MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MilligramPerMicroliter), MilligramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(MilligramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.MilligramPerMilliliter), MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.NanogramPerDeciliter), NanogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.NanogramPerLiter), NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.NanogramPerMicroliter), NanogramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(NanogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.NanogramPerMilliliter), NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(OuncesPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.OuncePerImperialGallon), OuncesPerImperialGallonTolerance);
            AssertEx.EqualTolerance(OuncesPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.OuncePerUSGallon), OuncesPerUSGallonTolerance);
            AssertEx.EqualTolerance(PicogramsPerDeciliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.PicogramPerDeciliter), PicogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerLiterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.PicogramPerLiter), PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMicroliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.PicogramPerMicroliter), PicogramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(PicogramsPerMilliliterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.PicogramPerMilliliter), PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.PoundPerCubicFoot), PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PoundsPerCubicInchInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.PoundPerCubicInch), PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PoundsPerImperialGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.PoundPerImperialGallon), PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(PoundsPerUSGallonInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.PoundPerUSGallon), PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(SlugsPerCubicFootInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.SlugPerCubicFoot), SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicCentimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.TonnePerCubicCentimeter), TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.TonnePerCubicMeter), TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TonnesPerCubicMillimeterInOneKilogramPerCubicMeter, kilogrampercubicmeter.As(MassConcentrationUnit.TonnePerCubicMillimeter), TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = MassConcentration.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
            var expectedValue = quantity.As(MassConcentration.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
            var expectedUnit = MassConcentration.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                MassConcentration quantityToConvert = quantity;

                MassConcentration convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<MassConcentrationUnit> quantityToConvert = quantity;

                IQuantity<MassConcentrationUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<MassConcentrationUnit> quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<MassConcentrationUnit> quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new MassConcentration(value: 1, unit: MassConcentration.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = MassConcentration.Parse("1 cg/dl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerDeciliter, CentigramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.CentigramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 cg/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerLiter, CentigramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.CentigramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 cg/μl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerMicroliter, CentigramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.CentigramPerMicroliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 cg/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerMilliliter, CentigramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.CentigramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 dg/dl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerDeciliter, DecigramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.DecigramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 dg/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerLiter, DecigramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.DecigramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 dg/μl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerMicroliter, DecigramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.DecigramPerMicroliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 dg/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerMilliliter, DecigramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.DecigramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 g/cm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerCubicCentimeter, GramsPerCubicCentimeterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 g/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 г/м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 g/mm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerCubicMillimeter, GramsPerCubicMillimeterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerCubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 g/dl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerDeciliter, GramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 g/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerLiter, GramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 g/μl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerMicroliter, GramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerMicroliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 g/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerMilliliter, GramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 kg/cm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerCubicCentimeter, KilogramsPerCubicCentimeterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 kg/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 кг/м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 kg/mm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerCubicMillimeter, KilogramsPerCubicMillimeterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerCubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 kg/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerLiter, KilogramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 kip/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundsPerCubicFoot, KilopoundsPerCubicFootTolerance);
                Assert.Equal(MassConcentrationUnit.KilopoundPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 kip/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundsPerCubicInch, KilopoundsPerCubicInchTolerance);
                Assert.Equal(MassConcentrationUnit.KilopoundPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 µg/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 мкг/м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 µg/dl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerDeciliter, MicrogramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 µg/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerLiter, MicrogramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 µg/μl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerMicroliter, MicrogramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerMicroliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 µg/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerMilliliter, MicrogramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 mg/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 мг/м³", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 mg/dl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerDeciliter, MilligramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 mg/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerLiter, MilligramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 mg/μl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerMicroliter, MilligramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerMicroliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 mg/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerMilliliter, MilligramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 ng/dl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerDeciliter, NanogramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.NanogramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 ng/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerLiter, NanogramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.NanogramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 ng/μl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerMicroliter, NanogramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.NanogramPerMicroliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 ng/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerMilliliter, NanogramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.NanogramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 oz/gal (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.OuncesPerImperialGallon, OuncesPerImperialGallonTolerance);
                Assert.Equal(MassConcentrationUnit.OuncePerImperialGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 oz/gal (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.OuncesPerUSGallon, OuncesPerUSGallonTolerance);
                Assert.Equal(MassConcentrationUnit.OuncePerUSGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 pg/dl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicogramsPerDeciliter, PicogramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.PicogramPerDeciliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 pg/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicogramsPerLiter, PicogramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.PicogramPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 pg/μl", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicogramsPerMicroliter, PicogramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.PicogramPerMicroliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 pg/ml", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicogramsPerMilliliter, PicogramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.PicogramPerMilliliter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 lb/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsPerCubicFoot, PoundsPerCubicFootTolerance);
                Assert.Equal(MassConcentrationUnit.PoundPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 lb/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsPerCubicInch, PoundsPerCubicInchTolerance);
                Assert.Equal(MassConcentrationUnit.PoundPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 ppg (imp.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsPerImperialGallon, PoundsPerImperialGallonTolerance);
                Assert.Equal(MassConcentrationUnit.PoundPerImperialGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 ppg (U.S.)", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsPerUSGallon, PoundsPerUSGallonTolerance);
                Assert.Equal(MassConcentrationUnit.PoundPerUSGallon, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 slug/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.SlugsPerCubicFoot, SlugsPerCubicFootTolerance);
                Assert.Equal(MassConcentrationUnit.SlugPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 t/cm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonnesPerCubicCentimeter, TonnesPerCubicCentimeterTolerance);
                Assert.Equal(MassConcentrationUnit.TonnePerCubicCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 t/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonnesPerCubicMeter, TonnesPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.TonnePerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassConcentration.Parse("1 t/mm³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonnesPerCubicMillimeter, TonnesPerCubicMillimeterTolerance);
                Assert.Equal(MassConcentrationUnit.TonnePerCubicMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(MassConcentration.TryParse("1 cg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerDeciliter, CentigramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.CentigramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 cg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerLiter, CentigramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.CentigramPerLiter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 cg/μl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerMicroliter, CentigramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.CentigramPerMicroliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 cg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerMilliliter, CentigramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.CentigramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 dg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerDeciliter, DecigramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.DecigramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 dg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerLiter, DecigramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.DecigramPerLiter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 dg/μl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerMicroliter, DecigramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.DecigramPerMicroliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 dg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerMilliliter, DecigramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.DecigramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 g/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerCubicCentimeter, GramsPerCubicCentimeterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 g/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 г/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerCubicMeter, GramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 g/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerCubicMillimeter, GramsPerCubicMillimeterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerCubicMillimeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 g/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerDeciliter, GramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 g/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerLiter, GramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerLiter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 g/μl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerMicroliter, GramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerMicroliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 g/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerMilliliter, GramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.GramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 kg/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerCubicCentimeter, KilogramsPerCubicCentimeterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 kg/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 кг/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 kg/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerCubicMillimeter, KilogramsPerCubicMillimeterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerCubicMillimeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 kg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerLiter, KilogramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.KilogramPerLiter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 kip/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundsPerCubicFoot, KilopoundsPerCubicFootTolerance);
                Assert.Equal(MassConcentrationUnit.KilopoundPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 kip/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundsPerCubicInch, KilopoundsPerCubicInchTolerance);
                Assert.Equal(MassConcentrationUnit.KilopoundPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 µg/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 мкг/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 µg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerDeciliter, MicrogramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 µg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerLiter, MicrogramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerLiter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 µg/μl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerMicroliter, MicrogramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerMicroliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 µg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerMilliliter, MicrogramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.MicrogramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 mg/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 мг/м³", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 mg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerDeciliter, MilligramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 mg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerLiter, MilligramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerLiter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 mg/μl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerMicroliter, MilligramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerMicroliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 mg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerMilliliter, MilligramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.MilligramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 ng/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerDeciliter, NanogramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.NanogramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 ng/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerLiter, NanogramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.NanogramPerLiter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 ng/μl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerMicroliter, NanogramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.NanogramPerMicroliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 ng/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerMilliliter, NanogramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.NanogramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 oz/gal (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.OuncesPerImperialGallon, OuncesPerImperialGallonTolerance);
                Assert.Equal(MassConcentrationUnit.OuncePerImperialGallon, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 oz/gal (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.OuncesPerUSGallon, OuncesPerUSGallonTolerance);
                Assert.Equal(MassConcentrationUnit.OuncePerUSGallon, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 pg/dl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicogramsPerDeciliter, PicogramsPerDeciliterTolerance);
                Assert.Equal(MassConcentrationUnit.PicogramPerDeciliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 pg/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicogramsPerLiter, PicogramsPerLiterTolerance);
                Assert.Equal(MassConcentrationUnit.PicogramPerLiter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 pg/μl", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicogramsPerMicroliter, PicogramsPerMicroliterTolerance);
                Assert.Equal(MassConcentrationUnit.PicogramPerMicroliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 pg/ml", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicogramsPerMilliliter, PicogramsPerMilliliterTolerance);
                Assert.Equal(MassConcentrationUnit.PicogramPerMilliliter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 lb/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsPerCubicFoot, PoundsPerCubicFootTolerance);
                Assert.Equal(MassConcentrationUnit.PoundPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 lb/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsPerCubicInch, PoundsPerCubicInchTolerance);
                Assert.Equal(MassConcentrationUnit.PoundPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 ppg (imp.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsPerImperialGallon, PoundsPerImperialGallonTolerance);
                Assert.Equal(MassConcentrationUnit.PoundPerImperialGallon, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 ppg (U.S.)", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsPerUSGallon, PoundsPerUSGallonTolerance);
                Assert.Equal(MassConcentrationUnit.PoundPerUSGallon, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 slug/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.SlugsPerCubicFoot, SlugsPerCubicFootTolerance);
                Assert.Equal(MassConcentrationUnit.SlugPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 t/cm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonnesPerCubicCentimeter, TonnesPerCubicCentimeterTolerance);
                Assert.Equal(MassConcentrationUnit.TonnePerCubicCentimeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 t/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonnesPerCubicMeter, TonnesPerCubicMeterTolerance);
                Assert.Equal(MassConcentrationUnit.TonnePerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(MassConcentration.TryParse("1 t/mm³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonnesPerCubicMillimeter, TonnesPerCubicMillimeterTolerance);
                Assert.Equal(MassConcentrationUnit.TonnePerCubicMillimeter, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("cg/dl", MassConcentrationUnit.CentigramPerDeciliter)]
        [InlineData("cg/l", MassConcentrationUnit.CentigramPerLiter)]
        [InlineData("cg/μl", MassConcentrationUnit.CentigramPerMicroliter)]
        [InlineData("cg/ml", MassConcentrationUnit.CentigramPerMilliliter)]
        [InlineData("dg/dl", MassConcentrationUnit.DecigramPerDeciliter)]
        [InlineData("dg/l", MassConcentrationUnit.DecigramPerLiter)]
        [InlineData("dg/μl", MassConcentrationUnit.DecigramPerMicroliter)]
        [InlineData("dg/ml", MassConcentrationUnit.DecigramPerMilliliter)]
        [InlineData("g/cm³", MassConcentrationUnit.GramPerCubicCentimeter)]
        [InlineData("g/m³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("g/mm³", MassConcentrationUnit.GramPerCubicMillimeter)]
        [InlineData("g/dl", MassConcentrationUnit.GramPerDeciliter)]
        [InlineData("g/l", MassConcentrationUnit.GramPerLiter)]
        [InlineData("g/μl", MassConcentrationUnit.GramPerMicroliter)]
        [InlineData("g/ml", MassConcentrationUnit.GramPerMilliliter)]
        [InlineData("kg/cm³", MassConcentrationUnit.KilogramPerCubicCentimeter)]
        [InlineData("kg/m³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("kg/mm³", MassConcentrationUnit.KilogramPerCubicMillimeter)]
        [InlineData("kg/l", MassConcentrationUnit.KilogramPerLiter)]
        [InlineData("kip/ft³", MassConcentrationUnit.KilopoundPerCubicFoot)]
        [InlineData("kip/in³", MassConcentrationUnit.KilopoundPerCubicInch)]
        [InlineData("µg/m³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("µg/dl", MassConcentrationUnit.MicrogramPerDeciliter)]
        [InlineData("µg/l", MassConcentrationUnit.MicrogramPerLiter)]
        [InlineData("µg/μl", MassConcentrationUnit.MicrogramPerMicroliter)]
        [InlineData("µg/ml", MassConcentrationUnit.MicrogramPerMilliliter)]
        [InlineData("mg/m³", MassConcentrationUnit.MilligramPerCubicMeter)]
        [InlineData("mg/dl", MassConcentrationUnit.MilligramPerDeciliter)]
        [InlineData("mg/l", MassConcentrationUnit.MilligramPerLiter)]
        [InlineData("mg/μl", MassConcentrationUnit.MilligramPerMicroliter)]
        [InlineData("mg/ml", MassConcentrationUnit.MilligramPerMilliliter)]
        [InlineData("ng/dl", MassConcentrationUnit.NanogramPerDeciliter)]
        [InlineData("ng/l", MassConcentrationUnit.NanogramPerLiter)]
        [InlineData("ng/μl", MassConcentrationUnit.NanogramPerMicroliter)]
        [InlineData("ng/ml", MassConcentrationUnit.NanogramPerMilliliter)]
        [InlineData("oz/gal (imp.)", MassConcentrationUnit.OuncePerImperialGallon)]
        [InlineData("oz/gal (U.S.)", MassConcentrationUnit.OuncePerUSGallon)]
        [InlineData("pg/dl", MassConcentrationUnit.PicogramPerDeciliter)]
        [InlineData("pg/l", MassConcentrationUnit.PicogramPerLiter)]
        [InlineData("pg/μl", MassConcentrationUnit.PicogramPerMicroliter)]
        [InlineData("pg/ml", MassConcentrationUnit.PicogramPerMilliliter)]
        [InlineData("lb/ft³", MassConcentrationUnit.PoundPerCubicFoot)]
        [InlineData("lb/in³", MassConcentrationUnit.PoundPerCubicInch)]
        [InlineData("ppg (imp.)", MassConcentrationUnit.PoundPerImperialGallon)]
        [InlineData("ppg (U.S.)", MassConcentrationUnit.PoundPerUSGallon)]
        [InlineData("slug/ft³", MassConcentrationUnit.SlugPerCubicFoot)]
        [InlineData("t/cm³", MassConcentrationUnit.TonnePerCubicCentimeter)]
        [InlineData("t/m³", MassConcentrationUnit.TonnePerCubicMeter)]
        [InlineData("t/mm³", MassConcentrationUnit.TonnePerCubicMillimeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MassConcentrationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            MassConcentrationUnit parsedUnit = MassConcentration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg/dl", MassConcentrationUnit.CentigramPerDeciliter)]
        [InlineData("cg/l", MassConcentrationUnit.CentigramPerLiter)]
        [InlineData("cg/μl", MassConcentrationUnit.CentigramPerMicroliter)]
        [InlineData("cg/ml", MassConcentrationUnit.CentigramPerMilliliter)]
        [InlineData("dg/dl", MassConcentrationUnit.DecigramPerDeciliter)]
        [InlineData("dg/l", MassConcentrationUnit.DecigramPerLiter)]
        [InlineData("dg/μl", MassConcentrationUnit.DecigramPerMicroliter)]
        [InlineData("dg/ml", MassConcentrationUnit.DecigramPerMilliliter)]
        [InlineData("g/cm³", MassConcentrationUnit.GramPerCubicCentimeter)]
        [InlineData("g/m³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("g/mm³", MassConcentrationUnit.GramPerCubicMillimeter)]
        [InlineData("g/dl", MassConcentrationUnit.GramPerDeciliter)]
        [InlineData("g/l", MassConcentrationUnit.GramPerLiter)]
        [InlineData("g/μl", MassConcentrationUnit.GramPerMicroliter)]
        [InlineData("g/ml", MassConcentrationUnit.GramPerMilliliter)]
        [InlineData("kg/cm³", MassConcentrationUnit.KilogramPerCubicCentimeter)]
        [InlineData("kg/m³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("kg/mm³", MassConcentrationUnit.KilogramPerCubicMillimeter)]
        [InlineData("kg/l", MassConcentrationUnit.KilogramPerLiter)]
        [InlineData("kip/ft³", MassConcentrationUnit.KilopoundPerCubicFoot)]
        [InlineData("kip/in³", MassConcentrationUnit.KilopoundPerCubicInch)]
        [InlineData("µg/m³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("µg/dl", MassConcentrationUnit.MicrogramPerDeciliter)]
        [InlineData("µg/l", MassConcentrationUnit.MicrogramPerLiter)]
        [InlineData("µg/μl", MassConcentrationUnit.MicrogramPerMicroliter)]
        [InlineData("µg/ml", MassConcentrationUnit.MicrogramPerMilliliter)]
        [InlineData("mg/m³", MassConcentrationUnit.MilligramPerCubicMeter)]
        [InlineData("mg/dl", MassConcentrationUnit.MilligramPerDeciliter)]
        [InlineData("mg/l", MassConcentrationUnit.MilligramPerLiter)]
        [InlineData("mg/μl", MassConcentrationUnit.MilligramPerMicroliter)]
        [InlineData("mg/ml", MassConcentrationUnit.MilligramPerMilliliter)]
        [InlineData("ng/dl", MassConcentrationUnit.NanogramPerDeciliter)]
        [InlineData("ng/l", MassConcentrationUnit.NanogramPerLiter)]
        [InlineData("ng/μl", MassConcentrationUnit.NanogramPerMicroliter)]
        [InlineData("ng/ml", MassConcentrationUnit.NanogramPerMilliliter)]
        [InlineData("oz/gal (imp.)", MassConcentrationUnit.OuncePerImperialGallon)]
        [InlineData("oz/gal (U.S.)", MassConcentrationUnit.OuncePerUSGallon)]
        [InlineData("pg/dl", MassConcentrationUnit.PicogramPerDeciliter)]
        [InlineData("pg/l", MassConcentrationUnit.PicogramPerLiter)]
        [InlineData("pg/μl", MassConcentrationUnit.PicogramPerMicroliter)]
        [InlineData("pg/ml", MassConcentrationUnit.PicogramPerMilliliter)]
        [InlineData("lb/ft³", MassConcentrationUnit.PoundPerCubicFoot)]
        [InlineData("lb/in³", MassConcentrationUnit.PoundPerCubicInch)]
        [InlineData("ppg (imp.)", MassConcentrationUnit.PoundPerImperialGallon)]
        [InlineData("ppg (U.S.)", MassConcentrationUnit.PoundPerUSGallon)]
        [InlineData("slug/ft³", MassConcentrationUnit.SlugPerCubicFoot)]
        [InlineData("t/cm³", MassConcentrationUnit.TonnePerCubicCentimeter)]
        [InlineData("t/m³", MassConcentrationUnit.TonnePerCubicMeter)]
        [InlineData("t/mm³", MassConcentrationUnit.TonnePerCubicMillimeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MassConcentrationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            MassConcentrationUnit parsedUnit = MassConcentration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/dl", MassConcentrationUnit.CentigramPerDeciliter)]
        [InlineData("en-US", "cg/l", MassConcentrationUnit.CentigramPerLiter)]
        [InlineData("en-US", "cg/μl", MassConcentrationUnit.CentigramPerMicroliter)]
        [InlineData("en-US", "cg/ml", MassConcentrationUnit.CentigramPerMilliliter)]
        [InlineData("en-US", "dg/dl", MassConcentrationUnit.DecigramPerDeciliter)]
        [InlineData("en-US", "dg/l", MassConcentrationUnit.DecigramPerLiter)]
        [InlineData("en-US", "dg/μl", MassConcentrationUnit.DecigramPerMicroliter)]
        [InlineData("en-US", "dg/ml", MassConcentrationUnit.DecigramPerMilliliter)]
        [InlineData("en-US", "g/cm³", MassConcentrationUnit.GramPerCubicCentimeter)]
        [InlineData("en-US", "g/m³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("en-US", "g/mm³", MassConcentrationUnit.GramPerCubicMillimeter)]
        [InlineData("en-US", "g/dl", MassConcentrationUnit.GramPerDeciliter)]
        [InlineData("en-US", "g/l", MassConcentrationUnit.GramPerLiter)]
        [InlineData("en-US", "g/μl", MassConcentrationUnit.GramPerMicroliter)]
        [InlineData("en-US", "g/ml", MassConcentrationUnit.GramPerMilliliter)]
        [InlineData("en-US", "kg/cm³", MassConcentrationUnit.KilogramPerCubicCentimeter)]
        [InlineData("en-US", "kg/m³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("en-US", "kg/mm³", MassConcentrationUnit.KilogramPerCubicMillimeter)]
        [InlineData("en-US", "kg/l", MassConcentrationUnit.KilogramPerLiter)]
        [InlineData("en-US", "kip/ft³", MassConcentrationUnit.KilopoundPerCubicFoot)]
        [InlineData("en-US", "kip/in³", MassConcentrationUnit.KilopoundPerCubicInch)]
        [InlineData("en-US", "µg/m³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("en-US", "µg/dl", MassConcentrationUnit.MicrogramPerDeciliter)]
        [InlineData("en-US", "µg/l", MassConcentrationUnit.MicrogramPerLiter)]
        [InlineData("en-US", "µg/μl", MassConcentrationUnit.MicrogramPerMicroliter)]
        [InlineData("en-US", "µg/ml", MassConcentrationUnit.MicrogramPerMilliliter)]
        [InlineData("en-US", "mg/m³", MassConcentrationUnit.MilligramPerCubicMeter)]
        [InlineData("en-US", "mg/dl", MassConcentrationUnit.MilligramPerDeciliter)]
        [InlineData("en-US", "mg/l", MassConcentrationUnit.MilligramPerLiter)]
        [InlineData("en-US", "mg/μl", MassConcentrationUnit.MilligramPerMicroliter)]
        [InlineData("en-US", "mg/ml", MassConcentrationUnit.MilligramPerMilliliter)]
        [InlineData("en-US", "ng/dl", MassConcentrationUnit.NanogramPerDeciliter)]
        [InlineData("en-US", "ng/l", MassConcentrationUnit.NanogramPerLiter)]
        [InlineData("en-US", "ng/μl", MassConcentrationUnit.NanogramPerMicroliter)]
        [InlineData("en-US", "ng/ml", MassConcentrationUnit.NanogramPerMilliliter)]
        [InlineData("en-US", "oz/gal (imp.)", MassConcentrationUnit.OuncePerImperialGallon)]
        [InlineData("en-US", "oz/gal (U.S.)", MassConcentrationUnit.OuncePerUSGallon)]
        [InlineData("en-US", "pg/dl", MassConcentrationUnit.PicogramPerDeciliter)]
        [InlineData("en-US", "pg/l", MassConcentrationUnit.PicogramPerLiter)]
        [InlineData("en-US", "pg/μl", MassConcentrationUnit.PicogramPerMicroliter)]
        [InlineData("en-US", "pg/ml", MassConcentrationUnit.PicogramPerMilliliter)]
        [InlineData("en-US", "lb/ft³", MassConcentrationUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lb/in³", MassConcentrationUnit.PoundPerCubicInch)]
        [InlineData("en-US", "ppg (imp.)", MassConcentrationUnit.PoundPerImperialGallon)]
        [InlineData("en-US", "ppg (U.S.)", MassConcentrationUnit.PoundPerUSGallon)]
        [InlineData("en-US", "slug/ft³", MassConcentrationUnit.SlugPerCubicFoot)]
        [InlineData("en-US", "t/cm³", MassConcentrationUnit.TonnePerCubicCentimeter)]
        [InlineData("en-US", "t/m³", MassConcentrationUnit.TonnePerCubicMeter)]
        [InlineData("en-US", "t/mm³", MassConcentrationUnit.TonnePerCubicMillimeter)]
        [InlineData("ru-RU", "г/м³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("ru-RU", "кг/м³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("ru-RU", "мкг/м³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("ru-RU", "мг/м³", MassConcentrationUnit.MilligramPerCubicMeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, MassConcentrationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            MassConcentrationUnit parsedUnit = MassConcentration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/dl", MassConcentrationUnit.CentigramPerDeciliter)]
        [InlineData("en-US", "cg/l", MassConcentrationUnit.CentigramPerLiter)]
        [InlineData("en-US", "cg/μl", MassConcentrationUnit.CentigramPerMicroliter)]
        [InlineData("en-US", "cg/ml", MassConcentrationUnit.CentigramPerMilliliter)]
        [InlineData("en-US", "dg/dl", MassConcentrationUnit.DecigramPerDeciliter)]
        [InlineData("en-US", "dg/l", MassConcentrationUnit.DecigramPerLiter)]
        [InlineData("en-US", "dg/μl", MassConcentrationUnit.DecigramPerMicroliter)]
        [InlineData("en-US", "dg/ml", MassConcentrationUnit.DecigramPerMilliliter)]
        [InlineData("en-US", "g/cm³", MassConcentrationUnit.GramPerCubicCentimeter)]
        [InlineData("en-US", "g/m³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("en-US", "g/mm³", MassConcentrationUnit.GramPerCubicMillimeter)]
        [InlineData("en-US", "g/dl", MassConcentrationUnit.GramPerDeciliter)]
        [InlineData("en-US", "g/l", MassConcentrationUnit.GramPerLiter)]
        [InlineData("en-US", "g/μl", MassConcentrationUnit.GramPerMicroliter)]
        [InlineData("en-US", "g/ml", MassConcentrationUnit.GramPerMilliliter)]
        [InlineData("en-US", "kg/cm³", MassConcentrationUnit.KilogramPerCubicCentimeter)]
        [InlineData("en-US", "kg/m³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("en-US", "kg/mm³", MassConcentrationUnit.KilogramPerCubicMillimeter)]
        [InlineData("en-US", "kg/l", MassConcentrationUnit.KilogramPerLiter)]
        [InlineData("en-US", "kip/ft³", MassConcentrationUnit.KilopoundPerCubicFoot)]
        [InlineData("en-US", "kip/in³", MassConcentrationUnit.KilopoundPerCubicInch)]
        [InlineData("en-US", "µg/m³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("en-US", "µg/dl", MassConcentrationUnit.MicrogramPerDeciliter)]
        [InlineData("en-US", "µg/l", MassConcentrationUnit.MicrogramPerLiter)]
        [InlineData("en-US", "µg/μl", MassConcentrationUnit.MicrogramPerMicroliter)]
        [InlineData("en-US", "µg/ml", MassConcentrationUnit.MicrogramPerMilliliter)]
        [InlineData("en-US", "mg/m³", MassConcentrationUnit.MilligramPerCubicMeter)]
        [InlineData("en-US", "mg/dl", MassConcentrationUnit.MilligramPerDeciliter)]
        [InlineData("en-US", "mg/l", MassConcentrationUnit.MilligramPerLiter)]
        [InlineData("en-US", "mg/μl", MassConcentrationUnit.MilligramPerMicroliter)]
        [InlineData("en-US", "mg/ml", MassConcentrationUnit.MilligramPerMilliliter)]
        [InlineData("en-US", "ng/dl", MassConcentrationUnit.NanogramPerDeciliter)]
        [InlineData("en-US", "ng/l", MassConcentrationUnit.NanogramPerLiter)]
        [InlineData("en-US", "ng/μl", MassConcentrationUnit.NanogramPerMicroliter)]
        [InlineData("en-US", "ng/ml", MassConcentrationUnit.NanogramPerMilliliter)]
        [InlineData("en-US", "oz/gal (imp.)", MassConcentrationUnit.OuncePerImperialGallon)]
        [InlineData("en-US", "oz/gal (U.S.)", MassConcentrationUnit.OuncePerUSGallon)]
        [InlineData("en-US", "pg/dl", MassConcentrationUnit.PicogramPerDeciliter)]
        [InlineData("en-US", "pg/l", MassConcentrationUnit.PicogramPerLiter)]
        [InlineData("en-US", "pg/μl", MassConcentrationUnit.PicogramPerMicroliter)]
        [InlineData("en-US", "pg/ml", MassConcentrationUnit.PicogramPerMilliliter)]
        [InlineData("en-US", "lb/ft³", MassConcentrationUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lb/in³", MassConcentrationUnit.PoundPerCubicInch)]
        [InlineData("en-US", "ppg (imp.)", MassConcentrationUnit.PoundPerImperialGallon)]
        [InlineData("en-US", "ppg (U.S.)", MassConcentrationUnit.PoundPerUSGallon)]
        [InlineData("en-US", "slug/ft³", MassConcentrationUnit.SlugPerCubicFoot)]
        [InlineData("en-US", "t/cm³", MassConcentrationUnit.TonnePerCubicCentimeter)]
        [InlineData("en-US", "t/m³", MassConcentrationUnit.TonnePerCubicMeter)]
        [InlineData("en-US", "t/mm³", MassConcentrationUnit.TonnePerCubicMillimeter)]
        [InlineData("ru-RU", "г/м³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("ru-RU", "кг/м³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("ru-RU", "мкг/м³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("ru-RU", "мг/м³", MassConcentrationUnit.MilligramPerCubicMeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, MassConcentrationUnit expectedUnit)
        {
            MassConcentrationUnit parsedUnit = MassConcentration.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg/dl", MassConcentrationUnit.CentigramPerDeciliter)]
        [InlineData("cg/l", MassConcentrationUnit.CentigramPerLiter)]
        [InlineData("cg/μl", MassConcentrationUnit.CentigramPerMicroliter)]
        [InlineData("cg/ml", MassConcentrationUnit.CentigramPerMilliliter)]
        [InlineData("dg/dl", MassConcentrationUnit.DecigramPerDeciliter)]
        [InlineData("dg/l", MassConcentrationUnit.DecigramPerLiter)]
        [InlineData("dg/μl", MassConcentrationUnit.DecigramPerMicroliter)]
        [InlineData("dg/ml", MassConcentrationUnit.DecigramPerMilliliter)]
        [InlineData("g/cm³", MassConcentrationUnit.GramPerCubicCentimeter)]
        [InlineData("g/m³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("g/mm³", MassConcentrationUnit.GramPerCubicMillimeter)]
        [InlineData("g/dl", MassConcentrationUnit.GramPerDeciliter)]
        [InlineData("g/l", MassConcentrationUnit.GramPerLiter)]
        [InlineData("g/μl", MassConcentrationUnit.GramPerMicroliter)]
        [InlineData("g/ml", MassConcentrationUnit.GramPerMilliliter)]
        [InlineData("kg/cm³", MassConcentrationUnit.KilogramPerCubicCentimeter)]
        [InlineData("kg/m³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("kg/mm³", MassConcentrationUnit.KilogramPerCubicMillimeter)]
        [InlineData("kg/l", MassConcentrationUnit.KilogramPerLiter)]
        [InlineData("kip/ft³", MassConcentrationUnit.KilopoundPerCubicFoot)]
        [InlineData("kip/in³", MassConcentrationUnit.KilopoundPerCubicInch)]
        [InlineData("µg/m³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("µg/dl", MassConcentrationUnit.MicrogramPerDeciliter)]
        [InlineData("µg/l", MassConcentrationUnit.MicrogramPerLiter)]
        [InlineData("µg/μl", MassConcentrationUnit.MicrogramPerMicroliter)]
        [InlineData("µg/ml", MassConcentrationUnit.MicrogramPerMilliliter)]
        [InlineData("mg/m³", MassConcentrationUnit.MilligramPerCubicMeter)]
        [InlineData("mg/dl", MassConcentrationUnit.MilligramPerDeciliter)]
        [InlineData("mg/l", MassConcentrationUnit.MilligramPerLiter)]
        [InlineData("mg/μl", MassConcentrationUnit.MilligramPerMicroliter)]
        [InlineData("mg/ml", MassConcentrationUnit.MilligramPerMilliliter)]
        [InlineData("ng/dl", MassConcentrationUnit.NanogramPerDeciliter)]
        [InlineData("ng/l", MassConcentrationUnit.NanogramPerLiter)]
        [InlineData("ng/μl", MassConcentrationUnit.NanogramPerMicroliter)]
        [InlineData("ng/ml", MassConcentrationUnit.NanogramPerMilliliter)]
        [InlineData("oz/gal (imp.)", MassConcentrationUnit.OuncePerImperialGallon)]
        [InlineData("oz/gal (U.S.)", MassConcentrationUnit.OuncePerUSGallon)]
        [InlineData("pg/dl", MassConcentrationUnit.PicogramPerDeciliter)]
        [InlineData("pg/l", MassConcentrationUnit.PicogramPerLiter)]
        [InlineData("pg/μl", MassConcentrationUnit.PicogramPerMicroliter)]
        [InlineData("pg/ml", MassConcentrationUnit.PicogramPerMilliliter)]
        [InlineData("lb/ft³", MassConcentrationUnit.PoundPerCubicFoot)]
        [InlineData("lb/in³", MassConcentrationUnit.PoundPerCubicInch)]
        [InlineData("ppg (imp.)", MassConcentrationUnit.PoundPerImperialGallon)]
        [InlineData("ppg (U.S.)", MassConcentrationUnit.PoundPerUSGallon)]
        [InlineData("slug/ft³", MassConcentrationUnit.SlugPerCubicFoot)]
        [InlineData("t/cm³", MassConcentrationUnit.TonnePerCubicCentimeter)]
        [InlineData("t/m³", MassConcentrationUnit.TonnePerCubicMeter)]
        [InlineData("t/mm³", MassConcentrationUnit.TonnePerCubicMillimeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MassConcentrationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(MassConcentration.TryParseUnit(abbreviation, out MassConcentrationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg/dl", MassConcentrationUnit.CentigramPerDeciliter)]
        [InlineData("cg/l", MassConcentrationUnit.CentigramPerLiter)]
        [InlineData("cg/μl", MassConcentrationUnit.CentigramPerMicroliter)]
        [InlineData("cg/ml", MassConcentrationUnit.CentigramPerMilliliter)]
        [InlineData("dg/dl", MassConcentrationUnit.DecigramPerDeciliter)]
        [InlineData("dg/l", MassConcentrationUnit.DecigramPerLiter)]
        [InlineData("dg/μl", MassConcentrationUnit.DecigramPerMicroliter)]
        [InlineData("dg/ml", MassConcentrationUnit.DecigramPerMilliliter)]
        [InlineData("g/cm³", MassConcentrationUnit.GramPerCubicCentimeter)]
        [InlineData("g/m³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("g/mm³", MassConcentrationUnit.GramPerCubicMillimeter)]
        [InlineData("g/dl", MassConcentrationUnit.GramPerDeciliter)]
        [InlineData("g/l", MassConcentrationUnit.GramPerLiter)]
        [InlineData("g/μl", MassConcentrationUnit.GramPerMicroliter)]
        [InlineData("g/ml", MassConcentrationUnit.GramPerMilliliter)]
        [InlineData("kg/cm³", MassConcentrationUnit.KilogramPerCubicCentimeter)]
        [InlineData("kg/m³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("kg/mm³", MassConcentrationUnit.KilogramPerCubicMillimeter)]
        [InlineData("kg/l", MassConcentrationUnit.KilogramPerLiter)]
        [InlineData("kip/ft³", MassConcentrationUnit.KilopoundPerCubicFoot)]
        [InlineData("kip/in³", MassConcentrationUnit.KilopoundPerCubicInch)]
        [InlineData("µg/m³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("µg/dl", MassConcentrationUnit.MicrogramPerDeciliter)]
        [InlineData("µg/l", MassConcentrationUnit.MicrogramPerLiter)]
        [InlineData("µg/μl", MassConcentrationUnit.MicrogramPerMicroliter)]
        [InlineData("µg/ml", MassConcentrationUnit.MicrogramPerMilliliter)]
        [InlineData("mg/m³", MassConcentrationUnit.MilligramPerCubicMeter)]
        [InlineData("mg/dl", MassConcentrationUnit.MilligramPerDeciliter)]
        [InlineData("mg/l", MassConcentrationUnit.MilligramPerLiter)]
        [InlineData("mg/μl", MassConcentrationUnit.MilligramPerMicroliter)]
        [InlineData("mg/ml", MassConcentrationUnit.MilligramPerMilliliter)]
        [InlineData("ng/dl", MassConcentrationUnit.NanogramPerDeciliter)]
        [InlineData("ng/l", MassConcentrationUnit.NanogramPerLiter)]
        [InlineData("ng/μl", MassConcentrationUnit.NanogramPerMicroliter)]
        [InlineData("ng/ml", MassConcentrationUnit.NanogramPerMilliliter)]
        [InlineData("oz/gal (imp.)", MassConcentrationUnit.OuncePerImperialGallon)]
        [InlineData("oz/gal (U.S.)", MassConcentrationUnit.OuncePerUSGallon)]
        [InlineData("pg/dl", MassConcentrationUnit.PicogramPerDeciliter)]
        [InlineData("pg/l", MassConcentrationUnit.PicogramPerLiter)]
        [InlineData("pg/μl", MassConcentrationUnit.PicogramPerMicroliter)]
        [InlineData("pg/ml", MassConcentrationUnit.PicogramPerMilliliter)]
        [InlineData("lb/ft³", MassConcentrationUnit.PoundPerCubicFoot)]
        [InlineData("lb/in³", MassConcentrationUnit.PoundPerCubicInch)]
        [InlineData("ppg (imp.)", MassConcentrationUnit.PoundPerImperialGallon)]
        [InlineData("ppg (U.S.)", MassConcentrationUnit.PoundPerUSGallon)]
        [InlineData("slug/ft³", MassConcentrationUnit.SlugPerCubicFoot)]
        [InlineData("t/cm³", MassConcentrationUnit.TonnePerCubicCentimeter)]
        [InlineData("t/m³", MassConcentrationUnit.TonnePerCubicMeter)]
        [InlineData("t/mm³", MassConcentrationUnit.TonnePerCubicMillimeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MassConcentrationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(MassConcentration.TryParseUnit(abbreviation, out MassConcentrationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/dl", MassConcentrationUnit.CentigramPerDeciliter)]
        [InlineData("en-US", "cg/l", MassConcentrationUnit.CentigramPerLiter)]
        [InlineData("en-US", "cg/μl", MassConcentrationUnit.CentigramPerMicroliter)]
        [InlineData("en-US", "cg/ml", MassConcentrationUnit.CentigramPerMilliliter)]
        [InlineData("en-US", "dg/dl", MassConcentrationUnit.DecigramPerDeciliter)]
        [InlineData("en-US", "dg/l", MassConcentrationUnit.DecigramPerLiter)]
        [InlineData("en-US", "dg/μl", MassConcentrationUnit.DecigramPerMicroliter)]
        [InlineData("en-US", "dg/ml", MassConcentrationUnit.DecigramPerMilliliter)]
        [InlineData("en-US", "g/cm³", MassConcentrationUnit.GramPerCubicCentimeter)]
        [InlineData("en-US", "g/m³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("en-US", "g/mm³", MassConcentrationUnit.GramPerCubicMillimeter)]
        [InlineData("en-US", "g/dl", MassConcentrationUnit.GramPerDeciliter)]
        [InlineData("en-US", "g/l", MassConcentrationUnit.GramPerLiter)]
        [InlineData("en-US", "g/μl", MassConcentrationUnit.GramPerMicroliter)]
        [InlineData("en-US", "g/ml", MassConcentrationUnit.GramPerMilliliter)]
        [InlineData("en-US", "kg/cm³", MassConcentrationUnit.KilogramPerCubicCentimeter)]
        [InlineData("en-US", "kg/m³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("en-US", "kg/mm³", MassConcentrationUnit.KilogramPerCubicMillimeter)]
        [InlineData("en-US", "kg/l", MassConcentrationUnit.KilogramPerLiter)]
        [InlineData("en-US", "kip/ft³", MassConcentrationUnit.KilopoundPerCubicFoot)]
        [InlineData("en-US", "kip/in³", MassConcentrationUnit.KilopoundPerCubicInch)]
        [InlineData("en-US", "µg/m³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("en-US", "µg/dl", MassConcentrationUnit.MicrogramPerDeciliter)]
        [InlineData("en-US", "µg/l", MassConcentrationUnit.MicrogramPerLiter)]
        [InlineData("en-US", "µg/μl", MassConcentrationUnit.MicrogramPerMicroliter)]
        [InlineData("en-US", "µg/ml", MassConcentrationUnit.MicrogramPerMilliliter)]
        [InlineData("en-US", "mg/m³", MassConcentrationUnit.MilligramPerCubicMeter)]
        [InlineData("en-US", "mg/dl", MassConcentrationUnit.MilligramPerDeciliter)]
        [InlineData("en-US", "mg/l", MassConcentrationUnit.MilligramPerLiter)]
        [InlineData("en-US", "mg/μl", MassConcentrationUnit.MilligramPerMicroliter)]
        [InlineData("en-US", "mg/ml", MassConcentrationUnit.MilligramPerMilliliter)]
        [InlineData("en-US", "ng/dl", MassConcentrationUnit.NanogramPerDeciliter)]
        [InlineData("en-US", "ng/l", MassConcentrationUnit.NanogramPerLiter)]
        [InlineData("en-US", "ng/μl", MassConcentrationUnit.NanogramPerMicroliter)]
        [InlineData("en-US", "ng/ml", MassConcentrationUnit.NanogramPerMilliliter)]
        [InlineData("en-US", "oz/gal (imp.)", MassConcentrationUnit.OuncePerImperialGallon)]
        [InlineData("en-US", "oz/gal (U.S.)", MassConcentrationUnit.OuncePerUSGallon)]
        [InlineData("en-US", "pg/dl", MassConcentrationUnit.PicogramPerDeciliter)]
        [InlineData("en-US", "pg/l", MassConcentrationUnit.PicogramPerLiter)]
        [InlineData("en-US", "pg/μl", MassConcentrationUnit.PicogramPerMicroliter)]
        [InlineData("en-US", "pg/ml", MassConcentrationUnit.PicogramPerMilliliter)]
        [InlineData("en-US", "lb/ft³", MassConcentrationUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lb/in³", MassConcentrationUnit.PoundPerCubicInch)]
        [InlineData("en-US", "ppg (imp.)", MassConcentrationUnit.PoundPerImperialGallon)]
        [InlineData("en-US", "ppg (U.S.)", MassConcentrationUnit.PoundPerUSGallon)]
        [InlineData("en-US", "slug/ft³", MassConcentrationUnit.SlugPerCubicFoot)]
        [InlineData("en-US", "t/cm³", MassConcentrationUnit.TonnePerCubicCentimeter)]
        [InlineData("en-US", "t/m³", MassConcentrationUnit.TonnePerCubicMeter)]
        [InlineData("en-US", "t/mm³", MassConcentrationUnit.TonnePerCubicMillimeter)]
        [InlineData("ru-RU", "г/м³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("ru-RU", "кг/м³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("ru-RU", "мкг/м³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("ru-RU", "мг/м³", MassConcentrationUnit.MilligramPerCubicMeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, MassConcentrationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(MassConcentration.TryParseUnit(abbreviation, out MassConcentrationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/dl", MassConcentrationUnit.CentigramPerDeciliter)]
        [InlineData("en-US", "cg/l", MassConcentrationUnit.CentigramPerLiter)]
        [InlineData("en-US", "cg/μl", MassConcentrationUnit.CentigramPerMicroliter)]
        [InlineData("en-US", "cg/ml", MassConcentrationUnit.CentigramPerMilliliter)]
        [InlineData("en-US", "dg/dl", MassConcentrationUnit.DecigramPerDeciliter)]
        [InlineData("en-US", "dg/l", MassConcentrationUnit.DecigramPerLiter)]
        [InlineData("en-US", "dg/μl", MassConcentrationUnit.DecigramPerMicroliter)]
        [InlineData("en-US", "dg/ml", MassConcentrationUnit.DecigramPerMilliliter)]
        [InlineData("en-US", "g/cm³", MassConcentrationUnit.GramPerCubicCentimeter)]
        [InlineData("en-US", "g/m³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("en-US", "g/mm³", MassConcentrationUnit.GramPerCubicMillimeter)]
        [InlineData("en-US", "g/dl", MassConcentrationUnit.GramPerDeciliter)]
        [InlineData("en-US", "g/l", MassConcentrationUnit.GramPerLiter)]
        [InlineData("en-US", "g/μl", MassConcentrationUnit.GramPerMicroliter)]
        [InlineData("en-US", "g/ml", MassConcentrationUnit.GramPerMilliliter)]
        [InlineData("en-US", "kg/cm³", MassConcentrationUnit.KilogramPerCubicCentimeter)]
        [InlineData("en-US", "kg/m³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("en-US", "kg/mm³", MassConcentrationUnit.KilogramPerCubicMillimeter)]
        [InlineData("en-US", "kg/l", MassConcentrationUnit.KilogramPerLiter)]
        [InlineData("en-US", "kip/ft³", MassConcentrationUnit.KilopoundPerCubicFoot)]
        [InlineData("en-US", "kip/in³", MassConcentrationUnit.KilopoundPerCubicInch)]
        [InlineData("en-US", "µg/m³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("en-US", "µg/dl", MassConcentrationUnit.MicrogramPerDeciliter)]
        [InlineData("en-US", "µg/l", MassConcentrationUnit.MicrogramPerLiter)]
        [InlineData("en-US", "µg/μl", MassConcentrationUnit.MicrogramPerMicroliter)]
        [InlineData("en-US", "µg/ml", MassConcentrationUnit.MicrogramPerMilliliter)]
        [InlineData("en-US", "mg/m³", MassConcentrationUnit.MilligramPerCubicMeter)]
        [InlineData("en-US", "mg/dl", MassConcentrationUnit.MilligramPerDeciliter)]
        [InlineData("en-US", "mg/l", MassConcentrationUnit.MilligramPerLiter)]
        [InlineData("en-US", "mg/μl", MassConcentrationUnit.MilligramPerMicroliter)]
        [InlineData("en-US", "mg/ml", MassConcentrationUnit.MilligramPerMilliliter)]
        [InlineData("en-US", "ng/dl", MassConcentrationUnit.NanogramPerDeciliter)]
        [InlineData("en-US", "ng/l", MassConcentrationUnit.NanogramPerLiter)]
        [InlineData("en-US", "ng/μl", MassConcentrationUnit.NanogramPerMicroliter)]
        [InlineData("en-US", "ng/ml", MassConcentrationUnit.NanogramPerMilliliter)]
        [InlineData("en-US", "oz/gal (imp.)", MassConcentrationUnit.OuncePerImperialGallon)]
        [InlineData("en-US", "oz/gal (U.S.)", MassConcentrationUnit.OuncePerUSGallon)]
        [InlineData("en-US", "pg/dl", MassConcentrationUnit.PicogramPerDeciliter)]
        [InlineData("en-US", "pg/l", MassConcentrationUnit.PicogramPerLiter)]
        [InlineData("en-US", "pg/μl", MassConcentrationUnit.PicogramPerMicroliter)]
        [InlineData("en-US", "pg/ml", MassConcentrationUnit.PicogramPerMilliliter)]
        [InlineData("en-US", "lb/ft³", MassConcentrationUnit.PoundPerCubicFoot)]
        [InlineData("en-US", "lb/in³", MassConcentrationUnit.PoundPerCubicInch)]
        [InlineData("en-US", "ppg (imp.)", MassConcentrationUnit.PoundPerImperialGallon)]
        [InlineData("en-US", "ppg (U.S.)", MassConcentrationUnit.PoundPerUSGallon)]
        [InlineData("en-US", "slug/ft³", MassConcentrationUnit.SlugPerCubicFoot)]
        [InlineData("en-US", "t/cm³", MassConcentrationUnit.TonnePerCubicCentimeter)]
        [InlineData("en-US", "t/m³", MassConcentrationUnit.TonnePerCubicMeter)]
        [InlineData("en-US", "t/mm³", MassConcentrationUnit.TonnePerCubicMillimeter)]
        [InlineData("ru-RU", "г/м³", MassConcentrationUnit.GramPerCubicMeter)]
        [InlineData("ru-RU", "кг/м³", MassConcentrationUnit.KilogramPerCubicMeter)]
        [InlineData("ru-RU", "мкг/м³", MassConcentrationUnit.MicrogramPerCubicMeter)]
        [InlineData("ru-RU", "мг/м³", MassConcentrationUnit.MilligramPerCubicMeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, MassConcentrationUnit expectedUnit)
        {
            Assert.True(MassConcentration.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out MassConcentrationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MassConcentrationUnit unit)
        {
            var inBaseUnits = MassConcentration.From(1.0, MassConcentration.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MassConcentrationUnit unit)
        {
            var quantity = MassConcentration.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MassConcentrationUnit unit)
        {
            Assert.All(MassConcentration.Units.Where(u => u != MassConcentration.BaseUnit), fromUnit =>
            {
                var quantity = MassConcentration.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MassConcentrationUnit unit)
        {
            var quantity = default(MassConcentration);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(MassConcentrationUnit unit)
        {
            var quantity = MassConcentration.From(3, MassConcentration.BaseUnit);
            MassConcentration expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<MassConcentrationUnit> quantityToConvert = quantity;
                IQuantity<MassConcentrationUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MassConcentration kilogrampercubicmeter = MassConcentration.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(1, MassConcentration.FromCentigramsPerDeciliter(kilogrampercubicmeter.CentigramsPerDeciliter).KilogramsPerCubicMeter, CentigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromCentigramsPerLiter(kilogrampercubicmeter.CentigramsPerLiter).KilogramsPerCubicMeter, CentigramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromCentigramsPerMicroliter(kilogrampercubicmeter.CentigramsPerMicroliter).KilogramsPerCubicMeter, CentigramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromCentigramsPerMilliliter(kilogrampercubicmeter.CentigramsPerMilliliter).KilogramsPerCubicMeter, CentigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromDecigramsPerDeciliter(kilogrampercubicmeter.DecigramsPerDeciliter).KilogramsPerCubicMeter, DecigramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromDecigramsPerLiter(kilogrampercubicmeter.DecigramsPerLiter).KilogramsPerCubicMeter, DecigramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromDecigramsPerMicroliter(kilogrampercubicmeter.DecigramsPerMicroliter).KilogramsPerCubicMeter, DecigramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromDecigramsPerMilliliter(kilogrampercubicmeter.DecigramsPerMilliliter).KilogramsPerCubicMeter, DecigramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromGramsPerCubicCentimeter(kilogrampercubicmeter.GramsPerCubicCentimeter).KilogramsPerCubicMeter, GramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromGramsPerCubicMeter(kilogrampercubicmeter.GramsPerCubicMeter).KilogramsPerCubicMeter, GramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromGramsPerCubicMillimeter(kilogrampercubicmeter.GramsPerCubicMillimeter).KilogramsPerCubicMeter, GramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromGramsPerDeciliter(kilogrampercubicmeter.GramsPerDeciliter).KilogramsPerCubicMeter, GramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromGramsPerLiter(kilogrampercubicmeter.GramsPerLiter).KilogramsPerCubicMeter, GramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromGramsPerMicroliter(kilogrampercubicmeter.GramsPerMicroliter).KilogramsPerCubicMeter, GramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromGramsPerMilliliter(kilogrampercubicmeter.GramsPerMilliliter).KilogramsPerCubicMeter, GramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromKilogramsPerCubicCentimeter(kilogrampercubicmeter.KilogramsPerCubicCentimeter).KilogramsPerCubicMeter, KilogramsPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromKilogramsPerCubicMeter(kilogrampercubicmeter.KilogramsPerCubicMeter).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromKilogramsPerCubicMillimeter(kilogrampercubicmeter.KilogramsPerCubicMillimeter).KilogramsPerCubicMeter, KilogramsPerCubicMillimeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromKilogramsPerLiter(kilogrampercubicmeter.KilogramsPerLiter).KilogramsPerCubicMeter, KilogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromKilopoundsPerCubicFoot(kilogrampercubicmeter.KilopoundsPerCubicFoot).KilogramsPerCubicMeter, KilopoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromKilopoundsPerCubicInch(kilogrampercubicmeter.KilopoundsPerCubicInch).KilogramsPerCubicMeter, KilopoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMicrogramsPerCubicMeter(kilogrampercubicmeter.MicrogramsPerCubicMeter).KilogramsPerCubicMeter, MicrogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMicrogramsPerDeciliter(kilogrampercubicmeter.MicrogramsPerDeciliter).KilogramsPerCubicMeter, MicrogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMicrogramsPerLiter(kilogrampercubicmeter.MicrogramsPerLiter).KilogramsPerCubicMeter, MicrogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMicrogramsPerMicroliter(kilogrampercubicmeter.MicrogramsPerMicroliter).KilogramsPerCubicMeter, MicrogramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMicrogramsPerMilliliter(kilogrampercubicmeter.MicrogramsPerMilliliter).KilogramsPerCubicMeter, MicrogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMilligramsPerCubicMeter(kilogrampercubicmeter.MilligramsPerCubicMeter).KilogramsPerCubicMeter, MilligramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMilligramsPerDeciliter(kilogrampercubicmeter.MilligramsPerDeciliter).KilogramsPerCubicMeter, MilligramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMilligramsPerLiter(kilogrampercubicmeter.MilligramsPerLiter).KilogramsPerCubicMeter, MilligramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMilligramsPerMicroliter(kilogrampercubicmeter.MilligramsPerMicroliter).KilogramsPerCubicMeter, MilligramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromMilligramsPerMilliliter(kilogrampercubicmeter.MilligramsPerMilliliter).KilogramsPerCubicMeter, MilligramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromNanogramsPerDeciliter(kilogrampercubicmeter.NanogramsPerDeciliter).KilogramsPerCubicMeter, NanogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromNanogramsPerLiter(kilogrampercubicmeter.NanogramsPerLiter).KilogramsPerCubicMeter, NanogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromNanogramsPerMicroliter(kilogrampercubicmeter.NanogramsPerMicroliter).KilogramsPerCubicMeter, NanogramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromNanogramsPerMilliliter(kilogrampercubicmeter.NanogramsPerMilliliter).KilogramsPerCubicMeter, NanogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromOuncesPerImperialGallon(kilogrampercubicmeter.OuncesPerImperialGallon).KilogramsPerCubicMeter, OuncesPerImperialGallonTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromOuncesPerUSGallon(kilogrampercubicmeter.OuncesPerUSGallon).KilogramsPerCubicMeter, OuncesPerUSGallonTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromPicogramsPerDeciliter(kilogrampercubicmeter.PicogramsPerDeciliter).KilogramsPerCubicMeter, PicogramsPerDeciliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromPicogramsPerLiter(kilogrampercubicmeter.PicogramsPerLiter).KilogramsPerCubicMeter, PicogramsPerLiterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromPicogramsPerMicroliter(kilogrampercubicmeter.PicogramsPerMicroliter).KilogramsPerCubicMeter, PicogramsPerMicroliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromPicogramsPerMilliliter(kilogrampercubicmeter.PicogramsPerMilliliter).KilogramsPerCubicMeter, PicogramsPerMilliliterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromPoundsPerCubicFoot(kilogrampercubicmeter.PoundsPerCubicFoot).KilogramsPerCubicMeter, PoundsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromPoundsPerCubicInch(kilogrampercubicmeter.PoundsPerCubicInch).KilogramsPerCubicMeter, PoundsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromPoundsPerImperialGallon(kilogrampercubicmeter.PoundsPerImperialGallon).KilogramsPerCubicMeter, PoundsPerImperialGallonTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromPoundsPerUSGallon(kilogrampercubicmeter.PoundsPerUSGallon).KilogramsPerCubicMeter, PoundsPerUSGallonTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromSlugsPerCubicFoot(kilogrampercubicmeter.SlugsPerCubicFoot).KilogramsPerCubicMeter, SlugsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromTonnesPerCubicCentimeter(kilogrampercubicmeter.TonnesPerCubicCentimeter).KilogramsPerCubicMeter, TonnesPerCubicCentimeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromTonnesPerCubicMeter(kilogrampercubicmeter.TonnesPerCubicMeter).KilogramsPerCubicMeter, TonnesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, MassConcentration.FromTonnesPerCubicMillimeter(kilogrampercubicmeter.TonnesPerCubicMillimeter).KilogramsPerCubicMeter, TonnesPerCubicMillimeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MassConcentration v = MassConcentration.FromKilogramsPerCubicMeter(1);
            AssertEx.EqualTolerance(-1, -v.KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (MassConcentration.FromKilogramsPerCubicMeter(3)-v).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (MassConcentration.FromKilogramsPerCubicMeter(10)/5).KilogramsPerCubicMeter, KilogramsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, MassConcentration.FromKilogramsPerCubicMeter(10)/MassConcentration.FromKilogramsPerCubicMeter(5), KilogramsPerCubicMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MassConcentration oneKilogramPerCubicMeter = MassConcentration.FromKilogramsPerCubicMeter(1);
            MassConcentration twoKilogramsPerCubicMeter = MassConcentration.FromKilogramsPerCubicMeter(2);

            Assert.True(oneKilogramPerCubicMeter < twoKilogramsPerCubicMeter);
            Assert.True(oneKilogramPerCubicMeter <= twoKilogramsPerCubicMeter);
            Assert.True(twoKilogramsPerCubicMeter > oneKilogramPerCubicMeter);
            Assert.True(twoKilogramsPerCubicMeter >= oneKilogramPerCubicMeter);

            Assert.False(oneKilogramPerCubicMeter > twoKilogramsPerCubicMeter);
            Assert.False(oneKilogramPerCubicMeter >= twoKilogramsPerCubicMeter);
            Assert.False(twoKilogramsPerCubicMeter < oneKilogramPerCubicMeter);
            Assert.False(twoKilogramsPerCubicMeter <= oneKilogramPerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MassConcentration kilogrampercubicmeter = MassConcentration.FromKilogramsPerCubicMeter(1);
            Assert.Equal(0, kilogrampercubicmeter.CompareTo(kilogrampercubicmeter));
            Assert.True(kilogrampercubicmeter.CompareTo(MassConcentration.Zero) > 0);
            Assert.True(MassConcentration.Zero.CompareTo(kilogrampercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MassConcentration kilogrampercubicmeter = MassConcentration.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => kilogrampercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MassConcentration kilogrampercubicmeter = MassConcentration.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => kilogrampercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MassConcentrationUnit.KilogramPerCubicMeter, 1, MassConcentrationUnit.KilogramPerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, MassConcentrationUnit.KilogramPerCubicMeter, 2, MassConcentrationUnit.KilogramPerCubicMeter, false)] // Different value.
        [InlineData(2, MassConcentrationUnit.KilogramPerCubicMeter, 1, MassConcentrationUnit.CentigramPerDeciliter, false)] // Different value and unit.
        [InlineData(1, MassConcentrationUnit.KilogramPerCubicMeter, 1, MassConcentrationUnit.CentigramPerDeciliter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MassConcentrationUnit unitA, double valueB, MassConcentrationUnit unitB, bool expectEqual)
        {
            var a = new MassConcentration(valueA, unitA);
            var b = new MassConcentration(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = MassConcentration.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MassConcentration.FromKilogramsPerCubicMeter(1);
            Assert.True(v.Equals(MassConcentration.FromKilogramsPerCubicMeter(1), KilogramsPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MassConcentration.Zero, KilogramsPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.True(MassConcentration.FromKilogramsPerCubicMeter(100).Equals(MassConcentration.FromKilogramsPerCubicMeter(120), 0.3, ComparisonType.Relative));
            Assert.False(MassConcentration.FromKilogramsPerCubicMeter(100).Equals(MassConcentration.FromKilogramsPerCubicMeter(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MassConcentration.FromKilogramsPerCubicMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MassConcentration.FromKilogramsPerCubicMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MassConcentration kilogrampercubicmeter = MassConcentration.FromKilogramsPerCubicMeter(1);
            Assert.False(kilogrampercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MassConcentration kilogrampercubicmeter = MassConcentration.FromKilogramsPerCubicMeter(1);
            Assert.False(kilogrampercubicmeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<MassConcentrationUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MassConcentration.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cg/dl", new MassConcentration(1, MassConcentrationUnit.CentigramPerDeciliter).ToString());
            Assert.Equal("1 cg/l", new MassConcentration(1, MassConcentrationUnit.CentigramPerLiter).ToString());
            Assert.Equal("1 cg/μl", new MassConcentration(1, MassConcentrationUnit.CentigramPerMicroliter).ToString());
            Assert.Equal("1 cg/ml", new MassConcentration(1, MassConcentrationUnit.CentigramPerMilliliter).ToString());
            Assert.Equal("1 dg/dl", new MassConcentration(1, MassConcentrationUnit.DecigramPerDeciliter).ToString());
            Assert.Equal("1 dg/l", new MassConcentration(1, MassConcentrationUnit.DecigramPerLiter).ToString());
            Assert.Equal("1 dg/μl", new MassConcentration(1, MassConcentrationUnit.DecigramPerMicroliter).ToString());
            Assert.Equal("1 dg/ml", new MassConcentration(1, MassConcentrationUnit.DecigramPerMilliliter).ToString());
            Assert.Equal("1 g/cm³", new MassConcentration(1, MassConcentrationUnit.GramPerCubicCentimeter).ToString());
            Assert.Equal("1 g/m³", new MassConcentration(1, MassConcentrationUnit.GramPerCubicMeter).ToString());
            Assert.Equal("1 g/mm³", new MassConcentration(1, MassConcentrationUnit.GramPerCubicMillimeter).ToString());
            Assert.Equal("1 g/dl", new MassConcentration(1, MassConcentrationUnit.GramPerDeciliter).ToString());
            Assert.Equal("1 g/l", new MassConcentration(1, MassConcentrationUnit.GramPerLiter).ToString());
            Assert.Equal("1 g/μl", new MassConcentration(1, MassConcentrationUnit.GramPerMicroliter).ToString());
            Assert.Equal("1 g/ml", new MassConcentration(1, MassConcentrationUnit.GramPerMilliliter).ToString());
            Assert.Equal("1 kg/cm³", new MassConcentration(1, MassConcentrationUnit.KilogramPerCubicCentimeter).ToString());
            Assert.Equal("1 kg/m³", new MassConcentration(1, MassConcentrationUnit.KilogramPerCubicMeter).ToString());
            Assert.Equal("1 kg/mm³", new MassConcentration(1, MassConcentrationUnit.KilogramPerCubicMillimeter).ToString());
            Assert.Equal("1 kg/l", new MassConcentration(1, MassConcentrationUnit.KilogramPerLiter).ToString());
            Assert.Equal("1 kip/ft³", new MassConcentration(1, MassConcentrationUnit.KilopoundPerCubicFoot).ToString());
            Assert.Equal("1 kip/in³", new MassConcentration(1, MassConcentrationUnit.KilopoundPerCubicInch).ToString());
            Assert.Equal("1 µg/m³", new MassConcentration(1, MassConcentrationUnit.MicrogramPerCubicMeter).ToString());
            Assert.Equal("1 µg/dl", new MassConcentration(1, MassConcentrationUnit.MicrogramPerDeciliter).ToString());
            Assert.Equal("1 µg/l", new MassConcentration(1, MassConcentrationUnit.MicrogramPerLiter).ToString());
            Assert.Equal("1 µg/μl", new MassConcentration(1, MassConcentrationUnit.MicrogramPerMicroliter).ToString());
            Assert.Equal("1 µg/ml", new MassConcentration(1, MassConcentrationUnit.MicrogramPerMilliliter).ToString());
            Assert.Equal("1 mg/m³", new MassConcentration(1, MassConcentrationUnit.MilligramPerCubicMeter).ToString());
            Assert.Equal("1 mg/dl", new MassConcentration(1, MassConcentrationUnit.MilligramPerDeciliter).ToString());
            Assert.Equal("1 mg/l", new MassConcentration(1, MassConcentrationUnit.MilligramPerLiter).ToString());
            Assert.Equal("1 mg/μl", new MassConcentration(1, MassConcentrationUnit.MilligramPerMicroliter).ToString());
            Assert.Equal("1 mg/ml", new MassConcentration(1, MassConcentrationUnit.MilligramPerMilliliter).ToString());
            Assert.Equal("1 ng/dl", new MassConcentration(1, MassConcentrationUnit.NanogramPerDeciliter).ToString());
            Assert.Equal("1 ng/l", new MassConcentration(1, MassConcentrationUnit.NanogramPerLiter).ToString());
            Assert.Equal("1 ng/μl", new MassConcentration(1, MassConcentrationUnit.NanogramPerMicroliter).ToString());
            Assert.Equal("1 ng/ml", new MassConcentration(1, MassConcentrationUnit.NanogramPerMilliliter).ToString());
            Assert.Equal("1 oz/gal (imp.)", new MassConcentration(1, MassConcentrationUnit.OuncePerImperialGallon).ToString());
            Assert.Equal("1 oz/gal (U.S.)", new MassConcentration(1, MassConcentrationUnit.OuncePerUSGallon).ToString());
            Assert.Equal("1 pg/dl", new MassConcentration(1, MassConcentrationUnit.PicogramPerDeciliter).ToString());
            Assert.Equal("1 pg/l", new MassConcentration(1, MassConcentrationUnit.PicogramPerLiter).ToString());
            Assert.Equal("1 pg/μl", new MassConcentration(1, MassConcentrationUnit.PicogramPerMicroliter).ToString());
            Assert.Equal("1 pg/ml", new MassConcentration(1, MassConcentrationUnit.PicogramPerMilliliter).ToString());
            Assert.Equal("1 lb/ft³", new MassConcentration(1, MassConcentrationUnit.PoundPerCubicFoot).ToString());
            Assert.Equal("1 lb/in³", new MassConcentration(1, MassConcentrationUnit.PoundPerCubicInch).ToString());
            Assert.Equal("1 ppg (imp.)", new MassConcentration(1, MassConcentrationUnit.PoundPerImperialGallon).ToString());
            Assert.Equal("1 ppg (U.S.)", new MassConcentration(1, MassConcentrationUnit.PoundPerUSGallon).ToString());
            Assert.Equal("1 slug/ft³", new MassConcentration(1, MassConcentrationUnit.SlugPerCubicFoot).ToString());
            Assert.Equal("1 t/cm³", new MassConcentration(1, MassConcentrationUnit.TonnePerCubicCentimeter).ToString());
            Assert.Equal("1 t/m³", new MassConcentration(1, MassConcentrationUnit.TonnePerCubicMeter).ToString());
            Assert.Equal("1 t/mm³", new MassConcentration(1, MassConcentrationUnit.TonnePerCubicMillimeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg/dl", new MassConcentration(1, MassConcentrationUnit.CentigramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 cg/l", new MassConcentration(1, MassConcentrationUnit.CentigramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 cg/μl", new MassConcentration(1, MassConcentrationUnit.CentigramPerMicroliter).ToString(swedishCulture));
            Assert.Equal("1 cg/ml", new MassConcentration(1, MassConcentrationUnit.CentigramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 dg/dl", new MassConcentration(1, MassConcentrationUnit.DecigramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 dg/l", new MassConcentration(1, MassConcentrationUnit.DecigramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 dg/μl", new MassConcentration(1, MassConcentrationUnit.DecigramPerMicroliter).ToString(swedishCulture));
            Assert.Equal("1 dg/ml", new MassConcentration(1, MassConcentrationUnit.DecigramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 g/cm³", new MassConcentration(1, MassConcentrationUnit.GramPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 g/m³", new MassConcentration(1, MassConcentrationUnit.GramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 g/mm³", new MassConcentration(1, MassConcentrationUnit.GramPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 g/dl", new MassConcentration(1, MassConcentrationUnit.GramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 g/l", new MassConcentration(1, MassConcentrationUnit.GramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 g/μl", new MassConcentration(1, MassConcentrationUnit.GramPerMicroliter).ToString(swedishCulture));
            Assert.Equal("1 g/ml", new MassConcentration(1, MassConcentrationUnit.GramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 kg/cm³", new MassConcentration(1, MassConcentrationUnit.KilogramPerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/m³", new MassConcentration(1, MassConcentrationUnit.KilogramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kg/mm³", new MassConcentration(1, MassConcentrationUnit.KilogramPerCubicMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kg/l", new MassConcentration(1, MassConcentrationUnit.KilogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 kip/ft³", new MassConcentration(1, MassConcentrationUnit.KilopoundPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 kip/in³", new MassConcentration(1, MassConcentrationUnit.KilopoundPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 µg/m³", new MassConcentration(1, MassConcentrationUnit.MicrogramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µg/dl", new MassConcentration(1, MassConcentrationUnit.MicrogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 µg/l", new MassConcentration(1, MassConcentrationUnit.MicrogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 µg/μl", new MassConcentration(1, MassConcentrationUnit.MicrogramPerMicroliter).ToString(swedishCulture));
            Assert.Equal("1 µg/ml", new MassConcentration(1, MassConcentrationUnit.MicrogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 mg/m³", new MassConcentration(1, MassConcentrationUnit.MilligramPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mg/dl", new MassConcentration(1, MassConcentrationUnit.MilligramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 mg/l", new MassConcentration(1, MassConcentrationUnit.MilligramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 mg/μl", new MassConcentration(1, MassConcentrationUnit.MilligramPerMicroliter).ToString(swedishCulture));
            Assert.Equal("1 mg/ml", new MassConcentration(1, MassConcentrationUnit.MilligramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 ng/dl", new MassConcentration(1, MassConcentrationUnit.NanogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 ng/l", new MassConcentration(1, MassConcentrationUnit.NanogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 ng/μl", new MassConcentration(1, MassConcentrationUnit.NanogramPerMicroliter).ToString(swedishCulture));
            Assert.Equal("1 ng/ml", new MassConcentration(1, MassConcentrationUnit.NanogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 oz/gal (imp.)", new MassConcentration(1, MassConcentrationUnit.OuncePerImperialGallon).ToString(swedishCulture));
            Assert.Equal("1 oz/gal (U.S.)", new MassConcentration(1, MassConcentrationUnit.OuncePerUSGallon).ToString(swedishCulture));
            Assert.Equal("1 pg/dl", new MassConcentration(1, MassConcentrationUnit.PicogramPerDeciliter).ToString(swedishCulture));
            Assert.Equal("1 pg/l", new MassConcentration(1, MassConcentrationUnit.PicogramPerLiter).ToString(swedishCulture));
            Assert.Equal("1 pg/μl", new MassConcentration(1, MassConcentrationUnit.PicogramPerMicroliter).ToString(swedishCulture));
            Assert.Equal("1 pg/ml", new MassConcentration(1, MassConcentrationUnit.PicogramPerMilliliter).ToString(swedishCulture));
            Assert.Equal("1 lb/ft³", new MassConcentration(1, MassConcentrationUnit.PoundPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 lb/in³", new MassConcentration(1, MassConcentrationUnit.PoundPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 ppg (imp.)", new MassConcentration(1, MassConcentrationUnit.PoundPerImperialGallon).ToString(swedishCulture));
            Assert.Equal("1 ppg (U.S.)", new MassConcentration(1, MassConcentrationUnit.PoundPerUSGallon).ToString(swedishCulture));
            Assert.Equal("1 slug/ft³", new MassConcentration(1, MassConcentrationUnit.SlugPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 t/cm³", new MassConcentration(1, MassConcentrationUnit.TonnePerCubicCentimeter).ToString(swedishCulture));
            Assert.Equal("1 t/m³", new MassConcentration(1, MassConcentrationUnit.TonnePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 t/mm³", new MassConcentration(1, MassConcentrationUnit.TonnePerCubicMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 kg/m³", new MassConcentration(0.123456, MassConcentrationUnit.KilogramPerCubicMeter).ToString("s1"));
            Assert.Equal("0.12 kg/m³", new MassConcentration(0.123456, MassConcentrationUnit.KilogramPerCubicMeter).ToString("s2"));
            Assert.Equal("0.123 kg/m³", new MassConcentration(0.123456, MassConcentrationUnit.KilogramPerCubicMeter).ToString("s3"));
            Assert.Equal("0.1235 kg/m³", new MassConcentration(0.123456, MassConcentrationUnit.KilogramPerCubicMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg/m³", new MassConcentration(0.123456, MassConcentrationUnit.KilogramPerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 kg/m³", new MassConcentration(0.123456, MassConcentrationUnit.KilogramPerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 kg/m³", new MassConcentration(0.123456, MassConcentrationUnit.KilogramPerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 kg/m³", new MassConcentration(0.123456, MassConcentrationUnit.KilogramPerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = MassConcentration.FromKilogramsPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = MassConcentration.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MassConcentration.FromKilogramsPerCubicMeter(1.0);
            Assert.Equal(new {MassConcentration.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MassConcentration.FromKilogramsPerCubicMeter(value);
            Assert.Equal(MassConcentration.FromKilogramsPerCubicMeter(-value), -quantity);
        }
    }
}
