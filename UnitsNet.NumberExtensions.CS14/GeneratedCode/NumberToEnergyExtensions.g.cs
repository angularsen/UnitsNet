//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToEnergy
{
    /// <summary>
    /// A number to Energy Extensions
    /// </summary>
    public static class NumberToEnergyExtensions
    {
        extension<T>(T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Energy.FromBritishThermalUnits(double)" />
            public Energy BritishThermalUnits
#if NET7_0_OR_GREATER
                => Energy.FromBritishThermalUnits(double.CreateChecked(value));
#else
                => Energy.FromBritishThermalUnits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromCalories(double)" />
            public Energy Calories
#if NET7_0_OR_GREATER
                => Energy.FromCalories(double.CreateChecked(value));
#else
                => Energy.FromCalories(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromDecathermsEc(double)" />
            public Energy DecathermsEc
#if NET7_0_OR_GREATER
                => Energy.FromDecathermsEc(double.CreateChecked(value));
#else
                => Energy.FromDecathermsEc(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromDecathermsImperial(double)" />
            public Energy DecathermsImperial
#if NET7_0_OR_GREATER
                => Energy.FromDecathermsImperial(double.CreateChecked(value));
#else
                => Energy.FromDecathermsImperial(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromDecathermsUs(double)" />
            public Energy DecathermsUs
#if NET7_0_OR_GREATER
                => Energy.FromDecathermsUs(double.CreateChecked(value));
#else
                => Energy.FromDecathermsUs(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromElectronVolts(double)" />
            public Energy ElectronVolts
#if NET7_0_OR_GREATER
                => Energy.FromElectronVolts(double.CreateChecked(value));
#else
                => Energy.FromElectronVolts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromErgs(double)" />
            public Energy Ergs
#if NET7_0_OR_GREATER
                => Energy.FromErgs(double.CreateChecked(value));
#else
                => Energy.FromErgs(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromFootPounds(double)" />
            public Energy FootPounds
#if NET7_0_OR_GREATER
                => Energy.FromFootPounds(double.CreateChecked(value));
#else
                => Energy.FromFootPounds(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromGigabritishThermalUnits(double)" />
            public Energy GigabritishThermalUnits
#if NET7_0_OR_GREATER
                => Energy.FromGigabritishThermalUnits(double.CreateChecked(value));
#else
                => Energy.FromGigabritishThermalUnits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromGigaelectronVolts(double)" />
            public Energy GigaelectronVolts
#if NET7_0_OR_GREATER
                => Energy.FromGigaelectronVolts(double.CreateChecked(value));
#else
                => Energy.FromGigaelectronVolts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromGigajoules(double)" />
            public Energy Gigajoules
#if NET7_0_OR_GREATER
                => Energy.FromGigajoules(double.CreateChecked(value));
#else
                => Energy.FromGigajoules(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromGigawattDays(double)" />
            public Energy GigawattDays
#if NET7_0_OR_GREATER
                => Energy.FromGigawattDays(double.CreateChecked(value));
#else
                => Energy.FromGigawattDays(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromGigawattHours(double)" />
            public Energy GigawattHours
#if NET7_0_OR_GREATER
                => Energy.FromGigawattHours(double.CreateChecked(value));
#else
                => Energy.FromGigawattHours(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromHorsepowerHours(double)" />
            public Energy HorsepowerHours
#if NET7_0_OR_GREATER
                => Energy.FromHorsepowerHours(double.CreateChecked(value));
#else
                => Energy.FromHorsepowerHours(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromJoules(double)" />
            public Energy Joules
#if NET7_0_OR_GREATER
                => Energy.FromJoules(double.CreateChecked(value));
#else
                => Energy.FromJoules(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromKilobritishThermalUnits(double)" />
            public Energy KilobritishThermalUnits
#if NET7_0_OR_GREATER
                => Energy.FromKilobritishThermalUnits(double.CreateChecked(value));
#else
                => Energy.FromKilobritishThermalUnits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromKilocalories(double)" />
            public Energy Kilocalories
#if NET7_0_OR_GREATER
                => Energy.FromKilocalories(double.CreateChecked(value));
#else
                => Energy.FromKilocalories(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromKiloelectronVolts(double)" />
            public Energy KiloelectronVolts
#if NET7_0_OR_GREATER
                => Energy.FromKiloelectronVolts(double.CreateChecked(value));
#else
                => Energy.FromKiloelectronVolts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromKilojoules(double)" />
            public Energy Kilojoules
#if NET7_0_OR_GREATER
                => Energy.FromKilojoules(double.CreateChecked(value));
#else
                => Energy.FromKilojoules(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromKilowattDays(double)" />
            public Energy KilowattDays
#if NET7_0_OR_GREATER
                => Energy.FromKilowattDays(double.CreateChecked(value));
#else
                => Energy.FromKilowattDays(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromKilowattHours(double)" />
            public Energy KilowattHours
#if NET7_0_OR_GREATER
                => Energy.FromKilowattHours(double.CreateChecked(value));
#else
                => Energy.FromKilowattHours(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromMegabritishThermalUnits(double)" />
            public Energy MegabritishThermalUnits
#if NET7_0_OR_GREATER
                => Energy.FromMegabritishThermalUnits(double.CreateChecked(value));
#else
                => Energy.FromMegabritishThermalUnits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromMegacalories(double)" />
            public Energy Megacalories
#if NET7_0_OR_GREATER
                => Energy.FromMegacalories(double.CreateChecked(value));
#else
                => Energy.FromMegacalories(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromMegaelectronVolts(double)" />
            public Energy MegaelectronVolts
#if NET7_0_OR_GREATER
                => Energy.FromMegaelectronVolts(double.CreateChecked(value));
#else
                => Energy.FromMegaelectronVolts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromMegajoules(double)" />
            public Energy Megajoules
#if NET7_0_OR_GREATER
                => Energy.FromMegajoules(double.CreateChecked(value));
#else
                => Energy.FromMegajoules(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromMegawattDays(double)" />
            public Energy MegawattDays
#if NET7_0_OR_GREATER
                => Energy.FromMegawattDays(double.CreateChecked(value));
#else
                => Energy.FromMegawattDays(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromMegawattHours(double)" />
            public Energy MegawattHours
#if NET7_0_OR_GREATER
                => Energy.FromMegawattHours(double.CreateChecked(value));
#else
                => Energy.FromMegawattHours(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromMicrojoules(double)" />
            public Energy Microjoules
#if NET7_0_OR_GREATER
                => Energy.FromMicrojoules(double.CreateChecked(value));
#else
                => Energy.FromMicrojoules(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromMillijoules(double)" />
            public Energy Millijoules
#if NET7_0_OR_GREATER
                => Energy.FromMillijoules(double.CreateChecked(value));
#else
                => Energy.FromMillijoules(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromNanojoules(double)" />
            public Energy Nanojoules
#if NET7_0_OR_GREATER
                => Energy.FromNanojoules(double.CreateChecked(value));
#else
                => Energy.FromNanojoules(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromPetajoules(double)" />
            public Energy Petajoules
#if NET7_0_OR_GREATER
                => Energy.FromPetajoules(double.CreateChecked(value));
#else
                => Energy.FromPetajoules(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromTeraelectronVolts(double)" />
            public Energy TeraelectronVolts
#if NET7_0_OR_GREATER
                => Energy.FromTeraelectronVolts(double.CreateChecked(value));
#else
                => Energy.FromTeraelectronVolts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromTerajoules(double)" />
            public Energy Terajoules
#if NET7_0_OR_GREATER
                => Energy.FromTerajoules(double.CreateChecked(value));
#else
                => Energy.FromTerajoules(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromTerawattDays(double)" />
            public Energy TerawattDays
#if NET7_0_OR_GREATER
                => Energy.FromTerawattDays(double.CreateChecked(value));
#else
                => Energy.FromTerawattDays(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromTerawattHours(double)" />
            public Energy TerawattHours
#if NET7_0_OR_GREATER
                => Energy.FromTerawattHours(double.CreateChecked(value));
#else
                => Energy.FromTerawattHours(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromThermsEc(double)" />
            public Energy ThermsEc
#if NET7_0_OR_GREATER
                => Energy.FromThermsEc(double.CreateChecked(value));
#else
                => Energy.FromThermsEc(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromThermsImperial(double)" />
            public Energy ThermsImperial
#if NET7_0_OR_GREATER
                => Energy.FromThermsImperial(double.CreateChecked(value));
#else
                => Energy.FromThermsImperial(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromThermsUs(double)" />
            public Energy ThermsUs
#if NET7_0_OR_GREATER
                => Energy.FromThermsUs(double.CreateChecked(value));
#else
                => Energy.FromThermsUs(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromWattDays(double)" />
            public Energy WattDays
#if NET7_0_OR_GREATER
                => Energy.FromWattDays(double.CreateChecked(value));
#else
                => Energy.FromWattDays(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Energy.FromWattHours(double)" />
            public Energy WattHours
#if NET7_0_OR_GREATER
                => Energy.FromWattHours(double.CreateChecked(value));
#else
                => Energy.FromWattHours(value.ToDouble(null));
#endif

        }
    }
}
