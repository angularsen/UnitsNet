//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricApparentPower.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricApparentPowerTestsBase : QuantityTestsBase
    {
        protected abstract double GigavoltamperesInOneVoltampere { get; }
        protected abstract double KilovoltamperesInOneVoltampere { get; }
        protected abstract double MegavoltamperesInOneVoltampere { get; }
        protected abstract double MicrovoltamperesInOneVoltampere { get; }
        protected abstract double MillivoltamperesInOneVoltampere { get; }
        protected abstract double VoltamperesInOneVoltampere { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GigavoltamperesTolerance { get { return 1e-5; } }
        protected virtual double KilovoltamperesTolerance { get { return 1e-5; } }
        protected virtual double MegavoltamperesTolerance { get { return 1e-5; } }
        protected virtual double MicrovoltamperesTolerance { get { return 1e-5; } }
        protected virtual double MillivoltamperesTolerance { get { return 1e-5; } }
        protected virtual double VoltamperesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricApparentPowerUnit unit)
        {
            return unit switch
            {
                ElectricApparentPowerUnit.Gigavoltampere => (GigavoltamperesInOneVoltampere, GigavoltamperesTolerance),
                ElectricApparentPowerUnit.Kilovoltampere => (KilovoltamperesInOneVoltampere, KilovoltamperesTolerance),
                ElectricApparentPowerUnit.Megavoltampere => (MegavoltamperesInOneVoltampere, MegavoltamperesTolerance),
                ElectricApparentPowerUnit.Microvoltampere => (MicrovoltamperesInOneVoltampere, MicrovoltamperesTolerance),
                ElectricApparentPowerUnit.Millivoltampere => (MillivoltamperesInOneVoltampere, MillivoltamperesTolerance),
                ElectricApparentPowerUnit.Voltampere => (VoltamperesInOneVoltampere, VoltamperesTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricApparentPowerUnit.Gigavoltampere },
            new object[] { ElectricApparentPowerUnit.Kilovoltampere },
            new object[] { ElectricApparentPowerUnit.Megavoltampere },
            new object[] { ElectricApparentPowerUnit.Microvoltampere },
            new object[] { ElectricApparentPowerUnit.Millivoltampere },
            new object[] { ElectricApparentPowerUnit.Voltampere },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricApparentPower();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricApparentPowerUnit.Voltampere, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ElectricApparentPower(double.PositiveInfinity, ElectricApparentPowerUnit.Voltampere));
            var exception2 = Record.Exception(() => new ElectricApparentPower(double.NegativeInfinity, ElectricApparentPowerUnit.Voltampere));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ElectricApparentPower(double.NaN, ElectricApparentPowerUnit.Voltampere));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricApparentPower(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ElectricApparentPower(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ElectricApparentPower(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ElectricApparentPower_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new ElectricApparentPower(1, ElectricApparentPowerUnit.Voltampere);

            QuantityInfo<ElectricApparentPowerUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(ElectricApparentPower.Zero, quantityInfo.Zero);
            Assert.Equal("ElectricApparentPower", quantityInfo.Name);

            var units = EnumHelper.GetValues<ElectricApparentPowerUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void VoltampereToElectricApparentPowerUnits()
        {
            ElectricApparentPower voltampere = ElectricApparentPower.FromVoltamperes(1);
            AssertEx.EqualTolerance(GigavoltamperesInOneVoltampere, voltampere.Gigavoltamperes, GigavoltamperesTolerance);
            AssertEx.EqualTolerance(KilovoltamperesInOneVoltampere, voltampere.Kilovoltamperes, KilovoltamperesTolerance);
            AssertEx.EqualTolerance(MegavoltamperesInOneVoltampere, voltampere.Megavoltamperes, MegavoltamperesTolerance);
            AssertEx.EqualTolerance(MicrovoltamperesInOneVoltampere, voltampere.Microvoltamperes, MicrovoltamperesTolerance);
            AssertEx.EqualTolerance(MillivoltamperesInOneVoltampere, voltampere.Millivoltamperes, MillivoltamperesTolerance);
            AssertEx.EqualTolerance(VoltamperesInOneVoltampere, voltampere.Voltamperes, VoltamperesTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = ElectricApparentPower.From(1, ElectricApparentPowerUnit.Gigavoltampere);
            AssertEx.EqualTolerance(1, quantity00.Gigavoltamperes, GigavoltamperesTolerance);
            Assert.Equal(ElectricApparentPowerUnit.Gigavoltampere, quantity00.Unit);

            var quantity01 = ElectricApparentPower.From(1, ElectricApparentPowerUnit.Kilovoltampere);
            AssertEx.EqualTolerance(1, quantity01.Kilovoltamperes, KilovoltamperesTolerance);
            Assert.Equal(ElectricApparentPowerUnit.Kilovoltampere, quantity01.Unit);

            var quantity02 = ElectricApparentPower.From(1, ElectricApparentPowerUnit.Megavoltampere);
            AssertEx.EqualTolerance(1, quantity02.Megavoltamperes, MegavoltamperesTolerance);
            Assert.Equal(ElectricApparentPowerUnit.Megavoltampere, quantity02.Unit);

            var quantity03 = ElectricApparentPower.From(1, ElectricApparentPowerUnit.Microvoltampere);
            AssertEx.EqualTolerance(1, quantity03.Microvoltamperes, MicrovoltamperesTolerance);
            Assert.Equal(ElectricApparentPowerUnit.Microvoltampere, quantity03.Unit);

            var quantity04 = ElectricApparentPower.From(1, ElectricApparentPowerUnit.Millivoltampere);
            AssertEx.EqualTolerance(1, quantity04.Millivoltamperes, MillivoltamperesTolerance);
            Assert.Equal(ElectricApparentPowerUnit.Millivoltampere, quantity04.Unit);

            var quantity05 = ElectricApparentPower.From(1, ElectricApparentPowerUnit.Voltampere);
            AssertEx.EqualTolerance(1, quantity05.Voltamperes, VoltamperesTolerance);
            Assert.Equal(ElectricApparentPowerUnit.Voltampere, quantity05.Unit);

        }

        [Fact]
        public void FromVoltamperes_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ElectricApparentPower.FromVoltamperes(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ElectricApparentPower.FromVoltamperes(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromVoltamperes_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ElectricApparentPower.FromVoltamperes(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var voltampere = ElectricApparentPower.FromVoltamperes(1);
            AssertEx.EqualTolerance(GigavoltamperesInOneVoltampere, voltampere.As(ElectricApparentPowerUnit.Gigavoltampere), GigavoltamperesTolerance);
            AssertEx.EqualTolerance(KilovoltamperesInOneVoltampere, voltampere.As(ElectricApparentPowerUnit.Kilovoltampere), KilovoltamperesTolerance);
            AssertEx.EqualTolerance(MegavoltamperesInOneVoltampere, voltampere.As(ElectricApparentPowerUnit.Megavoltampere), MegavoltamperesTolerance);
            AssertEx.EqualTolerance(MicrovoltamperesInOneVoltampere, voltampere.As(ElectricApparentPowerUnit.Microvoltampere), MicrovoltamperesTolerance);
            AssertEx.EqualTolerance(MillivoltamperesInOneVoltampere, voltampere.As(ElectricApparentPowerUnit.Millivoltampere), MillivoltamperesTolerance);
            AssertEx.EqualTolerance(VoltamperesInOneVoltampere, voltampere.As(ElectricApparentPowerUnit.Voltampere), VoltamperesTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ElectricApparentPower.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
            var expectedValue = quantity.As(ElectricApparentPower.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
            var expectedUnit = ElectricApparentPower.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ElectricApparentPower quantityToConvert = quantity;

                ElectricApparentPower convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ElectricApparentPowerUnit> quantityToConvert = quantity;

                IQuantity<ElectricApparentPowerUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ElectricApparentPowerUnit> quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ElectricApparentPowerUnit> quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricApparentPower(value: 1, unit: ElectricApparentPower.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = ElectricApparentPower.Parse("1 GVA", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Gigavoltamperes, GigavoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Gigavoltampere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricApparentPower.Parse("1 kVA", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Kilovoltamperes, KilovoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Kilovoltampere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricApparentPower.Parse("1 MVA", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Megavoltamperes, MegavoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Megavoltampere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricApparentPower.Parse("1 µVA", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Microvoltamperes, MicrovoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Microvoltampere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricApparentPower.Parse("1 mVA", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Millivoltamperes, MillivoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Millivoltampere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = ElectricApparentPower.Parse("1 VA", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.Voltamperes, VoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Voltampere, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(ElectricApparentPower.TryParse("1 GVA", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Gigavoltamperes, GigavoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Gigavoltampere, parsed.Unit);
            }

            {
                Assert.True(ElectricApparentPower.TryParse("1 kVA", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Kilovoltamperes, KilovoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Kilovoltampere, parsed.Unit);
            }

            {
                Assert.True(ElectricApparentPower.TryParse("1 µVA", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Microvoltamperes, MicrovoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Microvoltampere, parsed.Unit);
            }

            {
                Assert.True(ElectricApparentPower.TryParse("1 VA", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.Voltamperes, VoltamperesTolerance);
                Assert.Equal(ElectricApparentPowerUnit.Voltampere, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("GVA", ElectricApparentPowerUnit.Gigavoltampere)]
        [InlineData("kVA", ElectricApparentPowerUnit.Kilovoltampere)]
        [InlineData("MVA", ElectricApparentPowerUnit.Megavoltampere)]
        [InlineData("µVA", ElectricApparentPowerUnit.Microvoltampere)]
        [InlineData("mVA", ElectricApparentPowerUnit.Millivoltampere)]
        [InlineData("VA", ElectricApparentPowerUnit.Voltampere)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricApparentPowerUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ElectricApparentPowerUnit parsedUnit = ElectricApparentPower.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("GVA", ElectricApparentPowerUnit.Gigavoltampere)]
        [InlineData("kVA", ElectricApparentPowerUnit.Kilovoltampere)]
        [InlineData("MVA", ElectricApparentPowerUnit.Megavoltampere)]
        [InlineData("µVA", ElectricApparentPowerUnit.Microvoltampere)]
        [InlineData("mVA", ElectricApparentPowerUnit.Millivoltampere)]
        [InlineData("VA", ElectricApparentPowerUnit.Voltampere)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricApparentPowerUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ElectricApparentPowerUnit parsedUnit = ElectricApparentPower.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GVA", ElectricApparentPowerUnit.Gigavoltampere)]
        [InlineData("en-US", "kVA", ElectricApparentPowerUnit.Kilovoltampere)]
        [InlineData("en-US", "MVA", ElectricApparentPowerUnit.Megavoltampere)]
        [InlineData("en-US", "µVA", ElectricApparentPowerUnit.Microvoltampere)]
        [InlineData("en-US", "mVA", ElectricApparentPowerUnit.Millivoltampere)]
        [InlineData("en-US", "VA", ElectricApparentPowerUnit.Voltampere)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricApparentPowerUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ElectricApparentPowerUnit parsedUnit = ElectricApparentPower.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GVA", ElectricApparentPowerUnit.Gigavoltampere)]
        [InlineData("en-US", "kVA", ElectricApparentPowerUnit.Kilovoltampere)]
        [InlineData("en-US", "MVA", ElectricApparentPowerUnit.Megavoltampere)]
        [InlineData("en-US", "µVA", ElectricApparentPowerUnit.Microvoltampere)]
        [InlineData("en-US", "mVA", ElectricApparentPowerUnit.Millivoltampere)]
        [InlineData("en-US", "VA", ElectricApparentPowerUnit.Voltampere)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ElectricApparentPowerUnit expectedUnit)
        {
            ElectricApparentPowerUnit parsedUnit = ElectricApparentPower.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("GVA", ElectricApparentPowerUnit.Gigavoltampere)]
        [InlineData("kVA", ElectricApparentPowerUnit.Kilovoltampere)]
        [InlineData("MVA", ElectricApparentPowerUnit.Megavoltampere)]
        [InlineData("µVA", ElectricApparentPowerUnit.Microvoltampere)]
        [InlineData("mVA", ElectricApparentPowerUnit.Millivoltampere)]
        [InlineData("VA", ElectricApparentPowerUnit.Voltampere)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricApparentPowerUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ElectricApparentPower.TryParseUnit(abbreviation, out ElectricApparentPowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("GVA", ElectricApparentPowerUnit.Gigavoltampere)]
        [InlineData("kVA", ElectricApparentPowerUnit.Kilovoltampere)]
        [InlineData("MVA", ElectricApparentPowerUnit.Megavoltampere)]
        [InlineData("µVA", ElectricApparentPowerUnit.Microvoltampere)]
        [InlineData("mVA", ElectricApparentPowerUnit.Millivoltampere)]
        [InlineData("VA", ElectricApparentPowerUnit.Voltampere)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricApparentPowerUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ElectricApparentPower.TryParseUnit(abbreviation, out ElectricApparentPowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GVA", ElectricApparentPowerUnit.Gigavoltampere)]
        [InlineData("en-US", "kVA", ElectricApparentPowerUnit.Kilovoltampere)]
        [InlineData("en-US", "MVA", ElectricApparentPowerUnit.Megavoltampere)]
        [InlineData("en-US", "µVA", ElectricApparentPowerUnit.Microvoltampere)]
        [InlineData("en-US", "mVA", ElectricApparentPowerUnit.Millivoltampere)]
        [InlineData("en-US", "VA", ElectricApparentPowerUnit.Voltampere)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricApparentPowerUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricApparentPower.TryParseUnit(abbreviation, out ElectricApparentPowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GVA", ElectricApparentPowerUnit.Gigavoltampere)]
        [InlineData("en-US", "kVA", ElectricApparentPowerUnit.Kilovoltampere)]
        [InlineData("en-US", "MVA", ElectricApparentPowerUnit.Megavoltampere)]
        [InlineData("en-US", "µVA", ElectricApparentPowerUnit.Microvoltampere)]
        [InlineData("en-US", "mVA", ElectricApparentPowerUnit.Millivoltampere)]
        [InlineData("en-US", "VA", ElectricApparentPowerUnit.Voltampere)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ElectricApparentPowerUnit expectedUnit)
        {
            Assert.True(ElectricApparentPower.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ElectricApparentPowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricApparentPowerUnit unit)
        {
            var inBaseUnits = ElectricApparentPower.From(1.0, ElectricApparentPower.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricApparentPowerUnit unit)
        {
            var quantity = ElectricApparentPower.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricApparentPowerUnit unit)
        {
            Assert.All(ElectricApparentPower.Units.Where(u => u != ElectricApparentPower.BaseUnit), fromUnit =>
            {
                var quantity = ElectricApparentPower.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricApparentPowerUnit unit)
        {
            var quantity = default(ElectricApparentPower);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ElectricApparentPowerUnit unit)
        {
            var quantity = ElectricApparentPower.From(3, ElectricApparentPower.BaseUnit);
            ElectricApparentPower expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ElectricApparentPowerUnit> quantityToConvert = quantity;
                IQuantity<ElectricApparentPowerUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricApparentPower voltampere = ElectricApparentPower.FromVoltamperes(1);
            AssertEx.EqualTolerance(1, ElectricApparentPower.FromGigavoltamperes(voltampere.Gigavoltamperes).Voltamperes, GigavoltamperesTolerance);
            AssertEx.EqualTolerance(1, ElectricApparentPower.FromKilovoltamperes(voltampere.Kilovoltamperes).Voltamperes, KilovoltamperesTolerance);
            AssertEx.EqualTolerance(1, ElectricApparentPower.FromMegavoltamperes(voltampere.Megavoltamperes).Voltamperes, MegavoltamperesTolerance);
            AssertEx.EqualTolerance(1, ElectricApparentPower.FromMicrovoltamperes(voltampere.Microvoltamperes).Voltamperes, MicrovoltamperesTolerance);
            AssertEx.EqualTolerance(1, ElectricApparentPower.FromMillivoltamperes(voltampere.Millivoltamperes).Voltamperes, MillivoltamperesTolerance);
            AssertEx.EqualTolerance(1, ElectricApparentPower.FromVoltamperes(voltampere.Voltamperes).Voltamperes, VoltamperesTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricApparentPower v = ElectricApparentPower.FromVoltamperes(1);
            AssertEx.EqualTolerance(-1, -v.Voltamperes, VoltamperesTolerance);
            AssertEx.EqualTolerance(2, (ElectricApparentPower.FromVoltamperes(3)-v).Voltamperes, VoltamperesTolerance);
            AssertEx.EqualTolerance(2, (v + v).Voltamperes, VoltamperesTolerance);
            AssertEx.EqualTolerance(10, (v*10).Voltamperes, VoltamperesTolerance);
            AssertEx.EqualTolerance(10, (10*v).Voltamperes, VoltamperesTolerance);
            AssertEx.EqualTolerance(2, (ElectricApparentPower.FromVoltamperes(10)/5).Voltamperes, VoltamperesTolerance);
            AssertEx.EqualTolerance(2, ElectricApparentPower.FromVoltamperes(10)/ElectricApparentPower.FromVoltamperes(5), VoltamperesTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricApparentPower oneVoltampere = ElectricApparentPower.FromVoltamperes(1);
            ElectricApparentPower twoVoltamperes = ElectricApparentPower.FromVoltamperes(2);

            Assert.True(oneVoltampere < twoVoltamperes);
            Assert.True(oneVoltampere <= twoVoltamperes);
            Assert.True(twoVoltamperes > oneVoltampere);
            Assert.True(twoVoltamperes >= oneVoltampere);

            Assert.False(oneVoltampere > twoVoltamperes);
            Assert.False(oneVoltampere >= twoVoltamperes);
            Assert.False(twoVoltamperes < oneVoltampere);
            Assert.False(twoVoltamperes <= oneVoltampere);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricApparentPower voltampere = ElectricApparentPower.FromVoltamperes(1);
            Assert.Equal(0, voltampere.CompareTo(voltampere));
            Assert.True(voltampere.CompareTo(ElectricApparentPower.Zero) > 0);
            Assert.True(ElectricApparentPower.Zero.CompareTo(voltampere) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricApparentPower voltampere = ElectricApparentPower.FromVoltamperes(1);
            Assert.Throws<ArgumentException>(() => voltampere.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricApparentPower voltampere = ElectricApparentPower.FromVoltamperes(1);
            Assert.Throws<ArgumentNullException>(() => voltampere.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricApparentPowerUnit.Voltampere, 1, ElectricApparentPowerUnit.Voltampere, true)]  // Same value and unit.
        [InlineData(1, ElectricApparentPowerUnit.Voltampere, 2, ElectricApparentPowerUnit.Voltampere, false)] // Different value.
        [InlineData(2, ElectricApparentPowerUnit.Voltampere, 1, ElectricApparentPowerUnit.Gigavoltampere, false)] // Different value and unit.
        [InlineData(1, ElectricApparentPowerUnit.Voltampere, 1, ElectricApparentPowerUnit.Gigavoltampere, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricApparentPowerUnit unitA, double valueB, ElectricApparentPowerUnit unitB, bool expectEqual)
        {
            var a = new ElectricApparentPower(valueA, unitA);
            var b = new ElectricApparentPower(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricApparentPower.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = ElectricApparentPower.FromVoltamperes(1);
            Assert.True(v.Equals(ElectricApparentPower.FromVoltamperes(1), VoltamperesTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(ElectricApparentPower.Zero, VoltamperesTolerance, ComparisonType.Relative));
            Assert.True(ElectricApparentPower.FromVoltamperes(100).Equals(ElectricApparentPower.FromVoltamperes(120), 0.3, ComparisonType.Relative));
            Assert.False(ElectricApparentPower.FromVoltamperes(100).Equals(ElectricApparentPower.FromVoltamperes(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = ElectricApparentPower.FromVoltamperes(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(ElectricApparentPower.FromVoltamperes(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricApparentPower voltampere = ElectricApparentPower.FromVoltamperes(1);
            Assert.False(voltampere.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricApparentPower voltampere = ElectricApparentPower.FromVoltamperes(1);
            Assert.False(voltampere.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<ElectricApparentPowerUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricApparentPower.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 GVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Gigavoltampere).ToString());
            Assert.Equal("1 kVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Kilovoltampere).ToString());
            Assert.Equal("1 MVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Megavoltampere).ToString());
            Assert.Equal("1 µVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Microvoltampere).ToString());
            Assert.Equal("1 mVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Millivoltampere).ToString());
            Assert.Equal("1 VA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Voltampere).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 GVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Gigavoltampere).ToString(swedishCulture));
            Assert.Equal("1 kVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Kilovoltampere).ToString(swedishCulture));
            Assert.Equal("1 MVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Megavoltampere).ToString(swedishCulture));
            Assert.Equal("1 µVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Microvoltampere).ToString(swedishCulture));
            Assert.Equal("1 mVA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Millivoltampere).ToString(swedishCulture));
            Assert.Equal("1 VA", new ElectricApparentPower(1, ElectricApparentPowerUnit.Voltampere).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 VA", new ElectricApparentPower(0.123456, ElectricApparentPowerUnit.Voltampere).ToString("s1"));
            Assert.Equal("0.12 VA", new ElectricApparentPower(0.123456, ElectricApparentPowerUnit.Voltampere).ToString("s2"));
            Assert.Equal("0.123 VA", new ElectricApparentPower(0.123456, ElectricApparentPowerUnit.Voltampere).ToString("s3"));
            Assert.Equal("0.1235 VA", new ElectricApparentPower(0.123456, ElectricApparentPowerUnit.Voltampere).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 VA", new ElectricApparentPower(0.123456, ElectricApparentPowerUnit.Voltampere).ToString("s1", culture));
            Assert.Equal("0.12 VA", new ElectricApparentPower(0.123456, ElectricApparentPowerUnit.Voltampere).ToString("s2", culture));
            Assert.Equal("0.123 VA", new ElectricApparentPower(0.123456, ElectricApparentPowerUnit.Voltampere).ToString("s3", culture));
            Assert.Equal("0.1235 VA", new ElectricApparentPower(0.123456, ElectricApparentPowerUnit.Voltampere).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricApparentPower.FromVoltamperes(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricApparentPower.FromVoltamperes(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricApparentPower.FromVoltamperes(1.0);
            Assert.Equal(new {ElectricApparentPower.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricApparentPower.FromVoltamperes(value);
            Assert.Equal(ElectricApparentPower.FromVoltamperes(-value), -quantity);
        }
    }
}
