//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToPower
{
    /// <summary>
    /// A number to Power Extensions
    /// </summary>
    public static class NumberToPowerExtensions
    {
        extension<T>(T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Power.FromBoilerHorsepower(double)" />
            public Power BoilerHorsepower
#if NET7_0_OR_GREATER
                => Power.FromBoilerHorsepower(double.CreateChecked(value));
#else
                => Power.FromBoilerHorsepower(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromBritishThermalUnitsPerHour(double)" />
            public Power BritishThermalUnitsPerHour
#if NET7_0_OR_GREATER
                => Power.FromBritishThermalUnitsPerHour(double.CreateChecked(value));
#else
                => Power.FromBritishThermalUnitsPerHour(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromDecawatts(double)" />
            public Power Decawatts
#if NET7_0_OR_GREATER
                => Power.FromDecawatts(double.CreateChecked(value));
#else
                => Power.FromDecawatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromDeciwatts(double)" />
            public Power Deciwatts
#if NET7_0_OR_GREATER
                => Power.FromDeciwatts(double.CreateChecked(value));
#else
                => Power.FromDeciwatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromElectricalHorsepower(double)" />
            public Power ElectricalHorsepower
#if NET7_0_OR_GREATER
                => Power.FromElectricalHorsepower(double.CreateChecked(value));
#else
                => Power.FromElectricalHorsepower(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromFemtowatts(double)" />
            public Power Femtowatts
#if NET7_0_OR_GREATER
                => Power.FromFemtowatts(double.CreateChecked(value));
#else
                => Power.FromFemtowatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromGigajoulesPerHour(double)" />
            public Power GigajoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromGigajoulesPerHour(double.CreateChecked(value));
#else
                => Power.FromGigajoulesPerHour(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromGigawatts(double)" />
            public Power Gigawatts
#if NET7_0_OR_GREATER
                => Power.FromGigawatts(double.CreateChecked(value));
#else
                => Power.FromGigawatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromHydraulicHorsepower(double)" />
            public Power HydraulicHorsepower
#if NET7_0_OR_GREATER
                => Power.FromHydraulicHorsepower(double.CreateChecked(value));
#else
                => Power.FromHydraulicHorsepower(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromJoulesPerHour(double)" />
            public Power JoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromJoulesPerHour(double.CreateChecked(value));
#else
                => Power.FromJoulesPerHour(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromKilobritishThermalUnitsPerHour(double)" />
            public Power KilobritishThermalUnitsPerHour
#if NET7_0_OR_GREATER
                => Power.FromKilobritishThermalUnitsPerHour(double.CreateChecked(value));
#else
                => Power.FromKilobritishThermalUnitsPerHour(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromKilojoulesPerHour(double)" />
            public Power KilojoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromKilojoulesPerHour(double.CreateChecked(value));
#else
                => Power.FromKilojoulesPerHour(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromKilowatts(double)" />
            public Power Kilowatts
#if NET7_0_OR_GREATER
                => Power.FromKilowatts(double.CreateChecked(value));
#else
                => Power.FromKilowatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromMechanicalHorsepower(double)" />
            public Power MechanicalHorsepower
#if NET7_0_OR_GREATER
                => Power.FromMechanicalHorsepower(double.CreateChecked(value));
#else
                => Power.FromMechanicalHorsepower(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromMegabritishThermalUnitsPerHour(double)" />
            public Power MegabritishThermalUnitsPerHour
#if NET7_0_OR_GREATER
                => Power.FromMegabritishThermalUnitsPerHour(double.CreateChecked(value));
#else
                => Power.FromMegabritishThermalUnitsPerHour(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromMegajoulesPerHour(double)" />
            public Power MegajoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromMegajoulesPerHour(double.CreateChecked(value));
#else
                => Power.FromMegajoulesPerHour(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromMegawatts(double)" />
            public Power Megawatts
#if NET7_0_OR_GREATER
                => Power.FromMegawatts(double.CreateChecked(value));
#else
                => Power.FromMegawatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromMetricHorsepower(double)" />
            public Power MetricHorsepower
#if NET7_0_OR_GREATER
                => Power.FromMetricHorsepower(double.CreateChecked(value));
#else
                => Power.FromMetricHorsepower(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromMicrowatts(double)" />
            public Power Microwatts
#if NET7_0_OR_GREATER
                => Power.FromMicrowatts(double.CreateChecked(value));
#else
                => Power.FromMicrowatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromMillijoulesPerHour(double)" />
            public Power MillijoulesPerHour
#if NET7_0_OR_GREATER
                => Power.FromMillijoulesPerHour(double.CreateChecked(value));
#else
                => Power.FromMillijoulesPerHour(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromMilliwatts(double)" />
            public Power Milliwatts
#if NET7_0_OR_GREATER
                => Power.FromMilliwatts(double.CreateChecked(value));
#else
                => Power.FromMilliwatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromNanowatts(double)" />
            public Power Nanowatts
#if NET7_0_OR_GREATER
                => Power.FromNanowatts(double.CreateChecked(value));
#else
                => Power.FromNanowatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromPetawatts(double)" />
            public Power Petawatts
#if NET7_0_OR_GREATER
                => Power.FromPetawatts(double.CreateChecked(value));
#else
                => Power.FromPetawatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromPicowatts(double)" />
            public Power Picowatts
#if NET7_0_OR_GREATER
                => Power.FromPicowatts(double.CreateChecked(value));
#else
                => Power.FromPicowatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromTerawatts(double)" />
            public Power Terawatts
#if NET7_0_OR_GREATER
                => Power.FromTerawatts(double.CreateChecked(value));
#else
                => Power.FromTerawatts(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromTonsOfRefrigeration(double)" />
            public Power TonsOfRefrigeration
#if NET7_0_OR_GREATER
                => Power.FromTonsOfRefrigeration(double.CreateChecked(value));
#else
                => Power.FromTonsOfRefrigeration(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Power.FromWatts(double)" />
            public Power Watts
#if NET7_0_OR_GREATER
                => Power.FromWatts(double.CreateChecked(value));
#else
                => Power.FromWatts(value.ToDouble(null));
#endif

        }
    }
}
