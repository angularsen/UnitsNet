//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of PowerDensity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PowerDensityTestsBase : QuantityTestsBase
    {
        protected abstract double DecawattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double DecawattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double DecawattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double DecawattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double DeciwattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double DeciwattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double DeciwattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double DeciwattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double GigawattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double GigawattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double GigawattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double GigawattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double KilowattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double KilowattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double KilowattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double KilowattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double MegawattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double MegawattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double MegawattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double MegawattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double MicrowattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double MicrowattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double MicrowattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double MicrowattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double MilliwattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double MilliwattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double MilliwattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double MilliwattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double NanowattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double NanowattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double NanowattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double NanowattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double PicowattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double PicowattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double PicowattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double PicowattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double TerawattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double TerawattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double TerawattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double TerawattsPerLiterInOneWattPerCubicMeter { get; }
        protected abstract double WattsPerCubicFootInOneWattPerCubicMeter { get; }
        protected abstract double WattsPerCubicInchInOneWattPerCubicMeter { get; }
        protected abstract double WattsPerCubicMeterInOneWattPerCubicMeter { get; }
        protected abstract double WattsPerLiterInOneWattPerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DecawattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double DecawattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double DecawattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double DecawattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double DeciwattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double DeciwattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double DeciwattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double DeciwattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double GigawattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double GigawattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double GigawattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double GigawattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double NanowattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double NanowattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double NanowattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double NanowattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PicowattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double PicowattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double PicowattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PicowattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double TerawattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double TerawattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double TerawattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double TerawattsPerLiterTolerance { get { return 1e-5; } }
        protected virtual double WattsPerCubicFootTolerance { get { return 1e-5; } }
        protected virtual double WattsPerCubicInchTolerance { get { return 1e-5; } }
        protected virtual double WattsPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double WattsPerLiterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(PowerDensityUnit unit)
        {
            return unit switch
            {
                PowerDensityUnit.DecawattPerCubicFoot => (DecawattsPerCubicFootInOneWattPerCubicMeter, DecawattsPerCubicFootTolerance),
                PowerDensityUnit.DecawattPerCubicInch => (DecawattsPerCubicInchInOneWattPerCubicMeter, DecawattsPerCubicInchTolerance),
                PowerDensityUnit.DecawattPerCubicMeter => (DecawattsPerCubicMeterInOneWattPerCubicMeter, DecawattsPerCubicMeterTolerance),
                PowerDensityUnit.DecawattPerLiter => (DecawattsPerLiterInOneWattPerCubicMeter, DecawattsPerLiterTolerance),
                PowerDensityUnit.DeciwattPerCubicFoot => (DeciwattsPerCubicFootInOneWattPerCubicMeter, DeciwattsPerCubicFootTolerance),
                PowerDensityUnit.DeciwattPerCubicInch => (DeciwattsPerCubicInchInOneWattPerCubicMeter, DeciwattsPerCubicInchTolerance),
                PowerDensityUnit.DeciwattPerCubicMeter => (DeciwattsPerCubicMeterInOneWattPerCubicMeter, DeciwattsPerCubicMeterTolerance),
                PowerDensityUnit.DeciwattPerLiter => (DeciwattsPerLiterInOneWattPerCubicMeter, DeciwattsPerLiterTolerance),
                PowerDensityUnit.GigawattPerCubicFoot => (GigawattsPerCubicFootInOneWattPerCubicMeter, GigawattsPerCubicFootTolerance),
                PowerDensityUnit.GigawattPerCubicInch => (GigawattsPerCubicInchInOneWattPerCubicMeter, GigawattsPerCubicInchTolerance),
                PowerDensityUnit.GigawattPerCubicMeter => (GigawattsPerCubicMeterInOneWattPerCubicMeter, GigawattsPerCubicMeterTolerance),
                PowerDensityUnit.GigawattPerLiter => (GigawattsPerLiterInOneWattPerCubicMeter, GigawattsPerLiterTolerance),
                PowerDensityUnit.KilowattPerCubicFoot => (KilowattsPerCubicFootInOneWattPerCubicMeter, KilowattsPerCubicFootTolerance),
                PowerDensityUnit.KilowattPerCubicInch => (KilowattsPerCubicInchInOneWattPerCubicMeter, KilowattsPerCubicInchTolerance),
                PowerDensityUnit.KilowattPerCubicMeter => (KilowattsPerCubicMeterInOneWattPerCubicMeter, KilowattsPerCubicMeterTolerance),
                PowerDensityUnit.KilowattPerLiter => (KilowattsPerLiterInOneWattPerCubicMeter, KilowattsPerLiterTolerance),
                PowerDensityUnit.MegawattPerCubicFoot => (MegawattsPerCubicFootInOneWattPerCubicMeter, MegawattsPerCubicFootTolerance),
                PowerDensityUnit.MegawattPerCubicInch => (MegawattsPerCubicInchInOneWattPerCubicMeter, MegawattsPerCubicInchTolerance),
                PowerDensityUnit.MegawattPerCubicMeter => (MegawattsPerCubicMeterInOneWattPerCubicMeter, MegawattsPerCubicMeterTolerance),
                PowerDensityUnit.MegawattPerLiter => (MegawattsPerLiterInOneWattPerCubicMeter, MegawattsPerLiterTolerance),
                PowerDensityUnit.MicrowattPerCubicFoot => (MicrowattsPerCubicFootInOneWattPerCubicMeter, MicrowattsPerCubicFootTolerance),
                PowerDensityUnit.MicrowattPerCubicInch => (MicrowattsPerCubicInchInOneWattPerCubicMeter, MicrowattsPerCubicInchTolerance),
                PowerDensityUnit.MicrowattPerCubicMeter => (MicrowattsPerCubicMeterInOneWattPerCubicMeter, MicrowattsPerCubicMeterTolerance),
                PowerDensityUnit.MicrowattPerLiter => (MicrowattsPerLiterInOneWattPerCubicMeter, MicrowattsPerLiterTolerance),
                PowerDensityUnit.MilliwattPerCubicFoot => (MilliwattsPerCubicFootInOneWattPerCubicMeter, MilliwattsPerCubicFootTolerance),
                PowerDensityUnit.MilliwattPerCubicInch => (MilliwattsPerCubicInchInOneWattPerCubicMeter, MilliwattsPerCubicInchTolerance),
                PowerDensityUnit.MilliwattPerCubicMeter => (MilliwattsPerCubicMeterInOneWattPerCubicMeter, MilliwattsPerCubicMeterTolerance),
                PowerDensityUnit.MilliwattPerLiter => (MilliwattsPerLiterInOneWattPerCubicMeter, MilliwattsPerLiterTolerance),
                PowerDensityUnit.NanowattPerCubicFoot => (NanowattsPerCubicFootInOneWattPerCubicMeter, NanowattsPerCubicFootTolerance),
                PowerDensityUnit.NanowattPerCubicInch => (NanowattsPerCubicInchInOneWattPerCubicMeter, NanowattsPerCubicInchTolerance),
                PowerDensityUnit.NanowattPerCubicMeter => (NanowattsPerCubicMeterInOneWattPerCubicMeter, NanowattsPerCubicMeterTolerance),
                PowerDensityUnit.NanowattPerLiter => (NanowattsPerLiterInOneWattPerCubicMeter, NanowattsPerLiterTolerance),
                PowerDensityUnit.PicowattPerCubicFoot => (PicowattsPerCubicFootInOneWattPerCubicMeter, PicowattsPerCubicFootTolerance),
                PowerDensityUnit.PicowattPerCubicInch => (PicowattsPerCubicInchInOneWattPerCubicMeter, PicowattsPerCubicInchTolerance),
                PowerDensityUnit.PicowattPerCubicMeter => (PicowattsPerCubicMeterInOneWattPerCubicMeter, PicowattsPerCubicMeterTolerance),
                PowerDensityUnit.PicowattPerLiter => (PicowattsPerLiterInOneWattPerCubicMeter, PicowattsPerLiterTolerance),
                PowerDensityUnit.TerawattPerCubicFoot => (TerawattsPerCubicFootInOneWattPerCubicMeter, TerawattsPerCubicFootTolerance),
                PowerDensityUnit.TerawattPerCubicInch => (TerawattsPerCubicInchInOneWattPerCubicMeter, TerawattsPerCubicInchTolerance),
                PowerDensityUnit.TerawattPerCubicMeter => (TerawattsPerCubicMeterInOneWattPerCubicMeter, TerawattsPerCubicMeterTolerance),
                PowerDensityUnit.TerawattPerLiter => (TerawattsPerLiterInOneWattPerCubicMeter, TerawattsPerLiterTolerance),
                PowerDensityUnit.WattPerCubicFoot => (WattsPerCubicFootInOneWattPerCubicMeter, WattsPerCubicFootTolerance),
                PowerDensityUnit.WattPerCubicInch => (WattsPerCubicInchInOneWattPerCubicMeter, WattsPerCubicInchTolerance),
                PowerDensityUnit.WattPerCubicMeter => (WattsPerCubicMeterInOneWattPerCubicMeter, WattsPerCubicMeterTolerance),
                PowerDensityUnit.WattPerLiter => (WattsPerLiterInOneWattPerCubicMeter, WattsPerLiterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { PowerDensityUnit.DecawattPerCubicFoot },
            new object[] { PowerDensityUnit.DecawattPerCubicInch },
            new object[] { PowerDensityUnit.DecawattPerCubicMeter },
            new object[] { PowerDensityUnit.DecawattPerLiter },
            new object[] { PowerDensityUnit.DeciwattPerCubicFoot },
            new object[] { PowerDensityUnit.DeciwattPerCubicInch },
            new object[] { PowerDensityUnit.DeciwattPerCubicMeter },
            new object[] { PowerDensityUnit.DeciwattPerLiter },
            new object[] { PowerDensityUnit.GigawattPerCubicFoot },
            new object[] { PowerDensityUnit.GigawattPerCubicInch },
            new object[] { PowerDensityUnit.GigawattPerCubicMeter },
            new object[] { PowerDensityUnit.GigawattPerLiter },
            new object[] { PowerDensityUnit.KilowattPerCubicFoot },
            new object[] { PowerDensityUnit.KilowattPerCubicInch },
            new object[] { PowerDensityUnit.KilowattPerCubicMeter },
            new object[] { PowerDensityUnit.KilowattPerLiter },
            new object[] { PowerDensityUnit.MegawattPerCubicFoot },
            new object[] { PowerDensityUnit.MegawattPerCubicInch },
            new object[] { PowerDensityUnit.MegawattPerCubicMeter },
            new object[] { PowerDensityUnit.MegawattPerLiter },
            new object[] { PowerDensityUnit.MicrowattPerCubicFoot },
            new object[] { PowerDensityUnit.MicrowattPerCubicInch },
            new object[] { PowerDensityUnit.MicrowattPerCubicMeter },
            new object[] { PowerDensityUnit.MicrowattPerLiter },
            new object[] { PowerDensityUnit.MilliwattPerCubicFoot },
            new object[] { PowerDensityUnit.MilliwattPerCubicInch },
            new object[] { PowerDensityUnit.MilliwattPerCubicMeter },
            new object[] { PowerDensityUnit.MilliwattPerLiter },
            new object[] { PowerDensityUnit.NanowattPerCubicFoot },
            new object[] { PowerDensityUnit.NanowattPerCubicInch },
            new object[] { PowerDensityUnit.NanowattPerCubicMeter },
            new object[] { PowerDensityUnit.NanowattPerLiter },
            new object[] { PowerDensityUnit.PicowattPerCubicFoot },
            new object[] { PowerDensityUnit.PicowattPerCubicInch },
            new object[] { PowerDensityUnit.PicowattPerCubicMeter },
            new object[] { PowerDensityUnit.PicowattPerLiter },
            new object[] { PowerDensityUnit.TerawattPerCubicFoot },
            new object[] { PowerDensityUnit.TerawattPerCubicInch },
            new object[] { PowerDensityUnit.TerawattPerCubicMeter },
            new object[] { PowerDensityUnit.TerawattPerLiter },
            new object[] { PowerDensityUnit.WattPerCubicFoot },
            new object[] { PowerDensityUnit.WattPerCubicInch },
            new object[] { PowerDensityUnit.WattPerCubicMeter },
            new object[] { PowerDensityUnit.WattPerLiter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new PowerDensity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(PowerDensityUnit.WattPerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new PowerDensity(double.PositiveInfinity, PowerDensityUnit.WattPerCubicMeter));
            var exception2 = Record.Exception(() => new PowerDensity(double.NegativeInfinity, PowerDensityUnit.WattPerCubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new PowerDensity(double.NaN, PowerDensityUnit.WattPerCubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new PowerDensity(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new PowerDensity(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new PowerDensity(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void PowerDensity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new PowerDensity(1, PowerDensityUnit.WattPerCubicMeter);

            QuantityInfo<PowerDensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(PowerDensity.Zero, quantityInfo.Zero);
            Assert.Equal("PowerDensity", quantityInfo.Name);

            var units = EnumHelpers.GetValues<PowerDensityUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void WattPerCubicMeterToPowerDensityUnits()
        {
            PowerDensity wattpercubicmeter = PowerDensity.FromWattsPerCubicMeter(1);
            AssertEx.EqualTolerance(DecawattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.DecawattsPerCubicFoot, DecawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(DecawattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.DecawattsPerCubicInch, DecawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(DecawattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.DecawattsPerCubicMeter, DecawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(DecawattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.DecawattsPerLiter, DecawattsPerLiterTolerance);
            AssertEx.EqualTolerance(DeciwattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.DeciwattsPerCubicFoot, DeciwattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(DeciwattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.DeciwattsPerCubicInch, DeciwattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(DeciwattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.DeciwattsPerCubicMeter, DeciwattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(DeciwattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.DeciwattsPerLiter, DeciwattsPerLiterTolerance);
            AssertEx.EqualTolerance(GigawattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.GigawattsPerCubicFoot, GigawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(GigawattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.GigawattsPerCubicInch, GigawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(GigawattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.GigawattsPerCubicMeter, GigawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GigawattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.GigawattsPerLiter, GigawattsPerLiterTolerance);
            AssertEx.EqualTolerance(KilowattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.KilowattsPerCubicFoot, KilowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilowattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.KilowattsPerCubicInch, KilowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(KilowattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.KilowattsPerCubicMeter, KilowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.KilowattsPerLiter, KilowattsPerLiterTolerance);
            AssertEx.EqualTolerance(MegawattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.MegawattsPerCubicFoot, MegawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(MegawattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.MegawattsPerCubicInch, MegawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MegawattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.MegawattsPerCubicMeter, MegawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.MegawattsPerLiter, MegawattsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.MicrowattsPerCubicFoot, MicrowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(MicrowattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.MicrowattsPerCubicInch, MicrowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MicrowattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.MicrowattsPerCubicMeter, MicrowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.MicrowattsPerLiter, MicrowattsPerLiterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.MilliwattsPerCubicFoot, MilliwattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(MilliwattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.MilliwattsPerCubicInch, MilliwattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MilliwattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.MilliwattsPerCubicMeter, MilliwattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.MilliwattsPerLiter, MilliwattsPerLiterTolerance);
            AssertEx.EqualTolerance(NanowattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.NanowattsPerCubicFoot, NanowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(NanowattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.NanowattsPerCubicInch, NanowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(NanowattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.NanowattsPerCubicMeter, NanowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.NanowattsPerLiter, NanowattsPerLiterTolerance);
            AssertEx.EqualTolerance(PicowattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.PicowattsPerCubicFoot, PicowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PicowattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.PicowattsPerCubicInch, PicowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PicowattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.PicowattsPerCubicMeter, PicowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.PicowattsPerLiter, PicowattsPerLiterTolerance);
            AssertEx.EqualTolerance(TerawattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.TerawattsPerCubicFoot, TerawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(TerawattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.TerawattsPerCubicInch, TerawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(TerawattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.TerawattsPerCubicMeter, TerawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerawattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.TerawattsPerLiter, TerawattsPerLiterTolerance);
            AssertEx.EqualTolerance(WattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.WattsPerCubicFoot, WattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(WattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.WattsPerCubicInch, WattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(WattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.WattsPerCubicMeter, WattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(WattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.WattsPerLiter, WattsPerLiterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = PowerDensity.From(1, PowerDensityUnit.DecawattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity00.DecawattsPerCubicFoot, DecawattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.DecawattPerCubicFoot, quantity00.Unit);

            var quantity01 = PowerDensity.From(1, PowerDensityUnit.DecawattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity01.DecawattsPerCubicInch, DecawattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.DecawattPerCubicInch, quantity01.Unit);

            var quantity02 = PowerDensity.From(1, PowerDensityUnit.DecawattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity02.DecawattsPerCubicMeter, DecawattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.DecawattPerCubicMeter, quantity02.Unit);

            var quantity03 = PowerDensity.From(1, PowerDensityUnit.DecawattPerLiter);
            AssertEx.EqualTolerance(1, quantity03.DecawattsPerLiter, DecawattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.DecawattPerLiter, quantity03.Unit);

            var quantity04 = PowerDensity.From(1, PowerDensityUnit.DeciwattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity04.DeciwattsPerCubicFoot, DeciwattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.DeciwattPerCubicFoot, quantity04.Unit);

            var quantity05 = PowerDensity.From(1, PowerDensityUnit.DeciwattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity05.DeciwattsPerCubicInch, DeciwattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.DeciwattPerCubicInch, quantity05.Unit);

            var quantity06 = PowerDensity.From(1, PowerDensityUnit.DeciwattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity06.DeciwattsPerCubicMeter, DeciwattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.DeciwattPerCubicMeter, quantity06.Unit);

            var quantity07 = PowerDensity.From(1, PowerDensityUnit.DeciwattPerLiter);
            AssertEx.EqualTolerance(1, quantity07.DeciwattsPerLiter, DeciwattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.DeciwattPerLiter, quantity07.Unit);

            var quantity08 = PowerDensity.From(1, PowerDensityUnit.GigawattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity08.GigawattsPerCubicFoot, GigawattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.GigawattPerCubicFoot, quantity08.Unit);

            var quantity09 = PowerDensity.From(1, PowerDensityUnit.GigawattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity09.GigawattsPerCubicInch, GigawattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.GigawattPerCubicInch, quantity09.Unit);

            var quantity10 = PowerDensity.From(1, PowerDensityUnit.GigawattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity10.GigawattsPerCubicMeter, GigawattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.GigawattPerCubicMeter, quantity10.Unit);

            var quantity11 = PowerDensity.From(1, PowerDensityUnit.GigawattPerLiter);
            AssertEx.EqualTolerance(1, quantity11.GigawattsPerLiter, GigawattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.GigawattPerLiter, quantity11.Unit);

            var quantity12 = PowerDensity.From(1, PowerDensityUnit.KilowattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity12.KilowattsPerCubicFoot, KilowattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.KilowattPerCubicFoot, quantity12.Unit);

            var quantity13 = PowerDensity.From(1, PowerDensityUnit.KilowattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity13.KilowattsPerCubicInch, KilowattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.KilowattPerCubicInch, quantity13.Unit);

            var quantity14 = PowerDensity.From(1, PowerDensityUnit.KilowattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity14.KilowattsPerCubicMeter, KilowattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.KilowattPerCubicMeter, quantity14.Unit);

            var quantity15 = PowerDensity.From(1, PowerDensityUnit.KilowattPerLiter);
            AssertEx.EqualTolerance(1, quantity15.KilowattsPerLiter, KilowattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.KilowattPerLiter, quantity15.Unit);

            var quantity16 = PowerDensity.From(1, PowerDensityUnit.MegawattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity16.MegawattsPerCubicFoot, MegawattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.MegawattPerCubicFoot, quantity16.Unit);

            var quantity17 = PowerDensity.From(1, PowerDensityUnit.MegawattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity17.MegawattsPerCubicInch, MegawattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.MegawattPerCubicInch, quantity17.Unit);

            var quantity18 = PowerDensity.From(1, PowerDensityUnit.MegawattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity18.MegawattsPerCubicMeter, MegawattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.MegawattPerCubicMeter, quantity18.Unit);

            var quantity19 = PowerDensity.From(1, PowerDensityUnit.MegawattPerLiter);
            AssertEx.EqualTolerance(1, quantity19.MegawattsPerLiter, MegawattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.MegawattPerLiter, quantity19.Unit);

            var quantity20 = PowerDensity.From(1, PowerDensityUnit.MicrowattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity20.MicrowattsPerCubicFoot, MicrowattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.MicrowattPerCubicFoot, quantity20.Unit);

            var quantity21 = PowerDensity.From(1, PowerDensityUnit.MicrowattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity21.MicrowattsPerCubicInch, MicrowattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.MicrowattPerCubicInch, quantity21.Unit);

            var quantity22 = PowerDensity.From(1, PowerDensityUnit.MicrowattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity22.MicrowattsPerCubicMeter, MicrowattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.MicrowattPerCubicMeter, quantity22.Unit);

            var quantity23 = PowerDensity.From(1, PowerDensityUnit.MicrowattPerLiter);
            AssertEx.EqualTolerance(1, quantity23.MicrowattsPerLiter, MicrowattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.MicrowattPerLiter, quantity23.Unit);

            var quantity24 = PowerDensity.From(1, PowerDensityUnit.MilliwattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity24.MilliwattsPerCubicFoot, MilliwattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.MilliwattPerCubicFoot, quantity24.Unit);

            var quantity25 = PowerDensity.From(1, PowerDensityUnit.MilliwattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity25.MilliwattsPerCubicInch, MilliwattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.MilliwattPerCubicInch, quantity25.Unit);

            var quantity26 = PowerDensity.From(1, PowerDensityUnit.MilliwattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity26.MilliwattsPerCubicMeter, MilliwattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.MilliwattPerCubicMeter, quantity26.Unit);

            var quantity27 = PowerDensity.From(1, PowerDensityUnit.MilliwattPerLiter);
            AssertEx.EqualTolerance(1, quantity27.MilliwattsPerLiter, MilliwattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.MilliwattPerLiter, quantity27.Unit);

            var quantity28 = PowerDensity.From(1, PowerDensityUnit.NanowattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity28.NanowattsPerCubicFoot, NanowattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.NanowattPerCubicFoot, quantity28.Unit);

            var quantity29 = PowerDensity.From(1, PowerDensityUnit.NanowattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity29.NanowattsPerCubicInch, NanowattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.NanowattPerCubicInch, quantity29.Unit);

            var quantity30 = PowerDensity.From(1, PowerDensityUnit.NanowattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity30.NanowattsPerCubicMeter, NanowattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.NanowattPerCubicMeter, quantity30.Unit);

            var quantity31 = PowerDensity.From(1, PowerDensityUnit.NanowattPerLiter);
            AssertEx.EqualTolerance(1, quantity31.NanowattsPerLiter, NanowattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.NanowattPerLiter, quantity31.Unit);

            var quantity32 = PowerDensity.From(1, PowerDensityUnit.PicowattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity32.PicowattsPerCubicFoot, PicowattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.PicowattPerCubicFoot, quantity32.Unit);

            var quantity33 = PowerDensity.From(1, PowerDensityUnit.PicowattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity33.PicowattsPerCubicInch, PicowattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.PicowattPerCubicInch, quantity33.Unit);

            var quantity34 = PowerDensity.From(1, PowerDensityUnit.PicowattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity34.PicowattsPerCubicMeter, PicowattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.PicowattPerCubicMeter, quantity34.Unit);

            var quantity35 = PowerDensity.From(1, PowerDensityUnit.PicowattPerLiter);
            AssertEx.EqualTolerance(1, quantity35.PicowattsPerLiter, PicowattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.PicowattPerLiter, quantity35.Unit);

            var quantity36 = PowerDensity.From(1, PowerDensityUnit.TerawattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity36.TerawattsPerCubicFoot, TerawattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.TerawattPerCubicFoot, quantity36.Unit);

            var quantity37 = PowerDensity.From(1, PowerDensityUnit.TerawattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity37.TerawattsPerCubicInch, TerawattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.TerawattPerCubicInch, quantity37.Unit);

            var quantity38 = PowerDensity.From(1, PowerDensityUnit.TerawattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity38.TerawattsPerCubicMeter, TerawattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.TerawattPerCubicMeter, quantity38.Unit);

            var quantity39 = PowerDensity.From(1, PowerDensityUnit.TerawattPerLiter);
            AssertEx.EqualTolerance(1, quantity39.TerawattsPerLiter, TerawattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.TerawattPerLiter, quantity39.Unit);

            var quantity40 = PowerDensity.From(1, PowerDensityUnit.WattPerCubicFoot);
            AssertEx.EqualTolerance(1, quantity40.WattsPerCubicFoot, WattsPerCubicFootTolerance);
            Assert.Equal(PowerDensityUnit.WattPerCubicFoot, quantity40.Unit);

            var quantity41 = PowerDensity.From(1, PowerDensityUnit.WattPerCubicInch);
            AssertEx.EqualTolerance(1, quantity41.WattsPerCubicInch, WattsPerCubicInchTolerance);
            Assert.Equal(PowerDensityUnit.WattPerCubicInch, quantity41.Unit);

            var quantity42 = PowerDensity.From(1, PowerDensityUnit.WattPerCubicMeter);
            AssertEx.EqualTolerance(1, quantity42.WattsPerCubicMeter, WattsPerCubicMeterTolerance);
            Assert.Equal(PowerDensityUnit.WattPerCubicMeter, quantity42.Unit);

            var quantity43 = PowerDensity.From(1, PowerDensityUnit.WattPerLiter);
            AssertEx.EqualTolerance(1, quantity43.WattsPerLiter, WattsPerLiterTolerance);
            Assert.Equal(PowerDensityUnit.WattPerLiter, quantity43.Unit);

        }

        [Fact]
        public void FromWattsPerCubicMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => PowerDensity.FromWattsPerCubicMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => PowerDensity.FromWattsPerCubicMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromWattsPerCubicMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => PowerDensity.FromWattsPerCubicMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var wattpercubicmeter = PowerDensity.FromWattsPerCubicMeter(1);
            AssertEx.EqualTolerance(DecawattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.DecawattPerCubicFoot), DecawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(DecawattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.DecawattPerCubicInch), DecawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(DecawattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.DecawattPerCubicMeter), DecawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(DecawattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.DecawattPerLiter), DecawattsPerLiterTolerance);
            AssertEx.EqualTolerance(DeciwattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.DeciwattPerCubicFoot), DeciwattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(DeciwattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.DeciwattPerCubicInch), DeciwattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(DeciwattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.DeciwattPerCubicMeter), DeciwattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(DeciwattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.DeciwattPerLiter), DeciwattsPerLiterTolerance);
            AssertEx.EqualTolerance(GigawattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.GigawattPerCubicFoot), GigawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(GigawattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.GigawattPerCubicInch), GigawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(GigawattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.GigawattPerCubicMeter), GigawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GigawattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.GigawattPerLiter), GigawattsPerLiterTolerance);
            AssertEx.EqualTolerance(KilowattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.KilowattPerCubicFoot), KilowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(KilowattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.KilowattPerCubicInch), KilowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(KilowattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.KilowattPerCubicMeter), KilowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.KilowattPerLiter), KilowattsPerLiterTolerance);
            AssertEx.EqualTolerance(MegawattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MegawattPerCubicFoot), MegawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(MegawattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MegawattPerCubicInch), MegawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MegawattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MegawattPerCubicMeter), MegawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MegawattPerLiter), MegawattsPerLiterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MicrowattPerCubicFoot), MicrowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(MicrowattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MicrowattPerCubicInch), MicrowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MicrowattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MicrowattPerCubicMeter), MicrowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicrowattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MicrowattPerLiter), MicrowattsPerLiterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MilliwattPerCubicFoot), MilliwattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(MilliwattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MilliwattPerCubicInch), MilliwattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(MilliwattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MilliwattPerCubicMeter), MilliwattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.MilliwattPerLiter), MilliwattsPerLiterTolerance);
            AssertEx.EqualTolerance(NanowattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.NanowattPerCubicFoot), NanowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(NanowattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.NanowattPerCubicInch), NanowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(NanowattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.NanowattPerCubicMeter), NanowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(NanowattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.NanowattPerLiter), NanowattsPerLiterTolerance);
            AssertEx.EqualTolerance(PicowattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.PicowattPerCubicFoot), PicowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(PicowattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.PicowattPerCubicInch), PicowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(PicowattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.PicowattPerCubicMeter), PicowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PicowattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.PicowattPerLiter), PicowattsPerLiterTolerance);
            AssertEx.EqualTolerance(TerawattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.TerawattPerCubicFoot), TerawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(TerawattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.TerawattPerCubicInch), TerawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(TerawattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.TerawattPerCubicMeter), TerawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerawattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.TerawattPerLiter), TerawattsPerLiterTolerance);
            AssertEx.EqualTolerance(WattsPerCubicFootInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.WattPerCubicFoot), WattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(WattsPerCubicInchInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.WattPerCubicInch), WattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(WattsPerCubicMeterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.WattPerCubicMeter), WattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(WattsPerLiterInOneWattPerCubicMeter, wattpercubicmeter.As(PowerDensityUnit.WattPerLiter), WattsPerLiterTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = PowerDensity.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
            var expectedValue = quantity.As(PowerDensity.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
            var expectedUnit = PowerDensity.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                PowerDensity quantityToConvert = quantity;

                PowerDensity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<PowerDensityUnit> quantityToConvert = quantity;

                IQuantity<PowerDensityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<PowerDensityUnit> quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<PowerDensityUnit> quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new PowerDensity(value: 1, unit: PowerDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = PowerDensity.Parse("1 daW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecawattsPerCubicFoot, DecawattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.DecawattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 daW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecawattsPerCubicInch, DecawattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.DecawattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 daW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecawattsPerCubicMeter, DecawattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.DecawattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 daW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecawattsPerLiter, DecawattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.DecawattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 dW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DeciwattsPerCubicFoot, DeciwattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.DeciwattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 dW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DeciwattsPerCubicInch, DeciwattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.DeciwattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 dW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DeciwattsPerCubicMeter, DeciwattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.DeciwattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 dW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DeciwattsPerLiter, DeciwattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.DeciwattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 GW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattsPerCubicFoot, GigawattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.GigawattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 GW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattsPerCubicInch, GigawattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.GigawattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 GW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattsPerCubicMeter, GigawattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.GigawattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 GW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GigawattsPerLiter, GigawattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.GigawattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 kW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerCubicFoot, KilowattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.KilowattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 kW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerCubicInch, KilowattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.KilowattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 kW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerCubicMeter, KilowattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.KilowattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 kW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerLiter, KilowattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.KilowattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 MW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattsPerCubicFoot, MegawattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.MegawattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 MW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattsPerCubicInch, MegawattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.MegawattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 MW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattsPerCubicMeter, MegawattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.MegawattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 MW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegawattsPerLiter, MegawattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.MegawattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 µW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerCubicFoot, MicrowattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.MicrowattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 µW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerCubicInch, MicrowattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.MicrowattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 µW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerCubicMeter, MicrowattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.MicrowattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 µW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerLiter, MicrowattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.MicrowattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 mW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilliwattsPerCubicFoot, MilliwattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.MilliwattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 mW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilliwattsPerCubicInch, MilliwattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.MilliwattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 mW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilliwattsPerCubicMeter, MilliwattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.MilliwattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 mW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilliwattsPerLiter, MilliwattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.MilliwattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 nW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerCubicFoot, NanowattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.NanowattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 nW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerCubicInch, NanowattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.NanowattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 nW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerCubicMeter, NanowattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.NanowattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 nW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerLiter, NanowattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.NanowattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 pW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerCubicFoot, PicowattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.PicowattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 pW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerCubicInch, PicowattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.PicowattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 pW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerCubicMeter, PicowattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.PicowattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 pW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerLiter, PicowattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.PicowattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 TW/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TerawattsPerCubicFoot, TerawattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.TerawattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 TW/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TerawattsPerCubicInch, TerawattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.TerawattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 TW/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TerawattsPerCubicMeter, TerawattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.TerawattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 TW/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TerawattsPerLiter, TerawattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.TerawattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 W/ft³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattsPerCubicFoot, WattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.WattPerCubicFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 W/in³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattsPerCubicInch, WattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.WattPerCubicInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 W/m³", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattsPerCubicMeter, WattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.WattPerCubicMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = PowerDensity.Parse("1 W/l", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.WattsPerLiter, WattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.WattPerLiter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(PowerDensity.TryParse("1 daW/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecawattsPerCubicFoot, DecawattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.DecawattPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 daW/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecawattsPerCubicInch, DecawattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.DecawattPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 daW/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecawattsPerCubicMeter, DecawattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.DecawattPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 daW/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecawattsPerLiter, DecawattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.DecawattPerLiter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 dW/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DeciwattsPerCubicFoot, DeciwattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.DeciwattPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 dW/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DeciwattsPerCubicInch, DeciwattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.DeciwattPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 dW/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DeciwattsPerCubicMeter, DeciwattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.DeciwattPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 dW/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DeciwattsPerLiter, DeciwattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.DeciwattPerLiter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 GW/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattsPerCubicFoot, GigawattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.GigawattPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 GW/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattsPerCubicInch, GigawattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.GigawattPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 GW/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattsPerCubicMeter, GigawattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.GigawattPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 GW/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GigawattsPerLiter, GigawattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.GigawattPerLiter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 kW/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerCubicFoot, KilowattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.KilowattPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 kW/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerCubicInch, KilowattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.KilowattPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 kW/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerCubicMeter, KilowattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.KilowattPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 kW/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilowattsPerLiter, KilowattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.KilowattPerLiter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 µW/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerCubicFoot, MicrowattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.MicrowattPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 µW/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerCubicInch, MicrowattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.MicrowattPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 µW/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerCubicMeter, MicrowattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.MicrowattPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 µW/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrowattsPerLiter, MicrowattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.MicrowattPerLiter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 nW/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerCubicFoot, NanowattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.NanowattPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 nW/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerCubicInch, NanowattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.NanowattPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 nW/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerCubicMeter, NanowattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.NanowattPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 nW/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanowattsPerLiter, NanowattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.NanowattPerLiter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 pW/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerCubicFoot, PicowattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.PicowattPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 pW/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerCubicInch, PicowattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.PicowattPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 pW/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerCubicMeter, PicowattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.PicowattPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 pW/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PicowattsPerLiter, PicowattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.PicowattPerLiter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 TW/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattsPerCubicFoot, TerawattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.TerawattPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 TW/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattsPerCubicInch, TerawattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.TerawattPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 TW/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattsPerCubicMeter, TerawattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.TerawattPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 TW/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TerawattsPerLiter, TerawattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.TerawattPerLiter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 W/ft³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattsPerCubicFoot, WattsPerCubicFootTolerance);
                Assert.Equal(PowerDensityUnit.WattPerCubicFoot, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 W/in³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattsPerCubicInch, WattsPerCubicInchTolerance);
                Assert.Equal(PowerDensityUnit.WattPerCubicInch, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 W/m³", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattsPerCubicMeter, WattsPerCubicMeterTolerance);
                Assert.Equal(PowerDensityUnit.WattPerCubicMeter, parsed.Unit);
            }

            {
                Assert.True(PowerDensity.TryParse("1 W/l", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.WattsPerLiter, WattsPerLiterTolerance);
                Assert.Equal(PowerDensityUnit.WattPerLiter, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("daW/ft³", PowerDensityUnit.DecawattPerCubicFoot)]
        [InlineData("daW/in³", PowerDensityUnit.DecawattPerCubicInch)]
        [InlineData("daW/m³", PowerDensityUnit.DecawattPerCubicMeter)]
        [InlineData("daW/l", PowerDensityUnit.DecawattPerLiter)]
        [InlineData("dW/ft³", PowerDensityUnit.DeciwattPerCubicFoot)]
        [InlineData("dW/in³", PowerDensityUnit.DeciwattPerCubicInch)]
        [InlineData("dW/m³", PowerDensityUnit.DeciwattPerCubicMeter)]
        [InlineData("dW/l", PowerDensityUnit.DeciwattPerLiter)]
        [InlineData("GW/ft³", PowerDensityUnit.GigawattPerCubicFoot)]
        [InlineData("GW/in³", PowerDensityUnit.GigawattPerCubicInch)]
        [InlineData("GW/m³", PowerDensityUnit.GigawattPerCubicMeter)]
        [InlineData("GW/l", PowerDensityUnit.GigawattPerLiter)]
        [InlineData("kW/ft³", PowerDensityUnit.KilowattPerCubicFoot)]
        [InlineData("kW/in³", PowerDensityUnit.KilowattPerCubicInch)]
        [InlineData("kW/m³", PowerDensityUnit.KilowattPerCubicMeter)]
        [InlineData("kW/l", PowerDensityUnit.KilowattPerLiter)]
        [InlineData("MW/ft³", PowerDensityUnit.MegawattPerCubicFoot)]
        [InlineData("MW/in³", PowerDensityUnit.MegawattPerCubicInch)]
        [InlineData("MW/m³", PowerDensityUnit.MegawattPerCubicMeter)]
        [InlineData("MW/l", PowerDensityUnit.MegawattPerLiter)]
        [InlineData("µW/ft³", PowerDensityUnit.MicrowattPerCubicFoot)]
        [InlineData("µW/in³", PowerDensityUnit.MicrowattPerCubicInch)]
        [InlineData("µW/m³", PowerDensityUnit.MicrowattPerCubicMeter)]
        [InlineData("µW/l", PowerDensityUnit.MicrowattPerLiter)]
        [InlineData("mW/ft³", PowerDensityUnit.MilliwattPerCubicFoot)]
        [InlineData("mW/in³", PowerDensityUnit.MilliwattPerCubicInch)]
        [InlineData("mW/m³", PowerDensityUnit.MilliwattPerCubicMeter)]
        [InlineData("mW/l", PowerDensityUnit.MilliwattPerLiter)]
        [InlineData("nW/ft³", PowerDensityUnit.NanowattPerCubicFoot)]
        [InlineData("nW/in³", PowerDensityUnit.NanowattPerCubicInch)]
        [InlineData("nW/m³", PowerDensityUnit.NanowattPerCubicMeter)]
        [InlineData("nW/l", PowerDensityUnit.NanowattPerLiter)]
        [InlineData("pW/ft³", PowerDensityUnit.PicowattPerCubicFoot)]
        [InlineData("pW/in³", PowerDensityUnit.PicowattPerCubicInch)]
        [InlineData("pW/m³", PowerDensityUnit.PicowattPerCubicMeter)]
        [InlineData("pW/l", PowerDensityUnit.PicowattPerLiter)]
        [InlineData("TW/ft³", PowerDensityUnit.TerawattPerCubicFoot)]
        [InlineData("TW/in³", PowerDensityUnit.TerawattPerCubicInch)]
        [InlineData("TW/m³", PowerDensityUnit.TerawattPerCubicMeter)]
        [InlineData("TW/l", PowerDensityUnit.TerawattPerLiter)]
        [InlineData("W/ft³", PowerDensityUnit.WattPerCubicFoot)]
        [InlineData("W/in³", PowerDensityUnit.WattPerCubicInch)]
        [InlineData("W/m³", PowerDensityUnit.WattPerCubicMeter)]
        [InlineData("W/l", PowerDensityUnit.WattPerLiter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PowerDensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            PowerDensityUnit parsedUnit = PowerDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("daW/ft³", PowerDensityUnit.DecawattPerCubicFoot)]
        [InlineData("daW/in³", PowerDensityUnit.DecawattPerCubicInch)]
        [InlineData("daW/m³", PowerDensityUnit.DecawattPerCubicMeter)]
        [InlineData("daW/l", PowerDensityUnit.DecawattPerLiter)]
        [InlineData("dW/ft³", PowerDensityUnit.DeciwattPerCubicFoot)]
        [InlineData("dW/in³", PowerDensityUnit.DeciwattPerCubicInch)]
        [InlineData("dW/m³", PowerDensityUnit.DeciwattPerCubicMeter)]
        [InlineData("dW/l", PowerDensityUnit.DeciwattPerLiter)]
        [InlineData("GW/ft³", PowerDensityUnit.GigawattPerCubicFoot)]
        [InlineData("GW/in³", PowerDensityUnit.GigawattPerCubicInch)]
        [InlineData("GW/m³", PowerDensityUnit.GigawattPerCubicMeter)]
        [InlineData("GW/l", PowerDensityUnit.GigawattPerLiter)]
        [InlineData("kW/ft³", PowerDensityUnit.KilowattPerCubicFoot)]
        [InlineData("kW/in³", PowerDensityUnit.KilowattPerCubicInch)]
        [InlineData("kW/m³", PowerDensityUnit.KilowattPerCubicMeter)]
        [InlineData("kW/l", PowerDensityUnit.KilowattPerLiter)]
        [InlineData("MW/ft³", PowerDensityUnit.MegawattPerCubicFoot)]
        [InlineData("MW/in³", PowerDensityUnit.MegawattPerCubicInch)]
        [InlineData("MW/m³", PowerDensityUnit.MegawattPerCubicMeter)]
        [InlineData("MW/l", PowerDensityUnit.MegawattPerLiter)]
        [InlineData("µW/ft³", PowerDensityUnit.MicrowattPerCubicFoot)]
        [InlineData("µW/in³", PowerDensityUnit.MicrowattPerCubicInch)]
        [InlineData("µW/m³", PowerDensityUnit.MicrowattPerCubicMeter)]
        [InlineData("µW/l", PowerDensityUnit.MicrowattPerLiter)]
        [InlineData("mW/ft³", PowerDensityUnit.MilliwattPerCubicFoot)]
        [InlineData("mW/in³", PowerDensityUnit.MilliwattPerCubicInch)]
        [InlineData("mW/m³", PowerDensityUnit.MilliwattPerCubicMeter)]
        [InlineData("mW/l", PowerDensityUnit.MilliwattPerLiter)]
        [InlineData("nW/ft³", PowerDensityUnit.NanowattPerCubicFoot)]
        [InlineData("nW/in³", PowerDensityUnit.NanowattPerCubicInch)]
        [InlineData("nW/m³", PowerDensityUnit.NanowattPerCubicMeter)]
        [InlineData("nW/l", PowerDensityUnit.NanowattPerLiter)]
        [InlineData("pW/ft³", PowerDensityUnit.PicowattPerCubicFoot)]
        [InlineData("pW/in³", PowerDensityUnit.PicowattPerCubicInch)]
        [InlineData("pW/m³", PowerDensityUnit.PicowattPerCubicMeter)]
        [InlineData("pW/l", PowerDensityUnit.PicowattPerLiter)]
        [InlineData("TW/ft³", PowerDensityUnit.TerawattPerCubicFoot)]
        [InlineData("TW/in³", PowerDensityUnit.TerawattPerCubicInch)]
        [InlineData("TW/m³", PowerDensityUnit.TerawattPerCubicMeter)]
        [InlineData("TW/l", PowerDensityUnit.TerawattPerLiter)]
        [InlineData("W/ft³", PowerDensityUnit.WattPerCubicFoot)]
        [InlineData("W/in³", PowerDensityUnit.WattPerCubicInch)]
        [InlineData("W/m³", PowerDensityUnit.WattPerCubicMeter)]
        [InlineData("W/l", PowerDensityUnit.WattPerLiter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PowerDensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            PowerDensityUnit parsedUnit = PowerDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "daW/ft³", PowerDensityUnit.DecawattPerCubicFoot)]
        [InlineData("en-US", "daW/in³", PowerDensityUnit.DecawattPerCubicInch)]
        [InlineData("en-US", "daW/m³", PowerDensityUnit.DecawattPerCubicMeter)]
        [InlineData("en-US", "daW/l", PowerDensityUnit.DecawattPerLiter)]
        [InlineData("en-US", "dW/ft³", PowerDensityUnit.DeciwattPerCubicFoot)]
        [InlineData("en-US", "dW/in³", PowerDensityUnit.DeciwattPerCubicInch)]
        [InlineData("en-US", "dW/m³", PowerDensityUnit.DeciwattPerCubicMeter)]
        [InlineData("en-US", "dW/l", PowerDensityUnit.DeciwattPerLiter)]
        [InlineData("en-US", "GW/ft³", PowerDensityUnit.GigawattPerCubicFoot)]
        [InlineData("en-US", "GW/in³", PowerDensityUnit.GigawattPerCubicInch)]
        [InlineData("en-US", "GW/m³", PowerDensityUnit.GigawattPerCubicMeter)]
        [InlineData("en-US", "GW/l", PowerDensityUnit.GigawattPerLiter)]
        [InlineData("en-US", "kW/ft³", PowerDensityUnit.KilowattPerCubicFoot)]
        [InlineData("en-US", "kW/in³", PowerDensityUnit.KilowattPerCubicInch)]
        [InlineData("en-US", "kW/m³", PowerDensityUnit.KilowattPerCubicMeter)]
        [InlineData("en-US", "kW/l", PowerDensityUnit.KilowattPerLiter)]
        [InlineData("en-US", "MW/ft³", PowerDensityUnit.MegawattPerCubicFoot)]
        [InlineData("en-US", "MW/in³", PowerDensityUnit.MegawattPerCubicInch)]
        [InlineData("en-US", "MW/m³", PowerDensityUnit.MegawattPerCubicMeter)]
        [InlineData("en-US", "MW/l", PowerDensityUnit.MegawattPerLiter)]
        [InlineData("en-US", "µW/ft³", PowerDensityUnit.MicrowattPerCubicFoot)]
        [InlineData("en-US", "µW/in³", PowerDensityUnit.MicrowattPerCubicInch)]
        [InlineData("en-US", "µW/m³", PowerDensityUnit.MicrowattPerCubicMeter)]
        [InlineData("en-US", "µW/l", PowerDensityUnit.MicrowattPerLiter)]
        [InlineData("en-US", "mW/ft³", PowerDensityUnit.MilliwattPerCubicFoot)]
        [InlineData("en-US", "mW/in³", PowerDensityUnit.MilliwattPerCubicInch)]
        [InlineData("en-US", "mW/m³", PowerDensityUnit.MilliwattPerCubicMeter)]
        [InlineData("en-US", "mW/l", PowerDensityUnit.MilliwattPerLiter)]
        [InlineData("en-US", "nW/ft³", PowerDensityUnit.NanowattPerCubicFoot)]
        [InlineData("en-US", "nW/in³", PowerDensityUnit.NanowattPerCubicInch)]
        [InlineData("en-US", "nW/m³", PowerDensityUnit.NanowattPerCubicMeter)]
        [InlineData("en-US", "nW/l", PowerDensityUnit.NanowattPerLiter)]
        [InlineData("en-US", "pW/ft³", PowerDensityUnit.PicowattPerCubicFoot)]
        [InlineData("en-US", "pW/in³", PowerDensityUnit.PicowattPerCubicInch)]
        [InlineData("en-US", "pW/m³", PowerDensityUnit.PicowattPerCubicMeter)]
        [InlineData("en-US", "pW/l", PowerDensityUnit.PicowattPerLiter)]
        [InlineData("en-US", "TW/ft³", PowerDensityUnit.TerawattPerCubicFoot)]
        [InlineData("en-US", "TW/in³", PowerDensityUnit.TerawattPerCubicInch)]
        [InlineData("en-US", "TW/m³", PowerDensityUnit.TerawattPerCubicMeter)]
        [InlineData("en-US", "TW/l", PowerDensityUnit.TerawattPerLiter)]
        [InlineData("en-US", "W/ft³", PowerDensityUnit.WattPerCubicFoot)]
        [InlineData("en-US", "W/in³", PowerDensityUnit.WattPerCubicInch)]
        [InlineData("en-US", "W/m³", PowerDensityUnit.WattPerCubicMeter)]
        [InlineData("en-US", "W/l", PowerDensityUnit.WattPerLiter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, PowerDensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            PowerDensityUnit parsedUnit = PowerDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "daW/ft³", PowerDensityUnit.DecawattPerCubicFoot)]
        [InlineData("en-US", "daW/in³", PowerDensityUnit.DecawattPerCubicInch)]
        [InlineData("en-US", "daW/m³", PowerDensityUnit.DecawattPerCubicMeter)]
        [InlineData("en-US", "daW/l", PowerDensityUnit.DecawattPerLiter)]
        [InlineData("en-US", "dW/ft³", PowerDensityUnit.DeciwattPerCubicFoot)]
        [InlineData("en-US", "dW/in³", PowerDensityUnit.DeciwattPerCubicInch)]
        [InlineData("en-US", "dW/m³", PowerDensityUnit.DeciwattPerCubicMeter)]
        [InlineData("en-US", "dW/l", PowerDensityUnit.DeciwattPerLiter)]
        [InlineData("en-US", "GW/ft³", PowerDensityUnit.GigawattPerCubicFoot)]
        [InlineData("en-US", "GW/in³", PowerDensityUnit.GigawattPerCubicInch)]
        [InlineData("en-US", "GW/m³", PowerDensityUnit.GigawattPerCubicMeter)]
        [InlineData("en-US", "GW/l", PowerDensityUnit.GigawattPerLiter)]
        [InlineData("en-US", "kW/ft³", PowerDensityUnit.KilowattPerCubicFoot)]
        [InlineData("en-US", "kW/in³", PowerDensityUnit.KilowattPerCubicInch)]
        [InlineData("en-US", "kW/m³", PowerDensityUnit.KilowattPerCubicMeter)]
        [InlineData("en-US", "kW/l", PowerDensityUnit.KilowattPerLiter)]
        [InlineData("en-US", "MW/ft³", PowerDensityUnit.MegawattPerCubicFoot)]
        [InlineData("en-US", "MW/in³", PowerDensityUnit.MegawattPerCubicInch)]
        [InlineData("en-US", "MW/m³", PowerDensityUnit.MegawattPerCubicMeter)]
        [InlineData("en-US", "MW/l", PowerDensityUnit.MegawattPerLiter)]
        [InlineData("en-US", "µW/ft³", PowerDensityUnit.MicrowattPerCubicFoot)]
        [InlineData("en-US", "µW/in³", PowerDensityUnit.MicrowattPerCubicInch)]
        [InlineData("en-US", "µW/m³", PowerDensityUnit.MicrowattPerCubicMeter)]
        [InlineData("en-US", "µW/l", PowerDensityUnit.MicrowattPerLiter)]
        [InlineData("en-US", "mW/ft³", PowerDensityUnit.MilliwattPerCubicFoot)]
        [InlineData("en-US", "mW/in³", PowerDensityUnit.MilliwattPerCubicInch)]
        [InlineData("en-US", "mW/m³", PowerDensityUnit.MilliwattPerCubicMeter)]
        [InlineData("en-US", "mW/l", PowerDensityUnit.MilliwattPerLiter)]
        [InlineData("en-US", "nW/ft³", PowerDensityUnit.NanowattPerCubicFoot)]
        [InlineData("en-US", "nW/in³", PowerDensityUnit.NanowattPerCubicInch)]
        [InlineData("en-US", "nW/m³", PowerDensityUnit.NanowattPerCubicMeter)]
        [InlineData("en-US", "nW/l", PowerDensityUnit.NanowattPerLiter)]
        [InlineData("en-US", "pW/ft³", PowerDensityUnit.PicowattPerCubicFoot)]
        [InlineData("en-US", "pW/in³", PowerDensityUnit.PicowattPerCubicInch)]
        [InlineData("en-US", "pW/m³", PowerDensityUnit.PicowattPerCubicMeter)]
        [InlineData("en-US", "pW/l", PowerDensityUnit.PicowattPerLiter)]
        [InlineData("en-US", "TW/ft³", PowerDensityUnit.TerawattPerCubicFoot)]
        [InlineData("en-US", "TW/in³", PowerDensityUnit.TerawattPerCubicInch)]
        [InlineData("en-US", "TW/m³", PowerDensityUnit.TerawattPerCubicMeter)]
        [InlineData("en-US", "TW/l", PowerDensityUnit.TerawattPerLiter)]
        [InlineData("en-US", "W/ft³", PowerDensityUnit.WattPerCubicFoot)]
        [InlineData("en-US", "W/in³", PowerDensityUnit.WattPerCubicInch)]
        [InlineData("en-US", "W/m³", PowerDensityUnit.WattPerCubicMeter)]
        [InlineData("en-US", "W/l", PowerDensityUnit.WattPerLiter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, PowerDensityUnit expectedUnit)
        {
            PowerDensityUnit parsedUnit = PowerDensity.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("daW/ft³", PowerDensityUnit.DecawattPerCubicFoot)]
        [InlineData("daW/in³", PowerDensityUnit.DecawattPerCubicInch)]
        [InlineData("daW/m³", PowerDensityUnit.DecawattPerCubicMeter)]
        [InlineData("daW/l", PowerDensityUnit.DecawattPerLiter)]
        [InlineData("dW/ft³", PowerDensityUnit.DeciwattPerCubicFoot)]
        [InlineData("dW/in³", PowerDensityUnit.DeciwattPerCubicInch)]
        [InlineData("dW/m³", PowerDensityUnit.DeciwattPerCubicMeter)]
        [InlineData("dW/l", PowerDensityUnit.DeciwattPerLiter)]
        [InlineData("GW/ft³", PowerDensityUnit.GigawattPerCubicFoot)]
        [InlineData("GW/in³", PowerDensityUnit.GigawattPerCubicInch)]
        [InlineData("GW/m³", PowerDensityUnit.GigawattPerCubicMeter)]
        [InlineData("GW/l", PowerDensityUnit.GigawattPerLiter)]
        [InlineData("kW/ft³", PowerDensityUnit.KilowattPerCubicFoot)]
        [InlineData("kW/in³", PowerDensityUnit.KilowattPerCubicInch)]
        [InlineData("kW/m³", PowerDensityUnit.KilowattPerCubicMeter)]
        [InlineData("kW/l", PowerDensityUnit.KilowattPerLiter)]
        [InlineData("MW/ft³", PowerDensityUnit.MegawattPerCubicFoot)]
        [InlineData("MW/in³", PowerDensityUnit.MegawattPerCubicInch)]
        [InlineData("MW/m³", PowerDensityUnit.MegawattPerCubicMeter)]
        [InlineData("MW/l", PowerDensityUnit.MegawattPerLiter)]
        [InlineData("µW/ft³", PowerDensityUnit.MicrowattPerCubicFoot)]
        [InlineData("µW/in³", PowerDensityUnit.MicrowattPerCubicInch)]
        [InlineData("µW/m³", PowerDensityUnit.MicrowattPerCubicMeter)]
        [InlineData("µW/l", PowerDensityUnit.MicrowattPerLiter)]
        [InlineData("mW/ft³", PowerDensityUnit.MilliwattPerCubicFoot)]
        [InlineData("mW/in³", PowerDensityUnit.MilliwattPerCubicInch)]
        [InlineData("mW/m³", PowerDensityUnit.MilliwattPerCubicMeter)]
        [InlineData("mW/l", PowerDensityUnit.MilliwattPerLiter)]
        [InlineData("nW/ft³", PowerDensityUnit.NanowattPerCubicFoot)]
        [InlineData("nW/in³", PowerDensityUnit.NanowattPerCubicInch)]
        [InlineData("nW/m³", PowerDensityUnit.NanowattPerCubicMeter)]
        [InlineData("nW/l", PowerDensityUnit.NanowattPerLiter)]
        [InlineData("pW/ft³", PowerDensityUnit.PicowattPerCubicFoot)]
        [InlineData("pW/in³", PowerDensityUnit.PicowattPerCubicInch)]
        [InlineData("pW/m³", PowerDensityUnit.PicowattPerCubicMeter)]
        [InlineData("pW/l", PowerDensityUnit.PicowattPerLiter)]
        [InlineData("TW/ft³", PowerDensityUnit.TerawattPerCubicFoot)]
        [InlineData("TW/in³", PowerDensityUnit.TerawattPerCubicInch)]
        [InlineData("TW/m³", PowerDensityUnit.TerawattPerCubicMeter)]
        [InlineData("TW/l", PowerDensityUnit.TerawattPerLiter)]
        [InlineData("W/ft³", PowerDensityUnit.WattPerCubicFoot)]
        [InlineData("W/in³", PowerDensityUnit.WattPerCubicInch)]
        [InlineData("W/m³", PowerDensityUnit.WattPerCubicMeter)]
        [InlineData("W/l", PowerDensityUnit.WattPerLiter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PowerDensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(PowerDensity.TryParseUnit(abbreviation, out PowerDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("daW/ft³", PowerDensityUnit.DecawattPerCubicFoot)]
        [InlineData("daW/in³", PowerDensityUnit.DecawattPerCubicInch)]
        [InlineData("daW/m³", PowerDensityUnit.DecawattPerCubicMeter)]
        [InlineData("daW/l", PowerDensityUnit.DecawattPerLiter)]
        [InlineData("dW/ft³", PowerDensityUnit.DeciwattPerCubicFoot)]
        [InlineData("dW/in³", PowerDensityUnit.DeciwattPerCubicInch)]
        [InlineData("dW/m³", PowerDensityUnit.DeciwattPerCubicMeter)]
        [InlineData("dW/l", PowerDensityUnit.DeciwattPerLiter)]
        [InlineData("GW/ft³", PowerDensityUnit.GigawattPerCubicFoot)]
        [InlineData("GW/in³", PowerDensityUnit.GigawattPerCubicInch)]
        [InlineData("GW/m³", PowerDensityUnit.GigawattPerCubicMeter)]
        [InlineData("GW/l", PowerDensityUnit.GigawattPerLiter)]
        [InlineData("kW/ft³", PowerDensityUnit.KilowattPerCubicFoot)]
        [InlineData("kW/in³", PowerDensityUnit.KilowattPerCubicInch)]
        [InlineData("kW/m³", PowerDensityUnit.KilowattPerCubicMeter)]
        [InlineData("kW/l", PowerDensityUnit.KilowattPerLiter)]
        [InlineData("MW/ft³", PowerDensityUnit.MegawattPerCubicFoot)]
        [InlineData("MW/in³", PowerDensityUnit.MegawattPerCubicInch)]
        [InlineData("MW/m³", PowerDensityUnit.MegawattPerCubicMeter)]
        [InlineData("MW/l", PowerDensityUnit.MegawattPerLiter)]
        [InlineData("µW/ft³", PowerDensityUnit.MicrowattPerCubicFoot)]
        [InlineData("µW/in³", PowerDensityUnit.MicrowattPerCubicInch)]
        [InlineData("µW/m³", PowerDensityUnit.MicrowattPerCubicMeter)]
        [InlineData("µW/l", PowerDensityUnit.MicrowattPerLiter)]
        [InlineData("mW/ft³", PowerDensityUnit.MilliwattPerCubicFoot)]
        [InlineData("mW/in³", PowerDensityUnit.MilliwattPerCubicInch)]
        [InlineData("mW/m³", PowerDensityUnit.MilliwattPerCubicMeter)]
        [InlineData("mW/l", PowerDensityUnit.MilliwattPerLiter)]
        [InlineData("nW/ft³", PowerDensityUnit.NanowattPerCubicFoot)]
        [InlineData("nW/in³", PowerDensityUnit.NanowattPerCubicInch)]
        [InlineData("nW/m³", PowerDensityUnit.NanowattPerCubicMeter)]
        [InlineData("nW/l", PowerDensityUnit.NanowattPerLiter)]
        [InlineData("pW/ft³", PowerDensityUnit.PicowattPerCubicFoot)]
        [InlineData("pW/in³", PowerDensityUnit.PicowattPerCubicInch)]
        [InlineData("pW/m³", PowerDensityUnit.PicowattPerCubicMeter)]
        [InlineData("pW/l", PowerDensityUnit.PicowattPerLiter)]
        [InlineData("TW/ft³", PowerDensityUnit.TerawattPerCubicFoot)]
        [InlineData("TW/in³", PowerDensityUnit.TerawattPerCubicInch)]
        [InlineData("TW/m³", PowerDensityUnit.TerawattPerCubicMeter)]
        [InlineData("TW/l", PowerDensityUnit.TerawattPerLiter)]
        [InlineData("W/ft³", PowerDensityUnit.WattPerCubicFoot)]
        [InlineData("W/in³", PowerDensityUnit.WattPerCubicInch)]
        [InlineData("W/m³", PowerDensityUnit.WattPerCubicMeter)]
        [InlineData("W/l", PowerDensityUnit.WattPerLiter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PowerDensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(PowerDensity.TryParseUnit(abbreviation, out PowerDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "daW/ft³", PowerDensityUnit.DecawattPerCubicFoot)]
        [InlineData("en-US", "daW/in³", PowerDensityUnit.DecawattPerCubicInch)]
        [InlineData("en-US", "daW/m³", PowerDensityUnit.DecawattPerCubicMeter)]
        [InlineData("en-US", "daW/l", PowerDensityUnit.DecawattPerLiter)]
        [InlineData("en-US", "dW/ft³", PowerDensityUnit.DeciwattPerCubicFoot)]
        [InlineData("en-US", "dW/in³", PowerDensityUnit.DeciwattPerCubicInch)]
        [InlineData("en-US", "dW/m³", PowerDensityUnit.DeciwattPerCubicMeter)]
        [InlineData("en-US", "dW/l", PowerDensityUnit.DeciwattPerLiter)]
        [InlineData("en-US", "GW/ft³", PowerDensityUnit.GigawattPerCubicFoot)]
        [InlineData("en-US", "GW/in³", PowerDensityUnit.GigawattPerCubicInch)]
        [InlineData("en-US", "GW/m³", PowerDensityUnit.GigawattPerCubicMeter)]
        [InlineData("en-US", "GW/l", PowerDensityUnit.GigawattPerLiter)]
        [InlineData("en-US", "kW/ft³", PowerDensityUnit.KilowattPerCubicFoot)]
        [InlineData("en-US", "kW/in³", PowerDensityUnit.KilowattPerCubicInch)]
        [InlineData("en-US", "kW/m³", PowerDensityUnit.KilowattPerCubicMeter)]
        [InlineData("en-US", "kW/l", PowerDensityUnit.KilowattPerLiter)]
        [InlineData("en-US", "MW/ft³", PowerDensityUnit.MegawattPerCubicFoot)]
        [InlineData("en-US", "MW/in³", PowerDensityUnit.MegawattPerCubicInch)]
        [InlineData("en-US", "MW/m³", PowerDensityUnit.MegawattPerCubicMeter)]
        [InlineData("en-US", "MW/l", PowerDensityUnit.MegawattPerLiter)]
        [InlineData("en-US", "µW/ft³", PowerDensityUnit.MicrowattPerCubicFoot)]
        [InlineData("en-US", "µW/in³", PowerDensityUnit.MicrowattPerCubicInch)]
        [InlineData("en-US", "µW/m³", PowerDensityUnit.MicrowattPerCubicMeter)]
        [InlineData("en-US", "µW/l", PowerDensityUnit.MicrowattPerLiter)]
        [InlineData("en-US", "mW/ft³", PowerDensityUnit.MilliwattPerCubicFoot)]
        [InlineData("en-US", "mW/in³", PowerDensityUnit.MilliwattPerCubicInch)]
        [InlineData("en-US", "mW/m³", PowerDensityUnit.MilliwattPerCubicMeter)]
        [InlineData("en-US", "mW/l", PowerDensityUnit.MilliwattPerLiter)]
        [InlineData("en-US", "nW/ft³", PowerDensityUnit.NanowattPerCubicFoot)]
        [InlineData("en-US", "nW/in³", PowerDensityUnit.NanowattPerCubicInch)]
        [InlineData("en-US", "nW/m³", PowerDensityUnit.NanowattPerCubicMeter)]
        [InlineData("en-US", "nW/l", PowerDensityUnit.NanowattPerLiter)]
        [InlineData("en-US", "pW/ft³", PowerDensityUnit.PicowattPerCubicFoot)]
        [InlineData("en-US", "pW/in³", PowerDensityUnit.PicowattPerCubicInch)]
        [InlineData("en-US", "pW/m³", PowerDensityUnit.PicowattPerCubicMeter)]
        [InlineData("en-US", "pW/l", PowerDensityUnit.PicowattPerLiter)]
        [InlineData("en-US", "TW/ft³", PowerDensityUnit.TerawattPerCubicFoot)]
        [InlineData("en-US", "TW/in³", PowerDensityUnit.TerawattPerCubicInch)]
        [InlineData("en-US", "TW/m³", PowerDensityUnit.TerawattPerCubicMeter)]
        [InlineData("en-US", "TW/l", PowerDensityUnit.TerawattPerLiter)]
        [InlineData("en-US", "W/ft³", PowerDensityUnit.WattPerCubicFoot)]
        [InlineData("en-US", "W/in³", PowerDensityUnit.WattPerCubicInch)]
        [InlineData("en-US", "W/m³", PowerDensityUnit.WattPerCubicMeter)]
        [InlineData("en-US", "W/l", PowerDensityUnit.WattPerLiter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, PowerDensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(PowerDensity.TryParseUnit(abbreviation, out PowerDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "daW/ft³", PowerDensityUnit.DecawattPerCubicFoot)]
        [InlineData("en-US", "daW/in³", PowerDensityUnit.DecawattPerCubicInch)]
        [InlineData("en-US", "daW/m³", PowerDensityUnit.DecawattPerCubicMeter)]
        [InlineData("en-US", "daW/l", PowerDensityUnit.DecawattPerLiter)]
        [InlineData("en-US", "dW/ft³", PowerDensityUnit.DeciwattPerCubicFoot)]
        [InlineData("en-US", "dW/in³", PowerDensityUnit.DeciwattPerCubicInch)]
        [InlineData("en-US", "dW/m³", PowerDensityUnit.DeciwattPerCubicMeter)]
        [InlineData("en-US", "dW/l", PowerDensityUnit.DeciwattPerLiter)]
        [InlineData("en-US", "GW/ft³", PowerDensityUnit.GigawattPerCubicFoot)]
        [InlineData("en-US", "GW/in³", PowerDensityUnit.GigawattPerCubicInch)]
        [InlineData("en-US", "GW/m³", PowerDensityUnit.GigawattPerCubicMeter)]
        [InlineData("en-US", "GW/l", PowerDensityUnit.GigawattPerLiter)]
        [InlineData("en-US", "kW/ft³", PowerDensityUnit.KilowattPerCubicFoot)]
        [InlineData("en-US", "kW/in³", PowerDensityUnit.KilowattPerCubicInch)]
        [InlineData("en-US", "kW/m³", PowerDensityUnit.KilowattPerCubicMeter)]
        [InlineData("en-US", "kW/l", PowerDensityUnit.KilowattPerLiter)]
        [InlineData("en-US", "MW/ft³", PowerDensityUnit.MegawattPerCubicFoot)]
        [InlineData("en-US", "MW/in³", PowerDensityUnit.MegawattPerCubicInch)]
        [InlineData("en-US", "MW/m³", PowerDensityUnit.MegawattPerCubicMeter)]
        [InlineData("en-US", "MW/l", PowerDensityUnit.MegawattPerLiter)]
        [InlineData("en-US", "µW/ft³", PowerDensityUnit.MicrowattPerCubicFoot)]
        [InlineData("en-US", "µW/in³", PowerDensityUnit.MicrowattPerCubicInch)]
        [InlineData("en-US", "µW/m³", PowerDensityUnit.MicrowattPerCubicMeter)]
        [InlineData("en-US", "µW/l", PowerDensityUnit.MicrowattPerLiter)]
        [InlineData("en-US", "mW/ft³", PowerDensityUnit.MilliwattPerCubicFoot)]
        [InlineData("en-US", "mW/in³", PowerDensityUnit.MilliwattPerCubicInch)]
        [InlineData("en-US", "mW/m³", PowerDensityUnit.MilliwattPerCubicMeter)]
        [InlineData("en-US", "mW/l", PowerDensityUnit.MilliwattPerLiter)]
        [InlineData("en-US", "nW/ft³", PowerDensityUnit.NanowattPerCubicFoot)]
        [InlineData("en-US", "nW/in³", PowerDensityUnit.NanowattPerCubicInch)]
        [InlineData("en-US", "nW/m³", PowerDensityUnit.NanowattPerCubicMeter)]
        [InlineData("en-US", "nW/l", PowerDensityUnit.NanowattPerLiter)]
        [InlineData("en-US", "pW/ft³", PowerDensityUnit.PicowattPerCubicFoot)]
        [InlineData("en-US", "pW/in³", PowerDensityUnit.PicowattPerCubicInch)]
        [InlineData("en-US", "pW/m³", PowerDensityUnit.PicowattPerCubicMeter)]
        [InlineData("en-US", "pW/l", PowerDensityUnit.PicowattPerLiter)]
        [InlineData("en-US", "TW/ft³", PowerDensityUnit.TerawattPerCubicFoot)]
        [InlineData("en-US", "TW/in³", PowerDensityUnit.TerawattPerCubicInch)]
        [InlineData("en-US", "TW/m³", PowerDensityUnit.TerawattPerCubicMeter)]
        [InlineData("en-US", "TW/l", PowerDensityUnit.TerawattPerLiter)]
        [InlineData("en-US", "W/ft³", PowerDensityUnit.WattPerCubicFoot)]
        [InlineData("en-US", "W/in³", PowerDensityUnit.WattPerCubicInch)]
        [InlineData("en-US", "W/m³", PowerDensityUnit.WattPerCubicMeter)]
        [InlineData("en-US", "W/l", PowerDensityUnit.WattPerLiter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, PowerDensityUnit expectedUnit)
        {
            Assert.True(PowerDensity.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out PowerDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(PowerDensityUnit unit)
        {
            var inBaseUnits = PowerDensity.From(1.0, PowerDensity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(PowerDensityUnit unit)
        {
            var quantity = PowerDensity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(PowerDensityUnit unit)
        {
            Assert.All(PowerDensity.Units.Where(u => u != PowerDensity.BaseUnit), fromUnit =>
            {
                var quantity = PowerDensity.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(PowerDensityUnit unit)
        {
            var quantity = default(PowerDensity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(PowerDensityUnit unit)
        {
            var quantity = PowerDensity.From(3, PowerDensity.BaseUnit);
            PowerDensity expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<PowerDensityUnit> quantityToConvert = quantity;
                IQuantity<PowerDensityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            PowerDensity wattpercubicmeter = PowerDensity.FromWattsPerCubicMeter(1);
            AssertEx.EqualTolerance(1, PowerDensity.FromDecawattsPerCubicFoot(wattpercubicmeter.DecawattsPerCubicFoot).WattsPerCubicMeter, DecawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromDecawattsPerCubicInch(wattpercubicmeter.DecawattsPerCubicInch).WattsPerCubicMeter, DecawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromDecawattsPerCubicMeter(wattpercubicmeter.DecawattsPerCubicMeter).WattsPerCubicMeter, DecawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromDecawattsPerLiter(wattpercubicmeter.DecawattsPerLiter).WattsPerCubicMeter, DecawattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromDeciwattsPerCubicFoot(wattpercubicmeter.DeciwattsPerCubicFoot).WattsPerCubicMeter, DeciwattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromDeciwattsPerCubicInch(wattpercubicmeter.DeciwattsPerCubicInch).WattsPerCubicMeter, DeciwattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromDeciwattsPerCubicMeter(wattpercubicmeter.DeciwattsPerCubicMeter).WattsPerCubicMeter, DeciwattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromDeciwattsPerLiter(wattpercubicmeter.DeciwattsPerLiter).WattsPerCubicMeter, DeciwattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromGigawattsPerCubicFoot(wattpercubicmeter.GigawattsPerCubicFoot).WattsPerCubicMeter, GigawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromGigawattsPerCubicInch(wattpercubicmeter.GigawattsPerCubicInch).WattsPerCubicMeter, GigawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromGigawattsPerCubicMeter(wattpercubicmeter.GigawattsPerCubicMeter).WattsPerCubicMeter, GigawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromGigawattsPerLiter(wattpercubicmeter.GigawattsPerLiter).WattsPerCubicMeter, GigawattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromKilowattsPerCubicFoot(wattpercubicmeter.KilowattsPerCubicFoot).WattsPerCubicMeter, KilowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromKilowattsPerCubicInch(wattpercubicmeter.KilowattsPerCubicInch).WattsPerCubicMeter, KilowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromKilowattsPerCubicMeter(wattpercubicmeter.KilowattsPerCubicMeter).WattsPerCubicMeter, KilowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromKilowattsPerLiter(wattpercubicmeter.KilowattsPerLiter).WattsPerCubicMeter, KilowattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMegawattsPerCubicFoot(wattpercubicmeter.MegawattsPerCubicFoot).WattsPerCubicMeter, MegawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMegawattsPerCubicInch(wattpercubicmeter.MegawattsPerCubicInch).WattsPerCubicMeter, MegawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMegawattsPerCubicMeter(wattpercubicmeter.MegawattsPerCubicMeter).WattsPerCubicMeter, MegawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMegawattsPerLiter(wattpercubicmeter.MegawattsPerLiter).WattsPerCubicMeter, MegawattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMicrowattsPerCubicFoot(wattpercubicmeter.MicrowattsPerCubicFoot).WattsPerCubicMeter, MicrowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMicrowattsPerCubicInch(wattpercubicmeter.MicrowattsPerCubicInch).WattsPerCubicMeter, MicrowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMicrowattsPerCubicMeter(wattpercubicmeter.MicrowattsPerCubicMeter).WattsPerCubicMeter, MicrowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMicrowattsPerLiter(wattpercubicmeter.MicrowattsPerLiter).WattsPerCubicMeter, MicrowattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMilliwattsPerCubicFoot(wattpercubicmeter.MilliwattsPerCubicFoot).WattsPerCubicMeter, MilliwattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMilliwattsPerCubicInch(wattpercubicmeter.MilliwattsPerCubicInch).WattsPerCubicMeter, MilliwattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMilliwattsPerCubicMeter(wattpercubicmeter.MilliwattsPerCubicMeter).WattsPerCubicMeter, MilliwattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromMilliwattsPerLiter(wattpercubicmeter.MilliwattsPerLiter).WattsPerCubicMeter, MilliwattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromNanowattsPerCubicFoot(wattpercubicmeter.NanowattsPerCubicFoot).WattsPerCubicMeter, NanowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromNanowattsPerCubicInch(wattpercubicmeter.NanowattsPerCubicInch).WattsPerCubicMeter, NanowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromNanowattsPerCubicMeter(wattpercubicmeter.NanowattsPerCubicMeter).WattsPerCubicMeter, NanowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromNanowattsPerLiter(wattpercubicmeter.NanowattsPerLiter).WattsPerCubicMeter, NanowattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromPicowattsPerCubicFoot(wattpercubicmeter.PicowattsPerCubicFoot).WattsPerCubicMeter, PicowattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromPicowattsPerCubicInch(wattpercubicmeter.PicowattsPerCubicInch).WattsPerCubicMeter, PicowattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromPicowattsPerCubicMeter(wattpercubicmeter.PicowattsPerCubicMeter).WattsPerCubicMeter, PicowattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromPicowattsPerLiter(wattpercubicmeter.PicowattsPerLiter).WattsPerCubicMeter, PicowattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromTerawattsPerCubicFoot(wattpercubicmeter.TerawattsPerCubicFoot).WattsPerCubicMeter, TerawattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromTerawattsPerCubicInch(wattpercubicmeter.TerawattsPerCubicInch).WattsPerCubicMeter, TerawattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromTerawattsPerCubicMeter(wattpercubicmeter.TerawattsPerCubicMeter).WattsPerCubicMeter, TerawattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromTerawattsPerLiter(wattpercubicmeter.TerawattsPerLiter).WattsPerCubicMeter, TerawattsPerLiterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromWattsPerCubicFoot(wattpercubicmeter.WattsPerCubicFoot).WattsPerCubicMeter, WattsPerCubicFootTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromWattsPerCubicInch(wattpercubicmeter.WattsPerCubicInch).WattsPerCubicMeter, WattsPerCubicInchTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromWattsPerCubicMeter(wattpercubicmeter.WattsPerCubicMeter).WattsPerCubicMeter, WattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(1, PowerDensity.FromWattsPerLiter(wattpercubicmeter.WattsPerLiter).WattsPerCubicMeter, WattsPerLiterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            PowerDensity v = PowerDensity.FromWattsPerCubicMeter(1);
            AssertEx.EqualTolerance(-1, -v.WattsPerCubicMeter, WattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (PowerDensity.FromWattsPerCubicMeter(3)-v).WattsPerCubicMeter, WattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).WattsPerCubicMeter, WattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).WattsPerCubicMeter, WattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).WattsPerCubicMeter, WattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, (PowerDensity.FromWattsPerCubicMeter(10)/5).WattsPerCubicMeter, WattsPerCubicMeterTolerance);
            AssertEx.EqualTolerance(2, PowerDensity.FromWattsPerCubicMeter(10)/PowerDensity.FromWattsPerCubicMeter(5), WattsPerCubicMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            PowerDensity oneWattPerCubicMeter = PowerDensity.FromWattsPerCubicMeter(1);
            PowerDensity twoWattsPerCubicMeter = PowerDensity.FromWattsPerCubicMeter(2);

            Assert.True(oneWattPerCubicMeter < twoWattsPerCubicMeter);
            Assert.True(oneWattPerCubicMeter <= twoWattsPerCubicMeter);
            Assert.True(twoWattsPerCubicMeter > oneWattPerCubicMeter);
            Assert.True(twoWattsPerCubicMeter >= oneWattPerCubicMeter);

            Assert.False(oneWattPerCubicMeter > twoWattsPerCubicMeter);
            Assert.False(oneWattPerCubicMeter >= twoWattsPerCubicMeter);
            Assert.False(twoWattsPerCubicMeter < oneWattPerCubicMeter);
            Assert.False(twoWattsPerCubicMeter <= oneWattPerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            PowerDensity wattpercubicmeter = PowerDensity.FromWattsPerCubicMeter(1);
            Assert.Equal(0, wattpercubicmeter.CompareTo(wattpercubicmeter));
            Assert.True(wattpercubicmeter.CompareTo(PowerDensity.Zero) > 0);
            Assert.True(PowerDensity.Zero.CompareTo(wattpercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            PowerDensity wattpercubicmeter = PowerDensity.FromWattsPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => wattpercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            PowerDensity wattpercubicmeter = PowerDensity.FromWattsPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => wattpercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, PowerDensityUnit.WattPerCubicMeter, 1, PowerDensityUnit.WattPerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, PowerDensityUnit.WattPerCubicMeter, 2, PowerDensityUnit.WattPerCubicMeter, false)] // Different value.
        [InlineData(2, PowerDensityUnit.WattPerCubicMeter, 1, PowerDensityUnit.DecawattPerCubicFoot, false)] // Different value and unit.
        [InlineData(1, PowerDensityUnit.WattPerCubicMeter, 1, PowerDensityUnit.DecawattPerCubicFoot, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, PowerDensityUnit unitA, double valueB, PowerDensityUnit unitB, bool expectEqual)
        {
            var a = new PowerDensity(valueA, unitA);
            var b = new PowerDensity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = PowerDensity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = PowerDensity.FromWattsPerCubicMeter(1);
            Assert.True(v.Equals(PowerDensity.FromWattsPerCubicMeter(1), WattsPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(PowerDensity.Zero, WattsPerCubicMeterTolerance, ComparisonType.Relative));
            Assert.True(PowerDensity.FromWattsPerCubicMeter(100).Equals(PowerDensity.FromWattsPerCubicMeter(120), 0.3, ComparisonType.Relative));
            Assert.False(PowerDensity.FromWattsPerCubicMeter(100).Equals(PowerDensity.FromWattsPerCubicMeter(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = PowerDensity.FromWattsPerCubicMeter(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(PowerDensity.FromWattsPerCubicMeter(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            PowerDensity wattpercubicmeter = PowerDensity.FromWattsPerCubicMeter(1);
            Assert.False(wattpercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            PowerDensity wattpercubicmeter = PowerDensity.FromWattsPerCubicMeter(1);
            Assert.False(wattpercubicmeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelpers.GetValues<PowerDensityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(PowerDensity.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 daW/ft³", new PowerDensity(1, PowerDensityUnit.DecawattPerCubicFoot).ToString());
            Assert.Equal("1 daW/in³", new PowerDensity(1, PowerDensityUnit.DecawattPerCubicInch).ToString());
            Assert.Equal("1 daW/m³", new PowerDensity(1, PowerDensityUnit.DecawattPerCubicMeter).ToString());
            Assert.Equal("1 daW/l", new PowerDensity(1, PowerDensityUnit.DecawattPerLiter).ToString());
            Assert.Equal("1 dW/ft³", new PowerDensity(1, PowerDensityUnit.DeciwattPerCubicFoot).ToString());
            Assert.Equal("1 dW/in³", new PowerDensity(1, PowerDensityUnit.DeciwattPerCubicInch).ToString());
            Assert.Equal("1 dW/m³", new PowerDensity(1, PowerDensityUnit.DeciwattPerCubicMeter).ToString());
            Assert.Equal("1 dW/l", new PowerDensity(1, PowerDensityUnit.DeciwattPerLiter).ToString());
            Assert.Equal("1 GW/ft³", new PowerDensity(1, PowerDensityUnit.GigawattPerCubicFoot).ToString());
            Assert.Equal("1 GW/in³", new PowerDensity(1, PowerDensityUnit.GigawattPerCubicInch).ToString());
            Assert.Equal("1 GW/m³", new PowerDensity(1, PowerDensityUnit.GigawattPerCubicMeter).ToString());
            Assert.Equal("1 GW/l", new PowerDensity(1, PowerDensityUnit.GigawattPerLiter).ToString());
            Assert.Equal("1 kW/ft³", new PowerDensity(1, PowerDensityUnit.KilowattPerCubicFoot).ToString());
            Assert.Equal("1 kW/in³", new PowerDensity(1, PowerDensityUnit.KilowattPerCubicInch).ToString());
            Assert.Equal("1 kW/m³", new PowerDensity(1, PowerDensityUnit.KilowattPerCubicMeter).ToString());
            Assert.Equal("1 kW/l", new PowerDensity(1, PowerDensityUnit.KilowattPerLiter).ToString());
            Assert.Equal("1 MW/ft³", new PowerDensity(1, PowerDensityUnit.MegawattPerCubicFoot).ToString());
            Assert.Equal("1 MW/in³", new PowerDensity(1, PowerDensityUnit.MegawattPerCubicInch).ToString());
            Assert.Equal("1 MW/m³", new PowerDensity(1, PowerDensityUnit.MegawattPerCubicMeter).ToString());
            Assert.Equal("1 MW/l", new PowerDensity(1, PowerDensityUnit.MegawattPerLiter).ToString());
            Assert.Equal("1 µW/ft³", new PowerDensity(1, PowerDensityUnit.MicrowattPerCubicFoot).ToString());
            Assert.Equal("1 µW/in³", new PowerDensity(1, PowerDensityUnit.MicrowattPerCubicInch).ToString());
            Assert.Equal("1 µW/m³", new PowerDensity(1, PowerDensityUnit.MicrowattPerCubicMeter).ToString());
            Assert.Equal("1 µW/l", new PowerDensity(1, PowerDensityUnit.MicrowattPerLiter).ToString());
            Assert.Equal("1 mW/ft³", new PowerDensity(1, PowerDensityUnit.MilliwattPerCubicFoot).ToString());
            Assert.Equal("1 mW/in³", new PowerDensity(1, PowerDensityUnit.MilliwattPerCubicInch).ToString());
            Assert.Equal("1 mW/m³", new PowerDensity(1, PowerDensityUnit.MilliwattPerCubicMeter).ToString());
            Assert.Equal("1 mW/l", new PowerDensity(1, PowerDensityUnit.MilliwattPerLiter).ToString());
            Assert.Equal("1 nW/ft³", new PowerDensity(1, PowerDensityUnit.NanowattPerCubicFoot).ToString());
            Assert.Equal("1 nW/in³", new PowerDensity(1, PowerDensityUnit.NanowattPerCubicInch).ToString());
            Assert.Equal("1 nW/m³", new PowerDensity(1, PowerDensityUnit.NanowattPerCubicMeter).ToString());
            Assert.Equal("1 nW/l", new PowerDensity(1, PowerDensityUnit.NanowattPerLiter).ToString());
            Assert.Equal("1 pW/ft³", new PowerDensity(1, PowerDensityUnit.PicowattPerCubicFoot).ToString());
            Assert.Equal("1 pW/in³", new PowerDensity(1, PowerDensityUnit.PicowattPerCubicInch).ToString());
            Assert.Equal("1 pW/m³", new PowerDensity(1, PowerDensityUnit.PicowattPerCubicMeter).ToString());
            Assert.Equal("1 pW/l", new PowerDensity(1, PowerDensityUnit.PicowattPerLiter).ToString());
            Assert.Equal("1 TW/ft³", new PowerDensity(1, PowerDensityUnit.TerawattPerCubicFoot).ToString());
            Assert.Equal("1 TW/in³", new PowerDensity(1, PowerDensityUnit.TerawattPerCubicInch).ToString());
            Assert.Equal("1 TW/m³", new PowerDensity(1, PowerDensityUnit.TerawattPerCubicMeter).ToString());
            Assert.Equal("1 TW/l", new PowerDensity(1, PowerDensityUnit.TerawattPerLiter).ToString());
            Assert.Equal("1 W/ft³", new PowerDensity(1, PowerDensityUnit.WattPerCubicFoot).ToString());
            Assert.Equal("1 W/in³", new PowerDensity(1, PowerDensityUnit.WattPerCubicInch).ToString());
            Assert.Equal("1 W/m³", new PowerDensity(1, PowerDensityUnit.WattPerCubicMeter).ToString());
            Assert.Equal("1 W/l", new PowerDensity(1, PowerDensityUnit.WattPerLiter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 daW/ft³", new PowerDensity(1, PowerDensityUnit.DecawattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 daW/in³", new PowerDensity(1, PowerDensityUnit.DecawattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 daW/m³", new PowerDensity(1, PowerDensityUnit.DecawattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 daW/l", new PowerDensity(1, PowerDensityUnit.DecawattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 dW/ft³", new PowerDensity(1, PowerDensityUnit.DeciwattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 dW/in³", new PowerDensity(1, PowerDensityUnit.DeciwattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 dW/m³", new PowerDensity(1, PowerDensityUnit.DeciwattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 dW/l", new PowerDensity(1, PowerDensityUnit.DeciwattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 GW/ft³", new PowerDensity(1, PowerDensityUnit.GigawattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 GW/in³", new PowerDensity(1, PowerDensityUnit.GigawattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 GW/m³", new PowerDensity(1, PowerDensityUnit.GigawattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 GW/l", new PowerDensity(1, PowerDensityUnit.GigawattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 kW/ft³", new PowerDensity(1, PowerDensityUnit.KilowattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 kW/in³", new PowerDensity(1, PowerDensityUnit.KilowattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 kW/m³", new PowerDensity(1, PowerDensityUnit.KilowattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kW/l", new PowerDensity(1, PowerDensityUnit.KilowattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 MW/ft³", new PowerDensity(1, PowerDensityUnit.MegawattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 MW/in³", new PowerDensity(1, PowerDensityUnit.MegawattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 MW/m³", new PowerDensity(1, PowerDensityUnit.MegawattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 MW/l", new PowerDensity(1, PowerDensityUnit.MegawattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 µW/ft³", new PowerDensity(1, PowerDensityUnit.MicrowattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 µW/in³", new PowerDensity(1, PowerDensityUnit.MicrowattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 µW/m³", new PowerDensity(1, PowerDensityUnit.MicrowattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µW/l", new PowerDensity(1, PowerDensityUnit.MicrowattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 mW/ft³", new PowerDensity(1, PowerDensityUnit.MilliwattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 mW/in³", new PowerDensity(1, PowerDensityUnit.MilliwattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 mW/m³", new PowerDensity(1, PowerDensityUnit.MilliwattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mW/l", new PowerDensity(1, PowerDensityUnit.MilliwattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 nW/ft³", new PowerDensity(1, PowerDensityUnit.NanowattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 nW/in³", new PowerDensity(1, PowerDensityUnit.NanowattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 nW/m³", new PowerDensity(1, PowerDensityUnit.NanowattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 nW/l", new PowerDensity(1, PowerDensityUnit.NanowattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 pW/ft³", new PowerDensity(1, PowerDensityUnit.PicowattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 pW/in³", new PowerDensity(1, PowerDensityUnit.PicowattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 pW/m³", new PowerDensity(1, PowerDensityUnit.PicowattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 pW/l", new PowerDensity(1, PowerDensityUnit.PicowattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 TW/ft³", new PowerDensity(1, PowerDensityUnit.TerawattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 TW/in³", new PowerDensity(1, PowerDensityUnit.TerawattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 TW/m³", new PowerDensity(1, PowerDensityUnit.TerawattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 TW/l", new PowerDensity(1, PowerDensityUnit.TerawattPerLiter).ToString(swedishCulture));
            Assert.Equal("1 W/ft³", new PowerDensity(1, PowerDensityUnit.WattPerCubicFoot).ToString(swedishCulture));
            Assert.Equal("1 W/in³", new PowerDensity(1, PowerDensityUnit.WattPerCubicInch).ToString(swedishCulture));
            Assert.Equal("1 W/m³", new PowerDensity(1, PowerDensityUnit.WattPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 W/l", new PowerDensity(1, PowerDensityUnit.WattPerLiter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 W/m³", new PowerDensity(0.123456, PowerDensityUnit.WattPerCubicMeter).ToString("s1"));
            Assert.Equal("0.12 W/m³", new PowerDensity(0.123456, PowerDensityUnit.WattPerCubicMeter).ToString("s2"));
            Assert.Equal("0.123 W/m³", new PowerDensity(0.123456, PowerDensityUnit.WattPerCubicMeter).ToString("s3"));
            Assert.Equal("0.1235 W/m³", new PowerDensity(0.123456, PowerDensityUnit.WattPerCubicMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 W/m³", new PowerDensity(0.123456, PowerDensityUnit.WattPerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 W/m³", new PowerDensity(0.123456, PowerDensityUnit.WattPerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 W/m³", new PowerDensity(0.123456, PowerDensityUnit.WattPerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 W/m³", new PowerDensity(0.123456, PowerDensityUnit.WattPerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = PowerDensity.FromWattsPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = PowerDensity.FromWattsPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = PowerDensity.FromWattsPerCubicMeter(1.0);
            Assert.Equal(new {PowerDensity.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = PowerDensity.FromWattsPerCubicMeter(value);
            Assert.Equal(PowerDensity.FromWattsPerCubicMeter(-value), -quantity);
        }
    }
}
