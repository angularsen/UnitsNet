//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Molarity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MolarityTestsBase : QuantityTestsBase
    {
        protected abstract double CentimolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double DecimolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double FemtomolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double KilomolesPerCubicMeterInOneMolePerCubicMeter { get; }
        protected abstract double MicromolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double MillimolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double MolesPerCubicMeterInOneMolePerCubicMeter { get; }
        protected abstract double MolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double NanomolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double PicomolesPerLiterInOneMolePerCubicMeter { get; }
        protected abstract double PoundMolesPerCubicFootInOneMolePerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double DecimolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double FemtomolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double KilomolesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MicromolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MillimolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double MolesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double NanomolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PicomolesPerLiterTolerance { get { return 1e-5; } }
        protected virtual double PoundMolesPerCubicFootTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MolarityUnit unit)
        {
            return unit switch
            {
                MolarityUnit.CentimolePerLiter => (CentimolesPerLiterInOneMolePerCubicMeter, CentimolesPerLiterTolerance),
                MolarityUnit.DecimolePerLiter => (DecimolesPerLiterInOneMolePerCubicMeter, DecimolesPerLiterTolerance),
                MolarityUnit.FemtomolePerLiter => (FemtomolesPerLiterInOneMolePerCubicMeter, FemtomolesPerLiterTolerance),
                MolarityUnit.KilomolePerCubicMeter => (KilomolesPerCubicMeterInOneMolePerCubicMeter, KilomolesPerCubicMeterTolerance),
                MolarityUnit.MicromolePerLiter => (MicromolesPerLiterInOneMolePerCubicMeter, MicromolesPerLiterTolerance),
                MolarityUnit.MillimolePerLiter => (MillimolesPerLiterInOneMolePerCubicMeter, MillimolesPerLiterTolerance),
                MolarityUnit.MolePerCubicMeter => (MolesPerCubicMeterInOneMolePerCubicMeter, MolesPerCubicMeterTolerance),
                MolarityUnit.MolePerLiter => (MolesPerLiterInOneMolePerCubicMeter, MolesPerLiterTolerance),
                MolarityUnit.NanomolePerLiter => (NanomolesPerLiterInOneMolePerCubicMeter, NanomolesPerLiterTolerance),
                MolarityUnit.PicomolePerLiter => (PicomolesPerLiterInOneMolePerCubicMeter, PicomolesPerLiterTolerance),
                MolarityUnit.PoundMolePerCubicFoot => (PoundMolesPerCubicFootInOneMolePerCubicMeter, PoundMolesPerCubicFootTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MolarityUnit.CentimolePerLiter },
            new object[] { MolarityUnit.DecimolePerLiter },
            new object[] { MolarityUnit.FemtomolePerLiter },
            new object[] { MolarityUnit.KilomolePerCubicMeter },
            new object[] { MolarityUnit.MicromolePerLiter },
            new object[] { MolarityUnit.MillimolePerLiter },
            new object[] { MolarityUnit.MolePerCubicMeter },
            new object[] { MolarityUnit.MolePerLiter },
            new object[] { MolarityUnit.NanomolePerLiter },
            new object[] { MolarityUnit.PicomolePerLiter },
            new object[] { MolarityUnit.PoundMolePerCubicFoot },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Molarity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MolarityUnit.MolePerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Molarity(double.PositiveInfinity, MolarityUnit.MolePerCubicMeter));
            var exception2 = Record.Exception(() => new Molarity(double.NegativeInfinity, MolarityUnit.MolePerCubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Molarity(double.NaN, MolarityUnit.MolePerCubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Molarity(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Molarity(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Molarity(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Molarity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            MolarityUnit[] unitsOrderedByName = EnumHelper.GetValues<MolarityUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Molarity(1, MolarityUnit.MolePerCubicMeter);

            QuantityInfo<Molarity, MolarityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Molarity", quantityInfo.Name);
            Assert.Equal(Molarity.Zero, quantityInfo.Zero);
            Assert.Equal(Molarity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Molarity.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<MolarityUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void MolarityInfo_CreateWithCustomUnitInfos()
        {
            MolarityUnit[] expectedUnits = [MolarityUnit.MolePerCubicMeter];

            Molarity.MolarityInfo quantityInfo = Molarity.MolarityInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Molarity", quantityInfo.Name);
            Assert.Equal(Molarity.Zero, quantityInfo.Zero);
            Assert.Equal(Molarity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void MolePerCubicMeterToMolarityUnits()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            AssertEx.EqualTolerance(CentimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.CentimolesPerLiter, CentimolesPerLiterTolerance);
            AssertEx.EqualTolerance(DecimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.DecimolesPerLiter, DecimolesPerLiterTolerance);
            AssertEx.EqualTolerance(FemtomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.FemtomolesPerLiter, FemtomolesPerLiterTolerance);
            AssertEx.EqualTolerance(KilomolesPerCubicMeterInOneMolePerCubicMeter, molepercubicmeter.KilomolesPerCubicMeter, KilomolesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicromolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.MicromolesPerLiter, MicromolesPerLiterTolerance);
            AssertEx.EqualTolerance(MillimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.MillimolesPerLiter, MillimolesPerLiterTolerance);
            AssertEx.EqualTolerance(MolesPerCubicMeterInOneMolePerCubicMeter, molepercubicmeter.MolesPerCubicMeter, MolesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.MolesPerLiter, MolesPerLiterTolerance);
            AssertEx.EqualTolerance(NanomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.NanomolesPerLiter, NanomolesPerLiterTolerance);
            AssertEx.EqualTolerance(PicomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.PicomolesPerLiter, PicomolesPerLiterTolerance);
            AssertEx.EqualTolerance(PoundMolesPerCubicFootInOneMolePerCubicMeter, molepercubicmeter.PoundMolesPerCubicFoot, PoundMolesPerCubicFootTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<MolarityUnit>(), unit =>
            {
                var quantity = Molarity.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromMolesPerCubicMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Molarity.FromMolesPerCubicMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Molarity.FromMolesPerCubicMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromMolesPerCubicMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Molarity.FromMolesPerCubicMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            AssertEx.EqualTolerance(CentimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.CentimolePerLiter), CentimolesPerLiterTolerance);
            AssertEx.EqualTolerance(DecimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.DecimolePerLiter), DecimolesPerLiterTolerance);
            AssertEx.EqualTolerance(FemtomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.FemtomolePerLiter), FemtomolesPerLiterTolerance);
            AssertEx.EqualTolerance(KilomolesPerCubicMeterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.KilomolePerCubicMeter), KilomolesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MicromolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.MicromolePerLiter), MicromolesPerLiterTolerance);
            AssertEx.EqualTolerance(MillimolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.MillimolePerLiter), MillimolesPerLiterTolerance);
            AssertEx.EqualTolerance(MolesPerCubicMeterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.MolePerCubicMeter), MolesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.MolePerLiter), MolesPerLiterTolerance);
            AssertEx.EqualTolerance(NanomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.NanomolePerLiter), NanomolesPerLiterTolerance);
            AssertEx.EqualTolerance(PicomolesPerLiterInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.PicomolePerLiter), PicomolesPerLiterTolerance);
            AssertEx.EqualTolerance(PoundMolesPerCubicFootInOneMolePerCubicMeter, molepercubicmeter.As(MolarityUnit.PoundMolePerCubicFoot), PoundMolesPerCubicFootTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Molarity.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
            var expectedValue = quantity.As(Molarity.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
            var expectedUnit = Molarity.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Molarity quantityToConvert = quantity;

                Molarity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<MolarityUnit> quantityToConvert = quantity;

                IQuantity<MolarityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<MolarityUnit> quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<MolarityUnit> quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Molarity(value: 1, unit: Molarity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cmol/l", MolarityUnit.CentimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 cM", MolarityUnit.CentimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 dmol/l", MolarityUnit.DecimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 dM", MolarityUnit.DecimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 fmol/l", MolarityUnit.FemtomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 fM", MolarityUnit.FemtomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 kmol/m³", MolarityUnit.KilomolePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 µmol/l", MolarityUnit.MicromolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 µM", MolarityUnit.MicromolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 mmol/l", MolarityUnit.MillimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 mM", MolarityUnit.MillimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 mol/m³", MolarityUnit.MolePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mol/l", MolarityUnit.MolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 M", MolarityUnit.MolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 nmol/l", MolarityUnit.NanomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 nM", MolarityUnit.NanomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 pmol/l", MolarityUnit.PicomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 pM", MolarityUnit.PicomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot, 4.2)]
        public void Parse(string culture, string quantityString, MolarityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Molarity.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 cmol/l", MolarityUnit.CentimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 cM", MolarityUnit.CentimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 dmol/l", MolarityUnit.DecimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 dM", MolarityUnit.DecimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 fmol/l", MolarityUnit.FemtomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 fM", MolarityUnit.FemtomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 kmol/m³", MolarityUnit.KilomolePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 µmol/l", MolarityUnit.MicromolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 µM", MolarityUnit.MicromolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 mmol/l", MolarityUnit.MillimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 mM", MolarityUnit.MillimolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 mol/m³", MolarityUnit.MolePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 mol/l", MolarityUnit.MolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 M", MolarityUnit.MolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 nmol/l", MolarityUnit.NanomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 nM", MolarityUnit.NanomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 pmol/l", MolarityUnit.PicomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 pM", MolarityUnit.PicomolePerLiter, 4.2)]
        [InlineData("en-US", "4.2 lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot, 4.2)]
        public void TryParse(string culture, string quantityString, MolarityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Molarity.TryParse(quantityString, out Molarity parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("cmol/l", MolarityUnit.CentimolePerLiter)]
        [InlineData("cM", MolarityUnit.CentimolePerLiter)]
        [InlineData("dmol/l", MolarityUnit.DecimolePerLiter)]
        [InlineData("dM", MolarityUnit.DecimolePerLiter)]
        [InlineData("fmol/l", MolarityUnit.FemtomolePerLiter)]
        [InlineData("fM", MolarityUnit.FemtomolePerLiter)]
        [InlineData("kmol/m³", MolarityUnit.KilomolePerCubicMeter)]
        [InlineData("µmol/l", MolarityUnit.MicromolePerLiter)]
        [InlineData("µM", MolarityUnit.MicromolePerLiter)]
        [InlineData("mmol/l", MolarityUnit.MillimolePerLiter)]
        [InlineData("mM", MolarityUnit.MillimolePerLiter)]
        [InlineData("mol/m³", MolarityUnit.MolePerCubicMeter)]
        [InlineData("mol/l", MolarityUnit.MolePerLiter)]
        [InlineData("M", MolarityUnit.MolePerLiter)]
        [InlineData("nmol/l", MolarityUnit.NanomolePerLiter)]
        [InlineData("nM", MolarityUnit.NanomolePerLiter)]
        [InlineData("pmol/l", MolarityUnit.PicomolePerLiter)]
        [InlineData("pM", MolarityUnit.PicomolePerLiter)]
        [InlineData("lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MolarityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            MolarityUnit parsedUnit = Molarity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cmol/l", MolarityUnit.CentimolePerLiter)]
        [InlineData("cM", MolarityUnit.CentimolePerLiter)]
        [InlineData("dmol/l", MolarityUnit.DecimolePerLiter)]
        [InlineData("dM", MolarityUnit.DecimolePerLiter)]
        [InlineData("fmol/l", MolarityUnit.FemtomolePerLiter)]
        [InlineData("fM", MolarityUnit.FemtomolePerLiter)]
        [InlineData("kmol/m³", MolarityUnit.KilomolePerCubicMeter)]
        [InlineData("µmol/l", MolarityUnit.MicromolePerLiter)]
        [InlineData("µM", MolarityUnit.MicromolePerLiter)]
        [InlineData("mmol/l", MolarityUnit.MillimolePerLiter)]
        [InlineData("mM", MolarityUnit.MillimolePerLiter)]
        [InlineData("mol/m³", MolarityUnit.MolePerCubicMeter)]
        [InlineData("mol/l", MolarityUnit.MolePerLiter)]
        [InlineData("M", MolarityUnit.MolePerLiter)]
        [InlineData("nmol/l", MolarityUnit.NanomolePerLiter)]
        [InlineData("nM", MolarityUnit.NanomolePerLiter)]
        [InlineData("pmol/l", MolarityUnit.PicomolePerLiter)]
        [InlineData("pM", MolarityUnit.PicomolePerLiter)]
        [InlineData("lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MolarityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            MolarityUnit parsedUnit = Molarity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cmol/l", MolarityUnit.CentimolePerLiter)]
        [InlineData("en-US", "cM", MolarityUnit.CentimolePerLiter)]
        [InlineData("en-US", "dmol/l", MolarityUnit.DecimolePerLiter)]
        [InlineData("en-US", "dM", MolarityUnit.DecimolePerLiter)]
        [InlineData("en-US", "fmol/l", MolarityUnit.FemtomolePerLiter)]
        [InlineData("en-US", "fM", MolarityUnit.FemtomolePerLiter)]
        [InlineData("en-US", "kmol/m³", MolarityUnit.KilomolePerCubicMeter)]
        [InlineData("en-US", "µmol/l", MolarityUnit.MicromolePerLiter)]
        [InlineData("en-US", "µM", MolarityUnit.MicromolePerLiter)]
        [InlineData("en-US", "mmol/l", MolarityUnit.MillimolePerLiter)]
        [InlineData("en-US", "mM", MolarityUnit.MillimolePerLiter)]
        [InlineData("en-US", "mol/m³", MolarityUnit.MolePerCubicMeter)]
        [InlineData("en-US", "mol/l", MolarityUnit.MolePerLiter)]
        [InlineData("en-US", "M", MolarityUnit.MolePerLiter)]
        [InlineData("en-US", "nmol/l", MolarityUnit.NanomolePerLiter)]
        [InlineData("en-US", "nM", MolarityUnit.NanomolePerLiter)]
        [InlineData("en-US", "pmol/l", MolarityUnit.PicomolePerLiter)]
        [InlineData("en-US", "pM", MolarityUnit.PicomolePerLiter)]
        [InlineData("en-US", "lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, MolarityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            MolarityUnit parsedUnit = Molarity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cmol/l", MolarityUnit.CentimolePerLiter)]
        [InlineData("en-US", "cM", MolarityUnit.CentimolePerLiter)]
        [InlineData("en-US", "dmol/l", MolarityUnit.DecimolePerLiter)]
        [InlineData("en-US", "dM", MolarityUnit.DecimolePerLiter)]
        [InlineData("en-US", "fmol/l", MolarityUnit.FemtomolePerLiter)]
        [InlineData("en-US", "fM", MolarityUnit.FemtomolePerLiter)]
        [InlineData("en-US", "kmol/m³", MolarityUnit.KilomolePerCubicMeter)]
        [InlineData("en-US", "µmol/l", MolarityUnit.MicromolePerLiter)]
        [InlineData("en-US", "µM", MolarityUnit.MicromolePerLiter)]
        [InlineData("en-US", "mmol/l", MolarityUnit.MillimolePerLiter)]
        [InlineData("en-US", "mM", MolarityUnit.MillimolePerLiter)]
        [InlineData("en-US", "mol/m³", MolarityUnit.MolePerCubicMeter)]
        [InlineData("en-US", "mol/l", MolarityUnit.MolePerLiter)]
        [InlineData("en-US", "M", MolarityUnit.MolePerLiter)]
        [InlineData("en-US", "nmol/l", MolarityUnit.NanomolePerLiter)]
        [InlineData("en-US", "nM", MolarityUnit.NanomolePerLiter)]
        [InlineData("en-US", "pmol/l", MolarityUnit.PicomolePerLiter)]
        [InlineData("en-US", "pM", MolarityUnit.PicomolePerLiter)]
        [InlineData("en-US", "lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, MolarityUnit expectedUnit)
        {
            MolarityUnit parsedUnit = Molarity.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cmol/l", MolarityUnit.CentimolePerLiter)]
        [InlineData("cM", MolarityUnit.CentimolePerLiter)]
        [InlineData("dmol/l", MolarityUnit.DecimolePerLiter)]
        [InlineData("dM", MolarityUnit.DecimolePerLiter)]
        [InlineData("fmol/l", MolarityUnit.FemtomolePerLiter)]
        [InlineData("fM", MolarityUnit.FemtomolePerLiter)]
        [InlineData("kmol/m³", MolarityUnit.KilomolePerCubicMeter)]
        [InlineData("µmol/l", MolarityUnit.MicromolePerLiter)]
        [InlineData("µM", MolarityUnit.MicromolePerLiter)]
        [InlineData("mmol/l", MolarityUnit.MillimolePerLiter)]
        [InlineData("mM", MolarityUnit.MillimolePerLiter)]
        [InlineData("mol/m³", MolarityUnit.MolePerCubicMeter)]
        [InlineData("mol/l", MolarityUnit.MolePerLiter)]
        [InlineData("M", MolarityUnit.MolePerLiter)]
        [InlineData("nmol/l", MolarityUnit.NanomolePerLiter)]
        [InlineData("nM", MolarityUnit.NanomolePerLiter)]
        [InlineData("pmol/l", MolarityUnit.PicomolePerLiter)]
        [InlineData("pM", MolarityUnit.PicomolePerLiter)]
        [InlineData("lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MolarityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Molarity.TryParseUnit(abbreviation, out MolarityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cmol/l", MolarityUnit.CentimolePerLiter)]
        [InlineData("cM", MolarityUnit.CentimolePerLiter)]
        [InlineData("dmol/l", MolarityUnit.DecimolePerLiter)]
        [InlineData("dM", MolarityUnit.DecimolePerLiter)]
        [InlineData("fmol/l", MolarityUnit.FemtomolePerLiter)]
        [InlineData("fM", MolarityUnit.FemtomolePerLiter)]
        [InlineData("kmol/m³", MolarityUnit.KilomolePerCubicMeter)]
        [InlineData("µmol/l", MolarityUnit.MicromolePerLiter)]
        [InlineData("µM", MolarityUnit.MicromolePerLiter)]
        [InlineData("mmol/l", MolarityUnit.MillimolePerLiter)]
        [InlineData("mM", MolarityUnit.MillimolePerLiter)]
        [InlineData("mol/m³", MolarityUnit.MolePerCubicMeter)]
        [InlineData("mol/l", MolarityUnit.MolePerLiter)]
        [InlineData("M", MolarityUnit.MolePerLiter)]
        [InlineData("nmol/l", MolarityUnit.NanomolePerLiter)]
        [InlineData("nM", MolarityUnit.NanomolePerLiter)]
        [InlineData("pmol/l", MolarityUnit.PicomolePerLiter)]
        [InlineData("pM", MolarityUnit.PicomolePerLiter)]
        [InlineData("lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MolarityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Molarity.TryParseUnit(abbreviation, out MolarityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cmol/l", MolarityUnit.CentimolePerLiter)]
        [InlineData("en-US", "cM", MolarityUnit.CentimolePerLiter)]
        [InlineData("en-US", "dmol/l", MolarityUnit.DecimolePerLiter)]
        [InlineData("en-US", "dM", MolarityUnit.DecimolePerLiter)]
        [InlineData("en-US", "fmol/l", MolarityUnit.FemtomolePerLiter)]
        [InlineData("en-US", "fM", MolarityUnit.FemtomolePerLiter)]
        [InlineData("en-US", "kmol/m³", MolarityUnit.KilomolePerCubicMeter)]
        [InlineData("en-US", "µmol/l", MolarityUnit.MicromolePerLiter)]
        [InlineData("en-US", "µM", MolarityUnit.MicromolePerLiter)]
        [InlineData("en-US", "mmol/l", MolarityUnit.MillimolePerLiter)]
        [InlineData("en-US", "mM", MolarityUnit.MillimolePerLiter)]
        [InlineData("en-US", "mol/m³", MolarityUnit.MolePerCubicMeter)]
        [InlineData("en-US", "mol/l", MolarityUnit.MolePerLiter)]
        [InlineData("en-US", "M", MolarityUnit.MolePerLiter)]
        [InlineData("en-US", "nmol/l", MolarityUnit.NanomolePerLiter)]
        [InlineData("en-US", "nM", MolarityUnit.NanomolePerLiter)]
        [InlineData("en-US", "pmol/l", MolarityUnit.PicomolePerLiter)]
        [InlineData("en-US", "pM", MolarityUnit.PicomolePerLiter)]
        [InlineData("en-US", "lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, MolarityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Molarity.TryParseUnit(abbreviation, out MolarityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cmol/l", MolarityUnit.CentimolePerLiter)]
        [InlineData("en-US", "cM", MolarityUnit.CentimolePerLiter)]
        [InlineData("en-US", "dmol/l", MolarityUnit.DecimolePerLiter)]
        [InlineData("en-US", "dM", MolarityUnit.DecimolePerLiter)]
        [InlineData("en-US", "fmol/l", MolarityUnit.FemtomolePerLiter)]
        [InlineData("en-US", "fM", MolarityUnit.FemtomolePerLiter)]
        [InlineData("en-US", "kmol/m³", MolarityUnit.KilomolePerCubicMeter)]
        [InlineData("en-US", "µmol/l", MolarityUnit.MicromolePerLiter)]
        [InlineData("en-US", "µM", MolarityUnit.MicromolePerLiter)]
        [InlineData("en-US", "mmol/l", MolarityUnit.MillimolePerLiter)]
        [InlineData("en-US", "mM", MolarityUnit.MillimolePerLiter)]
        [InlineData("en-US", "mol/m³", MolarityUnit.MolePerCubicMeter)]
        [InlineData("en-US", "mol/l", MolarityUnit.MolePerLiter)]
        [InlineData("en-US", "M", MolarityUnit.MolePerLiter)]
        [InlineData("en-US", "nmol/l", MolarityUnit.NanomolePerLiter)]
        [InlineData("en-US", "nM", MolarityUnit.NanomolePerLiter)]
        [InlineData("en-US", "pmol/l", MolarityUnit.PicomolePerLiter)]
        [InlineData("en-US", "pM", MolarityUnit.PicomolePerLiter)]
        [InlineData("en-US", "lbmol/ft³", MolarityUnit.PoundMolePerCubicFoot)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, MolarityUnit expectedUnit)
        {
            Assert.True(Molarity.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out MolarityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", MolarityUnit.CentimolePerLiter, "cmol/l")]
        [InlineData("en-US", MolarityUnit.DecimolePerLiter, "dmol/l")]
        [InlineData("en-US", MolarityUnit.FemtomolePerLiter, "fmol/l")]
        [InlineData("en-US", MolarityUnit.KilomolePerCubicMeter, "kmol/m³")]
        [InlineData("en-US", MolarityUnit.MicromolePerLiter, "µmol/l")]
        [InlineData("en-US", MolarityUnit.MillimolePerLiter, "mmol/l")]
        [InlineData("en-US", MolarityUnit.MolePerCubicMeter, "mol/m³")]
        [InlineData("en-US", MolarityUnit.MolePerLiter, "mol/l")]
        [InlineData("en-US", MolarityUnit.NanomolePerLiter, "nmol/l")]
        [InlineData("en-US", MolarityUnit.PicomolePerLiter, "pmol/l")]
        [InlineData("en-US", MolarityUnit.PoundMolePerCubicFoot, "lbmol/ft³")]
        public void GetAbbreviationForCulture(string culture, MolarityUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Molarity.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Molarity.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Molarity.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MolarityUnit unit)
        {
            var inBaseUnits = Molarity.From(1.0, Molarity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MolarityUnit unit)
        {
            var quantity = Molarity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MolarityUnit unit)
        {
            Assert.All(Molarity.Units.Where(u => u != Molarity.BaseUnit), fromUnit =>
            {
                var quantity = Molarity.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MolarityUnit unit)
        {
            var quantity = default(Molarity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(MolarityUnit unit)
        {
            var quantity = Molarity.From(3, Molarity.BaseUnit);
            Molarity expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<MolarityUnit> quantityToConvert = quantity;
                IQuantity<MolarityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(3);
            Assert.Equal(3, Molarity.FromCentimolesPerLiter(molepercubicmeter.CentimolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromDecimolesPerLiter(molepercubicmeter.DecimolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromFemtomolesPerLiter(molepercubicmeter.FemtomolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromKilomolesPerCubicMeter(molepercubicmeter.KilomolesPerCubicMeter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromMicromolesPerLiter(molepercubicmeter.MicromolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromMillimolesPerLiter(molepercubicmeter.MillimolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromMolesPerCubicMeter(molepercubicmeter.MolesPerCubicMeter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromMolesPerLiter(molepercubicmeter.MolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromNanomolesPerLiter(molepercubicmeter.NanomolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromPicomolesPerLiter(molepercubicmeter.PicomolesPerLiter).MolesPerCubicMeter);
            Assert.Equal(3, Molarity.FromPoundMolesPerCubicFoot(molepercubicmeter.PoundMolesPerCubicFoot).MolesPerCubicMeter);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Molarity v = Molarity.FromMolesPerCubicMeter(1);
            Assert.Equal(-1, -v.MolesPerCubicMeter);
            Assert.Equal(2, (Molarity.FromMolesPerCubicMeter(3) - v).MolesPerCubicMeter);
            Assert.Equal(2, (v + v).MolesPerCubicMeter);
            Assert.Equal(10, (v * 10).MolesPerCubicMeter);
            Assert.Equal(10, (10 * v).MolesPerCubicMeter);
            Assert.Equal(2, (Molarity.FromMolesPerCubicMeter(10) / 5).MolesPerCubicMeter);
            Assert.Equal(2, Molarity.FromMolesPerCubicMeter(10) / Molarity.FromMolesPerCubicMeter(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Molarity oneMolePerCubicMeter = Molarity.FromMolesPerCubicMeter(1);
            Molarity twoMolesPerCubicMeter = Molarity.FromMolesPerCubicMeter(2);

            Assert.True(oneMolePerCubicMeter < twoMolesPerCubicMeter);
            Assert.True(oneMolePerCubicMeter <= twoMolesPerCubicMeter);
            Assert.True(twoMolesPerCubicMeter > oneMolePerCubicMeter);
            Assert.True(twoMolesPerCubicMeter >= oneMolePerCubicMeter);

            Assert.False(oneMolePerCubicMeter > twoMolesPerCubicMeter);
            Assert.False(oneMolePerCubicMeter >= twoMolesPerCubicMeter);
            Assert.False(twoMolesPerCubicMeter < oneMolePerCubicMeter);
            Assert.False(twoMolesPerCubicMeter <= oneMolePerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.Equal(0, molepercubicmeter.CompareTo(molepercubicmeter));
            Assert.True(molepercubicmeter.CompareTo(Molarity.Zero) > 0);
            Assert.True(Molarity.Zero.CompareTo(molepercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => molepercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => molepercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MolarityUnit.MolePerCubicMeter, 1, MolarityUnit.MolePerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, MolarityUnit.MolePerCubicMeter, 2, MolarityUnit.MolePerCubicMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MolarityUnit unitA, double valueB, MolarityUnit unitB, bool expectEqual)
        {
            var a = new Molarity(valueA, unitA);
            var b = new Molarity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Molarity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.False(molepercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Molarity molepercubicmeter = Molarity.FromMolesPerCubicMeter(1);
            Assert.False(molepercubicmeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Molarity.FromMolesPerCubicMeter(firstValue);
            var otherQuantity = Molarity.FromMolesPerCubicMeter(secondValue);
            Molarity maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Molarity.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1);
            var negativeTolerance = Molarity.FromMolesPerCubicMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<MolarityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Molarity.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Molarity.Info.Units, Molarity.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Molarity.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cmol/l", new Molarity(1, MolarityUnit.CentimolePerLiter).ToString());
            Assert.Equal("1 dmol/l", new Molarity(1, MolarityUnit.DecimolePerLiter).ToString());
            Assert.Equal("1 fmol/l", new Molarity(1, MolarityUnit.FemtomolePerLiter).ToString());
            Assert.Equal("1 kmol/m³", new Molarity(1, MolarityUnit.KilomolePerCubicMeter).ToString());
            Assert.Equal("1 µmol/l", new Molarity(1, MolarityUnit.MicromolePerLiter).ToString());
            Assert.Equal("1 mmol/l", new Molarity(1, MolarityUnit.MillimolePerLiter).ToString());
            Assert.Equal("1 mol/m³", new Molarity(1, MolarityUnit.MolePerCubicMeter).ToString());
            Assert.Equal("1 mol/l", new Molarity(1, MolarityUnit.MolePerLiter).ToString());
            Assert.Equal("1 nmol/l", new Molarity(1, MolarityUnit.NanomolePerLiter).ToString());
            Assert.Equal("1 pmol/l", new Molarity(1, MolarityUnit.PicomolePerLiter).ToString());
            Assert.Equal("1 lbmol/ft³", new Molarity(1, MolarityUnit.PoundMolePerCubicFoot).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cmol/l", new Molarity(1, MolarityUnit.CentimolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 dmol/l", new Molarity(1, MolarityUnit.DecimolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 fmol/l", new Molarity(1, MolarityUnit.FemtomolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 kmol/m³", new Molarity(1, MolarityUnit.KilomolePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 µmol/l", new Molarity(1, MolarityUnit.MicromolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 mmol/l", new Molarity(1, MolarityUnit.MillimolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 mol/m³", new Molarity(1, MolarityUnit.MolePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 mol/l", new Molarity(1, MolarityUnit.MolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 nmol/l", new Molarity(1, MolarityUnit.NanomolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 pmol/l", new Molarity(1, MolarityUnit.PicomolePerLiter).ToString(swedishCulture));
            Assert.Equal("1 lbmol/ft³", new Molarity(1, MolarityUnit.PoundMolePerCubicFoot).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s1"));
            Assert.Equal("0.12 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s2"));
            Assert.Equal("0.123 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s3"));
            Assert.Equal("0.1235 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 mol/m³", new Molarity(0.123456, MolarityUnit.MolePerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Molarity.FromMolesPerCubicMeter(1.0);
            var expected = Comparison.GetHashCode(typeof(Molarity), quantity.As(Molarity.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Molarity.FromMolesPerCubicMeter(value);
            Assert.Equal(Molarity.FromMolesPerCubicMeter(-value), -quantity);
        }
    }
}
