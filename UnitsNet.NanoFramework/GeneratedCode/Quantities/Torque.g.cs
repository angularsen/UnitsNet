//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Torque, moment or moment of force (see the terminology below), is the tendency of a force to rotate an object about an axis,[1] fulcrum, or pivot. Just as a force is a push or a pull, a torque can be thought of as a twist to an object. Mathematically, torque is defined as the cross product of the lever-arm distance and force, which tends to produce rotation. Loosely speaking, torque is a measure of the turning force on an object such as a bolt or a flywheel. For example, pushing or pulling the handle of a wrench connected to a nut or bolt produces a torque (turning force) that loosens or tightens the nut or bolt.
    /// </summary>
    public struct  Torque
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly TorqueUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public TorqueUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Torque(double value, TorqueUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Torque, which is Second. All conversions go via this value.
        /// </summary>
        public static TorqueUnit BaseUnit { get; } = TorqueUnit.NewtonMeter;

        /// <summary>
        /// Represents the largest possible value of Torque.
        /// </summary>
        public static Torque MaxValue { get; } = new Torque(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Torque.
        /// </summary>
        public static Torque MinValue { get; } = new Torque(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Torque Zero { get; } = new Torque(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.GramForceCentimeter"/>
        /// </summary>
        public double GramForceCentimeters => As(TorqueUnit.GramForceCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.GramForceMeter"/>
        /// </summary>
        public double GramForceMeters => As(TorqueUnit.GramForceMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.GramForceMillimeter"/>
        /// </summary>
        public double GramForceMillimeters => As(TorqueUnit.GramForceMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.KilogramForceCentimeter"/>
        /// </summary>
        public double KilogramForceCentimeters => As(TorqueUnit.KilogramForceCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.KilogramForceMeter"/>
        /// </summary>
        public double KilogramForceMeters => As(TorqueUnit.KilogramForceMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.KilogramForceMillimeter"/>
        /// </summary>
        public double KilogramForceMillimeters => As(TorqueUnit.KilogramForceMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.KilonewtonCentimeter"/>
        /// </summary>
        public double KilonewtonCentimeters => As(TorqueUnit.KilonewtonCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.KilonewtonMeter"/>
        /// </summary>
        public double KilonewtonMeters => As(TorqueUnit.KilonewtonMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.KilonewtonMillimeter"/>
        /// </summary>
        public double KilonewtonMillimeters => As(TorqueUnit.KilonewtonMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.KilopoundForceFoot"/>
        /// </summary>
        public double KilopoundForceFeet => As(TorqueUnit.KilopoundForceFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.KilopoundForceInch"/>
        /// </summary>
        public double KilopoundForceInches => As(TorqueUnit.KilopoundForceInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.MeganewtonCentimeter"/>
        /// </summary>
        public double MeganewtonCentimeters => As(TorqueUnit.MeganewtonCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.MeganewtonMeter"/>
        /// </summary>
        public double MeganewtonMeters => As(TorqueUnit.MeganewtonMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.MeganewtonMillimeter"/>
        /// </summary>
        public double MeganewtonMillimeters => As(TorqueUnit.MeganewtonMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.MegapoundForceFoot"/>
        /// </summary>
        public double MegapoundForceFeet => As(TorqueUnit.MegapoundForceFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.MegapoundForceInch"/>
        /// </summary>
        public double MegapoundForceInches => As(TorqueUnit.MegapoundForceInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.NewtonCentimeter"/>
        /// </summary>
        public double NewtonCentimeters => As(TorqueUnit.NewtonCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.NewtonMeter"/>
        /// </summary>
        public double NewtonMeters => As(TorqueUnit.NewtonMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.NewtonMillimeter"/>
        /// </summary>
        public double NewtonMillimeters => As(TorqueUnit.NewtonMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.PoundalFoot"/>
        /// </summary>
        public double PoundalFeet => As(TorqueUnit.PoundalFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.PoundForceFoot"/>
        /// </summary>
        public double PoundForceFeet => As(TorqueUnit.PoundForceFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.PoundForceInch"/>
        /// </summary>
        public double PoundForceInches => As(TorqueUnit.PoundForceInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.TonneForceCentimeter"/>
        /// </summary>
        public double TonneForceCentimeters => As(TorqueUnit.TonneForceCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.TonneForceMeter"/>
        /// </summary>
        public double TonneForceMeters => As(TorqueUnit.TonneForceMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="TorqueUnit.TonneForceMillimeter"/>
        /// </summary>
        public double TonneForceMillimeters => As(TorqueUnit.TonneForceMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.GramForceCentimeter"/>.
        /// </summary>
        public static Torque FromGramForceCentimeters(double gramforcecentimeters) => new Torque(gramforcecentimeters, TorqueUnit.GramForceCentimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.GramForceMeter"/>.
        /// </summary>
        public static Torque FromGramForceMeters(double gramforcemeters) => new Torque(gramforcemeters, TorqueUnit.GramForceMeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.GramForceMillimeter"/>.
        /// </summary>
        public static Torque FromGramForceMillimeters(double gramforcemillimeters) => new Torque(gramforcemillimeters, TorqueUnit.GramForceMillimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilogramForceCentimeter"/>.
        /// </summary>
        public static Torque FromKilogramForceCentimeters(double kilogramforcecentimeters) => new Torque(kilogramforcecentimeters, TorqueUnit.KilogramForceCentimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilogramForceMeter"/>.
        /// </summary>
        public static Torque FromKilogramForceMeters(double kilogramforcemeters) => new Torque(kilogramforcemeters, TorqueUnit.KilogramForceMeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilogramForceMillimeter"/>.
        /// </summary>
        public static Torque FromKilogramForceMillimeters(double kilogramforcemillimeters) => new Torque(kilogramforcemillimeters, TorqueUnit.KilogramForceMillimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilonewtonCentimeter"/>.
        /// </summary>
        public static Torque FromKilonewtonCentimeters(double kilonewtoncentimeters) => new Torque(kilonewtoncentimeters, TorqueUnit.KilonewtonCentimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilonewtonMeter"/>.
        /// </summary>
        public static Torque FromKilonewtonMeters(double kilonewtonmeters) => new Torque(kilonewtonmeters, TorqueUnit.KilonewtonMeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilonewtonMillimeter"/>.
        /// </summary>
        public static Torque FromKilonewtonMillimeters(double kilonewtonmillimeters) => new Torque(kilonewtonmillimeters, TorqueUnit.KilonewtonMillimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilopoundForceFoot"/>.
        /// </summary>
        public static Torque FromKilopoundForceFeet(double kilopoundforcefeet) => new Torque(kilopoundforcefeet, TorqueUnit.KilopoundForceFoot);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.KilopoundForceInch"/>.
        /// </summary>
        public static Torque FromKilopoundForceInches(double kilopoundforceinches) => new Torque(kilopoundforceinches, TorqueUnit.KilopoundForceInch);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MeganewtonCentimeter"/>.
        /// </summary>
        public static Torque FromMeganewtonCentimeters(double meganewtoncentimeters) => new Torque(meganewtoncentimeters, TorqueUnit.MeganewtonCentimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MeganewtonMeter"/>.
        /// </summary>
        public static Torque FromMeganewtonMeters(double meganewtonmeters) => new Torque(meganewtonmeters, TorqueUnit.MeganewtonMeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MeganewtonMillimeter"/>.
        /// </summary>
        public static Torque FromMeganewtonMillimeters(double meganewtonmillimeters) => new Torque(meganewtonmillimeters, TorqueUnit.MeganewtonMillimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MegapoundForceFoot"/>.
        /// </summary>
        public static Torque FromMegapoundForceFeet(double megapoundforcefeet) => new Torque(megapoundforcefeet, TorqueUnit.MegapoundForceFoot);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.MegapoundForceInch"/>.
        /// </summary>
        public static Torque FromMegapoundForceInches(double megapoundforceinches) => new Torque(megapoundforceinches, TorqueUnit.MegapoundForceInch);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.NewtonCentimeter"/>.
        /// </summary>
        public static Torque FromNewtonCentimeters(double newtoncentimeters) => new Torque(newtoncentimeters, TorqueUnit.NewtonCentimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.NewtonMeter"/>.
        /// </summary>
        public static Torque FromNewtonMeters(double newtonmeters) => new Torque(newtonmeters, TorqueUnit.NewtonMeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.NewtonMillimeter"/>.
        /// </summary>
        public static Torque FromNewtonMillimeters(double newtonmillimeters) => new Torque(newtonmillimeters, TorqueUnit.NewtonMillimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.PoundalFoot"/>.
        /// </summary>
        public static Torque FromPoundalFeet(double poundalfeet) => new Torque(poundalfeet, TorqueUnit.PoundalFoot);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.PoundForceFoot"/>.
        /// </summary>
        public static Torque FromPoundForceFeet(double poundforcefeet) => new Torque(poundforcefeet, TorqueUnit.PoundForceFoot);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.PoundForceInch"/>.
        /// </summary>
        public static Torque FromPoundForceInches(double poundforceinches) => new Torque(poundforceinches, TorqueUnit.PoundForceInch);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.TonneForceCentimeter"/>.
        /// </summary>
        public static Torque FromTonneForceCentimeters(double tonneforcecentimeters) => new Torque(tonneforcecentimeters, TorqueUnit.TonneForceCentimeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.TonneForceMeter"/>.
        /// </summary>
        public static Torque FromTonneForceMeters(double tonneforcemeters) => new Torque(tonneforcemeters, TorqueUnit.TonneForceMeter);

        /// <summary>
        ///     Creates a <see cref="Torque"/> from <see cref="TorqueUnit.TonneForceMillimeter"/>.
        /// </summary>
        public static Torque FromTonneForceMillimeters(double tonneforcemillimeters) => new Torque(tonneforcemillimeters, TorqueUnit.TonneForceMillimeter);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="TorqueUnit" /> to <see cref="Torque" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Torque unit value.</returns>
        public static Torque From(double value, TorqueUnit fromUnit)
        {
            return new Torque(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(TorqueUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this Torque to another Torque with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A Torque with the specified unit.</returns>
                public Torque ToUnit(TorqueUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new Torque(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        TorqueUnit.GramForceCentimeter => _value * 9.80665e-5,
                        TorqueUnit.GramForceMeter => _value * 9.80665e-3,
                        TorqueUnit.GramForceMillimeter => _value * 9.80665e-6,
                        TorqueUnit.KilogramForceCentimeter => _value * 9.80665e-2,
                        TorqueUnit.KilogramForceMeter => _value * 9.80665,
                        TorqueUnit.KilogramForceMillimeter => _value * 9.80665e-3,
                        TorqueUnit.KilonewtonCentimeter => (_value * 0.01) * 1e3d,
                        TorqueUnit.KilonewtonMeter => (_value) * 1e3d,
                        TorqueUnit.KilonewtonMillimeter => (_value * 0.001) * 1e3d,
                        TorqueUnit.KilopoundForceFoot => (_value * 4.4482216152605 * 0.3048) * 1e3d,
                        TorqueUnit.KilopoundForceInch => (_value * 4.4482216152605 * 2.54e-2) * 1e3d,
                        TorqueUnit.MeganewtonCentimeter => (_value * 0.01) * 1e6d,
                        TorqueUnit.MeganewtonMeter => (_value) * 1e6d,
                        TorqueUnit.MeganewtonMillimeter => (_value * 0.001) * 1e6d,
                        TorqueUnit.MegapoundForceFoot => (_value * 4.4482216152605 * 0.3048) * 1e6d,
                        TorqueUnit.MegapoundForceInch => (_value * 4.4482216152605 * 2.54e-2) * 1e6d,
                        TorqueUnit.NewtonCentimeter => _value * 0.01,
                        TorqueUnit.NewtonMeter => _value,
                        TorqueUnit.NewtonMillimeter => _value * 0.001,
                        TorqueUnit.PoundalFoot => _value * 0.138254954376 * 0.3048,
                        TorqueUnit.PoundForceFoot => _value * 4.4482216152605 * 0.3048,
                        TorqueUnit.PoundForceInch => _value * 4.4482216152605 * 2.54e-2,
                        TorqueUnit.TonneForceCentimeter => _value * 9.80665e1,
                        TorqueUnit.TonneForceMeter => _value * 9.80665e3,
                        TorqueUnit.TonneForceMillimeter => _value * 9.80665,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(TorqueUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        TorqueUnit.GramForceCentimeter => baseUnitValue / 9.80665e-5,
                        TorqueUnit.GramForceMeter => baseUnitValue / 9.80665e-3,
                        TorqueUnit.GramForceMillimeter => baseUnitValue / 9.80665e-6,
                        TorqueUnit.KilogramForceCentimeter => baseUnitValue / 9.80665e-2,
                        TorqueUnit.KilogramForceMeter => baseUnitValue / 9.80665,
                        TorqueUnit.KilogramForceMillimeter => baseUnitValue / 9.80665e-3,
                        TorqueUnit.KilonewtonCentimeter => (baseUnitValue * 100) / 1e3d,
                        TorqueUnit.KilonewtonMeter => (baseUnitValue) / 1e3d,
                        TorqueUnit.KilonewtonMillimeter => (baseUnitValue * 1000) / 1e3d,
                        TorqueUnit.KilopoundForceFoot => (baseUnitValue / (4.4482216152605 * 0.3048)) / 1e3d,
                        TorqueUnit.KilopoundForceInch => (baseUnitValue / (4.4482216152605 * 2.54e-2)) / 1e3d,
                        TorqueUnit.MeganewtonCentimeter => (baseUnitValue * 100) / 1e6d,
                        TorqueUnit.MeganewtonMeter => (baseUnitValue) / 1e6d,
                        TorqueUnit.MeganewtonMillimeter => (baseUnitValue * 1000) / 1e6d,
                        TorqueUnit.MegapoundForceFoot => (baseUnitValue / (4.4482216152605 * 0.3048)) / 1e6d,
                        TorqueUnit.MegapoundForceInch => (baseUnitValue / (4.4482216152605 * 2.54e-2)) / 1e6d,
                        TorqueUnit.NewtonCentimeter => baseUnitValue * 100,
                        TorqueUnit.NewtonMeter => baseUnitValue,
                        TorqueUnit.NewtonMillimeter => baseUnitValue * 1000,
                        TorqueUnit.PoundalFoot => baseUnitValue / (0.138254954376 * 0.3048),
                        TorqueUnit.PoundForceFoot => baseUnitValue / (4.4482216152605 * 0.3048),
                        TorqueUnit.PoundForceInch => baseUnitValue / (4.4482216152605 * 2.54e-2),
                        TorqueUnit.TonneForceCentimeter => baseUnitValue / 9.80665e1,
                        TorqueUnit.TonneForceMeter => baseUnitValue / 9.80665e3,
                        TorqueUnit.TonneForceMillimeter => baseUnitValue / 9.80665,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

