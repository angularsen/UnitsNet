//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToElectricSusceptance;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToElectricSusceptanceExtensionsTests
    {
        [Fact]
        public void NumberToGigamhosTest() =>
            Assert.Equal(ElectricSusceptance.FromGigamhos(2), 2.Gigamhos);

        [Fact]
        public void NumberToGigasiemensTest() =>
            Assert.Equal(ElectricSusceptance.FromGigasiemens(2), 2.Gigasiemens);

        [Fact]
        public void NumberToKilomhosTest() =>
            Assert.Equal(ElectricSusceptance.FromKilomhos(2), 2.Kilomhos);

        [Fact]
        public void NumberToKilosiemensTest() =>
            Assert.Equal(ElectricSusceptance.FromKilosiemens(2), 2.Kilosiemens);

        [Fact]
        public void NumberToMegamhosTest() =>
            Assert.Equal(ElectricSusceptance.FromMegamhos(2), 2.Megamhos);

        [Fact]
        public void NumberToMegasiemensTest() =>
            Assert.Equal(ElectricSusceptance.FromMegasiemens(2), 2.Megasiemens);

        [Fact]
        public void NumberToMhosTest() =>
            Assert.Equal(ElectricSusceptance.FromMhos(2), 2.Mhos);

        [Fact]
        public void NumberToMicromhosTest() =>
            Assert.Equal(ElectricSusceptance.FromMicromhos(2), 2.Micromhos);

        [Fact]
        public void NumberToMicrosiemensTest() =>
            Assert.Equal(ElectricSusceptance.FromMicrosiemens(2), 2.Microsiemens);

        [Fact]
        public void NumberToMillimhosTest() =>
            Assert.Equal(ElectricSusceptance.FromMillimhos(2), 2.Millimhos);

        [Fact]
        public void NumberToMillisiemensTest() =>
            Assert.Equal(ElectricSusceptance.FromMillisiemens(2), 2.Millisiemens);

        [Fact]
        public void NumberToNanomhosTest() =>
            Assert.Equal(ElectricSusceptance.FromNanomhos(2), 2.Nanomhos);

        [Fact]
        public void NumberToNanosiemensTest() =>
            Assert.Equal(ElectricSusceptance.FromNanosiemens(2), 2.Nanosiemens);

        [Fact]
        public void NumberToSiemensTest() =>
            Assert.Equal(ElectricSusceptance.FromSiemens(2), 2.Siemens);

        [Fact]
        public void NumberToTeramhosTest() =>
            Assert.Equal(ElectricSusceptance.FromTeramhos(2), 2.Teramhos);

        [Fact]
        public void NumberToTerasiemensTest() =>
            Assert.Equal(ElectricSusceptance.FromTerasiemens(2), 2.Terasiemens);

    }
}
