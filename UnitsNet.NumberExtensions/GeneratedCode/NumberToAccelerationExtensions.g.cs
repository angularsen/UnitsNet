//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToAcceleration
{
    /// <summary>
    /// A number to Acceleration Extensions
    /// </summary>
    public static class NumberToAccelerationExtensions
    {
        /// <inheritdoc cref="Acceleration.FromCentimetersPerSecondSquared(QuantityValue)" />
        public static Acceleration CentimetersPerSecondSquared<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromCentimetersPerSecondSquared(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromCentimetersPerSecondSquared(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromDecimetersPerSecondSquared(QuantityValue)" />
        public static Acceleration DecimetersPerSecondSquared<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromDecimetersPerSecondSquared(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromDecimetersPerSecondSquared(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromFeetPerSecondSquared(QuantityValue)" />
        public static Acceleration FeetPerSecondSquared<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromFeetPerSecondSquared(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromFeetPerSecondSquared(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromInchesPerSecondSquared(QuantityValue)" />
        public static Acceleration InchesPerSecondSquared<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromInchesPerSecondSquared(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromInchesPerSecondSquared(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromKilometersPerSecondSquared(QuantityValue)" />
        public static Acceleration KilometersPerSecondSquared<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromKilometersPerSecondSquared(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromKilometersPerSecondSquared(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromKnotsPerHour(QuantityValue)" />
        public static Acceleration KnotsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromKnotsPerHour(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromKnotsPerHour(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromKnotsPerMinute(QuantityValue)" />
        public static Acceleration KnotsPerMinute<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromKnotsPerMinute(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromKnotsPerMinute(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromKnotsPerSecond(QuantityValue)" />
        public static Acceleration KnotsPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromKnotsPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromKnotsPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromMetersPerSecondSquared(QuantityValue)" />
        public static Acceleration MetersPerSecondSquared<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromMetersPerSecondSquared(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromMetersPerSecondSquared(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromMicrometersPerSecondSquared(QuantityValue)" />
        public static Acceleration MicrometersPerSecondSquared<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromMicrometersPerSecondSquared(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromMicrometersPerSecondSquared(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromMillimetersPerSecondSquared(QuantityValue)" />
        public static Acceleration MillimetersPerSecondSquared<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromMillimetersPerSecondSquared(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromMillimetersPerSecondSquared(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromMillistandardGravity(QuantityValue)" />
        public static Acceleration MillistandardGravity<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromMillistandardGravity(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromMillistandardGravity(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromNanometersPerSecondSquared(QuantityValue)" />
        public static Acceleration NanometersPerSecondSquared<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromNanometersPerSecondSquared(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromNanometersPerSecondSquared(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Acceleration.FromStandardGravity(QuantityValue)" />
        public static Acceleration StandardGravity<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Acceleration.FromStandardGravity(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Acceleration.FromStandardGravity(value.ToQuantityValue());
#endif

    }
}
