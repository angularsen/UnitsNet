//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToReciprocalArea;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToReciprocalAreaExtensionsTests
    {
        [Fact]
        public void NumberToInverseSquareCentimetersTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareCentimeters(2), 2.InverseSquareCentimeters);

        [Fact]
        public void NumberToInverseSquareDecimetersTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareDecimeters(2), 2.InverseSquareDecimeters);

        [Fact]
        public void NumberToInverseSquareFeetTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareFeet(2), 2.InverseSquareFeet);

        [Fact]
        public void NumberToInverseSquareInchesTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareInches(2), 2.InverseSquareInches);

        [Fact]
        public void NumberToInverseSquareKilometersTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareKilometers(2), 2.InverseSquareKilometers);

        [Fact]
        public void NumberToInverseSquareMetersTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareMeters(2), 2.InverseSquareMeters);

        [Fact]
        public void NumberToInverseSquareMicrometersTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareMicrometers(2), 2.InverseSquareMicrometers);

        [Fact]
        public void NumberToInverseSquareMilesTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareMiles(2), 2.InverseSquareMiles);

        [Fact]
        public void NumberToInverseSquareMillimetersTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareMillimeters(2), 2.InverseSquareMillimeters);

        [Fact]
        public void NumberToInverseSquareYardsTest() =>
            Assert.Equal(ReciprocalArea.FromInverseSquareYards(2), 2.InverseSquareYards);

        [Fact]
        public void NumberToInverseUsSurveySquareFeetTest() =>
            Assert.Equal(ReciprocalArea.FromInverseUsSurveySquareFeet(2), 2.InverseUsSurveySquareFeet);

    }
}
