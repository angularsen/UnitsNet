//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Permittivity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PermittivityTestsBase : QuantityTestsBase
    {
        protected abstract double FaradsPerMeterInOneFaradPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double FaradsPerMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(PermittivityUnit unit)
        {
            return unit switch
            {
                PermittivityUnit.FaradPerMeter => (FaradsPerMeterInOneFaradPerMeter, FaradsPerMeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { PermittivityUnit.FaradPerMeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Permittivity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(PermittivityUnit.FaradPerMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Permittivity(double.PositiveInfinity, PermittivityUnit.FaradPerMeter));
            var exception2 = Record.Exception(() => new Permittivity(double.NegativeInfinity, PermittivityUnit.FaradPerMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Permittivity(double.NaN, PermittivityUnit.FaradPerMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Permittivity(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Permittivity(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Permittivity(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Permittivity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            PermittivityUnit[] unitsOrderedByName = EnumUtils.GetEnumValues<PermittivityUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Permittivity(1, PermittivityUnit.FaradPerMeter);

            QuantityInfo<Permittivity, PermittivityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Permittivity", quantityInfo.Name);
            Assert.Equal(Permittivity.Zero, quantityInfo.Zero);
            Assert.Equal(Permittivity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Permittivity.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<PermittivityUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void PermittivityInfo_CreateWithCustomUnitInfos()
        {
            PermittivityUnit[] expectedUnits = [PermittivityUnit.FaradPerMeter];

            Permittivity.PermittivityInfo quantityInfo = Permittivity.PermittivityInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Permittivity", quantityInfo.Name);
            Assert.Equal(Permittivity.Zero, quantityInfo.Zero);
            Assert.Equal(Permittivity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void FaradPerMeterToPermittivityUnits()
        {
            Permittivity faradpermeter = Permittivity.FromFaradsPerMeter(1);
            AssertEx.EqualTolerance(FaradsPerMeterInOneFaradPerMeter, faradpermeter.FaradsPerMeter, FaradsPerMeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Permittivity.From(1, PermittivityUnit.FaradPerMeter);
            Assert.Equal(1, quantity00.FaradsPerMeter);
            Assert.Equal(PermittivityUnit.FaradPerMeter, quantity00.Unit);

        }

        [Fact]
        public void FromFaradsPerMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Permittivity.FromFaradsPerMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Permittivity.FromFaradsPerMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromFaradsPerMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Permittivity.FromFaradsPerMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var faradpermeter = Permittivity.FromFaradsPerMeter(1);
            AssertEx.EqualTolerance(FaradsPerMeterInOneFaradPerMeter, faradpermeter.As(PermittivityUnit.FaradPerMeter), FaradsPerMeterTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Permittivity.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
            var expectedValue = quantity.As(Permittivity.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
            var expectedUnit = Permittivity.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Permittivity quantityToConvert = quantity;

                Permittivity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<PermittivityUnit> quantityToConvert = quantity;

                IQuantity<PermittivityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() => 
            {
                var quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<PermittivityUnit> quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<PermittivityUnit> quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Permittivity(value: 1, unit: Permittivity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 F/m", PermittivityUnit.FaradPerMeter, 4.2)]
        public void Parse(string culture, string quantityString, PermittivityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Permittivity.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 F/m", PermittivityUnit.FaradPerMeter, 4.2)]
        public void TryParse(string culture, string quantityString, PermittivityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Permittivity.TryParse(quantityString, out Permittivity parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("F/m", PermittivityUnit.FaradPerMeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PermittivityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            PermittivityUnit parsedUnit = Permittivity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("F/m", PermittivityUnit.FaradPerMeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PermittivityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            PermittivityUnit parsedUnit = Permittivity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "F/m", PermittivityUnit.FaradPerMeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, PermittivityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            PermittivityUnit parsedUnit = Permittivity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "F/m", PermittivityUnit.FaradPerMeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, PermittivityUnit expectedUnit)
        {
            PermittivityUnit parsedUnit = Permittivity.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("F/m", PermittivityUnit.FaradPerMeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PermittivityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Permittivity.TryParseUnit(abbreviation, out PermittivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("F/m", PermittivityUnit.FaradPerMeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PermittivityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Permittivity.TryParseUnit(abbreviation, out PermittivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "F/m", PermittivityUnit.FaradPerMeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, PermittivityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Permittivity.TryParseUnit(abbreviation, out PermittivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "F/m", PermittivityUnit.FaradPerMeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, PermittivityUnit expectedUnit)
        {
            Assert.True(Permittivity.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out PermittivityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", PermittivityUnit.FaradPerMeter, "F/m")]
        public void GetAbbreviationForCulture(string culture, PermittivityUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Permittivity.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Permittivity.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Permittivity.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(PermittivityUnit unit)
        {
            var inBaseUnits = Permittivity.From(1.0, Permittivity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(PermittivityUnit unit)
        {
            var quantity = Permittivity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(PermittivityUnit unit)
        {
            Assert.All(Permittivity.Units.Where(u => u != Permittivity.BaseUnit), fromUnit =>
            {
                var quantity = Permittivity.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(PermittivityUnit unit)
        {
            var quantity = default(Permittivity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(PermittivityUnit unit)
        {
            var quantity = Permittivity.From(3, Permittivity.BaseUnit);
            Permittivity expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<PermittivityUnit> quantityToConvert = quantity;
                IQuantity<PermittivityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Permittivity faradpermeter = Permittivity.FromFaradsPerMeter(3);
            Assert.Equal(3, Permittivity.FromFaradsPerMeter(faradpermeter.FaradsPerMeter).FaradsPerMeter);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Permittivity v = Permittivity.FromFaradsPerMeter(1);
            Assert.Equal(-1, -v.FaradsPerMeter);
            Assert.Equal(2, (Permittivity.FromFaradsPerMeter(3) - v).FaradsPerMeter);
            Assert.Equal(2, (v + v).FaradsPerMeter);
            Assert.Equal(10, (v * 10).FaradsPerMeter);
            Assert.Equal(10, (10 * v).FaradsPerMeter);
            Assert.Equal(2, (Permittivity.FromFaradsPerMeter(10) / 5).FaradsPerMeter);
            Assert.Equal(2, Permittivity.FromFaradsPerMeter(10) / Permittivity.FromFaradsPerMeter(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Permittivity oneFaradPerMeter = Permittivity.FromFaradsPerMeter(1);
            Permittivity twoFaradsPerMeter = Permittivity.FromFaradsPerMeter(2);

            Assert.True(oneFaradPerMeter < twoFaradsPerMeter);
            Assert.True(oneFaradPerMeter <= twoFaradsPerMeter);
            Assert.True(twoFaradsPerMeter > oneFaradPerMeter);
            Assert.True(twoFaradsPerMeter >= oneFaradPerMeter);

            Assert.False(oneFaradPerMeter > twoFaradsPerMeter);
            Assert.False(oneFaradPerMeter >= twoFaradsPerMeter);
            Assert.False(twoFaradsPerMeter < oneFaradPerMeter);
            Assert.False(twoFaradsPerMeter <= oneFaradPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Permittivity faradpermeter = Permittivity.FromFaradsPerMeter(1);
            Assert.Equal(0, faradpermeter.CompareTo(faradpermeter));
            Assert.True(faradpermeter.CompareTo(Permittivity.Zero) > 0);
            Assert.True(Permittivity.Zero.CompareTo(faradpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Permittivity faradpermeter = Permittivity.FromFaradsPerMeter(1);
            Assert.Throws<ArgumentException>(() => faradpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Permittivity faradpermeter = Permittivity.FromFaradsPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => faradpermeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, PermittivityUnit.FaradPerMeter, 1, PermittivityUnit.FaradPerMeter, true)]  // Same value and unit.
        [InlineData(1, PermittivityUnit.FaradPerMeter, 2, PermittivityUnit.FaradPerMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, PermittivityUnit unitA, double valueB, PermittivityUnit unitB, bool expectEqual)
        {
            var a = new Permittivity(valueA, unitA);
            var b = new Permittivity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Permittivity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Permittivity faradpermeter = Permittivity.FromFaradsPerMeter(1);
            Assert.False(faradpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Permittivity faradpermeter = Permittivity.FromFaradsPerMeter(1);
            Assert.False(faradpermeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance_IsImplemented(double firstValue, double secondValue)
        {
            var quantity = Permittivity.FromFaradsPerMeter(firstValue);
            var otherQuantity = Permittivity.FromFaradsPerMeter(secondValue);
            Permittivity maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Permittivity.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Permittivity.FromFaradsPerMeter(1);
            var negativeTolerance = Permittivity.FromFaradsPerMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(PermittivityUnit)).Cast<PermittivityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Permittivity.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Permittivity.Info.Units, Permittivity.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Permittivity.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 F/m", new Permittivity(1, PermittivityUnit.FaradPerMeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 F/m", new Permittivity(1, PermittivityUnit.FaradPerMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 F/m", new Permittivity(0.123456, PermittivityUnit.FaradPerMeter).ToString("s1"));
            Assert.Equal("0.12 F/m", new Permittivity(0.123456, PermittivityUnit.FaradPerMeter).ToString("s2"));
            Assert.Equal("0.123 F/m", new Permittivity(0.123456, PermittivityUnit.FaradPerMeter).ToString("s3"));
            Assert.Equal("0.1235 F/m", new Permittivity(0.123456, PermittivityUnit.FaradPerMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 F/m", new Permittivity(0.123456, PermittivityUnit.FaradPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 F/m", new Permittivity(0.123456, PermittivityUnit.FaradPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 F/m", new Permittivity(0.123456, PermittivityUnit.FaradPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 F/m", new Permittivity(0.123456, PermittivityUnit.FaradPerMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Permittivity.FromFaradsPerMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Permittivity.FromFaradsPerMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Permittivity.FromFaradsPerMeter(1.0);
            var expected = Comparison.GetHashCode(typeof(Permittivity), quantity.As(Permittivity.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Permittivity.FromFaradsPerMeter(value);
            Assert.Equal(Permittivity.FromFaradsPerMeter(-value), -quantity);
        }
    }
}
