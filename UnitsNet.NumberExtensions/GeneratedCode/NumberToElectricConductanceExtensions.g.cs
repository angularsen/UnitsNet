//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricConductance
{
    /// <summary>
    /// A number to ElectricConductance Extensions
    /// </summary>
    public static class NumberToElectricConductanceExtensions
    {
        /// <inheritdoc cref="ElectricConductance.FromGigamhos(QuantityValue)" />
        public static ElectricConductance Gigamhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromGigamhos(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromGigamhos(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromGigasiemens(QuantityValue)" />
        public static ElectricConductance Gigasiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromGigasiemens(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromGigasiemens(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromKilomhos(QuantityValue)" />
        public static ElectricConductance Kilomhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromKilomhos(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromKilomhos(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromKilosiemens(QuantityValue)" />
        public static ElectricConductance Kilosiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromKilosiemens(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromKilosiemens(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromMegamhos(QuantityValue)" />
        public static ElectricConductance Megamhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromMegamhos(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromMegamhos(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromMegasiemens(QuantityValue)" />
        public static ElectricConductance Megasiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromMegasiemens(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromMegasiemens(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromMhos(QuantityValue)" />
        public static ElectricConductance Mhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromMhos(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromMhos(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromMicromhos(QuantityValue)" />
        public static ElectricConductance Micromhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromMicromhos(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromMicromhos(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromMicrosiemens(QuantityValue)" />
        public static ElectricConductance Microsiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromMicrosiemens(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromMicrosiemens(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromMillimhos(QuantityValue)" />
        public static ElectricConductance Millimhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromMillimhos(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromMillimhos(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromMillisiemens(QuantityValue)" />
        public static ElectricConductance Millisiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromMillisiemens(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromMillisiemens(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromNanomhos(QuantityValue)" />
        public static ElectricConductance Nanomhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromNanomhos(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromNanomhos(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromNanosiemens(QuantityValue)" />
        public static ElectricConductance Nanosiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromNanosiemens(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromNanosiemens(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromSiemens(QuantityValue)" />
        public static ElectricConductance Siemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromSiemens(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromSiemens(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromTeramhos(QuantityValue)" />
        public static ElectricConductance Teramhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromTeramhos(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromTeramhos(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricConductance.FromTerasiemens(QuantityValue)" />
        public static ElectricConductance Terasiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricConductance.FromTerasiemens(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricConductance.FromTerasiemens(value.ToQuantityValue());
#endif

    }
}
