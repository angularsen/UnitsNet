//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToArea
{
    /// <summary>
    /// A number to Area Extensions
    /// </summary>
    public static class NumberToAreaExtensions
    {
        /// <inheritdoc cref="Area.FromAcres(QuantityValue)" />
        public static Area Acres<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromAcres(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromAcres(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromHectares(QuantityValue)" />
        public static Area Hectares<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromHectares(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromHectares(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareCentimeters(QuantityValue)" />
        public static Area SquareCentimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareCentimeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareCentimeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareDecimeters(QuantityValue)" />
        public static Area SquareDecimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareDecimeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareDecimeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareFeet(QuantityValue)" />
        public static Area SquareFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareFeet(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareFeet(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareInches(QuantityValue)" />
        public static Area SquareInches<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareInches(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareInches(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareKilometers(QuantityValue)" />
        public static Area SquareKilometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareKilometers(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareKilometers(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareMeters(QuantityValue)" />
        public static Area SquareMeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareMeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareMeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareMicrometers(QuantityValue)" />
        public static Area SquareMicrometers<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareMicrometers(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareMicrometers(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareMiles(QuantityValue)" />
        public static Area SquareMiles<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareMiles(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareMiles(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareMillimeters(QuantityValue)" />
        public static Area SquareMillimeters<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareMillimeters(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareMillimeters(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareNauticalMiles(QuantityValue)" />
        public static Area SquareNauticalMiles<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareNauticalMiles(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareNauticalMiles(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromSquareYards(QuantityValue)" />
        public static Area SquareYards<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromSquareYards(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromSquareYards(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Area.FromUsSurveySquareFeet(QuantityValue)" />
        public static Area UsSurveySquareFeet<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Area.FromUsSurveySquareFeet(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Area.FromUsSurveySquareFeet(value.ToQuantityValue());
#endif

    }
}
