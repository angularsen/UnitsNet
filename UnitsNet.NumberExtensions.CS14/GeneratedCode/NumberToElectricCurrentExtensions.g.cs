//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricCurrent
{
    /// <summary>
    /// A number to ElectricCurrent Extensions
    /// </summary>
    public static class NumberToElectricCurrentExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="ElectricCurrent.FromAmperes(double)" />
            public ElectricCurrent Amperes
#if NET7_0_OR_GREATER
                => ElectricCurrent.FromAmperes(double.CreateChecked(value));
#else
                => ElectricCurrent.FromAmperes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCurrent.FromCentiamperes(double)" />
            public ElectricCurrent Centiamperes
#if NET7_0_OR_GREATER
                => ElectricCurrent.FromCentiamperes(double.CreateChecked(value));
#else
                => ElectricCurrent.FromCentiamperes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCurrent.FromFemtoamperes(double)" />
            public ElectricCurrent Femtoamperes
#if NET7_0_OR_GREATER
                => ElectricCurrent.FromFemtoamperes(double.CreateChecked(value));
#else
                => ElectricCurrent.FromFemtoamperes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCurrent.FromKiloamperes(double)" />
            public ElectricCurrent Kiloamperes
#if NET7_0_OR_GREATER
                => ElectricCurrent.FromKiloamperes(double.CreateChecked(value));
#else
                => ElectricCurrent.FromKiloamperes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCurrent.FromMegaamperes(double)" />
            public ElectricCurrent Megaamperes
#if NET7_0_OR_GREATER
                => ElectricCurrent.FromMegaamperes(double.CreateChecked(value));
#else
                => ElectricCurrent.FromMegaamperes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCurrent.FromMicroamperes(double)" />
            public ElectricCurrent Microamperes
#if NET7_0_OR_GREATER
                => ElectricCurrent.FromMicroamperes(double.CreateChecked(value));
#else
                => ElectricCurrent.FromMicroamperes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCurrent.FromMilliamperes(double)" />
            public ElectricCurrent Milliamperes
#if NET7_0_OR_GREATER
                => ElectricCurrent.FromMilliamperes(double.CreateChecked(value));
#else
                => ElectricCurrent.FromMilliamperes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCurrent.FromNanoamperes(double)" />
            public ElectricCurrent Nanoamperes
#if NET7_0_OR_GREATER
                => ElectricCurrent.FromNanoamperes(double.CreateChecked(value));
#else
                => ElectricCurrent.FromNanoamperes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCurrent.FromPicoamperes(double)" />
            public ElectricCurrent Picoamperes
#if NET7_0_OR_GREATER
                => ElectricCurrent.FromPicoamperes(double.CreateChecked(value));
#else
                => ElectricCurrent.FromPicoamperes(value.ToDouble(null));
#endif

        }
    }
}
