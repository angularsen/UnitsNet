//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MassMomentOfInertia.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MassMomentOfInertiaTestsBase : QuantityTestsBase
    {
        protected abstract double GramSquareCentimetersInOneKilogramSquareMeter { get; }
        protected abstract double GramSquareDecimetersInOneKilogramSquareMeter { get; }
        protected abstract double GramSquareMetersInOneKilogramSquareMeter { get; }
        protected abstract double GramSquareMillimetersInOneKilogramSquareMeter { get; }
        protected abstract double KilogramSquareCentimetersInOneKilogramSquareMeter { get; }
        protected abstract double KilogramSquareDecimetersInOneKilogramSquareMeter { get; }
        protected abstract double KilogramSquareMetersInOneKilogramSquareMeter { get; }
        protected abstract double KilogramSquareMillimetersInOneKilogramSquareMeter { get; }
        protected abstract double KilotonneSquareCentimetersInOneKilogramSquareMeter { get; }
        protected abstract double KilotonneSquareDecimetersInOneKilogramSquareMeter { get; }
        protected abstract double KilotonneSquareMetersInOneKilogramSquareMeter { get; }
        protected abstract double KilotonneSquareMillimetersInOneKilogramSquareMeter { get; }
        protected abstract double MegatonneSquareCentimetersInOneKilogramSquareMeter { get; }
        protected abstract double MegatonneSquareDecimetersInOneKilogramSquareMeter { get; }
        protected abstract double MegatonneSquareMetersInOneKilogramSquareMeter { get; }
        protected abstract double MegatonneSquareMillimetersInOneKilogramSquareMeter { get; }
        protected abstract double MilligramSquareCentimetersInOneKilogramSquareMeter { get; }
        protected abstract double MilligramSquareDecimetersInOneKilogramSquareMeter { get; }
        protected abstract double MilligramSquareMetersInOneKilogramSquareMeter { get; }
        protected abstract double MilligramSquareMillimetersInOneKilogramSquareMeter { get; }
        protected abstract double PoundSquareFeetInOneKilogramSquareMeter { get; }
        protected abstract double PoundSquareInchesInOneKilogramSquareMeter { get; }
        protected abstract double SlugSquareFeetInOneKilogramSquareMeter { get; }
        protected abstract double SlugSquareInchesInOneKilogramSquareMeter { get; }
        protected abstract double TonneSquareCentimetersInOneKilogramSquareMeter { get; }
        protected abstract double TonneSquareDecimetersInOneKilogramSquareMeter { get; }
        protected abstract double TonneSquareMetersInOneKilogramSquareMeter { get; }
        protected abstract double TonneSquareMillimetersInOneKilogramSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GramSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double GramSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double GramSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double GramSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double KilogramSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double KilogramSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double KilogramSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double KilogramSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double KilotonneSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double KilotonneSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double KilotonneSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double KilotonneSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MegatonneSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MegatonneSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double MegatonneSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double MegatonneSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligramSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligramSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligramSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double MilligramSquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double PoundSquareFeetTolerance { get { return 1e-5; } }
        protected virtual double PoundSquareInchesTolerance { get { return 1e-5; } }
        protected virtual double SlugSquareFeetTolerance { get { return 1e-5; } }
        protected virtual double SlugSquareInchesTolerance { get { return 1e-5; } }
        protected virtual double TonneSquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double TonneSquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double TonneSquareMetersTolerance { get { return 1e-5; } }
        protected virtual double TonneSquareMillimetersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MassMomentOfInertiaUnit unit)
        {
            return unit switch
            {
                MassMomentOfInertiaUnit.GramSquareCentimeter => (GramSquareCentimetersInOneKilogramSquareMeter, GramSquareCentimetersTolerance),
                MassMomentOfInertiaUnit.GramSquareDecimeter => (GramSquareDecimetersInOneKilogramSquareMeter, GramSquareDecimetersTolerance),
                MassMomentOfInertiaUnit.GramSquareMeter => (GramSquareMetersInOneKilogramSquareMeter, GramSquareMetersTolerance),
                MassMomentOfInertiaUnit.GramSquareMillimeter => (GramSquareMillimetersInOneKilogramSquareMeter, GramSquareMillimetersTolerance),
                MassMomentOfInertiaUnit.KilogramSquareCentimeter => (KilogramSquareCentimetersInOneKilogramSquareMeter, KilogramSquareCentimetersTolerance),
                MassMomentOfInertiaUnit.KilogramSquareDecimeter => (KilogramSquareDecimetersInOneKilogramSquareMeter, KilogramSquareDecimetersTolerance),
                MassMomentOfInertiaUnit.KilogramSquareMeter => (KilogramSquareMetersInOneKilogramSquareMeter, KilogramSquareMetersTolerance),
                MassMomentOfInertiaUnit.KilogramSquareMillimeter => (KilogramSquareMillimetersInOneKilogramSquareMeter, KilogramSquareMillimetersTolerance),
                MassMomentOfInertiaUnit.KilotonneSquareCentimeter => (KilotonneSquareCentimetersInOneKilogramSquareMeter, KilotonneSquareCentimetersTolerance),
                MassMomentOfInertiaUnit.KilotonneSquareDecimeter => (KilotonneSquareDecimetersInOneKilogramSquareMeter, KilotonneSquareDecimetersTolerance),
                MassMomentOfInertiaUnit.KilotonneSquareMeter => (KilotonneSquareMetersInOneKilogramSquareMeter, KilotonneSquareMetersTolerance),
                MassMomentOfInertiaUnit.KilotonneSquareMillimeter => (KilotonneSquareMillimetersInOneKilogramSquareMeter, KilotonneSquareMillimetersTolerance),
                MassMomentOfInertiaUnit.MegatonneSquareCentimeter => (MegatonneSquareCentimetersInOneKilogramSquareMeter, MegatonneSquareCentimetersTolerance),
                MassMomentOfInertiaUnit.MegatonneSquareDecimeter => (MegatonneSquareDecimetersInOneKilogramSquareMeter, MegatonneSquareDecimetersTolerance),
                MassMomentOfInertiaUnit.MegatonneSquareMeter => (MegatonneSquareMetersInOneKilogramSquareMeter, MegatonneSquareMetersTolerance),
                MassMomentOfInertiaUnit.MegatonneSquareMillimeter => (MegatonneSquareMillimetersInOneKilogramSquareMeter, MegatonneSquareMillimetersTolerance),
                MassMomentOfInertiaUnit.MilligramSquareCentimeter => (MilligramSquareCentimetersInOneKilogramSquareMeter, MilligramSquareCentimetersTolerance),
                MassMomentOfInertiaUnit.MilligramSquareDecimeter => (MilligramSquareDecimetersInOneKilogramSquareMeter, MilligramSquareDecimetersTolerance),
                MassMomentOfInertiaUnit.MilligramSquareMeter => (MilligramSquareMetersInOneKilogramSquareMeter, MilligramSquareMetersTolerance),
                MassMomentOfInertiaUnit.MilligramSquareMillimeter => (MilligramSquareMillimetersInOneKilogramSquareMeter, MilligramSquareMillimetersTolerance),
                MassMomentOfInertiaUnit.PoundSquareFoot => (PoundSquareFeetInOneKilogramSquareMeter, PoundSquareFeetTolerance),
                MassMomentOfInertiaUnit.PoundSquareInch => (PoundSquareInchesInOneKilogramSquareMeter, PoundSquareInchesTolerance),
                MassMomentOfInertiaUnit.SlugSquareFoot => (SlugSquareFeetInOneKilogramSquareMeter, SlugSquareFeetTolerance),
                MassMomentOfInertiaUnit.SlugSquareInch => (SlugSquareInchesInOneKilogramSquareMeter, SlugSquareInchesTolerance),
                MassMomentOfInertiaUnit.TonneSquareCentimeter => (TonneSquareCentimetersInOneKilogramSquareMeter, TonneSquareCentimetersTolerance),
                MassMomentOfInertiaUnit.TonneSquareDecimeter => (TonneSquareDecimetersInOneKilogramSquareMeter, TonneSquareDecimetersTolerance),
                MassMomentOfInertiaUnit.TonneSquareMeter => (TonneSquareMetersInOneKilogramSquareMeter, TonneSquareMetersTolerance),
                MassMomentOfInertiaUnit.TonneSquareMillimeter => (TonneSquareMillimetersInOneKilogramSquareMeter, TonneSquareMillimetersTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MassMomentOfInertiaUnit.GramSquareCentimeter },
            new object[] { MassMomentOfInertiaUnit.GramSquareDecimeter },
            new object[] { MassMomentOfInertiaUnit.GramSquareMeter },
            new object[] { MassMomentOfInertiaUnit.GramSquareMillimeter },
            new object[] { MassMomentOfInertiaUnit.KilogramSquareCentimeter },
            new object[] { MassMomentOfInertiaUnit.KilogramSquareDecimeter },
            new object[] { MassMomentOfInertiaUnit.KilogramSquareMeter },
            new object[] { MassMomentOfInertiaUnit.KilogramSquareMillimeter },
            new object[] { MassMomentOfInertiaUnit.KilotonneSquareCentimeter },
            new object[] { MassMomentOfInertiaUnit.KilotonneSquareDecimeter },
            new object[] { MassMomentOfInertiaUnit.KilotonneSquareMeter },
            new object[] { MassMomentOfInertiaUnit.KilotonneSquareMillimeter },
            new object[] { MassMomentOfInertiaUnit.MegatonneSquareCentimeter },
            new object[] { MassMomentOfInertiaUnit.MegatonneSquareDecimeter },
            new object[] { MassMomentOfInertiaUnit.MegatonneSquareMeter },
            new object[] { MassMomentOfInertiaUnit.MegatonneSquareMillimeter },
            new object[] { MassMomentOfInertiaUnit.MilligramSquareCentimeter },
            new object[] { MassMomentOfInertiaUnit.MilligramSquareDecimeter },
            new object[] { MassMomentOfInertiaUnit.MilligramSquareMeter },
            new object[] { MassMomentOfInertiaUnit.MilligramSquareMillimeter },
            new object[] { MassMomentOfInertiaUnit.PoundSquareFoot },
            new object[] { MassMomentOfInertiaUnit.PoundSquareInch },
            new object[] { MassMomentOfInertiaUnit.SlugSquareFoot },
            new object[] { MassMomentOfInertiaUnit.SlugSquareInch },
            new object[] { MassMomentOfInertiaUnit.TonneSquareCentimeter },
            new object[] { MassMomentOfInertiaUnit.TonneSquareDecimeter },
            new object[] { MassMomentOfInertiaUnit.TonneSquareMeter },
            new object[] { MassMomentOfInertiaUnit.TonneSquareMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MassMomentOfInertia();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MassMomentOfInertiaUnit.KilogramSquareMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new MassMomentOfInertia(double.PositiveInfinity, MassMomentOfInertiaUnit.KilogramSquareMeter));
            var exception2 = Record.Exception(() => new MassMomentOfInertia(double.NegativeInfinity, MassMomentOfInertiaUnit.KilogramSquareMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new MassMomentOfInertia(double.NaN, MassMomentOfInertiaUnit.KilogramSquareMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MassMomentOfInertia(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new MassMomentOfInertia(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new MassMomentOfInertia(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void MassMomentOfInertia_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            MassMomentOfInertiaUnit[] unitsOrderedByName = EnumUtils.GetEnumValues<MassMomentOfInertiaUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilogramSquareMeter);

            QuantityInfo<MassMomentOfInertia, MassMomentOfInertiaUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("MassMomentOfInertia", quantityInfo.Name);
            Assert.Equal(MassMomentOfInertia.Zero, quantityInfo.Zero);
            Assert.Equal(MassMomentOfInertia.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(MassMomentOfInertia.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<MassMomentOfInertiaUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void MassMomentOfInertiaInfo_CreateWithCustomUnitInfos()
        {
            MassMomentOfInertiaUnit[] expectedUnits = [MassMomentOfInertiaUnit.KilogramSquareMeter];

            MassMomentOfInertia.MassMomentOfInertiaInfo quantityInfo = MassMomentOfInertia.MassMomentOfInertiaInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("MassMomentOfInertia", quantityInfo.Name);
            Assert.Equal(MassMomentOfInertia.Zero, quantityInfo.Zero);
            Assert.Equal(MassMomentOfInertia.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void KilogramSquareMeterToMassMomentOfInertiaUnits()
        {
            MassMomentOfInertia kilogramsquaremeter = MassMomentOfInertia.FromKilogramSquareMeters(1);
            AssertEx.EqualTolerance(GramSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.GramSquareCentimeters, GramSquareCentimetersTolerance);
            AssertEx.EqualTolerance(GramSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.GramSquareDecimeters, GramSquareDecimetersTolerance);
            AssertEx.EqualTolerance(GramSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.GramSquareMeters, GramSquareMetersTolerance);
            AssertEx.EqualTolerance(GramSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.GramSquareMillimeters, GramSquareMillimetersTolerance);
            AssertEx.EqualTolerance(KilogramSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.KilogramSquareCentimeters, KilogramSquareCentimetersTolerance);
            AssertEx.EqualTolerance(KilogramSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.KilogramSquareDecimeters, KilogramSquareDecimetersTolerance);
            AssertEx.EqualTolerance(KilogramSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.KilogramSquareMeters, KilogramSquareMetersTolerance);
            AssertEx.EqualTolerance(KilogramSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.KilogramSquareMillimeters, KilogramSquareMillimetersTolerance);
            AssertEx.EqualTolerance(KilotonneSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.KilotonneSquareCentimeters, KilotonneSquareCentimetersTolerance);
            AssertEx.EqualTolerance(KilotonneSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.KilotonneSquareDecimeters, KilotonneSquareDecimetersTolerance);
            AssertEx.EqualTolerance(KilotonneSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.KilotonneSquareMeters, KilotonneSquareMetersTolerance);
            AssertEx.EqualTolerance(KilotonneSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.KilotonneSquareMillimeters, KilotonneSquareMillimetersTolerance);
            AssertEx.EqualTolerance(MegatonneSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.MegatonneSquareCentimeters, MegatonneSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MegatonneSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.MegatonneSquareDecimeters, MegatonneSquareDecimetersTolerance);
            AssertEx.EqualTolerance(MegatonneSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.MegatonneSquareMeters, MegatonneSquareMetersTolerance);
            AssertEx.EqualTolerance(MegatonneSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.MegatonneSquareMillimeters, MegatonneSquareMillimetersTolerance);
            AssertEx.EqualTolerance(MilligramSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.MilligramSquareCentimeters, MilligramSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MilligramSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.MilligramSquareDecimeters, MilligramSquareDecimetersTolerance);
            AssertEx.EqualTolerance(MilligramSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.MilligramSquareMeters, MilligramSquareMetersTolerance);
            AssertEx.EqualTolerance(MilligramSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.MilligramSquareMillimeters, MilligramSquareMillimetersTolerance);
            AssertEx.EqualTolerance(PoundSquareFeetInOneKilogramSquareMeter, kilogramsquaremeter.PoundSquareFeet, PoundSquareFeetTolerance);
            AssertEx.EqualTolerance(PoundSquareInchesInOneKilogramSquareMeter, kilogramsquaremeter.PoundSquareInches, PoundSquareInchesTolerance);
            AssertEx.EqualTolerance(SlugSquareFeetInOneKilogramSquareMeter, kilogramsquaremeter.SlugSquareFeet, SlugSquareFeetTolerance);
            AssertEx.EqualTolerance(SlugSquareInchesInOneKilogramSquareMeter, kilogramsquaremeter.SlugSquareInches, SlugSquareInchesTolerance);
            AssertEx.EqualTolerance(TonneSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.TonneSquareCentimeters, TonneSquareCentimetersTolerance);
            AssertEx.EqualTolerance(TonneSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.TonneSquareDecimeters, TonneSquareDecimetersTolerance);
            AssertEx.EqualTolerance(TonneSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.TonneSquareMeters, TonneSquareMetersTolerance);
            AssertEx.EqualTolerance(TonneSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.TonneSquareMillimeters, TonneSquareMillimetersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.GramSquareCentimeter);
            Assert.Equal(1, quantity00.GramSquareCentimeters);
            Assert.Equal(MassMomentOfInertiaUnit.GramSquareCentimeter, quantity00.Unit);

            var quantity01 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.GramSquareDecimeter);
            Assert.Equal(1, quantity01.GramSquareDecimeters);
            Assert.Equal(MassMomentOfInertiaUnit.GramSquareDecimeter, quantity01.Unit);

            var quantity02 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.GramSquareMeter);
            Assert.Equal(1, quantity02.GramSquareMeters);
            Assert.Equal(MassMomentOfInertiaUnit.GramSquareMeter, quantity02.Unit);

            var quantity03 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.GramSquareMillimeter);
            Assert.Equal(1, quantity03.GramSquareMillimeters);
            Assert.Equal(MassMomentOfInertiaUnit.GramSquareMillimeter, quantity03.Unit);

            var quantity04 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.KilogramSquareCentimeter);
            Assert.Equal(1, quantity04.KilogramSquareCentimeters);
            Assert.Equal(MassMomentOfInertiaUnit.KilogramSquareCentimeter, quantity04.Unit);

            var quantity05 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.KilogramSquareDecimeter);
            Assert.Equal(1, quantity05.KilogramSquareDecimeters);
            Assert.Equal(MassMomentOfInertiaUnit.KilogramSquareDecimeter, quantity05.Unit);

            var quantity06 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.KilogramSquareMeter);
            Assert.Equal(1, quantity06.KilogramSquareMeters);
            Assert.Equal(MassMomentOfInertiaUnit.KilogramSquareMeter, quantity06.Unit);

            var quantity07 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.KilogramSquareMillimeter);
            Assert.Equal(1, quantity07.KilogramSquareMillimeters);
            Assert.Equal(MassMomentOfInertiaUnit.KilogramSquareMillimeter, quantity07.Unit);

            var quantity08 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.KilotonneSquareCentimeter);
            Assert.Equal(1, quantity08.KilotonneSquareCentimeters);
            Assert.Equal(MassMomentOfInertiaUnit.KilotonneSquareCentimeter, quantity08.Unit);

            var quantity09 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.KilotonneSquareDecimeter);
            Assert.Equal(1, quantity09.KilotonneSquareDecimeters);
            Assert.Equal(MassMomentOfInertiaUnit.KilotonneSquareDecimeter, quantity09.Unit);

            var quantity10 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.KilotonneSquareMeter);
            Assert.Equal(1, quantity10.KilotonneSquareMeters);
            Assert.Equal(MassMomentOfInertiaUnit.KilotonneSquareMeter, quantity10.Unit);

            var quantity11 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.KilotonneSquareMillimeter);
            Assert.Equal(1, quantity11.KilotonneSquareMillimeters);
            Assert.Equal(MassMomentOfInertiaUnit.KilotonneSquareMillimeter, quantity11.Unit);

            var quantity12 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.MegatonneSquareCentimeter);
            Assert.Equal(1, quantity12.MegatonneSquareCentimeters);
            Assert.Equal(MassMomentOfInertiaUnit.MegatonneSquareCentimeter, quantity12.Unit);

            var quantity13 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.MegatonneSquareDecimeter);
            Assert.Equal(1, quantity13.MegatonneSquareDecimeters);
            Assert.Equal(MassMomentOfInertiaUnit.MegatonneSquareDecimeter, quantity13.Unit);

            var quantity14 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.MegatonneSquareMeter);
            Assert.Equal(1, quantity14.MegatonneSquareMeters);
            Assert.Equal(MassMomentOfInertiaUnit.MegatonneSquareMeter, quantity14.Unit);

            var quantity15 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.MegatonneSquareMillimeter);
            Assert.Equal(1, quantity15.MegatonneSquareMillimeters);
            Assert.Equal(MassMomentOfInertiaUnit.MegatonneSquareMillimeter, quantity15.Unit);

            var quantity16 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.MilligramSquareCentimeter);
            Assert.Equal(1, quantity16.MilligramSquareCentimeters);
            Assert.Equal(MassMomentOfInertiaUnit.MilligramSquareCentimeter, quantity16.Unit);

            var quantity17 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.MilligramSquareDecimeter);
            Assert.Equal(1, quantity17.MilligramSquareDecimeters);
            Assert.Equal(MassMomentOfInertiaUnit.MilligramSquareDecimeter, quantity17.Unit);

            var quantity18 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.MilligramSquareMeter);
            Assert.Equal(1, quantity18.MilligramSquareMeters);
            Assert.Equal(MassMomentOfInertiaUnit.MilligramSquareMeter, quantity18.Unit);

            var quantity19 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.MilligramSquareMillimeter);
            Assert.Equal(1, quantity19.MilligramSquareMillimeters);
            Assert.Equal(MassMomentOfInertiaUnit.MilligramSquareMillimeter, quantity19.Unit);

            var quantity20 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.PoundSquareFoot);
            Assert.Equal(1, quantity20.PoundSquareFeet);
            Assert.Equal(MassMomentOfInertiaUnit.PoundSquareFoot, quantity20.Unit);

            var quantity21 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.PoundSquareInch);
            Assert.Equal(1, quantity21.PoundSquareInches);
            Assert.Equal(MassMomentOfInertiaUnit.PoundSquareInch, quantity21.Unit);

            var quantity22 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.SlugSquareFoot);
            Assert.Equal(1, quantity22.SlugSquareFeet);
            Assert.Equal(MassMomentOfInertiaUnit.SlugSquareFoot, quantity22.Unit);

            var quantity23 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.SlugSquareInch);
            Assert.Equal(1, quantity23.SlugSquareInches);
            Assert.Equal(MassMomentOfInertiaUnit.SlugSquareInch, quantity23.Unit);

            var quantity24 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.TonneSquareCentimeter);
            Assert.Equal(1, quantity24.TonneSquareCentimeters);
            Assert.Equal(MassMomentOfInertiaUnit.TonneSquareCentimeter, quantity24.Unit);

            var quantity25 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.TonneSquareDecimeter);
            Assert.Equal(1, quantity25.TonneSquareDecimeters);
            Assert.Equal(MassMomentOfInertiaUnit.TonneSquareDecimeter, quantity25.Unit);

            var quantity26 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.TonneSquareMeter);
            Assert.Equal(1, quantity26.TonneSquareMeters);
            Assert.Equal(MassMomentOfInertiaUnit.TonneSquareMeter, quantity26.Unit);

            var quantity27 = MassMomentOfInertia.From(1, MassMomentOfInertiaUnit.TonneSquareMillimeter);
            Assert.Equal(1, quantity27.TonneSquareMillimeters);
            Assert.Equal(MassMomentOfInertiaUnit.TonneSquareMillimeter, quantity27.Unit);

        }

        [Fact]
        public void FromKilogramSquareMeters_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => MassMomentOfInertia.FromKilogramSquareMeters(double.PositiveInfinity));
            var exception2 = Record.Exception(() => MassMomentOfInertia.FromKilogramSquareMeters(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromKilogramSquareMeters_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => MassMomentOfInertia.FromKilogramSquareMeters(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var kilogramsquaremeter = MassMomentOfInertia.FromKilogramSquareMeters(1);
            AssertEx.EqualTolerance(GramSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.GramSquareCentimeter), GramSquareCentimetersTolerance);
            AssertEx.EqualTolerance(GramSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.GramSquareDecimeter), GramSquareDecimetersTolerance);
            AssertEx.EqualTolerance(GramSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.GramSquareMeter), GramSquareMetersTolerance);
            AssertEx.EqualTolerance(GramSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.GramSquareMillimeter), GramSquareMillimetersTolerance);
            AssertEx.EqualTolerance(KilogramSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.KilogramSquareCentimeter), KilogramSquareCentimetersTolerance);
            AssertEx.EqualTolerance(KilogramSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.KilogramSquareDecimeter), KilogramSquareDecimetersTolerance);
            AssertEx.EqualTolerance(KilogramSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.KilogramSquareMeter), KilogramSquareMetersTolerance);
            AssertEx.EqualTolerance(KilogramSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.KilogramSquareMillimeter), KilogramSquareMillimetersTolerance);
            AssertEx.EqualTolerance(KilotonneSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.KilotonneSquareCentimeter), KilotonneSquareCentimetersTolerance);
            AssertEx.EqualTolerance(KilotonneSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.KilotonneSquareDecimeter), KilotonneSquareDecimetersTolerance);
            AssertEx.EqualTolerance(KilotonneSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.KilotonneSquareMeter), KilotonneSquareMetersTolerance);
            AssertEx.EqualTolerance(KilotonneSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.KilotonneSquareMillimeter), KilotonneSquareMillimetersTolerance);
            AssertEx.EqualTolerance(MegatonneSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.MegatonneSquareCentimeter), MegatonneSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MegatonneSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.MegatonneSquareDecimeter), MegatonneSquareDecimetersTolerance);
            AssertEx.EqualTolerance(MegatonneSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.MegatonneSquareMeter), MegatonneSquareMetersTolerance);
            AssertEx.EqualTolerance(MegatonneSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.MegatonneSquareMillimeter), MegatonneSquareMillimetersTolerance);
            AssertEx.EqualTolerance(MilligramSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.MilligramSquareCentimeter), MilligramSquareCentimetersTolerance);
            AssertEx.EqualTolerance(MilligramSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.MilligramSquareDecimeter), MilligramSquareDecimetersTolerance);
            AssertEx.EqualTolerance(MilligramSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.MilligramSquareMeter), MilligramSquareMetersTolerance);
            AssertEx.EqualTolerance(MilligramSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.MilligramSquareMillimeter), MilligramSquareMillimetersTolerance);
            AssertEx.EqualTolerance(PoundSquareFeetInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.PoundSquareFoot), PoundSquareFeetTolerance);
            AssertEx.EqualTolerance(PoundSquareInchesInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.PoundSquareInch), PoundSquareInchesTolerance);
            AssertEx.EqualTolerance(SlugSquareFeetInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.SlugSquareFoot), SlugSquareFeetTolerance);
            AssertEx.EqualTolerance(SlugSquareInchesInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.SlugSquareInch), SlugSquareInchesTolerance);
            AssertEx.EqualTolerance(TonneSquareCentimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.TonneSquareCentimeter), TonneSquareCentimetersTolerance);
            AssertEx.EqualTolerance(TonneSquareDecimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.TonneSquareDecimeter), TonneSquareDecimetersTolerance);
            AssertEx.EqualTolerance(TonneSquareMetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.TonneSquareMeter), TonneSquareMetersTolerance);
            AssertEx.EqualTolerance(TonneSquareMillimetersInOneKilogramSquareMeter, kilogramsquaremeter.As(MassMomentOfInertiaUnit.TonneSquareMillimeter), TonneSquareMillimetersTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = MassMomentOfInertia.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
            var expectedValue = quantity.As(MassMomentOfInertia.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
            var expectedUnit = MassMomentOfInertia.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                MassMomentOfInertia quantityToConvert = quantity;

                MassMomentOfInertia convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<MassMomentOfInertiaUnit> quantityToConvert = quantity;

                IQuantity<MassMomentOfInertiaUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() => 
            {
                var quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<MassMomentOfInertiaUnit> quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<MassMomentOfInertiaUnit> quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new MassMomentOfInertia(value: 1, unit: MassMomentOfInertia.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 g·m²", MassMomentOfInertiaUnit.GramSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 lb·in²", MassMomentOfInertiaUnit.PoundSquareInch, 4.2)]
        [InlineData("en-US", "4.2 slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 slug·in²", MassMomentOfInertiaUnit.SlugSquareInch, 4.2)]
        [InlineData("en-US", "4.2 t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 t·m²", MassMomentOfInertiaUnit.TonneSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter, 4.2)]
        public void Parse(string culture, string quantityString, MassMomentOfInertiaUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = MassMomentOfInertia.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 g·m²", MassMomentOfInertiaUnit.GramSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 lb·in²", MassMomentOfInertiaUnit.PoundSquareInch, 4.2)]
        [InlineData("en-US", "4.2 slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 slug·in²", MassMomentOfInertiaUnit.SlugSquareInch, 4.2)]
        [InlineData("en-US", "4.2 t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 t·m²", MassMomentOfInertiaUnit.TonneSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter, 4.2)]
        public void TryParse(string culture, string quantityString, MassMomentOfInertiaUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(MassMomentOfInertia.TryParse(quantityString, out MassMomentOfInertia parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter)]
        [InlineData("g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter)]
        [InlineData("g·m²", MassMomentOfInertiaUnit.GramSquareMeter)]
        [InlineData("g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter)]
        [InlineData("kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter)]
        [InlineData("kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter)]
        [InlineData("kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter)]
        [InlineData("kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter)]
        [InlineData("kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter)]
        [InlineData("kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter)]
        [InlineData("kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter)]
        [InlineData("kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter)]
        [InlineData("Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter)]
        [InlineData("Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter)]
        [InlineData("Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter)]
        [InlineData("Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter)]
        [InlineData("mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter)]
        [InlineData("mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter)]
        [InlineData("mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter)]
        [InlineData("mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter)]
        [InlineData("lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot)]
        [InlineData("lb·in²", MassMomentOfInertiaUnit.PoundSquareInch)]
        [InlineData("slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot)]
        [InlineData("slug·in²", MassMomentOfInertiaUnit.SlugSquareInch)]
        [InlineData("t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter)]
        [InlineData("t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter)]
        [InlineData("t·m²", MassMomentOfInertiaUnit.TonneSquareMeter)]
        [InlineData("t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MassMomentOfInertiaUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            MassMomentOfInertiaUnit parsedUnit = MassMomentOfInertia.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter)]
        [InlineData("g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter)]
        [InlineData("g·m²", MassMomentOfInertiaUnit.GramSquareMeter)]
        [InlineData("g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter)]
        [InlineData("kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter)]
        [InlineData("kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter)]
        [InlineData("kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter)]
        [InlineData("kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter)]
        [InlineData("kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter)]
        [InlineData("kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter)]
        [InlineData("kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter)]
        [InlineData("kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter)]
        [InlineData("Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter)]
        [InlineData("Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter)]
        [InlineData("Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter)]
        [InlineData("Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter)]
        [InlineData("mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter)]
        [InlineData("mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter)]
        [InlineData("mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter)]
        [InlineData("mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter)]
        [InlineData("lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot)]
        [InlineData("lb·in²", MassMomentOfInertiaUnit.PoundSquareInch)]
        [InlineData("slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot)]
        [InlineData("slug·in²", MassMomentOfInertiaUnit.SlugSquareInch)]
        [InlineData("t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter)]
        [InlineData("t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter)]
        [InlineData("t·m²", MassMomentOfInertiaUnit.TonneSquareMeter)]
        [InlineData("t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MassMomentOfInertiaUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            MassMomentOfInertiaUnit parsedUnit = MassMomentOfInertia.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter)]
        [InlineData("en-US", "g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter)]
        [InlineData("en-US", "g·m²", MassMomentOfInertiaUnit.GramSquareMeter)]
        [InlineData("en-US", "g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter)]
        [InlineData("en-US", "kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter)]
        [InlineData("en-US", "kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter)]
        [InlineData("en-US", "kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter)]
        [InlineData("en-US", "kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter)]
        [InlineData("en-US", "kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter)]
        [InlineData("en-US", "kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter)]
        [InlineData("en-US", "kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter)]
        [InlineData("en-US", "kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter)]
        [InlineData("en-US", "Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter)]
        [InlineData("en-US", "Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter)]
        [InlineData("en-US", "Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter)]
        [InlineData("en-US", "Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter)]
        [InlineData("en-US", "mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter)]
        [InlineData("en-US", "mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter)]
        [InlineData("en-US", "mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter)]
        [InlineData("en-US", "mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter)]
        [InlineData("en-US", "lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot)]
        [InlineData("en-US", "lb·in²", MassMomentOfInertiaUnit.PoundSquareInch)]
        [InlineData("en-US", "slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot)]
        [InlineData("en-US", "slug·in²", MassMomentOfInertiaUnit.SlugSquareInch)]
        [InlineData("en-US", "t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter)]
        [InlineData("en-US", "t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter)]
        [InlineData("en-US", "t·m²", MassMomentOfInertiaUnit.TonneSquareMeter)]
        [InlineData("en-US", "t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, MassMomentOfInertiaUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            MassMomentOfInertiaUnit parsedUnit = MassMomentOfInertia.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter)]
        [InlineData("en-US", "g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter)]
        [InlineData("en-US", "g·m²", MassMomentOfInertiaUnit.GramSquareMeter)]
        [InlineData("en-US", "g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter)]
        [InlineData("en-US", "kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter)]
        [InlineData("en-US", "kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter)]
        [InlineData("en-US", "kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter)]
        [InlineData("en-US", "kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter)]
        [InlineData("en-US", "kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter)]
        [InlineData("en-US", "kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter)]
        [InlineData("en-US", "kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter)]
        [InlineData("en-US", "kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter)]
        [InlineData("en-US", "Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter)]
        [InlineData("en-US", "Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter)]
        [InlineData("en-US", "Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter)]
        [InlineData("en-US", "Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter)]
        [InlineData("en-US", "mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter)]
        [InlineData("en-US", "mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter)]
        [InlineData("en-US", "mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter)]
        [InlineData("en-US", "mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter)]
        [InlineData("en-US", "lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot)]
        [InlineData("en-US", "lb·in²", MassMomentOfInertiaUnit.PoundSquareInch)]
        [InlineData("en-US", "slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot)]
        [InlineData("en-US", "slug·in²", MassMomentOfInertiaUnit.SlugSquareInch)]
        [InlineData("en-US", "t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter)]
        [InlineData("en-US", "t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter)]
        [InlineData("en-US", "t·m²", MassMomentOfInertiaUnit.TonneSquareMeter)]
        [InlineData("en-US", "t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, MassMomentOfInertiaUnit expectedUnit)
        {
            MassMomentOfInertiaUnit parsedUnit = MassMomentOfInertia.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter)]
        [InlineData("g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter)]
        [InlineData("g·m²", MassMomentOfInertiaUnit.GramSquareMeter)]
        [InlineData("g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter)]
        [InlineData("kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter)]
        [InlineData("kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter)]
        [InlineData("kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter)]
        [InlineData("kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter)]
        [InlineData("kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter)]
        [InlineData("kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter)]
        [InlineData("kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter)]
        [InlineData("kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter)]
        [InlineData("Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter)]
        [InlineData("Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter)]
        [InlineData("Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter)]
        [InlineData("Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter)]
        [InlineData("mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter)]
        [InlineData("mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter)]
        [InlineData("mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter)]
        [InlineData("mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter)]
        [InlineData("lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot)]
        [InlineData("lb·in²", MassMomentOfInertiaUnit.PoundSquareInch)]
        [InlineData("slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot)]
        [InlineData("slug·in²", MassMomentOfInertiaUnit.SlugSquareInch)]
        [InlineData("t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter)]
        [InlineData("t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter)]
        [InlineData("t·m²", MassMomentOfInertiaUnit.TonneSquareMeter)]
        [InlineData("t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MassMomentOfInertiaUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(MassMomentOfInertia.TryParseUnit(abbreviation, out MassMomentOfInertiaUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter)]
        [InlineData("g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter)]
        [InlineData("g·m²", MassMomentOfInertiaUnit.GramSquareMeter)]
        [InlineData("g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter)]
        [InlineData("kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter)]
        [InlineData("kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter)]
        [InlineData("kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter)]
        [InlineData("kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter)]
        [InlineData("kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter)]
        [InlineData("kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter)]
        [InlineData("kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter)]
        [InlineData("kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter)]
        [InlineData("Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter)]
        [InlineData("Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter)]
        [InlineData("Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter)]
        [InlineData("Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter)]
        [InlineData("mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter)]
        [InlineData("mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter)]
        [InlineData("mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter)]
        [InlineData("mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter)]
        [InlineData("lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot)]
        [InlineData("lb·in²", MassMomentOfInertiaUnit.PoundSquareInch)]
        [InlineData("slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot)]
        [InlineData("slug·in²", MassMomentOfInertiaUnit.SlugSquareInch)]
        [InlineData("t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter)]
        [InlineData("t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter)]
        [InlineData("t·m²", MassMomentOfInertiaUnit.TonneSquareMeter)]
        [InlineData("t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MassMomentOfInertiaUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(MassMomentOfInertia.TryParseUnit(abbreviation, out MassMomentOfInertiaUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter)]
        [InlineData("en-US", "g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter)]
        [InlineData("en-US", "g·m²", MassMomentOfInertiaUnit.GramSquareMeter)]
        [InlineData("en-US", "g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter)]
        [InlineData("en-US", "kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter)]
        [InlineData("en-US", "kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter)]
        [InlineData("en-US", "kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter)]
        [InlineData("en-US", "kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter)]
        [InlineData("en-US", "kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter)]
        [InlineData("en-US", "kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter)]
        [InlineData("en-US", "kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter)]
        [InlineData("en-US", "kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter)]
        [InlineData("en-US", "Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter)]
        [InlineData("en-US", "Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter)]
        [InlineData("en-US", "Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter)]
        [InlineData("en-US", "Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter)]
        [InlineData("en-US", "mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter)]
        [InlineData("en-US", "mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter)]
        [InlineData("en-US", "mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter)]
        [InlineData("en-US", "mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter)]
        [InlineData("en-US", "lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot)]
        [InlineData("en-US", "lb·in²", MassMomentOfInertiaUnit.PoundSquareInch)]
        [InlineData("en-US", "slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot)]
        [InlineData("en-US", "slug·in²", MassMomentOfInertiaUnit.SlugSquareInch)]
        [InlineData("en-US", "t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter)]
        [InlineData("en-US", "t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter)]
        [InlineData("en-US", "t·m²", MassMomentOfInertiaUnit.TonneSquareMeter)]
        [InlineData("en-US", "t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, MassMomentOfInertiaUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(MassMomentOfInertia.TryParseUnit(abbreviation, out MassMomentOfInertiaUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "g·cm²", MassMomentOfInertiaUnit.GramSquareCentimeter)]
        [InlineData("en-US", "g·dm²", MassMomentOfInertiaUnit.GramSquareDecimeter)]
        [InlineData("en-US", "g·m²", MassMomentOfInertiaUnit.GramSquareMeter)]
        [InlineData("en-US", "g·mm²", MassMomentOfInertiaUnit.GramSquareMillimeter)]
        [InlineData("en-US", "kg·cm²", MassMomentOfInertiaUnit.KilogramSquareCentimeter)]
        [InlineData("en-US", "kg·dm²", MassMomentOfInertiaUnit.KilogramSquareDecimeter)]
        [InlineData("en-US", "kg·m²", MassMomentOfInertiaUnit.KilogramSquareMeter)]
        [InlineData("en-US", "kg·mm²", MassMomentOfInertiaUnit.KilogramSquareMillimeter)]
        [InlineData("en-US", "kt·cm²", MassMomentOfInertiaUnit.KilotonneSquareCentimeter)]
        [InlineData("en-US", "kt·dm²", MassMomentOfInertiaUnit.KilotonneSquareDecimeter)]
        [InlineData("en-US", "kt·m²", MassMomentOfInertiaUnit.KilotonneSquareMeter)]
        [InlineData("en-US", "kt·mm²", MassMomentOfInertiaUnit.KilotonneSquareMillimeter)]
        [InlineData("en-US", "Mt·cm²", MassMomentOfInertiaUnit.MegatonneSquareCentimeter)]
        [InlineData("en-US", "Mt·dm²", MassMomentOfInertiaUnit.MegatonneSquareDecimeter)]
        [InlineData("en-US", "Mt·m²", MassMomentOfInertiaUnit.MegatonneSquareMeter)]
        [InlineData("en-US", "Mt·mm²", MassMomentOfInertiaUnit.MegatonneSquareMillimeter)]
        [InlineData("en-US", "mg·cm²", MassMomentOfInertiaUnit.MilligramSquareCentimeter)]
        [InlineData("en-US", "mg·dm²", MassMomentOfInertiaUnit.MilligramSquareDecimeter)]
        [InlineData("en-US", "mg·m²", MassMomentOfInertiaUnit.MilligramSquareMeter)]
        [InlineData("en-US", "mg·mm²", MassMomentOfInertiaUnit.MilligramSquareMillimeter)]
        [InlineData("en-US", "lb·ft²", MassMomentOfInertiaUnit.PoundSquareFoot)]
        [InlineData("en-US", "lb·in²", MassMomentOfInertiaUnit.PoundSquareInch)]
        [InlineData("en-US", "slug·ft²", MassMomentOfInertiaUnit.SlugSquareFoot)]
        [InlineData("en-US", "slug·in²", MassMomentOfInertiaUnit.SlugSquareInch)]
        [InlineData("en-US", "t·cm²", MassMomentOfInertiaUnit.TonneSquareCentimeter)]
        [InlineData("en-US", "t·dm²", MassMomentOfInertiaUnit.TonneSquareDecimeter)]
        [InlineData("en-US", "t·m²", MassMomentOfInertiaUnit.TonneSquareMeter)]
        [InlineData("en-US", "t·mm²", MassMomentOfInertiaUnit.TonneSquareMillimeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, MassMomentOfInertiaUnit expectedUnit)
        {
            Assert.True(MassMomentOfInertia.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out MassMomentOfInertiaUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", MassMomentOfInertiaUnit.GramSquareCentimeter, "g·cm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.GramSquareDecimeter, "g·dm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.GramSquareMeter, "g·m²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.GramSquareMillimeter, "g·mm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.KilogramSquareCentimeter, "kg·cm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.KilogramSquareDecimeter, "kg·dm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.KilogramSquareMeter, "kg·m²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.KilogramSquareMillimeter, "kg·mm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.KilotonneSquareCentimeter, "kt·cm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.KilotonneSquareDecimeter, "kt·dm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.KilotonneSquareMeter, "kt·m²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.KilotonneSquareMillimeter, "kt·mm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.MegatonneSquareCentimeter, "Mt·cm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.MegatonneSquareDecimeter, "Mt·dm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.MegatonneSquareMeter, "Mt·m²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.MegatonneSquareMillimeter, "Mt·mm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.MilligramSquareCentimeter, "mg·cm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.MilligramSquareDecimeter, "mg·dm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.MilligramSquareMeter, "mg·m²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.MilligramSquareMillimeter, "mg·mm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.PoundSquareFoot, "lb·ft²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.PoundSquareInch, "lb·in²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.SlugSquareFoot, "slug·ft²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.SlugSquareInch, "slug·in²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.TonneSquareCentimeter, "t·cm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.TonneSquareDecimeter, "t·dm²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.TonneSquareMeter, "t·m²")]
        [InlineData("en-US", MassMomentOfInertiaUnit.TonneSquareMillimeter, "t·mm²")]
        public void GetAbbreviationForCulture(string culture, MassMomentOfInertiaUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = MassMomentOfInertia.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(MassMomentOfInertia.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = MassMomentOfInertia.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MassMomentOfInertiaUnit unit)
        {
            var inBaseUnits = MassMomentOfInertia.From(1.0, MassMomentOfInertia.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MassMomentOfInertiaUnit unit)
        {
            var quantity = MassMomentOfInertia.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MassMomentOfInertiaUnit unit)
        {
            Assert.All(MassMomentOfInertia.Units.Where(u => u != MassMomentOfInertia.BaseUnit), fromUnit =>
            {
                var quantity = MassMomentOfInertia.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MassMomentOfInertiaUnit unit)
        {
            var quantity = default(MassMomentOfInertia);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(MassMomentOfInertiaUnit unit)
        {
            var quantity = MassMomentOfInertia.From(3, MassMomentOfInertia.BaseUnit);
            MassMomentOfInertia expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<MassMomentOfInertiaUnit> quantityToConvert = quantity;
                IQuantity<MassMomentOfInertiaUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MassMomentOfInertia kilogramsquaremeter = MassMomentOfInertia.FromKilogramSquareMeters(3);
            Assert.Equal(3, MassMomentOfInertia.FromGramSquareCentimeters(kilogramsquaremeter.GramSquareCentimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromGramSquareDecimeters(kilogramsquaremeter.GramSquareDecimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromGramSquareMeters(kilogramsquaremeter.GramSquareMeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromGramSquareMillimeters(kilogramsquaremeter.GramSquareMillimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromKilogramSquareCentimeters(kilogramsquaremeter.KilogramSquareCentimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromKilogramSquareDecimeters(kilogramsquaremeter.KilogramSquareDecimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromKilogramSquareMeters(kilogramsquaremeter.KilogramSquareMeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromKilogramSquareMillimeters(kilogramsquaremeter.KilogramSquareMillimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromKilotonneSquareCentimeters(kilogramsquaremeter.KilotonneSquareCentimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromKilotonneSquareDecimeters(kilogramsquaremeter.KilotonneSquareDecimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromKilotonneSquareMeters(kilogramsquaremeter.KilotonneSquareMeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromKilotonneSquareMillimeters(kilogramsquaremeter.KilotonneSquareMillimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromMegatonneSquareCentimeters(kilogramsquaremeter.MegatonneSquareCentimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromMegatonneSquareDecimeters(kilogramsquaremeter.MegatonneSquareDecimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromMegatonneSquareMeters(kilogramsquaremeter.MegatonneSquareMeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromMegatonneSquareMillimeters(kilogramsquaremeter.MegatonneSquareMillimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromMilligramSquareCentimeters(kilogramsquaremeter.MilligramSquareCentimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromMilligramSquareDecimeters(kilogramsquaremeter.MilligramSquareDecimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromMilligramSquareMeters(kilogramsquaremeter.MilligramSquareMeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromMilligramSquareMillimeters(kilogramsquaremeter.MilligramSquareMillimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromPoundSquareFeet(kilogramsquaremeter.PoundSquareFeet).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromPoundSquareInches(kilogramsquaremeter.PoundSquareInches).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromSlugSquareFeet(kilogramsquaremeter.SlugSquareFeet).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromSlugSquareInches(kilogramsquaremeter.SlugSquareInches).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromTonneSquareCentimeters(kilogramsquaremeter.TonneSquareCentimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromTonneSquareDecimeters(kilogramsquaremeter.TonneSquareDecimeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromTonneSquareMeters(kilogramsquaremeter.TonneSquareMeters).KilogramSquareMeters);
            Assert.Equal(3, MassMomentOfInertia.FromTonneSquareMillimeters(kilogramsquaremeter.TonneSquareMillimeters).KilogramSquareMeters);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MassMomentOfInertia v = MassMomentOfInertia.FromKilogramSquareMeters(1);
            Assert.Equal(-1, -v.KilogramSquareMeters);
            Assert.Equal(2, (MassMomentOfInertia.FromKilogramSquareMeters(3) - v).KilogramSquareMeters);
            Assert.Equal(2, (v + v).KilogramSquareMeters);
            Assert.Equal(10, (v * 10).KilogramSquareMeters);
            Assert.Equal(10, (10 * v).KilogramSquareMeters);
            Assert.Equal(2, (MassMomentOfInertia.FromKilogramSquareMeters(10) / 5).KilogramSquareMeters);
            Assert.Equal(2, MassMomentOfInertia.FromKilogramSquareMeters(10) / MassMomentOfInertia.FromKilogramSquareMeters(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            MassMomentOfInertia oneKilogramSquareMeter = MassMomentOfInertia.FromKilogramSquareMeters(1);
            MassMomentOfInertia twoKilogramSquareMeters = MassMomentOfInertia.FromKilogramSquareMeters(2);

            Assert.True(oneKilogramSquareMeter < twoKilogramSquareMeters);
            Assert.True(oneKilogramSquareMeter <= twoKilogramSquareMeters);
            Assert.True(twoKilogramSquareMeters > oneKilogramSquareMeter);
            Assert.True(twoKilogramSquareMeters >= oneKilogramSquareMeter);

            Assert.False(oneKilogramSquareMeter > twoKilogramSquareMeters);
            Assert.False(oneKilogramSquareMeter >= twoKilogramSquareMeters);
            Assert.False(twoKilogramSquareMeters < oneKilogramSquareMeter);
            Assert.False(twoKilogramSquareMeters <= oneKilogramSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MassMomentOfInertia kilogramsquaremeter = MassMomentOfInertia.FromKilogramSquareMeters(1);
            Assert.Equal(0, kilogramsquaremeter.CompareTo(kilogramsquaremeter));
            Assert.True(kilogramsquaremeter.CompareTo(MassMomentOfInertia.Zero) > 0);
            Assert.True(MassMomentOfInertia.Zero.CompareTo(kilogramsquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MassMomentOfInertia kilogramsquaremeter = MassMomentOfInertia.FromKilogramSquareMeters(1);
            Assert.Throws<ArgumentException>(() => kilogramsquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MassMomentOfInertia kilogramsquaremeter = MassMomentOfInertia.FromKilogramSquareMeters(1);
            Assert.Throws<ArgumentNullException>(() => kilogramsquaremeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MassMomentOfInertiaUnit.KilogramSquareMeter, 1, MassMomentOfInertiaUnit.KilogramSquareMeter, true)]  // Same value and unit.
        [InlineData(1, MassMomentOfInertiaUnit.KilogramSquareMeter, 2, MassMomentOfInertiaUnit.KilogramSquareMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MassMomentOfInertiaUnit unitA, double valueB, MassMomentOfInertiaUnit unitB, bool expectEqual)
        {
            var a = new MassMomentOfInertia(valueA, unitA);
            var b = new MassMomentOfInertia(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = MassMomentOfInertia.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MassMomentOfInertia kilogramsquaremeter = MassMomentOfInertia.FromKilogramSquareMeters(1);
            Assert.False(kilogramsquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MassMomentOfInertia kilogramsquaremeter = MassMomentOfInertia.FromKilogramSquareMeters(1);
            Assert.False(kilogramsquaremeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance_IsImplemented(double firstValue, double secondValue)
        {
            var quantity = MassMomentOfInertia.FromKilogramSquareMeters(firstValue);
            var otherQuantity = MassMomentOfInertia.FromKilogramSquareMeters(secondValue);
            MassMomentOfInertia maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, MassMomentOfInertia.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = MassMomentOfInertia.FromKilogramSquareMeters(1);
            var negativeTolerance = MassMomentOfInertia.FromKilogramSquareMeters(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(MassMomentOfInertiaUnit)).Cast<MassMomentOfInertiaUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MassMomentOfInertia.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(MassMomentOfInertia.Info.Units, MassMomentOfInertia.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, MassMomentOfInertia.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 g·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.GramSquareCentimeter).ToString());
            Assert.Equal("1 g·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.GramSquareDecimeter).ToString());
            Assert.Equal("1 g·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.GramSquareMeter).ToString());
            Assert.Equal("1 g·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.GramSquareMillimeter).ToString());
            Assert.Equal("1 kg·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilogramSquareCentimeter).ToString());
            Assert.Equal("1 kg·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilogramSquareDecimeter).ToString());
            Assert.Equal("1 kg·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString());
            Assert.Equal("1 kg·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilogramSquareMillimeter).ToString());
            Assert.Equal("1 kt·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilotonneSquareCentimeter).ToString());
            Assert.Equal("1 kt·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilotonneSquareDecimeter).ToString());
            Assert.Equal("1 kt·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilotonneSquareMeter).ToString());
            Assert.Equal("1 kt·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilotonneSquareMillimeter).ToString());
            Assert.Equal("1 Mt·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MegatonneSquareCentimeter).ToString());
            Assert.Equal("1 Mt·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MegatonneSquareDecimeter).ToString());
            Assert.Equal("1 Mt·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MegatonneSquareMeter).ToString());
            Assert.Equal("1 Mt·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MegatonneSquareMillimeter).ToString());
            Assert.Equal("1 mg·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MilligramSquareCentimeter).ToString());
            Assert.Equal("1 mg·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MilligramSquareDecimeter).ToString());
            Assert.Equal("1 mg·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MilligramSquareMeter).ToString());
            Assert.Equal("1 mg·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MilligramSquareMillimeter).ToString());
            Assert.Equal("1 lb·ft²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.PoundSquareFoot).ToString());
            Assert.Equal("1 lb·in²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.PoundSquareInch).ToString());
            Assert.Equal("1 slug·ft²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.SlugSquareFoot).ToString());
            Assert.Equal("1 slug·in²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.SlugSquareInch).ToString());
            Assert.Equal("1 t·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.TonneSquareCentimeter).ToString());
            Assert.Equal("1 t·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.TonneSquareDecimeter).ToString());
            Assert.Equal("1 t·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.TonneSquareMeter).ToString());
            Assert.Equal("1 t·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.TonneSquareMillimeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 g·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.GramSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 g·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.GramSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 g·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.GramSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 g·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.GramSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kg·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilogramSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kg·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilogramSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 kg·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kg·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilogramSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kt·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilotonneSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kt·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilotonneSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 kt·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilotonneSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kt·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.KilotonneSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 Mt·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MegatonneSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Mt·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MegatonneSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 Mt·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MegatonneSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 Mt·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MegatonneSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 mg·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MilligramSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mg·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MilligramSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 mg·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MilligramSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 mg·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.MilligramSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 lb·ft²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.PoundSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 lb·in²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.PoundSquareInch).ToString(swedishCulture));
            Assert.Equal("1 slug·ft²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.SlugSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 slug·in²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.SlugSquareInch).ToString(swedishCulture));
            Assert.Equal("1 t·cm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.TonneSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 t·dm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.TonneSquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 t·m²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.TonneSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 t·mm²", new MassMomentOfInertia(1, MassMomentOfInertiaUnit.TonneSquareMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 kg·m²", new MassMomentOfInertia(0.123456, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString("s1"));
            Assert.Equal("0.12 kg·m²", new MassMomentOfInertia(0.123456, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString("s2"));
            Assert.Equal("0.123 kg·m²", new MassMomentOfInertia(0.123456, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString("s3"));
            Assert.Equal("0.1235 kg·m²", new MassMomentOfInertia(0.123456, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 kg·m²", new MassMomentOfInertia(0.123456, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 kg·m²", new MassMomentOfInertia(0.123456, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 kg·m²", new MassMomentOfInertia(0.123456, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 kg·m²", new MassMomentOfInertia(0.123456, MassMomentOfInertiaUnit.KilogramSquareMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = MassMomentOfInertia.FromKilogramSquareMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = MassMomentOfInertia.FromKilogramSquareMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MassMomentOfInertia.FromKilogramSquareMeters(1.0);
            var expected = Comparison.GetHashCode(typeof(MassMomentOfInertia), quantity.As(MassMomentOfInertia.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MassMomentOfInertia.FromKilogramSquareMeters(value);
            Assert.Equal(MassMomentOfInertia.FromKilogramSquareMeters(-value), -quantity);
        }
    }
}
