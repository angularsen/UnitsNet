//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Pressure (symbol: P or p) is the ratio of force to the area over which that force is distributed. Pressure is force per unit area applied in a direction perpendicular to the surface of an object. Gauge pressure (also spelled gage pressure)[a] is the pressure relative to the local atmospheric or ambient pressure. Pressure is measured in any unit of force divided by any unit of area. The SI unit of pressure is the newton per square metre, which is called the pascal (Pa) after the seventeenth-century philosopher and scientist Blaise Pascal. A pressure of 1 Pa is small; it approximately equals the pressure exerted by a dollar bill resting flat on a table. Everyday pressures are often stated in kilopascals (1 kPa = 1000 Pa).
    /// </summary>
    public struct  Pressure
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly PressureUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public PressureUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Pressure(double value, PressureUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Pressure, which is Second. All conversions go via this value.
        /// </summary>
        public static PressureUnit BaseUnit { get; } = PressureUnit.Pascal;

        /// <summary>
        /// Represents the largest possible value of Pressure.
        /// </summary>
        public static Pressure MaxValue { get; } = new Pressure(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Pressure.
        /// </summary>
        public static Pressure MinValue { get; } = new Pressure(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Pressure Zero { get; } = new Pressure(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Atmosphere"/>
        /// </summary>
        public double Atmospheres => As(PressureUnit.Atmosphere);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Bar"/>
        /// </summary>
        public double Bars => As(PressureUnit.Bar);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Centibar"/>
        /// </summary>
        public double Centibars => As(PressureUnit.Centibar);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.CentimeterOfWaterColumn"/>
        /// </summary>
        public double CentimetersOfWaterColumn => As(PressureUnit.CentimeterOfWaterColumn);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Decapascal"/>
        /// </summary>
        public double Decapascals => As(PressureUnit.Decapascal);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Decibar"/>
        /// </summary>
        public double Decibars => As(PressureUnit.Decibar);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.DynePerSquareCentimeter"/>
        /// </summary>
        public double DynesPerSquareCentimeter => As(PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.FootOfElevation"/>
        /// </summary>
        public double FeetOfElevation => As(PressureUnit.FootOfElevation);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.FootOfHead"/>
        /// </summary>
        public double FeetOfHead => As(PressureUnit.FootOfHead);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Gigapascal"/>
        /// </summary>
        public double Gigapascals => As(PressureUnit.Gigapascal);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Hectopascal"/>
        /// </summary>
        public double Hectopascals => As(PressureUnit.Hectopascal);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.InchOfMercury"/>
        /// </summary>
        public double InchesOfMercury => As(PressureUnit.InchOfMercury);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.InchOfWaterColumn"/>
        /// </summary>
        public double InchesOfWaterColumn => As(PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Kilobar"/>
        /// </summary>
        public double Kilobars => As(PressureUnit.Kilobar);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.KilogramForcePerSquareCentimeter"/>
        /// </summary>
        public double KilogramsForcePerSquareCentimeter => As(PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.KilogramForcePerSquareMeter"/>
        /// </summary>
        public double KilogramsForcePerSquareMeter => As(PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.KilogramForcePerSquareMillimeter"/>
        /// </summary>
        public double KilogramsForcePerSquareMillimeter => As(PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.KilonewtonPerSquareCentimeter"/>
        /// </summary>
        public double KilonewtonsPerSquareCentimeter => As(PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.KilonewtonPerSquareMeter"/>
        /// </summary>
        public double KilonewtonsPerSquareMeter => As(PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.KilonewtonPerSquareMillimeter"/>
        /// </summary>
        public double KilonewtonsPerSquareMillimeter => As(PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Kilopascal"/>
        /// </summary>
        public double Kilopascals => As(PressureUnit.Kilopascal);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.KilopoundForcePerSquareFoot"/>
        /// </summary>
        public double KilopoundsForcePerSquareFoot => As(PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.KilopoundForcePerSquareInch"/>
        /// </summary>
        public double KilopoundsForcePerSquareInch => As(PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.KilopoundForcePerSquareMil"/>
        /// </summary>
        public double KilopoundsForcePerSquareMil => As(PressureUnit.KilopoundForcePerSquareMil);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Megabar"/>
        /// </summary>
        public double Megabars => As(PressureUnit.Megabar);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.MeganewtonPerSquareMeter"/>
        /// </summary>
        public double MeganewtonsPerSquareMeter => As(PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Megapascal"/>
        /// </summary>
        public double Megapascals => As(PressureUnit.Megapascal);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.MeterOfElevation"/>
        /// </summary>
        public double MetersOfElevation => As(PressureUnit.MeterOfElevation);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.MeterOfHead"/>
        /// </summary>
        public double MetersOfHead => As(PressureUnit.MeterOfHead);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.MeterOfWaterColumn"/>
        /// </summary>
        public double MetersOfWaterColumn => As(PressureUnit.MeterOfWaterColumn);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Microbar"/>
        /// </summary>
        public double Microbars => As(PressureUnit.Microbar);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Micropascal"/>
        /// </summary>
        public double Micropascals => As(PressureUnit.Micropascal);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Millibar"/>
        /// </summary>
        public double Millibars => As(PressureUnit.Millibar);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.MillimeterOfMercury"/>
        /// </summary>
        public double MillimetersOfMercury => As(PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.MillimeterOfWaterColumn"/>
        /// </summary>
        public double MillimetersOfWaterColumn => As(PressureUnit.MillimeterOfWaterColumn);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Millipascal"/>
        /// </summary>
        public double Millipascals => As(PressureUnit.Millipascal);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.NewtonPerSquareCentimeter"/>
        /// </summary>
        public double NewtonsPerSquareCentimeter => As(PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.NewtonPerSquareMeter"/>
        /// </summary>
        public double NewtonsPerSquareMeter => As(PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.NewtonPerSquareMillimeter"/>
        /// </summary>
        public double NewtonsPerSquareMillimeter => As(PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Pascal"/>
        /// </summary>
        public double Pascals => As(PressureUnit.Pascal);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.PoundForcePerSquareFoot"/>
        /// </summary>
        public double PoundsForcePerSquareFoot => As(PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.PoundForcePerSquareInch"/>
        /// </summary>
        public double PoundsForcePerSquareInch => As(PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.PoundForcePerSquareMil"/>
        /// </summary>
        public double PoundsForcePerSquareMil => As(PressureUnit.PoundForcePerSquareMil);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.PoundPerInchSecondSquared"/>
        /// </summary>
        public double PoundsPerInchSecondSquared => As(PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.TechnicalAtmosphere"/>
        /// </summary>
        public double TechnicalAtmospheres => As(PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.TonneForcePerSquareCentimeter"/>
        /// </summary>
        public double TonnesForcePerSquareCentimeter => As(PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.TonneForcePerSquareMeter"/>
        /// </summary>
        public double TonnesForcePerSquareMeter => As(PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.TonneForcePerSquareMillimeter"/>
        /// </summary>
        public double TonnesForcePerSquareMillimeter => As(PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="PressureUnit.Torr"/>
        /// </summary>
        public double Torrs => As(PressureUnit.Torr);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Atmosphere"/>.
        /// </summary>
        public static Pressure FromAtmospheres(double atmospheres) => new Pressure(atmospheres, PressureUnit.Atmosphere);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Bar"/>.
        /// </summary>
        public static Pressure FromBars(double bars) => new Pressure(bars, PressureUnit.Bar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Centibar"/>.
        /// </summary>
        public static Pressure FromCentibars(double centibars) => new Pressure(centibars, PressureUnit.Centibar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.CentimeterOfWaterColumn"/>.
        /// </summary>
        public static Pressure FromCentimetersOfWaterColumn(double centimetersofwatercolumn) => new Pressure(centimetersofwatercolumn, PressureUnit.CentimeterOfWaterColumn);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Decapascal"/>.
        /// </summary>
        public static Pressure FromDecapascals(double decapascals) => new Pressure(decapascals, PressureUnit.Decapascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Decibar"/>.
        /// </summary>
        public static Pressure FromDecibars(double decibars) => new Pressure(decibars, PressureUnit.Decibar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.DynePerSquareCentimeter"/>.
        /// </summary>
        public static Pressure FromDynesPerSquareCentimeter(double dynespersquarecentimeter) => new Pressure(dynespersquarecentimeter, PressureUnit.DynePerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.FootOfElevation"/>.
        /// </summary>
        public static Pressure FromFeetOfElevation(double feetofelevation) => new Pressure(feetofelevation, PressureUnit.FootOfElevation);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.FootOfHead"/>.
        /// </summary>
        public static Pressure FromFeetOfHead(double feetofhead) => new Pressure(feetofhead, PressureUnit.FootOfHead);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Gigapascal"/>.
        /// </summary>
        public static Pressure FromGigapascals(double gigapascals) => new Pressure(gigapascals, PressureUnit.Gigapascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Hectopascal"/>.
        /// </summary>
        public static Pressure FromHectopascals(double hectopascals) => new Pressure(hectopascals, PressureUnit.Hectopascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.InchOfMercury"/>.
        /// </summary>
        public static Pressure FromInchesOfMercury(double inchesofmercury) => new Pressure(inchesofmercury, PressureUnit.InchOfMercury);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.InchOfWaterColumn"/>.
        /// </summary>
        public static Pressure FromInchesOfWaterColumn(double inchesofwatercolumn) => new Pressure(inchesofwatercolumn, PressureUnit.InchOfWaterColumn);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Kilobar"/>.
        /// </summary>
        public static Pressure FromKilobars(double kilobars) => new Pressure(kilobars, PressureUnit.Kilobar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilogramForcePerSquareCentimeter"/>.
        /// </summary>
        public static Pressure FromKilogramsForcePerSquareCentimeter(double kilogramsforcepersquarecentimeter) => new Pressure(kilogramsforcepersquarecentimeter, PressureUnit.KilogramForcePerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilogramForcePerSquareMeter"/>.
        /// </summary>
        public static Pressure FromKilogramsForcePerSquareMeter(double kilogramsforcepersquaremeter) => new Pressure(kilogramsforcepersquaremeter, PressureUnit.KilogramForcePerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilogramForcePerSquareMillimeter"/>.
        /// </summary>
        public static Pressure FromKilogramsForcePerSquareMillimeter(double kilogramsforcepersquaremillimeter) => new Pressure(kilogramsforcepersquaremillimeter, PressureUnit.KilogramForcePerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilonewtonPerSquareCentimeter"/>.
        /// </summary>
        public static Pressure FromKilonewtonsPerSquareCentimeter(double kilonewtonspersquarecentimeter) => new Pressure(kilonewtonspersquarecentimeter, PressureUnit.KilonewtonPerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilonewtonPerSquareMeter"/>.
        /// </summary>
        public static Pressure FromKilonewtonsPerSquareMeter(double kilonewtonspersquaremeter) => new Pressure(kilonewtonspersquaremeter, PressureUnit.KilonewtonPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilonewtonPerSquareMillimeter"/>.
        /// </summary>
        public static Pressure FromKilonewtonsPerSquareMillimeter(double kilonewtonspersquaremillimeter) => new Pressure(kilonewtonspersquaremillimeter, PressureUnit.KilonewtonPerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Kilopascal"/>.
        /// </summary>
        public static Pressure FromKilopascals(double kilopascals) => new Pressure(kilopascals, PressureUnit.Kilopascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilopoundForcePerSquareFoot"/>.
        /// </summary>
        public static Pressure FromKilopoundsForcePerSquareFoot(double kilopoundsforcepersquarefoot) => new Pressure(kilopoundsforcepersquarefoot, PressureUnit.KilopoundForcePerSquareFoot);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilopoundForcePerSquareInch"/>.
        /// </summary>
        public static Pressure FromKilopoundsForcePerSquareInch(double kilopoundsforcepersquareinch) => new Pressure(kilopoundsforcepersquareinch, PressureUnit.KilopoundForcePerSquareInch);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.KilopoundForcePerSquareMil"/>.
        /// </summary>
        public static Pressure FromKilopoundsForcePerSquareMil(double kilopoundsforcepersquaremil) => new Pressure(kilopoundsforcepersquaremil, PressureUnit.KilopoundForcePerSquareMil);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Megabar"/>.
        /// </summary>
        public static Pressure FromMegabars(double megabars) => new Pressure(megabars, PressureUnit.Megabar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeganewtonPerSquareMeter"/>.
        /// </summary>
        public static Pressure FromMeganewtonsPerSquareMeter(double meganewtonspersquaremeter) => new Pressure(meganewtonspersquaremeter, PressureUnit.MeganewtonPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Megapascal"/>.
        /// </summary>
        public static Pressure FromMegapascals(double megapascals) => new Pressure(megapascals, PressureUnit.Megapascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeterOfElevation"/>.
        /// </summary>
        public static Pressure FromMetersOfElevation(double metersofelevation) => new Pressure(metersofelevation, PressureUnit.MeterOfElevation);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeterOfHead"/>.
        /// </summary>
        public static Pressure FromMetersOfHead(double metersofhead) => new Pressure(metersofhead, PressureUnit.MeterOfHead);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MeterOfWaterColumn"/>.
        /// </summary>
        public static Pressure FromMetersOfWaterColumn(double metersofwatercolumn) => new Pressure(metersofwatercolumn, PressureUnit.MeterOfWaterColumn);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Microbar"/>.
        /// </summary>
        public static Pressure FromMicrobars(double microbars) => new Pressure(microbars, PressureUnit.Microbar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Micropascal"/>.
        /// </summary>
        public static Pressure FromMicropascals(double micropascals) => new Pressure(micropascals, PressureUnit.Micropascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Millibar"/>.
        /// </summary>
        public static Pressure FromMillibars(double millibars) => new Pressure(millibars, PressureUnit.Millibar);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MillimeterOfMercury"/>.
        /// </summary>
        public static Pressure FromMillimetersOfMercury(double millimetersofmercury) => new Pressure(millimetersofmercury, PressureUnit.MillimeterOfMercury);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.MillimeterOfWaterColumn"/>.
        /// </summary>
        public static Pressure FromMillimetersOfWaterColumn(double millimetersofwatercolumn) => new Pressure(millimetersofwatercolumn, PressureUnit.MillimeterOfWaterColumn);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Millipascal"/>.
        /// </summary>
        public static Pressure FromMillipascals(double millipascals) => new Pressure(millipascals, PressureUnit.Millipascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.NewtonPerSquareCentimeter"/>.
        /// </summary>
        public static Pressure FromNewtonsPerSquareCentimeter(double newtonspersquarecentimeter) => new Pressure(newtonspersquarecentimeter, PressureUnit.NewtonPerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.NewtonPerSquareMeter"/>.
        /// </summary>
        public static Pressure FromNewtonsPerSquareMeter(double newtonspersquaremeter) => new Pressure(newtonspersquaremeter, PressureUnit.NewtonPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.NewtonPerSquareMillimeter"/>.
        /// </summary>
        public static Pressure FromNewtonsPerSquareMillimeter(double newtonspersquaremillimeter) => new Pressure(newtonspersquaremillimeter, PressureUnit.NewtonPerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Pascal"/>.
        /// </summary>
        public static Pressure FromPascals(double pascals) => new Pressure(pascals, PressureUnit.Pascal);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundForcePerSquareFoot"/>.
        /// </summary>
        public static Pressure FromPoundsForcePerSquareFoot(double poundsforcepersquarefoot) => new Pressure(poundsforcepersquarefoot, PressureUnit.PoundForcePerSquareFoot);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundForcePerSquareInch"/>.
        /// </summary>
        public static Pressure FromPoundsForcePerSquareInch(double poundsforcepersquareinch) => new Pressure(poundsforcepersquareinch, PressureUnit.PoundForcePerSquareInch);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundForcePerSquareMil"/>.
        /// </summary>
        public static Pressure FromPoundsForcePerSquareMil(double poundsforcepersquaremil) => new Pressure(poundsforcepersquaremil, PressureUnit.PoundForcePerSquareMil);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.PoundPerInchSecondSquared"/>.
        /// </summary>
        public static Pressure FromPoundsPerInchSecondSquared(double poundsperinchsecondsquared) => new Pressure(poundsperinchsecondsquared, PressureUnit.PoundPerInchSecondSquared);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TechnicalAtmosphere"/>.
        /// </summary>
        public static Pressure FromTechnicalAtmospheres(double technicalatmospheres) => new Pressure(technicalatmospheres, PressureUnit.TechnicalAtmosphere);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TonneForcePerSquareCentimeter"/>.
        /// </summary>
        public static Pressure FromTonnesForcePerSquareCentimeter(double tonnesforcepersquarecentimeter) => new Pressure(tonnesforcepersquarecentimeter, PressureUnit.TonneForcePerSquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TonneForcePerSquareMeter"/>.
        /// </summary>
        public static Pressure FromTonnesForcePerSquareMeter(double tonnesforcepersquaremeter) => new Pressure(tonnesforcepersquaremeter, PressureUnit.TonneForcePerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.TonneForcePerSquareMillimeter"/>.
        /// </summary>
        public static Pressure FromTonnesForcePerSquareMillimeter(double tonnesforcepersquaremillimeter) => new Pressure(tonnesforcepersquaremillimeter, PressureUnit.TonneForcePerSquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Pressure"/> from <see cref="PressureUnit.Torr"/>.
        /// </summary>
        public static Pressure FromTorrs(double torrs) => new Pressure(torrs, PressureUnit.Torr);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="PressureUnit" /> to <see cref="Pressure" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Pressure unit value.</returns>
        public static Pressure From(double value, PressureUnit fromUnit)
        {
            return new Pressure(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(PressureUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this Pressure to another Pressure with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A Pressure with the specified unit.</returns>
                public Pressure ToUnit(PressureUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new Pressure(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        PressureUnit.Atmosphere => _value * 1.01325 * 1e5,
                        PressureUnit.Bar => _value * 1e5,
                        PressureUnit.Centibar => (_value * 1e5) * 1e-2d,
                        PressureUnit.CentimeterOfWaterColumn => (_value * 9.80665e3) * 1e-2d,
                        PressureUnit.Decapascal => (_value) * 1e1d,
                        PressureUnit.Decibar => (_value * 1e5) * 1e-1d,
                        PressureUnit.DynePerSquareCentimeter => _value * 1.0e-1,
                        PressureUnit.FootOfElevation => Math.Pow(1.0 - (_value / 145366.45), 5.2553026003237266401799415610351) * 101325.0,
                        PressureUnit.FootOfHead => _value * 9804.139432 * 0.3048,
                        PressureUnit.Gigapascal => (_value) * 1e9d,
                        PressureUnit.Hectopascal => (_value) * 1e2d,
                        PressureUnit.InchOfMercury => _value * 2.54e1 * 133.322387415,
                        PressureUnit.InchOfWaterColumn => _value * 2.54e-2 * 9.80665e3,
                        PressureUnit.Kilobar => (_value * 1e5) * 1e3d,
                        PressureUnit.KilogramForcePerSquareCentimeter => _value * 9.80665e4,
                        PressureUnit.KilogramForcePerSquareMeter => _value * 9.80665,
                        PressureUnit.KilogramForcePerSquareMillimeter => _value * 9.80665e6,
                        PressureUnit.KilonewtonPerSquareCentimeter => (_value * 1e4) * 1e3d,
                        PressureUnit.KilonewtonPerSquareMeter => (_value) * 1e3d,
                        PressureUnit.KilonewtonPerSquareMillimeter => (_value * 1e6) * 1e3d,
                        PressureUnit.Kilopascal => (_value) * 1e3d,
                        PressureUnit.KilopoundForcePerSquareFoot => (_value * 4.4482216152605 / 9.290304e-2) * 1e3d,
                        PressureUnit.KilopoundForcePerSquareInch => (_value * 4.4482216152605 / 0.00064516) * 1e3d,
                        PressureUnit.KilopoundForcePerSquareMil => (_value * 4.4482216152605 / (2.54e-5 * 2.54e-5)) * 1e3d,
                        PressureUnit.Megabar => (_value * 1e5) * 1e6d,
                        PressureUnit.MeganewtonPerSquareMeter => (_value) * 1e6d,
                        PressureUnit.Megapascal => (_value) * 1e6d,
                        PressureUnit.MeterOfElevation => Math.Pow(1.0 - (_value / 44307.69396), 5.2553026003237266401799415610351) * 101325.0,
                        PressureUnit.MeterOfHead => _value * 9804.139432,
                        PressureUnit.MeterOfWaterColumn => _value * 9.80665e3,
                        PressureUnit.Microbar => (_value * 1e5) * 1e-6d,
                        PressureUnit.Micropascal => (_value) * 1e-6d,
                        PressureUnit.Millibar => (_value * 1e5) * 1e-3d,
                        PressureUnit.MillimeterOfMercury => _value * 133.322387415,
                        PressureUnit.MillimeterOfWaterColumn => (_value * 9.80665e3) * 1e-3d,
                        PressureUnit.Millipascal => (_value) * 1e-3d,
                        PressureUnit.NewtonPerSquareCentimeter => _value * 1e4,
                        PressureUnit.NewtonPerSquareMeter => _value,
                        PressureUnit.NewtonPerSquareMillimeter => _value * 1e6,
                        PressureUnit.Pascal => _value,
                        PressureUnit.PoundForcePerSquareFoot => _value * 4.4482216152605 / 9.290304e-2,
                        PressureUnit.PoundForcePerSquareInch => _value * 4.4482216152605 / 0.00064516,
                        PressureUnit.PoundForcePerSquareMil => _value * 4.4482216152605 / (2.54e-5 * 2.54e-5),
                        PressureUnit.PoundPerInchSecondSquared => _value * (4.4482216152605 / 0.00064516) / 386.0886,
                        PressureUnit.TechnicalAtmosphere => _value * 9.80665e4,
                        PressureUnit.TonneForcePerSquareCentimeter => _value * 9.80665e7,
                        PressureUnit.TonneForcePerSquareMeter => _value * 9.80665e3,
                        PressureUnit.TonneForcePerSquareMillimeter => _value * 9.80665e9,
                        PressureUnit.Torr => _value * 101325 / 760,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(PressureUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        PressureUnit.Atmosphere => baseUnitValue / (1.01325 * 1e5),
                        PressureUnit.Bar => baseUnitValue / 1e5,
                        PressureUnit.Centibar => (baseUnitValue / 1e5) / 1e-2d,
                        PressureUnit.CentimeterOfWaterColumn => (baseUnitValue / 9.80665e3) / 1e-2d,
                        PressureUnit.Decapascal => (baseUnitValue) / 1e1d,
                        PressureUnit.Decibar => (baseUnitValue / 1e5) / 1e-1d,
                        PressureUnit.DynePerSquareCentimeter => baseUnitValue / 1.0e-1,
                        PressureUnit.FootOfElevation => (1.0 - Math.Pow(baseUnitValue / 101325.0, 0.190284)) * 145366.45,
                        PressureUnit.FootOfHead => baseUnitValue / (9804.139432 * 0.3048),
                        PressureUnit.Gigapascal => (baseUnitValue) / 1e9d,
                        PressureUnit.Hectopascal => (baseUnitValue) / 1e2d,
                        PressureUnit.InchOfMercury => baseUnitValue / (2.54e1 * 133.322387415),
                        PressureUnit.InchOfWaterColumn => baseUnitValue / (2.54e-2 * 9.80665e3),
                        PressureUnit.Kilobar => (baseUnitValue / 1e5) / 1e3d,
                        PressureUnit.KilogramForcePerSquareCentimeter => baseUnitValue / 9.80665e4,
                        PressureUnit.KilogramForcePerSquareMeter => baseUnitValue / 9.80665,
                        PressureUnit.KilogramForcePerSquareMillimeter => baseUnitValue / 9.80665e6,
                        PressureUnit.KilonewtonPerSquareCentimeter => (baseUnitValue / 1e4) / 1e3d,
                        PressureUnit.KilonewtonPerSquareMeter => (baseUnitValue) / 1e3d,
                        PressureUnit.KilonewtonPerSquareMillimeter => (baseUnitValue / 1e6) / 1e3d,
                        PressureUnit.Kilopascal => (baseUnitValue) / 1e3d,
                        PressureUnit.KilopoundForcePerSquareFoot => (baseUnitValue * 9.290304e-2 / 4.4482216152605) / 1e3d,
                        PressureUnit.KilopoundForcePerSquareInch => (baseUnitValue * 0.00064516 / 4.4482216152605) / 1e3d,
                        PressureUnit.KilopoundForcePerSquareMil => (baseUnitValue * (2.54e-5 * 2.54e-5) / 4.4482216152605) / 1e3d,
                        PressureUnit.Megabar => (baseUnitValue / 1e5) / 1e6d,
                        PressureUnit.MeganewtonPerSquareMeter => (baseUnitValue) / 1e6d,
                        PressureUnit.Megapascal => (baseUnitValue) / 1e6d,
                        PressureUnit.MeterOfElevation => (1.0 - Math.Pow(baseUnitValue / 101325.0, 0.190284)) * 44307.69396,
                        PressureUnit.MeterOfHead => baseUnitValue / 9804.139432,
                        PressureUnit.MeterOfWaterColumn => baseUnitValue / 9.80665e3,
                        PressureUnit.Microbar => (baseUnitValue / 1e5) / 1e-6d,
                        PressureUnit.Micropascal => (baseUnitValue) / 1e-6d,
                        PressureUnit.Millibar => (baseUnitValue / 1e5) / 1e-3d,
                        PressureUnit.MillimeterOfMercury => baseUnitValue / 133.322387415,
                        PressureUnit.MillimeterOfWaterColumn => (baseUnitValue / 9.80665e3) / 1e-3d,
                        PressureUnit.Millipascal => (baseUnitValue) / 1e-3d,
                        PressureUnit.NewtonPerSquareCentimeter => baseUnitValue / 1e4,
                        PressureUnit.NewtonPerSquareMeter => baseUnitValue,
                        PressureUnit.NewtonPerSquareMillimeter => baseUnitValue / 1e6,
                        PressureUnit.Pascal => baseUnitValue,
                        PressureUnit.PoundForcePerSquareFoot => baseUnitValue * 9.290304e-2 / 4.4482216152605,
                        PressureUnit.PoundForcePerSquareInch => baseUnitValue * 0.00064516 / 4.4482216152605,
                        PressureUnit.PoundForcePerSquareMil => baseUnitValue * (2.54e-5 * 2.54e-5) / 4.4482216152605,
                        PressureUnit.PoundPerInchSecondSquared => baseUnitValue * 386.0886 / (4.4482216152605 / 0.00064516),
                        PressureUnit.TechnicalAtmosphere => baseUnitValue / 9.80665e4,
                        PressureUnit.TonneForcePerSquareCentimeter => baseUnitValue / 9.80665e7,
                        PressureUnit.TonneForcePerSquareMeter => baseUnitValue / 9.80665e3,
                        PressureUnit.TonneForcePerSquareMillimeter => baseUnitValue / 9.80665e9,
                        PressureUnit.Torr => baseUnitValue * 760 / 101325,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

