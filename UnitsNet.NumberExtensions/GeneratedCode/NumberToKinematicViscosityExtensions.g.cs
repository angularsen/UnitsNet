//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToKinematicViscosity
{
    /// <summary>
    /// A number to KinematicViscosity Extensions
    /// </summary>
    public static class NumberToKinematicViscosityExtensions
    {
        /// <inheritdoc cref="KinematicViscosity.FromCentistokes(QuantityValue)" />
        public static KinematicViscosity Centistokes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => KinematicViscosity.FromCentistokes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => KinematicViscosity.FromCentistokes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="KinematicViscosity.FromDecistokes(QuantityValue)" />
        public static KinematicViscosity Decistokes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => KinematicViscosity.FromDecistokes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => KinematicViscosity.FromDecistokes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="KinematicViscosity.FromKilostokes(QuantityValue)" />
        public static KinematicViscosity Kilostokes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => KinematicViscosity.FromKilostokes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => KinematicViscosity.FromKilostokes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="KinematicViscosity.FromMicrostokes(QuantityValue)" />
        public static KinematicViscosity Microstokes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => KinematicViscosity.FromMicrostokes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => KinematicViscosity.FromMicrostokes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="KinematicViscosity.FromMillistokes(QuantityValue)" />
        public static KinematicViscosity Millistokes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => KinematicViscosity.FromMillistokes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => KinematicViscosity.FromMillistokes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="KinematicViscosity.FromNanostokes(QuantityValue)" />
        public static KinematicViscosity Nanostokes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => KinematicViscosity.FromNanostokes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => KinematicViscosity.FromNanostokes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="KinematicViscosity.FromSquareFeetPerSecond(QuantityValue)" />
        public static KinematicViscosity SquareFeetPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => KinematicViscosity.FromSquareFeetPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => KinematicViscosity.FromSquareFeetPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="KinematicViscosity.FromSquareMetersPerSecond(QuantityValue)" />
        public static KinematicViscosity SquareMetersPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => KinematicViscosity.FromSquareMetersPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => KinematicViscosity.FromSquareMetersPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="KinematicViscosity.FromStokes(QuantityValue)" />
        public static KinematicViscosity Stokes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => KinematicViscosity.FromStokes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => KinematicViscosity.FromStokes(value.ToQuantityValue());
#endif

    }
}
