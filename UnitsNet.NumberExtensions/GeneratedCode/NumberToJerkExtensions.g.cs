//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToJerk
{
    /// <summary>
    /// A number to Jerk Extensions
    /// </summary>
    public static class NumberToJerkExtensions
    {
        /// <inheritdoc cref="Jerk.FromCentimetersPerSecondCubed(QuantityValue)" />
        public static Jerk CentimetersPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromCentimetersPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromCentimetersPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromDecimetersPerSecondCubed(QuantityValue)" />
        public static Jerk DecimetersPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromDecimetersPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromDecimetersPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromFeetPerSecondCubed(QuantityValue)" />
        public static Jerk FeetPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromFeetPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromFeetPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromInchesPerSecondCubed(QuantityValue)" />
        public static Jerk InchesPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromInchesPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromInchesPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromKilometersPerSecondCubed(QuantityValue)" />
        public static Jerk KilometersPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromKilometersPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromKilometersPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromMetersPerSecondCubed(QuantityValue)" />
        public static Jerk MetersPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromMetersPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromMetersPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromMicrometersPerSecondCubed(QuantityValue)" />
        public static Jerk MicrometersPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromMicrometersPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromMicrometersPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromMillimetersPerSecondCubed(QuantityValue)" />
        public static Jerk MillimetersPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromMillimetersPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromMillimetersPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromMillistandardGravitiesPerSecond(QuantityValue)" />
        public static Jerk MillistandardGravitiesPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromMillistandardGravitiesPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromMillistandardGravitiesPerSecond(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromNanometersPerSecondCubed(QuantityValue)" />
        public static Jerk NanometersPerSecondCubed<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromNanometersPerSecondCubed(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromNanometersPerSecondCubed(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Jerk.FromStandardGravitiesPerSecond(QuantityValue)" />
        public static Jerk StandardGravitiesPerSecond<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Jerk.FromStandardGravitiesPerSecond(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Jerk.FromStandardGravitiesPerSecond(value.ToQuantityValue());
#endif

    }
}
