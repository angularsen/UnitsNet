//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Area is a quantity that expresses the extent of a two-dimensional surface or shape, or planar lamina, in the plane. Area can be understood as the amount of material with a given thickness that would be necessary to fashion a model of the shape, or the amount of paint necessary to cover the surface with a single coat.[1] It is the two-dimensional analog of the length of a curve (a one-dimensional concept) or the volume of a solid (a three-dimensional concept).
    /// </summary>
    public struct  Area
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly AreaUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public AreaUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Area(double value, AreaUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Area, which is Second. All conversions go via this value.
        /// </summary>
        public static AreaUnit BaseUnit { get; } = AreaUnit.SquareMeter;

        /// <summary>
        /// Represents the largest possible value of Area.
        /// </summary>
        public static Area MaxValue { get; } = new Area(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Area.
        /// </summary>
        public static Area MinValue { get; } = new Area(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Area Zero { get; } = new Area(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.Acre"/>
        /// </summary>
        public double Acres => As(AreaUnit.Acre);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.Hectare"/>
        /// </summary>
        public double Hectares => As(AreaUnit.Hectare);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareCentimeter"/>
        /// </summary>
        public double SquareCentimeters => As(AreaUnit.SquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareDecimeter"/>
        /// </summary>
        public double SquareDecimeters => As(AreaUnit.SquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareFoot"/>
        /// </summary>
        public double SquareFeet => As(AreaUnit.SquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareInch"/>
        /// </summary>
        public double SquareInches => As(AreaUnit.SquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareKilometer"/>
        /// </summary>
        public double SquareKilometers => As(AreaUnit.SquareKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareMeter"/>
        /// </summary>
        public double SquareMeters => As(AreaUnit.SquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareMicrometer"/>
        /// </summary>
        public double SquareMicrometers => As(AreaUnit.SquareMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareMile"/>
        /// </summary>
        public double SquareMiles => As(AreaUnit.SquareMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareMillimeter"/>
        /// </summary>
        public double SquareMillimeters => As(AreaUnit.SquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareNauticalMile"/>
        /// </summary>
        public double SquareNauticalMiles => As(AreaUnit.SquareNauticalMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.SquareYard"/>
        /// </summary>
        public double SquareYards => As(AreaUnit.SquareYard);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="AreaUnit.UsSurveySquareFoot"/>
        /// </summary>
        public double UsSurveySquareFeet => As(AreaUnit.UsSurveySquareFoot);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.Acre"/>.
        /// </summary>
        public static Area FromAcres(double acres) => new Area(acres, AreaUnit.Acre);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.Hectare"/>.
        /// </summary>
        public static Area FromHectares(double hectares) => new Area(hectares, AreaUnit.Hectare);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareCentimeter"/>.
        /// </summary>
        public static Area FromSquareCentimeters(double squarecentimeters) => new Area(squarecentimeters, AreaUnit.SquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareDecimeter"/>.
        /// </summary>
        public static Area FromSquareDecimeters(double squaredecimeters) => new Area(squaredecimeters, AreaUnit.SquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareFoot"/>.
        /// </summary>
        public static Area FromSquareFeet(double squarefeet) => new Area(squarefeet, AreaUnit.SquareFoot);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareInch"/>.
        /// </summary>
        public static Area FromSquareInches(double squareinches) => new Area(squareinches, AreaUnit.SquareInch);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareKilometer"/>.
        /// </summary>
        public static Area FromSquareKilometers(double squarekilometers) => new Area(squarekilometers, AreaUnit.SquareKilometer);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareMeter"/>.
        /// </summary>
        public static Area FromSquareMeters(double squaremeters) => new Area(squaremeters, AreaUnit.SquareMeter);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareMicrometer"/>.
        /// </summary>
        public static Area FromSquareMicrometers(double squaremicrometers) => new Area(squaremicrometers, AreaUnit.SquareMicrometer);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareMile"/>.
        /// </summary>
        public static Area FromSquareMiles(double squaremiles) => new Area(squaremiles, AreaUnit.SquareMile);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareMillimeter"/>.
        /// </summary>
        public static Area FromSquareMillimeters(double squaremillimeters) => new Area(squaremillimeters, AreaUnit.SquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareNauticalMile"/>.
        /// </summary>
        public static Area FromSquareNauticalMiles(double squarenauticalmiles) => new Area(squarenauticalmiles, AreaUnit.SquareNauticalMile);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.SquareYard"/>.
        /// </summary>
        public static Area FromSquareYards(double squareyards) => new Area(squareyards, AreaUnit.SquareYard);

        /// <summary>
        ///     Creates a <see cref="Area"/> from <see cref="AreaUnit.UsSurveySquareFoot"/>.
        /// </summary>
        public static Area FromUsSurveySquareFeet(double ussurveysquarefeet) => new Area(ussurveysquarefeet, AreaUnit.UsSurveySquareFoot);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="AreaUnit" /> to <see cref="Area" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Area unit value.</returns>
        public static Area From(double value, AreaUnit fromUnit)
        {
            return new Area(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(AreaUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this Area to another Area with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A Area with the specified unit.</returns>
                public Area ToUnit(AreaUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new Area(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        AreaUnit.Acre => _value * 4046.8564224,
                        AreaUnit.Hectare => _value * 1e4,
                        AreaUnit.SquareCentimeter => _value * 1e-4,
                        AreaUnit.SquareDecimeter => _value * 1e-2,
                        AreaUnit.SquareFoot => _value * 9.290304e-2,
                        AreaUnit.SquareInch => _value * 0.00064516,
                        AreaUnit.SquareKilometer => _value * 1e6,
                        AreaUnit.SquareMeter => _value,
                        AreaUnit.SquareMicrometer => _value * 1e-12,
                        AreaUnit.SquareMile => _value * 1609.344 * 1609.344,
                        AreaUnit.SquareMillimeter => _value * 1e-6,
                        AreaUnit.SquareNauticalMile => _value * 3429904,
                        AreaUnit.SquareYard => _value * 0.9144 * 0.9144,
                        AreaUnit.UsSurveySquareFoot => _value * (1200.0 / 3937.0) * (1200.0 / 3937.0),
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(AreaUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        AreaUnit.Acre => baseUnitValue / 4046.8564224,
                        AreaUnit.Hectare => baseUnitValue / 1e4,
                        AreaUnit.SquareCentimeter => baseUnitValue / 1e-4,
                        AreaUnit.SquareDecimeter => baseUnitValue / 1e-2,
                        AreaUnit.SquareFoot => baseUnitValue / 9.290304e-2,
                        AreaUnit.SquareInch => baseUnitValue / 0.00064516,
                        AreaUnit.SquareKilometer => baseUnitValue / 1e6,
                        AreaUnit.SquareMeter => baseUnitValue,
                        AreaUnit.SquareMicrometer => baseUnitValue / 1e-12,
                        AreaUnit.SquareMile => baseUnitValue / 1609.344 / 1609.344,
                        AreaUnit.SquareMillimeter => baseUnitValue / 1e-6,
                        AreaUnit.SquareNauticalMile => baseUnitValue / 3429904,
                        AreaUnit.SquareYard => baseUnitValue / 0.9144 / 0.9144,
                        AreaUnit.UsSurveySquareFoot => baseUnitValue / (1200.0 / 3937.0) / (1200.0 / 3937.0),
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

