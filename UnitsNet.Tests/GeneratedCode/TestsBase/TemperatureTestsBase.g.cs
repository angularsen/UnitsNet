//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Temperature.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class TemperatureTestsBase : QuantityTestsBase
    {
        protected abstract double DegreesCelsiusInOneKelvin { get; }
        protected abstract double DegreesDelisleInOneKelvin { get; }
        protected abstract double DegreesFahrenheitInOneKelvin { get; }
        protected abstract double DegreesNewtonInOneKelvin { get; }
        protected abstract double DegreesRankineInOneKelvin { get; }
        protected abstract double DegreesReaumurInOneKelvin { get; }
        protected abstract double DegreesRoemerInOneKelvin { get; }
        protected abstract double KelvinsInOneKelvin { get; }
        protected abstract double MillidegreesCelsiusInOneKelvin { get; }
        protected abstract double SolarTemperaturesInOneKelvin { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DegreesCelsiusTolerance { get { return 1e-5; } }
        protected virtual double DegreesDelisleTolerance { get { return 1e-5; } }
        protected virtual double DegreesFahrenheitTolerance { get { return 1e-5; } }
        protected virtual double DegreesNewtonTolerance { get { return 1e-5; } }
        protected virtual double DegreesRankineTolerance { get { return 1e-5; } }
        protected virtual double DegreesReaumurTolerance { get { return 1e-5; } }
        protected virtual double DegreesRoemerTolerance { get { return 1e-5; } }
        protected virtual double KelvinsTolerance { get { return 1e-5; } }
        protected virtual double MillidegreesCelsiusTolerance { get { return 1e-5; } }
        protected virtual double SolarTemperaturesTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(TemperatureUnit unit)
        {
            return unit switch
            {
                TemperatureUnit.DegreeCelsius => (DegreesCelsiusInOneKelvin, DegreesCelsiusTolerance),
                TemperatureUnit.DegreeDelisle => (DegreesDelisleInOneKelvin, DegreesDelisleTolerance),
                TemperatureUnit.DegreeFahrenheit => (DegreesFahrenheitInOneKelvin, DegreesFahrenheitTolerance),
                TemperatureUnit.DegreeNewton => (DegreesNewtonInOneKelvin, DegreesNewtonTolerance),
                TemperatureUnit.DegreeRankine => (DegreesRankineInOneKelvin, DegreesRankineTolerance),
                TemperatureUnit.DegreeReaumur => (DegreesReaumurInOneKelvin, DegreesReaumurTolerance),
                TemperatureUnit.DegreeRoemer => (DegreesRoemerInOneKelvin, DegreesRoemerTolerance),
                TemperatureUnit.Kelvin => (KelvinsInOneKelvin, KelvinsTolerance),
                TemperatureUnit.MillidegreeCelsius => (MillidegreesCelsiusInOneKelvin, MillidegreesCelsiusTolerance),
                TemperatureUnit.SolarTemperature => (SolarTemperaturesInOneKelvin, SolarTemperaturesTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { TemperatureUnit.DegreeCelsius },
            new object[] { TemperatureUnit.DegreeDelisle },
            new object[] { TemperatureUnit.DegreeFahrenheit },
            new object[] { TemperatureUnit.DegreeNewton },
            new object[] { TemperatureUnit.DegreeRankine },
            new object[] { TemperatureUnit.DegreeReaumur },
            new object[] { TemperatureUnit.DegreeRoemer },
            new object[] { TemperatureUnit.Kelvin },
            new object[] { TemperatureUnit.MillidegreeCelsius },
            new object[] { TemperatureUnit.SolarTemperature },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Temperature();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(TemperatureUnit.Kelvin, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Temperature(double.PositiveInfinity, TemperatureUnit.Kelvin));
            var exception2 = Record.Exception(() => new Temperature(double.NegativeInfinity, TemperatureUnit.Kelvin));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Temperature(double.NaN, TemperatureUnit.Kelvin));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Temperature(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Temperature(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Temperature(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Temperature_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            TemperatureUnit[] unitsOrderedByName = EnumHelper.GetValues<TemperatureUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Temperature(1, TemperatureUnit.Kelvin);

            QuantityInfo<Temperature, TemperatureUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Temperature", quantityInfo.Name);
            Assert.Equal(Temperature.Zero, quantityInfo.Zero);
            Assert.Equal(Temperature.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Temperature.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<TemperatureUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void TemperatureInfo_CreateWithCustomUnitInfos()
        {
            TemperatureUnit[] expectedUnits = [TemperatureUnit.Kelvin];

            Temperature.TemperatureInfo quantityInfo = Temperature.TemperatureInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Temperature", quantityInfo.Name);
            Assert.Equal(Temperature.Zero, quantityInfo.Zero);
            Assert.Equal(Temperature.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void KelvinToTemperatureUnits()
        {
            Temperature kelvin = Temperature.FromKelvins(1);
            AssertEx.EqualTolerance(DegreesCelsiusInOneKelvin, kelvin.DegreesCelsius, DegreesCelsiusTolerance);
            AssertEx.EqualTolerance(DegreesDelisleInOneKelvin, kelvin.DegreesDelisle, DegreesDelisleTolerance);
            AssertEx.EqualTolerance(DegreesFahrenheitInOneKelvin, kelvin.DegreesFahrenheit, DegreesFahrenheitTolerance);
            AssertEx.EqualTolerance(DegreesNewtonInOneKelvin, kelvin.DegreesNewton, DegreesNewtonTolerance);
            AssertEx.EqualTolerance(DegreesRankineInOneKelvin, kelvin.DegreesRankine, DegreesRankineTolerance);
            AssertEx.EqualTolerance(DegreesReaumurInOneKelvin, kelvin.DegreesReaumur, DegreesReaumurTolerance);
            AssertEx.EqualTolerance(DegreesRoemerInOneKelvin, kelvin.DegreesRoemer, DegreesRoemerTolerance);
            AssertEx.EqualTolerance(KelvinsInOneKelvin, kelvin.Kelvins, KelvinsTolerance);
            AssertEx.EqualTolerance(MillidegreesCelsiusInOneKelvin, kelvin.MillidegreesCelsius, MillidegreesCelsiusTolerance);
            AssertEx.EqualTolerance(SolarTemperaturesInOneKelvin, kelvin.SolarTemperatures, SolarTemperaturesTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Temperature.From(1, TemperatureUnit.DegreeCelsius);
            Assert.Equal(1, quantity00.DegreesCelsius);
            Assert.Equal(TemperatureUnit.DegreeCelsius, quantity00.Unit);

            var quantity01 = Temperature.From(1, TemperatureUnit.DegreeDelisle);
            Assert.Equal(1, quantity01.DegreesDelisle);
            Assert.Equal(TemperatureUnit.DegreeDelisle, quantity01.Unit);

            var quantity02 = Temperature.From(1, TemperatureUnit.DegreeFahrenheit);
            Assert.Equal(1, quantity02.DegreesFahrenheit);
            Assert.Equal(TemperatureUnit.DegreeFahrenheit, quantity02.Unit);

            var quantity03 = Temperature.From(1, TemperatureUnit.DegreeNewton);
            Assert.Equal(1, quantity03.DegreesNewton);
            Assert.Equal(TemperatureUnit.DegreeNewton, quantity03.Unit);

            var quantity04 = Temperature.From(1, TemperatureUnit.DegreeRankine);
            Assert.Equal(1, quantity04.DegreesRankine);
            Assert.Equal(TemperatureUnit.DegreeRankine, quantity04.Unit);

            var quantity05 = Temperature.From(1, TemperatureUnit.DegreeReaumur);
            Assert.Equal(1, quantity05.DegreesReaumur);
            Assert.Equal(TemperatureUnit.DegreeReaumur, quantity05.Unit);

            var quantity06 = Temperature.From(1, TemperatureUnit.DegreeRoemer);
            Assert.Equal(1, quantity06.DegreesRoemer);
            Assert.Equal(TemperatureUnit.DegreeRoemer, quantity06.Unit);

            var quantity07 = Temperature.From(1, TemperatureUnit.Kelvin);
            Assert.Equal(1, quantity07.Kelvins);
            Assert.Equal(TemperatureUnit.Kelvin, quantity07.Unit);

            var quantity08 = Temperature.From(1, TemperatureUnit.MillidegreeCelsius);
            Assert.Equal(1, quantity08.MillidegreesCelsius);
            Assert.Equal(TemperatureUnit.MillidegreeCelsius, quantity08.Unit);

            var quantity09 = Temperature.From(1, TemperatureUnit.SolarTemperature);
            Assert.Equal(1, quantity09.SolarTemperatures);
            Assert.Equal(TemperatureUnit.SolarTemperature, quantity09.Unit);

        }

        [Fact]
        public void FromKelvins_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Temperature.FromKelvins(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Temperature.FromKelvins(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromKelvins_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Temperature.FromKelvins(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var kelvin = Temperature.FromKelvins(1);
            AssertEx.EqualTolerance(DegreesCelsiusInOneKelvin, kelvin.As(TemperatureUnit.DegreeCelsius), DegreesCelsiusTolerance);
            AssertEx.EqualTolerance(DegreesDelisleInOneKelvin, kelvin.As(TemperatureUnit.DegreeDelisle), DegreesDelisleTolerance);
            AssertEx.EqualTolerance(DegreesFahrenheitInOneKelvin, kelvin.As(TemperatureUnit.DegreeFahrenheit), DegreesFahrenheitTolerance);
            AssertEx.EqualTolerance(DegreesNewtonInOneKelvin, kelvin.As(TemperatureUnit.DegreeNewton), DegreesNewtonTolerance);
            AssertEx.EqualTolerance(DegreesRankineInOneKelvin, kelvin.As(TemperatureUnit.DegreeRankine), DegreesRankineTolerance);
            AssertEx.EqualTolerance(DegreesReaumurInOneKelvin, kelvin.As(TemperatureUnit.DegreeReaumur), DegreesReaumurTolerance);
            AssertEx.EqualTolerance(DegreesRoemerInOneKelvin, kelvin.As(TemperatureUnit.DegreeRoemer), DegreesRoemerTolerance);
            AssertEx.EqualTolerance(KelvinsInOneKelvin, kelvin.As(TemperatureUnit.Kelvin), KelvinsTolerance);
            AssertEx.EqualTolerance(MillidegreesCelsiusInOneKelvin, kelvin.As(TemperatureUnit.MillidegreeCelsius), MillidegreesCelsiusTolerance);
            AssertEx.EqualTolerance(SolarTemperaturesInOneKelvin, kelvin.As(TemperatureUnit.SolarTemperature), SolarTemperaturesTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Temperature.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
            var expectedValue = quantity.As(Temperature.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
            var expectedUnit = Temperature.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Temperature quantityToConvert = quantity;

                Temperature convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<TemperatureUnit> quantityToConvert = quantity;

                IQuantity<TemperatureUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<TemperatureUnit> quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<TemperatureUnit> quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Temperature(value: 1, unit: Temperature.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 °C", TemperatureUnit.DegreeCelsius, 4.2)]
        [InlineData("en-US", "4.2 °De", TemperatureUnit.DegreeDelisle, 4.2)]
        [InlineData("en-US", "4.2 °F", TemperatureUnit.DegreeFahrenheit, 4.2)]
        [InlineData("en-US", "4.2 °N", TemperatureUnit.DegreeNewton, 4.2)]
        [InlineData("en-US", "4.2 °R", TemperatureUnit.DegreeRankine, 4.2)]
        [InlineData("en-US", "4.2 °Ré", TemperatureUnit.DegreeReaumur, 4.2)]
        [InlineData("en-US", "4.2 °Rø", TemperatureUnit.DegreeRoemer, 4.2)]
        [InlineData("en-US", "4.2 K", TemperatureUnit.Kelvin, 4.2)]
        [InlineData("en-US", "4.2 m°C", TemperatureUnit.MillidegreeCelsius, 4.2)]
        [InlineData("en-US", "4.2 T⊙", TemperatureUnit.SolarTemperature, 4.2)]
        public void Parse(string culture, string quantityString, TemperatureUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Temperature.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 °C", TemperatureUnit.DegreeCelsius, 4.2)]
        [InlineData("en-US", "4.2 °De", TemperatureUnit.DegreeDelisle, 4.2)]
        [InlineData("en-US", "4.2 °F", TemperatureUnit.DegreeFahrenheit, 4.2)]
        [InlineData("en-US", "4.2 °N", TemperatureUnit.DegreeNewton, 4.2)]
        [InlineData("en-US", "4.2 °R", TemperatureUnit.DegreeRankine, 4.2)]
        [InlineData("en-US", "4.2 °Ré", TemperatureUnit.DegreeReaumur, 4.2)]
        [InlineData("en-US", "4.2 °Rø", TemperatureUnit.DegreeRoemer, 4.2)]
        [InlineData("en-US", "4.2 K", TemperatureUnit.Kelvin, 4.2)]
        [InlineData("en-US", "4.2 m°C", TemperatureUnit.MillidegreeCelsius, 4.2)]
        [InlineData("en-US", "4.2 T⊙", TemperatureUnit.SolarTemperature, 4.2)]
        public void TryParse(string culture, string quantityString, TemperatureUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Temperature.TryParse(quantityString, out Temperature parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("°C", TemperatureUnit.DegreeCelsius)]
        [InlineData("°De", TemperatureUnit.DegreeDelisle)]
        [InlineData("°F", TemperatureUnit.DegreeFahrenheit)]
        [InlineData("°N", TemperatureUnit.DegreeNewton)]
        [InlineData("°R", TemperatureUnit.DegreeRankine)]
        [InlineData("°Ré", TemperatureUnit.DegreeReaumur)]
        [InlineData("°Rø", TemperatureUnit.DegreeRoemer)]
        [InlineData("K", TemperatureUnit.Kelvin)]
        [InlineData("m°C", TemperatureUnit.MillidegreeCelsius)]
        [InlineData("T⊙", TemperatureUnit.SolarTemperature)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, TemperatureUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            TemperatureUnit parsedUnit = Temperature.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("°C", TemperatureUnit.DegreeCelsius)]
        [InlineData("°De", TemperatureUnit.DegreeDelisle)]
        [InlineData("°F", TemperatureUnit.DegreeFahrenheit)]
        [InlineData("°N", TemperatureUnit.DegreeNewton)]
        [InlineData("°R", TemperatureUnit.DegreeRankine)]
        [InlineData("°Ré", TemperatureUnit.DegreeReaumur)]
        [InlineData("°Rø", TemperatureUnit.DegreeRoemer)]
        [InlineData("K", TemperatureUnit.Kelvin)]
        [InlineData("m°C", TemperatureUnit.MillidegreeCelsius)]
        [InlineData("T⊙", TemperatureUnit.SolarTemperature)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, TemperatureUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            TemperatureUnit parsedUnit = Temperature.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "°C", TemperatureUnit.DegreeCelsius)]
        [InlineData("en-US", "°De", TemperatureUnit.DegreeDelisle)]
        [InlineData("en-US", "°F", TemperatureUnit.DegreeFahrenheit)]
        [InlineData("en-US", "°N", TemperatureUnit.DegreeNewton)]
        [InlineData("en-US", "°R", TemperatureUnit.DegreeRankine)]
        [InlineData("en-US", "°Ré", TemperatureUnit.DegreeReaumur)]
        [InlineData("en-US", "°Rø", TemperatureUnit.DegreeRoemer)]
        [InlineData("en-US", "K", TemperatureUnit.Kelvin)]
        [InlineData("en-US", "m°C", TemperatureUnit.MillidegreeCelsius)]
        [InlineData("en-US", "T⊙", TemperatureUnit.SolarTemperature)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, TemperatureUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            TemperatureUnit parsedUnit = Temperature.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "°C", TemperatureUnit.DegreeCelsius)]
        [InlineData("en-US", "°De", TemperatureUnit.DegreeDelisle)]
        [InlineData("en-US", "°F", TemperatureUnit.DegreeFahrenheit)]
        [InlineData("en-US", "°N", TemperatureUnit.DegreeNewton)]
        [InlineData("en-US", "°R", TemperatureUnit.DegreeRankine)]
        [InlineData("en-US", "°Ré", TemperatureUnit.DegreeReaumur)]
        [InlineData("en-US", "°Rø", TemperatureUnit.DegreeRoemer)]
        [InlineData("en-US", "K", TemperatureUnit.Kelvin)]
        [InlineData("en-US", "m°C", TemperatureUnit.MillidegreeCelsius)]
        [InlineData("en-US", "T⊙", TemperatureUnit.SolarTemperature)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, TemperatureUnit expectedUnit)
        {
            TemperatureUnit parsedUnit = Temperature.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("°C", TemperatureUnit.DegreeCelsius)]
        [InlineData("°De", TemperatureUnit.DegreeDelisle)]
        [InlineData("°F", TemperatureUnit.DegreeFahrenheit)]
        [InlineData("°N", TemperatureUnit.DegreeNewton)]
        [InlineData("°R", TemperatureUnit.DegreeRankine)]
        [InlineData("°Ré", TemperatureUnit.DegreeReaumur)]
        [InlineData("°Rø", TemperatureUnit.DegreeRoemer)]
        [InlineData("K", TemperatureUnit.Kelvin)]
        [InlineData("m°C", TemperatureUnit.MillidegreeCelsius)]
        [InlineData("T⊙", TemperatureUnit.SolarTemperature)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, TemperatureUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Temperature.TryParseUnit(abbreviation, out TemperatureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("°C", TemperatureUnit.DegreeCelsius)]
        [InlineData("°De", TemperatureUnit.DegreeDelisle)]
        [InlineData("°F", TemperatureUnit.DegreeFahrenheit)]
        [InlineData("°N", TemperatureUnit.DegreeNewton)]
        [InlineData("°R", TemperatureUnit.DegreeRankine)]
        [InlineData("°Ré", TemperatureUnit.DegreeReaumur)]
        [InlineData("°Rø", TemperatureUnit.DegreeRoemer)]
        [InlineData("K", TemperatureUnit.Kelvin)]
        [InlineData("m°C", TemperatureUnit.MillidegreeCelsius)]
        [InlineData("T⊙", TemperatureUnit.SolarTemperature)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, TemperatureUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Temperature.TryParseUnit(abbreviation, out TemperatureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "°C", TemperatureUnit.DegreeCelsius)]
        [InlineData("en-US", "°De", TemperatureUnit.DegreeDelisle)]
        [InlineData("en-US", "°F", TemperatureUnit.DegreeFahrenheit)]
        [InlineData("en-US", "°N", TemperatureUnit.DegreeNewton)]
        [InlineData("en-US", "°R", TemperatureUnit.DegreeRankine)]
        [InlineData("en-US", "°Ré", TemperatureUnit.DegreeReaumur)]
        [InlineData("en-US", "°Rø", TemperatureUnit.DegreeRoemer)]
        [InlineData("en-US", "K", TemperatureUnit.Kelvin)]
        [InlineData("en-US", "m°C", TemperatureUnit.MillidegreeCelsius)]
        [InlineData("en-US", "T⊙", TemperatureUnit.SolarTemperature)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, TemperatureUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Temperature.TryParseUnit(abbreviation, out TemperatureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "°C", TemperatureUnit.DegreeCelsius)]
        [InlineData("en-US", "°De", TemperatureUnit.DegreeDelisle)]
        [InlineData("en-US", "°F", TemperatureUnit.DegreeFahrenheit)]
        [InlineData("en-US", "°N", TemperatureUnit.DegreeNewton)]
        [InlineData("en-US", "°R", TemperatureUnit.DegreeRankine)]
        [InlineData("en-US", "°Ré", TemperatureUnit.DegreeReaumur)]
        [InlineData("en-US", "°Rø", TemperatureUnit.DegreeRoemer)]
        [InlineData("en-US", "K", TemperatureUnit.Kelvin)]
        [InlineData("en-US", "m°C", TemperatureUnit.MillidegreeCelsius)]
        [InlineData("en-US", "T⊙", TemperatureUnit.SolarTemperature)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, TemperatureUnit expectedUnit)
        {
            Assert.True(Temperature.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out TemperatureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", TemperatureUnit.DegreeCelsius, "°C")]
        [InlineData("en-US", TemperatureUnit.DegreeDelisle, "°De")]
        [InlineData("en-US", TemperatureUnit.DegreeFahrenheit, "°F")]
        [InlineData("en-US", TemperatureUnit.DegreeNewton, "°N")]
        [InlineData("en-US", TemperatureUnit.DegreeRankine, "°R")]
        [InlineData("en-US", TemperatureUnit.DegreeReaumur, "°Ré")]
        [InlineData("en-US", TemperatureUnit.DegreeRoemer, "°Rø")]
        [InlineData("en-US", TemperatureUnit.Kelvin, "K")]
        [InlineData("en-US", TemperatureUnit.MillidegreeCelsius, "m°C")]
        [InlineData("en-US", TemperatureUnit.SolarTemperature, "T⊙")]
        public void GetAbbreviationForCulture(string culture, TemperatureUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Temperature.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Temperature.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Temperature.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(TemperatureUnit unit)
        {
            var inBaseUnits = Temperature.From(1.0, Temperature.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(TemperatureUnit unit)
        {
            var quantity = Temperature.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(TemperatureUnit unit)
        {
            Assert.All(Temperature.Units.Where(u => u != Temperature.BaseUnit), fromUnit =>
            {
                var quantity = Temperature.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(TemperatureUnit unit)
        {
            var quantity = default(Temperature);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(TemperatureUnit unit)
        {
            var quantity = Temperature.From(3, Temperature.BaseUnit);
            Temperature expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<TemperatureUnit> quantityToConvert = quantity;
                IQuantity<TemperatureUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Temperature kelvin = Temperature.FromKelvins(3);
            Assert.Equal(3, Temperature.FromDegreesCelsius(kelvin.DegreesCelsius).Kelvins);
            Assert.Equal(3, Temperature.FromDegreesDelisle(kelvin.DegreesDelisle).Kelvins);
            Assert.Equal(3, Temperature.FromDegreesFahrenheit(kelvin.DegreesFahrenheit).Kelvins);
            Assert.Equal(3, Temperature.FromDegreesNewton(kelvin.DegreesNewton).Kelvins);
            Assert.Equal(3, Temperature.FromDegreesRankine(kelvin.DegreesRankine).Kelvins);
            Assert.Equal(3, Temperature.FromDegreesReaumur(kelvin.DegreesReaumur).Kelvins);
            Assert.Equal(3, Temperature.FromDegreesRoemer(kelvin.DegreesRoemer).Kelvins);
            Assert.Equal(3, Temperature.FromKelvins(kelvin.Kelvins).Kelvins);
            Assert.Equal(3, Temperature.FromMillidegreesCelsius(kelvin.MillidegreesCelsius).Kelvins);
            Assert.Equal(3, Temperature.FromSolarTemperatures(kelvin.SolarTemperatures).Kelvins);
        }


        [Fact]
        public void ComparisonOperators()
        {
            Temperature oneKelvin = Temperature.FromKelvins(1);
            Temperature twoKelvins = Temperature.FromKelvins(2);

            Assert.True(oneKelvin < twoKelvins);
            Assert.True(oneKelvin <= twoKelvins);
            Assert.True(twoKelvins > oneKelvin);
            Assert.True(twoKelvins >= oneKelvin);

            Assert.False(oneKelvin > twoKelvins);
            Assert.False(oneKelvin >= twoKelvins);
            Assert.False(twoKelvins < oneKelvin);
            Assert.False(twoKelvins <= oneKelvin);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Temperature kelvin = Temperature.FromKelvins(1);
            Assert.Equal(0, kelvin.CompareTo(kelvin));
            Assert.True(kelvin.CompareTo(Temperature.Zero) > 0);
            Assert.True(Temperature.Zero.CompareTo(kelvin) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Temperature kelvin = Temperature.FromKelvins(1);
            Assert.Throws<ArgumentException>(() => kelvin.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Temperature kelvin = Temperature.FromKelvins(1);
            Assert.Throws<ArgumentNullException>(() => kelvin.CompareTo(null));
        }

        [Theory]
        [InlineData(1, TemperatureUnit.Kelvin, 1, TemperatureUnit.Kelvin, true)]  // Same value and unit.
        [InlineData(1, TemperatureUnit.Kelvin, 2, TemperatureUnit.Kelvin, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, TemperatureUnit unitA, double valueB, TemperatureUnit unitB, bool expectEqual)
        {
            var a = new Temperature(valueA, unitA);
            var b = new Temperature(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Temperature.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Temperature kelvin = Temperature.FromKelvins(1);
            Assert.False(kelvin.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Temperature kelvin = Temperature.FromKelvins(1);
            Assert.False(kelvin.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Temperature.FromKelvins(firstValue);
            var otherQuantity = Temperature.FromKelvins(secondValue);
            TemperatureDelta maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, TemperatureDelta.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Temperature.FromKelvins(1);
            TemperatureDelta negativeTolerance = quantity - Temperature.FromKelvins(2);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<TemperatureUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Temperature.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Temperature.Info.Units, Temperature.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Temperature.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 °C", new Temperature(1, TemperatureUnit.DegreeCelsius).ToString());
            Assert.Equal("1 °De", new Temperature(1, TemperatureUnit.DegreeDelisle).ToString());
            Assert.Equal("1 °F", new Temperature(1, TemperatureUnit.DegreeFahrenheit).ToString());
            Assert.Equal("1 °N", new Temperature(1, TemperatureUnit.DegreeNewton).ToString());
            Assert.Equal("1 °R", new Temperature(1, TemperatureUnit.DegreeRankine).ToString());
            Assert.Equal("1 °Ré", new Temperature(1, TemperatureUnit.DegreeReaumur).ToString());
            Assert.Equal("1 °Rø", new Temperature(1, TemperatureUnit.DegreeRoemer).ToString());
            Assert.Equal("1 K", new Temperature(1, TemperatureUnit.Kelvin).ToString());
            Assert.Equal("1 m°C", new Temperature(1, TemperatureUnit.MillidegreeCelsius).ToString());
            Assert.Equal("1 T⊙", new Temperature(1, TemperatureUnit.SolarTemperature).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 °C", new Temperature(1, TemperatureUnit.DegreeCelsius).ToString(swedishCulture));
            Assert.Equal("1 °De", new Temperature(1, TemperatureUnit.DegreeDelisle).ToString(swedishCulture));
            Assert.Equal("1 °F", new Temperature(1, TemperatureUnit.DegreeFahrenheit).ToString(swedishCulture));
            Assert.Equal("1 °N", new Temperature(1, TemperatureUnit.DegreeNewton).ToString(swedishCulture));
            Assert.Equal("1 °R", new Temperature(1, TemperatureUnit.DegreeRankine).ToString(swedishCulture));
            Assert.Equal("1 °Ré", new Temperature(1, TemperatureUnit.DegreeReaumur).ToString(swedishCulture));
            Assert.Equal("1 °Rø", new Temperature(1, TemperatureUnit.DegreeRoemer).ToString(swedishCulture));
            Assert.Equal("1 K", new Temperature(1, TemperatureUnit.Kelvin).ToString(swedishCulture));
            Assert.Equal("1 m°C", new Temperature(1, TemperatureUnit.MillidegreeCelsius).ToString(swedishCulture));
            Assert.Equal("1 T⊙", new Temperature(1, TemperatureUnit.SolarTemperature).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 K", new Temperature(0.123456, TemperatureUnit.Kelvin).ToString("s1"));
            Assert.Equal("0.12 K", new Temperature(0.123456, TemperatureUnit.Kelvin).ToString("s2"));
            Assert.Equal("0.123 K", new Temperature(0.123456, TemperatureUnit.Kelvin).ToString("s3"));
            Assert.Equal("0.1235 K", new Temperature(0.123456, TemperatureUnit.Kelvin).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 K", new Temperature(0.123456, TemperatureUnit.Kelvin).ToString("s1", culture));
            Assert.Equal("0.12 K", new Temperature(0.123456, TemperatureUnit.Kelvin).ToString("s2", culture));
            Assert.Equal("0.123 K", new Temperature(0.123456, TemperatureUnit.Kelvin).ToString("s3", culture));
            Assert.Equal("0.1235 K", new Temperature(0.123456, TemperatureUnit.Kelvin).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Temperature.FromKelvins(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Temperature.FromKelvins(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Temperature.FromKelvins(1.0);
            var expected = Comparison.GetHashCode(typeof(Temperature), quantity.As(Temperature.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

    }
}
