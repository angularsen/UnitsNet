//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToEnergy
{
    /// <summary>
    /// A number to Energy Extensions
    /// </summary>
    public static class NumberToEnergyExtensions
    {
        /// <inheritdoc cref="Energy.FromBritishThermalUnits(QuantityValue)" />
        public static Energy BritishThermalUnits<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromBritishThermalUnits(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromBritishThermalUnits(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromCalories(QuantityValue)" />
        public static Energy Calories<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromCalories(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromCalories(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromDecathermsEc(QuantityValue)" />
        public static Energy DecathermsEc<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromDecathermsEc(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromDecathermsEc(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromDecathermsImperial(QuantityValue)" />
        public static Energy DecathermsImperial<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromDecathermsImperial(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromDecathermsImperial(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromDecathermsUs(QuantityValue)" />
        public static Energy DecathermsUs<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromDecathermsUs(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromDecathermsUs(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromElectronVolts(QuantityValue)" />
        public static Energy ElectronVolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromElectronVolts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromElectronVolts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromErgs(QuantityValue)" />
        public static Energy Ergs<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromErgs(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromErgs(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromFootPounds(QuantityValue)" />
        public static Energy FootPounds<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromFootPounds(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromFootPounds(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromGigabritishThermalUnits(QuantityValue)" />
        public static Energy GigabritishThermalUnits<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromGigabritishThermalUnits(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromGigabritishThermalUnits(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromGigaelectronVolts(QuantityValue)" />
        public static Energy GigaelectronVolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromGigaelectronVolts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromGigaelectronVolts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromGigajoules(QuantityValue)" />
        public static Energy Gigajoules<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromGigajoules(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromGigajoules(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromGigawattDays(QuantityValue)" />
        public static Energy GigawattDays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromGigawattDays(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromGigawattDays(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromGigawattHours(QuantityValue)" />
        public static Energy GigawattHours<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromGigawattHours(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromGigawattHours(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromHorsepowerHours(QuantityValue)" />
        public static Energy HorsepowerHours<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromHorsepowerHours(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromHorsepowerHours(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromJoules(QuantityValue)" />
        public static Energy Joules<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromJoules(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromJoules(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromKilobritishThermalUnits(QuantityValue)" />
        public static Energy KilobritishThermalUnits<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromKilobritishThermalUnits(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromKilobritishThermalUnits(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromKilocalories(QuantityValue)" />
        public static Energy Kilocalories<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromKilocalories(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromKilocalories(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromKiloelectronVolts(QuantityValue)" />
        public static Energy KiloelectronVolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromKiloelectronVolts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromKiloelectronVolts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromKilojoules(QuantityValue)" />
        public static Energy Kilojoules<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromKilojoules(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromKilojoules(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromKilowattDays(QuantityValue)" />
        public static Energy KilowattDays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromKilowattDays(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromKilowattDays(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromKilowattHours(QuantityValue)" />
        public static Energy KilowattHours<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromKilowattHours(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromKilowattHours(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromMegabritishThermalUnits(QuantityValue)" />
        public static Energy MegabritishThermalUnits<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromMegabritishThermalUnits(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromMegabritishThermalUnits(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromMegacalories(QuantityValue)" />
        public static Energy Megacalories<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromMegacalories(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromMegacalories(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromMegaelectronVolts(QuantityValue)" />
        public static Energy MegaelectronVolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromMegaelectronVolts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromMegaelectronVolts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromMegajoules(QuantityValue)" />
        public static Energy Megajoules<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromMegajoules(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromMegajoules(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromMegawattDays(QuantityValue)" />
        public static Energy MegawattDays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromMegawattDays(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromMegawattDays(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromMegawattHours(QuantityValue)" />
        public static Energy MegawattHours<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromMegawattHours(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromMegawattHours(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromMicrojoules(QuantityValue)" />
        public static Energy Microjoules<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromMicrojoules(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromMicrojoules(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromMillijoules(QuantityValue)" />
        public static Energy Millijoules<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromMillijoules(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromMillijoules(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromNanojoules(QuantityValue)" />
        public static Energy Nanojoules<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromNanojoules(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromNanojoules(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromPetajoules(QuantityValue)" />
        public static Energy Petajoules<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromPetajoules(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromPetajoules(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromTeraelectronVolts(QuantityValue)" />
        public static Energy TeraelectronVolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromTeraelectronVolts(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromTeraelectronVolts(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromTerajoules(QuantityValue)" />
        public static Energy Terajoules<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromTerajoules(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromTerajoules(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromTerawattDays(QuantityValue)" />
        public static Energy TerawattDays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromTerawattDays(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromTerawattDays(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromTerawattHours(QuantityValue)" />
        public static Energy TerawattHours<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromTerawattHours(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromTerawattHours(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromThermsEc(QuantityValue)" />
        public static Energy ThermsEc<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromThermsEc(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromThermsEc(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromThermsImperial(QuantityValue)" />
        public static Energy ThermsImperial<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromThermsImperial(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromThermsImperial(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromThermsUs(QuantityValue)" />
        public static Energy ThermsUs<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromThermsUs(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromThermsUs(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromWattDays(QuantityValue)" />
        public static Energy WattDays<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromWattDays(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromWattDays(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="Energy.FromWattHours(QuantityValue)" />
        public static Energy WattHours<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Energy.FromWattHours(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => Energy.FromWattHours(value.ToQuantityValue());
#endif

    }
}
