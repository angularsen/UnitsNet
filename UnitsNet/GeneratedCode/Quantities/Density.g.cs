//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System.Globalization;
using System.Resources;
using System.Runtime.Serialization;
using UnitsNet.Debug;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     The density, or more precisely, the volumetric mass density, of a substance is its mass per unit volume.
    /// </summary>
    /// <remarks>
    ///     http://en.wikipedia.org/wiki/Density
    /// </remarks>
    [DataContract]
    [DebuggerDisplay(QuantityDebugProxy.DisplayFormat)]
    [DebuggerTypeProxy(typeof(QuantityDebugProxy))]
    public readonly partial struct Density :
        IArithmeticQuantity<Density, DensityUnit>,
#if NET7_0_OR_GREATER
        IDivisionOperators<Density, Density, QuantityValue>,
        IMultiplyOperators<Density, KinematicViscosity, DynamicViscosity>,
        IMultiplyOperators<Density, Area, LinearDensity>,
        IMultiplyOperators<Density, Volume, Mass>,
        IMultiplyOperators<Density, VolumeConcentration, MassConcentration>,
        IMultiplyOperators<Density, VolumeFlow, MassFlow>,
        IMultiplyOperators<Density, Speed, MassFlux>,
        IMultiplyOperators<Density, Acceleration, SpecificWeight>,
        IComparisonOperators<Density, Density, bool>,
        IParsable<Density>,
#endif
        IComparable,
        IComparable<Density>,
        IEquatable<Density>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly DensityUnit? _unit;

        /// <summary>
        ///     Provides detailed information about the <see cref="Density"/> quantity, including its name, base unit, unit mappings, base dimensions, and conversion functions.
        /// </summary>
        public sealed class DensityInfo: QuantityInfo<Density, DensityUnit>
        {
            /// <inheritdoc />
            public DensityInfo(string name, DensityUnit baseUnit, IEnumerable<IUnitDefinition<DensityUnit>> unitMappings, Density zero, BaseDimensions baseDimensions,
                QuantityFromDelegate<Density, DensityUnit> fromDelegate, ResourceManager? unitAbbreviations)
                : base(name, baseUnit, unitMappings, zero, baseDimensions, fromDelegate, unitAbbreviations)
            {
            }

            /// <inheritdoc />
            public DensityInfo(string name, DensityUnit baseUnit, IEnumerable<IUnitDefinition<DensityUnit>> unitMappings, Density zero, BaseDimensions baseDimensions)
                : this(name, baseUnit, unitMappings, zero, baseDimensions, Density.From, new ResourceManager("UnitsNet.GeneratedCode.Resources.Density", typeof(Density).Assembly))
            {
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="DensityInfo"/> class with the default settings for the Density quantity.
            /// </summary>
            /// <returns>A new instance of the <see cref="DensityInfo"/> class with the default settings.</returns>
            public static DensityInfo CreateDefault()
            {
                return new DensityInfo(nameof(Density), DefaultBaseUnit, GetDefaultMappings(), new Density(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="DensityInfo"/> class with the default settings for the Density quantity and a callback for customizing the default unit mappings.
            /// </summary>
            /// <param name="customizeUnits">
            ///     A callback function for customizing the default unit mappings.
            /// </param>
            /// <returns>
            ///     A new instance of the <see cref="DensityInfo"/> class with the default settings.
            /// </returns>
            public static DensityInfo CreateDefault(Func<IEnumerable<UnitDefinition<DensityUnit>>, IEnumerable<IUnitDefinition<DensityUnit>>> customizeUnits)
            {
                return new DensityInfo(nameof(Density), DefaultBaseUnit, customizeUnits(GetDefaultMappings()), new Density(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     The <see cref="BaseDimensions" /> for <see cref="Density"/> is L^-3M.
            /// </summary>
            public static BaseDimensions DefaultBaseDimensions { get; } = new BaseDimensions(-3, 1, 0, 0, 0, 0, 0);

            /// <summary>
            ///     The default base unit of Density is KilogramPerCubicMeter. All conversions, as defined in the <see cref="GetDefaultMappings"/>, go via this value.
            /// </summary>
            public static DensityUnit DefaultBaseUnit { get; } = DensityUnit.KilogramPerCubicMeter;

            /// <summary>
            ///     Retrieves the default mappings for <see cref="DensityUnit"/>.
            /// </summary>
            /// <returns>An <see cref="IEnumerable{T}"/> of <see cref="UnitDefinition{DensityUnit}"/> representing the default unit mappings for Density.</returns>
            public static IEnumerable<UnitDefinition<DensityUnit>> GetDefaultMappings()
            {
                yield return new (DensityUnit.CentigramPerDeciliter, "CentigramPerDeciliter", "CentigramsPerDeciliter", BaseUnits.Undefined,
                     10             
                );
                yield return new (DensityUnit.CentigramPerLiter, "CentigramPerLiter", "CentigramsPerLiter", new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Centigram),
                     100             
                );
                yield return new (DensityUnit.CentigramPerMilliliter, "CentigramPerMilliliter", "CentigramsPerMilliliter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Centigram),
                     new QuantityValue(1, 10)             
                );
                yield return new (DensityUnit.DecigramPerDeciliter, "DecigramPerDeciliter", "DecigramsPerDeciliter", BaseUnits.Undefined,
                     1             
                );
                yield return new (DensityUnit.DecigramPerLiter, "DecigramPerLiter", "DecigramsPerLiter", new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Decigram),
                     10             
                );
                yield return new (DensityUnit.DecigramPerMilliliter, "DecigramPerMilliliter", "DecigramsPerMilliliter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Decigram),
                     new QuantityValue(1, 100)             
                );
                yield return new (DensityUnit.FemtogramPerDeciliter, "FemtogramPerDeciliter", "FemtogramsPerDeciliter", BaseUnits.Undefined,
                     100000000000000             
                );
                yield return new (DensityUnit.FemtogramPerLiter, "FemtogramPerLiter", "FemtogramsPerLiter", new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Femtogram),
                     1000000000000000             
                );
                yield return new (DensityUnit.FemtogramPerMilliliter, "FemtogramPerMilliliter", "FemtogramsPerMilliliter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Femtogram),
                     1000000000000             
                );
                yield return new (DensityUnit.GramPerCubicCentimeter, "GramPerCubicCentimeter", "GramsPerCubicCentimeter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Gram),
                     new QuantityValue(1, 1000)             
                );
                yield return new (DensityUnit.GramPerCubicFoot, "GramPerCubicFoot", "GramsPerCubicFoot", new BaseUnits(length: LengthUnit.Foot, mass: MassUnit.Gram),
                     new QuantityValue(55306341, 1953125)             
                );
                yield return new (DensityUnit.GramPerCubicInch, "GramPerCubicInch", "GramsPerCubicInch", new BaseUnits(length: LengthUnit.Inch, mass: MassUnit.Gram),
                     new QuantityValue(2048383, 125000000)             
                );
                yield return new (DensityUnit.GramPerCubicMeter, "GramPerCubicMeter", "GramsPerCubicMeter", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Gram),
                     1000             
                );
                yield return new (DensityUnit.GramPerCubicMillimeter, "GramPerCubicMillimeter", "GramsPerCubicMillimeter", new BaseUnits(length: LengthUnit.Millimeter, mass: MassUnit.Gram),
                     new QuantityValue(1, 1000000)             
                );
                yield return new (DensityUnit.GramPerDeciliter, "GramPerDeciliter", "GramsPerDeciliter", BaseUnits.Undefined,
                     new QuantityValue(1, 10)             
                );
                yield return new (DensityUnit.GramPerLiter, "GramPerLiter", "GramsPerLiter", new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Gram),
                     1             
                );
                yield return new (DensityUnit.GramPerMilliliter, "GramPerMilliliter", "GramsPerMilliliter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Gram),
                     new QuantityValue(1, 1000)             
                );
                yield return new (DensityUnit.KilogramPerCubicCentimeter, "KilogramPerCubicCentimeter", "KilogramsPerCubicCentimeter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Kilogram),
                     new QuantityValue(1, 1000000)             
                );
                yield return new (DensityUnit.KilogramPerCubicMeter, "KilogramPerCubicMeter", "KilogramsPerCubicMeter", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Kilogram));
                yield return new (DensityUnit.KilogramPerCubicMillimeter, "KilogramPerCubicMillimeter", "KilogramsPerCubicMillimeter", new BaseUnits(length: LengthUnit.Millimeter, mass: MassUnit.Kilogram),
                     new QuantityValue(1, 1000000000)             
                );
                yield return new (DensityUnit.KilogramPerLiter, "KilogramPerLiter", "KilogramsPerLiter", new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Kilogram),
                     new QuantityValue(1, 1000)             
                );
                yield return new (DensityUnit.KilopoundPerCubicFoot, "KilopoundPerCubicFoot", "KilopoundsPerCubicFoot", new BaseUnits(length: LengthUnit.Foot, mass: MassUnit.Kilopound),
                     new QuantityValue(221225364, 3543690390625)             
                );
                yield return new (DensityUnit.KilopoundPerCubicInch, "KilopoundPerCubicInch", "KilopoundsPerCubicInch", new BaseUnits(length: LengthUnit.Inch, mass: MassUnit.Kilopound),
                     new QuantityValue(2048383, 56699046250000)             
                );
                yield return new (DensityUnit.KilopoundPerCubicYard, "KilopoundPerCubicYard", "KilopoundsPerCubicYard", new BaseUnits(length: LengthUnit.Yard, mass: MassUnit.Kilopound),
                     new QuantityValue(5973084828, 3543690390625)             
                );
                yield return new (DensityUnit.MicrogramPerCubicMeter, "MicrogramPerCubicMeter", "MicrogramsPerCubicMeter", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Microgram),
                     1000000000             
                );
                yield return new (DensityUnit.MicrogramPerDeciliter, "MicrogramPerDeciliter", "MicrogramsPerDeciliter", BaseUnits.Undefined,
                     100000             
                );
                yield return new (DensityUnit.MicrogramPerLiter, "MicrogramPerLiter", "MicrogramsPerLiter", new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Microgram),
                     1000000             
                );
                yield return new (DensityUnit.MicrogramPerMilliliter, "MicrogramPerMilliliter", "MicrogramsPerMilliliter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Microgram),
                     1000             
                );
                yield return new (DensityUnit.MilligramPerCubicMeter, "MilligramPerCubicMeter", "MilligramsPerCubicMeter", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Milligram),
                     1000000             
                );
                yield return new (DensityUnit.MilligramPerDeciliter, "MilligramPerDeciliter", "MilligramsPerDeciliter", BaseUnits.Undefined,
                     100             
                );
                yield return new (DensityUnit.MilligramPerLiter, "MilligramPerLiter", "MilligramsPerLiter", new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Milligram),
                     1000             
                );
                yield return new (DensityUnit.MilligramPerMilliliter, "MilligramPerMilliliter", "MilligramsPerMilliliter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Milligram),
                     1             
                );
                yield return new (DensityUnit.NanogramPerDeciliter, "NanogramPerDeciliter", "NanogramsPerDeciliter", BaseUnits.Undefined,
                     100000000             
                );
                yield return new (DensityUnit.NanogramPerLiter, "NanogramPerLiter", "NanogramsPerLiter", new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Nanogram),
                     1000000000             
                );
                yield return new (DensityUnit.NanogramPerMilliliter, "NanogramPerMilliliter", "NanogramsPerMilliliter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Nanogram),
                     1000000             
                );
                yield return new (DensityUnit.PicogramPerDeciliter, "PicogramPerDeciliter", "PicogramsPerDeciliter", BaseUnits.Undefined,
                     100000000000             
                );
                yield return new (DensityUnit.PicogramPerLiter, "PicogramPerLiter", "PicogramsPerLiter", new BaseUnits(length: LengthUnit.Decimeter, mass: MassUnit.Picogram),
                     1000000000000             
                );
                yield return new (DensityUnit.PicogramPerMilliliter, "PicogramPerMilliliter", "PicogramsPerMilliliter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Picogram),
                     1000000000             
                );
                yield return new (DensityUnit.PoundPerCubicCentimeter, "PoundPerCubicCentimeter", "PoundsPerCubicCentimeter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Pound),
                     new QuantityValue(100, 45359237)             
                );
                yield return new (DensityUnit.PoundPerCubicFoot, "PoundPerCubicFoot", "PoundsPerCubicFoot", new BaseUnits(length: LengthUnit.Foot, mass: MassUnit.Pound),
                     new QuantityValue(1769802912, 28349523125)             
                );
                yield return new (DensityUnit.PoundPerCubicInch, "PoundPerCubicInch", "PoundsPerCubicInch", new BaseUnits(length: LengthUnit.Inch, mass: MassUnit.Pound),
                     new QuantityValue(2048383, 56699046250)             
                );
                yield return new (DensityUnit.PoundPerCubicMeter, "PoundPerCubicMeter", "PoundsPerCubicMeter", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Pound),
                     new QuantityValue(100000000, 45359237)             
                );
                yield return new (DensityUnit.PoundPerCubicMillimeter, "PoundPerCubicMillimeter", "PoundsPerCubicMillimeter", new BaseUnits(length: LengthUnit.Millimeter, mass: MassUnit.Pound),
                     new QuantityValue(1, 453592370)             
                );
                yield return new (DensityUnit.PoundPerCubicYard, "PoundPerCubicYard", "PoundsPerCubicYard", new BaseUnits(length: LengthUnit.Yard, mass: MassUnit.Pound),
                     new QuantityValue(47784678624, 28349523125)             
                );
                yield return new (DensityUnit.PoundPerImperialGallon, "PoundPerImperialGallon", "PoundsPerImperialGallon", BaseUnits.Undefined,
                     new QuantityValue(454609, 45359237)             
                );
                yield return new (DensityUnit.PoundPerUSGallon, "PoundPerUSGallon", "PoundsPerUSGallon", BaseUnits.Undefined,
                     new QuantityValue(6145149, 736351250)             
                );
                yield return new (DensityUnit.SlugPerCubicCentimeter, "SlugPerCubicCentimeter", "SlugsPerCubicCentimeter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Slug),
                     new QuantityValue(609600, 8896443230521)             
                );
                yield return new (DensityUnit.SlugPerCubicFoot, "SlugPerCubicFoot", "SlugsPerCubicFoot", new BaseUnits(length: LengthUnit.Foot, mass: MassUnit.Slug),
                     new QuantityValue(10788718551552, 5560277019075625)             
                );
                yield return new (DensityUnit.SlugPerCubicInch, "SlugPerCubicInch", "SlugsPerCubicInch", new BaseUnits(length: LengthUnit.Inch, mass: MassUnit.Slug),
                     new QuantityValue(6243471384, 5560277019075625)             
                );
                yield return new (DensityUnit.SlugPerCubicMeter, "SlugPerCubicMeter", "SlugsPerCubicMeter", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Slug),
                     new QuantityValue(609600000000, 8896443230521)             
                );
                yield return new (DensityUnit.SlugPerCubicMillimeter, "SlugPerCubicMillimeter", "SlugsPerCubicMillimeter", new BaseUnits(length: LengthUnit.Millimeter, mass: MassUnit.Slug),
                     new QuantityValue(3048, 44482216152605)             
                );
                yield return new (DensityUnit.TonnePerCubicCentimeter, "TonnePerCubicCentimeter", "TonnesPerCubicCentimeter", new BaseUnits(length: LengthUnit.Centimeter, mass: MassUnit.Tonne),
                     new QuantityValue(1, 1000000000)             
                );
                yield return new (DensityUnit.TonnePerCubicFoot, "TonnePerCubicFoot", "TonnesPerCubicFoot", new BaseUnits(length: LengthUnit.Foot, mass: MassUnit.Tonne),
                     new QuantityValue(55306341, 1953125000000)             
                );
                yield return new (DensityUnit.TonnePerCubicInch, "TonnePerCubicInch", "TonnesPerCubicInch", new BaseUnits(length: LengthUnit.Inch, mass: MassUnit.Tonne),
                     new QuantityValue(2048383, 125000000000000)             
                );
                yield return new (DensityUnit.TonnePerCubicMeter, "TonnePerCubicMeter", "TonnesPerCubicMeter", new BaseUnits(length: LengthUnit.Meter, mass: MassUnit.Tonne),
                     new QuantityValue(1, 1000)             
                );
                yield return new (DensityUnit.TonnePerCubicMillimeter, "TonnePerCubicMillimeter", "TonnesPerCubicMillimeter", new BaseUnits(length: LengthUnit.Millimeter, mass: MassUnit.Tonne),
                     new QuantityValue(1, 1000000000000)             
                );
            }
        }

        static Density()
        {
            Info = UnitsNetSetup.CreateQuantityInfo(DensityInfo.CreateDefault);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Density(QuantityValue value, DensityUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Density(QuantityValue value, UnitSystem unitSystem)
        {
            _value = value;
            _unit = Info.GetDefaultUnit(unitSystem);
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Density" /> instances.
        /// </summary>
        [Obsolete("Replaced by UnitConverter.Default")]
        public static UnitConverter DefaultConversionFunctions => UnitConverter.Default;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<Density, DensityUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions => Info.BaseDimensions;

        /// <summary>
        ///     The base unit of Density, which is KilogramPerCubicMeter. All conversions go via this value.
        /// </summary>
        public static DensityUnit BaseUnit => Info.BaseUnitInfo.Value;

        /// <summary>
        ///     All units of measurement for the Density quantity.
        /// </summary>
        public static IReadOnlyCollection<DensityUnit> Units => Info.Units;

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit KilogramPerCubicMeter.
        /// </summary>
        public static Density Zero => Info.Zero;

        #endregion

        #region Properties

        /// <inheritdoc />
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public DensityUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<Density, DensityUnit> QuantityInfo => Info;

        #region Explicit implementations

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UnitKey IQuantity.UnitKey => UnitKey.ForUnit(Unit);

#if NETSTANDARD2_0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuantityInstanceInfo<Density> IQuantityOfType<Density>.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo<DensityUnit> IQuantity<DensityUnit>.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo IQuantity.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Enum IQuantity.Unit => Unit;
#endif

        #endregion

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.CentigramPerDeciliter"/>
        /// </summary>
        public QuantityValue CentigramsPerDeciliter => this.As(DensityUnit.CentigramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.CentigramPerLiter"/>
        /// </summary>
        public QuantityValue CentigramsPerLiter => this.As(DensityUnit.CentigramPerLiter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.CentigramPerMilliliter"/>
        /// </summary>
        public QuantityValue CentigramsPerMilliliter => this.As(DensityUnit.CentigramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.DecigramPerDeciliter"/>
        /// </summary>
        public QuantityValue DecigramsPerDeciliter => this.As(DensityUnit.DecigramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.DecigramPerLiter"/>
        /// </summary>
        public QuantityValue DecigramsPerLiter => this.As(DensityUnit.DecigramPerLiter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.DecigramPerMilliliter"/>
        /// </summary>
        public QuantityValue DecigramsPerMilliliter => this.As(DensityUnit.DecigramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.FemtogramPerDeciliter"/>
        /// </summary>
        public QuantityValue FemtogramsPerDeciliter => this.As(DensityUnit.FemtogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.FemtogramPerLiter"/>
        /// </summary>
        public QuantityValue FemtogramsPerLiter => this.As(DensityUnit.FemtogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.FemtogramPerMilliliter"/>
        /// </summary>
        public QuantityValue FemtogramsPerMilliliter => this.As(DensityUnit.FemtogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicCentimeter"/>
        /// </summary>
        public QuantityValue GramsPerCubicCentimeter => this.As(DensityUnit.GramPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicFoot"/>
        /// </summary>
        public QuantityValue GramsPerCubicFoot => this.As(DensityUnit.GramPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicInch"/>
        /// </summary>
        public QuantityValue GramsPerCubicInch => this.As(DensityUnit.GramPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicMeter"/>
        /// </summary>
        public QuantityValue GramsPerCubicMeter => this.As(DensityUnit.GramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.GramPerCubicMillimeter"/>
        /// </summary>
        public QuantityValue GramsPerCubicMillimeter => this.As(DensityUnit.GramPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.GramPerDeciliter"/>
        /// </summary>
        public QuantityValue GramsPerDeciliter => this.As(DensityUnit.GramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.GramPerLiter"/>
        /// </summary>
        public QuantityValue GramsPerLiter => this.As(DensityUnit.GramPerLiter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.GramPerMilliliter"/>
        /// </summary>
        public QuantityValue GramsPerMilliliter => this.As(DensityUnit.GramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerCubicCentimeter"/>
        /// </summary>
        public QuantityValue KilogramsPerCubicCentimeter => this.As(DensityUnit.KilogramPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerCubicMeter"/>
        /// </summary>
        public QuantityValue KilogramsPerCubicMeter => this.As(DensityUnit.KilogramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerCubicMillimeter"/>
        /// </summary>
        public QuantityValue KilogramsPerCubicMillimeter => this.As(DensityUnit.KilogramPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.KilogramPerLiter"/>
        /// </summary>
        public QuantityValue KilogramsPerLiter => this.As(DensityUnit.KilogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.KilopoundPerCubicFoot"/>
        /// </summary>
        public QuantityValue KilopoundsPerCubicFoot => this.As(DensityUnit.KilopoundPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.KilopoundPerCubicInch"/>
        /// </summary>
        public QuantityValue KilopoundsPerCubicInch => this.As(DensityUnit.KilopoundPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.KilopoundPerCubicYard"/>
        /// </summary>
        public QuantityValue KilopoundsPerCubicYard => this.As(DensityUnit.KilopoundPerCubicYard);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerCubicMeter"/>
        /// </summary>
        public QuantityValue MicrogramsPerCubicMeter => this.As(DensityUnit.MicrogramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerDeciliter"/>
        /// </summary>
        public QuantityValue MicrogramsPerDeciliter => this.As(DensityUnit.MicrogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerLiter"/>
        /// </summary>
        public QuantityValue MicrogramsPerLiter => this.As(DensityUnit.MicrogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.MicrogramPerMilliliter"/>
        /// </summary>
        public QuantityValue MicrogramsPerMilliliter => this.As(DensityUnit.MicrogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerCubicMeter"/>
        /// </summary>
        public QuantityValue MilligramsPerCubicMeter => this.As(DensityUnit.MilligramPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerDeciliter"/>
        /// </summary>
        public QuantityValue MilligramsPerDeciliter => this.As(DensityUnit.MilligramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerLiter"/>
        /// </summary>
        public QuantityValue MilligramsPerLiter => this.As(DensityUnit.MilligramPerLiter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.MilligramPerMilliliter"/>
        /// </summary>
        public QuantityValue MilligramsPerMilliliter => this.As(DensityUnit.MilligramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.NanogramPerDeciliter"/>
        /// </summary>
        public QuantityValue NanogramsPerDeciliter => this.As(DensityUnit.NanogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.NanogramPerLiter"/>
        /// </summary>
        public QuantityValue NanogramsPerLiter => this.As(DensityUnit.NanogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.NanogramPerMilliliter"/>
        /// </summary>
        public QuantityValue NanogramsPerMilliliter => this.As(DensityUnit.NanogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PicogramPerDeciliter"/>
        /// </summary>
        public QuantityValue PicogramsPerDeciliter => this.As(DensityUnit.PicogramPerDeciliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PicogramPerLiter"/>
        /// </summary>
        public QuantityValue PicogramsPerLiter => this.As(DensityUnit.PicogramPerLiter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PicogramPerMilliliter"/>
        /// </summary>
        public QuantityValue PicogramsPerMilliliter => this.As(DensityUnit.PicogramPerMilliliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicCentimeter"/>
        /// </summary>
        public QuantityValue PoundsPerCubicCentimeter => this.As(DensityUnit.PoundPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicFoot"/>
        /// </summary>
        public QuantityValue PoundsPerCubicFoot => this.As(DensityUnit.PoundPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicInch"/>
        /// </summary>
        public QuantityValue PoundsPerCubicInch => this.As(DensityUnit.PoundPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicMeter"/>
        /// </summary>
        public QuantityValue PoundsPerCubicMeter => this.As(DensityUnit.PoundPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicMillimeter"/>
        /// </summary>
        public QuantityValue PoundsPerCubicMillimeter => this.As(DensityUnit.PoundPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PoundPerCubicYard"/>
        /// </summary>
        public QuantityValue PoundsPerCubicYard => this.As(DensityUnit.PoundPerCubicYard);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PoundPerImperialGallon"/>
        /// </summary>
        public QuantityValue PoundsPerImperialGallon => this.As(DensityUnit.PoundPerImperialGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.PoundPerUSGallon"/>
        /// </summary>
        public QuantityValue PoundsPerUSGallon => this.As(DensityUnit.PoundPerUSGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicCentimeter"/>
        /// </summary>
        public QuantityValue SlugsPerCubicCentimeter => this.As(DensityUnit.SlugPerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicFoot"/>
        /// </summary>
        public QuantityValue SlugsPerCubicFoot => this.As(DensityUnit.SlugPerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicInch"/>
        /// </summary>
        public QuantityValue SlugsPerCubicInch => this.As(DensityUnit.SlugPerCubicInch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicMeter"/>
        /// </summary>
        public QuantityValue SlugsPerCubicMeter => this.As(DensityUnit.SlugPerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.SlugPerCubicMillimeter"/>
        /// </summary>
        public QuantityValue SlugsPerCubicMillimeter => this.As(DensityUnit.SlugPerCubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicCentimeter"/>
        /// </summary>
        public QuantityValue TonnesPerCubicCentimeter => this.As(DensityUnit.TonnePerCubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicFoot"/>
        /// </summary>
        public QuantityValue TonnesPerCubicFoot => this.As(DensityUnit.TonnePerCubicFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicInch"/>
        /// </summary>
        public QuantityValue TonnesPerCubicInch => this.As(DensityUnit.TonnePerCubicInch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicMeter"/>
        /// </summary>
        public QuantityValue TonnesPerCubicMeter => this.As(DensityUnit.TonnePerCubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="DensityUnit.TonnePerCubicMillimeter"/>
        /// </summary>
        public QuantityValue TonnesPerCubicMillimeter => this.As(DensityUnit.TonnePerCubicMillimeter);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(DensityUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(DensityUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.CentigramPerDeciliter"/>.
        /// </summary>
        public static Density FromCentigramsPerDeciliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.CentigramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.CentigramPerLiter"/>.
        /// </summary>
        public static Density FromCentigramsPerLiter(QuantityValue value)
        {
            return new Density(value, DensityUnit.CentigramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.CentigramPerMilliliter"/>.
        /// </summary>
        public static Density FromCentigramsPerMilliliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.CentigramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.DecigramPerDeciliter"/>.
        /// </summary>
        public static Density FromDecigramsPerDeciliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.DecigramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.DecigramPerLiter"/>.
        /// </summary>
        public static Density FromDecigramsPerLiter(QuantityValue value)
        {
            return new Density(value, DensityUnit.DecigramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.DecigramPerMilliliter"/>.
        /// </summary>
        public static Density FromDecigramsPerMilliliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.DecigramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.FemtogramPerDeciliter"/>.
        /// </summary>
        public static Density FromFemtogramsPerDeciliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.FemtogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.FemtogramPerLiter"/>.
        /// </summary>
        public static Density FromFemtogramsPerLiter(QuantityValue value)
        {
            return new Density(value, DensityUnit.FemtogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.FemtogramPerMilliliter"/>.
        /// </summary>
        public static Density FromFemtogramsPerMilliliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.FemtogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicCentimeter"/>.
        /// </summary>
        public static Density FromGramsPerCubicCentimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.GramPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicFoot"/>.
        /// </summary>
        public static Density FromGramsPerCubicFoot(QuantityValue value)
        {
            return new Density(value, DensityUnit.GramPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicInch"/>.
        /// </summary>
        public static Density FromGramsPerCubicInch(QuantityValue value)
        {
            return new Density(value, DensityUnit.GramPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicMeter"/>.
        /// </summary>
        public static Density FromGramsPerCubicMeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.GramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerCubicMillimeter"/>.
        /// </summary>
        public static Density FromGramsPerCubicMillimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.GramPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerDeciliter"/>.
        /// </summary>
        public static Density FromGramsPerDeciliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.GramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerLiter"/>.
        /// </summary>
        public static Density FromGramsPerLiter(QuantityValue value)
        {
            return new Density(value, DensityUnit.GramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.GramPerMilliliter"/>.
        /// </summary>
        public static Density FromGramsPerMilliliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.GramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerCubicCentimeter"/>.
        /// </summary>
        public static Density FromKilogramsPerCubicCentimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.KilogramPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerCubicMeter"/>.
        /// </summary>
        public static Density FromKilogramsPerCubicMeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.KilogramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerCubicMillimeter"/>.
        /// </summary>
        public static Density FromKilogramsPerCubicMillimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.KilogramPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilogramPerLiter"/>.
        /// </summary>
        public static Density FromKilogramsPerLiter(QuantityValue value)
        {
            return new Density(value, DensityUnit.KilogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilopoundPerCubicFoot"/>.
        /// </summary>
        public static Density FromKilopoundsPerCubicFoot(QuantityValue value)
        {
            return new Density(value, DensityUnit.KilopoundPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilopoundPerCubicInch"/>.
        /// </summary>
        public static Density FromKilopoundsPerCubicInch(QuantityValue value)
        {
            return new Density(value, DensityUnit.KilopoundPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.KilopoundPerCubicYard"/>.
        /// </summary>
        public static Density FromKilopoundsPerCubicYard(QuantityValue value)
        {
            return new Density(value, DensityUnit.KilopoundPerCubicYard);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerCubicMeter"/>.
        /// </summary>
        public static Density FromMicrogramsPerCubicMeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.MicrogramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerDeciliter"/>.
        /// </summary>
        public static Density FromMicrogramsPerDeciliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.MicrogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerLiter"/>.
        /// </summary>
        public static Density FromMicrogramsPerLiter(QuantityValue value)
        {
            return new Density(value, DensityUnit.MicrogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MicrogramPerMilliliter"/>.
        /// </summary>
        public static Density FromMicrogramsPerMilliliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.MicrogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerCubicMeter"/>.
        /// </summary>
        public static Density FromMilligramsPerCubicMeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.MilligramPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerDeciliter"/>.
        /// </summary>
        public static Density FromMilligramsPerDeciliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.MilligramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerLiter"/>.
        /// </summary>
        public static Density FromMilligramsPerLiter(QuantityValue value)
        {
            return new Density(value, DensityUnit.MilligramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.MilligramPerMilliliter"/>.
        /// </summary>
        public static Density FromMilligramsPerMilliliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.MilligramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.NanogramPerDeciliter"/>.
        /// </summary>
        public static Density FromNanogramsPerDeciliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.NanogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.NanogramPerLiter"/>.
        /// </summary>
        public static Density FromNanogramsPerLiter(QuantityValue value)
        {
            return new Density(value, DensityUnit.NanogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.NanogramPerMilliliter"/>.
        /// </summary>
        public static Density FromNanogramsPerMilliliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.NanogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PicogramPerDeciliter"/>.
        /// </summary>
        public static Density FromPicogramsPerDeciliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.PicogramPerDeciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PicogramPerLiter"/>.
        /// </summary>
        public static Density FromPicogramsPerLiter(QuantityValue value)
        {
            return new Density(value, DensityUnit.PicogramPerLiter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PicogramPerMilliliter"/>.
        /// </summary>
        public static Density FromPicogramsPerMilliliter(QuantityValue value)
        {
            return new Density(value, DensityUnit.PicogramPerMilliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicCentimeter"/>.
        /// </summary>
        public static Density FromPoundsPerCubicCentimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.PoundPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicFoot"/>.
        /// </summary>
        public static Density FromPoundsPerCubicFoot(QuantityValue value)
        {
            return new Density(value, DensityUnit.PoundPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicInch"/>.
        /// </summary>
        public static Density FromPoundsPerCubicInch(QuantityValue value)
        {
            return new Density(value, DensityUnit.PoundPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicMeter"/>.
        /// </summary>
        public static Density FromPoundsPerCubicMeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.PoundPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicMillimeter"/>.
        /// </summary>
        public static Density FromPoundsPerCubicMillimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.PoundPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerCubicYard"/>.
        /// </summary>
        public static Density FromPoundsPerCubicYard(QuantityValue value)
        {
            return new Density(value, DensityUnit.PoundPerCubicYard);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerImperialGallon"/>.
        /// </summary>
        public static Density FromPoundsPerImperialGallon(QuantityValue value)
        {
            return new Density(value, DensityUnit.PoundPerImperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.PoundPerUSGallon"/>.
        /// </summary>
        public static Density FromPoundsPerUSGallon(QuantityValue value)
        {
            return new Density(value, DensityUnit.PoundPerUSGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicCentimeter"/>.
        /// </summary>
        public static Density FromSlugsPerCubicCentimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.SlugPerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicFoot"/>.
        /// </summary>
        public static Density FromSlugsPerCubicFoot(QuantityValue value)
        {
            return new Density(value, DensityUnit.SlugPerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicInch"/>.
        /// </summary>
        public static Density FromSlugsPerCubicInch(QuantityValue value)
        {
            return new Density(value, DensityUnit.SlugPerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicMeter"/>.
        /// </summary>
        public static Density FromSlugsPerCubicMeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.SlugPerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.SlugPerCubicMillimeter"/>.
        /// </summary>
        public static Density FromSlugsPerCubicMillimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.SlugPerCubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicCentimeter"/>.
        /// </summary>
        public static Density FromTonnesPerCubicCentimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.TonnePerCubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicFoot"/>.
        /// </summary>
        public static Density FromTonnesPerCubicFoot(QuantityValue value)
        {
            return new Density(value, DensityUnit.TonnePerCubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicInch"/>.
        /// </summary>
        public static Density FromTonnesPerCubicInch(QuantityValue value)
        {
            return new Density(value, DensityUnit.TonnePerCubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicMeter"/>.
        /// </summary>
        public static Density FromTonnesPerCubicMeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.TonnePerCubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Density"/> from <see cref="DensityUnit.TonnePerCubicMillimeter"/>.
        /// </summary>
        public static Density FromTonnesPerCubicMillimeter(QuantityValue value)
        {
            return new Density(value, DensityUnit.TonnePerCubicMillimeter);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DensityUnit" /> to <see cref="Density" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Density unit value.</returns>
        public static Density From(QuantityValue value, DensityUnit fromUnit)
        {
            return new Density(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Density Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Density Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Density, DensityUnit>(str, provider, From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse([NotNullWhen(true)]string? str, out Density result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse([NotNullWhen(true)]string? str, IFormatProvider? provider, out Density result)
        {
            return QuantityParser.Default.TryParse<Density, DensityUnit>(str, provider, From, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DensityUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static DensityUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse(str, Info.UnitInfos, provider).Value;
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider?,out UnitsNet.Units.DensityUnit)"/>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, out DensityUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, IFormatProvider? provider, out DensityUnit unit)
        {
            return UnitParser.Default.TryParse(str, Info, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Density operator -(Density right)
        {
            return new Density(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Density"/> from adding two <see cref="Density"/>.</summary>
        public static Density operator +(Density left, Density right)
        {
            return new Density(left.Value + right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Density"/> from subtracting two <see cref="Density"/>.</summary>
        public static Density operator -(Density left, Density right)
        {
            return new Density(left.Value - right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Density"/> from multiplying value and <see cref="Density"/>.</summary>
        public static Density operator *(QuantityValue left, Density right)
        {
            return new Density(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Density"/> from multiplying value and <see cref="Density"/>.</summary>
        public static Density operator *(Density left, QuantityValue right)
        {
            return new Density(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Density"/> from dividing <see cref="Density"/> by value.</summary>
        public static Density operator /(Density left, QuantityValue right)
        {
            return new Density(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Density"/> by <see cref="Density"/>.</summary>
        public static QuantityValue operator /(Density left, Density right)
        {
            return left.KilogramsPerCubicMeter / right.KilogramsPerCubicMeter;
        }

        #endregion

        #region Relational Operators

        /// <summary>Calculates the inverse of this quantity.</summary>
        /// <returns>The corresponding inverse quantity, <see cref="SpecificVolume"/>.</returns>
        public SpecificVolume Inverse()
        {
            return UnitConverter.Default.ConvertTo(Value, Unit, SpecificVolume.Info);
        }

        /// <summary>Get <see cref="DynamicViscosity"/> from <see cref="Density"/> * <see cref="KinematicViscosity"/>.</summary>
        public static DynamicViscosity operator *(Density density, KinematicViscosity kinematicViscosity)
        {
            return DynamicViscosity.FromNewtonSecondsPerMeterSquared(density.KilogramsPerCubicMeter * kinematicViscosity.SquareMetersPerSecond);
        }

        /// <summary>Get <see cref="LinearDensity"/> from <see cref="Density"/> * <see cref="Area"/>.</summary>
        public static LinearDensity operator *(Density density, Area area)
        {
            return LinearDensity.FromKilogramsPerMeter(density.KilogramsPerCubicMeter * area.SquareMeters);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Density"/> * <see cref="Volume"/>.</summary>
        public static Mass operator *(Density density, Volume volume)
        {
            return Mass.FromKilograms(density.KilogramsPerCubicMeter * volume.CubicMeters);
        }

        /// <summary>Get <see cref="MassConcentration"/> from <see cref="Density"/> * <see cref="VolumeConcentration"/>.</summary>
        public static MassConcentration operator *(Density density, VolumeConcentration volumeConcentration)
        {
            return MassConcentration.FromKilogramsPerCubicMeter(density.KilogramsPerCubicMeter * volumeConcentration.DecimalFractions);
        }

        /// <summary>Get <see cref="MassFlow"/> from <see cref="Density"/> * <see cref="VolumeFlow"/>.</summary>
        public static MassFlow operator *(Density density, VolumeFlow volumeFlow)
        {
            return MassFlow.FromKilogramsPerSecond(density.KilogramsPerCubicMeter * volumeFlow.CubicMetersPerSecond);
        }

        /// <summary>Get <see cref="MassFlux"/> from <see cref="Density"/> * <see cref="Speed"/>.</summary>
        public static MassFlux operator *(Density density, Speed speed)
        {
            return MassFlux.FromKilogramsPerSecondPerSquareMeter(density.KilogramsPerCubicMeter * speed.MetersPerSecond);
        }

        /// <summary>Get <see cref="SpecificWeight"/> from <see cref="Density"/> * <see cref="Acceleration"/>.</summary>
        public static SpecificWeight operator *(Density density, Acceleration acceleration)
        {
            return SpecificWeight.FromNewtonsPerCubicMeter(density.KilogramsPerCubicMeter * acceleration.MetersPerSecondSquared);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Density left, Density right)
        {
            return left.Value <= right.As(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Density left, Density right)
        {
            return left.Value >= right.As(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Density left, Density right)
        {
            return left.Value < right.As(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Density left, Density right)
        {
            return left.Value > right.As(left.Unit);
        }

        /// <summary>Indicates strict equality of two <see cref="Density"/> quantities.</summary>
        public static bool operator ==(Density left, Density right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Density"/> quantities.</summary>
        public static bool operator !=(Density left, Density right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Density"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is not Density otherQuantity)
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Density"/> quantities.</summary>
        public bool Equals(Density other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Density.</returns>
        public override int GetHashCode()
        {
            return Comparison.GetHashCode(typeof(Density), this.As(BaseUnit));
        }
        
        /// <inheritdoc  cref="CompareTo(Density)" />
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        public int CompareTo(object? obj)
        {
            if (obj is not Density otherQuantity)
                throw obj is null ? new ArgumentNullException(nameof(obj)) : ExceptionHelper.CreateArgumentException<Density>(obj, nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>
        ///     Compares the current <see cref="Density"/> with another <see cref="Density"/> and returns an integer that indicates
        ///     whether the current instance precedes, follows, or occurs in the same position in the sort order as the other quantity, when converted to the same unit.
        /// </summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Density other)
        {
            return _value.CompareTo(other.As(this.Unit));
        }

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null, null);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TQuantity}(TQuantity, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Default.Format(this, format, provider);
        }

        #endregion

    }
}
