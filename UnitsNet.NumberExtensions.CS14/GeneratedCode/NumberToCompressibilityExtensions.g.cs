//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToCompressibility
{
    /// <summary>
    /// A number to Compressibility Extensions
    /// </summary>
    public static class NumberToCompressibilityExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Compressibility.FromInverseAtmospheres(QuantityValue)" />
            public Compressibility InverseAtmospheres
#if NET7_0_OR_GREATER
                => Compressibility.FromInverseAtmospheres(QuantityValue.CreateChecked(value));
#else
                => Compressibility.FromInverseAtmospheres(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Compressibility.FromInverseBars(QuantityValue)" />
            public Compressibility InverseBars
#if NET7_0_OR_GREATER
                => Compressibility.FromInverseBars(QuantityValue.CreateChecked(value));
#else
                => Compressibility.FromInverseBars(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Compressibility.FromInverseKilopascals(QuantityValue)" />
            public Compressibility InverseKilopascals
#if NET7_0_OR_GREATER
                => Compressibility.FromInverseKilopascals(QuantityValue.CreateChecked(value));
#else
                => Compressibility.FromInverseKilopascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Compressibility.FromInverseMegapascals(QuantityValue)" />
            public Compressibility InverseMegapascals
#if NET7_0_OR_GREATER
                => Compressibility.FromInverseMegapascals(QuantityValue.CreateChecked(value));
#else
                => Compressibility.FromInverseMegapascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Compressibility.FromInverseMillibars(QuantityValue)" />
            public Compressibility InverseMillibars
#if NET7_0_OR_GREATER
                => Compressibility.FromInverseMillibars(QuantityValue.CreateChecked(value));
#else
                => Compressibility.FromInverseMillibars(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Compressibility.FromInversePascals(QuantityValue)" />
            public Compressibility InversePascals
#if NET7_0_OR_GREATER
                => Compressibility.FromInversePascals(QuantityValue.CreateChecked(value));
#else
                => Compressibility.FromInversePascals(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Compressibility.FromInversePoundsForcePerSquareInch(QuantityValue)" />
            public Compressibility InversePoundsForcePerSquareInch
#if NET7_0_OR_GREATER
                => Compressibility.FromInversePoundsForcePerSquareInch(QuantityValue.CreateChecked(value));
#else
                => Compressibility.FromInversePoundsForcePerSquareInch(value.ToQuantityValue());
#endif

        }
    }
}
