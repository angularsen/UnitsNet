//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Equivalent dose is a dose quantity representing the stochastic health effects of low levels of ionizing radiation on the human body which represents the probability of radiation-induced cancer and genetic damage.
    /// </summary>
    public struct  RadiationEquivalentDose
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly RadiationEquivalentDoseUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public RadiationEquivalentDoseUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public RadiationEquivalentDose(double value, RadiationEquivalentDoseUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of RadiationEquivalentDose, which is Second. All conversions go via this value.
        /// </summary>
        public static RadiationEquivalentDoseUnit BaseUnit { get; } = RadiationEquivalentDoseUnit.Sievert;

        /// <summary>
        /// Represents the largest possible value of RadiationEquivalentDose.
        /// </summary>
        public static RadiationEquivalentDose MaxValue { get; } = new RadiationEquivalentDose(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of RadiationEquivalentDose.
        /// </summary>
        public static RadiationEquivalentDose MinValue { get; } = new RadiationEquivalentDose(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static RadiationEquivalentDose Zero { get; } = new RadiationEquivalentDose(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationEquivalentDoseUnit.Microsievert"/>
        /// </summary>
        public double Microsieverts => As(RadiationEquivalentDoseUnit.Microsievert);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan"/>
        /// </summary>
        public double MilliroentgensEquivalentMan => As(RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationEquivalentDoseUnit.Millisievert"/>
        /// </summary>
        public double Millisieverts => As(RadiationEquivalentDoseUnit.Millisievert);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationEquivalentDoseUnit.Nanosievert"/>
        /// </summary>
        public double Nanosieverts => As(RadiationEquivalentDoseUnit.Nanosievert);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationEquivalentDoseUnit.RoentgenEquivalentMan"/>
        /// </summary>
        public double RoentgensEquivalentMan => As(RadiationEquivalentDoseUnit.RoentgenEquivalentMan);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="RadiationEquivalentDoseUnit.Sievert"/>
        /// </summary>
        public double Sieverts => As(RadiationEquivalentDoseUnit.Sievert);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="RadiationEquivalentDose"/> from <see cref="RadiationEquivalentDoseUnit.Microsievert"/>.
        /// </summary>
        public static RadiationEquivalentDose FromMicrosieverts(double microsieverts) => new RadiationEquivalentDose(microsieverts, RadiationEquivalentDoseUnit.Microsievert);

        /// <summary>
        ///     Creates a <see cref="RadiationEquivalentDose"/> from <see cref="RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan"/>.
        /// </summary>
        public static RadiationEquivalentDose FromMilliroentgensEquivalentMan(double milliroentgensequivalentman) => new RadiationEquivalentDose(milliroentgensequivalentman, RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan);

        /// <summary>
        ///     Creates a <see cref="RadiationEquivalentDose"/> from <see cref="RadiationEquivalentDoseUnit.Millisievert"/>.
        /// </summary>
        public static RadiationEquivalentDose FromMillisieverts(double millisieverts) => new RadiationEquivalentDose(millisieverts, RadiationEquivalentDoseUnit.Millisievert);

        /// <summary>
        ///     Creates a <see cref="RadiationEquivalentDose"/> from <see cref="RadiationEquivalentDoseUnit.Nanosievert"/>.
        /// </summary>
        public static RadiationEquivalentDose FromNanosieverts(double nanosieverts) => new RadiationEquivalentDose(nanosieverts, RadiationEquivalentDoseUnit.Nanosievert);

        /// <summary>
        ///     Creates a <see cref="RadiationEquivalentDose"/> from <see cref="RadiationEquivalentDoseUnit.RoentgenEquivalentMan"/>.
        /// </summary>
        public static RadiationEquivalentDose FromRoentgensEquivalentMan(double roentgensequivalentman) => new RadiationEquivalentDose(roentgensequivalentman, RadiationEquivalentDoseUnit.RoentgenEquivalentMan);

        /// <summary>
        ///     Creates a <see cref="RadiationEquivalentDose"/> from <see cref="RadiationEquivalentDoseUnit.Sievert"/>.
        /// </summary>
        public static RadiationEquivalentDose FromSieverts(double sieverts) => new RadiationEquivalentDose(sieverts, RadiationEquivalentDoseUnit.Sievert);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="RadiationEquivalentDoseUnit" /> to <see cref="RadiationEquivalentDose" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>RadiationEquivalentDose unit value.</returns>
        public static RadiationEquivalentDose From(double value, RadiationEquivalentDoseUnit fromUnit)
        {
            return new RadiationEquivalentDose(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(RadiationEquivalentDoseUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this RadiationEquivalentDose to another RadiationEquivalentDose with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A RadiationEquivalentDose with the specified unit.</returns>
                public RadiationEquivalentDose ToUnit(RadiationEquivalentDoseUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new RadiationEquivalentDose(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        RadiationEquivalentDoseUnit.Microsievert => (_value) * 1e-6d,
                        RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan => (_value / 100) * 1e-3d,
                        RadiationEquivalentDoseUnit.Millisievert => (_value) * 1e-3d,
                        RadiationEquivalentDoseUnit.Nanosievert => (_value) * 1e-9d,
                        RadiationEquivalentDoseUnit.RoentgenEquivalentMan => _value / 100,
                        RadiationEquivalentDoseUnit.Sievert => _value,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(RadiationEquivalentDoseUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        RadiationEquivalentDoseUnit.Microsievert => (baseUnitValue) / 1e-6d,
                        RadiationEquivalentDoseUnit.MilliroentgenEquivalentMan => (baseUnitValue * 100) / 1e-3d,
                        RadiationEquivalentDoseUnit.Millisievert => (baseUnitValue) / 1e-3d,
                        RadiationEquivalentDoseUnit.Nanosievert => (baseUnitValue) / 1e-9d,
                        RadiationEquivalentDoseUnit.RoentgenEquivalentMan => baseUnitValue * 100,
                        RadiationEquivalentDoseUnit.Sievert => baseUnitValue,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

