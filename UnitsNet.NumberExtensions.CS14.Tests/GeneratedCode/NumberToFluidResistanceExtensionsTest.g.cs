//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToFluidResistance;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToFluidResistanceExtensionsTests
    {
        [Fact]
        public void NumberToDyneSecondsPerCentimeterToTheFifthTest() =>
            Assert.Equal(FluidResistance.FromDyneSecondsPerCentimeterToTheFifth(2), 2.DyneSecondsPerCentimeterToTheFifth);

        [Fact]
        public void NumberToMegapascalSecondsPerCubicMeterTest() =>
            Assert.Equal(FluidResistance.FromMegapascalSecondsPerCubicMeter(2), 2.MegapascalSecondsPerCubicMeter);

        [Fact]
        public void NumberToMillimeterMercuryMinutesPerCubicCentimeterTest() =>
            Assert.Equal(FluidResistance.FromMillimeterMercuryMinutesPerCubicCentimeter(2), 2.MillimeterMercuryMinutesPerCubicCentimeter);

        [Fact]
        public void NumberToMillimeterMercuryMinutesPerCubicMeterTest() =>
            Assert.Equal(FluidResistance.FromMillimeterMercuryMinutesPerCubicMeter(2), 2.MillimeterMercuryMinutesPerCubicMeter);

        [Fact]
        public void NumberToMillimeterMercuryMinutesPerLiterTest() =>
            Assert.Equal(FluidResistance.FromMillimeterMercuryMinutesPerLiter(2), 2.MillimeterMercuryMinutesPerLiter);

        [Fact]
        public void NumberToMillimeterMercuryMinutesPerMilliliterTest() =>
            Assert.Equal(FluidResistance.FromMillimeterMercuryMinutesPerMilliliter(2), 2.MillimeterMercuryMinutesPerMilliliter);

        [Fact]
        public void NumberToMillimeterMercurySecondsPerCubicCentimeterTest() =>
            Assert.Equal(FluidResistance.FromMillimeterMercurySecondsPerCubicCentimeter(2), 2.MillimeterMercurySecondsPerCubicCentimeter);

        [Fact]
        public void NumberToMillimeterMercurySecondsPerCubicMeterTest() =>
            Assert.Equal(FluidResistance.FromMillimeterMercurySecondsPerCubicMeter(2), 2.MillimeterMercurySecondsPerCubicMeter);

        [Fact]
        public void NumberToMillimeterMercurySecondsPerLiterTest() =>
            Assert.Equal(FluidResistance.FromMillimeterMercurySecondsPerLiter(2), 2.MillimeterMercurySecondsPerLiter);

        [Fact]
        public void NumberToMillimeterMercurySecondsPerMilliliterTest() =>
            Assert.Equal(FluidResistance.FromMillimeterMercurySecondsPerMilliliter(2), 2.MillimeterMercurySecondsPerMilliliter);

        [Fact]
        public void NumberToPascalMinutesPerCubicCentimeterTest() =>
            Assert.Equal(FluidResistance.FromPascalMinutesPerCubicCentimeter(2), 2.PascalMinutesPerCubicCentimeter);

        [Fact]
        public void NumberToPascalMinutesPerCubicMeterTest() =>
            Assert.Equal(FluidResistance.FromPascalMinutesPerCubicMeter(2), 2.PascalMinutesPerCubicMeter);

        [Fact]
        public void NumberToPascalMinutesPerLiterTest() =>
            Assert.Equal(FluidResistance.FromPascalMinutesPerLiter(2), 2.PascalMinutesPerLiter);

        [Fact]
        public void NumberToPascalMinutesPerMilliliterTest() =>
            Assert.Equal(FluidResistance.FromPascalMinutesPerMilliliter(2), 2.PascalMinutesPerMilliliter);

        [Fact]
        public void NumberToPascalSecondsPerCubicCentimeterTest() =>
            Assert.Equal(FluidResistance.FromPascalSecondsPerCubicCentimeter(2), 2.PascalSecondsPerCubicCentimeter);

        [Fact]
        public void NumberToPascalSecondsPerCubicMeterTest() =>
            Assert.Equal(FluidResistance.FromPascalSecondsPerCubicMeter(2), 2.PascalSecondsPerCubicMeter);

        [Fact]
        public void NumberToPascalSecondsPerLiterTest() =>
            Assert.Equal(FluidResistance.FromPascalSecondsPerLiter(2), 2.PascalSecondsPerLiter);

        [Fact]
        public void NumberToPascalSecondsPerMilliliterTest() =>
            Assert.Equal(FluidResistance.FromPascalSecondsPerMilliliter(2), 2.PascalSecondsPerMilliliter);

        [Fact]
        public void NumberToWoodUnitsTest() =>
            Assert.Equal(FluidResistance.FromWoodUnits(2), 2.WoodUnits);

    }
}
