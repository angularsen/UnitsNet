//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ElectricReactiveEnergy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ElectricReactiveEnergyTestsBase : QuantityTestsBase
    {
        protected abstract double KilovoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double MegavoltampereReactiveHoursInOneVoltampereReactiveHour { get; }
        protected abstract double VoltampereReactiveHoursInOneVoltampereReactiveHour { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double KilovoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double MegavoltampereReactiveHoursTolerance { get { return 1e-5; } }
        protected virtual double VoltampereReactiveHoursTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ElectricReactiveEnergyUnit unit)
        {
            return unit switch
            {
                ElectricReactiveEnergyUnit.KilovoltampereReactiveHour => (KilovoltampereReactiveHoursInOneVoltampereReactiveHour, KilovoltampereReactiveHoursTolerance),
                ElectricReactiveEnergyUnit.MegavoltampereReactiveHour => (MegavoltampereReactiveHoursInOneVoltampereReactiveHour, MegavoltampereReactiveHoursTolerance),
                ElectricReactiveEnergyUnit.VoltampereReactiveHour => (VoltampereReactiveHoursInOneVoltampereReactiveHour, VoltampereReactiveHoursTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ElectricReactiveEnergyUnit.KilovoltampereReactiveHour },
            new object[] { ElectricReactiveEnergyUnit.MegavoltampereReactiveHour },
            new object[] { ElectricReactiveEnergyUnit.VoltampereReactiveHour },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ElectricReactiveEnergy();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ElectricReactiveEnergyUnit.VoltampereReactiveHour, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ElectricReactiveEnergy(double.PositiveInfinity, ElectricReactiveEnergyUnit.VoltampereReactiveHour));
            var exception2 = Record.Exception(() => new ElectricReactiveEnergy(double.NegativeInfinity, ElectricReactiveEnergyUnit.VoltampereReactiveHour));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ElectricReactiveEnergy(double.NaN, ElectricReactiveEnergyUnit.VoltampereReactiveHour));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ElectricReactiveEnergy(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ElectricReactiveEnergy(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ElectricReactiveEnergy(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ElectricReactiveEnergy_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ElectricReactiveEnergyUnit[] unitsOrderedByName = EnumHelper.GetValues<ElectricReactiveEnergyUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new ElectricReactiveEnergy(1, ElectricReactiveEnergyUnit.VoltampereReactiveHour);

            QuantityInfo<ElectricReactiveEnergy, ElectricReactiveEnergyUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("ElectricReactiveEnergy", quantityInfo.Name);
            Assert.Equal(ElectricReactiveEnergy.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricReactiveEnergy.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(ElectricReactiveEnergy.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ElectricReactiveEnergyUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void ElectricReactiveEnergyInfo_CreateWithCustomUnitInfos()
        {
            ElectricReactiveEnergyUnit[] expectedUnits = [ElectricReactiveEnergyUnit.VoltampereReactiveHour];

            ElectricReactiveEnergy.ElectricReactiveEnergyInfo quantityInfo = ElectricReactiveEnergy.ElectricReactiveEnergyInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("ElectricReactiveEnergy", quantityInfo.Name);
            Assert.Equal(ElectricReactiveEnergy.Zero, quantityInfo.Zero);
            Assert.Equal(ElectricReactiveEnergy.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void VoltampereReactiveHourToElectricReactiveEnergyUnits()
        {
            ElectricReactiveEnergy voltamperereactivehour = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            AssertEx.EqualTolerance(KilovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.KilovoltampereReactiveHours, KilovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(MegavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.MegavoltampereReactiveHours, MegavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(VoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.VoltampereReactiveHours, VoltampereReactiveHoursTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<ElectricReactiveEnergyUnit>(), unit =>
            {
                var quantity = ElectricReactiveEnergy.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromVoltampereReactiveHours_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ElectricReactiveEnergy.FromVoltampereReactiveHours(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ElectricReactiveEnergy.FromVoltampereReactiveHours(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromVoltampereReactiveHours_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ElectricReactiveEnergy.FromVoltampereReactiveHours(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var voltamperereactivehour = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            AssertEx.EqualTolerance(KilovoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ElectricReactiveEnergyUnit.KilovoltampereReactiveHour), KilovoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(MegavoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ElectricReactiveEnergyUnit.MegavoltampereReactiveHour), MegavoltampereReactiveHoursTolerance);
            AssertEx.EqualTolerance(VoltampereReactiveHoursInOneVoltampereReactiveHour, voltamperereactivehour.As(ElectricReactiveEnergyUnit.VoltampereReactiveHour), VoltampereReactiveHoursTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ElectricReactiveEnergy.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
            var expectedValue = quantity.As(ElectricReactiveEnergy.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
            var expectedUnit = ElectricReactiveEnergy.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ElectricReactiveEnergy quantityToConvert = quantity;

                ElectricReactiveEnergy convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ElectricReactiveEnergyUnit> quantityToConvert = quantity;

                IQuantity<ElectricReactiveEnergyUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ElectricReactiveEnergyUnit> quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ElectricReactiveEnergyUnit> quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ElectricReactiveEnergy(value: 1, unit: ElectricReactiveEnergy.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour, 4.2)]
        [InlineData("en-US", "4.2 Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour, 4.2)]
        [InlineData("en-US", "4.2 varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour, 4.2)]
        public void Parse(string culture, string quantityString, ElectricReactiveEnergyUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = ElectricReactiveEnergy.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour, 4.2)]
        [InlineData("en-US", "4.2 Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour, 4.2)]
        [InlineData("en-US", "4.2 varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour, 4.2)]
        public void TryParse(string culture, string quantityString, ElectricReactiveEnergyUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricReactiveEnergy.TryParse(quantityString, out ElectricReactiveEnergy parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour)]
        [InlineData("Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour)]
        [InlineData("varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricReactiveEnergyUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ElectricReactiveEnergyUnit parsedUnit = ElectricReactiveEnergy.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour)]
        [InlineData("Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour)]
        [InlineData("varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricReactiveEnergyUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ElectricReactiveEnergyUnit parsedUnit = ElectricReactiveEnergy.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour)]
        [InlineData("en-US", "Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour)]
        [InlineData("en-US", "varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricReactiveEnergyUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ElectricReactiveEnergyUnit parsedUnit = ElectricReactiveEnergy.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour)]
        [InlineData("en-US", "Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour)]
        [InlineData("en-US", "varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ElectricReactiveEnergyUnit expectedUnit)
        {
            ElectricReactiveEnergyUnit parsedUnit = ElectricReactiveEnergy.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour)]
        [InlineData("Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour)]
        [InlineData("varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ElectricReactiveEnergyUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ElectricReactiveEnergy.TryParseUnit(abbreviation, out ElectricReactiveEnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour)]
        [InlineData("Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour)]
        [InlineData("varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ElectricReactiveEnergyUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ElectricReactiveEnergy.TryParseUnit(abbreviation, out ElectricReactiveEnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour)]
        [InlineData("en-US", "Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour)]
        [InlineData("en-US", "varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ElectricReactiveEnergyUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ElectricReactiveEnergy.TryParseUnit(abbreviation, out ElectricReactiveEnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "kvarh", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour)]
        [InlineData("en-US", "Mvarh", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour)]
        [InlineData("en-US", "varh", ElectricReactiveEnergyUnit.VoltampereReactiveHour)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ElectricReactiveEnergyUnit expectedUnit)
        {
            Assert.True(ElectricReactiveEnergy.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ElectricReactiveEnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", ElectricReactiveEnergyUnit.KilovoltampereReactiveHour, "kvarh")]
        [InlineData("en-US", ElectricReactiveEnergyUnit.MegavoltampereReactiveHour, "Mvarh")]
        [InlineData("en-US", ElectricReactiveEnergyUnit.VoltampereReactiveHour, "varh")]
        public void GetAbbreviationForCulture(string culture, ElectricReactiveEnergyUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = ElectricReactiveEnergy.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(ElectricReactiveEnergy.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = ElectricReactiveEnergy.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ElectricReactiveEnergyUnit unit)
        {
            var inBaseUnits = ElectricReactiveEnergy.From(1.0, ElectricReactiveEnergy.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ElectricReactiveEnergyUnit unit)
        {
            var quantity = ElectricReactiveEnergy.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ElectricReactiveEnergyUnit unit)
        {
            Assert.All(ElectricReactiveEnergy.Units.Where(u => u != ElectricReactiveEnergy.BaseUnit), fromUnit =>
            {
                var quantity = ElectricReactiveEnergy.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ElectricReactiveEnergyUnit unit)
        {
            var quantity = default(ElectricReactiveEnergy);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ElectricReactiveEnergyUnit unit)
        {
            var quantity = ElectricReactiveEnergy.From(3, ElectricReactiveEnergy.BaseUnit);
            ElectricReactiveEnergy expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ElectricReactiveEnergyUnit> quantityToConvert = quantity;
                IQuantity<ElectricReactiveEnergyUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ElectricReactiveEnergy voltamperereactivehour = ElectricReactiveEnergy.FromVoltampereReactiveHours(3);
            Assert.Equal(3, ElectricReactiveEnergy.FromKilovoltampereReactiveHours(voltamperereactivehour.KilovoltampereReactiveHours).VoltampereReactiveHours);
            Assert.Equal(3, ElectricReactiveEnergy.FromMegavoltampereReactiveHours(voltamperereactivehour.MegavoltampereReactiveHours).VoltampereReactiveHours);
            Assert.Equal(3, ElectricReactiveEnergy.FromVoltampereReactiveHours(voltamperereactivehour.VoltampereReactiveHours).VoltampereReactiveHours);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ElectricReactiveEnergy v = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.Equal(-1, -v.VoltampereReactiveHours);
            Assert.Equal(2, (ElectricReactiveEnergy.FromVoltampereReactiveHours(3) - v).VoltampereReactiveHours);
            Assert.Equal(2, (v + v).VoltampereReactiveHours);
            Assert.Equal(10, (v * 10).VoltampereReactiveHours);
            Assert.Equal(10, (10 * v).VoltampereReactiveHours);
            Assert.Equal(2, (ElectricReactiveEnergy.FromVoltampereReactiveHours(10) / 5).VoltampereReactiveHours);
            Assert.Equal(2, ElectricReactiveEnergy.FromVoltampereReactiveHours(10) / ElectricReactiveEnergy.FromVoltampereReactiveHours(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            ElectricReactiveEnergy oneVoltampereReactiveHour = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            ElectricReactiveEnergy twoVoltampereReactiveHours = ElectricReactiveEnergy.FromVoltampereReactiveHours(2);

            Assert.True(oneVoltampereReactiveHour < twoVoltampereReactiveHours);
            Assert.True(oneVoltampereReactiveHour <= twoVoltampereReactiveHours);
            Assert.True(twoVoltampereReactiveHours > oneVoltampereReactiveHour);
            Assert.True(twoVoltampereReactiveHours >= oneVoltampereReactiveHour);

            Assert.False(oneVoltampereReactiveHour > twoVoltampereReactiveHours);
            Assert.False(oneVoltampereReactiveHour >= twoVoltampereReactiveHours);
            Assert.False(twoVoltampereReactiveHours < oneVoltampereReactiveHour);
            Assert.False(twoVoltampereReactiveHours <= oneVoltampereReactiveHour);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ElectricReactiveEnergy voltamperereactivehour = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.Equal(0, voltamperereactivehour.CompareTo(voltamperereactivehour));
            Assert.True(voltamperereactivehour.CompareTo(ElectricReactiveEnergy.Zero) > 0);
            Assert.True(ElectricReactiveEnergy.Zero.CompareTo(voltamperereactivehour) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ElectricReactiveEnergy voltamperereactivehour = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.Throws<ArgumentException>(() => voltamperereactivehour.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ElectricReactiveEnergy voltamperereactivehour = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.Throws<ArgumentNullException>(() => voltamperereactivehour.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ElectricReactiveEnergyUnit.VoltampereReactiveHour, 1, ElectricReactiveEnergyUnit.VoltampereReactiveHour, true)]  // Same value and unit.
        [InlineData(1, ElectricReactiveEnergyUnit.VoltampereReactiveHour, 2, ElectricReactiveEnergyUnit.VoltampereReactiveHour, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ElectricReactiveEnergyUnit unitA, double valueB, ElectricReactiveEnergyUnit unitB, bool expectEqual)
        {
            var a = new ElectricReactiveEnergy(valueA, unitA);
            var b = new ElectricReactiveEnergy(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ElectricReactiveEnergy.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ElectricReactiveEnergy voltamperereactivehour = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.False(voltamperereactivehour.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ElectricReactiveEnergy voltamperereactivehour = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            Assert.False(voltamperereactivehour.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = ElectricReactiveEnergy.FromVoltampereReactiveHours(firstValue);
            var otherQuantity = ElectricReactiveEnergy.FromVoltampereReactiveHours(secondValue);
            ElectricReactiveEnergy maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, ElectricReactiveEnergy.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = ElectricReactiveEnergy.FromVoltampereReactiveHours(1);
            var negativeTolerance = ElectricReactiveEnergy.FromVoltampereReactiveHours(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<ElectricReactiveEnergyUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ElectricReactiveEnergy.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(ElectricReactiveEnergy.Info.Units, ElectricReactiveEnergy.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, ElectricReactiveEnergy.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 kvarh", new ElectricReactiveEnergy(1, ElectricReactiveEnergyUnit.KilovoltampereReactiveHour).ToString());
            Assert.Equal("1 Mvarh", new ElectricReactiveEnergy(1, ElectricReactiveEnergyUnit.MegavoltampereReactiveHour).ToString());
            Assert.Equal("1 varh", new ElectricReactiveEnergy(1, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 kvarh", new ElectricReactiveEnergy(1, ElectricReactiveEnergyUnit.KilovoltampereReactiveHour).ToString(swedishCulture));
            Assert.Equal("1 Mvarh", new ElectricReactiveEnergy(1, ElectricReactiveEnergyUnit.MegavoltampereReactiveHour).ToString(swedishCulture));
            Assert.Equal("1 varh", new ElectricReactiveEnergy(1, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 varh", new ElectricReactiveEnergy(0.123456, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString("s1"));
            Assert.Equal("0.12 varh", new ElectricReactiveEnergy(0.123456, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString("s2"));
            Assert.Equal("0.123 varh", new ElectricReactiveEnergy(0.123456, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString("s3"));
            Assert.Equal("0.1235 varh", new ElectricReactiveEnergy(0.123456, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 varh", new ElectricReactiveEnergy(0.123456, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString("s1", culture));
            Assert.Equal("0.12 varh", new ElectricReactiveEnergy(0.123456, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString("s2", culture));
            Assert.Equal("0.123 varh", new ElectricReactiveEnergy(0.123456, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString("s3", culture));
            Assert.Equal("0.1235 varh", new ElectricReactiveEnergy(0.123456, ElectricReactiveEnergyUnit.VoltampereReactiveHour).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ElectricReactiveEnergy.FromVoltampereReactiveHours(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ElectricReactiveEnergy.FromVoltampereReactiveHours(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ElectricReactiveEnergy.FromVoltampereReactiveHours(1.0);
            var expected = Comparison.GetHashCode(typeof(ElectricReactiveEnergy), quantity.As(ElectricReactiveEnergy.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ElectricReactiveEnergy.FromVoltampereReactiveHours(value);
            Assert.Equal(ElectricReactiveEnergy.FromVoltampereReactiveHours(-value), -quantity);
        }
    }
}
