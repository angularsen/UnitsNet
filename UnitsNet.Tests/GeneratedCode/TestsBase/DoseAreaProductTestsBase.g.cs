//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of DoseAreaProduct.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class DoseAreaProductTestsBase : QuantityTestsBase
    {
        protected abstract double CentigraySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double CentigraySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double CentigraySquareMetersInOneGraySquareMeter { get; }
        protected abstract double CentigraySquareMillimetersInOneGraySquareMeter { get; }
        protected abstract double DecigraySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double DecigraySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double DecigraySquareMetersInOneGraySquareMeter { get; }
        protected abstract double DecigraySquareMillimetersInOneGraySquareMeter { get; }
        protected abstract double GraySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double GraySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double GraySquareMetersInOneGraySquareMeter { get; }
        protected abstract double GraySquareMillimetersInOneGraySquareMeter { get; }
        protected abstract double MicrograySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double MicrograySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double MicrograySquareMetersInOneGraySquareMeter { get; }
        protected abstract double MicrograySquareMillimetersInOneGraySquareMeter { get; }
        protected abstract double MilligraySquareCentimetersInOneGraySquareMeter { get; }
        protected abstract double MilligraySquareDecimetersInOneGraySquareMeter { get; }
        protected abstract double MilligraySquareMetersInOneGraySquareMeter { get; }
        protected abstract double MilligraySquareMillimetersInOneGraySquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigraySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double CentigraySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double CentigraySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double CentigraySquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double DecigraySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double DecigraySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double DecigraySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double DecigraySquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double GraySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double GraySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double GraySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double GraySquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double MicrograySquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligraySquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligraySquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double MilligraySquareMetersTolerance { get { return 1e-5; } }
        protected virtual double MilligraySquareMillimetersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(DoseAreaProductUnit unit)
        {
            return unit switch
            {
                DoseAreaProductUnit.CentigraySquareCentimeter => (CentigraySquareCentimetersInOneGraySquareMeter, CentigraySquareCentimetersTolerance),
                DoseAreaProductUnit.CentigraySquareDecimeter => (CentigraySquareDecimetersInOneGraySquareMeter, CentigraySquareDecimetersTolerance),
                DoseAreaProductUnit.CentigraySquareMeter => (CentigraySquareMetersInOneGraySquareMeter, CentigraySquareMetersTolerance),
                DoseAreaProductUnit.CentigraySquareMillimeter => (CentigraySquareMillimetersInOneGraySquareMeter, CentigraySquareMillimetersTolerance),
                DoseAreaProductUnit.DecigraySquareCentimeter => (DecigraySquareCentimetersInOneGraySquareMeter, DecigraySquareCentimetersTolerance),
                DoseAreaProductUnit.DecigraySquareDecimeter => (DecigraySquareDecimetersInOneGraySquareMeter, DecigraySquareDecimetersTolerance),
                DoseAreaProductUnit.DecigraySquareMeter => (DecigraySquareMetersInOneGraySquareMeter, DecigraySquareMetersTolerance),
                DoseAreaProductUnit.DecigraySquareMillimeter => (DecigraySquareMillimetersInOneGraySquareMeter, DecigraySquareMillimetersTolerance),
                DoseAreaProductUnit.GraySquareCentimeter => (GraySquareCentimetersInOneGraySquareMeter, GraySquareCentimetersTolerance),
                DoseAreaProductUnit.GraySquareDecimeter => (GraySquareDecimetersInOneGraySquareMeter, GraySquareDecimetersTolerance),
                DoseAreaProductUnit.GraySquareMeter => (GraySquareMetersInOneGraySquareMeter, GraySquareMetersTolerance),
                DoseAreaProductUnit.GraySquareMillimeter => (GraySquareMillimetersInOneGraySquareMeter, GraySquareMillimetersTolerance),
                DoseAreaProductUnit.MicrograySquareCentimeter => (MicrograySquareCentimetersInOneGraySquareMeter, MicrograySquareCentimetersTolerance),
                DoseAreaProductUnit.MicrograySquareDecimeter => (MicrograySquareDecimetersInOneGraySquareMeter, MicrograySquareDecimetersTolerance),
                DoseAreaProductUnit.MicrograySquareMeter => (MicrograySquareMetersInOneGraySquareMeter, MicrograySquareMetersTolerance),
                DoseAreaProductUnit.MicrograySquareMillimeter => (MicrograySquareMillimetersInOneGraySquareMeter, MicrograySquareMillimetersTolerance),
                DoseAreaProductUnit.MilligraySquareCentimeter => (MilligraySquareCentimetersInOneGraySquareMeter, MilligraySquareCentimetersTolerance),
                DoseAreaProductUnit.MilligraySquareDecimeter => (MilligraySquareDecimetersInOneGraySquareMeter, MilligraySquareDecimetersTolerance),
                DoseAreaProductUnit.MilligraySquareMeter => (MilligraySquareMetersInOneGraySquareMeter, MilligraySquareMetersTolerance),
                DoseAreaProductUnit.MilligraySquareMillimeter => (MilligraySquareMillimetersInOneGraySquareMeter, MilligraySquareMillimetersTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { DoseAreaProductUnit.CentigraySquareCentimeter },
            new object[] { DoseAreaProductUnit.CentigraySquareDecimeter },
            new object[] { DoseAreaProductUnit.CentigraySquareMeter },
            new object[] { DoseAreaProductUnit.CentigraySquareMillimeter },
            new object[] { DoseAreaProductUnit.DecigraySquareCentimeter },
            new object[] { DoseAreaProductUnit.DecigraySquareDecimeter },
            new object[] { DoseAreaProductUnit.DecigraySquareMeter },
            new object[] { DoseAreaProductUnit.DecigraySquareMillimeter },
            new object[] { DoseAreaProductUnit.GraySquareCentimeter },
            new object[] { DoseAreaProductUnit.GraySquareDecimeter },
            new object[] { DoseAreaProductUnit.GraySquareMeter },
            new object[] { DoseAreaProductUnit.GraySquareMillimeter },
            new object[] { DoseAreaProductUnit.MicrograySquareCentimeter },
            new object[] { DoseAreaProductUnit.MicrograySquareDecimeter },
            new object[] { DoseAreaProductUnit.MicrograySquareMeter },
            new object[] { DoseAreaProductUnit.MicrograySquareMillimeter },
            new object[] { DoseAreaProductUnit.MilligraySquareCentimeter },
            new object[] { DoseAreaProductUnit.MilligraySquareDecimeter },
            new object[] { DoseAreaProductUnit.MilligraySquareMeter },
            new object[] { DoseAreaProductUnit.MilligraySquareMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new DoseAreaProduct();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(DoseAreaProductUnit.GraySquareMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new DoseAreaProduct(double.PositiveInfinity, DoseAreaProductUnit.GraySquareMeter));
            var exception2 = Record.Exception(() => new DoseAreaProduct(double.NegativeInfinity, DoseAreaProductUnit.GraySquareMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new DoseAreaProduct(double.NaN, DoseAreaProductUnit.GraySquareMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new DoseAreaProduct(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new DoseAreaProduct(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new DoseAreaProduct(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void DoseAreaProduct_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            DoseAreaProductUnit[] unitsOrderedByName = EnumUtils.GetEnumValues<DoseAreaProductUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMeter);

            QuantityInfo<DoseAreaProduct, DoseAreaProductUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("DoseAreaProduct", quantityInfo.Name);
            Assert.Equal(DoseAreaProduct.Zero, quantityInfo.Zero);
            Assert.Equal(DoseAreaProduct.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(DoseAreaProduct.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<DoseAreaProductUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void DoseAreaProductInfo_CreateWithCustomUnitInfos()
        {
            DoseAreaProductUnit[] expectedUnits = [DoseAreaProductUnit.GraySquareMeter];

            DoseAreaProduct.DoseAreaProductInfo quantityInfo = DoseAreaProduct.DoseAreaProductInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("DoseAreaProduct", quantityInfo.Name);
            Assert.Equal(DoseAreaProduct.Zero, quantityInfo.Zero);
            Assert.Equal(DoseAreaProduct.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void GraySquareMeterToDoseAreaProductUnits()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            AssertEx.EqualTolerance(CentigraySquareCentimetersInOneGraySquareMeter, graysquaremeter.CentigraySquareCentimeters, CentigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareDecimetersInOneGraySquareMeter, graysquaremeter.CentigraySquareDecimeters, CentigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareMetersInOneGraySquareMeter, graysquaremeter.CentigraySquareMeters, CentigraySquareMetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareMillimetersInOneGraySquareMeter, graysquaremeter.CentigraySquareMillimeters, CentigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareCentimetersInOneGraySquareMeter, graysquaremeter.DecigraySquareCentimeters, DecigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareDecimetersInOneGraySquareMeter, graysquaremeter.DecigraySquareDecimeters, DecigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareMetersInOneGraySquareMeter, graysquaremeter.DecigraySquareMeters, DecigraySquareMetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareMillimetersInOneGraySquareMeter, graysquaremeter.DecigraySquareMillimeters, DecigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(GraySquareCentimetersInOneGraySquareMeter, graysquaremeter.GraySquareCentimeters, GraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(GraySquareDecimetersInOneGraySquareMeter, graysquaremeter.GraySquareDecimeters, GraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(GraySquareMetersInOneGraySquareMeter, graysquaremeter.GraySquareMeters, GraySquareMetersTolerance);
            AssertEx.EqualTolerance(GraySquareMillimetersInOneGraySquareMeter, graysquaremeter.GraySquareMillimeters, GraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareCentimetersInOneGraySquareMeter, graysquaremeter.MicrograySquareCentimeters, MicrograySquareCentimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareDecimetersInOneGraySquareMeter, graysquaremeter.MicrograySquareDecimeters, MicrograySquareDecimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareMetersInOneGraySquareMeter, graysquaremeter.MicrograySquareMeters, MicrograySquareMetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareMillimetersInOneGraySquareMeter, graysquaremeter.MicrograySquareMillimeters, MicrograySquareMillimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareCentimetersInOneGraySquareMeter, graysquaremeter.MilligraySquareCentimeters, MilligraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareDecimetersInOneGraySquareMeter, graysquaremeter.MilligraySquareDecimeters, MilligraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareMetersInOneGraySquareMeter, graysquaremeter.MilligraySquareMeters, MilligraySquareMetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareMillimetersInOneGraySquareMeter, graysquaremeter.MilligraySquareMillimeters, MilligraySquareMillimetersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigraySquareCentimeter);
            Assert.Equal(1, quantity00.CentigraySquareCentimeters);
            Assert.Equal(DoseAreaProductUnit.CentigraySquareCentimeter, quantity00.Unit);

            var quantity01 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigraySquareDecimeter);
            Assert.Equal(1, quantity01.CentigraySquareDecimeters);
            Assert.Equal(DoseAreaProductUnit.CentigraySquareDecimeter, quantity01.Unit);

            var quantity02 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigraySquareMeter);
            Assert.Equal(1, quantity02.CentigraySquareMeters);
            Assert.Equal(DoseAreaProductUnit.CentigraySquareMeter, quantity02.Unit);

            var quantity03 = DoseAreaProduct.From(1, DoseAreaProductUnit.CentigraySquareMillimeter);
            Assert.Equal(1, quantity03.CentigraySquareMillimeters);
            Assert.Equal(DoseAreaProductUnit.CentigraySquareMillimeter, quantity03.Unit);

            var quantity04 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigraySquareCentimeter);
            Assert.Equal(1, quantity04.DecigraySquareCentimeters);
            Assert.Equal(DoseAreaProductUnit.DecigraySquareCentimeter, quantity04.Unit);

            var quantity05 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigraySquareDecimeter);
            Assert.Equal(1, quantity05.DecigraySquareDecimeters);
            Assert.Equal(DoseAreaProductUnit.DecigraySquareDecimeter, quantity05.Unit);

            var quantity06 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigraySquareMeter);
            Assert.Equal(1, quantity06.DecigraySquareMeters);
            Assert.Equal(DoseAreaProductUnit.DecigraySquareMeter, quantity06.Unit);

            var quantity07 = DoseAreaProduct.From(1, DoseAreaProductUnit.DecigraySquareMillimeter);
            Assert.Equal(1, quantity07.DecigraySquareMillimeters);
            Assert.Equal(DoseAreaProductUnit.DecigraySquareMillimeter, quantity07.Unit);

            var quantity08 = DoseAreaProduct.From(1, DoseAreaProductUnit.GraySquareCentimeter);
            Assert.Equal(1, quantity08.GraySquareCentimeters);
            Assert.Equal(DoseAreaProductUnit.GraySquareCentimeter, quantity08.Unit);

            var quantity09 = DoseAreaProduct.From(1, DoseAreaProductUnit.GraySquareDecimeter);
            Assert.Equal(1, quantity09.GraySquareDecimeters);
            Assert.Equal(DoseAreaProductUnit.GraySquareDecimeter, quantity09.Unit);

            var quantity10 = DoseAreaProduct.From(1, DoseAreaProductUnit.GraySquareMeter);
            Assert.Equal(1, quantity10.GraySquareMeters);
            Assert.Equal(DoseAreaProductUnit.GraySquareMeter, quantity10.Unit);

            var quantity11 = DoseAreaProduct.From(1, DoseAreaProductUnit.GraySquareMillimeter);
            Assert.Equal(1, quantity11.GraySquareMillimeters);
            Assert.Equal(DoseAreaProductUnit.GraySquareMillimeter, quantity11.Unit);

            var quantity12 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograySquareCentimeter);
            Assert.Equal(1, quantity12.MicrograySquareCentimeters);
            Assert.Equal(DoseAreaProductUnit.MicrograySquareCentimeter, quantity12.Unit);

            var quantity13 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograySquareDecimeter);
            Assert.Equal(1, quantity13.MicrograySquareDecimeters);
            Assert.Equal(DoseAreaProductUnit.MicrograySquareDecimeter, quantity13.Unit);

            var quantity14 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograySquareMeter);
            Assert.Equal(1, quantity14.MicrograySquareMeters);
            Assert.Equal(DoseAreaProductUnit.MicrograySquareMeter, quantity14.Unit);

            var quantity15 = DoseAreaProduct.From(1, DoseAreaProductUnit.MicrograySquareMillimeter);
            Assert.Equal(1, quantity15.MicrograySquareMillimeters);
            Assert.Equal(DoseAreaProductUnit.MicrograySquareMillimeter, quantity15.Unit);

            var quantity16 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligraySquareCentimeter);
            Assert.Equal(1, quantity16.MilligraySquareCentimeters);
            Assert.Equal(DoseAreaProductUnit.MilligraySquareCentimeter, quantity16.Unit);

            var quantity17 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligraySquareDecimeter);
            Assert.Equal(1, quantity17.MilligraySquareDecimeters);
            Assert.Equal(DoseAreaProductUnit.MilligraySquareDecimeter, quantity17.Unit);

            var quantity18 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligraySquareMeter);
            Assert.Equal(1, quantity18.MilligraySquareMeters);
            Assert.Equal(DoseAreaProductUnit.MilligraySquareMeter, quantity18.Unit);

            var quantity19 = DoseAreaProduct.From(1, DoseAreaProductUnit.MilligraySquareMillimeter);
            Assert.Equal(1, quantity19.MilligraySquareMillimeters);
            Assert.Equal(DoseAreaProductUnit.MilligraySquareMillimeter, quantity19.Unit);

        }

        [Fact]
        public void FromGraySquareMeters_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => DoseAreaProduct.FromGraySquareMeters(double.PositiveInfinity));
            var exception2 = Record.Exception(() => DoseAreaProduct.FromGraySquareMeters(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromGraySquareMeters_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => DoseAreaProduct.FromGraySquareMeters(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            AssertEx.EqualTolerance(CentigraySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.CentigraySquareCentimeter), CentigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.CentigraySquareDecimeter), CentigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.CentigraySquareMeter), CentigraySquareMetersTolerance);
            AssertEx.EqualTolerance(CentigraySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.CentigraySquareMillimeter), CentigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.DecigraySquareCentimeter), DecigraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.DecigraySquareDecimeter), DecigraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.DecigraySquareMeter), DecigraySquareMetersTolerance);
            AssertEx.EqualTolerance(DecigraySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.DecigraySquareMillimeter), DecigraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(GraySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.GraySquareCentimeter), GraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(GraySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.GraySquareDecimeter), GraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(GraySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.GraySquareMeter), GraySquareMetersTolerance);
            AssertEx.EqualTolerance(GraySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.GraySquareMillimeter), GraySquareMillimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MicrograySquareCentimeter), MicrograySquareCentimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MicrograySquareDecimeter), MicrograySquareDecimetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MicrograySquareMeter), MicrograySquareMetersTolerance);
            AssertEx.EqualTolerance(MicrograySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MicrograySquareMillimeter), MicrograySquareMillimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareCentimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MilligraySquareCentimeter), MilligraySquareCentimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareDecimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MilligraySquareDecimeter), MilligraySquareDecimetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareMetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MilligraySquareMeter), MilligraySquareMetersTolerance);
            AssertEx.EqualTolerance(MilligraySquareMillimetersInOneGraySquareMeter, graysquaremeter.As(DoseAreaProductUnit.MilligraySquareMillimeter), MilligraySquareMillimetersTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = DoseAreaProduct.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
            var expectedValue = quantity.As(DoseAreaProduct.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
            var expectedUnit = DoseAreaProduct.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                DoseAreaProduct quantityToConvert = quantity;

                DoseAreaProduct convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<DoseAreaProductUnit> quantityToConvert = quantity;

                IQuantity<DoseAreaProductUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() => 
            {
                var quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<DoseAreaProductUnit> quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<DoseAreaProductUnit> quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new DoseAreaProduct(value: 1, unit: DoseAreaProduct.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 cGy·m²", DoseAreaProductUnit.CentigraySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 dGy·m²", DoseAreaProductUnit.DecigraySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 Gy·m²", DoseAreaProductUnit.GraySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 µGy·m²", DoseAreaProductUnit.MicrograySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 mGy·m²", DoseAreaProductUnit.MilligraySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 сГр·см²", DoseAreaProductUnit.CentigraySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 сГр·дм²", DoseAreaProductUnit.CentigraySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 сГр·м²", DoseAreaProductUnit.CentigraySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 сГр·мм²", DoseAreaProductUnit.CentigraySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дГр·см²", DoseAreaProductUnit.DecigraySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дГр·дм²", DoseAreaProductUnit.DecigraySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дГр·м²", DoseAreaProductUnit.DecigraySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 дГр·мм²", DoseAreaProductUnit.DecigraySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Гр·см²", DoseAreaProductUnit.GraySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Гр·дм²", DoseAreaProductUnit.GraySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Гр·м²", DoseAreaProductUnit.GraySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 Гр·мм²", DoseAreaProductUnit.GraySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр·см²", DoseAreaProductUnit.MicrograySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр·дм²", DoseAreaProductUnit.MicrograySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр·м²", DoseAreaProductUnit.MicrograySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр·мм²", DoseAreaProductUnit.MicrograySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мГр·см²", DoseAreaProductUnit.MilligraySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мГр·дм²", DoseAreaProductUnit.MilligraySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мГр·м²", DoseAreaProductUnit.MilligraySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мГр·мм²", DoseAreaProductUnit.MilligraySquareMillimeter, 4.2)]
        public void Parse(string culture, string quantityString, DoseAreaProductUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = DoseAreaProduct.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 cGy·m²", DoseAreaProductUnit.CentigraySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 dGy·m²", DoseAreaProductUnit.DecigraySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 Gy·m²", DoseAreaProductUnit.GraySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 µGy·m²", DoseAreaProductUnit.MicrograySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 mGy·m²", DoseAreaProductUnit.MilligraySquareMeter, 4.2)]
        [InlineData("en-US", "4.2 mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 сГр·см²", DoseAreaProductUnit.CentigraySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 сГр·дм²", DoseAreaProductUnit.CentigraySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 сГр·м²", DoseAreaProductUnit.CentigraySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 сГр·мм²", DoseAreaProductUnit.CentigraySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дГр·см²", DoseAreaProductUnit.DecigraySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дГр·дм²", DoseAreaProductUnit.DecigraySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дГр·м²", DoseAreaProductUnit.DecigraySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 дГр·мм²", DoseAreaProductUnit.DecigraySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Гр·см²", DoseAreaProductUnit.GraySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Гр·дм²", DoseAreaProductUnit.GraySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Гр·м²", DoseAreaProductUnit.GraySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 Гр·мм²", DoseAreaProductUnit.GraySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр·см²", DoseAreaProductUnit.MicrograySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр·дм²", DoseAreaProductUnit.MicrograySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр·м²", DoseAreaProductUnit.MicrograySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкГр·мм²", DoseAreaProductUnit.MicrograySquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мГр·см²", DoseAreaProductUnit.MilligraySquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мГр·дм²", DoseAreaProductUnit.MilligraySquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 мГр·м²", DoseAreaProductUnit.MilligraySquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мГр·мм²", DoseAreaProductUnit.MilligraySquareMillimeter, 4.2)]
        public void TryParse(string culture, string quantityString, DoseAreaProductUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(DoseAreaProduct.TryParse(quantityString, out DoseAreaProduct parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("cGy·m²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("dGy·m²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("Gy·m²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("µGy·m²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("mGy·m²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, DoseAreaProductUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            DoseAreaProductUnit parsedUnit = DoseAreaProduct.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("cGy·m²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("dGy·m²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("Gy·m²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("µGy·m²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("mGy·m²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, DoseAreaProductUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            DoseAreaProductUnit parsedUnit = DoseAreaProduct.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("en-US", "cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("en-US", "cGy·m²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("en-US", "cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("en-US", "dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("en-US", "dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("en-US", "dGy·m²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("en-US", "dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("en-US", "Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("en-US", "Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("en-US", "Gy·m²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("en-US", "Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("en-US", "µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("en-US", "µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("en-US", "µGy·m²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("en-US", "µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("en-US", "mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("en-US", "mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("en-US", "mGy·m²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("en-US", "mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        [InlineData("ru-RU", "сГр·см²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("ru-RU", "сГр·дм²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("ru-RU", "сГр·м²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("ru-RU", "сГр·мм²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("ru-RU", "дГр·см²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("ru-RU", "дГр·дм²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("ru-RU", "дГр·м²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("ru-RU", "дГр·мм²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("ru-RU", "Гр·см²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("ru-RU", "Гр·дм²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("ru-RU", "Гр·м²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("ru-RU", "Гр·мм²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("ru-RU", "мкГр·см²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("ru-RU", "мкГр·дм²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("ru-RU", "мкГр·м²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("ru-RU", "мкГр·мм²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("ru-RU", "мГр·см²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("ru-RU", "мГр·дм²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("ru-RU", "мГр·м²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("ru-RU", "мГр·мм²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, DoseAreaProductUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            DoseAreaProductUnit parsedUnit = DoseAreaProduct.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("en-US", "cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("en-US", "cGy·m²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("en-US", "cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("en-US", "dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("en-US", "dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("en-US", "dGy·m²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("en-US", "dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("en-US", "Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("en-US", "Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("en-US", "Gy·m²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("en-US", "Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("en-US", "µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("en-US", "µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("en-US", "µGy·m²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("en-US", "µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("en-US", "mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("en-US", "mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("en-US", "mGy·m²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("en-US", "mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        [InlineData("ru-RU", "сГр·см²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("ru-RU", "сГр·дм²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("ru-RU", "сГр·м²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("ru-RU", "сГр·мм²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("ru-RU", "дГр·см²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("ru-RU", "дГр·дм²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("ru-RU", "дГр·м²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("ru-RU", "дГр·мм²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("ru-RU", "Гр·см²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("ru-RU", "Гр·дм²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("ru-RU", "Гр·м²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("ru-RU", "Гр·мм²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("ru-RU", "мкГр·см²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("ru-RU", "мкГр·дм²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("ru-RU", "мкГр·м²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("ru-RU", "мкГр·мм²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("ru-RU", "мГр·см²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("ru-RU", "мГр·дм²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("ru-RU", "мГр·м²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("ru-RU", "мГр·мм²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, DoseAreaProductUnit expectedUnit)
        {
            DoseAreaProductUnit parsedUnit = DoseAreaProduct.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("cGy·m²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("dGy·m²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("Gy·m²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("µGy·m²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("mGy·m²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, DoseAreaProductUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(DoseAreaProduct.TryParseUnit(abbreviation, out DoseAreaProductUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("cGy·m²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("dGy·m²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("Gy·m²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("µGy·m²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("mGy·m²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, DoseAreaProductUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(DoseAreaProduct.TryParseUnit(abbreviation, out DoseAreaProductUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("en-US", "cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("en-US", "cGy·m²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("en-US", "cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("en-US", "dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("en-US", "dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("en-US", "dGy·m²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("en-US", "dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("en-US", "Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("en-US", "Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("en-US", "Gy·m²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("en-US", "Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("en-US", "µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("en-US", "µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("en-US", "µGy·m²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("en-US", "µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("en-US", "mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("en-US", "mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("en-US", "mGy·m²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("en-US", "mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        [InlineData("ru-RU", "сГр·см²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("ru-RU", "сГр·дм²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("ru-RU", "сГр·м²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("ru-RU", "сГр·мм²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("ru-RU", "дГр·см²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("ru-RU", "дГр·дм²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("ru-RU", "дГр·м²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("ru-RU", "дГр·мм²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("ru-RU", "Гр·см²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("ru-RU", "Гр·дм²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("ru-RU", "Гр·м²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("ru-RU", "Гр·мм²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("ru-RU", "мкГр·см²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("ru-RU", "мкГр·дм²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("ru-RU", "мкГр·м²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("ru-RU", "мкГр·мм²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("ru-RU", "мГр·см²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("ru-RU", "мГр·дм²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("ru-RU", "мГр·м²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("ru-RU", "мГр·мм²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, DoseAreaProductUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(DoseAreaProduct.TryParseUnit(abbreviation, out DoseAreaProductUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cGy·cm²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("en-US", "cGy·dm²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("en-US", "cGy·m²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("en-US", "cGy·mm²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("en-US", "dGy·cm²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("en-US", "dGy·dm²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("en-US", "dGy·m²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("en-US", "dGy·mm²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("en-US", "Gy·cm²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("en-US", "Gy·dm²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("en-US", "Gy·m²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("en-US", "Gy·mm²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("en-US", "µGy·cm²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("en-US", "µGy·dm²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("en-US", "µGy·m²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("en-US", "µGy·mm²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("en-US", "mGy·cm²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("en-US", "mGy·dm²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("en-US", "mGy·m²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("en-US", "mGy·mm²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        [InlineData("ru-RU", "сГр·см²", DoseAreaProductUnit.CentigraySquareCentimeter)]
        [InlineData("ru-RU", "сГр·дм²", DoseAreaProductUnit.CentigraySquareDecimeter)]
        [InlineData("ru-RU", "сГр·м²", DoseAreaProductUnit.CentigraySquareMeter)]
        [InlineData("ru-RU", "сГр·мм²", DoseAreaProductUnit.CentigraySquareMillimeter)]
        [InlineData("ru-RU", "дГр·см²", DoseAreaProductUnit.DecigraySquareCentimeter)]
        [InlineData("ru-RU", "дГр·дм²", DoseAreaProductUnit.DecigraySquareDecimeter)]
        [InlineData("ru-RU", "дГр·м²", DoseAreaProductUnit.DecigraySquareMeter)]
        [InlineData("ru-RU", "дГр·мм²", DoseAreaProductUnit.DecigraySquareMillimeter)]
        [InlineData("ru-RU", "Гр·см²", DoseAreaProductUnit.GraySquareCentimeter)]
        [InlineData("ru-RU", "Гр·дм²", DoseAreaProductUnit.GraySquareDecimeter)]
        [InlineData("ru-RU", "Гр·м²", DoseAreaProductUnit.GraySquareMeter)]
        [InlineData("ru-RU", "Гр·мм²", DoseAreaProductUnit.GraySquareMillimeter)]
        [InlineData("ru-RU", "мкГр·см²", DoseAreaProductUnit.MicrograySquareCentimeter)]
        [InlineData("ru-RU", "мкГр·дм²", DoseAreaProductUnit.MicrograySquareDecimeter)]
        [InlineData("ru-RU", "мкГр·м²", DoseAreaProductUnit.MicrograySquareMeter)]
        [InlineData("ru-RU", "мкГр·мм²", DoseAreaProductUnit.MicrograySquareMillimeter)]
        [InlineData("ru-RU", "мГр·см²", DoseAreaProductUnit.MilligraySquareCentimeter)]
        [InlineData("ru-RU", "мГр·дм²", DoseAreaProductUnit.MilligraySquareDecimeter)]
        [InlineData("ru-RU", "мГр·м²", DoseAreaProductUnit.MilligraySquareMeter)]
        [InlineData("ru-RU", "мГр·мм²", DoseAreaProductUnit.MilligraySquareMillimeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, DoseAreaProductUnit expectedUnit)
        {
            Assert.True(DoseAreaProduct.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out DoseAreaProductUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", DoseAreaProductUnit.CentigraySquareCentimeter, "cGy·cm²")]
        [InlineData("en-US", DoseAreaProductUnit.CentigraySquareDecimeter, "cGy·dm²")]
        [InlineData("en-US", DoseAreaProductUnit.CentigraySquareMeter, "cGy·m²")]
        [InlineData("en-US", DoseAreaProductUnit.CentigraySquareMillimeter, "cGy·mm²")]
        [InlineData("en-US", DoseAreaProductUnit.DecigraySquareCentimeter, "dGy·cm²")]
        [InlineData("en-US", DoseAreaProductUnit.DecigraySquareDecimeter, "dGy·dm²")]
        [InlineData("en-US", DoseAreaProductUnit.DecigraySquareMeter, "dGy·m²")]
        [InlineData("en-US", DoseAreaProductUnit.DecigraySquareMillimeter, "dGy·mm²")]
        [InlineData("en-US", DoseAreaProductUnit.GraySquareCentimeter, "Gy·cm²")]
        [InlineData("en-US", DoseAreaProductUnit.GraySquareDecimeter, "Gy·dm²")]
        [InlineData("en-US", DoseAreaProductUnit.GraySquareMeter, "Gy·m²")]
        [InlineData("en-US", DoseAreaProductUnit.GraySquareMillimeter, "Gy·mm²")]
        [InlineData("en-US", DoseAreaProductUnit.MicrograySquareCentimeter, "µGy·cm²")]
        [InlineData("en-US", DoseAreaProductUnit.MicrograySquareDecimeter, "µGy·dm²")]
        [InlineData("en-US", DoseAreaProductUnit.MicrograySquareMeter, "µGy·m²")]
        [InlineData("en-US", DoseAreaProductUnit.MicrograySquareMillimeter, "µGy·mm²")]
        [InlineData("en-US", DoseAreaProductUnit.MilligraySquareCentimeter, "mGy·cm²")]
        [InlineData("en-US", DoseAreaProductUnit.MilligraySquareDecimeter, "mGy·dm²")]
        [InlineData("en-US", DoseAreaProductUnit.MilligraySquareMeter, "mGy·m²")]
        [InlineData("en-US", DoseAreaProductUnit.MilligraySquareMillimeter, "mGy·mm²")]
        [InlineData("ru-RU", DoseAreaProductUnit.CentigraySquareCentimeter, "сГр·см²")]
        [InlineData("ru-RU", DoseAreaProductUnit.CentigraySquareDecimeter, "сГр·дм²")]
        [InlineData("ru-RU", DoseAreaProductUnit.CentigraySquareMeter, "сГр·м²")]
        [InlineData("ru-RU", DoseAreaProductUnit.CentigraySquareMillimeter, "сГр·мм²")]
        [InlineData("ru-RU", DoseAreaProductUnit.DecigraySquareCentimeter, "дГр·см²")]
        [InlineData("ru-RU", DoseAreaProductUnit.DecigraySquareDecimeter, "дГр·дм²")]
        [InlineData("ru-RU", DoseAreaProductUnit.DecigraySquareMeter, "дГр·м²")]
        [InlineData("ru-RU", DoseAreaProductUnit.DecigraySquareMillimeter, "дГр·мм²")]
        [InlineData("ru-RU", DoseAreaProductUnit.GraySquareCentimeter, "Гр·см²")]
        [InlineData("ru-RU", DoseAreaProductUnit.GraySquareDecimeter, "Гр·дм²")]
        [InlineData("ru-RU", DoseAreaProductUnit.GraySquareMeter, "Гр·м²")]
        [InlineData("ru-RU", DoseAreaProductUnit.GraySquareMillimeter, "Гр·мм²")]
        [InlineData("ru-RU", DoseAreaProductUnit.MicrograySquareCentimeter, "мкГр·см²")]
        [InlineData("ru-RU", DoseAreaProductUnit.MicrograySquareDecimeter, "мкГр·дм²")]
        [InlineData("ru-RU", DoseAreaProductUnit.MicrograySquareMeter, "мкГр·м²")]
        [InlineData("ru-RU", DoseAreaProductUnit.MicrograySquareMillimeter, "мкГр·мм²")]
        [InlineData("ru-RU", DoseAreaProductUnit.MilligraySquareCentimeter, "мГр·см²")]
        [InlineData("ru-RU", DoseAreaProductUnit.MilligraySquareDecimeter, "мГр·дм²")]
        [InlineData("ru-RU", DoseAreaProductUnit.MilligraySquareMeter, "мГр·м²")]
        [InlineData("ru-RU", DoseAreaProductUnit.MilligraySquareMillimeter, "мГр·мм²")]
        public void GetAbbreviationForCulture(string culture, DoseAreaProductUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = DoseAreaProduct.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(DoseAreaProduct.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = DoseAreaProduct.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(DoseAreaProductUnit unit)
        {
            var inBaseUnits = DoseAreaProduct.From(1.0, DoseAreaProduct.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(DoseAreaProductUnit unit)
        {
            var quantity = DoseAreaProduct.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(DoseAreaProductUnit unit)
        {
            Assert.All(DoseAreaProduct.Units.Where(u => u != DoseAreaProduct.BaseUnit), fromUnit =>
            {
                var quantity = DoseAreaProduct.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(DoseAreaProductUnit unit)
        {
            var quantity = default(DoseAreaProduct);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(DoseAreaProductUnit unit)
        {
            var quantity = DoseAreaProduct.From(3, DoseAreaProduct.BaseUnit);
            DoseAreaProduct expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<DoseAreaProductUnit> quantityToConvert = quantity;
                IQuantity<DoseAreaProductUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(3);
            Assert.Equal(3, DoseAreaProduct.FromCentigraySquareCentimeters(graysquaremeter.CentigraySquareCentimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromCentigraySquareDecimeters(graysquaremeter.CentigraySquareDecimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromCentigraySquareMeters(graysquaremeter.CentigraySquareMeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromCentigraySquareMillimeters(graysquaremeter.CentigraySquareMillimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromDecigraySquareCentimeters(graysquaremeter.DecigraySquareCentimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromDecigraySquareDecimeters(graysquaremeter.DecigraySquareDecimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromDecigraySquareMeters(graysquaremeter.DecigraySquareMeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromDecigraySquareMillimeters(graysquaremeter.DecigraySquareMillimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromGraySquareCentimeters(graysquaremeter.GraySquareCentimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromGraySquareDecimeters(graysquaremeter.GraySquareDecimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromGraySquareMeters(graysquaremeter.GraySquareMeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromGraySquareMillimeters(graysquaremeter.GraySquareMillimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromMicrograySquareCentimeters(graysquaremeter.MicrograySquareCentimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromMicrograySquareDecimeters(graysquaremeter.MicrograySquareDecimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromMicrograySquareMeters(graysquaremeter.MicrograySquareMeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromMicrograySquareMillimeters(graysquaremeter.MicrograySquareMillimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromMilligraySquareCentimeters(graysquaremeter.MilligraySquareCentimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromMilligraySquareDecimeters(graysquaremeter.MilligraySquareDecimeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromMilligraySquareMeters(graysquaremeter.MilligraySquareMeters).GraySquareMeters);
            Assert.Equal(3, DoseAreaProduct.FromMilligraySquareMillimeters(graysquaremeter.MilligraySquareMillimeters).GraySquareMeters);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            DoseAreaProduct v = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.Equal(-1, -v.GraySquareMeters);
            Assert.Equal(2, (DoseAreaProduct.FromGraySquareMeters(3) - v).GraySquareMeters);
            Assert.Equal(2, (v + v).GraySquareMeters);
            Assert.Equal(10, (v * 10).GraySquareMeters);
            Assert.Equal(10, (10 * v).GraySquareMeters);
            Assert.Equal(2, (DoseAreaProduct.FromGraySquareMeters(10) / 5).GraySquareMeters);
            Assert.Equal(2, DoseAreaProduct.FromGraySquareMeters(10) / DoseAreaProduct.FromGraySquareMeters(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            DoseAreaProduct oneGraySquareMeter = DoseAreaProduct.FromGraySquareMeters(1);
            DoseAreaProduct twoGraySquareMeters = DoseAreaProduct.FromGraySquareMeters(2);

            Assert.True(oneGraySquareMeter < twoGraySquareMeters);
            Assert.True(oneGraySquareMeter <= twoGraySquareMeters);
            Assert.True(twoGraySquareMeters > oneGraySquareMeter);
            Assert.True(twoGraySquareMeters >= oneGraySquareMeter);

            Assert.False(oneGraySquareMeter > twoGraySquareMeters);
            Assert.False(oneGraySquareMeter >= twoGraySquareMeters);
            Assert.False(twoGraySquareMeters < oneGraySquareMeter);
            Assert.False(twoGraySquareMeters <= oneGraySquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.Equal(0, graysquaremeter.CompareTo(graysquaremeter));
            Assert.True(graysquaremeter.CompareTo(DoseAreaProduct.Zero) > 0);
            Assert.True(DoseAreaProduct.Zero.CompareTo(graysquaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.Throws<ArgumentException>(() => graysquaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.Throws<ArgumentNullException>(() => graysquaremeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, DoseAreaProductUnit.GraySquareMeter, 1, DoseAreaProductUnit.GraySquareMeter, true)]  // Same value and unit.
        [InlineData(1, DoseAreaProductUnit.GraySquareMeter, 2, DoseAreaProductUnit.GraySquareMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, DoseAreaProductUnit unitA, double valueB, DoseAreaProductUnit unitB, bool expectEqual)
        {
            var a = new DoseAreaProduct(valueA, unitA);
            var b = new DoseAreaProduct(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = DoseAreaProduct.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.False(graysquaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            DoseAreaProduct graysquaremeter = DoseAreaProduct.FromGraySquareMeters(1);
            Assert.False(graysquaremeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance_IsImplemented(double firstValue, double secondValue)
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(firstValue);
            var otherQuantity = DoseAreaProduct.FromGraySquareMeters(secondValue);
            DoseAreaProduct maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, DoseAreaProduct.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1);
            var negativeTolerance = DoseAreaProduct.FromGraySquareMeters(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(DoseAreaProductUnit)).Cast<DoseAreaProductUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(DoseAreaProduct.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(DoseAreaProduct.Info.Units, DoseAreaProduct.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, DoseAreaProduct.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareCentimeter).ToString());
            Assert.Equal("1 cGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareDecimeter).ToString());
            Assert.Equal("1 cGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareMeter).ToString());
            Assert.Equal("1 cGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareMillimeter).ToString());
            Assert.Equal("1 dGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareCentimeter).ToString());
            Assert.Equal("1 dGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareDecimeter).ToString());
            Assert.Equal("1 dGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareMeter).ToString());
            Assert.Equal("1 dGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareMillimeter).ToString());
            Assert.Equal("1 Gy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareCentimeter).ToString());
            Assert.Equal("1 Gy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareDecimeter).ToString());
            Assert.Equal("1 Gy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMeter).ToString());
            Assert.Equal("1 Gy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMillimeter).ToString());
            Assert.Equal("1 µGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareCentimeter).ToString());
            Assert.Equal("1 µGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareDecimeter).ToString());
            Assert.Equal("1 µGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareMeter).ToString());
            Assert.Equal("1 µGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareMillimeter).ToString());
            Assert.Equal("1 mGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareCentimeter).ToString());
            Assert.Equal("1 mGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareDecimeter).ToString());
            Assert.Equal("1 mGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareMeter).ToString());
            Assert.Equal("1 mGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareMillimeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 cGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 cGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 cGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.CentigraySquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 dGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.DecigraySquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 Gy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.GraySquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 µGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MicrograySquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·cm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·dm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·m²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareMeter).ToString(swedishCulture));
            Assert.Equal("1 mGy·mm²", new DoseAreaProduct(1, DoseAreaProductUnit.MilligraySquareMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s1"));
            Assert.Equal("0.12 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s2"));
            Assert.Equal("0.123 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s3"));
            Assert.Equal("0.1235 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 Gy·m²", new DoseAreaProduct(0.123456, DoseAreaProductUnit.GraySquareMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(1.0);
            var expected = Comparison.GetHashCode(typeof(DoseAreaProduct), quantity.As(DoseAreaProduct.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = DoseAreaProduct.FromGraySquareMeters(value);
            Assert.Equal(DoseAreaProduct.FromGraySquareMeters(-value), -quantity);
        }
    }
}
