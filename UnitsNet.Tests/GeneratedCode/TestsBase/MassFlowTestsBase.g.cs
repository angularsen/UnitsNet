//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of MassFlow.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class MassFlowTestsBase : QuantityTestsBase
    {
        protected abstract double CentigramsPerDayInOneGramPerSecond { get; }
        protected abstract double CentigramsPerSecondInOneGramPerSecond { get; }
        protected abstract double DecagramsPerDayInOneGramPerSecond { get; }
        protected abstract double DecagramsPerSecondInOneGramPerSecond { get; }
        protected abstract double DecigramsPerDayInOneGramPerSecond { get; }
        protected abstract double DecigramsPerSecondInOneGramPerSecond { get; }
        protected abstract double GramsPerDayInOneGramPerSecond { get; }
        protected abstract double GramsPerHourInOneGramPerSecond { get; }
        protected abstract double GramsPerSecondInOneGramPerSecond { get; }
        protected abstract double HectogramsPerDayInOneGramPerSecond { get; }
        protected abstract double HectogramsPerSecondInOneGramPerSecond { get; }
        protected abstract double KilogramsPerDayInOneGramPerSecond { get; }
        protected abstract double KilogramsPerHourInOneGramPerSecond { get; }
        protected abstract double KilogramsPerMinuteInOneGramPerSecond { get; }
        protected abstract double KilogramsPerSecondInOneGramPerSecond { get; }
        protected abstract double MegagramsPerDayInOneGramPerSecond { get; }
        protected abstract double MegapoundsPerDayInOneGramPerSecond { get; }
        protected abstract double MegapoundsPerHourInOneGramPerSecond { get; }
        protected abstract double MegapoundsPerMinuteInOneGramPerSecond { get; }
        protected abstract double MegapoundsPerSecondInOneGramPerSecond { get; }
        protected abstract double MicrogramsPerDayInOneGramPerSecond { get; }
        protected abstract double MicrogramsPerSecondInOneGramPerSecond { get; }
        protected abstract double MilligramsPerDayInOneGramPerSecond { get; }
        protected abstract double MilligramsPerSecondInOneGramPerSecond { get; }
        protected abstract double NanogramsPerDayInOneGramPerSecond { get; }
        protected abstract double NanogramsPerSecondInOneGramPerSecond { get; }
        protected abstract double PoundsPerDayInOneGramPerSecond { get; }
        protected abstract double PoundsPerHourInOneGramPerSecond { get; }
        protected abstract double PoundsPerMinuteInOneGramPerSecond { get; }
        protected abstract double PoundsPerSecondInOneGramPerSecond { get; }
        protected abstract double ShortTonsPerHourInOneGramPerSecond { get; }
        protected abstract double TonnesPerDayInOneGramPerSecond { get; }
        protected abstract double TonnesPerHourInOneGramPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentigramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double CentigramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double DecagramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double DecigramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double GramsPerHourTolerance { get { return 1e-5; } }
        protected virtual double GramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double HectogramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KilogramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegagramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsPerDayTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsPerHourTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double MegapoundsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double MicrogramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double MilligramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerDayTolerance { get { return 1e-5; } }
        protected virtual double NanogramsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerDayTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerHourTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ShortTonsPerHourTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerDayTolerance { get { return 1e-5; } }
        protected virtual double TonnesPerHourTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(MassFlowUnit unit)
        {
            return unit switch
            {
                MassFlowUnit.CentigramPerDay => (CentigramsPerDayInOneGramPerSecond, CentigramsPerDayTolerance),
                MassFlowUnit.CentigramPerSecond => (CentigramsPerSecondInOneGramPerSecond, CentigramsPerSecondTolerance),
                MassFlowUnit.DecagramPerDay => (DecagramsPerDayInOneGramPerSecond, DecagramsPerDayTolerance),
                MassFlowUnit.DecagramPerSecond => (DecagramsPerSecondInOneGramPerSecond, DecagramsPerSecondTolerance),
                MassFlowUnit.DecigramPerDay => (DecigramsPerDayInOneGramPerSecond, DecigramsPerDayTolerance),
                MassFlowUnit.DecigramPerSecond => (DecigramsPerSecondInOneGramPerSecond, DecigramsPerSecondTolerance),
                MassFlowUnit.GramPerDay => (GramsPerDayInOneGramPerSecond, GramsPerDayTolerance),
                MassFlowUnit.GramPerHour => (GramsPerHourInOneGramPerSecond, GramsPerHourTolerance),
                MassFlowUnit.GramPerSecond => (GramsPerSecondInOneGramPerSecond, GramsPerSecondTolerance),
                MassFlowUnit.HectogramPerDay => (HectogramsPerDayInOneGramPerSecond, HectogramsPerDayTolerance),
                MassFlowUnit.HectogramPerSecond => (HectogramsPerSecondInOneGramPerSecond, HectogramsPerSecondTolerance),
                MassFlowUnit.KilogramPerDay => (KilogramsPerDayInOneGramPerSecond, KilogramsPerDayTolerance),
                MassFlowUnit.KilogramPerHour => (KilogramsPerHourInOneGramPerSecond, KilogramsPerHourTolerance),
                MassFlowUnit.KilogramPerMinute => (KilogramsPerMinuteInOneGramPerSecond, KilogramsPerMinuteTolerance),
                MassFlowUnit.KilogramPerSecond => (KilogramsPerSecondInOneGramPerSecond, KilogramsPerSecondTolerance),
                MassFlowUnit.MegagramPerDay => (MegagramsPerDayInOneGramPerSecond, MegagramsPerDayTolerance),
                MassFlowUnit.MegapoundPerDay => (MegapoundsPerDayInOneGramPerSecond, MegapoundsPerDayTolerance),
                MassFlowUnit.MegapoundPerHour => (MegapoundsPerHourInOneGramPerSecond, MegapoundsPerHourTolerance),
                MassFlowUnit.MegapoundPerMinute => (MegapoundsPerMinuteInOneGramPerSecond, MegapoundsPerMinuteTolerance),
                MassFlowUnit.MegapoundPerSecond => (MegapoundsPerSecondInOneGramPerSecond, MegapoundsPerSecondTolerance),
                MassFlowUnit.MicrogramPerDay => (MicrogramsPerDayInOneGramPerSecond, MicrogramsPerDayTolerance),
                MassFlowUnit.MicrogramPerSecond => (MicrogramsPerSecondInOneGramPerSecond, MicrogramsPerSecondTolerance),
                MassFlowUnit.MilligramPerDay => (MilligramsPerDayInOneGramPerSecond, MilligramsPerDayTolerance),
                MassFlowUnit.MilligramPerSecond => (MilligramsPerSecondInOneGramPerSecond, MilligramsPerSecondTolerance),
                MassFlowUnit.NanogramPerDay => (NanogramsPerDayInOneGramPerSecond, NanogramsPerDayTolerance),
                MassFlowUnit.NanogramPerSecond => (NanogramsPerSecondInOneGramPerSecond, NanogramsPerSecondTolerance),
                MassFlowUnit.PoundPerDay => (PoundsPerDayInOneGramPerSecond, PoundsPerDayTolerance),
                MassFlowUnit.PoundPerHour => (PoundsPerHourInOneGramPerSecond, PoundsPerHourTolerance),
                MassFlowUnit.PoundPerMinute => (PoundsPerMinuteInOneGramPerSecond, PoundsPerMinuteTolerance),
                MassFlowUnit.PoundPerSecond => (PoundsPerSecondInOneGramPerSecond, PoundsPerSecondTolerance),
                MassFlowUnit.ShortTonPerHour => (ShortTonsPerHourInOneGramPerSecond, ShortTonsPerHourTolerance),
                MassFlowUnit.TonnePerDay => (TonnesPerDayInOneGramPerSecond, TonnesPerDayTolerance),
                MassFlowUnit.TonnePerHour => (TonnesPerHourInOneGramPerSecond, TonnesPerHourTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { MassFlowUnit.CentigramPerDay },
            new object[] { MassFlowUnit.CentigramPerSecond },
            new object[] { MassFlowUnit.DecagramPerDay },
            new object[] { MassFlowUnit.DecagramPerSecond },
            new object[] { MassFlowUnit.DecigramPerDay },
            new object[] { MassFlowUnit.DecigramPerSecond },
            new object[] { MassFlowUnit.GramPerDay },
            new object[] { MassFlowUnit.GramPerHour },
            new object[] { MassFlowUnit.GramPerSecond },
            new object[] { MassFlowUnit.HectogramPerDay },
            new object[] { MassFlowUnit.HectogramPerSecond },
            new object[] { MassFlowUnit.KilogramPerDay },
            new object[] { MassFlowUnit.KilogramPerHour },
            new object[] { MassFlowUnit.KilogramPerMinute },
            new object[] { MassFlowUnit.KilogramPerSecond },
            new object[] { MassFlowUnit.MegagramPerDay },
            new object[] { MassFlowUnit.MegapoundPerDay },
            new object[] { MassFlowUnit.MegapoundPerHour },
            new object[] { MassFlowUnit.MegapoundPerMinute },
            new object[] { MassFlowUnit.MegapoundPerSecond },
            new object[] { MassFlowUnit.MicrogramPerDay },
            new object[] { MassFlowUnit.MicrogramPerSecond },
            new object[] { MassFlowUnit.MilligramPerDay },
            new object[] { MassFlowUnit.MilligramPerSecond },
            new object[] { MassFlowUnit.NanogramPerDay },
            new object[] { MassFlowUnit.NanogramPerSecond },
            new object[] { MassFlowUnit.PoundPerDay },
            new object[] { MassFlowUnit.PoundPerHour },
            new object[] { MassFlowUnit.PoundPerMinute },
            new object[] { MassFlowUnit.PoundPerSecond },
            new object[] { MassFlowUnit.ShortTonPerHour },
            new object[] { MassFlowUnit.TonnePerDay },
            new object[] { MassFlowUnit.TonnePerHour },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new MassFlow();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(MassFlowUnit.GramPerSecond, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new MassFlow(double.PositiveInfinity, MassFlowUnit.GramPerSecond));
            var exception2 = Record.Exception(() => new MassFlow(double.NegativeInfinity, MassFlowUnit.GramPerSecond));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new MassFlow(double.NaN, MassFlowUnit.GramPerSecond));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new MassFlow(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new MassFlow(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new MassFlow(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void MassFlow_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new MassFlow(1, MassFlowUnit.GramPerSecond);

            QuantityInfo<MassFlowUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(MassFlow.Zero, quantityInfo.Zero);
            Assert.Equal("MassFlow", quantityInfo.Name);

            var units = EnumUtils.GetEnumValues<MassFlowUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void GramPerSecondToMassFlowUnits()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            AssertEx.EqualTolerance(CentigramsPerDayInOneGramPerSecond, grampersecond.CentigramsPerDay, CentigramsPerDayTolerance);
            AssertEx.EqualTolerance(CentigramsPerSecondInOneGramPerSecond, grampersecond.CentigramsPerSecond, CentigramsPerSecondTolerance);
            AssertEx.EqualTolerance(DecagramsPerDayInOneGramPerSecond, grampersecond.DecagramsPerDay, DecagramsPerDayTolerance);
            AssertEx.EqualTolerance(DecagramsPerSecondInOneGramPerSecond, grampersecond.DecagramsPerSecond, DecagramsPerSecondTolerance);
            AssertEx.EqualTolerance(DecigramsPerDayInOneGramPerSecond, grampersecond.DecigramsPerDay, DecigramsPerDayTolerance);
            AssertEx.EqualTolerance(DecigramsPerSecondInOneGramPerSecond, grampersecond.DecigramsPerSecond, DecigramsPerSecondTolerance);
            AssertEx.EqualTolerance(GramsPerDayInOneGramPerSecond, grampersecond.GramsPerDay, GramsPerDayTolerance);
            AssertEx.EqualTolerance(GramsPerHourInOneGramPerSecond, grampersecond.GramsPerHour, GramsPerHourTolerance);
            AssertEx.EqualTolerance(GramsPerSecondInOneGramPerSecond, grampersecond.GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(HectogramsPerDayInOneGramPerSecond, grampersecond.HectogramsPerDay, HectogramsPerDayTolerance);
            AssertEx.EqualTolerance(HectogramsPerSecondInOneGramPerSecond, grampersecond.HectogramsPerSecond, HectogramsPerSecondTolerance);
            AssertEx.EqualTolerance(KilogramsPerDayInOneGramPerSecond, grampersecond.KilogramsPerDay, KilogramsPerDayTolerance);
            AssertEx.EqualTolerance(KilogramsPerHourInOneGramPerSecond, grampersecond.KilogramsPerHour, KilogramsPerHourTolerance);
            AssertEx.EqualTolerance(KilogramsPerMinuteInOneGramPerSecond, grampersecond.KilogramsPerMinute, KilogramsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilogramsPerSecondInOneGramPerSecond, grampersecond.KilogramsPerSecond, KilogramsPerSecondTolerance);
            AssertEx.EqualTolerance(MegagramsPerDayInOneGramPerSecond, grampersecond.MegagramsPerDay, MegagramsPerDayTolerance);
            AssertEx.EqualTolerance(MegapoundsPerDayInOneGramPerSecond, grampersecond.MegapoundsPerDay, MegapoundsPerDayTolerance);
            AssertEx.EqualTolerance(MegapoundsPerHourInOneGramPerSecond, grampersecond.MegapoundsPerHour, MegapoundsPerHourTolerance);
            AssertEx.EqualTolerance(MegapoundsPerMinuteInOneGramPerSecond, grampersecond.MegapoundsPerMinute, MegapoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(MegapoundsPerSecondInOneGramPerSecond, grampersecond.MegapoundsPerSecond, MegapoundsPerSecondTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDayInOneGramPerSecond, grampersecond.MicrogramsPerDay, MicrogramsPerDayTolerance);
            AssertEx.EqualTolerance(MicrogramsPerSecondInOneGramPerSecond, grampersecond.MicrogramsPerSecond, MicrogramsPerSecondTolerance);
            AssertEx.EqualTolerance(MilligramsPerDayInOneGramPerSecond, grampersecond.MilligramsPerDay, MilligramsPerDayTolerance);
            AssertEx.EqualTolerance(MilligramsPerSecondInOneGramPerSecond, grampersecond.MilligramsPerSecond, MilligramsPerSecondTolerance);
            AssertEx.EqualTolerance(NanogramsPerDayInOneGramPerSecond, grampersecond.NanogramsPerDay, NanogramsPerDayTolerance);
            AssertEx.EqualTolerance(NanogramsPerSecondInOneGramPerSecond, grampersecond.NanogramsPerSecond, NanogramsPerSecondTolerance);
            AssertEx.EqualTolerance(PoundsPerDayInOneGramPerSecond, grampersecond.PoundsPerDay, PoundsPerDayTolerance);
            AssertEx.EqualTolerance(PoundsPerHourInOneGramPerSecond, grampersecond.PoundsPerHour, PoundsPerHourTolerance);
            AssertEx.EqualTolerance(PoundsPerMinuteInOneGramPerSecond, grampersecond.PoundsPerMinute, PoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(PoundsPerSecondInOneGramPerSecond, grampersecond.PoundsPerSecond, PoundsPerSecondTolerance);
            AssertEx.EqualTolerance(ShortTonsPerHourInOneGramPerSecond, grampersecond.ShortTonsPerHour, ShortTonsPerHourTolerance);
            AssertEx.EqualTolerance(TonnesPerDayInOneGramPerSecond, grampersecond.TonnesPerDay, TonnesPerDayTolerance);
            AssertEx.EqualTolerance(TonnesPerHourInOneGramPerSecond, grampersecond.TonnesPerHour, TonnesPerHourTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = MassFlow.From(1, MassFlowUnit.CentigramPerDay);
            AssertEx.EqualTolerance(1, quantity00.CentigramsPerDay, CentigramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.CentigramPerDay, quantity00.Unit);

            var quantity01 = MassFlow.From(1, MassFlowUnit.CentigramPerSecond);
            AssertEx.EqualTolerance(1, quantity01.CentigramsPerSecond, CentigramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.CentigramPerSecond, quantity01.Unit);

            var quantity02 = MassFlow.From(1, MassFlowUnit.DecagramPerDay);
            AssertEx.EqualTolerance(1, quantity02.DecagramsPerDay, DecagramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.DecagramPerDay, quantity02.Unit);

            var quantity03 = MassFlow.From(1, MassFlowUnit.DecagramPerSecond);
            AssertEx.EqualTolerance(1, quantity03.DecagramsPerSecond, DecagramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.DecagramPerSecond, quantity03.Unit);

            var quantity04 = MassFlow.From(1, MassFlowUnit.DecigramPerDay);
            AssertEx.EqualTolerance(1, quantity04.DecigramsPerDay, DecigramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.DecigramPerDay, quantity04.Unit);

            var quantity05 = MassFlow.From(1, MassFlowUnit.DecigramPerSecond);
            AssertEx.EqualTolerance(1, quantity05.DecigramsPerSecond, DecigramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.DecigramPerSecond, quantity05.Unit);

            var quantity06 = MassFlow.From(1, MassFlowUnit.GramPerDay);
            AssertEx.EqualTolerance(1, quantity06.GramsPerDay, GramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.GramPerDay, quantity06.Unit);

            var quantity07 = MassFlow.From(1, MassFlowUnit.GramPerHour);
            AssertEx.EqualTolerance(1, quantity07.GramsPerHour, GramsPerHourTolerance);
            Assert.Equal(MassFlowUnit.GramPerHour, quantity07.Unit);

            var quantity08 = MassFlow.From(1, MassFlowUnit.GramPerSecond);
            AssertEx.EqualTolerance(1, quantity08.GramsPerSecond, GramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.GramPerSecond, quantity08.Unit);

            var quantity09 = MassFlow.From(1, MassFlowUnit.HectogramPerDay);
            AssertEx.EqualTolerance(1, quantity09.HectogramsPerDay, HectogramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.HectogramPerDay, quantity09.Unit);

            var quantity10 = MassFlow.From(1, MassFlowUnit.HectogramPerSecond);
            AssertEx.EqualTolerance(1, quantity10.HectogramsPerSecond, HectogramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.HectogramPerSecond, quantity10.Unit);

            var quantity11 = MassFlow.From(1, MassFlowUnit.KilogramPerDay);
            AssertEx.EqualTolerance(1, quantity11.KilogramsPerDay, KilogramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.KilogramPerDay, quantity11.Unit);

            var quantity12 = MassFlow.From(1, MassFlowUnit.KilogramPerHour);
            AssertEx.EqualTolerance(1, quantity12.KilogramsPerHour, KilogramsPerHourTolerance);
            Assert.Equal(MassFlowUnit.KilogramPerHour, quantity12.Unit);

            var quantity13 = MassFlow.From(1, MassFlowUnit.KilogramPerMinute);
            AssertEx.EqualTolerance(1, quantity13.KilogramsPerMinute, KilogramsPerMinuteTolerance);
            Assert.Equal(MassFlowUnit.KilogramPerMinute, quantity13.Unit);

            var quantity14 = MassFlow.From(1, MassFlowUnit.KilogramPerSecond);
            AssertEx.EqualTolerance(1, quantity14.KilogramsPerSecond, KilogramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.KilogramPerSecond, quantity14.Unit);

            var quantity15 = MassFlow.From(1, MassFlowUnit.MegagramPerDay);
            AssertEx.EqualTolerance(1, quantity15.MegagramsPerDay, MegagramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.MegagramPerDay, quantity15.Unit);

            var quantity16 = MassFlow.From(1, MassFlowUnit.MegapoundPerDay);
            AssertEx.EqualTolerance(1, quantity16.MegapoundsPerDay, MegapoundsPerDayTolerance);
            Assert.Equal(MassFlowUnit.MegapoundPerDay, quantity16.Unit);

            var quantity17 = MassFlow.From(1, MassFlowUnit.MegapoundPerHour);
            AssertEx.EqualTolerance(1, quantity17.MegapoundsPerHour, MegapoundsPerHourTolerance);
            Assert.Equal(MassFlowUnit.MegapoundPerHour, quantity17.Unit);

            var quantity18 = MassFlow.From(1, MassFlowUnit.MegapoundPerMinute);
            AssertEx.EqualTolerance(1, quantity18.MegapoundsPerMinute, MegapoundsPerMinuteTolerance);
            Assert.Equal(MassFlowUnit.MegapoundPerMinute, quantity18.Unit);

            var quantity19 = MassFlow.From(1, MassFlowUnit.MegapoundPerSecond);
            AssertEx.EqualTolerance(1, quantity19.MegapoundsPerSecond, MegapoundsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.MegapoundPerSecond, quantity19.Unit);

            var quantity20 = MassFlow.From(1, MassFlowUnit.MicrogramPerDay);
            AssertEx.EqualTolerance(1, quantity20.MicrogramsPerDay, MicrogramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.MicrogramPerDay, quantity20.Unit);

            var quantity21 = MassFlow.From(1, MassFlowUnit.MicrogramPerSecond);
            AssertEx.EqualTolerance(1, quantity21.MicrogramsPerSecond, MicrogramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.MicrogramPerSecond, quantity21.Unit);

            var quantity22 = MassFlow.From(1, MassFlowUnit.MilligramPerDay);
            AssertEx.EqualTolerance(1, quantity22.MilligramsPerDay, MilligramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.MilligramPerDay, quantity22.Unit);

            var quantity23 = MassFlow.From(1, MassFlowUnit.MilligramPerSecond);
            AssertEx.EqualTolerance(1, quantity23.MilligramsPerSecond, MilligramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.MilligramPerSecond, quantity23.Unit);

            var quantity24 = MassFlow.From(1, MassFlowUnit.NanogramPerDay);
            AssertEx.EqualTolerance(1, quantity24.NanogramsPerDay, NanogramsPerDayTolerance);
            Assert.Equal(MassFlowUnit.NanogramPerDay, quantity24.Unit);

            var quantity25 = MassFlow.From(1, MassFlowUnit.NanogramPerSecond);
            AssertEx.EqualTolerance(1, quantity25.NanogramsPerSecond, NanogramsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.NanogramPerSecond, quantity25.Unit);

            var quantity26 = MassFlow.From(1, MassFlowUnit.PoundPerDay);
            AssertEx.EqualTolerance(1, quantity26.PoundsPerDay, PoundsPerDayTolerance);
            Assert.Equal(MassFlowUnit.PoundPerDay, quantity26.Unit);

            var quantity27 = MassFlow.From(1, MassFlowUnit.PoundPerHour);
            AssertEx.EqualTolerance(1, quantity27.PoundsPerHour, PoundsPerHourTolerance);
            Assert.Equal(MassFlowUnit.PoundPerHour, quantity27.Unit);

            var quantity28 = MassFlow.From(1, MassFlowUnit.PoundPerMinute);
            AssertEx.EqualTolerance(1, quantity28.PoundsPerMinute, PoundsPerMinuteTolerance);
            Assert.Equal(MassFlowUnit.PoundPerMinute, quantity28.Unit);

            var quantity29 = MassFlow.From(1, MassFlowUnit.PoundPerSecond);
            AssertEx.EqualTolerance(1, quantity29.PoundsPerSecond, PoundsPerSecondTolerance);
            Assert.Equal(MassFlowUnit.PoundPerSecond, quantity29.Unit);

            var quantity30 = MassFlow.From(1, MassFlowUnit.ShortTonPerHour);
            AssertEx.EqualTolerance(1, quantity30.ShortTonsPerHour, ShortTonsPerHourTolerance);
            Assert.Equal(MassFlowUnit.ShortTonPerHour, quantity30.Unit);

            var quantity31 = MassFlow.From(1, MassFlowUnit.TonnePerDay);
            AssertEx.EqualTolerance(1, quantity31.TonnesPerDay, TonnesPerDayTolerance);
            Assert.Equal(MassFlowUnit.TonnePerDay, quantity31.Unit);

            var quantity32 = MassFlow.From(1, MassFlowUnit.TonnePerHour);
            AssertEx.EqualTolerance(1, quantity32.TonnesPerHour, TonnesPerHourTolerance);
            Assert.Equal(MassFlowUnit.TonnePerHour, quantity32.Unit);

        }

        [Fact]
        public void FromGramsPerSecond_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => MassFlow.FromGramsPerSecond(double.PositiveInfinity));
            var exception2 = Record.Exception(() => MassFlow.FromGramsPerSecond(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromGramsPerSecond_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => MassFlow.FromGramsPerSecond(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var grampersecond = MassFlow.FromGramsPerSecond(1);
            AssertEx.EqualTolerance(CentigramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.CentigramPerDay), CentigramsPerDayTolerance);
            AssertEx.EqualTolerance(CentigramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.CentigramPerSecond), CentigramsPerSecondTolerance);
            AssertEx.EqualTolerance(DecagramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.DecagramPerDay), DecagramsPerDayTolerance);
            AssertEx.EqualTolerance(DecagramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.DecagramPerSecond), DecagramsPerSecondTolerance);
            AssertEx.EqualTolerance(DecigramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.DecigramPerDay), DecigramsPerDayTolerance);
            AssertEx.EqualTolerance(DecigramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.DecigramPerSecond), DecigramsPerSecondTolerance);
            AssertEx.EqualTolerance(GramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.GramPerDay), GramsPerDayTolerance);
            AssertEx.EqualTolerance(GramsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.GramPerHour), GramsPerHourTolerance);
            AssertEx.EqualTolerance(GramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.GramPerSecond), GramsPerSecondTolerance);
            AssertEx.EqualTolerance(HectogramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.HectogramPerDay), HectogramsPerDayTolerance);
            AssertEx.EqualTolerance(HectogramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.HectogramPerSecond), HectogramsPerSecondTolerance);
            AssertEx.EqualTolerance(KilogramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.KilogramPerDay), KilogramsPerDayTolerance);
            AssertEx.EqualTolerance(KilogramsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.KilogramPerHour), KilogramsPerHourTolerance);
            AssertEx.EqualTolerance(KilogramsPerMinuteInOneGramPerSecond, grampersecond.As(MassFlowUnit.KilogramPerMinute), KilogramsPerMinuteTolerance);
            AssertEx.EqualTolerance(KilogramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.KilogramPerSecond), KilogramsPerSecondTolerance);
            AssertEx.EqualTolerance(MegagramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.MegagramPerDay), MegagramsPerDayTolerance);
            AssertEx.EqualTolerance(MegapoundsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.MegapoundPerDay), MegapoundsPerDayTolerance);
            AssertEx.EqualTolerance(MegapoundsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.MegapoundPerHour), MegapoundsPerHourTolerance);
            AssertEx.EqualTolerance(MegapoundsPerMinuteInOneGramPerSecond, grampersecond.As(MassFlowUnit.MegapoundPerMinute), MegapoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(MegapoundsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.MegapoundPerSecond), MegapoundsPerSecondTolerance);
            AssertEx.EqualTolerance(MicrogramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.MicrogramPerDay), MicrogramsPerDayTolerance);
            AssertEx.EqualTolerance(MicrogramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.MicrogramPerSecond), MicrogramsPerSecondTolerance);
            AssertEx.EqualTolerance(MilligramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.MilligramPerDay), MilligramsPerDayTolerance);
            AssertEx.EqualTolerance(MilligramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.MilligramPerSecond), MilligramsPerSecondTolerance);
            AssertEx.EqualTolerance(NanogramsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.NanogramPerDay), NanogramsPerDayTolerance);
            AssertEx.EqualTolerance(NanogramsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.NanogramPerSecond), NanogramsPerSecondTolerance);
            AssertEx.EqualTolerance(PoundsPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.PoundPerDay), PoundsPerDayTolerance);
            AssertEx.EqualTolerance(PoundsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.PoundPerHour), PoundsPerHourTolerance);
            AssertEx.EqualTolerance(PoundsPerMinuteInOneGramPerSecond, grampersecond.As(MassFlowUnit.PoundPerMinute), PoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(PoundsPerSecondInOneGramPerSecond, grampersecond.As(MassFlowUnit.PoundPerSecond), PoundsPerSecondTolerance);
            AssertEx.EqualTolerance(ShortTonsPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.ShortTonPerHour), ShortTonsPerHourTolerance);
            AssertEx.EqualTolerance(TonnesPerDayInOneGramPerSecond, grampersecond.As(MassFlowUnit.TonnePerDay), TonnesPerDayTolerance);
            AssertEx.EqualTolerance(TonnesPerHourInOneGramPerSecond, grampersecond.As(MassFlowUnit.TonnePerHour), TonnesPerHourTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = MassFlow.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
            var expectedValue = quantity.As(MassFlow.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
            var expectedUnit = MassFlow.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                MassFlow quantityToConvert = quantity;

                MassFlow convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<MassFlowUnit> quantityToConvert = quantity;

                IQuantity<MassFlowUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<MassFlowUnit> quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<MassFlowUnit> quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new MassFlow(value: 1, unit: MassFlow.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = MassFlow.Parse("1 cg/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerDay, CentigramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.CentigramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 cg/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerSecond, CentigramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.CentigramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 cg/S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerSecond, CentigramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.CentigramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 dag/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecagramsPerDay, DecagramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.DecagramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 dag/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecagramsPerSecond, DecagramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.DecagramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 dag/S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecagramsPerSecond, DecagramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.DecagramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 dg/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerDay, DecigramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.DecigramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 dg/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerSecond, DecigramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.DecigramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 dg/S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerSecond, DecigramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.DecigramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 g/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerDay, GramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.GramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 g/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerHour, GramsPerHourTolerance);
                Assert.Equal(MassFlowUnit.GramPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 g/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerSecond, GramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.GramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 g/S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramsPerSecond, GramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.GramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 hg/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.HectogramsPerDay, HectogramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.HectogramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 hg/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.HectogramsPerSecond, HectogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.HectogramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 hg/S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.HectogramsPerSecond, HectogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.HectogramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 kg/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerDay, KilogramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 kg/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerHour, KilogramsPerHourTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 кг/ч", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerHour, KilogramsPerHourTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 kg/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerMinute, KilogramsPerMinuteTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 кг/мин", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerMinute, KilogramsPerMinuteTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 kg/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerSecond, KilogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 kg/S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerSecond, KilogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 Mg/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegagramsPerDay, MegagramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.MegagramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 Mlb/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundsPerDay, MegapoundsPerDayTolerance);
                Assert.Equal(MassFlowUnit.MegapoundPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 Mlb/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundsPerHour, MegapoundsPerHourTolerance);
                Assert.Equal(MassFlowUnit.MegapoundPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 Mlb/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundsPerMinute, MegapoundsPerMinuteTolerance);
                Assert.Equal(MassFlowUnit.MegapoundPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 Mlb/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundsPerSecond, MegapoundsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MegapoundPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 µg/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerDay, MicrogramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.MicrogramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 µg/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerSecond, MicrogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MicrogramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 µg/S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerSecond, MicrogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MicrogramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 mg/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerDay, MilligramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.MilligramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 mg/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerSecond, MilligramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MilligramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 mg/S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerSecond, MilligramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MilligramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 ng/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerDay, NanogramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.NanogramPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 ng/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerSecond, NanogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.NanogramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 ng/S", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerSecond, NanogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.NanogramPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 lb/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsPerDay, PoundsPerDayTolerance);
                Assert.Equal(MassFlowUnit.PoundPerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 lb/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsPerHour, PoundsPerHourTolerance);
                Assert.Equal(MassFlowUnit.PoundPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 lb/min", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsPerMinute, PoundsPerMinuteTolerance);
                Assert.Equal(MassFlowUnit.PoundPerMinute, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 lb/s", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundsPerSecond, PoundsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.PoundPerSecond, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 short tn/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.ShortTonsPerHour, ShortTonsPerHourTolerance);
                Assert.Equal(MassFlowUnit.ShortTonPerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 t/d", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonnesPerDay, TonnesPerDayTolerance);
                Assert.Equal(MassFlowUnit.TonnePerDay, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = MassFlow.Parse("1 t/h", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonnesPerHour, TonnesPerHourTolerance);
                Assert.Equal(MassFlowUnit.TonnePerHour, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(MassFlow.TryParse("1 cg/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerDay, CentigramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.CentigramPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 cg/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerSecond, CentigramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.CentigramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 cg/S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.CentigramsPerSecond, CentigramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.CentigramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 dag/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecagramsPerDay, DecagramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.DecagramPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 dag/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecagramsPerSecond, DecagramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.DecagramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 dag/S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecagramsPerSecond, DecagramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.DecagramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 dg/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerDay, DecigramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.DecigramPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 dg/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerSecond, DecigramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.DecigramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 dg/S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.DecigramsPerSecond, DecigramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.DecigramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 g/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerDay, GramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.GramPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 g/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerHour, GramsPerHourTolerance);
                Assert.Equal(MassFlowUnit.GramPerHour, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 g/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerSecond, GramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.GramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 g/S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramsPerSecond, GramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.GramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 hg/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.HectogramsPerDay, HectogramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.HectogramPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 hg/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.HectogramsPerSecond, HectogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.HectogramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 hg/S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.HectogramsPerSecond, HectogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.HectogramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 kg/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerDay, KilogramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 kg/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerHour, KilogramsPerHourTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerHour, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 кг/ч", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerHour, KilogramsPerHourTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerHour, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 kg/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerMinute, KilogramsPerMinuteTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerMinute, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 кг/мин", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerMinute, KilogramsPerMinuteTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerMinute, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 kg/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerSecond, KilogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 kg/S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramsPerSecond, KilogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.KilogramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 Mlb/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundsPerDay, MegapoundsPerDayTolerance);
                Assert.Equal(MassFlowUnit.MegapoundPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 Mlb/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundsPerHour, MegapoundsPerHourTolerance);
                Assert.Equal(MassFlowUnit.MegapoundPerHour, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 Mlb/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundsPerMinute, MegapoundsPerMinuteTolerance);
                Assert.Equal(MassFlowUnit.MegapoundPerMinute, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 Mlb/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundsPerSecond, MegapoundsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MegapoundPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 µg/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerDay, MicrogramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.MicrogramPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 µg/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerSecond, MicrogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MicrogramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 µg/S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MicrogramsPerSecond, MicrogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MicrogramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 mg/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerSecond, MilligramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MilligramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 mg/S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MilligramsPerSecond, MilligramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.MilligramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 ng/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerDay, NanogramsPerDayTolerance);
                Assert.Equal(MassFlowUnit.NanogramPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 ng/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerSecond, NanogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.NanogramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 ng/S", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NanogramsPerSecond, NanogramsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.NanogramPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 lb/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsPerDay, PoundsPerDayTolerance);
                Assert.Equal(MassFlowUnit.PoundPerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 lb/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsPerHour, PoundsPerHourTolerance);
                Assert.Equal(MassFlowUnit.PoundPerHour, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 lb/min", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsPerMinute, PoundsPerMinuteTolerance);
                Assert.Equal(MassFlowUnit.PoundPerMinute, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 lb/s", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundsPerSecond, PoundsPerSecondTolerance);
                Assert.Equal(MassFlowUnit.PoundPerSecond, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 short tn/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.ShortTonsPerHour, ShortTonsPerHourTolerance);
                Assert.Equal(MassFlowUnit.ShortTonPerHour, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 t/d", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonnesPerDay, TonnesPerDayTolerance);
                Assert.Equal(MassFlowUnit.TonnePerDay, parsed.Unit);
            }

            {
                Assert.True(MassFlow.TryParse("1 t/h", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonnesPerHour, TonnesPerHourTolerance);
                Assert.Equal(MassFlowUnit.TonnePerHour, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("cg/d", MassFlowUnit.CentigramPerDay)]
        [InlineData("cg/s", MassFlowUnit.CentigramPerSecond)]
        [InlineData("cg/S", MassFlowUnit.CentigramPerSecond)]
        [InlineData("dag/d", MassFlowUnit.DecagramPerDay)]
        [InlineData("dag/s", MassFlowUnit.DecagramPerSecond)]
        [InlineData("dag/S", MassFlowUnit.DecagramPerSecond)]
        [InlineData("dg/d", MassFlowUnit.DecigramPerDay)]
        [InlineData("dg/s", MassFlowUnit.DecigramPerSecond)]
        [InlineData("dg/S", MassFlowUnit.DecigramPerSecond)]
        [InlineData("g/d", MassFlowUnit.GramPerDay)]
        [InlineData("g/h", MassFlowUnit.GramPerHour)]
        [InlineData("g/s", MassFlowUnit.GramPerSecond)]
        [InlineData("g/S", MassFlowUnit.GramPerSecond)]
        [InlineData("hg/d", MassFlowUnit.HectogramPerDay)]
        [InlineData("hg/s", MassFlowUnit.HectogramPerSecond)]
        [InlineData("hg/S", MassFlowUnit.HectogramPerSecond)]
        [InlineData("kg/d", MassFlowUnit.KilogramPerDay)]
        [InlineData("kg/h", MassFlowUnit.KilogramPerHour)]
        [InlineData("kg/min", MassFlowUnit.KilogramPerMinute)]
        [InlineData("kg/s", MassFlowUnit.KilogramPerSecond)]
        [InlineData("kg/S", MassFlowUnit.KilogramPerSecond)]
        [InlineData("Mg/d", MassFlowUnit.MegagramPerDay)]
        [InlineData("Mlb/d", MassFlowUnit.MegapoundPerDay)]
        [InlineData("Mlb/h", MassFlowUnit.MegapoundPerHour)]
        [InlineData("Mlb/min", MassFlowUnit.MegapoundPerMinute)]
        [InlineData("Mlb/s", MassFlowUnit.MegapoundPerSecond)]
        [InlineData("µg/d", MassFlowUnit.MicrogramPerDay)]
        [InlineData("µg/s", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("µg/S", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("mg/d", MassFlowUnit.MilligramPerDay)]
        [InlineData("mg/s", MassFlowUnit.MilligramPerSecond)]
        [InlineData("mg/S", MassFlowUnit.MilligramPerSecond)]
        [InlineData("ng/d", MassFlowUnit.NanogramPerDay)]
        [InlineData("ng/s", MassFlowUnit.NanogramPerSecond)]
        [InlineData("ng/S", MassFlowUnit.NanogramPerSecond)]
        [InlineData("lb/d", MassFlowUnit.PoundPerDay)]
        [InlineData("lb/h", MassFlowUnit.PoundPerHour)]
        [InlineData("lb/min", MassFlowUnit.PoundPerMinute)]
        [InlineData("lb/s", MassFlowUnit.PoundPerSecond)]
        [InlineData("short tn/h", MassFlowUnit.ShortTonPerHour)]
        [InlineData("t/d", MassFlowUnit.TonnePerDay)]
        [InlineData("t/h", MassFlowUnit.TonnePerHour)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MassFlowUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            MassFlowUnit parsedUnit = MassFlow.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg/d", MassFlowUnit.CentigramPerDay)]
        [InlineData("cg/s", MassFlowUnit.CentigramPerSecond)]
        [InlineData("cg/S", MassFlowUnit.CentigramPerSecond)]
        [InlineData("dag/d", MassFlowUnit.DecagramPerDay)]
        [InlineData("dag/s", MassFlowUnit.DecagramPerSecond)]
        [InlineData("dag/S", MassFlowUnit.DecagramPerSecond)]
        [InlineData("dg/d", MassFlowUnit.DecigramPerDay)]
        [InlineData("dg/s", MassFlowUnit.DecigramPerSecond)]
        [InlineData("dg/S", MassFlowUnit.DecigramPerSecond)]
        [InlineData("g/d", MassFlowUnit.GramPerDay)]
        [InlineData("g/h", MassFlowUnit.GramPerHour)]
        [InlineData("g/s", MassFlowUnit.GramPerSecond)]
        [InlineData("g/S", MassFlowUnit.GramPerSecond)]
        [InlineData("hg/d", MassFlowUnit.HectogramPerDay)]
        [InlineData("hg/s", MassFlowUnit.HectogramPerSecond)]
        [InlineData("hg/S", MassFlowUnit.HectogramPerSecond)]
        [InlineData("kg/d", MassFlowUnit.KilogramPerDay)]
        [InlineData("kg/h", MassFlowUnit.KilogramPerHour)]
        [InlineData("kg/min", MassFlowUnit.KilogramPerMinute)]
        [InlineData("kg/s", MassFlowUnit.KilogramPerSecond)]
        [InlineData("kg/S", MassFlowUnit.KilogramPerSecond)]
        [InlineData("Mg/d", MassFlowUnit.MegagramPerDay)]
        [InlineData("Mlb/d", MassFlowUnit.MegapoundPerDay)]
        [InlineData("Mlb/h", MassFlowUnit.MegapoundPerHour)]
        [InlineData("Mlb/min", MassFlowUnit.MegapoundPerMinute)]
        [InlineData("Mlb/s", MassFlowUnit.MegapoundPerSecond)]
        [InlineData("µg/d", MassFlowUnit.MicrogramPerDay)]
        [InlineData("µg/s", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("µg/S", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("mg/d", MassFlowUnit.MilligramPerDay)]
        [InlineData("mg/s", MassFlowUnit.MilligramPerSecond)]
        [InlineData("mg/S", MassFlowUnit.MilligramPerSecond)]
        [InlineData("ng/d", MassFlowUnit.NanogramPerDay)]
        [InlineData("ng/s", MassFlowUnit.NanogramPerSecond)]
        [InlineData("ng/S", MassFlowUnit.NanogramPerSecond)]
        [InlineData("lb/d", MassFlowUnit.PoundPerDay)]
        [InlineData("lb/h", MassFlowUnit.PoundPerHour)]
        [InlineData("lb/min", MassFlowUnit.PoundPerMinute)]
        [InlineData("lb/s", MassFlowUnit.PoundPerSecond)]
        [InlineData("short tn/h", MassFlowUnit.ShortTonPerHour)]
        [InlineData("t/d", MassFlowUnit.TonnePerDay)]
        [InlineData("t/h", MassFlowUnit.TonnePerHour)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MassFlowUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            MassFlowUnit parsedUnit = MassFlow.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/d", MassFlowUnit.CentigramPerDay)]
        [InlineData("en-US", "cg/s", MassFlowUnit.CentigramPerSecond)]
        [InlineData("en-US", "cg/S", MassFlowUnit.CentigramPerSecond)]
        [InlineData("en-US", "dag/d", MassFlowUnit.DecagramPerDay)]
        [InlineData("en-US", "dag/s", MassFlowUnit.DecagramPerSecond)]
        [InlineData("en-US", "dag/S", MassFlowUnit.DecagramPerSecond)]
        [InlineData("en-US", "dg/d", MassFlowUnit.DecigramPerDay)]
        [InlineData("en-US", "dg/s", MassFlowUnit.DecigramPerSecond)]
        [InlineData("en-US", "dg/S", MassFlowUnit.DecigramPerSecond)]
        [InlineData("en-US", "g/d", MassFlowUnit.GramPerDay)]
        [InlineData("en-US", "g/h", MassFlowUnit.GramPerHour)]
        [InlineData("en-US", "g/s", MassFlowUnit.GramPerSecond)]
        [InlineData("en-US", "g/S", MassFlowUnit.GramPerSecond)]
        [InlineData("en-US", "hg/d", MassFlowUnit.HectogramPerDay)]
        [InlineData("en-US", "hg/s", MassFlowUnit.HectogramPerSecond)]
        [InlineData("en-US", "hg/S", MassFlowUnit.HectogramPerSecond)]
        [InlineData("en-US", "kg/d", MassFlowUnit.KilogramPerDay)]
        [InlineData("en-US", "kg/h", MassFlowUnit.KilogramPerHour)]
        [InlineData("en-US", "kg/min", MassFlowUnit.KilogramPerMinute)]
        [InlineData("en-US", "kg/s", MassFlowUnit.KilogramPerSecond)]
        [InlineData("en-US", "kg/S", MassFlowUnit.KilogramPerSecond)]
        [InlineData("en-US", "Mg/d", MassFlowUnit.MegagramPerDay)]
        [InlineData("en-US", "Mlb/d", MassFlowUnit.MegapoundPerDay)]
        [InlineData("en-US", "Mlb/h", MassFlowUnit.MegapoundPerHour)]
        [InlineData("en-US", "Mlb/min", MassFlowUnit.MegapoundPerMinute)]
        [InlineData("en-US", "Mlb/s", MassFlowUnit.MegapoundPerSecond)]
        [InlineData("en-US", "µg/d", MassFlowUnit.MicrogramPerDay)]
        [InlineData("en-US", "µg/s", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("en-US", "µg/S", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("en-US", "mg/d", MassFlowUnit.MilligramPerDay)]
        [InlineData("en-US", "mg/s", MassFlowUnit.MilligramPerSecond)]
        [InlineData("en-US", "mg/S", MassFlowUnit.MilligramPerSecond)]
        [InlineData("en-US", "ng/d", MassFlowUnit.NanogramPerDay)]
        [InlineData("en-US", "ng/s", MassFlowUnit.NanogramPerSecond)]
        [InlineData("en-US", "ng/S", MassFlowUnit.NanogramPerSecond)]
        [InlineData("en-US", "lb/d", MassFlowUnit.PoundPerDay)]
        [InlineData("en-US", "lb/h", MassFlowUnit.PoundPerHour)]
        [InlineData("en-US", "lb/min", MassFlowUnit.PoundPerMinute)]
        [InlineData("en-US", "lb/s", MassFlowUnit.PoundPerSecond)]
        [InlineData("en-US", "short tn/h", MassFlowUnit.ShortTonPerHour)]
        [InlineData("en-US", "t/d", MassFlowUnit.TonnePerDay)]
        [InlineData("en-US", "t/h", MassFlowUnit.TonnePerHour)]
        [InlineData("ru-RU", "кг/ч", MassFlowUnit.KilogramPerHour)]
        [InlineData("ru-RU", "кг/мин", MassFlowUnit.KilogramPerMinute)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, MassFlowUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            MassFlowUnit parsedUnit = MassFlow.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/d", MassFlowUnit.CentigramPerDay)]
        [InlineData("en-US", "cg/s", MassFlowUnit.CentigramPerSecond)]
        [InlineData("en-US", "cg/S", MassFlowUnit.CentigramPerSecond)]
        [InlineData("en-US", "dag/d", MassFlowUnit.DecagramPerDay)]
        [InlineData("en-US", "dag/s", MassFlowUnit.DecagramPerSecond)]
        [InlineData("en-US", "dag/S", MassFlowUnit.DecagramPerSecond)]
        [InlineData("en-US", "dg/d", MassFlowUnit.DecigramPerDay)]
        [InlineData("en-US", "dg/s", MassFlowUnit.DecigramPerSecond)]
        [InlineData("en-US", "dg/S", MassFlowUnit.DecigramPerSecond)]
        [InlineData("en-US", "g/d", MassFlowUnit.GramPerDay)]
        [InlineData("en-US", "g/h", MassFlowUnit.GramPerHour)]
        [InlineData("en-US", "g/s", MassFlowUnit.GramPerSecond)]
        [InlineData("en-US", "g/S", MassFlowUnit.GramPerSecond)]
        [InlineData("en-US", "hg/d", MassFlowUnit.HectogramPerDay)]
        [InlineData("en-US", "hg/s", MassFlowUnit.HectogramPerSecond)]
        [InlineData("en-US", "hg/S", MassFlowUnit.HectogramPerSecond)]
        [InlineData("en-US", "kg/d", MassFlowUnit.KilogramPerDay)]
        [InlineData("en-US", "kg/h", MassFlowUnit.KilogramPerHour)]
        [InlineData("en-US", "kg/min", MassFlowUnit.KilogramPerMinute)]
        [InlineData("en-US", "kg/s", MassFlowUnit.KilogramPerSecond)]
        [InlineData("en-US", "kg/S", MassFlowUnit.KilogramPerSecond)]
        [InlineData("en-US", "Mg/d", MassFlowUnit.MegagramPerDay)]
        [InlineData("en-US", "Mlb/d", MassFlowUnit.MegapoundPerDay)]
        [InlineData("en-US", "Mlb/h", MassFlowUnit.MegapoundPerHour)]
        [InlineData("en-US", "Mlb/min", MassFlowUnit.MegapoundPerMinute)]
        [InlineData("en-US", "Mlb/s", MassFlowUnit.MegapoundPerSecond)]
        [InlineData("en-US", "µg/d", MassFlowUnit.MicrogramPerDay)]
        [InlineData("en-US", "µg/s", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("en-US", "µg/S", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("en-US", "mg/d", MassFlowUnit.MilligramPerDay)]
        [InlineData("en-US", "mg/s", MassFlowUnit.MilligramPerSecond)]
        [InlineData("en-US", "mg/S", MassFlowUnit.MilligramPerSecond)]
        [InlineData("en-US", "ng/d", MassFlowUnit.NanogramPerDay)]
        [InlineData("en-US", "ng/s", MassFlowUnit.NanogramPerSecond)]
        [InlineData("en-US", "ng/S", MassFlowUnit.NanogramPerSecond)]
        [InlineData("en-US", "lb/d", MassFlowUnit.PoundPerDay)]
        [InlineData("en-US", "lb/h", MassFlowUnit.PoundPerHour)]
        [InlineData("en-US", "lb/min", MassFlowUnit.PoundPerMinute)]
        [InlineData("en-US", "lb/s", MassFlowUnit.PoundPerSecond)]
        [InlineData("en-US", "short tn/h", MassFlowUnit.ShortTonPerHour)]
        [InlineData("en-US", "t/d", MassFlowUnit.TonnePerDay)]
        [InlineData("en-US", "t/h", MassFlowUnit.TonnePerHour)]
        [InlineData("ru-RU", "кг/ч", MassFlowUnit.KilogramPerHour)]
        [InlineData("ru-RU", "кг/мин", MassFlowUnit.KilogramPerMinute)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, MassFlowUnit expectedUnit)
        {
            MassFlowUnit parsedUnit = MassFlow.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg/d", MassFlowUnit.CentigramPerDay)]
        [InlineData("cg/s", MassFlowUnit.CentigramPerSecond)]
        [InlineData("cg/S", MassFlowUnit.CentigramPerSecond)]
        [InlineData("dag/d", MassFlowUnit.DecagramPerDay)]
        [InlineData("dag/s", MassFlowUnit.DecagramPerSecond)]
        [InlineData("dag/S", MassFlowUnit.DecagramPerSecond)]
        [InlineData("dg/d", MassFlowUnit.DecigramPerDay)]
        [InlineData("dg/s", MassFlowUnit.DecigramPerSecond)]
        [InlineData("dg/S", MassFlowUnit.DecigramPerSecond)]
        [InlineData("g/d", MassFlowUnit.GramPerDay)]
        [InlineData("g/h", MassFlowUnit.GramPerHour)]
        [InlineData("g/s", MassFlowUnit.GramPerSecond)]
        [InlineData("g/S", MassFlowUnit.GramPerSecond)]
        [InlineData("hg/d", MassFlowUnit.HectogramPerDay)]
        [InlineData("hg/s", MassFlowUnit.HectogramPerSecond)]
        [InlineData("hg/S", MassFlowUnit.HectogramPerSecond)]
        [InlineData("kg/d", MassFlowUnit.KilogramPerDay)]
        [InlineData("kg/h", MassFlowUnit.KilogramPerHour)]
        [InlineData("kg/min", MassFlowUnit.KilogramPerMinute)]
        [InlineData("kg/s", MassFlowUnit.KilogramPerSecond)]
        [InlineData("kg/S", MassFlowUnit.KilogramPerSecond)]
        [InlineData("Mg/d", MassFlowUnit.MegagramPerDay)]
        [InlineData("Mlb/d", MassFlowUnit.MegapoundPerDay)]
        [InlineData("Mlb/h", MassFlowUnit.MegapoundPerHour)]
        [InlineData("Mlb/min", MassFlowUnit.MegapoundPerMinute)]
        [InlineData("Mlb/s", MassFlowUnit.MegapoundPerSecond)]
        [InlineData("µg/d", MassFlowUnit.MicrogramPerDay)]
        [InlineData("µg/s", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("µg/S", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("mg/d", MassFlowUnit.MilligramPerDay)]
        [InlineData("mg/s", MassFlowUnit.MilligramPerSecond)]
        [InlineData("mg/S", MassFlowUnit.MilligramPerSecond)]
        [InlineData("ng/d", MassFlowUnit.NanogramPerDay)]
        [InlineData("ng/s", MassFlowUnit.NanogramPerSecond)]
        [InlineData("ng/S", MassFlowUnit.NanogramPerSecond)]
        [InlineData("lb/d", MassFlowUnit.PoundPerDay)]
        [InlineData("lb/h", MassFlowUnit.PoundPerHour)]
        [InlineData("lb/min", MassFlowUnit.PoundPerMinute)]
        [InlineData("lb/s", MassFlowUnit.PoundPerSecond)]
        [InlineData("short tn/h", MassFlowUnit.ShortTonPerHour)]
        [InlineData("t/d", MassFlowUnit.TonnePerDay)]
        [InlineData("t/h", MassFlowUnit.TonnePerHour)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, MassFlowUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(MassFlow.TryParseUnit(abbreviation, out MassFlowUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cg/d", MassFlowUnit.CentigramPerDay)]
        [InlineData("cg/s", MassFlowUnit.CentigramPerSecond)]
        [InlineData("cg/S", MassFlowUnit.CentigramPerSecond)]
        [InlineData("dag/d", MassFlowUnit.DecagramPerDay)]
        [InlineData("dag/s", MassFlowUnit.DecagramPerSecond)]
        [InlineData("dag/S", MassFlowUnit.DecagramPerSecond)]
        [InlineData("dg/d", MassFlowUnit.DecigramPerDay)]
        [InlineData("dg/s", MassFlowUnit.DecigramPerSecond)]
        [InlineData("dg/S", MassFlowUnit.DecigramPerSecond)]
        [InlineData("g/d", MassFlowUnit.GramPerDay)]
        [InlineData("g/h", MassFlowUnit.GramPerHour)]
        [InlineData("g/s", MassFlowUnit.GramPerSecond)]
        [InlineData("g/S", MassFlowUnit.GramPerSecond)]
        [InlineData("hg/d", MassFlowUnit.HectogramPerDay)]
        [InlineData("hg/s", MassFlowUnit.HectogramPerSecond)]
        [InlineData("hg/S", MassFlowUnit.HectogramPerSecond)]
        [InlineData("kg/d", MassFlowUnit.KilogramPerDay)]
        [InlineData("kg/h", MassFlowUnit.KilogramPerHour)]
        [InlineData("kg/min", MassFlowUnit.KilogramPerMinute)]
        [InlineData("kg/s", MassFlowUnit.KilogramPerSecond)]
        [InlineData("kg/S", MassFlowUnit.KilogramPerSecond)]
        [InlineData("Mg/d", MassFlowUnit.MegagramPerDay)]
        [InlineData("Mlb/d", MassFlowUnit.MegapoundPerDay)]
        [InlineData("Mlb/h", MassFlowUnit.MegapoundPerHour)]
        [InlineData("Mlb/min", MassFlowUnit.MegapoundPerMinute)]
        [InlineData("Mlb/s", MassFlowUnit.MegapoundPerSecond)]
        [InlineData("µg/d", MassFlowUnit.MicrogramPerDay)]
        [InlineData("µg/s", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("µg/S", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("mg/d", MassFlowUnit.MilligramPerDay)]
        [InlineData("mg/s", MassFlowUnit.MilligramPerSecond)]
        [InlineData("mg/S", MassFlowUnit.MilligramPerSecond)]
        [InlineData("ng/d", MassFlowUnit.NanogramPerDay)]
        [InlineData("ng/s", MassFlowUnit.NanogramPerSecond)]
        [InlineData("ng/S", MassFlowUnit.NanogramPerSecond)]
        [InlineData("lb/d", MassFlowUnit.PoundPerDay)]
        [InlineData("lb/h", MassFlowUnit.PoundPerHour)]
        [InlineData("lb/min", MassFlowUnit.PoundPerMinute)]
        [InlineData("lb/s", MassFlowUnit.PoundPerSecond)]
        [InlineData("short tn/h", MassFlowUnit.ShortTonPerHour)]
        [InlineData("t/d", MassFlowUnit.TonnePerDay)]
        [InlineData("t/h", MassFlowUnit.TonnePerHour)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, MassFlowUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(MassFlow.TryParseUnit(abbreviation, out MassFlowUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/d", MassFlowUnit.CentigramPerDay)]
        [InlineData("en-US", "cg/s", MassFlowUnit.CentigramPerSecond)]
        [InlineData("en-US", "cg/S", MassFlowUnit.CentigramPerSecond)]
        [InlineData("en-US", "dag/d", MassFlowUnit.DecagramPerDay)]
        [InlineData("en-US", "dag/s", MassFlowUnit.DecagramPerSecond)]
        [InlineData("en-US", "dag/S", MassFlowUnit.DecagramPerSecond)]
        [InlineData("en-US", "dg/d", MassFlowUnit.DecigramPerDay)]
        [InlineData("en-US", "dg/s", MassFlowUnit.DecigramPerSecond)]
        [InlineData("en-US", "dg/S", MassFlowUnit.DecigramPerSecond)]
        [InlineData("en-US", "g/d", MassFlowUnit.GramPerDay)]
        [InlineData("en-US", "g/h", MassFlowUnit.GramPerHour)]
        [InlineData("en-US", "g/s", MassFlowUnit.GramPerSecond)]
        [InlineData("en-US", "g/S", MassFlowUnit.GramPerSecond)]
        [InlineData("en-US", "hg/d", MassFlowUnit.HectogramPerDay)]
        [InlineData("en-US", "hg/s", MassFlowUnit.HectogramPerSecond)]
        [InlineData("en-US", "hg/S", MassFlowUnit.HectogramPerSecond)]
        [InlineData("en-US", "kg/d", MassFlowUnit.KilogramPerDay)]
        [InlineData("en-US", "kg/h", MassFlowUnit.KilogramPerHour)]
        [InlineData("en-US", "kg/min", MassFlowUnit.KilogramPerMinute)]
        [InlineData("en-US", "kg/s", MassFlowUnit.KilogramPerSecond)]
        [InlineData("en-US", "kg/S", MassFlowUnit.KilogramPerSecond)]
        [InlineData("en-US", "Mg/d", MassFlowUnit.MegagramPerDay)]
        [InlineData("en-US", "Mlb/d", MassFlowUnit.MegapoundPerDay)]
        [InlineData("en-US", "Mlb/h", MassFlowUnit.MegapoundPerHour)]
        [InlineData("en-US", "Mlb/min", MassFlowUnit.MegapoundPerMinute)]
        [InlineData("en-US", "Mlb/s", MassFlowUnit.MegapoundPerSecond)]
        [InlineData("en-US", "µg/d", MassFlowUnit.MicrogramPerDay)]
        [InlineData("en-US", "µg/s", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("en-US", "µg/S", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("en-US", "mg/d", MassFlowUnit.MilligramPerDay)]
        [InlineData("en-US", "mg/s", MassFlowUnit.MilligramPerSecond)]
        [InlineData("en-US", "mg/S", MassFlowUnit.MilligramPerSecond)]
        [InlineData("en-US", "ng/d", MassFlowUnit.NanogramPerDay)]
        [InlineData("en-US", "ng/s", MassFlowUnit.NanogramPerSecond)]
        [InlineData("en-US", "ng/S", MassFlowUnit.NanogramPerSecond)]
        [InlineData("en-US", "lb/d", MassFlowUnit.PoundPerDay)]
        [InlineData("en-US", "lb/h", MassFlowUnit.PoundPerHour)]
        [InlineData("en-US", "lb/min", MassFlowUnit.PoundPerMinute)]
        [InlineData("en-US", "lb/s", MassFlowUnit.PoundPerSecond)]
        [InlineData("en-US", "short tn/h", MassFlowUnit.ShortTonPerHour)]
        [InlineData("en-US", "t/d", MassFlowUnit.TonnePerDay)]
        [InlineData("en-US", "t/h", MassFlowUnit.TonnePerHour)]
        [InlineData("ru-RU", "кг/ч", MassFlowUnit.KilogramPerHour)]
        [InlineData("ru-RU", "кг/мин", MassFlowUnit.KilogramPerMinute)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, MassFlowUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(MassFlow.TryParseUnit(abbreviation, out MassFlowUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cg/d", MassFlowUnit.CentigramPerDay)]
        [InlineData("en-US", "cg/s", MassFlowUnit.CentigramPerSecond)]
        [InlineData("en-US", "cg/S", MassFlowUnit.CentigramPerSecond)]
        [InlineData("en-US", "dag/d", MassFlowUnit.DecagramPerDay)]
        [InlineData("en-US", "dag/s", MassFlowUnit.DecagramPerSecond)]
        [InlineData("en-US", "dag/S", MassFlowUnit.DecagramPerSecond)]
        [InlineData("en-US", "dg/d", MassFlowUnit.DecigramPerDay)]
        [InlineData("en-US", "dg/s", MassFlowUnit.DecigramPerSecond)]
        [InlineData("en-US", "dg/S", MassFlowUnit.DecigramPerSecond)]
        [InlineData("en-US", "g/d", MassFlowUnit.GramPerDay)]
        [InlineData("en-US", "g/h", MassFlowUnit.GramPerHour)]
        [InlineData("en-US", "g/s", MassFlowUnit.GramPerSecond)]
        [InlineData("en-US", "g/S", MassFlowUnit.GramPerSecond)]
        [InlineData("en-US", "hg/d", MassFlowUnit.HectogramPerDay)]
        [InlineData("en-US", "hg/s", MassFlowUnit.HectogramPerSecond)]
        [InlineData("en-US", "hg/S", MassFlowUnit.HectogramPerSecond)]
        [InlineData("en-US", "kg/d", MassFlowUnit.KilogramPerDay)]
        [InlineData("en-US", "kg/h", MassFlowUnit.KilogramPerHour)]
        [InlineData("en-US", "kg/min", MassFlowUnit.KilogramPerMinute)]
        [InlineData("en-US", "kg/s", MassFlowUnit.KilogramPerSecond)]
        [InlineData("en-US", "kg/S", MassFlowUnit.KilogramPerSecond)]
        [InlineData("en-US", "Mg/d", MassFlowUnit.MegagramPerDay)]
        [InlineData("en-US", "Mlb/d", MassFlowUnit.MegapoundPerDay)]
        [InlineData("en-US", "Mlb/h", MassFlowUnit.MegapoundPerHour)]
        [InlineData("en-US", "Mlb/min", MassFlowUnit.MegapoundPerMinute)]
        [InlineData("en-US", "Mlb/s", MassFlowUnit.MegapoundPerSecond)]
        [InlineData("en-US", "µg/d", MassFlowUnit.MicrogramPerDay)]
        [InlineData("en-US", "µg/s", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("en-US", "µg/S", MassFlowUnit.MicrogramPerSecond)]
        [InlineData("en-US", "mg/d", MassFlowUnit.MilligramPerDay)]
        [InlineData("en-US", "mg/s", MassFlowUnit.MilligramPerSecond)]
        [InlineData("en-US", "mg/S", MassFlowUnit.MilligramPerSecond)]
        [InlineData("en-US", "ng/d", MassFlowUnit.NanogramPerDay)]
        [InlineData("en-US", "ng/s", MassFlowUnit.NanogramPerSecond)]
        [InlineData("en-US", "ng/S", MassFlowUnit.NanogramPerSecond)]
        [InlineData("en-US", "lb/d", MassFlowUnit.PoundPerDay)]
        [InlineData("en-US", "lb/h", MassFlowUnit.PoundPerHour)]
        [InlineData("en-US", "lb/min", MassFlowUnit.PoundPerMinute)]
        [InlineData("en-US", "lb/s", MassFlowUnit.PoundPerSecond)]
        [InlineData("en-US", "short tn/h", MassFlowUnit.ShortTonPerHour)]
        [InlineData("en-US", "t/d", MassFlowUnit.TonnePerDay)]
        [InlineData("en-US", "t/h", MassFlowUnit.TonnePerHour)]
        [InlineData("ru-RU", "кг/ч", MassFlowUnit.KilogramPerHour)]
        [InlineData("ru-RU", "кг/мин", MassFlowUnit.KilogramPerMinute)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, MassFlowUnit expectedUnit)
        {
            Assert.True(MassFlow.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out MassFlowUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(MassFlowUnit unit)
        {
            var inBaseUnits = MassFlow.From(1.0, MassFlow.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(MassFlowUnit unit)
        {
            var quantity = MassFlow.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(MassFlowUnit unit)
        {
            Assert.All(MassFlow.Units.Where(u => u != MassFlow.BaseUnit), fromUnit =>
            {
                var quantity = MassFlow.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(MassFlowUnit unit)
        {
            var quantity = default(MassFlow);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(MassFlowUnit unit)
        {
            var quantity = MassFlow.From(3, MassFlow.BaseUnit);
            MassFlow expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<MassFlowUnit> quantityToConvert = quantity;
                IQuantity<MassFlowUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            AssertEx.EqualTolerance(1, MassFlow.FromCentigramsPerDay(grampersecond.CentigramsPerDay).GramsPerSecond, CentigramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromCentigramsPerSecond(grampersecond.CentigramsPerSecond).GramsPerSecond, CentigramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromDecagramsPerDay(grampersecond.DecagramsPerDay).GramsPerSecond, DecagramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromDecagramsPerSecond(grampersecond.DecagramsPerSecond).GramsPerSecond, DecagramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromDecigramsPerDay(grampersecond.DecigramsPerDay).GramsPerSecond, DecigramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromDecigramsPerSecond(grampersecond.DecigramsPerSecond).GramsPerSecond, DecigramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromGramsPerDay(grampersecond.GramsPerDay).GramsPerSecond, GramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromGramsPerHour(grampersecond.GramsPerHour).GramsPerSecond, GramsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromGramsPerSecond(grampersecond.GramsPerSecond).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromHectogramsPerDay(grampersecond.HectogramsPerDay).GramsPerSecond, HectogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromHectogramsPerSecond(grampersecond.HectogramsPerSecond).GramsPerSecond, HectogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromKilogramsPerDay(grampersecond.KilogramsPerDay).GramsPerSecond, KilogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromKilogramsPerHour(grampersecond.KilogramsPerHour).GramsPerSecond, KilogramsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromKilogramsPerMinute(grampersecond.KilogramsPerMinute).GramsPerSecond, KilogramsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromKilogramsPerSecond(grampersecond.KilogramsPerSecond).GramsPerSecond, KilogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMegagramsPerDay(grampersecond.MegagramsPerDay).GramsPerSecond, MegagramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMegapoundsPerDay(grampersecond.MegapoundsPerDay).GramsPerSecond, MegapoundsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMegapoundsPerHour(grampersecond.MegapoundsPerHour).GramsPerSecond, MegapoundsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMegapoundsPerMinute(grampersecond.MegapoundsPerMinute).GramsPerSecond, MegapoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMegapoundsPerSecond(grampersecond.MegapoundsPerSecond).GramsPerSecond, MegapoundsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMicrogramsPerDay(grampersecond.MicrogramsPerDay).GramsPerSecond, MicrogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMicrogramsPerSecond(grampersecond.MicrogramsPerSecond).GramsPerSecond, MicrogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMilligramsPerDay(grampersecond.MilligramsPerDay).GramsPerSecond, MilligramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromMilligramsPerSecond(grampersecond.MilligramsPerSecond).GramsPerSecond, MilligramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromNanogramsPerDay(grampersecond.NanogramsPerDay).GramsPerSecond, NanogramsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromNanogramsPerSecond(grampersecond.NanogramsPerSecond).GramsPerSecond, NanogramsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromPoundsPerDay(grampersecond.PoundsPerDay).GramsPerSecond, PoundsPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromPoundsPerHour(grampersecond.PoundsPerHour).GramsPerSecond, PoundsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromPoundsPerMinute(grampersecond.PoundsPerMinute).GramsPerSecond, PoundsPerMinuteTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromPoundsPerSecond(grampersecond.PoundsPerSecond).GramsPerSecond, PoundsPerSecondTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromShortTonsPerHour(grampersecond.ShortTonsPerHour).GramsPerSecond, ShortTonsPerHourTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromTonnesPerDay(grampersecond.TonnesPerDay).GramsPerSecond, TonnesPerDayTolerance);
            AssertEx.EqualTolerance(1, MassFlow.FromTonnesPerHour(grampersecond.TonnesPerHour).GramsPerSecond, TonnesPerHourTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            MassFlow v = MassFlow.FromGramsPerSecond(1);
            AssertEx.EqualTolerance(-1, -v.GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (MassFlow.FromGramsPerSecond(3)-v).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (v + v).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (v*10).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(10, (10*v).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(2, (MassFlow.FromGramsPerSecond(10)/5).GramsPerSecond, GramsPerSecondTolerance);
            AssertEx.EqualTolerance(2, MassFlow.FromGramsPerSecond(10)/MassFlow.FromGramsPerSecond(5), GramsPerSecondTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            MassFlow oneGramPerSecond = MassFlow.FromGramsPerSecond(1);
            MassFlow twoGramsPerSecond = MassFlow.FromGramsPerSecond(2);

            Assert.True(oneGramPerSecond < twoGramsPerSecond);
            Assert.True(oneGramPerSecond <= twoGramsPerSecond);
            Assert.True(twoGramsPerSecond > oneGramPerSecond);
            Assert.True(twoGramsPerSecond >= oneGramPerSecond);

            Assert.False(oneGramPerSecond > twoGramsPerSecond);
            Assert.False(oneGramPerSecond >= twoGramsPerSecond);
            Assert.False(twoGramsPerSecond < oneGramPerSecond);
            Assert.False(twoGramsPerSecond <= oneGramPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.Equal(0, grampersecond.CompareTo(grampersecond));
            Assert.True(grampersecond.CompareTo(MassFlow.Zero) > 0);
            Assert.True(MassFlow.Zero.CompareTo(grampersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.Throws<ArgumentException>(() => grampersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => grampersecond.CompareTo(null));
        }

        [Theory]
        [InlineData(1, MassFlowUnit.GramPerSecond, 1, MassFlowUnit.GramPerSecond, true)]  // Same value and unit.
        [InlineData(1, MassFlowUnit.GramPerSecond, 2, MassFlowUnit.GramPerSecond, false)] // Different value.
        [InlineData(2, MassFlowUnit.GramPerSecond, 1, MassFlowUnit.CentigramPerDay, false)] // Different value and unit.
        [InlineData(1, MassFlowUnit.GramPerSecond, 1, MassFlowUnit.CentigramPerDay, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, MassFlowUnit unitA, double valueB, MassFlowUnit unitB, bool expectEqual)
        {
            var a = new MassFlow(valueA, unitA);
            var b = new MassFlow(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = MassFlow.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = MassFlow.FromGramsPerSecond(1);
            Assert.True(v.Equals(MassFlow.FromGramsPerSecond(1), GramsPerSecondTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(MassFlow.Zero, GramsPerSecondTolerance, ComparisonType.Relative));
            Assert.True(MassFlow.FromGramsPerSecond(100).Equals(MassFlow.FromGramsPerSecond(120), 0.3, ComparisonType.Relative));
            Assert.False(MassFlow.FromGramsPerSecond(100).Equals(MassFlow.FromGramsPerSecond(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = MassFlow.FromGramsPerSecond(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(MassFlow.FromGramsPerSecond(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.False(grampersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            MassFlow grampersecond = MassFlow.FromGramsPerSecond(1);
            Assert.False(grampersecond.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelpers.GetValues<MassFlowUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(MassFlow.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cg/d", new MassFlow(1, MassFlowUnit.CentigramPerDay).ToString());
            Assert.Equal("1 cg/s", new MassFlow(1, MassFlowUnit.CentigramPerSecond).ToString());
            Assert.Equal("1 dag/d", new MassFlow(1, MassFlowUnit.DecagramPerDay).ToString());
            Assert.Equal("1 dag/s", new MassFlow(1, MassFlowUnit.DecagramPerSecond).ToString());
            Assert.Equal("1 dg/d", new MassFlow(1, MassFlowUnit.DecigramPerDay).ToString());
            Assert.Equal("1 dg/s", new MassFlow(1, MassFlowUnit.DecigramPerSecond).ToString());
            Assert.Equal("1 g/d", new MassFlow(1, MassFlowUnit.GramPerDay).ToString());
            Assert.Equal("1 g/h", new MassFlow(1, MassFlowUnit.GramPerHour).ToString());
            Assert.Equal("1 g/s", new MassFlow(1, MassFlowUnit.GramPerSecond).ToString());
            Assert.Equal("1 hg/d", new MassFlow(1, MassFlowUnit.HectogramPerDay).ToString());
            Assert.Equal("1 hg/s", new MassFlow(1, MassFlowUnit.HectogramPerSecond).ToString());
            Assert.Equal("1 kg/d", new MassFlow(1, MassFlowUnit.KilogramPerDay).ToString());
            Assert.Equal("1 kg/h", new MassFlow(1, MassFlowUnit.KilogramPerHour).ToString());
            Assert.Equal("1 kg/min", new MassFlow(1, MassFlowUnit.KilogramPerMinute).ToString());
            Assert.Equal("1 kg/s", new MassFlow(1, MassFlowUnit.KilogramPerSecond).ToString());
            Assert.Equal("1 Mg/d", new MassFlow(1, MassFlowUnit.MegagramPerDay).ToString());
            Assert.Equal("1 Mlb/d", new MassFlow(1, MassFlowUnit.MegapoundPerDay).ToString());
            Assert.Equal("1 Mlb/h", new MassFlow(1, MassFlowUnit.MegapoundPerHour).ToString());
            Assert.Equal("1 Mlb/min", new MassFlow(1, MassFlowUnit.MegapoundPerMinute).ToString());
            Assert.Equal("1 Mlb/s", new MassFlow(1, MassFlowUnit.MegapoundPerSecond).ToString());
            Assert.Equal("1 µg/d", new MassFlow(1, MassFlowUnit.MicrogramPerDay).ToString());
            Assert.Equal("1 µg/s", new MassFlow(1, MassFlowUnit.MicrogramPerSecond).ToString());
            Assert.Equal("1 mg/d", new MassFlow(1, MassFlowUnit.MilligramPerDay).ToString());
            Assert.Equal("1 mg/s", new MassFlow(1, MassFlowUnit.MilligramPerSecond).ToString());
            Assert.Equal("1 ng/d", new MassFlow(1, MassFlowUnit.NanogramPerDay).ToString());
            Assert.Equal("1 ng/s", new MassFlow(1, MassFlowUnit.NanogramPerSecond).ToString());
            Assert.Equal("1 lb/d", new MassFlow(1, MassFlowUnit.PoundPerDay).ToString());
            Assert.Equal("1 lb/h", new MassFlow(1, MassFlowUnit.PoundPerHour).ToString());
            Assert.Equal("1 lb/min", new MassFlow(1, MassFlowUnit.PoundPerMinute).ToString());
            Assert.Equal("1 lb/s", new MassFlow(1, MassFlowUnit.PoundPerSecond).ToString());
            Assert.Equal("1 short tn/h", new MassFlow(1, MassFlowUnit.ShortTonPerHour).ToString());
            Assert.Equal("1 t/d", new MassFlow(1, MassFlowUnit.TonnePerDay).ToString());
            Assert.Equal("1 t/h", new MassFlow(1, MassFlowUnit.TonnePerHour).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cg/d", new MassFlow(1, MassFlowUnit.CentigramPerDay).ToString(swedishCulture));
            Assert.Equal("1 cg/s", new MassFlow(1, MassFlowUnit.CentigramPerSecond).ToString(swedishCulture));
            Assert.Equal("1 dag/d", new MassFlow(1, MassFlowUnit.DecagramPerDay).ToString(swedishCulture));
            Assert.Equal("1 dag/s", new MassFlow(1, MassFlowUnit.DecagramPerSecond).ToString(swedishCulture));
            Assert.Equal("1 dg/d", new MassFlow(1, MassFlowUnit.DecigramPerDay).ToString(swedishCulture));
            Assert.Equal("1 dg/s", new MassFlow(1, MassFlowUnit.DecigramPerSecond).ToString(swedishCulture));
            Assert.Equal("1 g/d", new MassFlow(1, MassFlowUnit.GramPerDay).ToString(swedishCulture));
            Assert.Equal("1 g/h", new MassFlow(1, MassFlowUnit.GramPerHour).ToString(swedishCulture));
            Assert.Equal("1 g/s", new MassFlow(1, MassFlowUnit.GramPerSecond).ToString(swedishCulture));
            Assert.Equal("1 hg/d", new MassFlow(1, MassFlowUnit.HectogramPerDay).ToString(swedishCulture));
            Assert.Equal("1 hg/s", new MassFlow(1, MassFlowUnit.HectogramPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kg/d", new MassFlow(1, MassFlowUnit.KilogramPerDay).ToString(swedishCulture));
            Assert.Equal("1 kg/h", new MassFlow(1, MassFlowUnit.KilogramPerHour).ToString(swedishCulture));
            Assert.Equal("1 kg/min", new MassFlow(1, MassFlowUnit.KilogramPerMinute).ToString(swedishCulture));
            Assert.Equal("1 kg/s", new MassFlow(1, MassFlowUnit.KilogramPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Mg/d", new MassFlow(1, MassFlowUnit.MegagramPerDay).ToString(swedishCulture));
            Assert.Equal("1 Mlb/d", new MassFlow(1, MassFlowUnit.MegapoundPerDay).ToString(swedishCulture));
            Assert.Equal("1 Mlb/h", new MassFlow(1, MassFlowUnit.MegapoundPerHour).ToString(swedishCulture));
            Assert.Equal("1 Mlb/min", new MassFlow(1, MassFlowUnit.MegapoundPerMinute).ToString(swedishCulture));
            Assert.Equal("1 Mlb/s", new MassFlow(1, MassFlowUnit.MegapoundPerSecond).ToString(swedishCulture));
            Assert.Equal("1 µg/d", new MassFlow(1, MassFlowUnit.MicrogramPerDay).ToString(swedishCulture));
            Assert.Equal("1 µg/s", new MassFlow(1, MassFlowUnit.MicrogramPerSecond).ToString(swedishCulture));
            Assert.Equal("1 mg/d", new MassFlow(1, MassFlowUnit.MilligramPerDay).ToString(swedishCulture));
            Assert.Equal("1 mg/s", new MassFlow(1, MassFlowUnit.MilligramPerSecond).ToString(swedishCulture));
            Assert.Equal("1 ng/d", new MassFlow(1, MassFlowUnit.NanogramPerDay).ToString(swedishCulture));
            Assert.Equal("1 ng/s", new MassFlow(1, MassFlowUnit.NanogramPerSecond).ToString(swedishCulture));
            Assert.Equal("1 lb/d", new MassFlow(1, MassFlowUnit.PoundPerDay).ToString(swedishCulture));
            Assert.Equal("1 lb/h", new MassFlow(1, MassFlowUnit.PoundPerHour).ToString(swedishCulture));
            Assert.Equal("1 lb/min", new MassFlow(1, MassFlowUnit.PoundPerMinute).ToString(swedishCulture));
            Assert.Equal("1 lb/s", new MassFlow(1, MassFlowUnit.PoundPerSecond).ToString(swedishCulture));
            Assert.Equal("1 short tn/h", new MassFlow(1, MassFlowUnit.ShortTonPerHour).ToString(swedishCulture));
            Assert.Equal("1 t/d", new MassFlow(1, MassFlowUnit.TonnePerDay).ToString(swedishCulture));
            Assert.Equal("1 t/h", new MassFlow(1, MassFlowUnit.TonnePerHour).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 g/s", new MassFlow(0.123456, MassFlowUnit.GramPerSecond).ToString("s1"));
            Assert.Equal("0.12 g/s", new MassFlow(0.123456, MassFlowUnit.GramPerSecond).ToString("s2"));
            Assert.Equal("0.123 g/s", new MassFlow(0.123456, MassFlowUnit.GramPerSecond).ToString("s3"));
            Assert.Equal("0.1235 g/s", new MassFlow(0.123456, MassFlowUnit.GramPerSecond).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 g/s", new MassFlow(0.123456, MassFlowUnit.GramPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 g/s", new MassFlow(0.123456, MassFlowUnit.GramPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 g/s", new MassFlow(0.123456, MassFlowUnit.GramPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 g/s", new MassFlow(0.123456, MassFlowUnit.GramPerSecond).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = MassFlow.FromGramsPerSecond(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = MassFlow.FromGramsPerSecond(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = MassFlow.FromGramsPerSecond(1.0);
            Assert.Equal(new {MassFlow.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = MassFlow.FromGramsPerSecond(value);
            Assert.Equal(MassFlow.FromGramsPerSecond(-value), -quantity);
        }
    }
}
