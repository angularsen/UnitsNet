//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Pressure.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PressureTestsBase : QuantityTestsBase
    {
        protected abstract double AtmospheresInOnePascal { get; }
        protected abstract double BarsInOnePascal { get; }
        protected abstract double CentibarsInOnePascal { get; }
        protected abstract double CentimetersOfWaterColumnInOnePascal { get; }
        protected abstract double DecapascalsInOnePascal { get; }
        protected abstract double DecibarsInOnePascal { get; }
        protected abstract double DynesPerSquareCentimeterInOnePascal { get; }
        protected abstract double FeetOfHeadInOnePascal { get; }
        protected abstract double GigapascalsInOnePascal { get; }
        protected abstract double HectopascalsInOnePascal { get; }
        protected abstract double InchesOfMercuryInOnePascal { get; }
        protected abstract double InchesOfWaterColumnInOnePascal { get; }
        protected abstract double KilobarsInOnePascal { get; }
        protected abstract double KilogramsForcePerSquareCentimeterInOnePascal { get; }
        protected abstract double KilogramsForcePerSquareMeterInOnePascal { get; }
        protected abstract double KilogramsForcePerSquareMillimeterInOnePascal { get; }
        protected abstract double KilonewtonsPerSquareCentimeterInOnePascal { get; }
        protected abstract double KilonewtonsPerSquareMeterInOnePascal { get; }
        protected abstract double KilonewtonsPerSquareMillimeterInOnePascal { get; }
        protected abstract double KilopascalsInOnePascal { get; }
        protected abstract double KilopoundsForcePerSquareFootInOnePascal { get; }
        protected abstract double KilopoundsForcePerSquareInchInOnePascal { get; }
        protected abstract double KilopoundsForcePerSquareMilInOnePascal { get; }
        protected abstract double MegabarsInOnePascal { get; }
        protected abstract double MeganewtonsPerSquareMeterInOnePascal { get; }
        protected abstract double MegapascalsInOnePascal { get; }
        protected abstract double MetersOfHeadInOnePascal { get; }
        protected abstract double MetersOfWaterColumnInOnePascal { get; }
        protected abstract double MicrobarsInOnePascal { get; }
        protected abstract double MicropascalsInOnePascal { get; }
        protected abstract double MillibarsInOnePascal { get; }
        protected abstract double MillimetersOfMercuryInOnePascal { get; }
        protected abstract double MillimetersOfWaterColumnInOnePascal { get; }
        protected abstract double MillipascalsInOnePascal { get; }
        protected abstract double MillitorrsInOnePascal { get; }
        protected abstract double NewtonsPerSquareCentimeterInOnePascal { get; }
        protected abstract double NewtonsPerSquareMeterInOnePascal { get; }
        protected abstract double NewtonsPerSquareMillimeterInOnePascal { get; }
        protected abstract double PascalsInOnePascal { get; }
        protected abstract double PoundsForcePerSquareFootInOnePascal { get; }
        protected abstract double PoundsForcePerSquareInchInOnePascal { get; }
        protected abstract double PoundsForcePerSquareMilInOnePascal { get; }
        protected abstract double PoundsPerInchSecondSquaredInOnePascal { get; }
        protected abstract double TechnicalAtmospheresInOnePascal { get; }
        protected abstract double TonnesForcePerSquareCentimeterInOnePascal { get; }
        protected abstract double TonnesForcePerSquareMeterInOnePascal { get; }
        protected abstract double TonnesForcePerSquareMillimeterInOnePascal { get; }
        protected abstract double TorrsInOnePascal { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AtmospheresTolerance { get { return 1e-5; } }
        protected virtual double BarsTolerance { get { return 1e-5; } }
        protected virtual double CentibarsTolerance { get { return 1e-5; } }
        protected virtual double CentimetersOfWaterColumnTolerance { get { return 1e-5; } }
        protected virtual double DecapascalsTolerance { get { return 1e-5; } }
        protected virtual double DecibarsTolerance { get { return 1e-5; } }
        protected virtual double DynesPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double FeetOfHeadTolerance { get { return 1e-5; } }
        protected virtual double GigapascalsTolerance { get { return 1e-5; } }
        protected virtual double HectopascalsTolerance { get { return 1e-5; } }
        protected virtual double InchesOfMercuryTolerance { get { return 1e-5; } }
        protected virtual double InchesOfWaterColumnTolerance { get { return 1e-5; } }
        protected virtual double KilobarsTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilopascalsTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareInchTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerSquareMilTolerance { get { return 1e-5; } }
        protected virtual double MegabarsTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double MegapascalsTolerance { get { return 1e-5; } }
        protected virtual double MetersOfHeadTolerance { get { return 1e-5; } }
        protected virtual double MetersOfWaterColumnTolerance { get { return 1e-5; } }
        protected virtual double MicrobarsTolerance { get { return 1e-5; } }
        protected virtual double MicropascalsTolerance { get { return 1e-5; } }
        protected virtual double MillibarsTolerance { get { return 1e-5; } }
        protected virtual double MillimetersOfMercuryTolerance { get { return 1e-5; } }
        protected virtual double MillimetersOfWaterColumnTolerance { get { return 1e-5; } }
        protected virtual double MillipascalsTolerance { get { return 1e-5; } }
        protected virtual double MillitorrsTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double PascalsTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareInchTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerSquareMilTolerance { get { return 1e-5; } }
        protected virtual double PoundsPerInchSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double TechnicalAtmospheresTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerSquareCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerSquareMeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerSquareMillimeterTolerance { get { return 1e-5; } }
        protected virtual double TorrsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(PressureUnit unit)
        {
            return unit switch
            {
                PressureUnit.Atmosphere => (AtmospheresInOnePascal, AtmospheresTolerance),
                PressureUnit.Bar => (BarsInOnePascal, BarsTolerance),
                PressureUnit.Centibar => (CentibarsInOnePascal, CentibarsTolerance),
                PressureUnit.CentimeterOfWaterColumn => (CentimetersOfWaterColumnInOnePascal, CentimetersOfWaterColumnTolerance),
                PressureUnit.Decapascal => (DecapascalsInOnePascal, DecapascalsTolerance),
                PressureUnit.Decibar => (DecibarsInOnePascal, DecibarsTolerance),
                PressureUnit.DynePerSquareCentimeter => (DynesPerSquareCentimeterInOnePascal, DynesPerSquareCentimeterTolerance),
                PressureUnit.FootOfHead => (FeetOfHeadInOnePascal, FeetOfHeadTolerance),
                PressureUnit.Gigapascal => (GigapascalsInOnePascal, GigapascalsTolerance),
                PressureUnit.Hectopascal => (HectopascalsInOnePascal, HectopascalsTolerance),
                PressureUnit.InchOfMercury => (InchesOfMercuryInOnePascal, InchesOfMercuryTolerance),
                PressureUnit.InchOfWaterColumn => (InchesOfWaterColumnInOnePascal, InchesOfWaterColumnTolerance),
                PressureUnit.Kilobar => (KilobarsInOnePascal, KilobarsTolerance),
                PressureUnit.KilogramForcePerSquareCentimeter => (KilogramsForcePerSquareCentimeterInOnePascal, KilogramsForcePerSquareCentimeterTolerance),
                PressureUnit.KilogramForcePerSquareMeter => (KilogramsForcePerSquareMeterInOnePascal, KilogramsForcePerSquareMeterTolerance),
                PressureUnit.KilogramForcePerSquareMillimeter => (KilogramsForcePerSquareMillimeterInOnePascal, KilogramsForcePerSquareMillimeterTolerance),
                PressureUnit.KilonewtonPerSquareCentimeter => (KilonewtonsPerSquareCentimeterInOnePascal, KilonewtonsPerSquareCentimeterTolerance),
                PressureUnit.KilonewtonPerSquareMeter => (KilonewtonsPerSquareMeterInOnePascal, KilonewtonsPerSquareMeterTolerance),
                PressureUnit.KilonewtonPerSquareMillimeter => (KilonewtonsPerSquareMillimeterInOnePascal, KilonewtonsPerSquareMillimeterTolerance),
                PressureUnit.Kilopascal => (KilopascalsInOnePascal, KilopascalsTolerance),
                PressureUnit.KilopoundForcePerSquareFoot => (KilopoundsForcePerSquareFootInOnePascal, KilopoundsForcePerSquareFootTolerance),
                PressureUnit.KilopoundForcePerSquareInch => (KilopoundsForcePerSquareInchInOnePascal, KilopoundsForcePerSquareInchTolerance),
                PressureUnit.KilopoundForcePerSquareMil => (KilopoundsForcePerSquareMilInOnePascal, KilopoundsForcePerSquareMilTolerance),
                PressureUnit.Megabar => (MegabarsInOnePascal, MegabarsTolerance),
                PressureUnit.MeganewtonPerSquareMeter => (MeganewtonsPerSquareMeterInOnePascal, MeganewtonsPerSquareMeterTolerance),
                PressureUnit.Megapascal => (MegapascalsInOnePascal, MegapascalsTolerance),
                PressureUnit.MeterOfHead => (MetersOfHeadInOnePascal, MetersOfHeadTolerance),
                PressureUnit.MeterOfWaterColumn => (MetersOfWaterColumnInOnePascal, MetersOfWaterColumnTolerance),
                PressureUnit.Microbar => (MicrobarsInOnePascal, MicrobarsTolerance),
                PressureUnit.Micropascal => (MicropascalsInOnePascal, MicropascalsTolerance),
                PressureUnit.Millibar => (MillibarsInOnePascal, MillibarsTolerance),
                PressureUnit.MillimeterOfMercury => (MillimetersOfMercuryInOnePascal, MillimetersOfMercuryTolerance),
                PressureUnit.MillimeterOfWaterColumn => (MillimetersOfWaterColumnInOnePascal, MillimetersOfWaterColumnTolerance),
                PressureUnit.Millipascal => (MillipascalsInOnePascal, MillipascalsTolerance),
                PressureUnit.Millitorr => (MillitorrsInOnePascal, MillitorrsTolerance),
                PressureUnit.NewtonPerSquareCentimeter => (NewtonsPerSquareCentimeterInOnePascal, NewtonsPerSquareCentimeterTolerance),
                PressureUnit.NewtonPerSquareMeter => (NewtonsPerSquareMeterInOnePascal, NewtonsPerSquareMeterTolerance),
                PressureUnit.NewtonPerSquareMillimeter => (NewtonsPerSquareMillimeterInOnePascal, NewtonsPerSquareMillimeterTolerance),
                PressureUnit.Pascal => (PascalsInOnePascal, PascalsTolerance),
                PressureUnit.PoundForcePerSquareFoot => (PoundsForcePerSquareFootInOnePascal, PoundsForcePerSquareFootTolerance),
                PressureUnit.PoundForcePerSquareInch => (PoundsForcePerSquareInchInOnePascal, PoundsForcePerSquareInchTolerance),
                PressureUnit.PoundForcePerSquareMil => (PoundsForcePerSquareMilInOnePascal, PoundsForcePerSquareMilTolerance),
                PressureUnit.PoundPerInchSecondSquared => (PoundsPerInchSecondSquaredInOnePascal, PoundsPerInchSecondSquaredTolerance),
                PressureUnit.TechnicalAtmosphere => (TechnicalAtmospheresInOnePascal, TechnicalAtmospheresTolerance),
                PressureUnit.TonneForcePerSquareCentimeter => (TonnesForcePerSquareCentimeterInOnePascal, TonnesForcePerSquareCentimeterTolerance),
                PressureUnit.TonneForcePerSquareMeter => (TonnesForcePerSquareMeterInOnePascal, TonnesForcePerSquareMeterTolerance),
                PressureUnit.TonneForcePerSquareMillimeter => (TonnesForcePerSquareMillimeterInOnePascal, TonnesForcePerSquareMillimeterTolerance),
                PressureUnit.Torr => (TorrsInOnePascal, TorrsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { PressureUnit.Atmosphere },
            new object[] { PressureUnit.Bar },
            new object[] { PressureUnit.Centibar },
            new object[] { PressureUnit.CentimeterOfWaterColumn },
            new object[] { PressureUnit.Decapascal },
            new object[] { PressureUnit.Decibar },
            new object[] { PressureUnit.DynePerSquareCentimeter },
            new object[] { PressureUnit.FootOfHead },
            new object[] { PressureUnit.Gigapascal },
            new object[] { PressureUnit.Hectopascal },
            new object[] { PressureUnit.InchOfMercury },
            new object[] { PressureUnit.InchOfWaterColumn },
            new object[] { PressureUnit.Kilobar },
            new object[] { PressureUnit.KilogramForcePerSquareCentimeter },
            new object[] { PressureUnit.KilogramForcePerSquareMeter },
            new object[] { PressureUnit.KilogramForcePerSquareMillimeter },
            new object[] { PressureUnit.KilonewtonPerSquareCentimeter },
            new object[] { PressureUnit.KilonewtonPerSquareMeter },
            new object[] { PressureUnit.KilonewtonPerSquareMillimeter },
            new object[] { PressureUnit.Kilopascal },
            new object[] { PressureUnit.KilopoundForcePerSquareFoot },
            new object[] { PressureUnit.KilopoundForcePerSquareInch },
            new object[] { PressureUnit.KilopoundForcePerSquareMil },
            new object[] { PressureUnit.Megabar },
            new object[] { PressureUnit.MeganewtonPerSquareMeter },
            new object[] { PressureUnit.Megapascal },
            new object[] { PressureUnit.MeterOfHead },
            new object[] { PressureUnit.MeterOfWaterColumn },
            new object[] { PressureUnit.Microbar },
            new object[] { PressureUnit.Micropascal },
            new object[] { PressureUnit.Millibar },
            new object[] { PressureUnit.MillimeterOfMercury },
            new object[] { PressureUnit.MillimeterOfWaterColumn },
            new object[] { PressureUnit.Millipascal },
            new object[] { PressureUnit.Millitorr },
            new object[] { PressureUnit.NewtonPerSquareCentimeter },
            new object[] { PressureUnit.NewtonPerSquareMeter },
            new object[] { PressureUnit.NewtonPerSquareMillimeter },
            new object[] { PressureUnit.Pascal },
            new object[] { PressureUnit.PoundForcePerSquareFoot },
            new object[] { PressureUnit.PoundForcePerSquareInch },
            new object[] { PressureUnit.PoundForcePerSquareMil },
            new object[] { PressureUnit.PoundPerInchSecondSquared },
            new object[] { PressureUnit.TechnicalAtmosphere },
            new object[] { PressureUnit.TonneForcePerSquareCentimeter },
            new object[] { PressureUnit.TonneForcePerSquareMeter },
            new object[] { PressureUnit.TonneForcePerSquareMillimeter },
            new object[] { PressureUnit.Torr },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Pressure();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(PressureUnit.Pascal, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Pressure(double.PositiveInfinity, PressureUnit.Pascal));
            var exception2 = Record.Exception(() => new Pressure(double.NegativeInfinity, PressureUnit.Pascal));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Pressure(double.NaN, PressureUnit.Pascal));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Pressure(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Pressure(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Pressure(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Pressure_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            PressureUnit[] unitsOrderedByName = EnumHelper.GetValues<PressureUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Pressure(1, PressureUnit.Pascal);

            QuantityInfo<Pressure, PressureUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Pressure", quantityInfo.Name);
            Assert.Equal(Pressure.Zero, quantityInfo.Zero);
            Assert.Equal(Pressure.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Pressure.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<PressureUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void PressureInfo_CreateWithCustomUnitInfos()
        {
            PressureUnit[] expectedUnits = [PressureUnit.Pascal];

            Pressure.PressureInfo quantityInfo = Pressure.PressureInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Pressure", quantityInfo.Name);
            Assert.Equal(Pressure.Zero, quantityInfo.Zero);
            Assert.Equal(Pressure.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void PascalToPressureUnits()
        {
            Pressure pascal = Pressure.FromPascals(1);
            AssertEx.EqualTolerance(AtmospheresInOnePascal, pascal.Atmospheres, AtmospheresTolerance);
            AssertEx.EqualTolerance(BarsInOnePascal, pascal.Bars, BarsTolerance);
            AssertEx.EqualTolerance(CentibarsInOnePascal, pascal.Centibars, CentibarsTolerance);
            AssertEx.EqualTolerance(CentimetersOfWaterColumnInOnePascal, pascal.CentimetersOfWaterColumn, CentimetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(DecapascalsInOnePascal, pascal.Decapascals, DecapascalsTolerance);
            AssertEx.EqualTolerance(DecibarsInOnePascal, pascal.Decibars, DecibarsTolerance);
            AssertEx.EqualTolerance(DynesPerSquareCentimeterInOnePascal, pascal.DynesPerSquareCentimeter, DynesPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(FeetOfHeadInOnePascal, pascal.FeetOfHead, FeetOfHeadTolerance);
            AssertEx.EqualTolerance(GigapascalsInOnePascal, pascal.Gigapascals, GigapascalsTolerance);
            AssertEx.EqualTolerance(HectopascalsInOnePascal, pascal.Hectopascals, HectopascalsTolerance);
            AssertEx.EqualTolerance(InchesOfMercuryInOnePascal, pascal.InchesOfMercury, InchesOfMercuryTolerance);
            AssertEx.EqualTolerance(InchesOfWaterColumnInOnePascal, pascal.InchesOfWaterColumn, InchesOfWaterColumnTolerance);
            AssertEx.EqualTolerance(KilobarsInOnePascal, pascal.Kilobars, KilobarsTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareCentimeterInOnePascal, pascal.KilogramsForcePerSquareCentimeter, KilogramsForcePerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareMeterInOnePascal, pascal.KilogramsForcePerSquareMeter, KilogramsForcePerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareMillimeterInOnePascal, pascal.KilogramsForcePerSquareMillimeter, KilogramsForcePerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareCentimeterInOnePascal, pascal.KilonewtonsPerSquareCentimeter, KilonewtonsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareMeterInOnePascal, pascal.KilonewtonsPerSquareMeter, KilonewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareMillimeterInOnePascal, pascal.KilonewtonsPerSquareMillimeter, KilonewtonsPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilopascalsInOnePascal, pascal.Kilopascals, KilopascalsTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareFootInOnePascal, pascal.KilopoundsForcePerSquareFoot, KilopoundsForcePerSquareFootTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareInchInOnePascal, pascal.KilopoundsForcePerSquareInch, KilopoundsForcePerSquareInchTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareMilInOnePascal, pascal.KilopoundsForcePerSquareMil, KilopoundsForcePerSquareMilTolerance);
            AssertEx.EqualTolerance(MegabarsInOnePascal, pascal.Megabars, MegabarsTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerSquareMeterInOnePascal, pascal.MeganewtonsPerSquareMeter, MeganewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegapascalsInOnePascal, pascal.Megapascals, MegapascalsTolerance);
            AssertEx.EqualTolerance(MetersOfHeadInOnePascal, pascal.MetersOfHead, MetersOfHeadTolerance);
            AssertEx.EqualTolerance(MetersOfWaterColumnInOnePascal, pascal.MetersOfWaterColumn, MetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(MicrobarsInOnePascal, pascal.Microbars, MicrobarsTolerance);
            AssertEx.EqualTolerance(MicropascalsInOnePascal, pascal.Micropascals, MicropascalsTolerance);
            AssertEx.EqualTolerance(MillibarsInOnePascal, pascal.Millibars, MillibarsTolerance);
            AssertEx.EqualTolerance(MillimetersOfMercuryInOnePascal, pascal.MillimetersOfMercury, MillimetersOfMercuryTolerance);
            AssertEx.EqualTolerance(MillimetersOfWaterColumnInOnePascal, pascal.MillimetersOfWaterColumn, MillimetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(MillipascalsInOnePascal, pascal.Millipascals, MillipascalsTolerance);
            AssertEx.EqualTolerance(MillitorrsInOnePascal, pascal.Millitorrs, MillitorrsTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareCentimeterInOnePascal, pascal.NewtonsPerSquareCentimeter, NewtonsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareMeterInOnePascal, pascal.NewtonsPerSquareMeter, NewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareMillimeterInOnePascal, pascal.NewtonsPerSquareMillimeter, NewtonsPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(PascalsInOnePascal, pascal.Pascals, PascalsTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareFootInOnePascal, pascal.PoundsForcePerSquareFoot, PoundsForcePerSquareFootTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareInchInOnePascal, pascal.PoundsForcePerSquareInch, PoundsForcePerSquareInchTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareMilInOnePascal, pascal.PoundsForcePerSquareMil, PoundsForcePerSquareMilTolerance);
            AssertEx.EqualTolerance(PoundsPerInchSecondSquaredInOnePascal, pascal.PoundsPerInchSecondSquared, PoundsPerInchSecondSquaredTolerance);
            AssertEx.EqualTolerance(TechnicalAtmospheresInOnePascal, pascal.TechnicalAtmospheres, TechnicalAtmospheresTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareCentimeterInOnePascal, pascal.TonnesForcePerSquareCentimeter, TonnesForcePerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareMeterInOnePascal, pascal.TonnesForcePerSquareMeter, TonnesForcePerSquareMeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareMillimeterInOnePascal, pascal.TonnesForcePerSquareMillimeter, TonnesForcePerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(TorrsInOnePascal, pascal.Torrs, TorrsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<PressureUnit>(), unit =>
            {
                var quantity = Pressure.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromPascals_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Pressure.FromPascals(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Pressure.FromPascals(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromPascals_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Pressure.FromPascals(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var pascal = Pressure.FromPascals(1);
            AssertEx.EqualTolerance(AtmospheresInOnePascal, pascal.As(PressureUnit.Atmosphere), AtmospheresTolerance);
            AssertEx.EqualTolerance(BarsInOnePascal, pascal.As(PressureUnit.Bar), BarsTolerance);
            AssertEx.EqualTolerance(CentibarsInOnePascal, pascal.As(PressureUnit.Centibar), CentibarsTolerance);
            AssertEx.EqualTolerance(CentimetersOfWaterColumnInOnePascal, pascal.As(PressureUnit.CentimeterOfWaterColumn), CentimetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(DecapascalsInOnePascal, pascal.As(PressureUnit.Decapascal), DecapascalsTolerance);
            AssertEx.EqualTolerance(DecibarsInOnePascal, pascal.As(PressureUnit.Decibar), DecibarsTolerance);
            AssertEx.EqualTolerance(DynesPerSquareCentimeterInOnePascal, pascal.As(PressureUnit.DynePerSquareCentimeter), DynesPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(FeetOfHeadInOnePascal, pascal.As(PressureUnit.FootOfHead), FeetOfHeadTolerance);
            AssertEx.EqualTolerance(GigapascalsInOnePascal, pascal.As(PressureUnit.Gigapascal), GigapascalsTolerance);
            AssertEx.EqualTolerance(HectopascalsInOnePascal, pascal.As(PressureUnit.Hectopascal), HectopascalsTolerance);
            AssertEx.EqualTolerance(InchesOfMercuryInOnePascal, pascal.As(PressureUnit.InchOfMercury), InchesOfMercuryTolerance);
            AssertEx.EqualTolerance(InchesOfWaterColumnInOnePascal, pascal.As(PressureUnit.InchOfWaterColumn), InchesOfWaterColumnTolerance);
            AssertEx.EqualTolerance(KilobarsInOnePascal, pascal.As(PressureUnit.Kilobar), KilobarsTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareCentimeterInOnePascal, pascal.As(PressureUnit.KilogramForcePerSquareCentimeter), KilogramsForcePerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareMeterInOnePascal, pascal.As(PressureUnit.KilogramForcePerSquareMeter), KilogramsForcePerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerSquareMillimeterInOnePascal, pascal.As(PressureUnit.KilogramForcePerSquareMillimeter), KilogramsForcePerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareCentimeterInOnePascal, pascal.As(PressureUnit.KilonewtonPerSquareCentimeter), KilonewtonsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareMeterInOnePascal, pascal.As(PressureUnit.KilonewtonPerSquareMeter), KilonewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerSquareMillimeterInOnePascal, pascal.As(PressureUnit.KilonewtonPerSquareMillimeter), KilonewtonsPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(KilopascalsInOnePascal, pascal.As(PressureUnit.Kilopascal), KilopascalsTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareFootInOnePascal, pascal.As(PressureUnit.KilopoundForcePerSquareFoot), KilopoundsForcePerSquareFootTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareInchInOnePascal, pascal.As(PressureUnit.KilopoundForcePerSquareInch), KilopoundsForcePerSquareInchTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerSquareMilInOnePascal, pascal.As(PressureUnit.KilopoundForcePerSquareMil), KilopoundsForcePerSquareMilTolerance);
            AssertEx.EqualTolerance(MegabarsInOnePascal, pascal.As(PressureUnit.Megabar), MegabarsTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerSquareMeterInOnePascal, pascal.As(PressureUnit.MeganewtonPerSquareMeter), MeganewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(MegapascalsInOnePascal, pascal.As(PressureUnit.Megapascal), MegapascalsTolerance);
            AssertEx.EqualTolerance(MetersOfHeadInOnePascal, pascal.As(PressureUnit.MeterOfHead), MetersOfHeadTolerance);
            AssertEx.EqualTolerance(MetersOfWaterColumnInOnePascal, pascal.As(PressureUnit.MeterOfWaterColumn), MetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(MicrobarsInOnePascal, pascal.As(PressureUnit.Microbar), MicrobarsTolerance);
            AssertEx.EqualTolerance(MicropascalsInOnePascal, pascal.As(PressureUnit.Micropascal), MicropascalsTolerance);
            AssertEx.EqualTolerance(MillibarsInOnePascal, pascal.As(PressureUnit.Millibar), MillibarsTolerance);
            AssertEx.EqualTolerance(MillimetersOfMercuryInOnePascal, pascal.As(PressureUnit.MillimeterOfMercury), MillimetersOfMercuryTolerance);
            AssertEx.EqualTolerance(MillimetersOfWaterColumnInOnePascal, pascal.As(PressureUnit.MillimeterOfWaterColumn), MillimetersOfWaterColumnTolerance);
            AssertEx.EqualTolerance(MillipascalsInOnePascal, pascal.As(PressureUnit.Millipascal), MillipascalsTolerance);
            AssertEx.EqualTolerance(MillitorrsInOnePascal, pascal.As(PressureUnit.Millitorr), MillitorrsTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareCentimeterInOnePascal, pascal.As(PressureUnit.NewtonPerSquareCentimeter), NewtonsPerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareMeterInOnePascal, pascal.As(PressureUnit.NewtonPerSquareMeter), NewtonsPerSquareMeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerSquareMillimeterInOnePascal, pascal.As(PressureUnit.NewtonPerSquareMillimeter), NewtonsPerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(PascalsInOnePascal, pascal.As(PressureUnit.Pascal), PascalsTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareFootInOnePascal, pascal.As(PressureUnit.PoundForcePerSquareFoot), PoundsForcePerSquareFootTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareInchInOnePascal, pascal.As(PressureUnit.PoundForcePerSquareInch), PoundsForcePerSquareInchTolerance);
            AssertEx.EqualTolerance(PoundsForcePerSquareMilInOnePascal, pascal.As(PressureUnit.PoundForcePerSquareMil), PoundsForcePerSquareMilTolerance);
            AssertEx.EqualTolerance(PoundsPerInchSecondSquaredInOnePascal, pascal.As(PressureUnit.PoundPerInchSecondSquared), PoundsPerInchSecondSquaredTolerance);
            AssertEx.EqualTolerance(TechnicalAtmospheresInOnePascal, pascal.As(PressureUnit.TechnicalAtmosphere), TechnicalAtmospheresTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareCentimeterInOnePascal, pascal.As(PressureUnit.TonneForcePerSquareCentimeter), TonnesForcePerSquareCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareMeterInOnePascal, pascal.As(PressureUnit.TonneForcePerSquareMeter), TonnesForcePerSquareMeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerSquareMillimeterInOnePascal, pascal.As(PressureUnit.TonneForcePerSquareMillimeter), TonnesForcePerSquareMillimeterTolerance);
            AssertEx.EqualTolerance(TorrsInOnePascal, pascal.As(PressureUnit.Torr), TorrsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Pressure.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
            var expectedValue = quantity.As(Pressure.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
            var expectedUnit = Pressure.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Pressure quantityToConvert = quantity;

                Pressure convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<PressureUnit> quantityToConvert = quantity;

                IQuantity<PressureUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<PressureUnit> quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<PressureUnit> quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Pressure(value: 1, unit: Pressure.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 atm", PressureUnit.Atmosphere, 4.2)]
        [InlineData("en-US", "4.2 bar", PressureUnit.Bar, 4.2)]
        [InlineData("en-US", "4.2 cbar", PressureUnit.Centibar, 4.2)]
        [InlineData("en-US", "4.2 cmH₂O", PressureUnit.CentimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 cmH2O", PressureUnit.CentimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 cm wc", PressureUnit.CentimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 cm wg", PressureUnit.CentimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 daPa", PressureUnit.Decapascal, 4.2)]
        [InlineData("en-US", "4.2 dbar", PressureUnit.Decibar, 4.2)]
        [InlineData("en-US", "4.2 dyn/cm²", PressureUnit.DynePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 ft of head", PressureUnit.FootOfHead, 4.2)]
        [InlineData("en-US", "4.2 GPa", PressureUnit.Gigapascal, 4.2)]
        [InlineData("en-US", "4.2 hPa", PressureUnit.Hectopascal, 4.2)]
        [InlineData("en-US", "4.2 inHg", PressureUnit.InchOfMercury, 4.2)]
        [InlineData("en-US", "4.2 inH2O", PressureUnit.InchOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 inch wc", PressureUnit.InchOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 wc", PressureUnit.InchOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 kbar", PressureUnit.Kilobar, 4.2)]
        [InlineData("en-US", "4.2 kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/m²", PressureUnit.KilogramForcePerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kN/m²", PressureUnit.KilonewtonPerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kPa", PressureUnit.Kilopascal, 4.2)]
        [InlineData("en-US", "4.2 kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 ksi", PressureUnit.KilopoundForcePerSquareInch, 4.2)]
        [InlineData("en-US", "4.2 kipf/in²", PressureUnit.KilopoundForcePerSquareInch, 4.2)]
        [InlineData("en-US", "4.2 kipf/mil²", PressureUnit.KilopoundForcePerSquareMil, 4.2)]
        [InlineData("en-US", "4.2 Mbar", PressureUnit.Megabar, 4.2)]
        [InlineData("en-US", "4.2 MN/m²", PressureUnit.MeganewtonPerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 MPa", PressureUnit.Megapascal, 4.2)]
        [InlineData("en-US", "4.2 m of head", PressureUnit.MeterOfHead, 4.2)]
        [InlineData("en-US", "4.2 mH₂O", PressureUnit.MeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mH2O", PressureUnit.MeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 m wc", PressureUnit.MeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 m wg", PressureUnit.MeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 µbar", PressureUnit.Microbar, 4.2)]
        [InlineData("en-US", "4.2 µPa", PressureUnit.Micropascal, 4.2)]
        [InlineData("en-US", "4.2 mbar", PressureUnit.Millibar, 4.2)]
        [InlineData("en-US", "4.2 mmHg", PressureUnit.MillimeterOfMercury, 4.2)]
        [InlineData("en-US", "4.2 mmH₂O", PressureUnit.MillimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mmH2O", PressureUnit.MillimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mm wc", PressureUnit.MillimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mm wg", PressureUnit.MillimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mPa", PressureUnit.Millipascal, 4.2)]
        [InlineData("en-US", "4.2 mtorr", PressureUnit.Millitorr, 4.2)]
        [InlineData("en-US", "4.2 N/cm²", PressureUnit.NewtonPerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 N/m²", PressureUnit.NewtonPerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 N/mm²", PressureUnit.NewtonPerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 Pa", PressureUnit.Pascal, 4.2)]
        [InlineData("en-US", "4.2 lb/ft²", PressureUnit.PoundForcePerSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 psi", PressureUnit.PoundForcePerSquareInch, 4.2)]
        [InlineData("en-US", "4.2 lb/in²", PressureUnit.PoundForcePerSquareInch, 4.2)]
        [InlineData("en-US", "4.2 lb/mil²", PressureUnit.PoundForcePerSquareMil, 4.2)]
        [InlineData("en-US", "4.2 lbs/mil²", PressureUnit.PoundForcePerSquareMil, 4.2)]
        [InlineData("en-US", "4.2 lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 at", PressureUnit.TechnicalAtmosphere, 4.2)]
        [InlineData("en-US", "4.2 tf/cm²", PressureUnit.TonneForcePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 tf/m²", PressureUnit.TonneForcePerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 tf/mm²", PressureUnit.TonneForcePerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 torr", PressureUnit.Torr, 4.2)]
        [InlineData("ru-RU", "4,2 атм", PressureUnit.Atmosphere, 4.2)]
        [InlineData("ru-RU", "4,2 бар", PressureUnit.Bar, 4.2)]
        [InlineData("ru-RU", "4,2 сбар", PressureUnit.Centibar, 4.2)]
        [InlineData("ru-RU", "4,2 даПа", PressureUnit.Decapascal, 4.2)]
        [InlineData("ru-RU", "4,2 дбар", PressureUnit.Decibar, 4.2)]
        [InlineData("ru-RU", "4,2 ГПа", PressureUnit.Gigapascal, 4.2)]
        [InlineData("ru-RU", "4,2 гПа", PressureUnit.Hectopascal, 4.2)]
        [InlineData("ru-RU", "4,2 кбар", PressureUnit.Kilobar, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/см²", PressureUnit.KilogramForcePerSquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/м²", PressureUnit.KilogramForcePerSquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/мм²", PressureUnit.KilogramForcePerSquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кН/см²", PressureUnit.KilonewtonPerSquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кН/м²", PressureUnit.KilonewtonPerSquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 кН/мм²", PressureUnit.KilonewtonPerSquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кПа", PressureUnit.Kilopascal, 4.2)]
        [InlineData("ru-RU", "4,2 ksi", PressureUnit.KilopoundForcePerSquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 kipf/in²", PressureUnit.KilopoundForcePerSquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 Мбар", PressureUnit.Megabar, 4.2)]
        [InlineData("ru-RU", "4,2 МН/м²", PressureUnit.MeganewtonPerSquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 МПа", PressureUnit.Megapascal, 4.2)]
        [InlineData("ru-RU", "4,2 мкбар", PressureUnit.Microbar, 4.2)]
        [InlineData("ru-RU", "4,2 мкПа", PressureUnit.Micropascal, 4.2)]
        [InlineData("ru-RU", "4,2 мбар", PressureUnit.Millibar, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст.", PressureUnit.MillimeterOfMercury, 4.2)]
        [InlineData("ru-RU", "4,2 мПа", PressureUnit.Millipascal, 4.2)]
        [InlineData("ru-RU", "4,2 мторр", PressureUnit.Millitorr, 4.2)]
        [InlineData("ru-RU", "4,2 Н/см²", PressureUnit.NewtonPerSquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Н/м²", PressureUnit.NewtonPerSquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 Н/мм²", PressureUnit.NewtonPerSquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па", PressureUnit.Pascal, 4.2)]
        [InlineData("ru-RU", "4,2 psi", PressureUnit.PoundForcePerSquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 lb/in²", PressureUnit.PoundForcePerSquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 ат", PressureUnit.TechnicalAtmosphere, 4.2)]
        [InlineData("ru-RU", "4,2 торр", PressureUnit.Torr, 4.2)]
        public void Parse(string culture, string quantityString, PressureUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Pressure.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 atm", PressureUnit.Atmosphere, 4.2)]
        [InlineData("en-US", "4.2 bar", PressureUnit.Bar, 4.2)]
        [InlineData("en-US", "4.2 cbar", PressureUnit.Centibar, 4.2)]
        [InlineData("en-US", "4.2 cmH₂O", PressureUnit.CentimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 cmH2O", PressureUnit.CentimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 cm wc", PressureUnit.CentimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 cm wg", PressureUnit.CentimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 daPa", PressureUnit.Decapascal, 4.2)]
        [InlineData("en-US", "4.2 dbar", PressureUnit.Decibar, 4.2)]
        [InlineData("en-US", "4.2 dyn/cm²", PressureUnit.DynePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 ft of head", PressureUnit.FootOfHead, 4.2)]
        [InlineData("en-US", "4.2 GPa", PressureUnit.Gigapascal, 4.2)]
        [InlineData("en-US", "4.2 hPa", PressureUnit.Hectopascal, 4.2)]
        [InlineData("en-US", "4.2 inHg", PressureUnit.InchOfMercury, 4.2)]
        [InlineData("en-US", "4.2 inH2O", PressureUnit.InchOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 inch wc", PressureUnit.InchOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 wc", PressureUnit.InchOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 kbar", PressureUnit.Kilobar, 4.2)]
        [InlineData("en-US", "4.2 kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/m²", PressureUnit.KilogramForcePerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kN/m²", PressureUnit.KilonewtonPerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kPa", PressureUnit.Kilopascal, 4.2)]
        [InlineData("en-US", "4.2 kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 ksi", PressureUnit.KilopoundForcePerSquareInch, 4.2)]
        [InlineData("en-US", "4.2 kipf/in²", PressureUnit.KilopoundForcePerSquareInch, 4.2)]
        [InlineData("en-US", "4.2 kipf/mil²", PressureUnit.KilopoundForcePerSquareMil, 4.2)]
        [InlineData("en-US", "4.2 Mbar", PressureUnit.Megabar, 4.2)]
        [InlineData("en-US", "4.2 MN/m²", PressureUnit.MeganewtonPerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 MPa", PressureUnit.Megapascal, 4.2)]
        [InlineData("en-US", "4.2 m of head", PressureUnit.MeterOfHead, 4.2)]
        [InlineData("en-US", "4.2 mH₂O", PressureUnit.MeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mH2O", PressureUnit.MeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 m wc", PressureUnit.MeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 m wg", PressureUnit.MeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 µbar", PressureUnit.Microbar, 4.2)]
        [InlineData("en-US", "4.2 µPa", PressureUnit.Micropascal, 4.2)]
        [InlineData("en-US", "4.2 mbar", PressureUnit.Millibar, 4.2)]
        [InlineData("en-US", "4.2 mmHg", PressureUnit.MillimeterOfMercury, 4.2)]
        [InlineData("en-US", "4.2 mmH₂O", PressureUnit.MillimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mmH2O", PressureUnit.MillimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mm wc", PressureUnit.MillimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mm wg", PressureUnit.MillimeterOfWaterColumn, 4.2)]
        [InlineData("en-US", "4.2 mPa", PressureUnit.Millipascal, 4.2)]
        [InlineData("en-US", "4.2 mtorr", PressureUnit.Millitorr, 4.2)]
        [InlineData("en-US", "4.2 N/cm²", PressureUnit.NewtonPerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 N/m²", PressureUnit.NewtonPerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 N/mm²", PressureUnit.NewtonPerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 Pa", PressureUnit.Pascal, 4.2)]
        [InlineData("en-US", "4.2 lb/ft²", PressureUnit.PoundForcePerSquareFoot, 4.2)]
        [InlineData("en-US", "4.2 psi", PressureUnit.PoundForcePerSquareInch, 4.2)]
        [InlineData("en-US", "4.2 lb/in²", PressureUnit.PoundForcePerSquareInch, 4.2)]
        [InlineData("en-US", "4.2 lb/mil²", PressureUnit.PoundForcePerSquareMil, 4.2)]
        [InlineData("en-US", "4.2 lbs/mil²", PressureUnit.PoundForcePerSquareMil, 4.2)]
        [InlineData("en-US", "4.2 lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 at", PressureUnit.TechnicalAtmosphere, 4.2)]
        [InlineData("en-US", "4.2 tf/cm²", PressureUnit.TonneForcePerSquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 tf/m²", PressureUnit.TonneForcePerSquareMeter, 4.2)]
        [InlineData("en-US", "4.2 tf/mm²", PressureUnit.TonneForcePerSquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 torr", PressureUnit.Torr, 4.2)]
        [InlineData("ru-RU", "4,2 атм", PressureUnit.Atmosphere, 4.2)]
        [InlineData("ru-RU", "4,2 бар", PressureUnit.Bar, 4.2)]
        [InlineData("ru-RU", "4,2 сбар", PressureUnit.Centibar, 4.2)]
        [InlineData("ru-RU", "4,2 даПа", PressureUnit.Decapascal, 4.2)]
        [InlineData("ru-RU", "4,2 дбар", PressureUnit.Decibar, 4.2)]
        [InlineData("ru-RU", "4,2 ГПа", PressureUnit.Gigapascal, 4.2)]
        [InlineData("ru-RU", "4,2 гПа", PressureUnit.Hectopascal, 4.2)]
        [InlineData("ru-RU", "4,2 кбар", PressureUnit.Kilobar, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/см²", PressureUnit.KilogramForcePerSquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/м²", PressureUnit.KilogramForcePerSquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/мм²", PressureUnit.KilogramForcePerSquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кН/см²", PressureUnit.KilonewtonPerSquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кН/м²", PressureUnit.KilonewtonPerSquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 кН/мм²", PressureUnit.KilonewtonPerSquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кПа", PressureUnit.Kilopascal, 4.2)]
        [InlineData("ru-RU", "4,2 ksi", PressureUnit.KilopoundForcePerSquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 kipf/in²", PressureUnit.KilopoundForcePerSquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 Мбар", PressureUnit.Megabar, 4.2)]
        [InlineData("ru-RU", "4,2 МН/м²", PressureUnit.MeganewtonPerSquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 МПа", PressureUnit.Megapascal, 4.2)]
        [InlineData("ru-RU", "4,2 мкбар", PressureUnit.Microbar, 4.2)]
        [InlineData("ru-RU", "4,2 мкПа", PressureUnit.Micropascal, 4.2)]
        [InlineData("ru-RU", "4,2 мбар", PressureUnit.Millibar, 4.2)]
        [InlineData("ru-RU", "4,2 мм рт.ст.", PressureUnit.MillimeterOfMercury, 4.2)]
        [InlineData("ru-RU", "4,2 мПа", PressureUnit.Millipascal, 4.2)]
        [InlineData("ru-RU", "4,2 мторр", PressureUnit.Millitorr, 4.2)]
        [InlineData("ru-RU", "4,2 Н/см²", PressureUnit.NewtonPerSquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Н/м²", PressureUnit.NewtonPerSquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 Н/мм²", PressureUnit.NewtonPerSquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 Па", PressureUnit.Pascal, 4.2)]
        [InlineData("ru-RU", "4,2 psi", PressureUnit.PoundForcePerSquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 lb/in²", PressureUnit.PoundForcePerSquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 ат", PressureUnit.TechnicalAtmosphere, 4.2)]
        [InlineData("ru-RU", "4,2 торр", PressureUnit.Torr, 4.2)]
        public void TryParse(string culture, string quantityString, PressureUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Pressure.TryParse(quantityString, out Pressure parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("atm", PressureUnit.Atmosphere)]
        [InlineData("bar", PressureUnit.Bar)]
        [InlineData("cbar", PressureUnit.Centibar)]
        [InlineData("cmH₂O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cmH2O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cm wc", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cm wg", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("daPa", PressureUnit.Decapascal)]
        [InlineData("dbar", PressureUnit.Decibar)]
        [InlineData("dyn/cm²", PressureUnit.DynePerSquareCentimeter)]
        [InlineData("ft of head", PressureUnit.FootOfHead)]
        [InlineData("GPa", PressureUnit.Gigapascal)]
        [InlineData("hPa", PressureUnit.Hectopascal)]
        [InlineData("inHg", PressureUnit.InchOfMercury)]
        [InlineData("inH2O", PressureUnit.InchOfWaterColumn)]
        [InlineData("inch wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("kbar", PressureUnit.Kilobar)]
        [InlineData("kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("kgf/m²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("kN/m²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("kPa", PressureUnit.Kilopascal)]
        [InlineData("kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot)]
        [InlineData("ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("kipf/mil²", PressureUnit.KilopoundForcePerSquareMil)]
        [InlineData("Mbar", PressureUnit.Megabar)]
        [InlineData("MN/m²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("MPa", PressureUnit.Megapascal)]
        [InlineData("m of head", PressureUnit.MeterOfHead)]
        [InlineData("mH₂O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("mH2O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("m wc", PressureUnit.MeterOfWaterColumn)]
        [InlineData("m wg", PressureUnit.MeterOfWaterColumn)]
        [InlineData("µbar", PressureUnit.Microbar)]
        [InlineData("µPa", PressureUnit.Micropascal)]
        [InlineData("mbar", PressureUnit.Millibar)]
        [InlineData("mmHg", PressureUnit.MillimeterOfMercury)]
        [InlineData("mmH₂O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mmH2O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mm wc", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mm wg", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mPa", PressureUnit.Millipascal)]
        [InlineData("mtorr", PressureUnit.Millitorr)]
        [InlineData("N/cm²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("N/m²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("N/mm²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("Pa", PressureUnit.Pascal)]
        [InlineData("lb/ft²", PressureUnit.PoundForcePerSquareFoot)]
        [InlineData("psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("lb/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("lbs/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("at", PressureUnit.TechnicalAtmosphere)]
        [InlineData("tf/cm²", PressureUnit.TonneForcePerSquareCentimeter)]
        [InlineData("tf/m²", PressureUnit.TonneForcePerSquareMeter)]
        [InlineData("tf/mm²", PressureUnit.TonneForcePerSquareMillimeter)]
        [InlineData("torr", PressureUnit.Torr)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PressureUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            PressureUnit parsedUnit = Pressure.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("atm", PressureUnit.Atmosphere)]
        [InlineData("bar", PressureUnit.Bar)]
        [InlineData("cbar", PressureUnit.Centibar)]
        [InlineData("cmH₂O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cmH2O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cm wc", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cm wg", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("daPa", PressureUnit.Decapascal)]
        [InlineData("dbar", PressureUnit.Decibar)]
        [InlineData("dyn/cm²", PressureUnit.DynePerSquareCentimeter)]
        [InlineData("ft of head", PressureUnit.FootOfHead)]
        [InlineData("GPa", PressureUnit.Gigapascal)]
        [InlineData("hPa", PressureUnit.Hectopascal)]
        [InlineData("inHg", PressureUnit.InchOfMercury)]
        [InlineData("inH2O", PressureUnit.InchOfWaterColumn)]
        [InlineData("inch wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("kbar", PressureUnit.Kilobar)]
        [InlineData("kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("kgf/m²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("kN/m²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("kPa", PressureUnit.Kilopascal)]
        [InlineData("kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot)]
        [InlineData("ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("kipf/mil²", PressureUnit.KilopoundForcePerSquareMil)]
        [InlineData("Mbar", PressureUnit.Megabar)]
        [InlineData("MN/m²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("MPa", PressureUnit.Megapascal)]
        [InlineData("m of head", PressureUnit.MeterOfHead)]
        [InlineData("mH₂O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("mH2O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("m wc", PressureUnit.MeterOfWaterColumn)]
        [InlineData("m wg", PressureUnit.MeterOfWaterColumn)]
        [InlineData("µbar", PressureUnit.Microbar)]
        [InlineData("µPa", PressureUnit.Micropascal)]
        [InlineData("mbar", PressureUnit.Millibar)]
        [InlineData("mmHg", PressureUnit.MillimeterOfMercury)]
        [InlineData("mmH₂O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mmH2O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mm wc", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mm wg", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mPa", PressureUnit.Millipascal)]
        [InlineData("mtorr", PressureUnit.Millitorr)]
        [InlineData("N/cm²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("N/m²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("N/mm²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("Pa", PressureUnit.Pascal)]
        [InlineData("lb/ft²", PressureUnit.PoundForcePerSquareFoot)]
        [InlineData("psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("lb/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("lbs/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("at", PressureUnit.TechnicalAtmosphere)]
        [InlineData("tf/cm²", PressureUnit.TonneForcePerSquareCentimeter)]
        [InlineData("tf/m²", PressureUnit.TonneForcePerSquareMeter)]
        [InlineData("tf/mm²", PressureUnit.TonneForcePerSquareMillimeter)]
        [InlineData("torr", PressureUnit.Torr)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PressureUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            PressureUnit parsedUnit = Pressure.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm", PressureUnit.Atmosphere)]
        [InlineData("en-US", "bar", PressureUnit.Bar)]
        [InlineData("en-US", "cbar", PressureUnit.Centibar)]
        [InlineData("en-US", "cmH₂O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cmH2O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cm wc", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cm wg", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "daPa", PressureUnit.Decapascal)]
        [InlineData("en-US", "dbar", PressureUnit.Decibar)]
        [InlineData("en-US", "dyn/cm²", PressureUnit.DynePerSquareCentimeter)]
        [InlineData("en-US", "ft of head", PressureUnit.FootOfHead)]
        [InlineData("en-US", "GPa", PressureUnit.Gigapascal)]
        [InlineData("en-US", "hPa", PressureUnit.Hectopascal)]
        [InlineData("en-US", "inHg", PressureUnit.InchOfMercury)]
        [InlineData("en-US", "inH2O", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "inch wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "kbar", PressureUnit.Kilobar)]
        [InlineData("en-US", "kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("en-US", "kgf/m²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("en-US", "kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("en-US", "kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("en-US", "kN/m²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("en-US", "kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("en-US", "kPa", PressureUnit.Kilopascal)]
        [InlineData("en-US", "kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot)]
        [InlineData("en-US", "ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("en-US", "kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("en-US", "kipf/mil²", PressureUnit.KilopoundForcePerSquareMil)]
        [InlineData("en-US", "Mbar", PressureUnit.Megabar)]
        [InlineData("en-US", "MN/m²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("en-US", "MPa", PressureUnit.Megapascal)]
        [InlineData("en-US", "m of head", PressureUnit.MeterOfHead)]
        [InlineData("en-US", "mH₂O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "mH2O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "m wc", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "m wg", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "µbar", PressureUnit.Microbar)]
        [InlineData("en-US", "µPa", PressureUnit.Micropascal)]
        [InlineData("en-US", "mbar", PressureUnit.Millibar)]
        [InlineData("en-US", "mmHg", PressureUnit.MillimeterOfMercury)]
        [InlineData("en-US", "mmH₂O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mmH2O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mm wc", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mm wg", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mPa", PressureUnit.Millipascal)]
        [InlineData("en-US", "mtorr", PressureUnit.Millitorr)]
        [InlineData("en-US", "N/cm²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("en-US", "N/m²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("en-US", "N/mm²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("en-US", "Pa", PressureUnit.Pascal)]
        [InlineData("en-US", "lb/ft²", PressureUnit.PoundForcePerSquareFoot)]
        [InlineData("en-US", "psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("en-US", "lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("en-US", "lb/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("en-US", "lbs/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("en-US", "lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("en-US", "lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("en-US", "at", PressureUnit.TechnicalAtmosphere)]
        [InlineData("en-US", "tf/cm²", PressureUnit.TonneForcePerSquareCentimeter)]
        [InlineData("en-US", "tf/m²", PressureUnit.TonneForcePerSquareMeter)]
        [InlineData("en-US", "tf/mm²", PressureUnit.TonneForcePerSquareMillimeter)]
        [InlineData("en-US", "torr", PressureUnit.Torr)]
        [InlineData("ru-RU", "атм", PressureUnit.Atmosphere)]
        [InlineData("ru-RU", "бар", PressureUnit.Bar)]
        [InlineData("ru-RU", "сбар", PressureUnit.Centibar)]
        [InlineData("ru-RU", "даПа", PressureUnit.Decapascal)]
        [InlineData("ru-RU", "дбар", PressureUnit.Decibar)]
        [InlineData("ru-RU", "ГПа", PressureUnit.Gigapascal)]
        [InlineData("ru-RU", "гПа", PressureUnit.Hectopascal)]
        [InlineData("ru-RU", "кбар", PressureUnit.Kilobar)]
        [InlineData("ru-RU", "кгс/см²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("ru-RU", "кгс/м²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("ru-RU", "кгс/мм²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("ru-RU", "кН/см²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("ru-RU", "кН/м²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("ru-RU", "кН/мм²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("ru-RU", "кПа", PressureUnit.Kilopascal)]
        [InlineData("ru-RU", "ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("ru-RU", "kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("ru-RU", "Мбар", PressureUnit.Megabar)]
        [InlineData("ru-RU", "МН/м²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("ru-RU", "МПа", PressureUnit.Megapascal)]
        [InlineData("ru-RU", "мкбар", PressureUnit.Microbar)]
        [InlineData("ru-RU", "мкПа", PressureUnit.Micropascal)]
        [InlineData("ru-RU", "мбар", PressureUnit.Millibar)]
        [InlineData("ru-RU", "мм рт.ст.", PressureUnit.MillimeterOfMercury)]
        [InlineData("ru-RU", "мПа", PressureUnit.Millipascal)]
        [InlineData("ru-RU", "мторр", PressureUnit.Millitorr)]
        [InlineData("ru-RU", "Н/см²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("ru-RU", "Н/м²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("ru-RU", "Н/мм²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("ru-RU", "Па", PressureUnit.Pascal)]
        [InlineData("ru-RU", "psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("ru-RU", "lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("ru-RU", "ат", PressureUnit.TechnicalAtmosphere)]
        [InlineData("ru-RU", "торр", PressureUnit.Torr)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, PressureUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            PressureUnit parsedUnit = Pressure.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm", PressureUnit.Atmosphere)]
        [InlineData("en-US", "bar", PressureUnit.Bar)]
        [InlineData("en-US", "cbar", PressureUnit.Centibar)]
        [InlineData("en-US", "cmH₂O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cmH2O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cm wc", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cm wg", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "daPa", PressureUnit.Decapascal)]
        [InlineData("en-US", "dbar", PressureUnit.Decibar)]
        [InlineData("en-US", "dyn/cm²", PressureUnit.DynePerSquareCentimeter)]
        [InlineData("en-US", "ft of head", PressureUnit.FootOfHead)]
        [InlineData("en-US", "GPa", PressureUnit.Gigapascal)]
        [InlineData("en-US", "hPa", PressureUnit.Hectopascal)]
        [InlineData("en-US", "inHg", PressureUnit.InchOfMercury)]
        [InlineData("en-US", "inH2O", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "inch wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "kbar", PressureUnit.Kilobar)]
        [InlineData("en-US", "kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("en-US", "kgf/m²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("en-US", "kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("en-US", "kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("en-US", "kN/m²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("en-US", "kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("en-US", "kPa", PressureUnit.Kilopascal)]
        [InlineData("en-US", "kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot)]
        [InlineData("en-US", "ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("en-US", "kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("en-US", "kipf/mil²", PressureUnit.KilopoundForcePerSquareMil)]
        [InlineData("en-US", "Mbar", PressureUnit.Megabar)]
        [InlineData("en-US", "MN/m²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("en-US", "MPa", PressureUnit.Megapascal)]
        [InlineData("en-US", "m of head", PressureUnit.MeterOfHead)]
        [InlineData("en-US", "mH₂O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "mH2O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "m wc", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "m wg", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "µbar", PressureUnit.Microbar)]
        [InlineData("en-US", "µPa", PressureUnit.Micropascal)]
        [InlineData("en-US", "mbar", PressureUnit.Millibar)]
        [InlineData("en-US", "mmHg", PressureUnit.MillimeterOfMercury)]
        [InlineData("en-US", "mmH₂O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mmH2O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mm wc", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mm wg", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mPa", PressureUnit.Millipascal)]
        [InlineData("en-US", "mtorr", PressureUnit.Millitorr)]
        [InlineData("en-US", "N/cm²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("en-US", "N/m²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("en-US", "N/mm²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("en-US", "Pa", PressureUnit.Pascal)]
        [InlineData("en-US", "lb/ft²", PressureUnit.PoundForcePerSquareFoot)]
        [InlineData("en-US", "psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("en-US", "lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("en-US", "lb/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("en-US", "lbs/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("en-US", "lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("en-US", "lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("en-US", "at", PressureUnit.TechnicalAtmosphere)]
        [InlineData("en-US", "tf/cm²", PressureUnit.TonneForcePerSquareCentimeter)]
        [InlineData("en-US", "tf/m²", PressureUnit.TonneForcePerSquareMeter)]
        [InlineData("en-US", "tf/mm²", PressureUnit.TonneForcePerSquareMillimeter)]
        [InlineData("en-US", "torr", PressureUnit.Torr)]
        [InlineData("ru-RU", "атм", PressureUnit.Atmosphere)]
        [InlineData("ru-RU", "бар", PressureUnit.Bar)]
        [InlineData("ru-RU", "сбар", PressureUnit.Centibar)]
        [InlineData("ru-RU", "даПа", PressureUnit.Decapascal)]
        [InlineData("ru-RU", "дбар", PressureUnit.Decibar)]
        [InlineData("ru-RU", "ГПа", PressureUnit.Gigapascal)]
        [InlineData("ru-RU", "гПа", PressureUnit.Hectopascal)]
        [InlineData("ru-RU", "кбар", PressureUnit.Kilobar)]
        [InlineData("ru-RU", "кгс/см²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("ru-RU", "кгс/м²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("ru-RU", "кгс/мм²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("ru-RU", "кН/см²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("ru-RU", "кН/м²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("ru-RU", "кН/мм²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("ru-RU", "кПа", PressureUnit.Kilopascal)]
        [InlineData("ru-RU", "ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("ru-RU", "kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("ru-RU", "Мбар", PressureUnit.Megabar)]
        [InlineData("ru-RU", "МН/м²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("ru-RU", "МПа", PressureUnit.Megapascal)]
        [InlineData("ru-RU", "мкбар", PressureUnit.Microbar)]
        [InlineData("ru-RU", "мкПа", PressureUnit.Micropascal)]
        [InlineData("ru-RU", "мбар", PressureUnit.Millibar)]
        [InlineData("ru-RU", "мм рт.ст.", PressureUnit.MillimeterOfMercury)]
        [InlineData("ru-RU", "мПа", PressureUnit.Millipascal)]
        [InlineData("ru-RU", "мторр", PressureUnit.Millitorr)]
        [InlineData("ru-RU", "Н/см²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("ru-RU", "Н/м²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("ru-RU", "Н/мм²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("ru-RU", "Па", PressureUnit.Pascal)]
        [InlineData("ru-RU", "psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("ru-RU", "lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("ru-RU", "ат", PressureUnit.TechnicalAtmosphere)]
        [InlineData("ru-RU", "торр", PressureUnit.Torr)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, PressureUnit expectedUnit)
        {
            PressureUnit parsedUnit = Pressure.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("atm", PressureUnit.Atmosphere)]
        [InlineData("bar", PressureUnit.Bar)]
        [InlineData("cbar", PressureUnit.Centibar)]
        [InlineData("cmH₂O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cmH2O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cm wc", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cm wg", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("daPa", PressureUnit.Decapascal)]
        [InlineData("dbar", PressureUnit.Decibar)]
        [InlineData("dyn/cm²", PressureUnit.DynePerSquareCentimeter)]
        [InlineData("ft of head", PressureUnit.FootOfHead)]
        [InlineData("GPa", PressureUnit.Gigapascal)]
        [InlineData("hPa", PressureUnit.Hectopascal)]
        [InlineData("inHg", PressureUnit.InchOfMercury)]
        [InlineData("inH2O", PressureUnit.InchOfWaterColumn)]
        [InlineData("inch wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("kbar", PressureUnit.Kilobar)]
        [InlineData("kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("kgf/m²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("kN/m²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("kPa", PressureUnit.Kilopascal)]
        [InlineData("kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot)]
        [InlineData("ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("kipf/mil²", PressureUnit.KilopoundForcePerSquareMil)]
        [InlineData("Mbar", PressureUnit.Megabar)]
        [InlineData("MN/m²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("MPa", PressureUnit.Megapascal)]
        [InlineData("m of head", PressureUnit.MeterOfHead)]
        [InlineData("mH₂O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("mH2O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("m wc", PressureUnit.MeterOfWaterColumn)]
        [InlineData("m wg", PressureUnit.MeterOfWaterColumn)]
        [InlineData("µbar", PressureUnit.Microbar)]
        [InlineData("µPa", PressureUnit.Micropascal)]
        [InlineData("mbar", PressureUnit.Millibar)]
        [InlineData("mmHg", PressureUnit.MillimeterOfMercury)]
        [InlineData("mmH₂O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mmH2O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mm wc", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mm wg", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mPa", PressureUnit.Millipascal)]
        [InlineData("mtorr", PressureUnit.Millitorr)]
        [InlineData("N/cm²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("N/m²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("N/mm²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("Pa", PressureUnit.Pascal)]
        [InlineData("lb/ft²", PressureUnit.PoundForcePerSquareFoot)]
        [InlineData("psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("lb/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("lbs/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("at", PressureUnit.TechnicalAtmosphere)]
        [InlineData("tf/cm²", PressureUnit.TonneForcePerSquareCentimeter)]
        [InlineData("tf/m²", PressureUnit.TonneForcePerSquareMeter)]
        [InlineData("tf/mm²", PressureUnit.TonneForcePerSquareMillimeter)]
        [InlineData("torr", PressureUnit.Torr)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PressureUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Pressure.TryParseUnit(abbreviation, out PressureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("atm", PressureUnit.Atmosphere)]
        [InlineData("bar", PressureUnit.Bar)]
        [InlineData("cbar", PressureUnit.Centibar)]
        [InlineData("cmH₂O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cmH2O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cm wc", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("cm wg", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("daPa", PressureUnit.Decapascal)]
        [InlineData("dbar", PressureUnit.Decibar)]
        [InlineData("dyn/cm²", PressureUnit.DynePerSquareCentimeter)]
        [InlineData("ft of head", PressureUnit.FootOfHead)]
        [InlineData("GPa", PressureUnit.Gigapascal)]
        [InlineData("hPa", PressureUnit.Hectopascal)]
        [InlineData("inHg", PressureUnit.InchOfMercury)]
        [InlineData("inH2O", PressureUnit.InchOfWaterColumn)]
        [InlineData("inch wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("kbar", PressureUnit.Kilobar)]
        [InlineData("kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("kgf/m²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("kN/m²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("kPa", PressureUnit.Kilopascal)]
        [InlineData("kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot)]
        [InlineData("ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("kipf/mil²", PressureUnit.KilopoundForcePerSquareMil)]
        [InlineData("Mbar", PressureUnit.Megabar)]
        [InlineData("MN/m²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("MPa", PressureUnit.Megapascal)]
        [InlineData("m of head", PressureUnit.MeterOfHead)]
        [InlineData("mH₂O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("mH2O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("m wc", PressureUnit.MeterOfWaterColumn)]
        [InlineData("m wg", PressureUnit.MeterOfWaterColumn)]
        [InlineData("µbar", PressureUnit.Microbar)]
        [InlineData("µPa", PressureUnit.Micropascal)]
        [InlineData("mbar", PressureUnit.Millibar)]
        [InlineData("mmHg", PressureUnit.MillimeterOfMercury)]
        [InlineData("mmH₂O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mmH2O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mm wc", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mm wg", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("mPa", PressureUnit.Millipascal)]
        [InlineData("mtorr", PressureUnit.Millitorr)]
        [InlineData("N/cm²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("N/m²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("N/mm²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("Pa", PressureUnit.Pascal)]
        [InlineData("lb/ft²", PressureUnit.PoundForcePerSquareFoot)]
        [InlineData("psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("lb/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("lbs/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("at", PressureUnit.TechnicalAtmosphere)]
        [InlineData("tf/cm²", PressureUnit.TonneForcePerSquareCentimeter)]
        [InlineData("tf/m²", PressureUnit.TonneForcePerSquareMeter)]
        [InlineData("tf/mm²", PressureUnit.TonneForcePerSquareMillimeter)]
        [InlineData("torr", PressureUnit.Torr)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PressureUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Pressure.TryParseUnit(abbreviation, out PressureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm", PressureUnit.Atmosphere)]
        [InlineData("en-US", "bar", PressureUnit.Bar)]
        [InlineData("en-US", "cbar", PressureUnit.Centibar)]
        [InlineData("en-US", "cmH₂O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cmH2O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cm wc", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cm wg", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "daPa", PressureUnit.Decapascal)]
        [InlineData("en-US", "dbar", PressureUnit.Decibar)]
        [InlineData("en-US", "dyn/cm²", PressureUnit.DynePerSquareCentimeter)]
        [InlineData("en-US", "ft of head", PressureUnit.FootOfHead)]
        [InlineData("en-US", "GPa", PressureUnit.Gigapascal)]
        [InlineData("en-US", "hPa", PressureUnit.Hectopascal)]
        [InlineData("en-US", "inHg", PressureUnit.InchOfMercury)]
        [InlineData("en-US", "inH2O", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "inch wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "kbar", PressureUnit.Kilobar)]
        [InlineData("en-US", "kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("en-US", "kgf/m²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("en-US", "kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("en-US", "kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("en-US", "kN/m²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("en-US", "kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("en-US", "kPa", PressureUnit.Kilopascal)]
        [InlineData("en-US", "kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot)]
        [InlineData("en-US", "ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("en-US", "kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("en-US", "kipf/mil²", PressureUnit.KilopoundForcePerSquareMil)]
        [InlineData("en-US", "Mbar", PressureUnit.Megabar)]
        [InlineData("en-US", "MN/m²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("en-US", "MPa", PressureUnit.Megapascal)]
        [InlineData("en-US", "m of head", PressureUnit.MeterOfHead)]
        [InlineData("en-US", "mH₂O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "mH2O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "m wc", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "m wg", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "µbar", PressureUnit.Microbar)]
        [InlineData("en-US", "µPa", PressureUnit.Micropascal)]
        [InlineData("en-US", "mbar", PressureUnit.Millibar)]
        [InlineData("en-US", "mmHg", PressureUnit.MillimeterOfMercury)]
        [InlineData("en-US", "mmH₂O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mmH2O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mm wc", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mm wg", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mPa", PressureUnit.Millipascal)]
        [InlineData("en-US", "mtorr", PressureUnit.Millitorr)]
        [InlineData("en-US", "N/cm²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("en-US", "N/m²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("en-US", "N/mm²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("en-US", "Pa", PressureUnit.Pascal)]
        [InlineData("en-US", "lb/ft²", PressureUnit.PoundForcePerSquareFoot)]
        [InlineData("en-US", "psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("en-US", "lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("en-US", "lb/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("en-US", "lbs/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("en-US", "lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("en-US", "lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("en-US", "at", PressureUnit.TechnicalAtmosphere)]
        [InlineData("en-US", "tf/cm²", PressureUnit.TonneForcePerSquareCentimeter)]
        [InlineData("en-US", "tf/m²", PressureUnit.TonneForcePerSquareMeter)]
        [InlineData("en-US", "tf/mm²", PressureUnit.TonneForcePerSquareMillimeter)]
        [InlineData("en-US", "torr", PressureUnit.Torr)]
        [InlineData("ru-RU", "атм", PressureUnit.Atmosphere)]
        [InlineData("ru-RU", "бар", PressureUnit.Bar)]
        [InlineData("ru-RU", "сбар", PressureUnit.Centibar)]
        [InlineData("ru-RU", "даПа", PressureUnit.Decapascal)]
        [InlineData("ru-RU", "дбар", PressureUnit.Decibar)]
        [InlineData("ru-RU", "ГПа", PressureUnit.Gigapascal)]
        [InlineData("ru-RU", "гПа", PressureUnit.Hectopascal)]
        [InlineData("ru-RU", "кбар", PressureUnit.Kilobar)]
        [InlineData("ru-RU", "кгс/см²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("ru-RU", "кгс/м²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("ru-RU", "кгс/мм²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("ru-RU", "кН/см²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("ru-RU", "кН/м²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("ru-RU", "кН/мм²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("ru-RU", "кПа", PressureUnit.Kilopascal)]
        [InlineData("ru-RU", "ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("ru-RU", "kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("ru-RU", "Мбар", PressureUnit.Megabar)]
        [InlineData("ru-RU", "МН/м²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("ru-RU", "МПа", PressureUnit.Megapascal)]
        [InlineData("ru-RU", "мкбар", PressureUnit.Microbar)]
        [InlineData("ru-RU", "мкПа", PressureUnit.Micropascal)]
        [InlineData("ru-RU", "мбар", PressureUnit.Millibar)]
        [InlineData("ru-RU", "мм рт.ст.", PressureUnit.MillimeterOfMercury)]
        [InlineData("ru-RU", "мПа", PressureUnit.Millipascal)]
        [InlineData("ru-RU", "мторр", PressureUnit.Millitorr)]
        [InlineData("ru-RU", "Н/см²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("ru-RU", "Н/м²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("ru-RU", "Н/мм²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("ru-RU", "Па", PressureUnit.Pascal)]
        [InlineData("ru-RU", "psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("ru-RU", "lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("ru-RU", "ат", PressureUnit.TechnicalAtmosphere)]
        [InlineData("ru-RU", "торр", PressureUnit.Torr)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, PressureUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Pressure.TryParseUnit(abbreviation, out PressureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "atm", PressureUnit.Atmosphere)]
        [InlineData("en-US", "bar", PressureUnit.Bar)]
        [InlineData("en-US", "cbar", PressureUnit.Centibar)]
        [InlineData("en-US", "cmH₂O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cmH2O", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cm wc", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "cm wg", PressureUnit.CentimeterOfWaterColumn)]
        [InlineData("en-US", "daPa", PressureUnit.Decapascal)]
        [InlineData("en-US", "dbar", PressureUnit.Decibar)]
        [InlineData("en-US", "dyn/cm²", PressureUnit.DynePerSquareCentimeter)]
        [InlineData("en-US", "ft of head", PressureUnit.FootOfHead)]
        [InlineData("en-US", "GPa", PressureUnit.Gigapascal)]
        [InlineData("en-US", "hPa", PressureUnit.Hectopascal)]
        [InlineData("en-US", "inHg", PressureUnit.InchOfMercury)]
        [InlineData("en-US", "inH2O", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "inch wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "wc", PressureUnit.InchOfWaterColumn)]
        [InlineData("en-US", "kbar", PressureUnit.Kilobar)]
        [InlineData("en-US", "kgf/cm²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("en-US", "kgf/m²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("en-US", "kgf/mm²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("en-US", "kN/cm²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("en-US", "kN/m²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("en-US", "kN/mm²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("en-US", "kPa", PressureUnit.Kilopascal)]
        [InlineData("en-US", "kipf/ft²", PressureUnit.KilopoundForcePerSquareFoot)]
        [InlineData("en-US", "ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("en-US", "kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("en-US", "kipf/mil²", PressureUnit.KilopoundForcePerSquareMil)]
        [InlineData("en-US", "Mbar", PressureUnit.Megabar)]
        [InlineData("en-US", "MN/m²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("en-US", "MPa", PressureUnit.Megapascal)]
        [InlineData("en-US", "m of head", PressureUnit.MeterOfHead)]
        [InlineData("en-US", "mH₂O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "mH2O", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "m wc", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "m wg", PressureUnit.MeterOfWaterColumn)]
        [InlineData("en-US", "µbar", PressureUnit.Microbar)]
        [InlineData("en-US", "µPa", PressureUnit.Micropascal)]
        [InlineData("en-US", "mbar", PressureUnit.Millibar)]
        [InlineData("en-US", "mmHg", PressureUnit.MillimeterOfMercury)]
        [InlineData("en-US", "mmH₂O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mmH2O", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mm wc", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mm wg", PressureUnit.MillimeterOfWaterColumn)]
        [InlineData("en-US", "mPa", PressureUnit.Millipascal)]
        [InlineData("en-US", "mtorr", PressureUnit.Millitorr)]
        [InlineData("en-US", "N/cm²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("en-US", "N/m²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("en-US", "N/mm²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("en-US", "Pa", PressureUnit.Pascal)]
        [InlineData("en-US", "lb/ft²", PressureUnit.PoundForcePerSquareFoot)]
        [InlineData("en-US", "psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("en-US", "lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("en-US", "lb/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("en-US", "lbs/mil²", PressureUnit.PoundForcePerSquareMil)]
        [InlineData("en-US", "lbm/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("en-US", "lb/(in·s²)", PressureUnit.PoundPerInchSecondSquared)]
        [InlineData("en-US", "at", PressureUnit.TechnicalAtmosphere)]
        [InlineData("en-US", "tf/cm²", PressureUnit.TonneForcePerSquareCentimeter)]
        [InlineData("en-US", "tf/m²", PressureUnit.TonneForcePerSquareMeter)]
        [InlineData("en-US", "tf/mm²", PressureUnit.TonneForcePerSquareMillimeter)]
        [InlineData("en-US", "torr", PressureUnit.Torr)]
        [InlineData("ru-RU", "атм", PressureUnit.Atmosphere)]
        [InlineData("ru-RU", "бар", PressureUnit.Bar)]
        [InlineData("ru-RU", "сбар", PressureUnit.Centibar)]
        [InlineData("ru-RU", "даПа", PressureUnit.Decapascal)]
        [InlineData("ru-RU", "дбар", PressureUnit.Decibar)]
        [InlineData("ru-RU", "ГПа", PressureUnit.Gigapascal)]
        [InlineData("ru-RU", "гПа", PressureUnit.Hectopascal)]
        [InlineData("ru-RU", "кбар", PressureUnit.Kilobar)]
        [InlineData("ru-RU", "кгс/см²", PressureUnit.KilogramForcePerSquareCentimeter)]
        [InlineData("ru-RU", "кгс/м²", PressureUnit.KilogramForcePerSquareMeter)]
        [InlineData("ru-RU", "кгс/мм²", PressureUnit.KilogramForcePerSquareMillimeter)]
        [InlineData("ru-RU", "кН/см²", PressureUnit.KilonewtonPerSquareCentimeter)]
        [InlineData("ru-RU", "кН/м²", PressureUnit.KilonewtonPerSquareMeter)]
        [InlineData("ru-RU", "кН/мм²", PressureUnit.KilonewtonPerSquareMillimeter)]
        [InlineData("ru-RU", "кПа", PressureUnit.Kilopascal)]
        [InlineData("ru-RU", "ksi", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("ru-RU", "kipf/in²", PressureUnit.KilopoundForcePerSquareInch)]
        [InlineData("ru-RU", "Мбар", PressureUnit.Megabar)]
        [InlineData("ru-RU", "МН/м²", PressureUnit.MeganewtonPerSquareMeter)]
        [InlineData("ru-RU", "МПа", PressureUnit.Megapascal)]
        [InlineData("ru-RU", "мкбар", PressureUnit.Microbar)]
        [InlineData("ru-RU", "мкПа", PressureUnit.Micropascal)]
        [InlineData("ru-RU", "мбар", PressureUnit.Millibar)]
        [InlineData("ru-RU", "мм рт.ст.", PressureUnit.MillimeterOfMercury)]
        [InlineData("ru-RU", "мПа", PressureUnit.Millipascal)]
        [InlineData("ru-RU", "мторр", PressureUnit.Millitorr)]
        [InlineData("ru-RU", "Н/см²", PressureUnit.NewtonPerSquareCentimeter)]
        [InlineData("ru-RU", "Н/м²", PressureUnit.NewtonPerSquareMeter)]
        [InlineData("ru-RU", "Н/мм²", PressureUnit.NewtonPerSquareMillimeter)]
        [InlineData("ru-RU", "Па", PressureUnit.Pascal)]
        [InlineData("ru-RU", "psi", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("ru-RU", "lb/in²", PressureUnit.PoundForcePerSquareInch)]
        [InlineData("ru-RU", "ат", PressureUnit.TechnicalAtmosphere)]
        [InlineData("ru-RU", "торр", PressureUnit.Torr)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, PressureUnit expectedUnit)
        {
            Assert.True(Pressure.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out PressureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", PressureUnit.Atmosphere, "atm")]
        [InlineData("en-US", PressureUnit.Bar, "bar")]
        [InlineData("en-US", PressureUnit.Centibar, "cbar")]
        [InlineData("en-US", PressureUnit.CentimeterOfWaterColumn, "cmH₂O")]
        [InlineData("en-US", PressureUnit.Decapascal, "daPa")]
        [InlineData("en-US", PressureUnit.Decibar, "dbar")]
        [InlineData("en-US", PressureUnit.DynePerSquareCentimeter, "dyn/cm²")]
        [InlineData("en-US", PressureUnit.FootOfHead, "ft of head")]
        [InlineData("en-US", PressureUnit.Gigapascal, "GPa")]
        [InlineData("en-US", PressureUnit.Hectopascal, "hPa")]
        [InlineData("en-US", PressureUnit.InchOfMercury, "inHg")]
        [InlineData("en-US", PressureUnit.InchOfWaterColumn, "inH2O")]
        [InlineData("en-US", PressureUnit.Kilobar, "kbar")]
        [InlineData("en-US", PressureUnit.KilogramForcePerSquareCentimeter, "kgf/cm²")]
        [InlineData("en-US", PressureUnit.KilogramForcePerSquareMeter, "kgf/m²")]
        [InlineData("en-US", PressureUnit.KilogramForcePerSquareMillimeter, "kgf/mm²")]
        [InlineData("en-US", PressureUnit.KilonewtonPerSquareCentimeter, "kN/cm²")]
        [InlineData("en-US", PressureUnit.KilonewtonPerSquareMeter, "kN/m²")]
        [InlineData("en-US", PressureUnit.KilonewtonPerSquareMillimeter, "kN/mm²")]
        [InlineData("en-US", PressureUnit.Kilopascal, "kPa")]
        [InlineData("en-US", PressureUnit.KilopoundForcePerSquareFoot, "kipf/ft²")]
        [InlineData("en-US", PressureUnit.KilopoundForcePerSquareInch, "ksi")]
        [InlineData("en-US", PressureUnit.KilopoundForcePerSquareMil, "kipf/mil²")]
        [InlineData("en-US", PressureUnit.Megabar, "Mbar")]
        [InlineData("en-US", PressureUnit.MeganewtonPerSquareMeter, "MN/m²")]
        [InlineData("en-US", PressureUnit.Megapascal, "MPa")]
        [InlineData("en-US", PressureUnit.MeterOfHead, "m of head")]
        [InlineData("en-US", PressureUnit.MeterOfWaterColumn, "mH₂O")]
        [InlineData("en-US", PressureUnit.Microbar, "µbar")]
        [InlineData("en-US", PressureUnit.Micropascal, "µPa")]
        [InlineData("en-US", PressureUnit.Millibar, "mbar")]
        [InlineData("en-US", PressureUnit.MillimeterOfMercury, "mmHg")]
        [InlineData("en-US", PressureUnit.MillimeterOfWaterColumn, "mmH₂O")]
        [InlineData("en-US", PressureUnit.Millipascal, "mPa")]
        [InlineData("en-US", PressureUnit.Millitorr, "mtorr")]
        [InlineData("en-US", PressureUnit.NewtonPerSquareCentimeter, "N/cm²")]
        [InlineData("en-US", PressureUnit.NewtonPerSquareMeter, "N/m²")]
        [InlineData("en-US", PressureUnit.NewtonPerSquareMillimeter, "N/mm²")]
        [InlineData("en-US", PressureUnit.Pascal, "Pa")]
        [InlineData("en-US", PressureUnit.PoundForcePerSquareFoot, "lb/ft²")]
        [InlineData("en-US", PressureUnit.PoundForcePerSquareInch, "psi")]
        [InlineData("en-US", PressureUnit.PoundForcePerSquareMil, "lb/mil²")]
        [InlineData("en-US", PressureUnit.PoundPerInchSecondSquared, "lbm/(in·s²)")]
        [InlineData("en-US", PressureUnit.TechnicalAtmosphere, "at")]
        [InlineData("en-US", PressureUnit.TonneForcePerSquareCentimeter, "tf/cm²")]
        [InlineData("en-US", PressureUnit.TonneForcePerSquareMeter, "tf/m²")]
        [InlineData("en-US", PressureUnit.TonneForcePerSquareMillimeter, "tf/mm²")]
        [InlineData("en-US", PressureUnit.Torr, "torr")]
        [InlineData("ru-RU", PressureUnit.Atmosphere, "атм")]
        [InlineData("ru-RU", PressureUnit.Bar, "бар")]
        [InlineData("ru-RU", PressureUnit.Centibar, "сбар")]
        [InlineData("ru-RU", PressureUnit.Decapascal, "даПа")]
        [InlineData("ru-RU", PressureUnit.Decibar, "дбар")]
        [InlineData("ru-RU", PressureUnit.Gigapascal, "ГПа")]
        [InlineData("ru-RU", PressureUnit.Hectopascal, "гПа")]
        [InlineData("ru-RU", PressureUnit.Kilobar, "кбар")]
        [InlineData("ru-RU", PressureUnit.KilogramForcePerSquareCentimeter, "кгс/см²")]
        [InlineData("ru-RU", PressureUnit.KilogramForcePerSquareMeter, "кгс/м²")]
        [InlineData("ru-RU", PressureUnit.KilogramForcePerSquareMillimeter, "кгс/мм²")]
        [InlineData("ru-RU", PressureUnit.KilonewtonPerSquareCentimeter, "кН/см²")]
        [InlineData("ru-RU", PressureUnit.KilonewtonPerSquareMeter, "кН/м²")]
        [InlineData("ru-RU", PressureUnit.KilonewtonPerSquareMillimeter, "кН/мм²")]
        [InlineData("ru-RU", PressureUnit.Kilopascal, "кПа")]
        [InlineData("ru-RU", PressureUnit.KilopoundForcePerSquareInch, "ksi")]
        [InlineData("ru-RU", PressureUnit.Megabar, "Мбар")]
        [InlineData("ru-RU", PressureUnit.MeganewtonPerSquareMeter, "МН/м²")]
        [InlineData("ru-RU", PressureUnit.Megapascal, "МПа")]
        [InlineData("ru-RU", PressureUnit.Microbar, "мкбар")]
        [InlineData("ru-RU", PressureUnit.Micropascal, "мкПа")]
        [InlineData("ru-RU", PressureUnit.Millibar, "мбар")]
        [InlineData("ru-RU", PressureUnit.MillimeterOfMercury, "мм рт.ст.")]
        [InlineData("ru-RU", PressureUnit.Millipascal, "мПа")]
        [InlineData("ru-RU", PressureUnit.Millitorr, "мторр")]
        [InlineData("ru-RU", PressureUnit.NewtonPerSquareCentimeter, "Н/см²")]
        [InlineData("ru-RU", PressureUnit.NewtonPerSquareMeter, "Н/м²")]
        [InlineData("ru-RU", PressureUnit.NewtonPerSquareMillimeter, "Н/мм²")]
        [InlineData("ru-RU", PressureUnit.Pascal, "Па")]
        [InlineData("ru-RU", PressureUnit.PoundForcePerSquareInch, "psi")]
        [InlineData("ru-RU", PressureUnit.TechnicalAtmosphere, "ат")]
        [InlineData("ru-RU", PressureUnit.Torr, "торр")]
        public void GetAbbreviationForCulture(string culture, PressureUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Pressure.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Pressure.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Pressure.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(PressureUnit unit)
        {
            var inBaseUnits = Pressure.From(1.0, Pressure.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(PressureUnit unit)
        {
            var quantity = Pressure.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(PressureUnit unit)
        {
            Assert.All(Pressure.Units.Where(u => u != Pressure.BaseUnit), fromUnit =>
            {
                var quantity = Pressure.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(PressureUnit unit)
        {
            var quantity = default(Pressure);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(PressureUnit unit)
        {
            var quantity = Pressure.From(3, Pressure.BaseUnit);
            Pressure expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<PressureUnit> quantityToConvert = quantity;
                IQuantity<PressureUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Pressure pascal = Pressure.FromPascals(3);
            Assert.Equal(3, Pressure.FromAtmospheres(pascal.Atmospheres).Pascals);
            Assert.Equal(3, Pressure.FromBars(pascal.Bars).Pascals);
            Assert.Equal(3, Pressure.FromCentibars(pascal.Centibars).Pascals);
            Assert.Equal(3, Pressure.FromCentimetersOfWaterColumn(pascal.CentimetersOfWaterColumn).Pascals);
            Assert.Equal(3, Pressure.FromDecapascals(pascal.Decapascals).Pascals);
            Assert.Equal(3, Pressure.FromDecibars(pascal.Decibars).Pascals);
            Assert.Equal(3, Pressure.FromDynesPerSquareCentimeter(pascal.DynesPerSquareCentimeter).Pascals);
            Assert.Equal(3, Pressure.FromFeetOfHead(pascal.FeetOfHead).Pascals);
            Assert.Equal(3, Pressure.FromGigapascals(pascal.Gigapascals).Pascals);
            Assert.Equal(3, Pressure.FromHectopascals(pascal.Hectopascals).Pascals);
            Assert.Equal(3, Pressure.FromInchesOfMercury(pascal.InchesOfMercury).Pascals);
            Assert.Equal(3, Pressure.FromInchesOfWaterColumn(pascal.InchesOfWaterColumn).Pascals);
            Assert.Equal(3, Pressure.FromKilobars(pascal.Kilobars).Pascals);
            Assert.Equal(3, Pressure.FromKilogramsForcePerSquareCentimeter(pascal.KilogramsForcePerSquareCentimeter).Pascals);
            Assert.Equal(3, Pressure.FromKilogramsForcePerSquareMeter(pascal.KilogramsForcePerSquareMeter).Pascals);
            Assert.Equal(3, Pressure.FromKilogramsForcePerSquareMillimeter(pascal.KilogramsForcePerSquareMillimeter).Pascals);
            Assert.Equal(3, Pressure.FromKilonewtonsPerSquareCentimeter(pascal.KilonewtonsPerSquareCentimeter).Pascals);
            Assert.Equal(3, Pressure.FromKilonewtonsPerSquareMeter(pascal.KilonewtonsPerSquareMeter).Pascals);
            Assert.Equal(3, Pressure.FromKilonewtonsPerSquareMillimeter(pascal.KilonewtonsPerSquareMillimeter).Pascals);
            Assert.Equal(3, Pressure.FromKilopascals(pascal.Kilopascals).Pascals);
            Assert.Equal(3, Pressure.FromKilopoundsForcePerSquareFoot(pascal.KilopoundsForcePerSquareFoot).Pascals);
            Assert.Equal(3, Pressure.FromKilopoundsForcePerSquareInch(pascal.KilopoundsForcePerSquareInch).Pascals);
            Assert.Equal(3, Pressure.FromKilopoundsForcePerSquareMil(pascal.KilopoundsForcePerSquareMil).Pascals);
            Assert.Equal(3, Pressure.FromMegabars(pascal.Megabars).Pascals);
            Assert.Equal(3, Pressure.FromMeganewtonsPerSquareMeter(pascal.MeganewtonsPerSquareMeter).Pascals);
            Assert.Equal(3, Pressure.FromMegapascals(pascal.Megapascals).Pascals);
            Assert.Equal(3, Pressure.FromMetersOfHead(pascal.MetersOfHead).Pascals);
            Assert.Equal(3, Pressure.FromMetersOfWaterColumn(pascal.MetersOfWaterColumn).Pascals);
            Assert.Equal(3, Pressure.FromMicrobars(pascal.Microbars).Pascals);
            Assert.Equal(3, Pressure.FromMicropascals(pascal.Micropascals).Pascals);
            Assert.Equal(3, Pressure.FromMillibars(pascal.Millibars).Pascals);
            Assert.Equal(3, Pressure.FromMillimetersOfMercury(pascal.MillimetersOfMercury).Pascals);
            Assert.Equal(3, Pressure.FromMillimetersOfWaterColumn(pascal.MillimetersOfWaterColumn).Pascals);
            Assert.Equal(3, Pressure.FromMillipascals(pascal.Millipascals).Pascals);
            Assert.Equal(3, Pressure.FromMillitorrs(pascal.Millitorrs).Pascals);
            Assert.Equal(3, Pressure.FromNewtonsPerSquareCentimeter(pascal.NewtonsPerSquareCentimeter).Pascals);
            Assert.Equal(3, Pressure.FromNewtonsPerSquareMeter(pascal.NewtonsPerSquareMeter).Pascals);
            Assert.Equal(3, Pressure.FromNewtonsPerSquareMillimeter(pascal.NewtonsPerSquareMillimeter).Pascals);
            Assert.Equal(3, Pressure.FromPascals(pascal.Pascals).Pascals);
            Assert.Equal(3, Pressure.FromPoundsForcePerSquareFoot(pascal.PoundsForcePerSquareFoot).Pascals);
            Assert.Equal(3, Pressure.FromPoundsForcePerSquareInch(pascal.PoundsForcePerSquareInch).Pascals);
            Assert.Equal(3, Pressure.FromPoundsForcePerSquareMil(pascal.PoundsForcePerSquareMil).Pascals);
            Assert.Equal(3, Pressure.FromPoundsPerInchSecondSquared(pascal.PoundsPerInchSecondSquared).Pascals);
            Assert.Equal(3, Pressure.FromTechnicalAtmospheres(pascal.TechnicalAtmospheres).Pascals);
            Assert.Equal(3, Pressure.FromTonnesForcePerSquareCentimeter(pascal.TonnesForcePerSquareCentimeter).Pascals);
            Assert.Equal(3, Pressure.FromTonnesForcePerSquareMeter(pascal.TonnesForcePerSquareMeter).Pascals);
            Assert.Equal(3, Pressure.FromTonnesForcePerSquareMillimeter(pascal.TonnesForcePerSquareMillimeter).Pascals);
            Assert.Equal(3, Pressure.FromTorrs(pascal.Torrs).Pascals);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Pressure v = Pressure.FromPascals(1);
            Assert.Equal(-1, -v.Pascals);
            Assert.Equal(2, (Pressure.FromPascals(3) - v).Pascals);
            Assert.Equal(2, (v + v).Pascals);
            Assert.Equal(10, (v * 10).Pascals);
            Assert.Equal(10, (10 * v).Pascals);
            Assert.Equal(2, (Pressure.FromPascals(10) / 5).Pascals);
            Assert.Equal(2, Pressure.FromPascals(10) / Pressure.FromPascals(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Pressure onePascal = Pressure.FromPascals(1);
            Pressure twoPascals = Pressure.FromPascals(2);

            Assert.True(onePascal < twoPascals);
            Assert.True(onePascal <= twoPascals);
            Assert.True(twoPascals > onePascal);
            Assert.True(twoPascals >= onePascal);

            Assert.False(onePascal > twoPascals);
            Assert.False(onePascal >= twoPascals);
            Assert.False(twoPascals < onePascal);
            Assert.False(twoPascals <= onePascal);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.Equal(0, pascal.CompareTo(pascal));
            Assert.True(pascal.CompareTo(Pressure.Zero) > 0);
            Assert.True(Pressure.Zero.CompareTo(pascal) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.Throws<ArgumentException>(() => pascal.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.Throws<ArgumentNullException>(() => pascal.CompareTo(null));
        }

        [Theory]
        [InlineData(1, PressureUnit.Pascal, 1, PressureUnit.Pascal, true)]  // Same value and unit.
        [InlineData(1, PressureUnit.Pascal, 2, PressureUnit.Pascal, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, PressureUnit unitA, double valueB, PressureUnit unitB, bool expectEqual)
        {
            var a = new Pressure(valueA, unitA);
            var b = new Pressure(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Pressure.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.False(pascal.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Pressure pascal = Pressure.FromPascals(1);
            Assert.False(pascal.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Pressure.FromPascals(firstValue);
            var otherQuantity = Pressure.FromPascals(secondValue);
            Pressure maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Pressure.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Pressure.FromPascals(1);
            var negativeTolerance = Pressure.FromPascals(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<PressureUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Pressure.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Pressure.Info.Units, Pressure.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Pressure.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 atm", new Pressure(1, PressureUnit.Atmosphere).ToString());
            Assert.Equal("1 bar", new Pressure(1, PressureUnit.Bar).ToString());
            Assert.Equal("1 cbar", new Pressure(1, PressureUnit.Centibar).ToString());
            Assert.Equal("1 cmH₂O", new Pressure(1, PressureUnit.CentimeterOfWaterColumn).ToString());
            Assert.Equal("1 daPa", new Pressure(1, PressureUnit.Decapascal).ToString());
            Assert.Equal("1 dbar", new Pressure(1, PressureUnit.Decibar).ToString());
            Assert.Equal("1 dyn/cm²", new Pressure(1, PressureUnit.DynePerSquareCentimeter).ToString());
            Assert.Equal("1 ft of head", new Pressure(1, PressureUnit.FootOfHead).ToString());
            Assert.Equal("1 GPa", new Pressure(1, PressureUnit.Gigapascal).ToString());
            Assert.Equal("1 hPa", new Pressure(1, PressureUnit.Hectopascal).ToString());
            Assert.Equal("1 inHg", new Pressure(1, PressureUnit.InchOfMercury).ToString());
            Assert.Equal("1 inH2O", new Pressure(1, PressureUnit.InchOfWaterColumn).ToString());
            Assert.Equal("1 kbar", new Pressure(1, PressureUnit.Kilobar).ToString());
            Assert.Equal("1 kgf/cm²", new Pressure(1, PressureUnit.KilogramForcePerSquareCentimeter).ToString());
            Assert.Equal("1 kgf/m²", new Pressure(1, PressureUnit.KilogramForcePerSquareMeter).ToString());
            Assert.Equal("1 kgf/mm²", new Pressure(1, PressureUnit.KilogramForcePerSquareMillimeter).ToString());
            Assert.Equal("1 kN/cm²", new Pressure(1, PressureUnit.KilonewtonPerSquareCentimeter).ToString());
            Assert.Equal("1 kN/m²", new Pressure(1, PressureUnit.KilonewtonPerSquareMeter).ToString());
            Assert.Equal("1 kN/mm²", new Pressure(1, PressureUnit.KilonewtonPerSquareMillimeter).ToString());
            Assert.Equal("1 kPa", new Pressure(1, PressureUnit.Kilopascal).ToString());
            Assert.Equal("1 kipf/ft²", new Pressure(1, PressureUnit.KilopoundForcePerSquareFoot).ToString());
            Assert.Equal("1 ksi", new Pressure(1, PressureUnit.KilopoundForcePerSquareInch).ToString());
            Assert.Equal("1 kipf/mil²", new Pressure(1, PressureUnit.KilopoundForcePerSquareMil).ToString());
            Assert.Equal("1 Mbar", new Pressure(1, PressureUnit.Megabar).ToString());
            Assert.Equal("1 MN/m²", new Pressure(1, PressureUnit.MeganewtonPerSquareMeter).ToString());
            Assert.Equal("1 MPa", new Pressure(1, PressureUnit.Megapascal).ToString());
            Assert.Equal("1 m of head", new Pressure(1, PressureUnit.MeterOfHead).ToString());
            Assert.Equal("1 mH₂O", new Pressure(1, PressureUnit.MeterOfWaterColumn).ToString());
            Assert.Equal("1 µbar", new Pressure(1, PressureUnit.Microbar).ToString());
            Assert.Equal("1 µPa", new Pressure(1, PressureUnit.Micropascal).ToString());
            Assert.Equal("1 mbar", new Pressure(1, PressureUnit.Millibar).ToString());
            Assert.Equal("1 mmHg", new Pressure(1, PressureUnit.MillimeterOfMercury).ToString());
            Assert.Equal("1 mmH₂O", new Pressure(1, PressureUnit.MillimeterOfWaterColumn).ToString());
            Assert.Equal("1 mPa", new Pressure(1, PressureUnit.Millipascal).ToString());
            Assert.Equal("1 mtorr", new Pressure(1, PressureUnit.Millitorr).ToString());
            Assert.Equal("1 N/cm²", new Pressure(1, PressureUnit.NewtonPerSquareCentimeter).ToString());
            Assert.Equal("1 N/m²", new Pressure(1, PressureUnit.NewtonPerSquareMeter).ToString());
            Assert.Equal("1 N/mm²", new Pressure(1, PressureUnit.NewtonPerSquareMillimeter).ToString());
            Assert.Equal("1 Pa", new Pressure(1, PressureUnit.Pascal).ToString());
            Assert.Equal("1 lb/ft²", new Pressure(1, PressureUnit.PoundForcePerSquareFoot).ToString());
            Assert.Equal("1 psi", new Pressure(1, PressureUnit.PoundForcePerSquareInch).ToString());
            Assert.Equal("1 lb/mil²", new Pressure(1, PressureUnit.PoundForcePerSquareMil).ToString());
            Assert.Equal("1 lbm/(in·s²)", new Pressure(1, PressureUnit.PoundPerInchSecondSquared).ToString());
            Assert.Equal("1 at", new Pressure(1, PressureUnit.TechnicalAtmosphere).ToString());
            Assert.Equal("1 tf/cm²", new Pressure(1, PressureUnit.TonneForcePerSquareCentimeter).ToString());
            Assert.Equal("1 tf/m²", new Pressure(1, PressureUnit.TonneForcePerSquareMeter).ToString());
            Assert.Equal("1 tf/mm²", new Pressure(1, PressureUnit.TonneForcePerSquareMillimeter).ToString());
            Assert.Equal("1 torr", new Pressure(1, PressureUnit.Torr).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 atm", new Pressure(1, PressureUnit.Atmosphere).ToString(swedishCulture));
            Assert.Equal("1 bar", new Pressure(1, PressureUnit.Bar).ToString(swedishCulture));
            Assert.Equal("1 cbar", new Pressure(1, PressureUnit.Centibar).ToString(swedishCulture));
            Assert.Equal("1 cmH₂O", new Pressure(1, PressureUnit.CentimeterOfWaterColumn).ToString(swedishCulture));
            Assert.Equal("1 daPa", new Pressure(1, PressureUnit.Decapascal).ToString(swedishCulture));
            Assert.Equal("1 dbar", new Pressure(1, PressureUnit.Decibar).ToString(swedishCulture));
            Assert.Equal("1 dyn/cm²", new Pressure(1, PressureUnit.DynePerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 ft of head", new Pressure(1, PressureUnit.FootOfHead).ToString(swedishCulture));
            Assert.Equal("1 GPa", new Pressure(1, PressureUnit.Gigapascal).ToString(swedishCulture));
            Assert.Equal("1 hPa", new Pressure(1, PressureUnit.Hectopascal).ToString(swedishCulture));
            Assert.Equal("1 inHg", new Pressure(1, PressureUnit.InchOfMercury).ToString(swedishCulture));
            Assert.Equal("1 inH2O", new Pressure(1, PressureUnit.InchOfWaterColumn).ToString(swedishCulture));
            Assert.Equal("1 kbar", new Pressure(1, PressureUnit.Kilobar).ToString(swedishCulture));
            Assert.Equal("1 kgf/cm²", new Pressure(1, PressureUnit.KilogramForcePerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf/m²", new Pressure(1, PressureUnit.KilogramForcePerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kgf/mm²", new Pressure(1, PressureUnit.KilogramForcePerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kN/cm²", new Pressure(1, PressureUnit.KilonewtonPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kN/m²", new Pressure(1, PressureUnit.KilonewtonPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 kN/mm²", new Pressure(1, PressureUnit.KilonewtonPerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kPa", new Pressure(1, PressureUnit.Kilopascal).ToString(swedishCulture));
            Assert.Equal("1 kipf/ft²", new Pressure(1, PressureUnit.KilopoundForcePerSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 ksi", new Pressure(1, PressureUnit.KilopoundForcePerSquareInch).ToString(swedishCulture));
            Assert.Equal("1 kipf/mil²", new Pressure(1, PressureUnit.KilopoundForcePerSquareMil).ToString(swedishCulture));
            Assert.Equal("1 Mbar", new Pressure(1, PressureUnit.Megabar).ToString(swedishCulture));
            Assert.Equal("1 MN/m²", new Pressure(1, PressureUnit.MeganewtonPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 MPa", new Pressure(1, PressureUnit.Megapascal).ToString(swedishCulture));
            Assert.Equal("1 m of head", new Pressure(1, PressureUnit.MeterOfHead).ToString(swedishCulture));
            Assert.Equal("1 mH₂O", new Pressure(1, PressureUnit.MeterOfWaterColumn).ToString(swedishCulture));
            Assert.Equal("1 µbar", new Pressure(1, PressureUnit.Microbar).ToString(swedishCulture));
            Assert.Equal("1 µPa", new Pressure(1, PressureUnit.Micropascal).ToString(swedishCulture));
            Assert.Equal("1 mbar", new Pressure(1, PressureUnit.Millibar).ToString(swedishCulture));
            Assert.Equal("1 mmHg", new Pressure(1, PressureUnit.MillimeterOfMercury).ToString(swedishCulture));
            Assert.Equal("1 mmH₂O", new Pressure(1, PressureUnit.MillimeterOfWaterColumn).ToString(swedishCulture));
            Assert.Equal("1 mPa", new Pressure(1, PressureUnit.Millipascal).ToString(swedishCulture));
            Assert.Equal("1 mtorr", new Pressure(1, PressureUnit.Millitorr).ToString(swedishCulture));
            Assert.Equal("1 N/cm²", new Pressure(1, PressureUnit.NewtonPerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 N/m²", new Pressure(1, PressureUnit.NewtonPerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 N/mm²", new Pressure(1, PressureUnit.NewtonPerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 Pa", new Pressure(1, PressureUnit.Pascal).ToString(swedishCulture));
            Assert.Equal("1 lb/ft²", new Pressure(1, PressureUnit.PoundForcePerSquareFoot).ToString(swedishCulture));
            Assert.Equal("1 psi", new Pressure(1, PressureUnit.PoundForcePerSquareInch).ToString(swedishCulture));
            Assert.Equal("1 lb/mil²", new Pressure(1, PressureUnit.PoundForcePerSquareMil).ToString(swedishCulture));
            Assert.Equal("1 lbm/(in·s²)", new Pressure(1, PressureUnit.PoundPerInchSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 at", new Pressure(1, PressureUnit.TechnicalAtmosphere).ToString(swedishCulture));
            Assert.Equal("1 tf/cm²", new Pressure(1, PressureUnit.TonneForcePerSquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 tf/m²", new Pressure(1, PressureUnit.TonneForcePerSquareMeter).ToString(swedishCulture));
            Assert.Equal("1 tf/mm²", new Pressure(1, PressureUnit.TonneForcePerSquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 torr", new Pressure(1, PressureUnit.Torr).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s1"));
            Assert.Equal("0.12 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s2"));
            Assert.Equal("0.123 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s3"));
            Assert.Equal("0.1235 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s1", culture));
            Assert.Equal("0.12 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s2", culture));
            Assert.Equal("0.123 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s3", culture));
            Assert.Equal("0.1235 Pa", new Pressure(0.123456, PressureUnit.Pascal).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Pressure.FromPascals(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Pressure.FromPascals(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Pressure.FromPascals(1.0);
            var expected = Comparison.GetHashCode(typeof(Pressure), quantity.As(Pressure.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Pressure.FromPascals(value);
            Assert.Equal(Pressure.FromPascals(-value), -quantity);
        }
    }
}
