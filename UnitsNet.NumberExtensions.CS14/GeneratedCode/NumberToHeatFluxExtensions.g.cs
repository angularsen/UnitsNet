//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToHeatFlux
{
    /// <summary>
    /// A number to HeatFlux Extensions
    /// </summary>
    public static class NumberToHeatFluxExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="HeatFlux.FromBtusPerHourSquareFoot(double)" />
            public HeatFlux BtusPerHourSquareFoot
#if NET7_0_OR_GREATER
                => HeatFlux.FromBtusPerHourSquareFoot(double.CreateChecked(value));
#else
                => HeatFlux.FromBtusPerHourSquareFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromBtusPerMinuteSquareFoot(double)" />
            public HeatFlux BtusPerMinuteSquareFoot
#if NET7_0_OR_GREATER
                => HeatFlux.FromBtusPerMinuteSquareFoot(double.CreateChecked(value));
#else
                => HeatFlux.FromBtusPerMinuteSquareFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromBtusPerSecondSquareFoot(double)" />
            public HeatFlux BtusPerSecondSquareFoot
#if NET7_0_OR_GREATER
                => HeatFlux.FromBtusPerSecondSquareFoot(double.CreateChecked(value));
#else
                => HeatFlux.FromBtusPerSecondSquareFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromBtusPerSecondSquareInch(double)" />
            public HeatFlux BtusPerSecondSquareInch
#if NET7_0_OR_GREATER
                => HeatFlux.FromBtusPerSecondSquareInch(double.CreateChecked(value));
#else
                => HeatFlux.FromBtusPerSecondSquareInch(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromCaloriesPerSecondSquareCentimeter(double)" />
            public HeatFlux CaloriesPerSecondSquareCentimeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromCaloriesPerSecondSquareCentimeter(double.CreateChecked(value));
#else
                => HeatFlux.FromCaloriesPerSecondSquareCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromCentiwattsPerSquareMeter(double)" />
            public HeatFlux CentiwattsPerSquareMeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromCentiwattsPerSquareMeter(double.CreateChecked(value));
#else
                => HeatFlux.FromCentiwattsPerSquareMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromDeciwattsPerSquareMeter(double)" />
            public HeatFlux DeciwattsPerSquareMeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromDeciwattsPerSquareMeter(double.CreateChecked(value));
#else
                => HeatFlux.FromDeciwattsPerSquareMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromKilocaloriesPerHourSquareMeter(double)" />
            public HeatFlux KilocaloriesPerHourSquareMeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromKilocaloriesPerHourSquareMeter(double.CreateChecked(value));
#else
                => HeatFlux.FromKilocaloriesPerHourSquareMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(double)" />
            public HeatFlux KilocaloriesPerSecondSquareCentimeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(double.CreateChecked(value));
#else
                => HeatFlux.FromKilocaloriesPerSecondSquareCentimeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromKilowattsPerSquareMeter(double)" />
            public HeatFlux KilowattsPerSquareMeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromKilowattsPerSquareMeter(double.CreateChecked(value));
#else
                => HeatFlux.FromKilowattsPerSquareMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromMicrowattsPerSquareMeter(double)" />
            public HeatFlux MicrowattsPerSquareMeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromMicrowattsPerSquareMeter(double.CreateChecked(value));
#else
                => HeatFlux.FromMicrowattsPerSquareMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromMilliwattsPerSquareMeter(double)" />
            public HeatFlux MilliwattsPerSquareMeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromMilliwattsPerSquareMeter(double.CreateChecked(value));
#else
                => HeatFlux.FromMilliwattsPerSquareMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromNanowattsPerSquareMeter(double)" />
            public HeatFlux NanowattsPerSquareMeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromNanowattsPerSquareMeter(double.CreateChecked(value));
#else
                => HeatFlux.FromNanowattsPerSquareMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromPoundsForcePerFootSecond(double)" />
            public HeatFlux PoundsForcePerFootSecond
#if NET7_0_OR_GREATER
                => HeatFlux.FromPoundsForcePerFootSecond(double.CreateChecked(value));
#else
                => HeatFlux.FromPoundsForcePerFootSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromPoundsPerSecondCubed(double)" />
            public HeatFlux PoundsPerSecondCubed
#if NET7_0_OR_GREATER
                => HeatFlux.FromPoundsPerSecondCubed(double.CreateChecked(value));
#else
                => HeatFlux.FromPoundsPerSecondCubed(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromWattsPerSquareFoot(double)" />
            public HeatFlux WattsPerSquareFoot
#if NET7_0_OR_GREATER
                => HeatFlux.FromWattsPerSquareFoot(double.CreateChecked(value));
#else
                => HeatFlux.FromWattsPerSquareFoot(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromWattsPerSquareInch(double)" />
            public HeatFlux WattsPerSquareInch
#if NET7_0_OR_GREATER
                => HeatFlux.FromWattsPerSquareInch(double.CreateChecked(value));
#else
                => HeatFlux.FromWattsPerSquareInch(value.ToDouble(null));
#endif

            /// <inheritdoc cref="HeatFlux.FromWattsPerSquareMeter(double)" />
            public HeatFlux WattsPerSquareMeter
#if NET7_0_OR_GREATER
                => HeatFlux.FromWattsPerSquareMeter(double.CreateChecked(value));
#else
                => HeatFlux.FromWattsPerSquareMeter(value.ToDouble(null));
#endif

        }
    }
}
