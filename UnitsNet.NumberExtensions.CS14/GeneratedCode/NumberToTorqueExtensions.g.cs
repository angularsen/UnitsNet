//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToTorque
{
    /// <summary>
    /// A number to Torque Extensions
    /// </summary>
    public static class NumberToTorqueExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Torque.FromGramForceCentimeters(QuantityValue)" />
            public Torque GramForceCentimeters
#if NET7_0_OR_GREATER
                => Torque.FromGramForceCentimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromGramForceCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromGramForceMeters(QuantityValue)" />
            public Torque GramForceMeters
#if NET7_0_OR_GREATER
                => Torque.FromGramForceMeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromGramForceMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromGramForceMillimeters(QuantityValue)" />
            public Torque GramForceMillimeters
#if NET7_0_OR_GREATER
                => Torque.FromGramForceMillimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromGramForceMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromKilogramForceCentimeters(QuantityValue)" />
            public Torque KilogramForceCentimeters
#if NET7_0_OR_GREATER
                => Torque.FromKilogramForceCentimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromKilogramForceCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromKilogramForceMeters(QuantityValue)" />
            public Torque KilogramForceMeters
#if NET7_0_OR_GREATER
                => Torque.FromKilogramForceMeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromKilogramForceMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromKilogramForceMillimeters(QuantityValue)" />
            public Torque KilogramForceMillimeters
#if NET7_0_OR_GREATER
                => Torque.FromKilogramForceMillimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromKilogramForceMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromKilonewtonCentimeters(QuantityValue)" />
            public Torque KilonewtonCentimeters
#if NET7_0_OR_GREATER
                => Torque.FromKilonewtonCentimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromKilonewtonCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromKilonewtonMeters(QuantityValue)" />
            public Torque KilonewtonMeters
#if NET7_0_OR_GREATER
                => Torque.FromKilonewtonMeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromKilonewtonMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromKilonewtonMillimeters(QuantityValue)" />
            public Torque KilonewtonMillimeters
#if NET7_0_OR_GREATER
                => Torque.FromKilonewtonMillimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromKilonewtonMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromKilopoundForceFeet(QuantityValue)" />
            public Torque KilopoundForceFeet
#if NET7_0_OR_GREATER
                => Torque.FromKilopoundForceFeet(QuantityValue.CreateChecked(value));
#else
                => Torque.FromKilopoundForceFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromKilopoundForceInches(QuantityValue)" />
            public Torque KilopoundForceInches
#if NET7_0_OR_GREATER
                => Torque.FromKilopoundForceInches(QuantityValue.CreateChecked(value));
#else
                => Torque.FromKilopoundForceInches(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromMeganewtonCentimeters(QuantityValue)" />
            public Torque MeganewtonCentimeters
#if NET7_0_OR_GREATER
                => Torque.FromMeganewtonCentimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromMeganewtonCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromMeganewtonMeters(QuantityValue)" />
            public Torque MeganewtonMeters
#if NET7_0_OR_GREATER
                => Torque.FromMeganewtonMeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromMeganewtonMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromMeganewtonMillimeters(QuantityValue)" />
            public Torque MeganewtonMillimeters
#if NET7_0_OR_GREATER
                => Torque.FromMeganewtonMillimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromMeganewtonMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromMegapoundForceFeet(QuantityValue)" />
            public Torque MegapoundForceFeet
#if NET7_0_OR_GREATER
                => Torque.FromMegapoundForceFeet(QuantityValue.CreateChecked(value));
#else
                => Torque.FromMegapoundForceFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromMegapoundForceInches(QuantityValue)" />
            public Torque MegapoundForceInches
#if NET7_0_OR_GREATER
                => Torque.FromMegapoundForceInches(QuantityValue.CreateChecked(value));
#else
                => Torque.FromMegapoundForceInches(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromNewtonCentimeters(QuantityValue)" />
            public Torque NewtonCentimeters
#if NET7_0_OR_GREATER
                => Torque.FromNewtonCentimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromNewtonCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromNewtonMeters(QuantityValue)" />
            public Torque NewtonMeters
#if NET7_0_OR_GREATER
                => Torque.FromNewtonMeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromNewtonMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromNewtonMillimeters(QuantityValue)" />
            public Torque NewtonMillimeters
#if NET7_0_OR_GREATER
                => Torque.FromNewtonMillimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromNewtonMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromPoundalFeet(QuantityValue)" />
            public Torque PoundalFeet
#if NET7_0_OR_GREATER
                => Torque.FromPoundalFeet(QuantityValue.CreateChecked(value));
#else
                => Torque.FromPoundalFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromPoundForceFeet(QuantityValue)" />
            public Torque PoundForceFeet
#if NET7_0_OR_GREATER
                => Torque.FromPoundForceFeet(QuantityValue.CreateChecked(value));
#else
                => Torque.FromPoundForceFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromPoundForceInches(QuantityValue)" />
            public Torque PoundForceInches
#if NET7_0_OR_GREATER
                => Torque.FromPoundForceInches(QuantityValue.CreateChecked(value));
#else
                => Torque.FromPoundForceInches(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromTonneForceCentimeters(QuantityValue)" />
            public Torque TonneForceCentimeters
#if NET7_0_OR_GREATER
                => Torque.FromTonneForceCentimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromTonneForceCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromTonneForceMeters(QuantityValue)" />
            public Torque TonneForceMeters
#if NET7_0_OR_GREATER
                => Torque.FromTonneForceMeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromTonneForceMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Torque.FromTonneForceMillimeters(QuantityValue)" />
            public Torque TonneForceMillimeters
#if NET7_0_OR_GREATER
                => Torque.FromTonneForceMillimeters(QuantityValue.CreateChecked(value));
#else
                => Torque.FromTonneForceMillimeters(value.ToQuantityValue());
#endif

        }
    }
}
