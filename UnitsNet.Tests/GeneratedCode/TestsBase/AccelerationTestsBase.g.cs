//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Acceleration.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class AccelerationTestsBase : QuantityTestsBase
    {
        protected abstract double CentimetersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double DecimetersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double FeetPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double InchesPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double KilometersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double KnotsPerHourInOneMeterPerSecondSquared { get; }
        protected abstract double KnotsPerMinuteInOneMeterPerSecondSquared { get; }
        protected abstract double KnotsPerSecondInOneMeterPerSecondSquared { get; }
        protected abstract double MetersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double MicrometersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double MillimetersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double MillistandardGravityInOneMeterPerSecondSquared { get; }
        protected abstract double NanometersPerSecondSquaredInOneMeterPerSecondSquared { get; }
        protected abstract double StandardGravityInOneMeterPerSecondSquared { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentimetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double DecimetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double FeetPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double InchesPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double KilometersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerHourTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double KnotsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double MicrometersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double MillimetersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double MillistandardGravityTolerance { get { return 1e-5; } }
        protected virtual double NanometersPerSecondSquaredTolerance { get { return 1e-5; } }
        protected virtual double StandardGravityTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(AccelerationUnit unit)
        {
            return unit switch
            {
                AccelerationUnit.CentimeterPerSecondSquared => (CentimetersPerSecondSquaredInOneMeterPerSecondSquared, CentimetersPerSecondSquaredTolerance),
                AccelerationUnit.DecimeterPerSecondSquared => (DecimetersPerSecondSquaredInOneMeterPerSecondSquared, DecimetersPerSecondSquaredTolerance),
                AccelerationUnit.FootPerSecondSquared => (FeetPerSecondSquaredInOneMeterPerSecondSquared, FeetPerSecondSquaredTolerance),
                AccelerationUnit.InchPerSecondSquared => (InchesPerSecondSquaredInOneMeterPerSecondSquared, InchesPerSecondSquaredTolerance),
                AccelerationUnit.KilometerPerSecondSquared => (KilometersPerSecondSquaredInOneMeterPerSecondSquared, KilometersPerSecondSquaredTolerance),
                AccelerationUnit.KnotPerHour => (KnotsPerHourInOneMeterPerSecondSquared, KnotsPerHourTolerance),
                AccelerationUnit.KnotPerMinute => (KnotsPerMinuteInOneMeterPerSecondSquared, KnotsPerMinuteTolerance),
                AccelerationUnit.KnotPerSecond => (KnotsPerSecondInOneMeterPerSecondSquared, KnotsPerSecondTolerance),
                AccelerationUnit.MeterPerSecondSquared => (MetersPerSecondSquaredInOneMeterPerSecondSquared, MetersPerSecondSquaredTolerance),
                AccelerationUnit.MicrometerPerSecondSquared => (MicrometersPerSecondSquaredInOneMeterPerSecondSquared, MicrometersPerSecondSquaredTolerance),
                AccelerationUnit.MillimeterPerSecondSquared => (MillimetersPerSecondSquaredInOneMeterPerSecondSquared, MillimetersPerSecondSquaredTolerance),
                AccelerationUnit.MillistandardGravity => (MillistandardGravityInOneMeterPerSecondSquared, MillistandardGravityTolerance),
                AccelerationUnit.NanometerPerSecondSquared => (NanometersPerSecondSquaredInOneMeterPerSecondSquared, NanometersPerSecondSquaredTolerance),
                AccelerationUnit.StandardGravity => (StandardGravityInOneMeterPerSecondSquared, StandardGravityTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { AccelerationUnit.CentimeterPerSecondSquared },
            new object[] { AccelerationUnit.DecimeterPerSecondSquared },
            new object[] { AccelerationUnit.FootPerSecondSquared },
            new object[] { AccelerationUnit.InchPerSecondSquared },
            new object[] { AccelerationUnit.KilometerPerSecondSquared },
            new object[] { AccelerationUnit.KnotPerHour },
            new object[] { AccelerationUnit.KnotPerMinute },
            new object[] { AccelerationUnit.KnotPerSecond },
            new object[] { AccelerationUnit.MeterPerSecondSquared },
            new object[] { AccelerationUnit.MicrometerPerSecondSquared },
            new object[] { AccelerationUnit.MillimeterPerSecondSquared },
            new object[] { AccelerationUnit.MillistandardGravity },
            new object[] { AccelerationUnit.NanometerPerSecondSquared },
            new object[] { AccelerationUnit.StandardGravity },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Acceleration();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(AccelerationUnit.MeterPerSecondSquared, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Acceleration(double.PositiveInfinity, AccelerationUnit.MeterPerSecondSquared));
            var exception2 = Record.Exception(() => new Acceleration(double.NegativeInfinity, AccelerationUnit.MeterPerSecondSquared));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Acceleration(double.NaN, AccelerationUnit.MeterPerSecondSquared));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Acceleration(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Acceleration(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Acceleration(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Acceleration_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            AccelerationUnit[] unitsOrderedByName = EnumUtils.GetEnumValues<AccelerationUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Acceleration(1, AccelerationUnit.MeterPerSecondSquared);

            QuantityInfo<Acceleration, AccelerationUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Acceleration", quantityInfo.Name);
            Assert.Equal(Acceleration.Zero, quantityInfo.Zero);
            Assert.Equal(Acceleration.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Acceleration.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<AccelerationUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void AccelerationInfo_CreateWithCustomUnitInfos()
        {
            AccelerationUnit[] expectedUnits = [AccelerationUnit.MeterPerSecondSquared];

            Acceleration.AccelerationInfo quantityInfo = Acceleration.AccelerationInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Acceleration", quantityInfo.Name);
            Assert.Equal(Acceleration.Zero, quantityInfo.Zero);
            Assert.Equal(Acceleration.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void MeterPerSecondSquaredToAccelerationUnits()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(CentimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.CentimetersPerSecondSquared, CentimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.DecimetersPerSecondSquared, DecimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(FeetPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.FeetPerSecondSquared, FeetPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(InchesPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.InchesPerSecondSquared, InchesPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.KilometersPerSecondSquared, KilometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerHourInOneMeterPerSecondSquared, meterpersecondsquared.KnotsPerHour, KnotsPerHourTolerance);
            AssertEx.EqualTolerance(KnotsPerMinuteInOneMeterPerSecondSquared, meterpersecondsquared.KnotsPerMinute, KnotsPerMinuteTolerance);
            AssertEx.EqualTolerance(KnotsPerSecondInOneMeterPerSecondSquared, meterpersecondsquared.KnotsPerSecond, KnotsPerSecondTolerance);
            AssertEx.EqualTolerance(MetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.MetersPerSecondSquared, MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.MicrometersPerSecondSquared, MicrometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.MillimetersPerSecondSquared, MillimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillistandardGravityInOneMeterPerSecondSquared, meterpersecondsquared.MillistandardGravity, MillistandardGravityTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.NanometersPerSecondSquared, NanometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(StandardGravityInOneMeterPerSecondSquared, meterpersecondsquared.StandardGravity, StandardGravityTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Acceleration.From(1, AccelerationUnit.CentimeterPerSecondSquared);
            Assert.Equal(1, quantity00.CentimetersPerSecondSquared);
            Assert.Equal(AccelerationUnit.CentimeterPerSecondSquared, quantity00.Unit);

            var quantity01 = Acceleration.From(1, AccelerationUnit.DecimeterPerSecondSquared);
            Assert.Equal(1, quantity01.DecimetersPerSecondSquared);
            Assert.Equal(AccelerationUnit.DecimeterPerSecondSquared, quantity01.Unit);

            var quantity02 = Acceleration.From(1, AccelerationUnit.FootPerSecondSquared);
            Assert.Equal(1, quantity02.FeetPerSecondSquared);
            Assert.Equal(AccelerationUnit.FootPerSecondSquared, quantity02.Unit);

            var quantity03 = Acceleration.From(1, AccelerationUnit.InchPerSecondSquared);
            Assert.Equal(1, quantity03.InchesPerSecondSquared);
            Assert.Equal(AccelerationUnit.InchPerSecondSquared, quantity03.Unit);

            var quantity04 = Acceleration.From(1, AccelerationUnit.KilometerPerSecondSquared);
            Assert.Equal(1, quantity04.KilometersPerSecondSquared);
            Assert.Equal(AccelerationUnit.KilometerPerSecondSquared, quantity04.Unit);

            var quantity05 = Acceleration.From(1, AccelerationUnit.KnotPerHour);
            Assert.Equal(1, quantity05.KnotsPerHour);
            Assert.Equal(AccelerationUnit.KnotPerHour, quantity05.Unit);

            var quantity06 = Acceleration.From(1, AccelerationUnit.KnotPerMinute);
            Assert.Equal(1, quantity06.KnotsPerMinute);
            Assert.Equal(AccelerationUnit.KnotPerMinute, quantity06.Unit);

            var quantity07 = Acceleration.From(1, AccelerationUnit.KnotPerSecond);
            Assert.Equal(1, quantity07.KnotsPerSecond);
            Assert.Equal(AccelerationUnit.KnotPerSecond, quantity07.Unit);

            var quantity08 = Acceleration.From(1, AccelerationUnit.MeterPerSecondSquared);
            Assert.Equal(1, quantity08.MetersPerSecondSquared);
            Assert.Equal(AccelerationUnit.MeterPerSecondSquared, quantity08.Unit);

            var quantity09 = Acceleration.From(1, AccelerationUnit.MicrometerPerSecondSquared);
            Assert.Equal(1, quantity09.MicrometersPerSecondSquared);
            Assert.Equal(AccelerationUnit.MicrometerPerSecondSquared, quantity09.Unit);

            var quantity10 = Acceleration.From(1, AccelerationUnit.MillimeterPerSecondSquared);
            Assert.Equal(1, quantity10.MillimetersPerSecondSquared);
            Assert.Equal(AccelerationUnit.MillimeterPerSecondSquared, quantity10.Unit);

            var quantity11 = Acceleration.From(1, AccelerationUnit.MillistandardGravity);
            Assert.Equal(1, quantity11.MillistandardGravity);
            Assert.Equal(AccelerationUnit.MillistandardGravity, quantity11.Unit);

            var quantity12 = Acceleration.From(1, AccelerationUnit.NanometerPerSecondSquared);
            Assert.Equal(1, quantity12.NanometersPerSecondSquared);
            Assert.Equal(AccelerationUnit.NanometerPerSecondSquared, quantity12.Unit);

            var quantity13 = Acceleration.From(1, AccelerationUnit.StandardGravity);
            Assert.Equal(1, quantity13.StandardGravity);
            Assert.Equal(AccelerationUnit.StandardGravity, quantity13.Unit);

        }

        [Fact]
        public void FromMetersPerSecondSquared_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Acceleration.FromMetersPerSecondSquared(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Acceleration.FromMetersPerSecondSquared(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromMetersPerSecondSquared_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Acceleration.FromMetersPerSecondSquared(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            AssertEx.EqualTolerance(CentimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.CentimeterPerSecondSquared), CentimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(DecimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.DecimeterPerSecondSquared), DecimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(FeetPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.FootPerSecondSquared), FeetPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(InchesPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.InchPerSecondSquared), InchesPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KilometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.KilometerPerSecondSquared), KilometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(KnotsPerHourInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.KnotPerHour), KnotsPerHourTolerance);
            AssertEx.EqualTolerance(KnotsPerMinuteInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.KnotPerMinute), KnotsPerMinuteTolerance);
            AssertEx.EqualTolerance(KnotsPerSecondInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.KnotPerSecond), KnotsPerSecondTolerance);
            AssertEx.EqualTolerance(MetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.MeterPerSecondSquared), MetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MicrometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.MicrometerPerSecondSquared), MicrometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillimetersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.MillimeterPerSecondSquared), MillimetersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(MillistandardGravityInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.MillistandardGravity), MillistandardGravityTolerance);
            AssertEx.EqualTolerance(NanometersPerSecondSquaredInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.NanometerPerSecondSquared), NanometersPerSecondSquaredTolerance);
            AssertEx.EqualTolerance(StandardGravityInOneMeterPerSecondSquared, meterpersecondsquared.As(AccelerationUnit.StandardGravity), StandardGravityTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Acceleration.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
            var expectedValue = quantity.As(Acceleration.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
            var expectedUnit = Acceleration.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Acceleration quantityToConvert = quantity;

                Acceleration convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<AccelerationUnit> quantityToConvert = quantity;

                IQuantity<AccelerationUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);            
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() => 
            {
                var quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<AccelerationUnit> quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<AccelerationUnit> quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Acceleration(value: 1, unit: Acceleration.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cm/s²", AccelerationUnit.CentimeterPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 dm/s²", AccelerationUnit.DecimeterPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 ft/s²", AccelerationUnit.FootPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 in/s²", AccelerationUnit.InchPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 km/s²", AccelerationUnit.KilometerPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 kn/h", AccelerationUnit.KnotPerHour, 4.2)]
        [InlineData("en-US", "4.2 kn/min", AccelerationUnit.KnotPerMinute, 4.2)]
        [InlineData("en-US", "4.2 kn/s", AccelerationUnit.KnotPerSecond, 4.2)]
        [InlineData("en-US", "4.2 m/s²", AccelerationUnit.MeterPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 µm/s²", AccelerationUnit.MicrometerPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 mm/s²", AccelerationUnit.MillimeterPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 mg", AccelerationUnit.MillistandardGravity, 4.2)]
        [InlineData("en-US", "4.2 nm/s²", AccelerationUnit.NanometerPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 g", AccelerationUnit.StandardGravity, 4.2)]
        [InlineData("ru-RU", "4,2 см/с²", AccelerationUnit.CentimeterPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 дм/с²", AccelerationUnit.DecimeterPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 фут/с²", AccelerationUnit.FootPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 дюйм/с²", AccelerationUnit.InchPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 км/с²", AccelerationUnit.KilometerPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 узел/час", AccelerationUnit.KnotPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 узел/мин", AccelerationUnit.KnotPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 узел/с", AccelerationUnit.KnotPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 м/с²", AccelerationUnit.MeterPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 мкм/с²", AccelerationUnit.MicrometerPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 мм/с²", AccelerationUnit.MillimeterPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 мg", AccelerationUnit.MillistandardGravity, 4.2)]
        [InlineData("ru-RU", "4,2 нм/с²", AccelerationUnit.NanometerPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 g", AccelerationUnit.StandardGravity, 4.2)]
        public void Parse(string culture, string quantityString, AccelerationUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Acceleration.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 cm/s²", AccelerationUnit.CentimeterPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 dm/s²", AccelerationUnit.DecimeterPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 ft/s²", AccelerationUnit.FootPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 in/s²", AccelerationUnit.InchPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 km/s²", AccelerationUnit.KilometerPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 kn/h", AccelerationUnit.KnotPerHour, 4.2)]
        [InlineData("en-US", "4.2 kn/min", AccelerationUnit.KnotPerMinute, 4.2)]
        [InlineData("en-US", "4.2 kn/s", AccelerationUnit.KnotPerSecond, 4.2)]
        [InlineData("en-US", "4.2 m/s²", AccelerationUnit.MeterPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 µm/s²", AccelerationUnit.MicrometerPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 mm/s²", AccelerationUnit.MillimeterPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 mg", AccelerationUnit.MillistandardGravity, 4.2)]
        [InlineData("en-US", "4.2 nm/s²", AccelerationUnit.NanometerPerSecondSquared, 4.2)]
        [InlineData("en-US", "4.2 g", AccelerationUnit.StandardGravity, 4.2)]
        [InlineData("ru-RU", "4,2 см/с²", AccelerationUnit.CentimeterPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 дм/с²", AccelerationUnit.DecimeterPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 фут/с²", AccelerationUnit.FootPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 дюйм/с²", AccelerationUnit.InchPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 км/с²", AccelerationUnit.KilometerPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 узел/час", AccelerationUnit.KnotPerHour, 4.2)]
        [InlineData("ru-RU", "4,2 узел/мин", AccelerationUnit.KnotPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 узел/с", AccelerationUnit.KnotPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 м/с²", AccelerationUnit.MeterPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 мкм/с²", AccelerationUnit.MicrometerPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 мм/с²", AccelerationUnit.MillimeterPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 мg", AccelerationUnit.MillistandardGravity, 4.2)]
        [InlineData("ru-RU", "4,2 нм/с²", AccelerationUnit.NanometerPerSecondSquared, 4.2)]
        [InlineData("ru-RU", "4,2 g", AccelerationUnit.StandardGravity, 4.2)]
        public void TryParse(string culture, string quantityString, AccelerationUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Acceleration.TryParse(quantityString, out Acceleration parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("cm/s²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("dm/s²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("ft/s²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("in/s²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("km/s²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("kn/h", AccelerationUnit.KnotPerHour)]
        [InlineData("kn/min", AccelerationUnit.KnotPerMinute)]
        [InlineData("kn/s", AccelerationUnit.KnotPerSecond)]
        [InlineData("m/s²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("µm/s²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("mm/s²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("mg", AccelerationUnit.MillistandardGravity)]
        [InlineData("nm/s²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("g", AccelerationUnit.StandardGravity)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AccelerationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            AccelerationUnit parsedUnit = Acceleration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cm/s²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("dm/s²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("ft/s²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("in/s²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("km/s²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("kn/h", AccelerationUnit.KnotPerHour)]
        [InlineData("kn/min", AccelerationUnit.KnotPerMinute)]
        [InlineData("kn/s", AccelerationUnit.KnotPerSecond)]
        [InlineData("m/s²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("µm/s²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("mm/s²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("mg", AccelerationUnit.MillistandardGravity)]
        [InlineData("nm/s²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("g", AccelerationUnit.StandardGravity)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AccelerationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            AccelerationUnit parsedUnit = Acceleration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm/s²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("en-US", "dm/s²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("en-US", "ft/s²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("en-US", "in/s²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("en-US", "km/s²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("en-US", "kn/h", AccelerationUnit.KnotPerHour)]
        [InlineData("en-US", "kn/min", AccelerationUnit.KnotPerMinute)]
        [InlineData("en-US", "kn/s", AccelerationUnit.KnotPerSecond)]
        [InlineData("en-US", "m/s²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("en-US", "µm/s²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("en-US", "mm/s²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("en-US", "mg", AccelerationUnit.MillistandardGravity)]
        [InlineData("en-US", "nm/s²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("en-US", "g", AccelerationUnit.StandardGravity)]
        [InlineData("ru-RU", "см/с²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("ru-RU", "дм/с²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("ru-RU", "фут/с²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("ru-RU", "дюйм/с²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("ru-RU", "км/с²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("ru-RU", "узел/час", AccelerationUnit.KnotPerHour)]
        [InlineData("ru-RU", "узел/мин", AccelerationUnit.KnotPerMinute)]
        [InlineData("ru-RU", "узел/с", AccelerationUnit.KnotPerSecond)]
        [InlineData("ru-RU", "м/с²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("ru-RU", "мкм/с²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("ru-RU", "мм/с²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("ru-RU", "мg", AccelerationUnit.MillistandardGravity)]
        [InlineData("ru-RU", "нм/с²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("ru-RU", "g", AccelerationUnit.StandardGravity)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, AccelerationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            AccelerationUnit parsedUnit = Acceleration.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm/s²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("en-US", "dm/s²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("en-US", "ft/s²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("en-US", "in/s²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("en-US", "km/s²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("en-US", "kn/h", AccelerationUnit.KnotPerHour)]
        [InlineData("en-US", "kn/min", AccelerationUnit.KnotPerMinute)]
        [InlineData("en-US", "kn/s", AccelerationUnit.KnotPerSecond)]
        [InlineData("en-US", "m/s²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("en-US", "µm/s²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("en-US", "mm/s²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("en-US", "mg", AccelerationUnit.MillistandardGravity)]
        [InlineData("en-US", "nm/s²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("en-US", "g", AccelerationUnit.StandardGravity)]
        [InlineData("ru-RU", "см/с²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("ru-RU", "дм/с²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("ru-RU", "фут/с²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("ru-RU", "дюйм/с²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("ru-RU", "км/с²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("ru-RU", "узел/час", AccelerationUnit.KnotPerHour)]
        [InlineData("ru-RU", "узел/мин", AccelerationUnit.KnotPerMinute)]
        [InlineData("ru-RU", "узел/с", AccelerationUnit.KnotPerSecond)]
        [InlineData("ru-RU", "м/с²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("ru-RU", "мкм/с²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("ru-RU", "мм/с²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("ru-RU", "мg", AccelerationUnit.MillistandardGravity)]
        [InlineData("ru-RU", "нм/с²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("ru-RU", "g", AccelerationUnit.StandardGravity)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, AccelerationUnit expectedUnit)
        {
            AccelerationUnit parsedUnit = Acceleration.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cm/s²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("dm/s²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("ft/s²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("in/s²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("km/s²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("kn/h", AccelerationUnit.KnotPerHour)]
        [InlineData("kn/min", AccelerationUnit.KnotPerMinute)]
        [InlineData("kn/s", AccelerationUnit.KnotPerSecond)]
        [InlineData("m/s²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("µm/s²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("mm/s²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("mg", AccelerationUnit.MillistandardGravity)]
        [InlineData("nm/s²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("g", AccelerationUnit.StandardGravity)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AccelerationUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Acceleration.TryParseUnit(abbreviation, out AccelerationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cm/s²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("dm/s²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("ft/s²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("in/s²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("km/s²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("kn/h", AccelerationUnit.KnotPerHour)]
        [InlineData("kn/min", AccelerationUnit.KnotPerMinute)]
        [InlineData("kn/s", AccelerationUnit.KnotPerSecond)]
        [InlineData("m/s²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("µm/s²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("mm/s²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("mg", AccelerationUnit.MillistandardGravity)]
        [InlineData("nm/s²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("g", AccelerationUnit.StandardGravity)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AccelerationUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Acceleration.TryParseUnit(abbreviation, out AccelerationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm/s²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("en-US", "dm/s²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("en-US", "ft/s²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("en-US", "in/s²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("en-US", "km/s²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("en-US", "kn/h", AccelerationUnit.KnotPerHour)]
        [InlineData("en-US", "kn/min", AccelerationUnit.KnotPerMinute)]
        [InlineData("en-US", "kn/s", AccelerationUnit.KnotPerSecond)]
        [InlineData("en-US", "m/s²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("en-US", "µm/s²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("en-US", "mm/s²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("en-US", "mg", AccelerationUnit.MillistandardGravity)]
        [InlineData("en-US", "nm/s²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("en-US", "g", AccelerationUnit.StandardGravity)]
        [InlineData("ru-RU", "см/с²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("ru-RU", "дм/с²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("ru-RU", "фут/с²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("ru-RU", "дюйм/с²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("ru-RU", "км/с²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("ru-RU", "узел/час", AccelerationUnit.KnotPerHour)]
        [InlineData("ru-RU", "узел/мин", AccelerationUnit.KnotPerMinute)]
        [InlineData("ru-RU", "узел/с", AccelerationUnit.KnotPerSecond)]
        [InlineData("ru-RU", "м/с²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("ru-RU", "мкм/с²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("ru-RU", "мм/с²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("ru-RU", "мg", AccelerationUnit.MillistandardGravity)]
        [InlineData("ru-RU", "нм/с²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("ru-RU", "g", AccelerationUnit.StandardGravity)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, AccelerationUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Acceleration.TryParseUnit(abbreviation, out AccelerationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cm/s²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("en-US", "dm/s²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("en-US", "ft/s²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("en-US", "in/s²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("en-US", "km/s²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("en-US", "kn/h", AccelerationUnit.KnotPerHour)]
        [InlineData("en-US", "kn/min", AccelerationUnit.KnotPerMinute)]
        [InlineData("en-US", "kn/s", AccelerationUnit.KnotPerSecond)]
        [InlineData("en-US", "m/s²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("en-US", "µm/s²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("en-US", "mm/s²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("en-US", "mg", AccelerationUnit.MillistandardGravity)]
        [InlineData("en-US", "nm/s²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("en-US", "g", AccelerationUnit.StandardGravity)]
        [InlineData("ru-RU", "см/с²", AccelerationUnit.CentimeterPerSecondSquared)]
        [InlineData("ru-RU", "дм/с²", AccelerationUnit.DecimeterPerSecondSquared)]
        [InlineData("ru-RU", "фут/с²", AccelerationUnit.FootPerSecondSquared)]
        [InlineData("ru-RU", "дюйм/с²", AccelerationUnit.InchPerSecondSquared)]
        [InlineData("ru-RU", "км/с²", AccelerationUnit.KilometerPerSecondSquared)]
        [InlineData("ru-RU", "узел/час", AccelerationUnit.KnotPerHour)]
        [InlineData("ru-RU", "узел/мин", AccelerationUnit.KnotPerMinute)]
        [InlineData("ru-RU", "узел/с", AccelerationUnit.KnotPerSecond)]
        [InlineData("ru-RU", "м/с²", AccelerationUnit.MeterPerSecondSquared)]
        [InlineData("ru-RU", "мкм/с²", AccelerationUnit.MicrometerPerSecondSquared)]
        [InlineData("ru-RU", "мм/с²", AccelerationUnit.MillimeterPerSecondSquared)]
        [InlineData("ru-RU", "мg", AccelerationUnit.MillistandardGravity)]
        [InlineData("ru-RU", "нм/с²", AccelerationUnit.NanometerPerSecondSquared)]
        [InlineData("ru-RU", "g", AccelerationUnit.StandardGravity)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, AccelerationUnit expectedUnit)
        {
            Assert.True(Acceleration.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out AccelerationUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", AccelerationUnit.CentimeterPerSecondSquared, "cm/s²")]
        [InlineData("en-US", AccelerationUnit.DecimeterPerSecondSquared, "dm/s²")]
        [InlineData("en-US", AccelerationUnit.FootPerSecondSquared, "ft/s²")]
        [InlineData("en-US", AccelerationUnit.InchPerSecondSquared, "in/s²")]
        [InlineData("en-US", AccelerationUnit.KilometerPerSecondSquared, "km/s²")]
        [InlineData("en-US", AccelerationUnit.KnotPerHour, "kn/h")]
        [InlineData("en-US", AccelerationUnit.KnotPerMinute, "kn/min")]
        [InlineData("en-US", AccelerationUnit.KnotPerSecond, "kn/s")]
        [InlineData("en-US", AccelerationUnit.MeterPerSecondSquared, "m/s²")]
        [InlineData("en-US", AccelerationUnit.MicrometerPerSecondSquared, "µm/s²")]
        [InlineData("en-US", AccelerationUnit.MillimeterPerSecondSquared, "mm/s²")]
        [InlineData("en-US", AccelerationUnit.MillistandardGravity, "mg")]
        [InlineData("en-US", AccelerationUnit.NanometerPerSecondSquared, "nm/s²")]
        [InlineData("en-US", AccelerationUnit.StandardGravity, "g")]
        [InlineData("ru-RU", AccelerationUnit.CentimeterPerSecondSquared, "см/с²")]
        [InlineData("ru-RU", AccelerationUnit.DecimeterPerSecondSquared, "дм/с²")]
        [InlineData("ru-RU", AccelerationUnit.FootPerSecondSquared, "фут/с²")]
        [InlineData("ru-RU", AccelerationUnit.InchPerSecondSquared, "дюйм/с²")]
        [InlineData("ru-RU", AccelerationUnit.KilometerPerSecondSquared, "км/с²")]
        [InlineData("ru-RU", AccelerationUnit.KnotPerHour, "узел/час")]
        [InlineData("ru-RU", AccelerationUnit.KnotPerMinute, "узел/мин")]
        [InlineData("ru-RU", AccelerationUnit.KnotPerSecond, "узел/с")]
        [InlineData("ru-RU", AccelerationUnit.MeterPerSecondSquared, "м/с²")]
        [InlineData("ru-RU", AccelerationUnit.MicrometerPerSecondSquared, "мкм/с²")]
        [InlineData("ru-RU", AccelerationUnit.MillimeterPerSecondSquared, "мм/с²")]
        [InlineData("ru-RU", AccelerationUnit.MillistandardGravity, "мg")]
        [InlineData("ru-RU", AccelerationUnit.NanometerPerSecondSquared, "нм/с²")]
        [InlineData("ru-RU", AccelerationUnit.StandardGravity, "g")]
        public void GetAbbreviationForCulture(string culture, AccelerationUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Acceleration.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Acceleration.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Acceleration.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(AccelerationUnit unit)
        {
            var inBaseUnits = Acceleration.From(1.0, Acceleration.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(AccelerationUnit unit)
        {
            var quantity = Acceleration.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(AccelerationUnit unit)
        {
            Assert.All(Acceleration.Units.Where(u => u != Acceleration.BaseUnit), fromUnit =>
            {
                var quantity = Acceleration.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(AccelerationUnit unit)
        {
            var quantity = default(Acceleration);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(AccelerationUnit unit)
        {
            var quantity = Acceleration.From(3, Acceleration.BaseUnit);
            Acceleration expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<AccelerationUnit> quantityToConvert = quantity;
                IQuantity<AccelerationUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(3);
            Assert.Equal(3, Acceleration.FromCentimetersPerSecondSquared(meterpersecondsquared.CentimetersPerSecondSquared).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromDecimetersPerSecondSquared(meterpersecondsquared.DecimetersPerSecondSquared).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromFeetPerSecondSquared(meterpersecondsquared.FeetPerSecondSquared).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromInchesPerSecondSquared(meterpersecondsquared.InchesPerSecondSquared).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromKilometersPerSecondSquared(meterpersecondsquared.KilometersPerSecondSquared).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromKnotsPerHour(meterpersecondsquared.KnotsPerHour).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromKnotsPerMinute(meterpersecondsquared.KnotsPerMinute).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromKnotsPerSecond(meterpersecondsquared.KnotsPerSecond).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromMetersPerSecondSquared(meterpersecondsquared.MetersPerSecondSquared).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromMicrometersPerSecondSquared(meterpersecondsquared.MicrometersPerSecondSquared).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromMillimetersPerSecondSquared(meterpersecondsquared.MillimetersPerSecondSquared).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromMillistandardGravity(meterpersecondsquared.MillistandardGravity).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromNanometersPerSecondSquared(meterpersecondsquared.NanometersPerSecondSquared).MetersPerSecondSquared);
            Assert.Equal(3, Acceleration.FromStandardGravity(meterpersecondsquared.StandardGravity).MetersPerSecondSquared);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Acceleration v = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Equal(-1, -v.MetersPerSecondSquared);
            Assert.Equal(2, (Acceleration.FromMetersPerSecondSquared(3) - v).MetersPerSecondSquared);
            Assert.Equal(2, (v + v).MetersPerSecondSquared);
            Assert.Equal(10, (v * 10).MetersPerSecondSquared);
            Assert.Equal(10, (10 * v).MetersPerSecondSquared);
            Assert.Equal(2, (Acceleration.FromMetersPerSecondSquared(10) / 5).MetersPerSecondSquared);
            Assert.Equal(2, Acceleration.FromMetersPerSecondSquared(10) / Acceleration.FromMetersPerSecondSquared(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Acceleration oneMeterPerSecondSquared = Acceleration.FromMetersPerSecondSquared(1);
            Acceleration twoMetersPerSecondSquared = Acceleration.FromMetersPerSecondSquared(2);

            Assert.True(oneMeterPerSecondSquared < twoMetersPerSecondSquared);
            Assert.True(oneMeterPerSecondSquared <= twoMetersPerSecondSquared);
            Assert.True(twoMetersPerSecondSquared > oneMeterPerSecondSquared);
            Assert.True(twoMetersPerSecondSquared >= oneMeterPerSecondSquared);

            Assert.False(oneMeterPerSecondSquared > twoMetersPerSecondSquared);
            Assert.False(oneMeterPerSecondSquared >= twoMetersPerSecondSquared);
            Assert.False(twoMetersPerSecondSquared < oneMeterPerSecondSquared);
            Assert.False(twoMetersPerSecondSquared <= oneMeterPerSecondSquared);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Equal(0, meterpersecondsquared.CompareTo(meterpersecondsquared));
            Assert.True(meterpersecondsquared.CompareTo(Acceleration.Zero) > 0);
            Assert.True(Acceleration.Zero.CompareTo(meterpersecondsquared) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Throws<ArgumentException>(() => meterpersecondsquared.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.Throws<ArgumentNullException>(() => meterpersecondsquared.CompareTo(null));
        }

        [Theory]
        [InlineData(1, AccelerationUnit.MeterPerSecondSquared, 1, AccelerationUnit.MeterPerSecondSquared, true)]  // Same value and unit.
        [InlineData(1, AccelerationUnit.MeterPerSecondSquared, 2, AccelerationUnit.MeterPerSecondSquared, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, AccelerationUnit unitA, double valueB, AccelerationUnit unitB, bool expectEqual)
        {
            var a = new Acceleration(valueA, unitA);
            var b = new Acceleration(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Acceleration.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.False(meterpersecondsquared.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Acceleration meterpersecondsquared = Acceleration.FromMetersPerSecondSquared(1);
            Assert.False(meterpersecondsquared.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance_IsImplemented(double firstValue, double secondValue)
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(firstValue);
            var otherQuantity = Acceleration.FromMetersPerSecondSquared(secondValue);
            Acceleration maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Acceleration.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1);
            var negativeTolerance = Acceleration.FromMetersPerSecondSquared(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues(typeof(AccelerationUnit)).Cast<AccelerationUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Acceleration.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Acceleration.Info.Units, Acceleration.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Acceleration.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cm/s²", new Acceleration(1, AccelerationUnit.CentimeterPerSecondSquared).ToString());
            Assert.Equal("1 dm/s²", new Acceleration(1, AccelerationUnit.DecimeterPerSecondSquared).ToString());
            Assert.Equal("1 ft/s²", new Acceleration(1, AccelerationUnit.FootPerSecondSquared).ToString());
            Assert.Equal("1 in/s²", new Acceleration(1, AccelerationUnit.InchPerSecondSquared).ToString());
            Assert.Equal("1 km/s²", new Acceleration(1, AccelerationUnit.KilometerPerSecondSquared).ToString());
            Assert.Equal("1 kn/h", new Acceleration(1, AccelerationUnit.KnotPerHour).ToString());
            Assert.Equal("1 kn/min", new Acceleration(1, AccelerationUnit.KnotPerMinute).ToString());
            Assert.Equal("1 kn/s", new Acceleration(1, AccelerationUnit.KnotPerSecond).ToString());
            Assert.Equal("1 m/s²", new Acceleration(1, AccelerationUnit.MeterPerSecondSquared).ToString());
            Assert.Equal("1 µm/s²", new Acceleration(1, AccelerationUnit.MicrometerPerSecondSquared).ToString());
            Assert.Equal("1 mm/s²", new Acceleration(1, AccelerationUnit.MillimeterPerSecondSquared).ToString());
            Assert.Equal("1 mg", new Acceleration(1, AccelerationUnit.MillistandardGravity).ToString());
            Assert.Equal("1 nm/s²", new Acceleration(1, AccelerationUnit.NanometerPerSecondSquared).ToString());
            Assert.Equal("1 g", new Acceleration(1, AccelerationUnit.StandardGravity).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cm/s²", new Acceleration(1, AccelerationUnit.CentimeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 dm/s²", new Acceleration(1, AccelerationUnit.DecimeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 ft/s²", new Acceleration(1, AccelerationUnit.FootPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 in/s²", new Acceleration(1, AccelerationUnit.InchPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 km/s²", new Acceleration(1, AccelerationUnit.KilometerPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 kn/h", new Acceleration(1, AccelerationUnit.KnotPerHour).ToString(swedishCulture));
            Assert.Equal("1 kn/min", new Acceleration(1, AccelerationUnit.KnotPerMinute).ToString(swedishCulture));
            Assert.Equal("1 kn/s", new Acceleration(1, AccelerationUnit.KnotPerSecond).ToString(swedishCulture));
            Assert.Equal("1 m/s²", new Acceleration(1, AccelerationUnit.MeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 µm/s²", new Acceleration(1, AccelerationUnit.MicrometerPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 mm/s²", new Acceleration(1, AccelerationUnit.MillimeterPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 mg", new Acceleration(1, AccelerationUnit.MillistandardGravity).ToString(swedishCulture));
            Assert.Equal("1 nm/s²", new Acceleration(1, AccelerationUnit.NanometerPerSecondSquared).ToString(swedishCulture));
            Assert.Equal("1 g", new Acceleration(1, AccelerationUnit.StandardGravity).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s1"));
            Assert.Equal("0.12 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s2"));
            Assert.Equal("0.123 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s3"));
            Assert.Equal("0.1235 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s1", culture));
            Assert.Equal("0.12 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s2", culture));
            Assert.Equal("0.123 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s3", culture));
            Assert.Equal("0.1235 m/s²", new Acceleration(0.123456, AccelerationUnit.MeterPerSecondSquared).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(1.0);
            var expected = Comparison.GetHashCode(typeof(Acceleration), quantity.As(Acceleration.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Acceleration.FromMetersPerSecondSquared(value);
            Assert.Equal(Acceleration.FromMetersPerSecondSquared(-value), -quantity);
        }
    }
}
