//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToLength
{
    /// <summary>
    /// A number to Length Extensions
    /// </summary>
    public static class NumberToLengthExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Length.FromAngstroms(QuantityValue)" />
            public Length Angstroms
#if NET7_0_OR_GREATER
                => Length.FromAngstroms(QuantityValue.CreateChecked(value));
#else
                => Length.FromAngstroms(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromAstronomicalUnits(QuantityValue)" />
            public Length AstronomicalUnits
#if NET7_0_OR_GREATER
                => Length.FromAstronomicalUnits(QuantityValue.CreateChecked(value));
#else
                => Length.FromAstronomicalUnits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromCentimeters(QuantityValue)" />
            public Length Centimeters
#if NET7_0_OR_GREATER
                => Length.FromCentimeters(QuantityValue.CreateChecked(value));
#else
                => Length.FromCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromChains(QuantityValue)" />
            public Length Chains
#if NET7_0_OR_GREATER
                => Length.FromChains(QuantityValue.CreateChecked(value));
#else
                => Length.FromChains(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromDataMiles(QuantityValue)" />
            public Length DataMiles
#if NET7_0_OR_GREATER
                => Length.FromDataMiles(QuantityValue.CreateChecked(value));
#else
                => Length.FromDataMiles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromDecameters(QuantityValue)" />
            public Length Decameters
#if NET7_0_OR_GREATER
                => Length.FromDecameters(QuantityValue.CreateChecked(value));
#else
                => Length.FromDecameters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromDecimeters(QuantityValue)" />
            public Length Decimeters
#if NET7_0_OR_GREATER
                => Length.FromDecimeters(QuantityValue.CreateChecked(value));
#else
                => Length.FromDecimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromDtpPicas(QuantityValue)" />
            public Length DtpPicas
#if NET7_0_OR_GREATER
                => Length.FromDtpPicas(QuantityValue.CreateChecked(value));
#else
                => Length.FromDtpPicas(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromDtpPoints(QuantityValue)" />
            public Length DtpPoints
#if NET7_0_OR_GREATER
                => Length.FromDtpPoints(QuantityValue.CreateChecked(value));
#else
                => Length.FromDtpPoints(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromFathoms(QuantityValue)" />
            public Length Fathoms
#if NET7_0_OR_GREATER
                => Length.FromFathoms(QuantityValue.CreateChecked(value));
#else
                => Length.FromFathoms(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromFemtometers(QuantityValue)" />
            public Length Femtometers
#if NET7_0_OR_GREATER
                => Length.FromFemtometers(QuantityValue.CreateChecked(value));
#else
                => Length.FromFemtometers(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromFeet(QuantityValue)" />
            public Length Feet
#if NET7_0_OR_GREATER
                => Length.FromFeet(QuantityValue.CreateChecked(value));
#else
                => Length.FromFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromGigameters(QuantityValue)" />
            public Length Gigameters
#if NET7_0_OR_GREATER
                => Length.FromGigameters(QuantityValue.CreateChecked(value));
#else
                => Length.FromGigameters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromHands(QuantityValue)" />
            public Length Hands
#if NET7_0_OR_GREATER
                => Length.FromHands(QuantityValue.CreateChecked(value));
#else
                => Length.FromHands(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromHectometers(QuantityValue)" />
            public Length Hectometers
#if NET7_0_OR_GREATER
                => Length.FromHectometers(QuantityValue.CreateChecked(value));
#else
                => Length.FromHectometers(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromInches(QuantityValue)" />
            public Length Inches
#if NET7_0_OR_GREATER
                => Length.FromInches(QuantityValue.CreateChecked(value));
#else
                => Length.FromInches(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromKilofeet(QuantityValue)" />
            public Length Kilofeet
#if NET7_0_OR_GREATER
                => Length.FromKilofeet(QuantityValue.CreateChecked(value));
#else
                => Length.FromKilofeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromKilolightYears(QuantityValue)" />
            public Length KilolightYears
#if NET7_0_OR_GREATER
                => Length.FromKilolightYears(QuantityValue.CreateChecked(value));
#else
                => Length.FromKilolightYears(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromKilometers(QuantityValue)" />
            public Length Kilometers
#if NET7_0_OR_GREATER
                => Length.FromKilometers(QuantityValue.CreateChecked(value));
#else
                => Length.FromKilometers(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromKiloparsecs(QuantityValue)" />
            public Length Kiloparsecs
#if NET7_0_OR_GREATER
                => Length.FromKiloparsecs(QuantityValue.CreateChecked(value));
#else
                => Length.FromKiloparsecs(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromKiloyards(QuantityValue)" />
            public Length Kiloyards
#if NET7_0_OR_GREATER
                => Length.FromKiloyards(QuantityValue.CreateChecked(value));
#else
                => Length.FromKiloyards(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromLightYears(QuantityValue)" />
            public Length LightYears
#if NET7_0_OR_GREATER
                => Length.FromLightYears(QuantityValue.CreateChecked(value));
#else
                => Length.FromLightYears(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromMegalightYears(QuantityValue)" />
            public Length MegalightYears
#if NET7_0_OR_GREATER
                => Length.FromMegalightYears(QuantityValue.CreateChecked(value));
#else
                => Length.FromMegalightYears(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromMegameters(QuantityValue)" />
            public Length Megameters
#if NET7_0_OR_GREATER
                => Length.FromMegameters(QuantityValue.CreateChecked(value));
#else
                => Length.FromMegameters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromMegaparsecs(QuantityValue)" />
            public Length Megaparsecs
#if NET7_0_OR_GREATER
                => Length.FromMegaparsecs(QuantityValue.CreateChecked(value));
#else
                => Length.FromMegaparsecs(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromMeters(QuantityValue)" />
            public Length Meters
#if NET7_0_OR_GREATER
                => Length.FromMeters(QuantityValue.CreateChecked(value));
#else
                => Length.FromMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromMicroinches(QuantityValue)" />
            public Length Microinches
#if NET7_0_OR_GREATER
                => Length.FromMicroinches(QuantityValue.CreateChecked(value));
#else
                => Length.FromMicroinches(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromMicrometers(QuantityValue)" />
            public Length Micrometers
#if NET7_0_OR_GREATER
                => Length.FromMicrometers(QuantityValue.CreateChecked(value));
#else
                => Length.FromMicrometers(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromMils(QuantityValue)" />
            public Length Mils
#if NET7_0_OR_GREATER
                => Length.FromMils(QuantityValue.CreateChecked(value));
#else
                => Length.FromMils(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromMiles(QuantityValue)" />
            public Length Miles
#if NET7_0_OR_GREATER
                => Length.FromMiles(QuantityValue.CreateChecked(value));
#else
                => Length.FromMiles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromMillimeters(QuantityValue)" />
            public Length Millimeters
#if NET7_0_OR_GREATER
                => Length.FromMillimeters(QuantityValue.CreateChecked(value));
#else
                => Length.FromMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromNanometers(QuantityValue)" />
            public Length Nanometers
#if NET7_0_OR_GREATER
                => Length.FromNanometers(QuantityValue.CreateChecked(value));
#else
                => Length.FromNanometers(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromNauticalMiles(QuantityValue)" />
            public Length NauticalMiles
#if NET7_0_OR_GREATER
                => Length.FromNauticalMiles(QuantityValue.CreateChecked(value));
#else
                => Length.FromNauticalMiles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromParsecs(QuantityValue)" />
            public Length Parsecs
#if NET7_0_OR_GREATER
                => Length.FromParsecs(QuantityValue.CreateChecked(value));
#else
                => Length.FromParsecs(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromPicometers(QuantityValue)" />
            public Length Picometers
#if NET7_0_OR_GREATER
                => Length.FromPicometers(QuantityValue.CreateChecked(value));
#else
                => Length.FromPicometers(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromPrinterPicas(QuantityValue)" />
            public Length PrinterPicas
#if NET7_0_OR_GREATER
                => Length.FromPrinterPicas(QuantityValue.CreateChecked(value));
#else
                => Length.FromPrinterPicas(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromPrinterPoints(QuantityValue)" />
            public Length PrinterPoints
#if NET7_0_OR_GREATER
                => Length.FromPrinterPoints(QuantityValue.CreateChecked(value));
#else
                => Length.FromPrinterPoints(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromShackles(QuantityValue)" />
            public Length Shackles
#if NET7_0_OR_GREATER
                => Length.FromShackles(QuantityValue.CreateChecked(value));
#else
                => Length.FromShackles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromSolarRadiuses(QuantityValue)" />
            public Length SolarRadiuses
#if NET7_0_OR_GREATER
                => Length.FromSolarRadiuses(QuantityValue.CreateChecked(value));
#else
                => Length.FromSolarRadiuses(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromTwips(QuantityValue)" />
            public Length Twips
#if NET7_0_OR_GREATER
                => Length.FromTwips(QuantityValue.CreateChecked(value));
#else
                => Length.FromTwips(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromUsSurveyFeet(QuantityValue)" />
            public Length UsSurveyFeet
#if NET7_0_OR_GREATER
                => Length.FromUsSurveyFeet(QuantityValue.CreateChecked(value));
#else
                => Length.FromUsSurveyFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Length.FromYards(QuantityValue)" />
            public Length Yards
#if NET7_0_OR_GREATER
                => Length.FromYards(QuantityValue.CreateChecked(value));
#else
                => Length.FromYards(value.ToQuantityValue());
#endif

        }
    }
}
