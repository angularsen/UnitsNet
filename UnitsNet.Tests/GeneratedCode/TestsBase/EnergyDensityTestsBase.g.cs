//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of EnergyDensity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class EnergyDensityTestsBase : QuantityTestsBase
    {
        protected abstract double GigajoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double GigawattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double JoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double KilojoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double KilowattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double MegajoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double MegawattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double PetajoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double PetawattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double TerajoulesPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double TerawattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }
        protected abstract double WattHoursPerCubicMeterInOneJoulePerCubicMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GigajoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PetajoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double PetawattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double TerajoulesPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double TerawattHoursPerCubicMeterTolerance { get { return 1e-5; } }
        protected virtual double WattHoursPerCubicMeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(EnergyDensityUnit unit)
        {
            return unit switch
            {
                EnergyDensityUnit.GigajoulePerCubicMeter => (GigajoulesPerCubicMeterInOneJoulePerCubicMeter, GigajoulesPerCubicMeterTolerance),
                EnergyDensityUnit.GigawattHourPerCubicMeter => (GigawattHoursPerCubicMeterInOneJoulePerCubicMeter, GigawattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.JoulePerCubicMeter => (JoulesPerCubicMeterInOneJoulePerCubicMeter, JoulesPerCubicMeterTolerance),
                EnergyDensityUnit.KilojoulePerCubicMeter => (KilojoulesPerCubicMeterInOneJoulePerCubicMeter, KilojoulesPerCubicMeterTolerance),
                EnergyDensityUnit.KilowattHourPerCubicMeter => (KilowattHoursPerCubicMeterInOneJoulePerCubicMeter, KilowattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.MegajoulePerCubicMeter => (MegajoulesPerCubicMeterInOneJoulePerCubicMeter, MegajoulesPerCubicMeterTolerance),
                EnergyDensityUnit.MegawattHourPerCubicMeter => (MegawattHoursPerCubicMeterInOneJoulePerCubicMeter, MegawattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.PetajoulePerCubicMeter => (PetajoulesPerCubicMeterInOneJoulePerCubicMeter, PetajoulesPerCubicMeterTolerance),
                EnergyDensityUnit.PetawattHourPerCubicMeter => (PetawattHoursPerCubicMeterInOneJoulePerCubicMeter, PetawattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.TerajoulePerCubicMeter => (TerajoulesPerCubicMeterInOneJoulePerCubicMeter, TerajoulesPerCubicMeterTolerance),
                EnergyDensityUnit.TerawattHourPerCubicMeter => (TerawattHoursPerCubicMeterInOneJoulePerCubicMeter, TerawattHoursPerCubicMeterTolerance),
                EnergyDensityUnit.WattHourPerCubicMeter => (WattHoursPerCubicMeterInOneJoulePerCubicMeter, WattHoursPerCubicMeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { EnergyDensityUnit.GigajoulePerCubicMeter },
            new object[] { EnergyDensityUnit.GigawattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.JoulePerCubicMeter },
            new object[] { EnergyDensityUnit.KilojoulePerCubicMeter },
            new object[] { EnergyDensityUnit.KilowattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.MegajoulePerCubicMeter },
            new object[] { EnergyDensityUnit.MegawattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.PetajoulePerCubicMeter },
            new object[] { EnergyDensityUnit.PetawattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.TerajoulePerCubicMeter },
            new object[] { EnergyDensityUnit.TerawattHourPerCubicMeter },
            new object[] { EnergyDensityUnit.WattHourPerCubicMeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new EnergyDensity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(EnergyDensityUnit.JoulePerCubicMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new EnergyDensity(double.PositiveInfinity, EnergyDensityUnit.JoulePerCubicMeter));
            var exception2 = Record.Exception(() => new EnergyDensity(double.NegativeInfinity, EnergyDensityUnit.JoulePerCubicMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new EnergyDensity(double.NaN, EnergyDensityUnit.JoulePerCubicMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new EnergyDensity(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new EnergyDensity(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new EnergyDensity(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void EnergyDensity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            EnergyDensityUnit[] unitsOrderedByName = EnumHelper.GetValues<EnergyDensityUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new EnergyDensity(1, EnergyDensityUnit.JoulePerCubicMeter);

            QuantityInfo<EnergyDensity, EnergyDensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("EnergyDensity", quantityInfo.Name);
            Assert.Equal(EnergyDensity.Zero, quantityInfo.Zero);
            Assert.Equal(EnergyDensity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(EnergyDensity.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<EnergyDensityUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void EnergyDensityInfo_CreateWithCustomUnitInfos()
        {
            EnergyDensityUnit[] expectedUnits = [EnergyDensityUnit.JoulePerCubicMeter];

            EnergyDensity.EnergyDensityInfo quantityInfo = EnergyDensity.EnergyDensityInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("EnergyDensity", quantityInfo.Name);
            Assert.Equal(EnergyDensity.Zero, quantityInfo.Zero);
            Assert.Equal(EnergyDensity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void JoulePerCubicMeterToEnergyDensityUnits()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            AssertEx.EqualTolerance(GigajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.GigajoulesPerCubicMeter, GigajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.GigawattHoursPerCubicMeter, GigawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(JoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.JoulesPerCubicMeter, JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilojoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.KilojoulesPerCubicMeter, KilojoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.KilowattHoursPerCubicMeter, KilowattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.MegajoulesPerCubicMeter, MegajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.MegawattHoursPerCubicMeter, MegawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PetajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.PetajoulesPerCubicMeter, PetajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PetawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.PetawattHoursPerCubicMeter, PetawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.TerajoulesPerCubicMeter, TerajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.TerawattHoursPerCubicMeter, TerawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(WattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.WattHoursPerCubicMeter, WattHoursPerCubicMeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<EnergyDensityUnit>(), unit =>
            {
                var quantity = EnergyDensity.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromJoulesPerCubicMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => EnergyDensity.FromJoulesPerCubicMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => EnergyDensity.FromJoulesPerCubicMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromJoulesPerCubicMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => EnergyDensity.FromJoulesPerCubicMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            AssertEx.EqualTolerance(GigajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.GigajoulePerCubicMeter), GigajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(GigawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.GigawattHourPerCubicMeter), GigawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(JoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.JoulePerCubicMeter), JoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilojoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.KilojoulePerCubicMeter), KilojoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(KilowattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.KilowattHourPerCubicMeter), KilowattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.MegajoulePerCubicMeter), MegajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(MegawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.MegawattHourPerCubicMeter), MegawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PetajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.PetajoulePerCubicMeter), PetajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(PetawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.PetawattHourPerCubicMeter), PetawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerajoulesPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.TerajoulePerCubicMeter), TerajoulesPerCubicMeterTolerance);
            AssertEx.EqualTolerance(TerawattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.TerawattHourPerCubicMeter), TerawattHoursPerCubicMeterTolerance);
            AssertEx.EqualTolerance(WattHoursPerCubicMeterInOneJoulePerCubicMeter, joulepercubicmeter.As(EnergyDensityUnit.WattHourPerCubicMeter), WattHoursPerCubicMeterTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = EnergyDensity.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
            var expectedValue = quantity.As(EnergyDensity.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
            var expectedUnit = EnergyDensity.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                EnergyDensity quantityToConvert = quantity;

                EnergyDensity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<EnergyDensityUnit> quantityToConvert = quantity;

                IQuantity<EnergyDensityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<EnergyDensityUnit> quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<EnergyDensityUnit> quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new EnergyDensity(value: 1, unit: EnergyDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 J/m³", EnergyDensityUnit.JoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter, 4.2)]
        public void Parse(string culture, string quantityString, EnergyDensityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = EnergyDensity.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 J/m³", EnergyDensityUnit.JoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter, 4.2)]
        [InlineData("en-US", "4.2 Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter, 4.2)]
        public void TryParse(string culture, string quantityString, EnergyDensityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(EnergyDensity.TryParse(quantityString, out EnergyDensity parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter)]
        [InlineData("GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter)]
        [InlineData("J/m³", EnergyDensityUnit.JoulePerCubicMeter)]
        [InlineData("kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter)]
        [InlineData("kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter)]
        [InlineData("MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter)]
        [InlineData("MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter)]
        [InlineData("PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter)]
        [InlineData("PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter)]
        [InlineData("TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter)]
        [InlineData("TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter)]
        [InlineData("Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, EnergyDensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            EnergyDensityUnit parsedUnit = EnergyDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter)]
        [InlineData("GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter)]
        [InlineData("J/m³", EnergyDensityUnit.JoulePerCubicMeter)]
        [InlineData("kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter)]
        [InlineData("kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter)]
        [InlineData("MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter)]
        [InlineData("MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter)]
        [InlineData("PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter)]
        [InlineData("PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter)]
        [InlineData("TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter)]
        [InlineData("TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter)]
        [InlineData("Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, EnergyDensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            EnergyDensityUnit parsedUnit = EnergyDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter)]
        [InlineData("en-US", "GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter)]
        [InlineData("en-US", "J/m³", EnergyDensityUnit.JoulePerCubicMeter)]
        [InlineData("en-US", "kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter)]
        [InlineData("en-US", "kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter)]
        [InlineData("en-US", "MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter)]
        [InlineData("en-US", "MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter)]
        [InlineData("en-US", "PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter)]
        [InlineData("en-US", "PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter)]
        [InlineData("en-US", "TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter)]
        [InlineData("en-US", "TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter)]
        [InlineData("en-US", "Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, EnergyDensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            EnergyDensityUnit parsedUnit = EnergyDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter)]
        [InlineData("en-US", "GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter)]
        [InlineData("en-US", "J/m³", EnergyDensityUnit.JoulePerCubicMeter)]
        [InlineData("en-US", "kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter)]
        [InlineData("en-US", "kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter)]
        [InlineData("en-US", "MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter)]
        [InlineData("en-US", "MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter)]
        [InlineData("en-US", "PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter)]
        [InlineData("en-US", "PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter)]
        [InlineData("en-US", "TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter)]
        [InlineData("en-US", "TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter)]
        [InlineData("en-US", "Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, EnergyDensityUnit expectedUnit)
        {
            EnergyDensityUnit parsedUnit = EnergyDensity.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter)]
        [InlineData("GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter)]
        [InlineData("J/m³", EnergyDensityUnit.JoulePerCubicMeter)]
        [InlineData("kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter)]
        [InlineData("kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter)]
        [InlineData("MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter)]
        [InlineData("MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter)]
        [InlineData("PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter)]
        [InlineData("PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter)]
        [InlineData("TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter)]
        [InlineData("TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter)]
        [InlineData("Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, EnergyDensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(EnergyDensity.TryParseUnit(abbreviation, out EnergyDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter)]
        [InlineData("GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter)]
        [InlineData("J/m³", EnergyDensityUnit.JoulePerCubicMeter)]
        [InlineData("kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter)]
        [InlineData("kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter)]
        [InlineData("MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter)]
        [InlineData("MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter)]
        [InlineData("PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter)]
        [InlineData("PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter)]
        [InlineData("TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter)]
        [InlineData("TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter)]
        [InlineData("Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, EnergyDensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(EnergyDensity.TryParseUnit(abbreviation, out EnergyDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter)]
        [InlineData("en-US", "GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter)]
        [InlineData("en-US", "J/m³", EnergyDensityUnit.JoulePerCubicMeter)]
        [InlineData("en-US", "kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter)]
        [InlineData("en-US", "kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter)]
        [InlineData("en-US", "MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter)]
        [InlineData("en-US", "MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter)]
        [InlineData("en-US", "PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter)]
        [InlineData("en-US", "PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter)]
        [InlineData("en-US", "TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter)]
        [InlineData("en-US", "TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter)]
        [InlineData("en-US", "Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, EnergyDensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(EnergyDensity.TryParseUnit(abbreviation, out EnergyDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GJ/m³", EnergyDensityUnit.GigajoulePerCubicMeter)]
        [InlineData("en-US", "GWh/m³", EnergyDensityUnit.GigawattHourPerCubicMeter)]
        [InlineData("en-US", "J/m³", EnergyDensityUnit.JoulePerCubicMeter)]
        [InlineData("en-US", "kJ/m³", EnergyDensityUnit.KilojoulePerCubicMeter)]
        [InlineData("en-US", "kWh/m³", EnergyDensityUnit.KilowattHourPerCubicMeter)]
        [InlineData("en-US", "MJ/m³", EnergyDensityUnit.MegajoulePerCubicMeter)]
        [InlineData("en-US", "MWh/m³", EnergyDensityUnit.MegawattHourPerCubicMeter)]
        [InlineData("en-US", "PJ/m³", EnergyDensityUnit.PetajoulePerCubicMeter)]
        [InlineData("en-US", "PWh/m³", EnergyDensityUnit.PetawattHourPerCubicMeter)]
        [InlineData("en-US", "TJ/m³", EnergyDensityUnit.TerajoulePerCubicMeter)]
        [InlineData("en-US", "TWh/m³", EnergyDensityUnit.TerawattHourPerCubicMeter)]
        [InlineData("en-US", "Wh/m³", EnergyDensityUnit.WattHourPerCubicMeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, EnergyDensityUnit expectedUnit)
        {
            Assert.True(EnergyDensity.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out EnergyDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", EnergyDensityUnit.GigajoulePerCubicMeter, "GJ/m³")]
        [InlineData("en-US", EnergyDensityUnit.GigawattHourPerCubicMeter, "GWh/m³")]
        [InlineData("en-US", EnergyDensityUnit.JoulePerCubicMeter, "J/m³")]
        [InlineData("en-US", EnergyDensityUnit.KilojoulePerCubicMeter, "kJ/m³")]
        [InlineData("en-US", EnergyDensityUnit.KilowattHourPerCubicMeter, "kWh/m³")]
        [InlineData("en-US", EnergyDensityUnit.MegajoulePerCubicMeter, "MJ/m³")]
        [InlineData("en-US", EnergyDensityUnit.MegawattHourPerCubicMeter, "MWh/m³")]
        [InlineData("en-US", EnergyDensityUnit.PetajoulePerCubicMeter, "PJ/m³")]
        [InlineData("en-US", EnergyDensityUnit.PetawattHourPerCubicMeter, "PWh/m³")]
        [InlineData("en-US", EnergyDensityUnit.TerajoulePerCubicMeter, "TJ/m³")]
        [InlineData("en-US", EnergyDensityUnit.TerawattHourPerCubicMeter, "TWh/m³")]
        [InlineData("en-US", EnergyDensityUnit.WattHourPerCubicMeter, "Wh/m³")]
        public void GetAbbreviationForCulture(string culture, EnergyDensityUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = EnergyDensity.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(EnergyDensity.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = EnergyDensity.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(EnergyDensityUnit unit)
        {
            var inBaseUnits = EnergyDensity.From(1.0, EnergyDensity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(EnergyDensityUnit unit)
        {
            var quantity = EnergyDensity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(EnergyDensityUnit unit)
        {
            Assert.All(EnergyDensity.Units.Where(u => u != EnergyDensity.BaseUnit), fromUnit =>
            {
                var quantity = EnergyDensity.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(EnergyDensityUnit unit)
        {
            var quantity = default(EnergyDensity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(EnergyDensityUnit unit)
        {
            var quantity = EnergyDensity.From(3, EnergyDensity.BaseUnit);
            EnergyDensity expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<EnergyDensityUnit> quantityToConvert = quantity;
                IQuantity<EnergyDensityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(3);
            Assert.Equal(3, EnergyDensity.FromGigajoulesPerCubicMeter(joulepercubicmeter.GigajoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromGigawattHoursPerCubicMeter(joulepercubicmeter.GigawattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromJoulesPerCubicMeter(joulepercubicmeter.JoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromKilojoulesPerCubicMeter(joulepercubicmeter.KilojoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromKilowattHoursPerCubicMeter(joulepercubicmeter.KilowattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromMegajoulesPerCubicMeter(joulepercubicmeter.MegajoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromMegawattHoursPerCubicMeter(joulepercubicmeter.MegawattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromPetajoulesPerCubicMeter(joulepercubicmeter.PetajoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromPetawattHoursPerCubicMeter(joulepercubicmeter.PetawattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromTerajoulesPerCubicMeter(joulepercubicmeter.TerajoulesPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromTerawattHoursPerCubicMeter(joulepercubicmeter.TerawattHoursPerCubicMeter).JoulesPerCubicMeter);
            Assert.Equal(3, EnergyDensity.FromWattHoursPerCubicMeter(joulepercubicmeter.WattHoursPerCubicMeter).JoulesPerCubicMeter);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            EnergyDensity v = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Equal(-1, -v.JoulesPerCubicMeter);
            Assert.Equal(2, (EnergyDensity.FromJoulesPerCubicMeter(3) - v).JoulesPerCubicMeter);
            Assert.Equal(2, (v + v).JoulesPerCubicMeter);
            Assert.Equal(10, (v * 10).JoulesPerCubicMeter);
            Assert.Equal(10, (10 * v).JoulesPerCubicMeter);
            Assert.Equal(2, (EnergyDensity.FromJoulesPerCubicMeter(10) / 5).JoulesPerCubicMeter);
            Assert.Equal(2, EnergyDensity.FromJoulesPerCubicMeter(10) / EnergyDensity.FromJoulesPerCubicMeter(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            EnergyDensity oneJoulePerCubicMeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            EnergyDensity twoJoulesPerCubicMeter = EnergyDensity.FromJoulesPerCubicMeter(2);

            Assert.True(oneJoulePerCubicMeter < twoJoulesPerCubicMeter);
            Assert.True(oneJoulePerCubicMeter <= twoJoulesPerCubicMeter);
            Assert.True(twoJoulesPerCubicMeter > oneJoulePerCubicMeter);
            Assert.True(twoJoulesPerCubicMeter >= oneJoulePerCubicMeter);

            Assert.False(oneJoulePerCubicMeter > twoJoulesPerCubicMeter);
            Assert.False(oneJoulePerCubicMeter >= twoJoulesPerCubicMeter);
            Assert.False(twoJoulesPerCubicMeter < oneJoulePerCubicMeter);
            Assert.False(twoJoulesPerCubicMeter <= oneJoulePerCubicMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Equal(0, joulepercubicmeter.CompareTo(joulepercubicmeter));
            Assert.True(joulepercubicmeter.CompareTo(EnergyDensity.Zero) > 0);
            Assert.True(EnergyDensity.Zero.CompareTo(joulepercubicmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Throws<ArgumentException>(() => joulepercubicmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.Throws<ArgumentNullException>(() => joulepercubicmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, EnergyDensityUnit.JoulePerCubicMeter, 1, EnergyDensityUnit.JoulePerCubicMeter, true)]  // Same value and unit.
        [InlineData(1, EnergyDensityUnit.JoulePerCubicMeter, 2, EnergyDensityUnit.JoulePerCubicMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, EnergyDensityUnit unitA, double valueB, EnergyDensityUnit unitB, bool expectEqual)
        {
            var a = new EnergyDensity(valueA, unitA);
            var b = new EnergyDensity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = EnergyDensity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.False(joulepercubicmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            EnergyDensity joulepercubicmeter = EnergyDensity.FromJoulesPerCubicMeter(1);
            Assert.False(joulepercubicmeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(firstValue);
            var otherQuantity = EnergyDensity.FromJoulesPerCubicMeter(secondValue);
            EnergyDensity maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, EnergyDensity.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1);
            var negativeTolerance = EnergyDensity.FromJoulesPerCubicMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<EnergyDensityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(EnergyDensity.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(EnergyDensity.Info.Units, EnergyDensity.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, EnergyDensity.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 GJ/m³", new EnergyDensity(1, EnergyDensityUnit.GigajoulePerCubicMeter).ToString());
            Assert.Equal("1 GWh/m³", new EnergyDensity(1, EnergyDensityUnit.GigawattHourPerCubicMeter).ToString());
            Assert.Equal("1 J/m³", new EnergyDensity(1, EnergyDensityUnit.JoulePerCubicMeter).ToString());
            Assert.Equal("1 kJ/m³", new EnergyDensity(1, EnergyDensityUnit.KilojoulePerCubicMeter).ToString());
            Assert.Equal("1 kWh/m³", new EnergyDensity(1, EnergyDensityUnit.KilowattHourPerCubicMeter).ToString());
            Assert.Equal("1 MJ/m³", new EnergyDensity(1, EnergyDensityUnit.MegajoulePerCubicMeter).ToString());
            Assert.Equal("1 MWh/m³", new EnergyDensity(1, EnergyDensityUnit.MegawattHourPerCubicMeter).ToString());
            Assert.Equal("1 PJ/m³", new EnergyDensity(1, EnergyDensityUnit.PetajoulePerCubicMeter).ToString());
            Assert.Equal("1 PWh/m³", new EnergyDensity(1, EnergyDensityUnit.PetawattHourPerCubicMeter).ToString());
            Assert.Equal("1 TJ/m³", new EnergyDensity(1, EnergyDensityUnit.TerajoulePerCubicMeter).ToString());
            Assert.Equal("1 TWh/m³", new EnergyDensity(1, EnergyDensityUnit.TerawattHourPerCubicMeter).ToString());
            Assert.Equal("1 Wh/m³", new EnergyDensity(1, EnergyDensityUnit.WattHourPerCubicMeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 GJ/m³", new EnergyDensity(1, EnergyDensityUnit.GigajoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 GWh/m³", new EnergyDensity(1, EnergyDensityUnit.GigawattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 J/m³", new EnergyDensity(1, EnergyDensityUnit.JoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kJ/m³", new EnergyDensity(1, EnergyDensityUnit.KilojoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 kWh/m³", new EnergyDensity(1, EnergyDensityUnit.KilowattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 MJ/m³", new EnergyDensity(1, EnergyDensityUnit.MegajoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 MWh/m³", new EnergyDensity(1, EnergyDensityUnit.MegawattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 PJ/m³", new EnergyDensity(1, EnergyDensityUnit.PetajoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 PWh/m³", new EnergyDensity(1, EnergyDensityUnit.PetawattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 TJ/m³", new EnergyDensity(1, EnergyDensityUnit.TerajoulePerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 TWh/m³", new EnergyDensity(1, EnergyDensityUnit.TerawattHourPerCubicMeter).ToString(swedishCulture));
            Assert.Equal("1 Wh/m³", new EnergyDensity(1, EnergyDensityUnit.WattHourPerCubicMeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s1"));
            Assert.Equal("0.12 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s2"));
            Assert.Equal("0.123 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s3"));
            Assert.Equal("0.1235 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s1", culture));
            Assert.Equal("0.12 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s2", culture));
            Assert.Equal("0.123 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s3", culture));
            Assert.Equal("0.1235 J/m³", new EnergyDensity(0.123456, EnergyDensityUnit.JoulePerCubicMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(1.0);
            var expected = Comparison.GetHashCode(typeof(EnergyDensity), quantity.As(EnergyDensity.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = EnergyDensity.FromJoulesPerCubicMeter(value);
            Assert.Equal(EnergyDensity.FromJoulesPerCubicMeter(-value), -quantity);
        }
    }
}
