//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToReciprocalLength
{
    /// <summary>
    /// A number to ReciprocalLength Extensions
    /// </summary>
    public static class NumberToReciprocalLengthExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="ReciprocalLength.FromInverseCentimeters(QuantityValue)" />
            public ReciprocalLength InverseCentimeters
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseCentimeters(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseCentimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ReciprocalLength.FromInverseFeet(QuantityValue)" />
            public ReciprocalLength InverseFeet
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseFeet(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ReciprocalLength.FromInverseInches(QuantityValue)" />
            public ReciprocalLength InverseInches
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseInches(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseInches(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ReciprocalLength.FromInverseMeters(QuantityValue)" />
            public ReciprocalLength InverseMeters
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseMeters(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseMeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ReciprocalLength.FromInverseMicroinches(QuantityValue)" />
            public ReciprocalLength InverseMicroinches
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseMicroinches(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseMicroinches(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ReciprocalLength.FromInverseMils(QuantityValue)" />
            public ReciprocalLength InverseMils
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseMils(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseMils(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ReciprocalLength.FromInverseMiles(QuantityValue)" />
            public ReciprocalLength InverseMiles
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseMiles(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseMiles(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ReciprocalLength.FromInverseMillimeters(QuantityValue)" />
            public ReciprocalLength InverseMillimeters
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseMillimeters(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseMillimeters(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ReciprocalLength.FromInverseUsSurveyFeet(QuantityValue)" />
            public ReciprocalLength InverseUsSurveyFeet
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseUsSurveyFeet(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseUsSurveyFeet(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ReciprocalLength.FromInverseYards(QuantityValue)" />
            public ReciprocalLength InverseYards
#if NET7_0_OR_GREATER
                => ReciprocalLength.FromInverseYards(QuantityValue.CreateChecked(value));
#else
                => ReciprocalLength.FromInverseYards(value.ToQuantityValue());
#endif

        }
    }
}
