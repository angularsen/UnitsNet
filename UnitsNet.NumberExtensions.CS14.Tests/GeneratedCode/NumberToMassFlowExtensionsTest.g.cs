//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToMassFlow;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToMassFlowExtensionsTests
    {
        [Fact]
        public void NumberToCentigramsPerDayTest() =>
            Assert.Equal(MassFlow.FromCentigramsPerDay(2), 2.CentigramsPerDay);

        [Fact]
        public void NumberToCentigramsPerSecondTest() =>
            Assert.Equal(MassFlow.FromCentigramsPerSecond(2), 2.CentigramsPerSecond);

        [Fact]
        public void NumberToDecagramsPerDayTest() =>
            Assert.Equal(MassFlow.FromDecagramsPerDay(2), 2.DecagramsPerDay);

        [Fact]
        public void NumberToDecagramsPerSecondTest() =>
            Assert.Equal(MassFlow.FromDecagramsPerSecond(2), 2.DecagramsPerSecond);

        [Fact]
        public void NumberToDecigramsPerDayTest() =>
            Assert.Equal(MassFlow.FromDecigramsPerDay(2), 2.DecigramsPerDay);

        [Fact]
        public void NumberToDecigramsPerSecondTest() =>
            Assert.Equal(MassFlow.FromDecigramsPerSecond(2), 2.DecigramsPerSecond);

        [Fact]
        public void NumberToGramsPerDayTest() =>
            Assert.Equal(MassFlow.FromGramsPerDay(2), 2.GramsPerDay);

        [Fact]
        public void NumberToGramsPerHourTest() =>
            Assert.Equal(MassFlow.FromGramsPerHour(2), 2.GramsPerHour);

        [Fact]
        public void NumberToGramsPerSecondTest() =>
            Assert.Equal(MassFlow.FromGramsPerSecond(2), 2.GramsPerSecond);

        [Fact]
        public void NumberToHectogramsPerDayTest() =>
            Assert.Equal(MassFlow.FromHectogramsPerDay(2), 2.HectogramsPerDay);

        [Fact]
        public void NumberToHectogramsPerSecondTest() =>
            Assert.Equal(MassFlow.FromHectogramsPerSecond(2), 2.HectogramsPerSecond);

        [Fact]
        public void NumberToKilogramsPerDayTest() =>
            Assert.Equal(MassFlow.FromKilogramsPerDay(2), 2.KilogramsPerDay);

        [Fact]
        public void NumberToKilogramsPerHourTest() =>
            Assert.Equal(MassFlow.FromKilogramsPerHour(2), 2.KilogramsPerHour);

        [Fact]
        public void NumberToKilogramsPerMinuteTest() =>
            Assert.Equal(MassFlow.FromKilogramsPerMinute(2), 2.KilogramsPerMinute);

        [Fact]
        public void NumberToKilogramsPerSecondTest() =>
            Assert.Equal(MassFlow.FromKilogramsPerSecond(2), 2.KilogramsPerSecond);

        [Fact]
        public void NumberToMegagramsPerDayTest() =>
            Assert.Equal(MassFlow.FromMegagramsPerDay(2), 2.MegagramsPerDay);

        [Fact]
        public void NumberToMegapoundsPerDayTest() =>
            Assert.Equal(MassFlow.FromMegapoundsPerDay(2), 2.MegapoundsPerDay);

        [Fact]
        public void NumberToMegapoundsPerHourTest() =>
            Assert.Equal(MassFlow.FromMegapoundsPerHour(2), 2.MegapoundsPerHour);

        [Fact]
        public void NumberToMegapoundsPerMinuteTest() =>
            Assert.Equal(MassFlow.FromMegapoundsPerMinute(2), 2.MegapoundsPerMinute);

        [Fact]
        public void NumberToMegapoundsPerSecondTest() =>
            Assert.Equal(MassFlow.FromMegapoundsPerSecond(2), 2.MegapoundsPerSecond);

        [Fact]
        public void NumberToMicrogramsPerDayTest() =>
            Assert.Equal(MassFlow.FromMicrogramsPerDay(2), 2.MicrogramsPerDay);

        [Fact]
        public void NumberToMicrogramsPerSecondTest() =>
            Assert.Equal(MassFlow.FromMicrogramsPerSecond(2), 2.MicrogramsPerSecond);

        [Fact]
        public void NumberToMilligramsPerDayTest() =>
            Assert.Equal(MassFlow.FromMilligramsPerDay(2), 2.MilligramsPerDay);

        [Fact]
        public void NumberToMilligramsPerSecondTest() =>
            Assert.Equal(MassFlow.FromMilligramsPerSecond(2), 2.MilligramsPerSecond);

        [Fact]
        public void NumberToNanogramsPerDayTest() =>
            Assert.Equal(MassFlow.FromNanogramsPerDay(2), 2.NanogramsPerDay);

        [Fact]
        public void NumberToNanogramsPerSecondTest() =>
            Assert.Equal(MassFlow.FromNanogramsPerSecond(2), 2.NanogramsPerSecond);

        [Fact]
        public void NumberToPoundsPerDayTest() =>
            Assert.Equal(MassFlow.FromPoundsPerDay(2), 2.PoundsPerDay);

        [Fact]
        public void NumberToPoundsPerHourTest() =>
            Assert.Equal(MassFlow.FromPoundsPerHour(2), 2.PoundsPerHour);

        [Fact]
        public void NumberToPoundsPerMinuteTest() =>
            Assert.Equal(MassFlow.FromPoundsPerMinute(2), 2.PoundsPerMinute);

        [Fact]
        public void NumberToPoundsPerSecondTest() =>
            Assert.Equal(MassFlow.FromPoundsPerSecond(2), 2.PoundsPerSecond);

        [Fact]
        public void NumberToShortTonsPerHourTest() =>
            Assert.Equal(MassFlow.FromShortTonsPerHour(2), 2.ShortTonsPerHour);

        [Fact]
        public void NumberToTonnesPerDayTest() =>
            Assert.Equal(MassFlow.FromTonnesPerDay(2), 2.TonnesPerDay);

        [Fact]
        public void NumberToTonnesPerHourTest() =>
            Assert.Equal(MassFlow.FromTonnesPerHour(2), 2.TonnesPerHour);

    }
}
