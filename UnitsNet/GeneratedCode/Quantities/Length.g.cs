//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System.Globalization;
using System.Resources;
using System.Runtime.Serialization;
using UnitsNet.Debug;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Many different units of length have been used around the world. The main units in modern use are U.S. customary units in the United States and the Metric system elsewhere. British Imperial units are still used for some purposes in the United Kingdom and some other countries. The metric system is sub-divided into SI and non-SI units.
    /// </summary>
    [DataContract]
    [DebuggerDisplay(QuantityDebugProxy.DisplayFormat)]
    [DebuggerTypeProxy(typeof(QuantityDebugProxy))]
    public readonly partial struct Length :
        IArithmeticQuantity<Length, LengthUnit>,
#if NET7_0_OR_GREATER
        IMultiplyOperators<Length, Length, Area>,
        IDivisionOperators<Length, ReciprocalLength, Area>,
        IMultiplyOperators<Length, Volume, AreaMomentOfInertia>,
        IDivisionOperators<Length, Speed, Duration>,
        IMultiplyOperators<Length, ForcePerLength, Force>,
        IMultiplyOperators<Length, Pressure, ForcePerLength>,
        IMultiplyOperators<Length, Speed, KinematicViscosity>,
        IMultiplyOperators<Length, LinearDensity, Mass>,
        IMultiplyOperators<Length, SpecificWeight, Pressure>,
        IDivisionOperators<Length, Volume, ReciprocalArea>,
        IMultiplyOperators<Length, ReciprocalArea, ReciprocalLength>,
        IDivisionOperators<Length, Area, ReciprocalLength>,
        IMultiplyOperators<Length, RotationalStiffnessPerLength, RotationalStiffness>,
        IDivisionOperators<Length, Duration, Speed>,
        IMultiplyOperators<Length, TemperatureGradient, TemperatureDelta>,
        IMultiplyOperators<Length, Force, Torque>,
        IMultiplyOperators<Length, Area, Volume>,
        IDivisionOperators<Length, ReciprocalArea, Volume>,
#endif
#if NET7_0_OR_GREATER
        IComparisonOperators<Length, Length, bool>,
        IParsable<Length>,
#endif
        IComparable,
        IComparable<Length>,
        IEquatable<Length>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly LengthUnit? _unit;

        /// <summary>
        ///     Provides detailed information about the <see cref="Length"/> quantity, including its name, base unit, unit mappings, base dimensions, and conversion functions.
        /// </summary>
        public sealed class LengthInfo: QuantityInfo<Length, LengthUnit>
        {
            /// <inheritdoc />
            public LengthInfo(string name, LengthUnit baseUnit, IEnumerable<IUnitDefinition<LengthUnit>> unitMappings, Length zero, BaseDimensions baseDimensions,
                QuantityFromDelegate<Length, LengthUnit> fromDelegate, ResourceManager? unitAbbreviations)
                : base(name, baseUnit, unitMappings, zero, baseDimensions, fromDelegate, unitAbbreviations)
            {
            }

            /// <inheritdoc />
            public LengthInfo(string name, LengthUnit baseUnit, IEnumerable<IUnitDefinition<LengthUnit>> unitMappings, Length zero, BaseDimensions baseDimensions)
                : this(name, baseUnit, unitMappings, zero, baseDimensions, Length.From, new ResourceManager("UnitsNet.GeneratedCode.Resources.Length", typeof(Length).Assembly))
            {
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="LengthInfo"/> class with the default settings for the Length quantity.
            /// </summary>
            /// <returns>A new instance of the <see cref="LengthInfo"/> class with the default settings.</returns>
            public static LengthInfo CreateDefault()
            {
                return new LengthInfo(nameof(Length), DefaultBaseUnit, GetDefaultMappings(), new Length(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="LengthInfo"/> class with the default settings for the Length quantity and a callback for customizing the default unit mappings.
            /// </summary>
            /// <param name="customizeUnits">
            ///     A callback function for customizing the default unit mappings.
            /// </param>
            /// <returns>
            ///     A new instance of the <see cref="LengthInfo"/> class with the default settings.
            /// </returns>
            public static LengthInfo CreateDefault(Func<IEnumerable<UnitDefinition<LengthUnit>>, IEnumerable<IUnitDefinition<LengthUnit>>> customizeUnits)
            {
                return new LengthInfo(nameof(Length), DefaultBaseUnit, customizeUnits(GetDefaultMappings()), new Length(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     The <see cref="BaseDimensions" /> for <see cref="Length"/> is L.
            /// </summary>
            public static BaseDimensions DefaultBaseDimensions { get; } = new BaseDimensions(1, 0, 0, 0, 0, 0, 0);

            /// <summary>
            ///     The default base unit of Length is Meter. All conversions, as defined in the <see cref="GetDefaultMappings"/>, go via this value.
            /// </summary>
            public static LengthUnit DefaultBaseUnit { get; } = LengthUnit.Meter;

            /// <summary>
            ///     Retrieves the default mappings for <see cref="LengthUnit"/>.
            /// </summary>
            /// <returns>An <see cref="IEnumerable{T}"/> of <see cref="UnitDefinition{LengthUnit}"/> representing the default unit mappings for Length.</returns>
            public static IEnumerable<UnitDefinition<LengthUnit>> GetDefaultMappings()
            {
                yield return new (LengthUnit.Angstrom, "Angstrom", "Angstroms", new BaseUnits(length: LengthUnit.Angstrom),
                     10000000000             
                );
                yield return new (LengthUnit.AstronomicalUnit, "AstronomicalUnit", "AstronomicalUnits", new BaseUnits(length: LengthUnit.AstronomicalUnit),
                     new QuantityValue(1, 149597870700)             
                );
                yield return new (LengthUnit.Centimeter, "Centimeter", "Centimeters", new BaseUnits(length: LengthUnit.Centimeter),
                     100             
                );
                yield return new (LengthUnit.Chain, "Chain", "Chains", new BaseUnits(length: LengthUnit.Chain),
                     new QuantityValue(625, 12573)             
                );
                yield return new (LengthUnit.DataMile, "DataMile", "DataMiles", new BaseUnits(length: LengthUnit.DataMile),
                     new QuantityValue(5, 9144)             
                );
                yield return new (LengthUnit.Decameter, "Decameter", "Decameters", new BaseUnits(length: LengthUnit.Decameter),
                     new QuantityValue(1, 10)             
                );
                yield return new (LengthUnit.Decimeter, "Decimeter", "Decimeters", new BaseUnits(length: LengthUnit.Decimeter),
                     10             
                );
                yield return new (LengthUnit.DtpPica, "DtpPica", "DtpPicas", new BaseUnits(length: LengthUnit.DtpPica),
                     new QuantityValue(30000, 127)             
                );
                yield return new (LengthUnit.DtpPoint, "DtpPoint", "DtpPoints", new BaseUnits(length: LengthUnit.DtpPoint),
                     new QuantityValue(360000, 127)             
                );
                yield return new (LengthUnit.Fathom, "Fathom", "Fathoms", new BaseUnits(length: LengthUnit.Fathom),
                     new QuantityValue(625, 1143)             
                );
                yield return new (LengthUnit.Femtometer, "Femtometer", "Femtometers", new BaseUnits(length: LengthUnit.Femtometer),
                     1000000000000000             
                );
                yield return new (LengthUnit.Foot, "Foot", "Feet", new BaseUnits(length: LengthUnit.Foot),
                     new QuantityValue(1250, 381)             
                );
                yield return new (LengthUnit.Gigameter, "Gigameter", "Gigameters", new BaseUnits(length: LengthUnit.Gigameter),
                     new QuantityValue(1, 1000000000)             
                );
                yield return new (LengthUnit.Hand, "Hand", "Hands", new BaseUnits(length: LengthUnit.Hand),
                     new QuantityValue(1250, 127)             
                );
                yield return new (LengthUnit.Hectometer, "Hectometer", "Hectometers", new BaseUnits(length: LengthUnit.Hectometer),
                     new QuantityValue(1, 100)             
                );
                yield return new (LengthUnit.Inch, "Inch", "Inches", new BaseUnits(length: LengthUnit.Inch),
                     new QuantityValue(5000, 127)             
                );
                yield return new (LengthUnit.Kilofoot, "Kilofoot", "Kilofeet", new BaseUnits(length: LengthUnit.Kilofoot),
                     new QuantityValue(5, 1524)             
                );
                yield return new (LengthUnit.KilolightYear, "KilolightYear", "KilolightYears", new BaseUnits(length: LengthUnit.KilolightYear),
                     new QuantityValue(1, QuantityValue.PowerOfTen(7) * new BigInteger(946073047258))             
                );
                yield return new (LengthUnit.Kilometer, "Kilometer", "Kilometers", new BaseUnits(length: LengthUnit.Kilometer),
                     new QuantityValue(1, 1000)             
                );
                yield return new (LengthUnit.Kiloparsec, "Kiloparsec", "Kiloparsecs", new BaseUnits(length: LengthUnit.Kiloparsec),
                     new QuantityValue(1, QuantityValue.PowerOfTen(8) * new BigInteger(308567758128))             
                );
                yield return new (LengthUnit.Kiloyard, "Kiloyard", "Kiloyards", new BaseUnits(length: LengthUnit.Kiloyard),
                     new QuantityValue(5, 4572)             
                );
                yield return new (LengthUnit.LightYear, "LightYear", "LightYears", new BaseUnits(length: LengthUnit.LightYear),
                     new QuantityValue(1, 9460730472580000)             
                );
                yield return new (LengthUnit.MegalightYear, "MegalightYear", "MegalightYears", new BaseUnits(length: LengthUnit.MegalightYear),
                     new QuantityValue(1, QuantityValue.PowerOfTen(10) * new BigInteger(946073047258))             
                );
                yield return new (LengthUnit.Megameter, "Megameter", "Megameters", new BaseUnits(length: LengthUnit.Megameter),
                     new QuantityValue(1, 1000000)             
                );
                yield return new (LengthUnit.Megaparsec, "Megaparsec", "Megaparsecs", new BaseUnits(length: LengthUnit.Megaparsec),
                     new QuantityValue(1, QuantityValue.PowerOfTen(11) * new BigInteger(308567758128))             
                );
                yield return new (LengthUnit.Meter, "Meter", "Meters", new BaseUnits(length: LengthUnit.Meter));
                yield return new (LengthUnit.Microinch, "Microinch", "Microinches", new BaseUnits(length: LengthUnit.Microinch),
                     new QuantityValue(5000000000, 127)             
                );
                yield return new (LengthUnit.Micrometer, "Micrometer", "Micrometers", new BaseUnits(length: LengthUnit.Micrometer),
                     1000000             
                );
                yield return new (LengthUnit.Mil, "Mil", "Mils", new BaseUnits(length: LengthUnit.Mil),
                     new QuantityValue(5000000, 127)             
                );
                yield return new (LengthUnit.Mile, "Mile", "Miles", new BaseUnits(length: LengthUnit.Mile),
                     new QuantityValue(125, 201168)             
                );
                yield return new (LengthUnit.Millimeter, "Millimeter", "Millimeters", new BaseUnits(length: LengthUnit.Millimeter),
                     1000             
                );
                yield return new (LengthUnit.Nanometer, "Nanometer", "Nanometers", new BaseUnits(length: LengthUnit.Nanometer),
                     1000000000             
                );
                yield return new (LengthUnit.NauticalMile, "NauticalMile", "NauticalMiles", new BaseUnits(length: LengthUnit.NauticalMile),
                     new QuantityValue(1, 1852)             
                );
                yield return new (LengthUnit.Parsec, "Parsec", "Parsecs", new BaseUnits(length: LengthUnit.Parsec),
                     new QuantityValue(1, 30856775812800000)             
                );
                yield return new (LengthUnit.Picometer, "Picometer", "Picometers", new BaseUnits(length: LengthUnit.Picometer),
                     1000000000000             
                );
                yield return new (LengthUnit.PrinterPica, "PrinterPica", "PrinterPicas", new BaseUnits(length: LengthUnit.PrinterPica),
                     new QuantityValue(60225, 254)             
                );
                yield return new (LengthUnit.PrinterPoint, "PrinterPoint", "PrinterPoints", new BaseUnits(length: LengthUnit.PrinterPoint),
                     new QuantityValue(361350, 127)             
                );
                yield return new (LengthUnit.Shackle, "Shackle", "Shackles", new BaseUnits(length: LengthUnit.Shackle),
                     new QuantityValue(125, 3429)             
                );
                yield return new (LengthUnit.SolarRadius, "SolarRadius", "SolarRadiuses", new BaseUnits(length: LengthUnit.SolarRadius),
                     new QuantityValue(1, 695700000)             
                );
                yield return new (LengthUnit.Twip, "Twip", "Twips", new BaseUnits(length: LengthUnit.Twip),
                     new QuantityValue(7200000, 127)             
                );
                yield return new (LengthUnit.UsSurveyFoot, "UsSurveyFoot", "UsSurveyFeet", new BaseUnits(length: LengthUnit.UsSurveyFoot),
                     new QuantityValue(3937, 1200)             
                );
                yield return new (LengthUnit.Yard, "Yard", "Yards", new BaseUnits(length: LengthUnit.Yard),
                     new QuantityValue(1250, 1143)             
                );
            }
        }

        static Length()
        {
            Info = UnitsNetSetup.CreateQuantityInfo(LengthInfo.CreateDefault);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Length(QuantityValue value, LengthUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Length(QuantityValue value, UnitSystem unitSystem)
        {
            _value = value;
            _unit = Info.GetDefaultUnit(unitSystem);
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Length" /> instances.
        /// </summary>
        [Obsolete("Replaced by UnitConverter.Default")]
        public static UnitConverter DefaultConversionFunctions => UnitConverter.Default;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<Length, LengthUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions => Info.BaseDimensions;

        /// <summary>
        ///     The base unit of Length, which is Meter. All conversions go via this value.
        /// </summary>
        public static LengthUnit BaseUnit => Info.BaseUnitInfo.Value;

        /// <summary>
        ///     All units of measurement for the Length quantity.
        /// </summary>
        public static IReadOnlyCollection<LengthUnit> Units => Info.Units;

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Meter.
        /// </summary>
        public static Length Zero => Info.Zero;

        #endregion

        #region Properties

        /// <inheritdoc />
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public LengthUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<Length, LengthUnit> QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Length.BaseDimensions;

        #region Explicit implementations

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Enum IQuantity.Unit => Unit;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UnitKey IQuantity.UnitKey => UnitKey.ForUnit(Unit);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo IQuantity.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo<LengthUnit> IQuantity<LengthUnit>.QuantityInfo => Info;

#if NETSTANDARD2_0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuantityInstanceInfo<Length> IQuantityOfType<Length>.QuantityInfo => Info;
#endif

        #endregion

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Angstrom"/>
        /// </summary>
        public QuantityValue Angstroms => this.As(LengthUnit.Angstrom);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.AstronomicalUnit"/>
        /// </summary>
        public QuantityValue AstronomicalUnits => this.As(LengthUnit.AstronomicalUnit);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Centimeter"/>
        /// </summary>
        public QuantityValue Centimeters => this.As(LengthUnit.Centimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Chain"/>
        /// </summary>
        public QuantityValue Chains => this.As(LengthUnit.Chain);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.DataMile"/>
        /// </summary>
        public QuantityValue DataMiles => this.As(LengthUnit.DataMile);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Decameter"/>
        /// </summary>
        public QuantityValue Decameters => this.As(LengthUnit.Decameter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Decimeter"/>
        /// </summary>
        public QuantityValue Decimeters => this.As(LengthUnit.Decimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.DtpPica"/>
        /// </summary>
        public QuantityValue DtpPicas => this.As(LengthUnit.DtpPica);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.DtpPoint"/>
        /// </summary>
        public QuantityValue DtpPoints => this.As(LengthUnit.DtpPoint);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Fathom"/>
        /// </summary>
        public QuantityValue Fathoms => this.As(LengthUnit.Fathom);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Femtometer"/>
        /// </summary>
        public QuantityValue Femtometers => this.As(LengthUnit.Femtometer);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Foot"/>
        /// </summary>
        public QuantityValue Feet => this.As(LengthUnit.Foot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Gigameter"/>
        /// </summary>
        public QuantityValue Gigameters => this.As(LengthUnit.Gigameter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Hand"/>
        /// </summary>
        public QuantityValue Hands => this.As(LengthUnit.Hand);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Hectometer"/>
        /// </summary>
        public QuantityValue Hectometers => this.As(LengthUnit.Hectometer);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Inch"/>
        /// </summary>
        public QuantityValue Inches => this.As(LengthUnit.Inch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Kilofoot"/>
        /// </summary>
        public QuantityValue Kilofeet => this.As(LengthUnit.Kilofoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.KilolightYear"/>
        /// </summary>
        public QuantityValue KilolightYears => this.As(LengthUnit.KilolightYear);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Kilometer"/>
        /// </summary>
        public QuantityValue Kilometers => this.As(LengthUnit.Kilometer);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Kiloparsec"/>
        /// </summary>
        public QuantityValue Kiloparsecs => this.As(LengthUnit.Kiloparsec);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Kiloyard"/>
        /// </summary>
        public QuantityValue Kiloyards => this.As(LengthUnit.Kiloyard);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.LightYear"/>
        /// </summary>
        public QuantityValue LightYears => this.As(LengthUnit.LightYear);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.MegalightYear"/>
        /// </summary>
        public QuantityValue MegalightYears => this.As(LengthUnit.MegalightYear);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Megameter"/>
        /// </summary>
        public QuantityValue Megameters => this.As(LengthUnit.Megameter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Megaparsec"/>
        /// </summary>
        public QuantityValue Megaparsecs => this.As(LengthUnit.Megaparsec);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Meter"/>
        /// </summary>
        public QuantityValue Meters => this.As(LengthUnit.Meter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Microinch"/>
        /// </summary>
        public QuantityValue Microinches => this.As(LengthUnit.Microinch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Micrometer"/>
        /// </summary>
        public QuantityValue Micrometers => this.As(LengthUnit.Micrometer);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Mil"/>
        /// </summary>
        public QuantityValue Mils => this.As(LengthUnit.Mil);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Mile"/>
        /// </summary>
        public QuantityValue Miles => this.As(LengthUnit.Mile);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Millimeter"/>
        /// </summary>
        public QuantityValue Millimeters => this.As(LengthUnit.Millimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Nanometer"/>
        /// </summary>
        public QuantityValue Nanometers => this.As(LengthUnit.Nanometer);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.NauticalMile"/>
        /// </summary>
        public QuantityValue NauticalMiles => this.As(LengthUnit.NauticalMile);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Parsec"/>
        /// </summary>
        public QuantityValue Parsecs => this.As(LengthUnit.Parsec);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Picometer"/>
        /// </summary>
        public QuantityValue Picometers => this.As(LengthUnit.Picometer);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.PrinterPica"/>
        /// </summary>
        public QuantityValue PrinterPicas => this.As(LengthUnit.PrinterPica);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.PrinterPoint"/>
        /// </summary>
        public QuantityValue PrinterPoints => this.As(LengthUnit.PrinterPoint);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Shackle"/>
        /// </summary>
        public QuantityValue Shackles => this.As(LengthUnit.Shackle);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.SolarRadius"/>
        /// </summary>
        public QuantityValue SolarRadiuses => this.As(LengthUnit.SolarRadius);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Twip"/>
        /// </summary>
        public QuantityValue Twips => this.As(LengthUnit.Twip);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.UsSurveyFoot"/>
        /// </summary>
        public QuantityValue UsSurveyFeet => this.As(LengthUnit.UsSurveyFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="LengthUnit.Yard"/>
        /// </summary>
        public QuantityValue Yards => this.As(LengthUnit.Yard);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(LengthUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(LengthUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Angstrom"/>.
        /// </summary>
        public static Length FromAngstroms(QuantityValue value)
        {
            return new Length(value, LengthUnit.Angstrom);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.AstronomicalUnit"/>.
        /// </summary>
        public static Length FromAstronomicalUnits(QuantityValue value)
        {
            return new Length(value, LengthUnit.AstronomicalUnit);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Centimeter"/>.
        /// </summary>
        public static Length FromCentimeters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Centimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Chain"/>.
        /// </summary>
        public static Length FromChains(QuantityValue value)
        {
            return new Length(value, LengthUnit.Chain);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.DataMile"/>.
        /// </summary>
        public static Length FromDataMiles(QuantityValue value)
        {
            return new Length(value, LengthUnit.DataMile);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Decameter"/>.
        /// </summary>
        public static Length FromDecameters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Decameter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Decimeter"/>.
        /// </summary>
        public static Length FromDecimeters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Decimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.DtpPica"/>.
        /// </summary>
        public static Length FromDtpPicas(QuantityValue value)
        {
            return new Length(value, LengthUnit.DtpPica);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.DtpPoint"/>.
        /// </summary>
        public static Length FromDtpPoints(QuantityValue value)
        {
            return new Length(value, LengthUnit.DtpPoint);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Fathom"/>.
        /// </summary>
        public static Length FromFathoms(QuantityValue value)
        {
            return new Length(value, LengthUnit.Fathom);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Femtometer"/>.
        /// </summary>
        public static Length FromFemtometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Femtometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Foot"/>.
        /// </summary>
        public static Length FromFeet(QuantityValue value)
        {
            return new Length(value, LengthUnit.Foot);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Gigameter"/>.
        /// </summary>
        public static Length FromGigameters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Gigameter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Hand"/>.
        /// </summary>
        public static Length FromHands(QuantityValue value)
        {
            return new Length(value, LengthUnit.Hand);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Hectometer"/>.
        /// </summary>
        public static Length FromHectometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Hectometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Inch"/>.
        /// </summary>
        public static Length FromInches(QuantityValue value)
        {
            return new Length(value, LengthUnit.Inch);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Kilofoot"/>.
        /// </summary>
        public static Length FromKilofeet(QuantityValue value)
        {
            return new Length(value, LengthUnit.Kilofoot);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.KilolightYear"/>.
        /// </summary>
        public static Length FromKilolightYears(QuantityValue value)
        {
            return new Length(value, LengthUnit.KilolightYear);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Kilometer"/>.
        /// </summary>
        public static Length FromKilometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Kilometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Kiloparsec"/>.
        /// </summary>
        public static Length FromKiloparsecs(QuantityValue value)
        {
            return new Length(value, LengthUnit.Kiloparsec);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Kiloyard"/>.
        /// </summary>
        public static Length FromKiloyards(QuantityValue value)
        {
            return new Length(value, LengthUnit.Kiloyard);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.LightYear"/>.
        /// </summary>
        public static Length FromLightYears(QuantityValue value)
        {
            return new Length(value, LengthUnit.LightYear);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.MegalightYear"/>.
        /// </summary>
        public static Length FromMegalightYears(QuantityValue value)
        {
            return new Length(value, LengthUnit.MegalightYear);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Megameter"/>.
        /// </summary>
        public static Length FromMegameters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Megameter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Megaparsec"/>.
        /// </summary>
        public static Length FromMegaparsecs(QuantityValue value)
        {
            return new Length(value, LengthUnit.Megaparsec);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Meter"/>.
        /// </summary>
        public static Length FromMeters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Meter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Microinch"/>.
        /// </summary>
        public static Length FromMicroinches(QuantityValue value)
        {
            return new Length(value, LengthUnit.Microinch);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Micrometer"/>.
        /// </summary>
        public static Length FromMicrometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Micrometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Mil"/>.
        /// </summary>
        public static Length FromMils(QuantityValue value)
        {
            return new Length(value, LengthUnit.Mil);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Mile"/>.
        /// </summary>
        public static Length FromMiles(QuantityValue value)
        {
            return new Length(value, LengthUnit.Mile);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Millimeter"/>.
        /// </summary>
        public static Length FromMillimeters(QuantityValue value)
        {
            return new Length(value, LengthUnit.Millimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Nanometer"/>.
        /// </summary>
        public static Length FromNanometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Nanometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.NauticalMile"/>.
        /// </summary>
        public static Length FromNauticalMiles(QuantityValue value)
        {
            return new Length(value, LengthUnit.NauticalMile);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Parsec"/>.
        /// </summary>
        public static Length FromParsecs(QuantityValue value)
        {
            return new Length(value, LengthUnit.Parsec);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Picometer"/>.
        /// </summary>
        public static Length FromPicometers(QuantityValue value)
        {
            return new Length(value, LengthUnit.Picometer);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.PrinterPica"/>.
        /// </summary>
        public static Length FromPrinterPicas(QuantityValue value)
        {
            return new Length(value, LengthUnit.PrinterPica);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.PrinterPoint"/>.
        /// </summary>
        public static Length FromPrinterPoints(QuantityValue value)
        {
            return new Length(value, LengthUnit.PrinterPoint);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Shackle"/>.
        /// </summary>
        public static Length FromShackles(QuantityValue value)
        {
            return new Length(value, LengthUnit.Shackle);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.SolarRadius"/>.
        /// </summary>
        public static Length FromSolarRadiuses(QuantityValue value)
        {
            return new Length(value, LengthUnit.SolarRadius);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Twip"/>.
        /// </summary>
        public static Length FromTwips(QuantityValue value)
        {
            return new Length(value, LengthUnit.Twip);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.UsSurveyFoot"/>.
        /// </summary>
        public static Length FromUsSurveyFeet(QuantityValue value)
        {
            return new Length(value, LengthUnit.UsSurveyFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Length"/> from <see cref="LengthUnit.Yard"/>.
        /// </summary>
        public static Length FromYards(QuantityValue value)
        {
            return new Length(value, LengthUnit.Yard);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LengthUnit" /> to <see cref="Length" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Length unit value.</returns>
        public static Length From(QuantityValue value, LengthUnit fromUnit)
        {
            return new Length(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Length Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Length Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Length, LengthUnit>(str, provider, From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse([NotNullWhen(true)]string? str, out Length result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse([NotNullWhen(true)]string? str, IFormatProvider? provider, out Length result)
        {
            return QuantityParser.Default.TryParse<Length, LengthUnit>(str, provider, From, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LengthUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static LengthUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse(str, Info.UnitInfos, provider).Value;
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider?,out UnitsNet.Units.LengthUnit)"/>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, out LengthUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, IFormatProvider? provider, out LengthUnit unit)
        {
            return UnitParser.Default.TryParse(str, Info, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Length operator -(Length right)
        {
            return new Length(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Length"/> from adding two <see cref="Length"/>.</summary>
        public static Length operator +(Length left, Length right)
        {
            return new Length(left.Value + right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Length"/> from subtracting two <see cref="Length"/>.</summary>
        public static Length operator -(Length left, Length right)
        {
            return new Length(left.Value - right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Length"/> from multiplying value and <see cref="Length"/>.</summary>
        public static Length operator *(QuantityValue left, Length right)
        {
            return new Length(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Length"/> from multiplying value and <see cref="Length"/>.</summary>
        public static Length operator *(Length left, QuantityValue right)
        {
            return new Length(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Length"/> from dividing <see cref="Length"/> by value.</summary>
        public static Length operator /(Length left, QuantityValue right)
        {
            return new Length(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Length"/> by <see cref="Length"/>.</summary>
        public static QuantityValue operator /(Length left, Length right)
        {
            return left.Meters / right.Meters;
        }

        #endregion

        #region Relational Operators

        /// <summary>Calculates the inverse of this quantity.</summary>
        /// <returns>The corresponding inverse quantity, <see cref="ReciprocalLength"/>.</returns>
        public ReciprocalLength Inverse()
        {
            return UnitConverter.Default.ConvertTo(Value, Unit, ReciprocalLength.Info);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Length"/> * <see cref="Length"/>.</summary>
        public static Area operator *(Length left, Length right)
        {
            return Area.FromSquareMeters(left.Meters * right.Meters);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Length"/> / <see cref="ReciprocalLength"/>.</summary>
        public static Area operator /(Length length, ReciprocalLength reciprocalLength)
        {
            return Area.FromSquareMeters(length.Meters / reciprocalLength.InverseMeters);
        }

        /// <summary>Get <see cref="AreaMomentOfInertia"/> from <see cref="Length"/> * <see cref="Volume"/>.</summary>
        public static AreaMomentOfInertia operator *(Length length, Volume volume)
        {
            return AreaMomentOfInertia.FromMetersToTheFourth(length.Meters * volume.CubicMeters);
        }

        /// <summary>Get <see cref="Duration"/> from <see cref="Length"/> / <see cref="Speed"/>.</summary>
        public static Duration operator /(Length length, Speed speed)
        {
            return Duration.FromSeconds(length.Meters / speed.MetersPerSecond);
        }

        /// <summary>Get <see cref="Force"/> from <see cref="Length"/> * <see cref="ForcePerLength"/>.</summary>
        public static Force operator *(Length length, ForcePerLength forcePerLength)
        {
            return Force.FromNewtons(length.Meters * forcePerLength.NewtonsPerMeter);
        }

        /// <summary>Get <see cref="ForcePerLength"/> from <see cref="Length"/> * <see cref="Pressure"/>.</summary>
        public static ForcePerLength operator *(Length length, Pressure pressure)
        {
            return ForcePerLength.FromNewtonsPerMeter(length.Meters * pressure.NewtonsPerSquareMeter);
        }

        /// <summary>Get <see cref="KinematicViscosity"/> from <see cref="Length"/> * <see cref="Speed"/>.</summary>
        public static KinematicViscosity operator *(Length length, Speed speed)
        {
            return KinematicViscosity.FromSquareMetersPerSecond(length.Meters * speed.MetersPerSecond);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Length"/> * <see cref="LinearDensity"/>.</summary>
        public static Mass operator *(Length length, LinearDensity linearDensity)
        {
            return Mass.FromKilograms(length.Meters * linearDensity.KilogramsPerMeter);
        }

        /// <summary>Get <see cref="Pressure"/> from <see cref="Length"/> * <see cref="SpecificWeight"/>.</summary>
        public static Pressure operator *(Length length, SpecificWeight specificWeight)
        {
            return Pressure.FromPascals(length.Meters * specificWeight.NewtonsPerCubicMeter);
        }

        /// <summary>Get <see cref="ReciprocalArea"/> from <see cref="Length"/> / <see cref="Volume"/>.</summary>
        public static ReciprocalArea operator /(Length length, Volume volume)
        {
            return ReciprocalArea.FromInverseSquareMeters(length.Meters / volume.CubicMeters);
        }

        /// <summary>Get <see cref="ReciprocalLength"/> from <see cref="Length"/> * <see cref="ReciprocalArea"/>.</summary>
        public static ReciprocalLength operator *(Length length, ReciprocalArea reciprocalArea)
        {
            return ReciprocalLength.FromInverseMeters(length.Meters * reciprocalArea.InverseSquareMeters);
        }

        /// <summary>Get <see cref="ReciprocalLength"/> from <see cref="Length"/> / <see cref="Area"/>.</summary>
        public static ReciprocalLength operator /(Length length, Area area)
        {
            return ReciprocalLength.FromInverseMeters(length.Meters / area.SquareMeters);
        }

        /// <summary>Get <see cref="RotationalStiffness"/> from <see cref="Length"/> * <see cref="RotationalStiffnessPerLength"/>.</summary>
        public static RotationalStiffness operator *(Length length, RotationalStiffnessPerLength rotationalStiffnessPerLength)
        {
            return RotationalStiffness.FromNewtonMetersPerRadian(length.Meters * rotationalStiffnessPerLength.NewtonMetersPerRadianPerMeter);
        }

        /// <summary>Get <see cref="Speed"/> from <see cref="Length"/> / <see cref="Duration"/>.</summary>
        public static Speed operator /(Length length, Duration duration)
        {
            return Speed.FromMetersPerSecond(length.Meters / duration.Seconds);
        }

        /// <summary>Get <see cref="TemperatureDelta"/> from <see cref="Length"/> * <see cref="TemperatureGradient"/>.</summary>
        public static TemperatureDelta operator *(Length length, TemperatureGradient temperatureGradient)
        {
            return TemperatureDelta.FromDegreesCelsius(length.Kilometers * temperatureGradient.DegreesCelsiusPerKilometer);
        }

        /// <summary>Get <see cref="Torque"/> from <see cref="Length"/> * <see cref="Force"/>.</summary>
        public static Torque operator *(Length length, Force force)
        {
            return Torque.FromNewtonMeters(length.Meters * force.Newtons);
        }

        /// <summary>Get <see cref="Volume"/> from <see cref="Length"/> * <see cref="Area"/>.</summary>
        public static Volume operator *(Length length, Area area)
        {
            return Volume.FromCubicMeters(length.Meters * area.SquareMeters);
        }

        /// <summary>Get <see cref="Volume"/> from <see cref="Length"/> / <see cref="ReciprocalArea"/>.</summary>
        public static Volume operator /(Length length, ReciprocalArea reciprocalArea)
        {
            return Volume.FromCubicMeters(length.Meters / reciprocalArea.InverseSquareMeters);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Length left, Length right)
        {
            return left.Value <= right.As(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Length left, Length right)
        {
            return left.Value >= right.As(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Length left, Length right)
        {
            return left.Value < right.As(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Length left, Length right)
        {
            return left.Value > right.As(left.Unit);
        }

        /// <summary>Indicates strict equality of two <see cref="Length"/> quantities.</summary>
        public static bool operator ==(Length left, Length right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Length"/> quantities.</summary>
        public static bool operator !=(Length left, Length right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Length"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is not Length otherQuantity)
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Length"/> quantities.</summary>
        public bool Equals(Length other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Length.</returns>
        public override int GetHashCode()
        {
            return Comparison.GetHashCode(typeof(Length), this.As(BaseUnit));
        }
        
        /// <inheritdoc  cref="CompareTo(Length)" />
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        public int CompareTo(object? obj)
        {
            if (obj is not Length otherQuantity)
                throw obj is null ? new ArgumentNullException(nameof(obj)) : ExceptionHelper.CreateArgumentException<Length>(obj, nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>
        ///     Compares the current <see cref="Length"/> with another <see cref="Length"/> and returns an integer that indicates
        ///     whether the current instance precedes, follows, or occurs in the same position in the sort order as the other quantity, when converted to the same unit.
        /// </summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Length other)
        {
            return _value.CompareTo(other.As(this.Unit));
        }

        #endregion

        #region Conversion Methods (explicit implementations for netstandard2.0)

#if NETSTANDARD2_0
        QuantityValue IQuantity.As(Enum unit) => UnitConverter.Default.ConvertValue(Value, UnitKey.ForUnit(Unit), unit);

        IQuantity IQuantity.ToUnit(Enum unit) => UnitConverter.Default.ConvertTo(this, unit);

        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);

        IQuantity<LengthUnit> IQuantity<LengthUnit>.ToUnit(LengthUnit unit) => this.ToUnit(unit);

        IQuantity<LengthUnit> IQuantity<LengthUnit>.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);
#endif

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null, null);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TQuantity}(TQuantity, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Default.Format(this, format, provider);
        }

        #endregion

    }
}
