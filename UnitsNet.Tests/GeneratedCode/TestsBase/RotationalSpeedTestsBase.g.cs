//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RotationalSpeed.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RotationalSpeedTestsBase : QuantityTestsBase
    {
        protected abstract double CentiradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double DeciradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double DegreesPerMinuteInOneRadianPerSecond { get; }
        protected abstract double DegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double MicrodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double MicroradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double MillidegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double MilliradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double NanodegreesPerSecondInOneRadianPerSecond { get; }
        protected abstract double NanoradiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double RadiansPerSecondInOneRadianPerSecond { get; }
        protected abstract double RevolutionsPerMinuteInOneRadianPerSecond { get; }
        protected abstract double RevolutionsPerSecondInOneRadianPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentiradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DeciradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double DegreesPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double DegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicrodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MicroradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MillidegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MilliradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanodegreesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double NanoradiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double RadiansPerSecondTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsPerMinuteTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(RotationalSpeedUnit unit)
        {
            return unit switch
            {
                RotationalSpeedUnit.CentiradianPerSecond => (CentiradiansPerSecondInOneRadianPerSecond, CentiradiansPerSecondTolerance),
                RotationalSpeedUnit.DeciradianPerSecond => (DeciradiansPerSecondInOneRadianPerSecond, DeciradiansPerSecondTolerance),
                RotationalSpeedUnit.DegreePerMinute => (DegreesPerMinuteInOneRadianPerSecond, DegreesPerMinuteTolerance),
                RotationalSpeedUnit.DegreePerSecond => (DegreesPerSecondInOneRadianPerSecond, DegreesPerSecondTolerance),
                RotationalSpeedUnit.MicrodegreePerSecond => (MicrodegreesPerSecondInOneRadianPerSecond, MicrodegreesPerSecondTolerance),
                RotationalSpeedUnit.MicroradianPerSecond => (MicroradiansPerSecondInOneRadianPerSecond, MicroradiansPerSecondTolerance),
                RotationalSpeedUnit.MillidegreePerSecond => (MillidegreesPerSecondInOneRadianPerSecond, MillidegreesPerSecondTolerance),
                RotationalSpeedUnit.MilliradianPerSecond => (MilliradiansPerSecondInOneRadianPerSecond, MilliradiansPerSecondTolerance),
                RotationalSpeedUnit.NanodegreePerSecond => (NanodegreesPerSecondInOneRadianPerSecond, NanodegreesPerSecondTolerance),
                RotationalSpeedUnit.NanoradianPerSecond => (NanoradiansPerSecondInOneRadianPerSecond, NanoradiansPerSecondTolerance),
                RotationalSpeedUnit.RadianPerSecond => (RadiansPerSecondInOneRadianPerSecond, RadiansPerSecondTolerance),
                RotationalSpeedUnit.RevolutionPerMinute => (RevolutionsPerMinuteInOneRadianPerSecond, RevolutionsPerMinuteTolerance),
                RotationalSpeedUnit.RevolutionPerSecond => (RevolutionsPerSecondInOneRadianPerSecond, RevolutionsPerSecondTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { RotationalSpeedUnit.CentiradianPerSecond },
            new object[] { RotationalSpeedUnit.DeciradianPerSecond },
            new object[] { RotationalSpeedUnit.DegreePerMinute },
            new object[] { RotationalSpeedUnit.DegreePerSecond },
            new object[] { RotationalSpeedUnit.MicrodegreePerSecond },
            new object[] { RotationalSpeedUnit.MicroradianPerSecond },
            new object[] { RotationalSpeedUnit.MillidegreePerSecond },
            new object[] { RotationalSpeedUnit.MilliradianPerSecond },
            new object[] { RotationalSpeedUnit.NanodegreePerSecond },
            new object[] { RotationalSpeedUnit.NanoradianPerSecond },
            new object[] { RotationalSpeedUnit.RadianPerSecond },
            new object[] { RotationalSpeedUnit.RevolutionPerMinute },
            new object[] { RotationalSpeedUnit.RevolutionPerSecond },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new RotationalSpeed();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RotationalSpeedUnit.RadianPerSecond, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new RotationalSpeed(double.PositiveInfinity, RotationalSpeedUnit.RadianPerSecond));
            var exception2 = Record.Exception(() => new RotationalSpeed(double.NegativeInfinity, RotationalSpeedUnit.RadianPerSecond));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new RotationalSpeed(double.NaN, RotationalSpeedUnit.RadianPerSecond));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new RotationalSpeed(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new RotationalSpeed(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new RotationalSpeed(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void RotationalSpeed_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            RotationalSpeedUnit[] unitsOrderedByName = EnumUtils.GetEnumValues<RotationalSpeedUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new RotationalSpeed(1, RotationalSpeedUnit.RadianPerSecond);

            QuantityInfo<RotationalSpeed, RotationalSpeedUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("RotationalSpeed", quantityInfo.Name);
            Assert.Equal(RotationalSpeed.Zero, quantityInfo.Zero);
            Assert.Equal(RotationalSpeed.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(RotationalSpeed.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<RotationalSpeedUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void RotationalSpeedInfo_CreateWithCustomUnitInfos()
        {
            RotationalSpeedUnit[] expectedUnits = [RotationalSpeedUnit.RadianPerSecond];

            RotationalSpeed.RotationalSpeedInfo quantityInfo = RotationalSpeed.RotationalSpeedInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("RotationalSpeed", quantityInfo.Name);
            Assert.Equal(RotationalSpeed.Zero, quantityInfo.Zero);
            Assert.Equal(RotationalSpeed.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void RadianPerSecondToRotationalSpeedUnits()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(CentiradiansPerSecondInOneRadianPerSecond, radianpersecond.CentiradiansPerSecond, CentiradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DeciradiansPerSecondInOneRadianPerSecond, radianpersecond.DeciradiansPerSecond, DeciradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DegreesPerMinuteInOneRadianPerSecond, radianpersecond.DegreesPerMinute, DegreesPerMinuteTolerance);
            AssertEx.EqualTolerance(DegreesPerSecondInOneRadianPerSecond, radianpersecond.DegreesPerSecond, DegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicrodegreesPerSecondInOneRadianPerSecond, radianpersecond.MicrodegreesPerSecond, MicrodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicroradiansPerSecondInOneRadianPerSecond, radianpersecond.MicroradiansPerSecond, MicroradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MillidegreesPerSecondInOneRadianPerSecond, radianpersecond.MillidegreesPerSecond, MillidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MilliradiansPerSecondInOneRadianPerSecond, radianpersecond.MilliradiansPerSecond, MilliradiansPerSecondTolerance);
            AssertEx.EqualTolerance(NanodegreesPerSecondInOneRadianPerSecond, radianpersecond.NanodegreesPerSecond, NanodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(NanoradiansPerSecondInOneRadianPerSecond, radianpersecond.NanoradiansPerSecond, NanoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneRadianPerSecond, radianpersecond.RadiansPerSecond, RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(RevolutionsPerMinuteInOneRadianPerSecond, radianpersecond.RevolutionsPerMinute, RevolutionsPerMinuteTolerance);
            AssertEx.EqualTolerance(RevolutionsPerSecondInOneRadianPerSecond, radianpersecond.RevolutionsPerSecond, RevolutionsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = RotationalSpeed.From(1, RotationalSpeedUnit.CentiradianPerSecond);
            Assert.Equal(1, quantity00.CentiradiansPerSecond);
            Assert.Equal(RotationalSpeedUnit.CentiradianPerSecond, quantity00.Unit);

            var quantity01 = RotationalSpeed.From(1, RotationalSpeedUnit.DeciradianPerSecond);
            Assert.Equal(1, quantity01.DeciradiansPerSecond);
            Assert.Equal(RotationalSpeedUnit.DeciradianPerSecond, quantity01.Unit);

            var quantity02 = RotationalSpeed.From(1, RotationalSpeedUnit.DegreePerMinute);
            Assert.Equal(1, quantity02.DegreesPerMinute);
            Assert.Equal(RotationalSpeedUnit.DegreePerMinute, quantity02.Unit);

            var quantity03 = RotationalSpeed.From(1, RotationalSpeedUnit.DegreePerSecond);
            Assert.Equal(1, quantity03.DegreesPerSecond);
            Assert.Equal(RotationalSpeedUnit.DegreePerSecond, quantity03.Unit);

            var quantity04 = RotationalSpeed.From(1, RotationalSpeedUnit.MicrodegreePerSecond);
            Assert.Equal(1, quantity04.MicrodegreesPerSecond);
            Assert.Equal(RotationalSpeedUnit.MicrodegreePerSecond, quantity04.Unit);

            var quantity05 = RotationalSpeed.From(1, RotationalSpeedUnit.MicroradianPerSecond);
            Assert.Equal(1, quantity05.MicroradiansPerSecond);
            Assert.Equal(RotationalSpeedUnit.MicroradianPerSecond, quantity05.Unit);

            var quantity06 = RotationalSpeed.From(1, RotationalSpeedUnit.MillidegreePerSecond);
            Assert.Equal(1, quantity06.MillidegreesPerSecond);
            Assert.Equal(RotationalSpeedUnit.MillidegreePerSecond, quantity06.Unit);

            var quantity07 = RotationalSpeed.From(1, RotationalSpeedUnit.MilliradianPerSecond);
            Assert.Equal(1, quantity07.MilliradiansPerSecond);
            Assert.Equal(RotationalSpeedUnit.MilliradianPerSecond, quantity07.Unit);

            var quantity08 = RotationalSpeed.From(1, RotationalSpeedUnit.NanodegreePerSecond);
            Assert.Equal(1, quantity08.NanodegreesPerSecond);
            Assert.Equal(RotationalSpeedUnit.NanodegreePerSecond, quantity08.Unit);

            var quantity09 = RotationalSpeed.From(1, RotationalSpeedUnit.NanoradianPerSecond);
            Assert.Equal(1, quantity09.NanoradiansPerSecond);
            Assert.Equal(RotationalSpeedUnit.NanoradianPerSecond, quantity09.Unit);

            var quantity10 = RotationalSpeed.From(1, RotationalSpeedUnit.RadianPerSecond);
            Assert.Equal(1, quantity10.RadiansPerSecond);
            Assert.Equal(RotationalSpeedUnit.RadianPerSecond, quantity10.Unit);

            var quantity11 = RotationalSpeed.From(1, RotationalSpeedUnit.RevolutionPerMinute);
            Assert.Equal(1, quantity11.RevolutionsPerMinute);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerMinute, quantity11.Unit);

            var quantity12 = RotationalSpeed.From(1, RotationalSpeedUnit.RevolutionPerSecond);
            Assert.Equal(1, quantity12.RevolutionsPerSecond);
            Assert.Equal(RotationalSpeedUnit.RevolutionPerSecond, quantity12.Unit);

        }

        [Fact]
        public void FromRadiansPerSecond_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => RotationalSpeed.FromRadiansPerSecond(double.PositiveInfinity));
            var exception2 = Record.Exception(() => RotationalSpeed.FromRadiansPerSecond(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromRadiansPerSecond_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => RotationalSpeed.FromRadiansPerSecond(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            AssertEx.EqualTolerance(CentiradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.CentiradianPerSecond), CentiradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DeciradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DeciradianPerSecond), DeciradiansPerSecondTolerance);
            AssertEx.EqualTolerance(DegreesPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DegreePerMinute), DegreesPerMinuteTolerance);
            AssertEx.EqualTolerance(DegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.DegreePerSecond), DegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicrodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MicrodegreePerSecond), MicrodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MicroradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MicroradianPerSecond), MicroradiansPerSecondTolerance);
            AssertEx.EqualTolerance(MillidegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MillidegreePerSecond), MillidegreesPerSecondTolerance);
            AssertEx.EqualTolerance(MilliradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.MilliradianPerSecond), MilliradiansPerSecondTolerance);
            AssertEx.EqualTolerance(NanodegreesPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.NanodegreePerSecond), NanodegreesPerSecondTolerance);
            AssertEx.EqualTolerance(NanoradiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.NanoradianPerSecond), NanoradiansPerSecondTolerance);
            AssertEx.EqualTolerance(RadiansPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RadianPerSecond), RadiansPerSecondTolerance);
            AssertEx.EqualTolerance(RevolutionsPerMinuteInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RevolutionPerMinute), RevolutionsPerMinuteTolerance);
            AssertEx.EqualTolerance(RevolutionsPerSecondInOneRadianPerSecond, radianpersecond.As(RotationalSpeedUnit.RevolutionPerSecond), RevolutionsPerSecondTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = RotationalSpeed.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
            var expectedValue = quantity.As(RotationalSpeed.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
            var expectedUnit = RotationalSpeed.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                RotationalSpeed quantityToConvert = quantity;

                RotationalSpeed convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<RotationalSpeedUnit> quantityToConvert = quantity;

                IQuantity<RotationalSpeedUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<RotationalSpeedUnit> quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<RotationalSpeedUnit> quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new RotationalSpeed(value: 1, unit: RotationalSpeed.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 crad/s", RotationalSpeedUnit.CentiradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 drad/s", RotationalSpeedUnit.DeciradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 °/min", RotationalSpeedUnit.DegreePerMinute, 4.2)]
        [InlineData("en-US", "4.2 deg/min", RotationalSpeedUnit.DegreePerMinute, 4.2)]
        [InlineData("en-US", "4.2 °/s", RotationalSpeedUnit.DegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 deg/s", RotationalSpeedUnit.DegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 µ°/s", RotationalSpeedUnit.MicrodegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 µrad/s", RotationalSpeedUnit.MicroradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 m°/s", RotationalSpeedUnit.MillidegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 mdeg/s", RotationalSpeedUnit.MillidegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 mrad/s", RotationalSpeedUnit.MilliradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 n°/s", RotationalSpeedUnit.NanodegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 ndeg/s", RotationalSpeedUnit.NanodegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 nrad/s", RotationalSpeedUnit.NanoradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 rad/s", RotationalSpeedUnit.RadianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 rpm", RotationalSpeedUnit.RevolutionPerMinute, 4.2)]
        [InlineData("en-US", "4.2 r/min", RotationalSpeedUnit.RevolutionPerMinute, 4.2)]
        [InlineData("en-US", "4.2 r/s", RotationalSpeedUnit.RevolutionPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 срад/с", RotationalSpeedUnit.CentiradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 драд/с", RotationalSpeedUnit.DeciradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 °/с", RotationalSpeedUnit.DegreePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мк°/с", RotationalSpeedUnit.MicrodegreePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мкрад/с", RotationalSpeedUnit.MicroradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 м°/с", RotationalSpeedUnit.MillidegreePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мрад/с", RotationalSpeedUnit.MilliradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 н°/с", RotationalSpeedUnit.NanodegreePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 нрад/с", RotationalSpeedUnit.NanoradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 рад/с", RotationalSpeedUnit.RadianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 об/мин", RotationalSpeedUnit.RevolutionPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 об/с", RotationalSpeedUnit.RevolutionPerSecond, 4.2)]
        public void Parse(string culture, string quantityString, RotationalSpeedUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = RotationalSpeed.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 crad/s", RotationalSpeedUnit.CentiradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 drad/s", RotationalSpeedUnit.DeciradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 °/min", RotationalSpeedUnit.DegreePerMinute, 4.2)]
        [InlineData("en-US", "4.2 deg/min", RotationalSpeedUnit.DegreePerMinute, 4.2)]
        [InlineData("en-US", "4.2 °/s", RotationalSpeedUnit.DegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 deg/s", RotationalSpeedUnit.DegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 µ°/s", RotationalSpeedUnit.MicrodegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 µrad/s", RotationalSpeedUnit.MicroradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 m°/s", RotationalSpeedUnit.MillidegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 mdeg/s", RotationalSpeedUnit.MillidegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 mrad/s", RotationalSpeedUnit.MilliradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 n°/s", RotationalSpeedUnit.NanodegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 ndeg/s", RotationalSpeedUnit.NanodegreePerSecond, 4.2)]
        [InlineData("en-US", "4.2 nrad/s", RotationalSpeedUnit.NanoradianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 rad/s", RotationalSpeedUnit.RadianPerSecond, 4.2)]
        [InlineData("en-US", "4.2 rpm", RotationalSpeedUnit.RevolutionPerMinute, 4.2)]
        [InlineData("en-US", "4.2 r/min", RotationalSpeedUnit.RevolutionPerMinute, 4.2)]
        [InlineData("en-US", "4.2 r/s", RotationalSpeedUnit.RevolutionPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 срад/с", RotationalSpeedUnit.CentiradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 драд/с", RotationalSpeedUnit.DeciradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 °/с", RotationalSpeedUnit.DegreePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мк°/с", RotationalSpeedUnit.MicrodegreePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мкрад/с", RotationalSpeedUnit.MicroradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 м°/с", RotationalSpeedUnit.MillidegreePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 мрад/с", RotationalSpeedUnit.MilliradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 н°/с", RotationalSpeedUnit.NanodegreePerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 нрад/с", RotationalSpeedUnit.NanoradianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 рад/с", RotationalSpeedUnit.RadianPerSecond, 4.2)]
        [InlineData("ru-RU", "4,2 об/мин", RotationalSpeedUnit.RevolutionPerMinute, 4.2)]
        [InlineData("ru-RU", "4,2 об/с", RotationalSpeedUnit.RevolutionPerSecond, 4.2)]
        public void TryParse(string culture, string quantityString, RotationalSpeedUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(RotationalSpeed.TryParse(quantityString, out RotationalSpeed parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("crad/s", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("drad/s", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("°/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("deg/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("°/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("deg/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("µ°/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("µrad/s", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("m°/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("mdeg/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("mrad/s", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("n°/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("ndeg/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("nrad/s", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("rad/s", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("rpm", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("r/min", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("r/s", RotationalSpeedUnit.RevolutionPerSecond)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RotationalSpeedUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            RotationalSpeedUnit parsedUnit = RotationalSpeed.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("crad/s", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("drad/s", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("°/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("deg/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("°/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("deg/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("µ°/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("µrad/s", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("m°/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("mdeg/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("mrad/s", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("n°/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("ndeg/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("nrad/s", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("rad/s", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("rpm", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("r/min", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("r/s", RotationalSpeedUnit.RevolutionPerSecond)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RotationalSpeedUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            RotationalSpeedUnit parsedUnit = RotationalSpeed.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "crad/s", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("en-US", "drad/s", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("en-US", "°/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("en-US", "deg/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("en-US", "°/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("en-US", "deg/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("en-US", "µ°/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("en-US", "µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("en-US", "µrad/s", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("en-US", "m°/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("en-US", "mdeg/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("en-US", "mrad/s", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("en-US", "n°/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("en-US", "ndeg/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("en-US", "nrad/s", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("en-US", "rad/s", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("en-US", "rpm", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("en-US", "r/min", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("en-US", "r/s", RotationalSpeedUnit.RevolutionPerSecond)]
        [InlineData("ru-RU", "срад/с", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("ru-RU", "драд/с", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("ru-RU", "°/с", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("ru-RU", "мк°/с", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("ru-RU", "мкрад/с", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("ru-RU", "м°/с", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("ru-RU", "мрад/с", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("ru-RU", "н°/с", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("ru-RU", "нрад/с", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("ru-RU", "рад/с", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("ru-RU", "об/мин", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("ru-RU", "об/с", RotationalSpeedUnit.RevolutionPerSecond)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, RotationalSpeedUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            RotationalSpeedUnit parsedUnit = RotationalSpeed.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "crad/s", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("en-US", "drad/s", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("en-US", "°/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("en-US", "deg/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("en-US", "°/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("en-US", "deg/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("en-US", "µ°/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("en-US", "µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("en-US", "µrad/s", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("en-US", "m°/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("en-US", "mdeg/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("en-US", "mrad/s", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("en-US", "n°/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("en-US", "ndeg/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("en-US", "nrad/s", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("en-US", "rad/s", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("en-US", "rpm", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("en-US", "r/min", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("en-US", "r/s", RotationalSpeedUnit.RevolutionPerSecond)]
        [InlineData("ru-RU", "срад/с", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("ru-RU", "драд/с", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("ru-RU", "°/с", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("ru-RU", "мк°/с", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("ru-RU", "мкрад/с", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("ru-RU", "м°/с", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("ru-RU", "мрад/с", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("ru-RU", "н°/с", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("ru-RU", "нрад/с", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("ru-RU", "рад/с", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("ru-RU", "об/мин", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("ru-RU", "об/с", RotationalSpeedUnit.RevolutionPerSecond)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, RotationalSpeedUnit expectedUnit)
        {
            RotationalSpeedUnit parsedUnit = RotationalSpeed.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("crad/s", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("drad/s", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("°/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("deg/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("°/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("deg/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("µ°/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("µrad/s", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("m°/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("mdeg/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("mrad/s", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("n°/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("ndeg/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("nrad/s", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("rad/s", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("rpm", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("r/min", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("r/s", RotationalSpeedUnit.RevolutionPerSecond)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RotationalSpeedUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(RotationalSpeed.TryParseUnit(abbreviation, out RotationalSpeedUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("crad/s", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("drad/s", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("°/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("deg/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("°/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("deg/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("µ°/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("µrad/s", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("m°/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("mdeg/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("mrad/s", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("n°/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("ndeg/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("nrad/s", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("rad/s", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("rpm", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("r/min", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("r/s", RotationalSpeedUnit.RevolutionPerSecond)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RotationalSpeedUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(RotationalSpeed.TryParseUnit(abbreviation, out RotationalSpeedUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "crad/s", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("en-US", "drad/s", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("en-US", "°/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("en-US", "deg/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("en-US", "°/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("en-US", "deg/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("en-US", "µ°/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("en-US", "µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("en-US", "µrad/s", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("en-US", "m°/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("en-US", "mdeg/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("en-US", "mrad/s", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("en-US", "n°/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("en-US", "ndeg/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("en-US", "nrad/s", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("en-US", "rad/s", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("en-US", "rpm", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("en-US", "r/min", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("en-US", "r/s", RotationalSpeedUnit.RevolutionPerSecond)]
        [InlineData("ru-RU", "срад/с", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("ru-RU", "драд/с", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("ru-RU", "°/с", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("ru-RU", "мк°/с", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("ru-RU", "мкрад/с", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("ru-RU", "м°/с", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("ru-RU", "мрад/с", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("ru-RU", "н°/с", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("ru-RU", "нрад/с", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("ru-RU", "рад/с", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("ru-RU", "об/мин", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("ru-RU", "об/с", RotationalSpeedUnit.RevolutionPerSecond)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, RotationalSpeedUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(RotationalSpeed.TryParseUnit(abbreviation, out RotationalSpeedUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "crad/s", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("en-US", "drad/s", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("en-US", "°/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("en-US", "deg/min", RotationalSpeedUnit.DegreePerMinute)]
        [InlineData("en-US", "°/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("en-US", "deg/s", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("en-US", "µ°/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("en-US", "µdeg/s", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("en-US", "µrad/s", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("en-US", "m°/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("en-US", "mdeg/s", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("en-US", "mrad/s", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("en-US", "n°/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("en-US", "ndeg/s", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("en-US", "nrad/s", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("en-US", "rad/s", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("en-US", "rpm", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("en-US", "r/min", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("en-US", "r/s", RotationalSpeedUnit.RevolutionPerSecond)]
        [InlineData("ru-RU", "срад/с", RotationalSpeedUnit.CentiradianPerSecond)]
        [InlineData("ru-RU", "драд/с", RotationalSpeedUnit.DeciradianPerSecond)]
        [InlineData("ru-RU", "°/с", RotationalSpeedUnit.DegreePerSecond)]
        [InlineData("ru-RU", "мк°/с", RotationalSpeedUnit.MicrodegreePerSecond)]
        [InlineData("ru-RU", "мкрад/с", RotationalSpeedUnit.MicroradianPerSecond)]
        [InlineData("ru-RU", "м°/с", RotationalSpeedUnit.MillidegreePerSecond)]
        [InlineData("ru-RU", "мрад/с", RotationalSpeedUnit.MilliradianPerSecond)]
        [InlineData("ru-RU", "н°/с", RotationalSpeedUnit.NanodegreePerSecond)]
        [InlineData("ru-RU", "нрад/с", RotationalSpeedUnit.NanoradianPerSecond)]
        [InlineData("ru-RU", "рад/с", RotationalSpeedUnit.RadianPerSecond)]
        [InlineData("ru-RU", "об/мин", RotationalSpeedUnit.RevolutionPerMinute)]
        [InlineData("ru-RU", "об/с", RotationalSpeedUnit.RevolutionPerSecond)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, RotationalSpeedUnit expectedUnit)
        {
            Assert.True(RotationalSpeed.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out RotationalSpeedUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", RotationalSpeedUnit.CentiradianPerSecond, "crad/s")]
        [InlineData("en-US", RotationalSpeedUnit.DeciradianPerSecond, "drad/s")]
        [InlineData("en-US", RotationalSpeedUnit.DegreePerMinute, "°/min")]
        [InlineData("en-US", RotationalSpeedUnit.DegreePerSecond, "°/s")]
        [InlineData("en-US", RotationalSpeedUnit.MicrodegreePerSecond, "µ°/s")]
        [InlineData("en-US", RotationalSpeedUnit.MicroradianPerSecond, "µrad/s")]
        [InlineData("en-US", RotationalSpeedUnit.MillidegreePerSecond, "m°/s")]
        [InlineData("en-US", RotationalSpeedUnit.MilliradianPerSecond, "mrad/s")]
        [InlineData("en-US", RotationalSpeedUnit.NanodegreePerSecond, "n°/s")]
        [InlineData("en-US", RotationalSpeedUnit.NanoradianPerSecond, "nrad/s")]
        [InlineData("en-US", RotationalSpeedUnit.RadianPerSecond, "rad/s")]
        [InlineData("en-US", RotationalSpeedUnit.RevolutionPerMinute, "rpm")]
        [InlineData("en-US", RotationalSpeedUnit.RevolutionPerSecond, "r/s")]
        [InlineData("ru-RU", RotationalSpeedUnit.CentiradianPerSecond, "срад/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.DeciradianPerSecond, "драд/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.DegreePerSecond, "°/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.MicrodegreePerSecond, "мк°/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.MicroradianPerSecond, "мкрад/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.MillidegreePerSecond, "м°/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.MilliradianPerSecond, "мрад/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.NanodegreePerSecond, "н°/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.NanoradianPerSecond, "нрад/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.RadianPerSecond, "рад/с")]
        [InlineData("ru-RU", RotationalSpeedUnit.RevolutionPerMinute, "об/мин")]
        [InlineData("ru-RU", RotationalSpeedUnit.RevolutionPerSecond, "об/с")]
        public void GetAbbreviationForCulture(string culture, RotationalSpeedUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = RotationalSpeed.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(RotationalSpeed.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = RotationalSpeed.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(RotationalSpeedUnit unit)
        {
            var inBaseUnits = RotationalSpeed.From(1.0, RotationalSpeed.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(RotationalSpeedUnit unit)
        {
            var quantity = RotationalSpeed.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(RotationalSpeedUnit unit)
        {
            Assert.All(RotationalSpeed.Units.Where(u => u != RotationalSpeed.BaseUnit), fromUnit =>
            {
                var quantity = RotationalSpeed.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(RotationalSpeedUnit unit)
        {
            var quantity = default(RotationalSpeed);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(RotationalSpeedUnit unit)
        {
            var quantity = RotationalSpeed.From(3, RotationalSpeed.BaseUnit);
            RotationalSpeed expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<RotationalSpeedUnit> quantityToConvert = quantity;
                IQuantity<RotationalSpeedUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(3);
            Assert.Equal(3, RotationalSpeed.FromCentiradiansPerSecond(radianpersecond.CentiradiansPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromDeciradiansPerSecond(radianpersecond.DeciradiansPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromDegreesPerMinute(radianpersecond.DegreesPerMinute).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromDegreesPerSecond(radianpersecond.DegreesPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromMicrodegreesPerSecond(radianpersecond.MicrodegreesPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromMicroradiansPerSecond(radianpersecond.MicroradiansPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromMillidegreesPerSecond(radianpersecond.MillidegreesPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromMilliradiansPerSecond(radianpersecond.MilliradiansPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromNanodegreesPerSecond(radianpersecond.NanodegreesPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromNanoradiansPerSecond(radianpersecond.NanoradiansPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromRadiansPerSecond(radianpersecond.RadiansPerSecond).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromRevolutionsPerMinute(radianpersecond.RevolutionsPerMinute).RadiansPerSecond);
            Assert.Equal(3, RotationalSpeed.FromRevolutionsPerSecond(radianpersecond.RevolutionsPerSecond).RadiansPerSecond);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RotationalSpeed v = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Equal(-1, -v.RadiansPerSecond);
            Assert.Equal(2, (RotationalSpeed.FromRadiansPerSecond(3) - v).RadiansPerSecond);
            Assert.Equal(2, (v + v).RadiansPerSecond);
            Assert.Equal(10, (v * 10).RadiansPerSecond);
            Assert.Equal(10, (10 * v).RadiansPerSecond);
            Assert.Equal(2, (RotationalSpeed.FromRadiansPerSecond(10) / 5).RadiansPerSecond);
            Assert.Equal(2, RotationalSpeed.FromRadiansPerSecond(10) / RotationalSpeed.FromRadiansPerSecond(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            RotationalSpeed oneRadianPerSecond = RotationalSpeed.FromRadiansPerSecond(1);
            RotationalSpeed twoRadiansPerSecond = RotationalSpeed.FromRadiansPerSecond(2);

            Assert.True(oneRadianPerSecond < twoRadiansPerSecond);
            Assert.True(oneRadianPerSecond <= twoRadiansPerSecond);
            Assert.True(twoRadiansPerSecond > oneRadianPerSecond);
            Assert.True(twoRadiansPerSecond >= oneRadianPerSecond);

            Assert.False(oneRadianPerSecond > twoRadiansPerSecond);
            Assert.False(oneRadianPerSecond >= twoRadiansPerSecond);
            Assert.False(twoRadiansPerSecond < oneRadianPerSecond);
            Assert.False(twoRadiansPerSecond <= oneRadianPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Equal(0, radianpersecond.CompareTo(radianpersecond));
            Assert.True(radianpersecond.CompareTo(RotationalSpeed.Zero) > 0);
            Assert.True(RotationalSpeed.Zero.CompareTo(radianpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Throws<ArgumentException>(() => radianpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => radianpersecond.CompareTo(null));
        }

        [Theory]
        [InlineData(1, RotationalSpeedUnit.RadianPerSecond, 1, RotationalSpeedUnit.RadianPerSecond, true)]  // Same value and unit.
        [InlineData(1, RotationalSpeedUnit.RadianPerSecond, 2, RotationalSpeedUnit.RadianPerSecond, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, RotationalSpeedUnit unitA, double valueB, RotationalSpeedUnit unitB, bool expectEqual)
        {
            var a = new RotationalSpeed(valueA, unitA);
            var b = new RotationalSpeed(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = RotationalSpeed.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.False(radianpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RotationalSpeed radianpersecond = RotationalSpeed.FromRadiansPerSecond(1);
            Assert.False(radianpersecond.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance_IsImplemented(double firstValue, double secondValue)
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(firstValue);
            var otherQuantity = RotationalSpeed.FromRadiansPerSecond(secondValue);
            RotationalSpeed maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, RotationalSpeed.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1);
            var negativeTolerance = RotationalSpeed.FromRadiansPerSecond(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumUtils.GetEnumValues<RotationalSpeedUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RotationalSpeed.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(RotationalSpeed.Info.Units, RotationalSpeed.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, RotationalSpeed.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 crad/s", new RotationalSpeed(1, RotationalSpeedUnit.CentiradianPerSecond).ToString());
            Assert.Equal("1 drad/s", new RotationalSpeed(1, RotationalSpeedUnit.DeciradianPerSecond).ToString());
            Assert.Equal("1 °/min", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerMinute).ToString());
            Assert.Equal("1 °/s", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerSecond).ToString());
            Assert.Equal("1 µ°/s", new RotationalSpeed(1, RotationalSpeedUnit.MicrodegreePerSecond).ToString());
            Assert.Equal("1 µrad/s", new RotationalSpeed(1, RotationalSpeedUnit.MicroradianPerSecond).ToString());
            Assert.Equal("1 m°/s", new RotationalSpeed(1, RotationalSpeedUnit.MillidegreePerSecond).ToString());
            Assert.Equal("1 mrad/s", new RotationalSpeed(1, RotationalSpeedUnit.MilliradianPerSecond).ToString());
            Assert.Equal("1 n°/s", new RotationalSpeed(1, RotationalSpeedUnit.NanodegreePerSecond).ToString());
            Assert.Equal("1 nrad/s", new RotationalSpeed(1, RotationalSpeedUnit.NanoradianPerSecond).ToString());
            Assert.Equal("1 rad/s", new RotationalSpeed(1, RotationalSpeedUnit.RadianPerSecond).ToString());
            Assert.Equal("1 rpm", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerMinute).ToString());
            Assert.Equal("1 r/s", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerSecond).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 crad/s", new RotationalSpeed(1, RotationalSpeedUnit.CentiradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 drad/s", new RotationalSpeed(1, RotationalSpeedUnit.DeciradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 °/min", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerMinute).ToString(swedishCulture));
            Assert.Equal("1 °/s", new RotationalSpeed(1, RotationalSpeedUnit.DegreePerSecond).ToString(swedishCulture));
            Assert.Equal("1 µ°/s", new RotationalSpeed(1, RotationalSpeedUnit.MicrodegreePerSecond).ToString(swedishCulture));
            Assert.Equal("1 µrad/s", new RotationalSpeed(1, RotationalSpeedUnit.MicroradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 m°/s", new RotationalSpeed(1, RotationalSpeedUnit.MillidegreePerSecond).ToString(swedishCulture));
            Assert.Equal("1 mrad/s", new RotationalSpeed(1, RotationalSpeedUnit.MilliradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 n°/s", new RotationalSpeed(1, RotationalSpeedUnit.NanodegreePerSecond).ToString(swedishCulture));
            Assert.Equal("1 nrad/s", new RotationalSpeed(1, RotationalSpeedUnit.NanoradianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 rad/s", new RotationalSpeed(1, RotationalSpeedUnit.RadianPerSecond).ToString(swedishCulture));
            Assert.Equal("1 rpm", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerMinute).ToString(swedishCulture));
            Assert.Equal("1 r/s", new RotationalSpeed(1, RotationalSpeedUnit.RevolutionPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s1"));
            Assert.Equal("0.12 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s2"));
            Assert.Equal("0.123 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s3"));
            Assert.Equal("0.1235 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 rad/s", new RotationalSpeed(0.123456, RotationalSpeedUnit.RadianPerSecond).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(1.0);
            var expected = Comparison.GetHashCode(typeof(RotationalSpeed), quantity.As(RotationalSpeed.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = RotationalSpeed.FromRadiansPerSecond(value);
            Assert.Equal(RotationalSpeed.FromRadiansPerSecond(-value), -quantity);
        }
    }
}
