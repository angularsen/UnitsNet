//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToRadioactivity
{
    /// <summary>
    /// A number to Radioactivity Extensions
    /// </summary>
    public static class NumberToRadioactivityExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Radioactivity.FromBecquerels(QuantityValue)" />
            public Radioactivity Becquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromBecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromBecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromCuries(QuantityValue)" />
            public Radioactivity Curies
#if NET7_0_OR_GREATER
                => Radioactivity.FromCuries(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromCuries(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromExabecquerels(QuantityValue)" />
            public Radioactivity Exabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromExabecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromExabecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromGigabecquerels(QuantityValue)" />
            public Radioactivity Gigabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromGigabecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromGigabecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromGigacuries(QuantityValue)" />
            public Radioactivity Gigacuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromGigacuries(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromGigacuries(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromGigarutherfords(QuantityValue)" />
            public Radioactivity Gigarutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromGigarutherfords(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromGigarutherfords(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromKilobecquerels(QuantityValue)" />
            public Radioactivity Kilobecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromKilobecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromKilobecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromKilocuries(QuantityValue)" />
            public Radioactivity Kilocuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromKilocuries(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromKilocuries(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromKilorutherfords(QuantityValue)" />
            public Radioactivity Kilorutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromKilorutherfords(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromKilorutherfords(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromMegabecquerels(QuantityValue)" />
            public Radioactivity Megabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromMegabecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromMegabecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromMegacuries(QuantityValue)" />
            public Radioactivity Megacuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromMegacuries(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromMegacuries(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromMegarutherfords(QuantityValue)" />
            public Radioactivity Megarutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromMegarutherfords(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromMegarutherfords(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromMicrobecquerels(QuantityValue)" />
            public Radioactivity Microbecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromMicrobecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromMicrobecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromMicrocuries(QuantityValue)" />
            public Radioactivity Microcuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromMicrocuries(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromMicrocuries(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromMicrorutherfords(QuantityValue)" />
            public Radioactivity Microrutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromMicrorutherfords(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromMicrorutherfords(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromMillibecquerels(QuantityValue)" />
            public Radioactivity Millibecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromMillibecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromMillibecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromMillicuries(QuantityValue)" />
            public Radioactivity Millicuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromMillicuries(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromMillicuries(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromMillirutherfords(QuantityValue)" />
            public Radioactivity Millirutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromMillirutherfords(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromMillirutherfords(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromNanobecquerels(QuantityValue)" />
            public Radioactivity Nanobecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromNanobecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromNanobecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromNanocuries(QuantityValue)" />
            public Radioactivity Nanocuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromNanocuries(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromNanocuries(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromNanorutherfords(QuantityValue)" />
            public Radioactivity Nanorutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromNanorutherfords(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromNanorutherfords(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromPetabecquerels(QuantityValue)" />
            public Radioactivity Petabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromPetabecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromPetabecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromPicobecquerels(QuantityValue)" />
            public Radioactivity Picobecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromPicobecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromPicobecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromPicocuries(QuantityValue)" />
            public Radioactivity Picocuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromPicocuries(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromPicocuries(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromPicorutherfords(QuantityValue)" />
            public Radioactivity Picorutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromPicorutherfords(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromPicorutherfords(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromRutherfords(QuantityValue)" />
            public Radioactivity Rutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromRutherfords(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromRutherfords(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromTerabecquerels(QuantityValue)" />
            public Radioactivity Terabecquerels
#if NET7_0_OR_GREATER
                => Radioactivity.FromTerabecquerels(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromTerabecquerels(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromTeracuries(QuantityValue)" />
            public Radioactivity Teracuries
#if NET7_0_OR_GREATER
                => Radioactivity.FromTeracuries(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromTeracuries(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Radioactivity.FromTerarutherfords(QuantityValue)" />
            public Radioactivity Terarutherfords
#if NET7_0_OR_GREATER
                => Radioactivity.FromTerarutherfords(QuantityValue.CreateChecked(value));
#else
                => Radioactivity.FromTerarutherfords(value.ToQuantityValue());
#endif

        }
    }
}
