//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToStandardVolumeFlow
{
    /// <summary>
    /// A number to StandardVolumeFlow Extensions
    /// </summary>
    public static class NumberToStandardVolumeFlowExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="StandardVolumeFlow.FromStandardCubicCentimetersPerMinute(QuantityValue)" />
            public StandardVolumeFlow StandardCubicCentimetersPerMinute
#if NET7_0_OR_GREATER
                => StandardVolumeFlow.FromStandardCubicCentimetersPerMinute(QuantityValue.CreateChecked(value));
#else
                => StandardVolumeFlow.FromStandardCubicCentimetersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="StandardVolumeFlow.FromStandardCubicFeetPerHour(QuantityValue)" />
            public StandardVolumeFlow StandardCubicFeetPerHour
#if NET7_0_OR_GREATER
                => StandardVolumeFlow.FromStandardCubicFeetPerHour(QuantityValue.CreateChecked(value));
#else
                => StandardVolumeFlow.FromStandardCubicFeetPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="StandardVolumeFlow.FromStandardCubicFeetPerMinute(QuantityValue)" />
            public StandardVolumeFlow StandardCubicFeetPerMinute
#if NET7_0_OR_GREATER
                => StandardVolumeFlow.FromStandardCubicFeetPerMinute(QuantityValue.CreateChecked(value));
#else
                => StandardVolumeFlow.FromStandardCubicFeetPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="StandardVolumeFlow.FromStandardCubicFeetPerSecond(QuantityValue)" />
            public StandardVolumeFlow StandardCubicFeetPerSecond
#if NET7_0_OR_GREATER
                => StandardVolumeFlow.FromStandardCubicFeetPerSecond(QuantityValue.CreateChecked(value));
#else
                => StandardVolumeFlow.FromStandardCubicFeetPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="StandardVolumeFlow.FromStandardCubicMetersPerDay(QuantityValue)" />
            public StandardVolumeFlow StandardCubicMetersPerDay
#if NET7_0_OR_GREATER
                => StandardVolumeFlow.FromStandardCubicMetersPerDay(QuantityValue.CreateChecked(value));
#else
                => StandardVolumeFlow.FromStandardCubicMetersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="StandardVolumeFlow.FromStandardCubicMetersPerHour(QuantityValue)" />
            public StandardVolumeFlow StandardCubicMetersPerHour
#if NET7_0_OR_GREATER
                => StandardVolumeFlow.FromStandardCubicMetersPerHour(QuantityValue.CreateChecked(value));
#else
                => StandardVolumeFlow.FromStandardCubicMetersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="StandardVolumeFlow.FromStandardCubicMetersPerMinute(QuantityValue)" />
            public StandardVolumeFlow StandardCubicMetersPerMinute
#if NET7_0_OR_GREATER
                => StandardVolumeFlow.FromStandardCubicMetersPerMinute(QuantityValue.CreateChecked(value));
#else
                => StandardVolumeFlow.FromStandardCubicMetersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="StandardVolumeFlow.FromStandardCubicMetersPerSecond(QuantityValue)" />
            public StandardVolumeFlow StandardCubicMetersPerSecond
#if NET7_0_OR_GREATER
                => StandardVolumeFlow.FromStandardCubicMetersPerSecond(QuantityValue.CreateChecked(value));
#else
                => StandardVolumeFlow.FromStandardCubicMetersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="StandardVolumeFlow.FromStandardLitersPerMinute(QuantityValue)" />
            public StandardVolumeFlow StandardLitersPerMinute
#if NET7_0_OR_GREATER
                => StandardVolumeFlow.FromStandardLitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => StandardVolumeFlow.FromStandardLitersPerMinute(value.ToQuantityValue());
#endif

        }
    }
}
