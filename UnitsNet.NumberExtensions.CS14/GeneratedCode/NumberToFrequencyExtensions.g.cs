//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToFrequency
{
    /// <summary>
    /// A number to Frequency Extensions
    /// </summary>
    public static class NumberToFrequencyExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Frequency.FromBeatsPerMinute(double)" />
            public Frequency BeatsPerMinute
#if NET7_0_OR_GREATER
                => Frequency.FromBeatsPerMinute(double.CreateChecked(value));
#else
                => Frequency.FromBeatsPerMinute(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromCyclesPerHour(double)" />
            public Frequency CyclesPerHour
#if NET7_0_OR_GREATER
                => Frequency.FromCyclesPerHour(double.CreateChecked(value));
#else
                => Frequency.FromCyclesPerHour(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromCyclesPerMinute(double)" />
            public Frequency CyclesPerMinute
#if NET7_0_OR_GREATER
                => Frequency.FromCyclesPerMinute(double.CreateChecked(value));
#else
                => Frequency.FromCyclesPerMinute(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromGigahertz(double)" />
            public Frequency Gigahertz
#if NET7_0_OR_GREATER
                => Frequency.FromGigahertz(double.CreateChecked(value));
#else
                => Frequency.FromGigahertz(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromHertz(double)" />
            public Frequency Hertz
#if NET7_0_OR_GREATER
                => Frequency.FromHertz(double.CreateChecked(value));
#else
                => Frequency.FromHertz(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromKilohertz(double)" />
            public Frequency Kilohertz
#if NET7_0_OR_GREATER
                => Frequency.FromKilohertz(double.CreateChecked(value));
#else
                => Frequency.FromKilohertz(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromMegahertz(double)" />
            public Frequency Megahertz
#if NET7_0_OR_GREATER
                => Frequency.FromMegahertz(double.CreateChecked(value));
#else
                => Frequency.FromMegahertz(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromMicrohertz(double)" />
            public Frequency Microhertz
#if NET7_0_OR_GREATER
                => Frequency.FromMicrohertz(double.CreateChecked(value));
#else
                => Frequency.FromMicrohertz(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromMillihertz(double)" />
            public Frequency Millihertz
#if NET7_0_OR_GREATER
                => Frequency.FromMillihertz(double.CreateChecked(value));
#else
                => Frequency.FromMillihertz(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromPerSecond(double)" />
            public Frequency PerSecond
#if NET7_0_OR_GREATER
                => Frequency.FromPerSecond(double.CreateChecked(value));
#else
                => Frequency.FromPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromRadiansPerSecond(double)" />
            public Frequency RadiansPerSecond
#if NET7_0_OR_GREATER
                => Frequency.FromRadiansPerSecond(double.CreateChecked(value));
#else
                => Frequency.FromRadiansPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Frequency.FromTerahertz(double)" />
            public Frequency Terahertz
#if NET7_0_OR_GREATER
                => Frequency.FromTerahertz(double.CreateChecked(value));
#else
                => Frequency.FromTerahertz(value.ToDouble(null));
#endif

        }
    }
}
