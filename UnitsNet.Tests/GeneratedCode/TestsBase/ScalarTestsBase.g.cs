//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Scalar.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ScalarTestsBase : QuantityTestsBase
    {
        protected abstract double AmountInOneAmount { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AmountTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ScalarUnit unit)
        {
            return unit switch
            {
                ScalarUnit.Amount => (AmountInOneAmount, AmountTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ScalarUnit.Amount },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Scalar();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ScalarUnit.Amount, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Scalar(double.PositiveInfinity, ScalarUnit.Amount));
            var exception2 = Record.Exception(() => new Scalar(double.NegativeInfinity, ScalarUnit.Amount));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Scalar(double.NaN, ScalarUnit.Amount));

            Assert.Null(exception);
        }

        [Fact]
        public void Scalar_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ScalarUnit[] unitsOrderedByName = EnumHelper.GetValues<ScalarUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Scalar(1, ScalarUnit.Amount);

            QuantityInfo<Scalar, ScalarUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Scalar", quantityInfo.Name);
            Assert.Equal(Scalar.Zero, quantityInfo.Zero);
            Assert.Equal(Scalar.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Scalar.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ScalarUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void AmountToScalarUnits()
        {
            Scalar amount = Scalar.FromAmount(1);
            AssertEx.EqualTolerance(AmountInOneAmount, amount.Amount, AmountTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<ScalarUnit>(), unit =>
            {
                var quantity = Scalar.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromAmount_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Scalar.FromAmount(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Scalar.FromAmount(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromAmount_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Scalar.FromAmount(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var amount = Scalar.FromAmount(1);
            AssertEx.EqualTolerance(AmountInOneAmount, amount.As(ScalarUnit.Amount), AmountTolerance);
        }

        [Fact]
        public void As_UnitSystem_ReturnsValueInDimensionlessUnit()
        {
            var quantity = new Scalar(value: 1, unit: ScalarUnit.Amount);

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(quantity.Value, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Scalar(value: 1, unit: Scalar.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void ToUnit_UnitSystem_ReturnsValueInDimensionlessUnit()
        {
            Assert.Multiple(() =>
            {
                var quantity = new Scalar(value: 1, unit: ScalarUnit.Amount);

                Scalar convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(ScalarUnit.Amount, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ScalarUnit> quantity = new Scalar(value: 1, unit: ScalarUnit.Amount);

                IQuantity<ScalarUnit> convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(ScalarUnit.Amount, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnitUntyped_UnitSystem_ReturnsValueInDimensionlessUnit()
        {
            IQuantity quantity = new Scalar(value: 1, unit: ScalarUnit.Amount);

            IQuantity convertedQuantity = quantity.ToUnitUntyped(UnitSystem.SI);

            Assert.Equal(ScalarUnit.Amount, convertedQuantity.Unit);
            Assert.Equal(quantity.Value, convertedQuantity.Value);
        }


        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Scalar(value: 1, unit: Scalar.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnitUntyped(nullUnitSystem));
            }, () =>
            {
                IQuantity<ScalarUnit> quantity = new Scalar(value: 1, unit: Scalar.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnitUntyped(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Scalar(value: 1, unit: Scalar.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnitUntyped(nullUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 ", ScalarUnit.Amount, 4.2)]
        public void Parse(string culture, string quantityString, ScalarUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Scalar.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 ", ScalarUnit.Amount, 4.2)]
        public void TryParse(string culture, string quantityString, ScalarUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Scalar.TryParse(quantityString, out Scalar parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("", ScalarUnit.Amount)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ScalarUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ScalarUnit parsedUnit = Scalar.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("", ScalarUnit.Amount)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ScalarUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ScalarUnit parsedUnit = Scalar.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "", ScalarUnit.Amount)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ScalarUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ScalarUnit parsedUnit = Scalar.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "", ScalarUnit.Amount)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ScalarUnit expectedUnit)
        {
            ScalarUnit parsedUnit = Scalar.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("", ScalarUnit.Amount)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ScalarUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Scalar.TryParseUnit(abbreviation, out ScalarUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("", ScalarUnit.Amount)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ScalarUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Scalar.TryParseUnit(abbreviation, out ScalarUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "", ScalarUnit.Amount)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ScalarUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Scalar.TryParseUnit(abbreviation, out ScalarUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "", ScalarUnit.Amount)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ScalarUnit expectedUnit)
        {
            Assert.True(Scalar.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ScalarUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", ScalarUnit.Amount, "")]
        public void GetAbbreviationForCulture(string culture, ScalarUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Scalar.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Scalar.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Scalar.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ScalarUnit unit)
        {
            var inBaseUnits = Scalar.From(1.0, Scalar.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ScalarUnit unit)
        {
            var quantity = Scalar.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ScalarUnit unit)
        {
            Assert.All(Scalar.Units.Where(u => u != Scalar.BaseUnit), fromUnit =>
            {
                var quantity = Scalar.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ScalarUnit unit)
        {
            var quantity = default(Scalar);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ScalarUnit unit)
        {
            var quantity = Scalar.From(3, Scalar.BaseUnit);
            Scalar expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ScalarUnit> quantityToConvert = quantity;
                IQuantity<ScalarUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Scalar amount = Scalar.FromAmount(1);
            AssertEx.EqualTolerance(1, Scalar.FromAmount(amount.Amount).Amount, AmountTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Scalar v = Scalar.FromAmount(1);
            AssertEx.EqualTolerance(-1, -v.Amount, AmountTolerance);
            AssertEx.EqualTolerance(2, (Scalar.FromAmount(3)-v).Amount, AmountTolerance);
            AssertEx.EqualTolerance(2, (v + v).Amount, AmountTolerance);
            AssertEx.EqualTolerance(10, (v*10).Amount, AmountTolerance);
            AssertEx.EqualTolerance(10, (10*v).Amount, AmountTolerance);
            AssertEx.EqualTolerance(2, (Scalar.FromAmount(10)/5).Amount, AmountTolerance);
            AssertEx.EqualTolerance(2, Scalar.FromAmount(10)/Scalar.FromAmount(5), AmountTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Scalar oneAmount = Scalar.FromAmount(1);
            Scalar twoAmount = Scalar.FromAmount(2);

            Assert.True(oneAmount < twoAmount);
            Assert.True(oneAmount <= twoAmount);
            Assert.True(twoAmount > oneAmount);
            Assert.True(twoAmount >= oneAmount);

            Assert.False(oneAmount > twoAmount);
            Assert.False(oneAmount >= twoAmount);
            Assert.False(twoAmount < oneAmount);
            Assert.False(twoAmount <= oneAmount);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Scalar amount = Scalar.FromAmount(1);
            Assert.Equal(0, amount.CompareTo(amount));
            Assert.True(amount.CompareTo(Scalar.Zero) > 0);
            Assert.True(Scalar.Zero.CompareTo(amount) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Scalar amount = Scalar.FromAmount(1);
            Assert.Throws<ArgumentException>(() => amount.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Scalar amount = Scalar.FromAmount(1);
            Assert.Throws<ArgumentNullException>(() => amount.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ScalarUnit.Amount, 1, ScalarUnit.Amount, true)]  // Same value and unit.
        [InlineData(1, ScalarUnit.Amount, 2, ScalarUnit.Amount, false)] // Different value.
        [InlineData(2, ScalarUnit.Amount, 1, ScalarUnit.Amount, false)] // Different value and unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ScalarUnit unitA, double valueB, ScalarUnit unitB, bool expectEqual)
        {
            var a = new Scalar(valueA, unitA);
            var b = new Scalar(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Scalar.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Scalar amount = Scalar.FromAmount(1);
            Assert.False(amount.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Scalar amount = Scalar.FromAmount(1);
            Assert.False(amount.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Scalar.FromAmount(firstValue);
            var otherQuantity = Scalar.FromAmount(secondValue);
            Scalar maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, Scalar.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Scalar.FromAmount(1);
            var negativeTolerance = Scalar.FromAmount(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<ScalarUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Scalar.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1", new Scalar(1, ScalarUnit.Amount).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1", new Scalar(1, ScalarUnit.Amount).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1", new Scalar(0.123456, ScalarUnit.Amount).ToString("s1"));
            Assert.Equal("0.12", new Scalar(0.123456, ScalarUnit.Amount).ToString("s2"));
            Assert.Equal("0.123", new Scalar(0.123456, ScalarUnit.Amount).ToString("s3"));
            Assert.Equal("0.1235", new Scalar(0.123456, ScalarUnit.Amount).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1", new Scalar(0.123456, ScalarUnit.Amount).ToString("s1", culture));
            Assert.Equal("0.12", new Scalar(0.123456, ScalarUnit.Amount).ToString("s2", culture));
            Assert.Equal("0.123", new Scalar(0.123456, ScalarUnit.Amount).ToString("s3", culture));
            Assert.Equal("0.1235", new Scalar(0.123456, ScalarUnit.Amount).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Scalar.FromAmount(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Scalar.FromAmount(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Scalar.FromAmount(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Scalar.FromAmount(value);
            Assert.Equal(Scalar.FromAmount(-value), -quantity);
        }
    }
}
