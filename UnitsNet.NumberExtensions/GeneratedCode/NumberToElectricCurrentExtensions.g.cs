//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricCurrent
{
    /// <summary>
    /// A number to ElectricCurrent Extensions
    /// </summary>
    public static class NumberToElectricCurrentExtensions
    {
        /// <inheritdoc cref="ElectricCurrent.FromAmperes(QuantityValue)" />
        public static ElectricCurrent Amperes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricCurrent.FromAmperes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricCurrent.FromAmperes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricCurrent.FromCentiamperes(QuantityValue)" />
        public static ElectricCurrent Centiamperes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricCurrent.FromCentiamperes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricCurrent.FromCentiamperes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricCurrent.FromFemtoamperes(QuantityValue)" />
        public static ElectricCurrent Femtoamperes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricCurrent.FromFemtoamperes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricCurrent.FromFemtoamperes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricCurrent.FromKiloamperes(QuantityValue)" />
        public static ElectricCurrent Kiloamperes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricCurrent.FromKiloamperes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricCurrent.FromKiloamperes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricCurrent.FromMegaamperes(QuantityValue)" />
        public static ElectricCurrent Megaamperes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricCurrent.FromMegaamperes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricCurrent.FromMegaamperes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricCurrent.FromMicroamperes(QuantityValue)" />
        public static ElectricCurrent Microamperes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricCurrent.FromMicroamperes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricCurrent.FromMicroamperes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricCurrent.FromMilliamperes(QuantityValue)" />
        public static ElectricCurrent Milliamperes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricCurrent.FromMilliamperes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricCurrent.FromMilliamperes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricCurrent.FromNanoamperes(QuantityValue)" />
        public static ElectricCurrent Nanoamperes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricCurrent.FromNanoamperes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricCurrent.FromNanoamperes(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="ElectricCurrent.FromPicoamperes(QuantityValue)" />
        public static ElectricCurrent Picoamperes<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricCurrent.FromPicoamperes(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => ElectricCurrent.FromPicoamperes(value.ToQuantityValue());
#endif

    }
}
