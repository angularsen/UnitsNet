//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Time is a dimension in which events can be ordered from the past through the present into the future, and also the measure of durations of events and the intervals between them.
    /// </summary>
    public struct  Duration
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly DurationUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public DurationUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Duration(double value, DurationUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Duration, which is Second. All conversions go via this value.
        /// </summary>
        public static DurationUnit BaseUnit { get; } = DurationUnit.Second;

        /// <summary>
        /// Represents the largest possible value of Duration.
        /// </summary>
        public static Duration MaxValue { get; } = new Duration(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Duration.
        /// </summary>
        public static Duration MinValue { get; } = new Duration(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Duration Zero { get; } = new Duration(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Day"/>
        /// </summary>
        public double Days => As(DurationUnit.Day);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Hour"/>
        /// </summary>
        public double Hours => As(DurationUnit.Hour);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.JulianYear"/>
        /// </summary>
        public double JulianYears => As(DurationUnit.JulianYear);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Microsecond"/>
        /// </summary>
        public double Microseconds => As(DurationUnit.Microsecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Millisecond"/>
        /// </summary>
        public double Milliseconds => As(DurationUnit.Millisecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Minute"/>
        /// </summary>
        public double Minutes => As(DurationUnit.Minute);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Month30"/>
        /// </summary>
        public double Months30 => As(DurationUnit.Month30);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Nanosecond"/>
        /// </summary>
        public double Nanoseconds => As(DurationUnit.Nanosecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Picosecond"/>
        /// </summary>
        public double Picoseconds => As(DurationUnit.Picosecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Second"/>
        /// </summary>
        public double Seconds => As(DurationUnit.Second);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Sol"/>
        /// </summary>
        public double Sols => As(DurationUnit.Sol);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Week"/>
        /// </summary>
        public double Weeks => As(DurationUnit.Week);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DurationUnit.Year365"/>
        /// </summary>
        public double Years365 => As(DurationUnit.Year365);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Day"/>.
        /// </summary>
        public static Duration FromDays(double days) => new Duration(days, DurationUnit.Day);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Hour"/>.
        /// </summary>
        public static Duration FromHours(double hours) => new Duration(hours, DurationUnit.Hour);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.JulianYear"/>.
        /// </summary>
        public static Duration FromJulianYears(double julianyears) => new Duration(julianyears, DurationUnit.JulianYear);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Microsecond"/>.
        /// </summary>
        public static Duration FromMicroseconds(double microseconds) => new Duration(microseconds, DurationUnit.Microsecond);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Millisecond"/>.
        /// </summary>
        public static Duration FromMilliseconds(double milliseconds) => new Duration(milliseconds, DurationUnit.Millisecond);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Minute"/>.
        /// </summary>
        public static Duration FromMinutes(double minutes) => new Duration(minutes, DurationUnit.Minute);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Month30"/>.
        /// </summary>
        public static Duration FromMonths30(double months30) => new Duration(months30, DurationUnit.Month30);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Nanosecond"/>.
        /// </summary>
        public static Duration FromNanoseconds(double nanoseconds) => new Duration(nanoseconds, DurationUnit.Nanosecond);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Picosecond"/>.
        /// </summary>
        public static Duration FromPicoseconds(double picoseconds) => new Duration(picoseconds, DurationUnit.Picosecond);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Second"/>.
        /// </summary>
        public static Duration FromSeconds(double seconds) => new Duration(seconds, DurationUnit.Second);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Sol"/>.
        /// </summary>
        public static Duration FromSols(double sols) => new Duration(sols, DurationUnit.Sol);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Week"/>.
        /// </summary>
        public static Duration FromWeeks(double weeks) => new Duration(weeks, DurationUnit.Week);

        /// <summary>
        ///     Creates a <see cref="Duration"/> from <see cref="DurationUnit.Year365"/>.
        /// </summary>
        public static Duration FromYears365(double years365) => new Duration(years365, DurationUnit.Year365);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DurationUnit" /> to <see cref="Duration" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Duration unit value.</returns>
        public static Duration From(double value, DurationUnit fromUnit)
        {
            return new Duration(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(DurationUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this Duration to another Duration with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A Duration with the specified unit.</returns>
                public Duration ToUnit(DurationUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new Duration(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        DurationUnit.Day => _value * 24 * 3600,
                        DurationUnit.Hour => _value * 3600,
                        DurationUnit.JulianYear => _value * 365.25 * 24 * 3600,
                        DurationUnit.Microsecond => (_value) * 1e-6d,
                        DurationUnit.Millisecond => (_value) * 1e-3d,
                        DurationUnit.Minute => _value * 60,
                        DurationUnit.Month30 => _value * 30 * 24 * 3600,
                        DurationUnit.Nanosecond => (_value) * 1e-9d,
                        DurationUnit.Picosecond => (_value) * 1e-12d,
                        DurationUnit.Second => _value,
                        DurationUnit.Sol => _value * 88775.244,
                        DurationUnit.Week => _value * 7 * 24 * 3600,
                        DurationUnit.Year365 => _value * 365 * 24 * 3600,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(DurationUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        DurationUnit.Day => baseUnitValue / (24 * 3600),
                        DurationUnit.Hour => baseUnitValue / 3600,
                        DurationUnit.JulianYear => baseUnitValue / (365.25 * 24 * 3600),
                        DurationUnit.Microsecond => (baseUnitValue) / 1e-6d,
                        DurationUnit.Millisecond => (baseUnitValue) / 1e-3d,
                        DurationUnit.Minute => baseUnitValue / 60,
                        DurationUnit.Month30 => baseUnitValue / (30 * 24 * 3600),
                        DurationUnit.Nanosecond => (baseUnitValue) / 1e-9d,
                        DurationUnit.Picosecond => (baseUnitValue) / 1e-12d,
                        DurationUnit.Second => baseUnitValue,
                        DurationUnit.Sol => baseUnitValue / 88775.244,
                        DurationUnit.Week => baseUnitValue / (7 * 24 * 3600),
                        DurationUnit.Year365 => baseUnitValue / (365 * 24 * 3600),
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

