//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToLuminosity
{
    /// <summary>
    /// A number to Luminosity Extensions
    /// </summary>
    public static class NumberToLuminosityExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Luminosity.FromDecawatts(QuantityValue)" />
            public Luminosity Decawatts
#if NET7_0_OR_GREATER
                => Luminosity.FromDecawatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromDecawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromDeciwatts(QuantityValue)" />
            public Luminosity Deciwatts
#if NET7_0_OR_GREATER
                => Luminosity.FromDeciwatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromDeciwatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromFemtowatts(QuantityValue)" />
            public Luminosity Femtowatts
#if NET7_0_OR_GREATER
                => Luminosity.FromFemtowatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromFemtowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromGigawatts(QuantityValue)" />
            public Luminosity Gigawatts
#if NET7_0_OR_GREATER
                => Luminosity.FromGigawatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromGigawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromKilowatts(QuantityValue)" />
            public Luminosity Kilowatts
#if NET7_0_OR_GREATER
                => Luminosity.FromKilowatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromKilowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromMegawatts(QuantityValue)" />
            public Luminosity Megawatts
#if NET7_0_OR_GREATER
                => Luminosity.FromMegawatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromMegawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromMicrowatts(QuantityValue)" />
            public Luminosity Microwatts
#if NET7_0_OR_GREATER
                => Luminosity.FromMicrowatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromMicrowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromMilliwatts(QuantityValue)" />
            public Luminosity Milliwatts
#if NET7_0_OR_GREATER
                => Luminosity.FromMilliwatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromMilliwatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromNanowatts(QuantityValue)" />
            public Luminosity Nanowatts
#if NET7_0_OR_GREATER
                => Luminosity.FromNanowatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromNanowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromPetawatts(QuantityValue)" />
            public Luminosity Petawatts
#if NET7_0_OR_GREATER
                => Luminosity.FromPetawatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromPetawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromPicowatts(QuantityValue)" />
            public Luminosity Picowatts
#if NET7_0_OR_GREATER
                => Luminosity.FromPicowatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromPicowatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromSolarLuminosities(QuantityValue)" />
            public Luminosity SolarLuminosities
#if NET7_0_OR_GREATER
                => Luminosity.FromSolarLuminosities(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromSolarLuminosities(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromTerawatts(QuantityValue)" />
            public Luminosity Terawatts
#if NET7_0_OR_GREATER
                => Luminosity.FromTerawatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromTerawatts(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Luminosity.FromWatts(QuantityValue)" />
            public Luminosity Watts
#if NET7_0_OR_GREATER
                => Luminosity.FromWatts(QuantityValue.CreateChecked(value));
#else
                => Luminosity.FromWatts(value.ToQuantityValue());
#endif

        }
    }
}
