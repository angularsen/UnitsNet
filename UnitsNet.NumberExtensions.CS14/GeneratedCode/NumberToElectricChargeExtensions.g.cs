//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricCharge
{
    /// <summary>
    /// A number to ElectricCharge Extensions
    /// </summary>
    public static class NumberToElectricChargeExtensions
    {
        extension<T>(T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="ElectricCharge.FromAmpereHours(double)" />
            public ElectricCharge AmpereHours
#if NET7_0_OR_GREATER
                => ElectricCharge.FromAmpereHours(double.CreateChecked(value));
#else
                => ElectricCharge.FromAmpereHours(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromCoulombs(double)" />
            public ElectricCharge Coulombs
#if NET7_0_OR_GREATER
                => ElectricCharge.FromCoulombs(double.CreateChecked(value));
#else
                => ElectricCharge.FromCoulombs(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromKiloampereHours(double)" />
            public ElectricCharge KiloampereHours
#if NET7_0_OR_GREATER
                => ElectricCharge.FromKiloampereHours(double.CreateChecked(value));
#else
                => ElectricCharge.FromKiloampereHours(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromKilocoulombs(double)" />
            public ElectricCharge Kilocoulombs
#if NET7_0_OR_GREATER
                => ElectricCharge.FromKilocoulombs(double.CreateChecked(value));
#else
                => ElectricCharge.FromKilocoulombs(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromMegaampereHours(double)" />
            public ElectricCharge MegaampereHours
#if NET7_0_OR_GREATER
                => ElectricCharge.FromMegaampereHours(double.CreateChecked(value));
#else
                => ElectricCharge.FromMegaampereHours(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromMegacoulombs(double)" />
            public ElectricCharge Megacoulombs
#if NET7_0_OR_GREATER
                => ElectricCharge.FromMegacoulombs(double.CreateChecked(value));
#else
                => ElectricCharge.FromMegacoulombs(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromMicrocoulombs(double)" />
            public ElectricCharge Microcoulombs
#if NET7_0_OR_GREATER
                => ElectricCharge.FromMicrocoulombs(double.CreateChecked(value));
#else
                => ElectricCharge.FromMicrocoulombs(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromMilliampereHours(double)" />
            public ElectricCharge MilliampereHours
#if NET7_0_OR_GREATER
                => ElectricCharge.FromMilliampereHours(double.CreateChecked(value));
#else
                => ElectricCharge.FromMilliampereHours(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromMillicoulombs(double)" />
            public ElectricCharge Millicoulombs
#if NET7_0_OR_GREATER
                => ElectricCharge.FromMillicoulombs(double.CreateChecked(value));
#else
                => ElectricCharge.FromMillicoulombs(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromNanocoulombs(double)" />
            public ElectricCharge Nanocoulombs
#if NET7_0_OR_GREATER
                => ElectricCharge.FromNanocoulombs(double.CreateChecked(value));
#else
                => ElectricCharge.FromNanocoulombs(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricCharge.FromPicocoulombs(double)" />
            public ElectricCharge Picocoulombs
#if NET7_0_OR_GREATER
                => ElectricCharge.FromPicocoulombs(double.CreateChecked(value));
#else
                => ElectricCharge.FromPicocoulombs(value.ToDouble(null));
#endif

        }
    }
}
