//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

namespace UnitsNet.Tests.CustomCode
{
    public class FluidResistanceTests : FluidResistanceTestsBase
    {
        // https://www.vcalc.com/wiki/Fluid-Resistance-Unit-Conversion

        protected override bool SupportsSIUnitSystem => true;
        protected override double DyneSecondsPerCentimeterToTheFifthInOnePascalSecondPerCubicMeter => 1e-5; // dyn·s/cm⁵
        protected override double MegapascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter => 1e-6; // MPa·s/m³
        protected override double MillimeterMercuryMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter => 1.25010625903202e-10; // mmHg·min/cm³
        protected override double MillimeterMercuryMinutesPerCubicMeterInOnePascalSecondPerCubicMeter => 1.25010625903202e-4; // mmHg·min/m³
        protected override double MillimeterMercuryMinutesPerLiterInOnePascalSecondPerCubicMeter => 1.25010625903202e-7; // mmHg·min/l
        protected override double MillimeterMercuryMinutesPerMilliliterInOnePascalSecondPerCubicMeter => 1.25010625903202e-10; // mmHg·min/ml
        protected override double MillimeterMercurySecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter => 7.5006375541921e-9; // mmHg·s/cm³
        protected override double MillimeterMercurySecondsPerCubicMeterInOnePascalSecondPerCubicMeter => 7.50063755419211e-3; // mmHg·s/m³
        protected override double MillimeterMercurySecondsPerLiterInOnePascalSecondPerCubicMeter => 7.50063755419211e-6; // mmHg·s/l
        protected override double MillimeterMercurySecondsPerMilliliterInOnePascalSecondPerCubicMeter => 7.5006375541921e-9; // mmHg·s/ml
        protected override double PascalMinutesPerCubicCentimeterInOnePascalSecondPerCubicMeter => 1.66666666666667e-8; // Pa·min/cm³
        protected override double PascalMinutesPerCubicMeterInOnePascalSecondPerCubicMeter => 1.66666666666667e-2; // Pa·min/m³
        protected override double PascalMinutesPerLiterInOnePascalSecondPerCubicMeter => 1.66666666666667e-5; // Pa·min/l
        protected override double PascalMinutesPerMilliliterInOnePascalSecondPerCubicMeter => 1.66666666666667e-8; // Pa·min/ml
        protected override double PascalSecondsPerCubicCentimeterInOnePascalSecondPerCubicMeter => 1e-6; // Pa·s/cm³
        protected override double PascalSecondsPerCubicMeterInOnePascalSecondPerCubicMeter => 1; // Pa·s/m³
        protected override double PascalSecondsPerLiterInOnePascalSecondPerCubicMeter => 1e-3; // Pa·s/l
        protected override double PascalSecondsPerMilliliterInOnePascalSecondPerCubicMeter => 1e-6; // Pa·s/ml
        protected override double WoodUnitsInOnePascalSecondPerCubicMeter => 1.25010625903202e-7; // WU
    }
}
