//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of BitRate.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class BitRateTestsBase : QuantityTestsBase
    {
        protected abstract double BitsPerSecondInOneBitPerSecond { get; }
        protected abstract double BytesPerSecondInOneBitPerSecond { get; }
        protected abstract double ExabitsPerSecondInOneBitPerSecond { get; }
        protected abstract double ExabytesPerSecondInOneBitPerSecond { get; }
        protected abstract double ExaoctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double ExbibitsPerSecondInOneBitPerSecond { get; }
        protected abstract double ExbibytesPerSecondInOneBitPerSecond { get; }
        protected abstract double ExbioctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double GibibitsPerSecondInOneBitPerSecond { get; }
        protected abstract double GibibytesPerSecondInOneBitPerSecond { get; }
        protected abstract double GibioctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double GigabitsPerSecondInOneBitPerSecond { get; }
        protected abstract double GigabytesPerSecondInOneBitPerSecond { get; }
        protected abstract double GigaoctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double KibibitsPerSecondInOneBitPerSecond { get; }
        protected abstract double KibibytesPerSecondInOneBitPerSecond { get; }
        protected abstract double KibioctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double KilobitsPerSecondInOneBitPerSecond { get; }
        protected abstract double KilobytesPerSecondInOneBitPerSecond { get; }
        protected abstract double KilooctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double MebibitsPerSecondInOneBitPerSecond { get; }
        protected abstract double MebibytesPerSecondInOneBitPerSecond { get; }
        protected abstract double MebioctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double MegabitsPerSecondInOneBitPerSecond { get; }
        protected abstract double MegabytesPerSecondInOneBitPerSecond { get; }
        protected abstract double MegaoctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double OctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double PebibitsPerSecondInOneBitPerSecond { get; }
        protected abstract double PebibytesPerSecondInOneBitPerSecond { get; }
        protected abstract double PebioctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double PetabitsPerSecondInOneBitPerSecond { get; }
        protected abstract double PetabytesPerSecondInOneBitPerSecond { get; }
        protected abstract double PetaoctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double TebibitsPerSecondInOneBitPerSecond { get; }
        protected abstract double TebibytesPerSecondInOneBitPerSecond { get; }
        protected abstract double TebioctetsPerSecondInOneBitPerSecond { get; }
        protected abstract double TerabitsPerSecondInOneBitPerSecond { get; }
        protected abstract double TerabytesPerSecondInOneBitPerSecond { get; }
        protected abstract double TeraoctetsPerSecondInOneBitPerSecond { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double BytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExabitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExabytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExaoctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExbibitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExbibytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double ExbioctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GibibitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GibibytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GibioctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GigabitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GigabytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double GigaoctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KibibitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KibibytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KibioctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilobitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilobytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double KilooctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MebibitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MebibytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MebioctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegabitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegabytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double MegaoctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double OctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PebibitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PebibytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PebioctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PetabitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PetabytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double PetaoctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TebibitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TebibytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TebioctetsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TerabitsPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TerabytesPerSecondTolerance { get { return 1e-5; } }
        protected virtual double TeraoctetsPerSecondTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(BitRateUnit unit)
        {
            return unit switch
            {
                BitRateUnit.BitPerSecond => (BitsPerSecondInOneBitPerSecond, BitsPerSecondTolerance),
                BitRateUnit.BytePerSecond => (BytesPerSecondInOneBitPerSecond, BytesPerSecondTolerance),
                BitRateUnit.ExabitPerSecond => (ExabitsPerSecondInOneBitPerSecond, ExabitsPerSecondTolerance),
                BitRateUnit.ExabytePerSecond => (ExabytesPerSecondInOneBitPerSecond, ExabytesPerSecondTolerance),
                BitRateUnit.ExaoctetPerSecond => (ExaoctetsPerSecondInOneBitPerSecond, ExaoctetsPerSecondTolerance),
                BitRateUnit.ExbibitPerSecond => (ExbibitsPerSecondInOneBitPerSecond, ExbibitsPerSecondTolerance),
                BitRateUnit.ExbibytePerSecond => (ExbibytesPerSecondInOneBitPerSecond, ExbibytesPerSecondTolerance),
                BitRateUnit.ExbioctetPerSecond => (ExbioctetsPerSecondInOneBitPerSecond, ExbioctetsPerSecondTolerance),
                BitRateUnit.GibibitPerSecond => (GibibitsPerSecondInOneBitPerSecond, GibibitsPerSecondTolerance),
                BitRateUnit.GibibytePerSecond => (GibibytesPerSecondInOneBitPerSecond, GibibytesPerSecondTolerance),
                BitRateUnit.GibioctetPerSecond => (GibioctetsPerSecondInOneBitPerSecond, GibioctetsPerSecondTolerance),
                BitRateUnit.GigabitPerSecond => (GigabitsPerSecondInOneBitPerSecond, GigabitsPerSecondTolerance),
                BitRateUnit.GigabytePerSecond => (GigabytesPerSecondInOneBitPerSecond, GigabytesPerSecondTolerance),
                BitRateUnit.GigaoctetPerSecond => (GigaoctetsPerSecondInOneBitPerSecond, GigaoctetsPerSecondTolerance),
                BitRateUnit.KibibitPerSecond => (KibibitsPerSecondInOneBitPerSecond, KibibitsPerSecondTolerance),
                BitRateUnit.KibibytePerSecond => (KibibytesPerSecondInOneBitPerSecond, KibibytesPerSecondTolerance),
                BitRateUnit.KibioctetPerSecond => (KibioctetsPerSecondInOneBitPerSecond, KibioctetsPerSecondTolerance),
                BitRateUnit.KilobitPerSecond => (KilobitsPerSecondInOneBitPerSecond, KilobitsPerSecondTolerance),
                BitRateUnit.KilobytePerSecond => (KilobytesPerSecondInOneBitPerSecond, KilobytesPerSecondTolerance),
                BitRateUnit.KilooctetPerSecond => (KilooctetsPerSecondInOneBitPerSecond, KilooctetsPerSecondTolerance),
                BitRateUnit.MebibitPerSecond => (MebibitsPerSecondInOneBitPerSecond, MebibitsPerSecondTolerance),
                BitRateUnit.MebibytePerSecond => (MebibytesPerSecondInOneBitPerSecond, MebibytesPerSecondTolerance),
                BitRateUnit.MebioctetPerSecond => (MebioctetsPerSecondInOneBitPerSecond, MebioctetsPerSecondTolerance),
                BitRateUnit.MegabitPerSecond => (MegabitsPerSecondInOneBitPerSecond, MegabitsPerSecondTolerance),
                BitRateUnit.MegabytePerSecond => (MegabytesPerSecondInOneBitPerSecond, MegabytesPerSecondTolerance),
                BitRateUnit.MegaoctetPerSecond => (MegaoctetsPerSecondInOneBitPerSecond, MegaoctetsPerSecondTolerance),
                BitRateUnit.OctetPerSecond => (OctetsPerSecondInOneBitPerSecond, OctetsPerSecondTolerance),
                BitRateUnit.PebibitPerSecond => (PebibitsPerSecondInOneBitPerSecond, PebibitsPerSecondTolerance),
                BitRateUnit.PebibytePerSecond => (PebibytesPerSecondInOneBitPerSecond, PebibytesPerSecondTolerance),
                BitRateUnit.PebioctetPerSecond => (PebioctetsPerSecondInOneBitPerSecond, PebioctetsPerSecondTolerance),
                BitRateUnit.PetabitPerSecond => (PetabitsPerSecondInOneBitPerSecond, PetabitsPerSecondTolerance),
                BitRateUnit.PetabytePerSecond => (PetabytesPerSecondInOneBitPerSecond, PetabytesPerSecondTolerance),
                BitRateUnit.PetaoctetPerSecond => (PetaoctetsPerSecondInOneBitPerSecond, PetaoctetsPerSecondTolerance),
                BitRateUnit.TebibitPerSecond => (TebibitsPerSecondInOneBitPerSecond, TebibitsPerSecondTolerance),
                BitRateUnit.TebibytePerSecond => (TebibytesPerSecondInOneBitPerSecond, TebibytesPerSecondTolerance),
                BitRateUnit.TebioctetPerSecond => (TebioctetsPerSecondInOneBitPerSecond, TebioctetsPerSecondTolerance),
                BitRateUnit.TerabitPerSecond => (TerabitsPerSecondInOneBitPerSecond, TerabitsPerSecondTolerance),
                BitRateUnit.TerabytePerSecond => (TerabytesPerSecondInOneBitPerSecond, TerabytesPerSecondTolerance),
                BitRateUnit.TeraoctetPerSecond => (TeraoctetsPerSecondInOneBitPerSecond, TeraoctetsPerSecondTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { BitRateUnit.BitPerSecond },
            new object[] { BitRateUnit.BytePerSecond },
            new object[] { BitRateUnit.ExabitPerSecond },
            new object[] { BitRateUnit.ExabytePerSecond },
            new object[] { BitRateUnit.ExaoctetPerSecond },
            new object[] { BitRateUnit.ExbibitPerSecond },
            new object[] { BitRateUnit.ExbibytePerSecond },
            new object[] { BitRateUnit.ExbioctetPerSecond },
            new object[] { BitRateUnit.GibibitPerSecond },
            new object[] { BitRateUnit.GibibytePerSecond },
            new object[] { BitRateUnit.GibioctetPerSecond },
            new object[] { BitRateUnit.GigabitPerSecond },
            new object[] { BitRateUnit.GigabytePerSecond },
            new object[] { BitRateUnit.GigaoctetPerSecond },
            new object[] { BitRateUnit.KibibitPerSecond },
            new object[] { BitRateUnit.KibibytePerSecond },
            new object[] { BitRateUnit.KibioctetPerSecond },
            new object[] { BitRateUnit.KilobitPerSecond },
            new object[] { BitRateUnit.KilobytePerSecond },
            new object[] { BitRateUnit.KilooctetPerSecond },
            new object[] { BitRateUnit.MebibitPerSecond },
            new object[] { BitRateUnit.MebibytePerSecond },
            new object[] { BitRateUnit.MebioctetPerSecond },
            new object[] { BitRateUnit.MegabitPerSecond },
            new object[] { BitRateUnit.MegabytePerSecond },
            new object[] { BitRateUnit.MegaoctetPerSecond },
            new object[] { BitRateUnit.OctetPerSecond },
            new object[] { BitRateUnit.PebibitPerSecond },
            new object[] { BitRateUnit.PebibytePerSecond },
            new object[] { BitRateUnit.PebioctetPerSecond },
            new object[] { BitRateUnit.PetabitPerSecond },
            new object[] { BitRateUnit.PetabytePerSecond },
            new object[] { BitRateUnit.PetaoctetPerSecond },
            new object[] { BitRateUnit.TebibitPerSecond },
            new object[] { BitRateUnit.TebibytePerSecond },
            new object[] { BitRateUnit.TebioctetPerSecond },
            new object[] { BitRateUnit.TerabitPerSecond },
            new object[] { BitRateUnit.TerabytePerSecond },
            new object[] { BitRateUnit.TeraoctetPerSecond },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new BitRate();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(BitRateUnit.BitPerSecond, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new BitRate(double.PositiveInfinity, BitRateUnit.BitPerSecond));
            var exception2 = Record.Exception(() => new BitRate(double.NegativeInfinity, BitRateUnit.BitPerSecond));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new BitRate(double.NaN, BitRateUnit.BitPerSecond));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new BitRate(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new BitRate(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new BitRate(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void BitRate_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            BitRateUnit[] unitsOrderedByName = EnumHelper.GetValues<BitRateUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new BitRate(1, BitRateUnit.BitPerSecond);

            QuantityInfo<BitRate, BitRateUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("BitRate", quantityInfo.Name);
            Assert.Equal(BitRate.Zero, quantityInfo.Zero);
            Assert.Equal(BitRate.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(BitRate.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<BitRateUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void BitRateInfo_CreateWithCustomUnitInfos()
        {
            BitRateUnit[] expectedUnits = [BitRateUnit.BitPerSecond];

            BitRate.BitRateInfo quantityInfo = BitRate.BitRateInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("BitRate", quantityInfo.Name);
            Assert.Equal(BitRate.Zero, quantityInfo.Zero);
            Assert.Equal(BitRate.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void BitPerSecondToBitRateUnits()
        {
            BitRate bitpersecond = BitRate.FromBitsPerSecond(1);
            AssertEx.EqualTolerance(BitsPerSecondInOneBitPerSecond, bitpersecond.BitsPerSecond, BitsPerSecondTolerance);
            AssertEx.EqualTolerance(BytesPerSecondInOneBitPerSecond, bitpersecond.BytesPerSecond, BytesPerSecondTolerance);
            AssertEx.EqualTolerance(ExabitsPerSecondInOneBitPerSecond, bitpersecond.ExabitsPerSecond, ExabitsPerSecondTolerance);
            AssertEx.EqualTolerance(ExabytesPerSecondInOneBitPerSecond, bitpersecond.ExabytesPerSecond, ExabytesPerSecondTolerance);
            AssertEx.EqualTolerance(ExaoctetsPerSecondInOneBitPerSecond, bitpersecond.ExaoctetsPerSecond, ExaoctetsPerSecondTolerance);
            AssertEx.EqualTolerance(ExbibitsPerSecondInOneBitPerSecond, bitpersecond.ExbibitsPerSecond, ExbibitsPerSecondTolerance);
            AssertEx.EqualTolerance(ExbibytesPerSecondInOneBitPerSecond, bitpersecond.ExbibytesPerSecond, ExbibytesPerSecondTolerance);
            AssertEx.EqualTolerance(ExbioctetsPerSecondInOneBitPerSecond, bitpersecond.ExbioctetsPerSecond, ExbioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(GibibitsPerSecondInOneBitPerSecond, bitpersecond.GibibitsPerSecond, GibibitsPerSecondTolerance);
            AssertEx.EqualTolerance(GibibytesPerSecondInOneBitPerSecond, bitpersecond.GibibytesPerSecond, GibibytesPerSecondTolerance);
            AssertEx.EqualTolerance(GibioctetsPerSecondInOneBitPerSecond, bitpersecond.GibioctetsPerSecond, GibioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(GigabitsPerSecondInOneBitPerSecond, bitpersecond.GigabitsPerSecond, GigabitsPerSecondTolerance);
            AssertEx.EqualTolerance(GigabytesPerSecondInOneBitPerSecond, bitpersecond.GigabytesPerSecond, GigabytesPerSecondTolerance);
            AssertEx.EqualTolerance(GigaoctetsPerSecondInOneBitPerSecond, bitpersecond.GigaoctetsPerSecond, GigaoctetsPerSecondTolerance);
            AssertEx.EqualTolerance(KibibitsPerSecondInOneBitPerSecond, bitpersecond.KibibitsPerSecond, KibibitsPerSecondTolerance);
            AssertEx.EqualTolerance(KibibytesPerSecondInOneBitPerSecond, bitpersecond.KibibytesPerSecond, KibibytesPerSecondTolerance);
            AssertEx.EqualTolerance(KibioctetsPerSecondInOneBitPerSecond, bitpersecond.KibioctetsPerSecond, KibioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(KilobitsPerSecondInOneBitPerSecond, bitpersecond.KilobitsPerSecond, KilobitsPerSecondTolerance);
            AssertEx.EqualTolerance(KilobytesPerSecondInOneBitPerSecond, bitpersecond.KilobytesPerSecond, KilobytesPerSecondTolerance);
            AssertEx.EqualTolerance(KilooctetsPerSecondInOneBitPerSecond, bitpersecond.KilooctetsPerSecond, KilooctetsPerSecondTolerance);
            AssertEx.EqualTolerance(MebibitsPerSecondInOneBitPerSecond, bitpersecond.MebibitsPerSecond, MebibitsPerSecondTolerance);
            AssertEx.EqualTolerance(MebibytesPerSecondInOneBitPerSecond, bitpersecond.MebibytesPerSecond, MebibytesPerSecondTolerance);
            AssertEx.EqualTolerance(MebioctetsPerSecondInOneBitPerSecond, bitpersecond.MebioctetsPerSecond, MebioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(MegabitsPerSecondInOneBitPerSecond, bitpersecond.MegabitsPerSecond, MegabitsPerSecondTolerance);
            AssertEx.EqualTolerance(MegabytesPerSecondInOneBitPerSecond, bitpersecond.MegabytesPerSecond, MegabytesPerSecondTolerance);
            AssertEx.EqualTolerance(MegaoctetsPerSecondInOneBitPerSecond, bitpersecond.MegaoctetsPerSecond, MegaoctetsPerSecondTolerance);
            AssertEx.EqualTolerance(OctetsPerSecondInOneBitPerSecond, bitpersecond.OctetsPerSecond, OctetsPerSecondTolerance);
            AssertEx.EqualTolerance(PebibitsPerSecondInOneBitPerSecond, bitpersecond.PebibitsPerSecond, PebibitsPerSecondTolerance);
            AssertEx.EqualTolerance(PebibytesPerSecondInOneBitPerSecond, bitpersecond.PebibytesPerSecond, PebibytesPerSecondTolerance);
            AssertEx.EqualTolerance(PebioctetsPerSecondInOneBitPerSecond, bitpersecond.PebioctetsPerSecond, PebioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(PetabitsPerSecondInOneBitPerSecond, bitpersecond.PetabitsPerSecond, PetabitsPerSecondTolerance);
            AssertEx.EqualTolerance(PetabytesPerSecondInOneBitPerSecond, bitpersecond.PetabytesPerSecond, PetabytesPerSecondTolerance);
            AssertEx.EqualTolerance(PetaoctetsPerSecondInOneBitPerSecond, bitpersecond.PetaoctetsPerSecond, PetaoctetsPerSecondTolerance);
            AssertEx.EqualTolerance(TebibitsPerSecondInOneBitPerSecond, bitpersecond.TebibitsPerSecond, TebibitsPerSecondTolerance);
            AssertEx.EqualTolerance(TebibytesPerSecondInOneBitPerSecond, bitpersecond.TebibytesPerSecond, TebibytesPerSecondTolerance);
            AssertEx.EqualTolerance(TebioctetsPerSecondInOneBitPerSecond, bitpersecond.TebioctetsPerSecond, TebioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(TerabitsPerSecondInOneBitPerSecond, bitpersecond.TerabitsPerSecond, TerabitsPerSecondTolerance);
            AssertEx.EqualTolerance(TerabytesPerSecondInOneBitPerSecond, bitpersecond.TerabytesPerSecond, TerabytesPerSecondTolerance);
            AssertEx.EqualTolerance(TeraoctetsPerSecondInOneBitPerSecond, bitpersecond.TeraoctetsPerSecond, TeraoctetsPerSecondTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<BitRateUnit>(), unit =>
            {
                var quantity = BitRate.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromBitsPerSecond_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => BitRate.FromBitsPerSecond(double.PositiveInfinity));
            var exception2 = Record.Exception(() => BitRate.FromBitsPerSecond(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromBitsPerSecond_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => BitRate.FromBitsPerSecond(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var bitpersecond = BitRate.FromBitsPerSecond(1);
            AssertEx.EqualTolerance(BitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.BitPerSecond), BitsPerSecondTolerance);
            AssertEx.EqualTolerance(BytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.BytePerSecond), BytesPerSecondTolerance);
            AssertEx.EqualTolerance(ExabitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.ExabitPerSecond), ExabitsPerSecondTolerance);
            AssertEx.EqualTolerance(ExabytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.ExabytePerSecond), ExabytesPerSecondTolerance);
            AssertEx.EqualTolerance(ExaoctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.ExaoctetPerSecond), ExaoctetsPerSecondTolerance);
            AssertEx.EqualTolerance(ExbibitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.ExbibitPerSecond), ExbibitsPerSecondTolerance);
            AssertEx.EqualTolerance(ExbibytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.ExbibytePerSecond), ExbibytesPerSecondTolerance);
            AssertEx.EqualTolerance(ExbioctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.ExbioctetPerSecond), ExbioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(GibibitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.GibibitPerSecond), GibibitsPerSecondTolerance);
            AssertEx.EqualTolerance(GibibytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.GibibytePerSecond), GibibytesPerSecondTolerance);
            AssertEx.EqualTolerance(GibioctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.GibioctetPerSecond), GibioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(GigabitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.GigabitPerSecond), GigabitsPerSecondTolerance);
            AssertEx.EqualTolerance(GigabytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.GigabytePerSecond), GigabytesPerSecondTolerance);
            AssertEx.EqualTolerance(GigaoctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.GigaoctetPerSecond), GigaoctetsPerSecondTolerance);
            AssertEx.EqualTolerance(KibibitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.KibibitPerSecond), KibibitsPerSecondTolerance);
            AssertEx.EqualTolerance(KibibytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.KibibytePerSecond), KibibytesPerSecondTolerance);
            AssertEx.EqualTolerance(KibioctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.KibioctetPerSecond), KibioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(KilobitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.KilobitPerSecond), KilobitsPerSecondTolerance);
            AssertEx.EqualTolerance(KilobytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.KilobytePerSecond), KilobytesPerSecondTolerance);
            AssertEx.EqualTolerance(KilooctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.KilooctetPerSecond), KilooctetsPerSecondTolerance);
            AssertEx.EqualTolerance(MebibitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.MebibitPerSecond), MebibitsPerSecondTolerance);
            AssertEx.EqualTolerance(MebibytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.MebibytePerSecond), MebibytesPerSecondTolerance);
            AssertEx.EqualTolerance(MebioctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.MebioctetPerSecond), MebioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(MegabitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.MegabitPerSecond), MegabitsPerSecondTolerance);
            AssertEx.EqualTolerance(MegabytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.MegabytePerSecond), MegabytesPerSecondTolerance);
            AssertEx.EqualTolerance(MegaoctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.MegaoctetPerSecond), MegaoctetsPerSecondTolerance);
            AssertEx.EqualTolerance(OctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.OctetPerSecond), OctetsPerSecondTolerance);
            AssertEx.EqualTolerance(PebibitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.PebibitPerSecond), PebibitsPerSecondTolerance);
            AssertEx.EqualTolerance(PebibytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.PebibytePerSecond), PebibytesPerSecondTolerance);
            AssertEx.EqualTolerance(PebioctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.PebioctetPerSecond), PebioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(PetabitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.PetabitPerSecond), PetabitsPerSecondTolerance);
            AssertEx.EqualTolerance(PetabytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.PetabytePerSecond), PetabytesPerSecondTolerance);
            AssertEx.EqualTolerance(PetaoctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.PetaoctetPerSecond), PetaoctetsPerSecondTolerance);
            AssertEx.EqualTolerance(TebibitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.TebibitPerSecond), TebibitsPerSecondTolerance);
            AssertEx.EqualTolerance(TebibytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.TebibytePerSecond), TebibytesPerSecondTolerance);
            AssertEx.EqualTolerance(TebioctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.TebioctetPerSecond), TebioctetsPerSecondTolerance);
            AssertEx.EqualTolerance(TerabitsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.TerabitPerSecond), TerabitsPerSecondTolerance);
            AssertEx.EqualTolerance(TerabytesPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.TerabytePerSecond), TerabytesPerSecondTolerance);
            AssertEx.EqualTolerance(TeraoctetsPerSecondInOneBitPerSecond, bitpersecond.As(BitRateUnit.TeraoctetPerSecond), TeraoctetsPerSecondTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = BitRate.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
            var expectedValue = quantity.As(BitRate.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
            var expectedUnit = BitRate.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                BitRate quantityToConvert = quantity;

                BitRate convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<BitRateUnit> quantityToConvert = quantity;

                IQuantity<BitRateUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<BitRateUnit> quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<BitRateUnit> quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new BitRate(value: 1, unit: BitRate.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 bit/s", BitRateUnit.BitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 bps", BitRateUnit.BitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 B/s", BitRateUnit.BytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Ebit/s", BitRateUnit.ExabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Ebps", BitRateUnit.ExabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 EB/s", BitRateUnit.ExabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Eo/s", BitRateUnit.ExaoctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Eibit/s", BitRateUnit.ExbibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Eibps", BitRateUnit.ExbibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 EiB/s", BitRateUnit.ExbibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Eio/s", BitRateUnit.ExbioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gibit/s", BitRateUnit.GibibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gibps", BitRateUnit.GibibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 GiB/s", BitRateUnit.GibibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gio/s", BitRateUnit.GibioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gbit/s", BitRateUnit.GigabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gbps", BitRateUnit.GigabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 GB/s", BitRateUnit.GigabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Go/s", BitRateUnit.GigaoctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Kibit/s", BitRateUnit.KibibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Kibps", BitRateUnit.KibibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 KiB/s", BitRateUnit.KibibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Kio/s", BitRateUnit.KibioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kbit/s", BitRateUnit.KilobitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kbps", BitRateUnit.KilobitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kB/s", BitRateUnit.KilobytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 ko/s", BitRateUnit.KilooctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mibit/s", BitRateUnit.MebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mibps", BitRateUnit.MebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 MiB/s", BitRateUnit.MebibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mio/s", BitRateUnit.MebioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mbit/s", BitRateUnit.MegabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mbps", BitRateUnit.MegabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 MB/s", BitRateUnit.MegabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mo/s", BitRateUnit.MegaoctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 o/s", BitRateUnit.OctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pibit/s", BitRateUnit.PebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pibps", BitRateUnit.PebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 PiB/s", BitRateUnit.PebibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pio/s", BitRateUnit.PebioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pbit/s", BitRateUnit.PetabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pbps", BitRateUnit.PetabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 PB/s", BitRateUnit.PetabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Po/s", BitRateUnit.PetaoctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tibit/s", BitRateUnit.TebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tibps", BitRateUnit.TebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 TiB/s", BitRateUnit.TebibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tio/s", BitRateUnit.TebioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tbit/s", BitRateUnit.TerabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tbps", BitRateUnit.TerabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 TB/s", BitRateUnit.TerabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 To/s", BitRateUnit.TeraoctetPerSecond, 4.2)]
        public void Parse(string culture, string quantityString, BitRateUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = BitRate.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 bit/s", BitRateUnit.BitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 bps", BitRateUnit.BitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 B/s", BitRateUnit.BytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Ebit/s", BitRateUnit.ExabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Ebps", BitRateUnit.ExabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 EB/s", BitRateUnit.ExabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Eo/s", BitRateUnit.ExaoctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Eibit/s", BitRateUnit.ExbibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Eibps", BitRateUnit.ExbibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 EiB/s", BitRateUnit.ExbibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Eio/s", BitRateUnit.ExbioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gibit/s", BitRateUnit.GibibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gibps", BitRateUnit.GibibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 GiB/s", BitRateUnit.GibibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gio/s", BitRateUnit.GibioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gbit/s", BitRateUnit.GigabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Gbps", BitRateUnit.GigabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 GB/s", BitRateUnit.GigabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Go/s", BitRateUnit.GigaoctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Kibit/s", BitRateUnit.KibibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Kibps", BitRateUnit.KibibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 KiB/s", BitRateUnit.KibibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Kio/s", BitRateUnit.KibioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kbit/s", BitRateUnit.KilobitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kbps", BitRateUnit.KilobitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 kB/s", BitRateUnit.KilobytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 ko/s", BitRateUnit.KilooctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mibit/s", BitRateUnit.MebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mibps", BitRateUnit.MebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 MiB/s", BitRateUnit.MebibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mio/s", BitRateUnit.MebioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mbit/s", BitRateUnit.MegabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mbps", BitRateUnit.MegabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 MB/s", BitRateUnit.MegabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Mo/s", BitRateUnit.MegaoctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 o/s", BitRateUnit.OctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pibit/s", BitRateUnit.PebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pibps", BitRateUnit.PebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 PiB/s", BitRateUnit.PebibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pio/s", BitRateUnit.PebioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pbit/s", BitRateUnit.PetabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Pbps", BitRateUnit.PetabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 PB/s", BitRateUnit.PetabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Po/s", BitRateUnit.PetaoctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tibit/s", BitRateUnit.TebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tibps", BitRateUnit.TebibitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 TiB/s", BitRateUnit.TebibytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tio/s", BitRateUnit.TebioctetPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tbit/s", BitRateUnit.TerabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 Tbps", BitRateUnit.TerabitPerSecond, 4.2)]
        [InlineData("en-US", "4.2 TB/s", BitRateUnit.TerabytePerSecond, 4.2)]
        [InlineData("en-US", "4.2 To/s", BitRateUnit.TeraoctetPerSecond, 4.2)]
        public void TryParse(string culture, string quantityString, BitRateUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(BitRate.TryParse(quantityString, out BitRate parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("bit/s", BitRateUnit.BitPerSecond)]
        [InlineData("bps", BitRateUnit.BitPerSecond)]
        [InlineData("B/s", BitRateUnit.BytePerSecond)]
        [InlineData("Ebit/s", BitRateUnit.ExabitPerSecond)]
        [InlineData("Ebps", BitRateUnit.ExabitPerSecond)]
        [InlineData("EB/s", BitRateUnit.ExabytePerSecond)]
        [InlineData("Eo/s", BitRateUnit.ExaoctetPerSecond)]
        [InlineData("Eibit/s", BitRateUnit.ExbibitPerSecond)]
        [InlineData("Eibps", BitRateUnit.ExbibitPerSecond)]
        [InlineData("EiB/s", BitRateUnit.ExbibytePerSecond)]
        [InlineData("Eio/s", BitRateUnit.ExbioctetPerSecond)]
        [InlineData("Gibit/s", BitRateUnit.GibibitPerSecond)]
        [InlineData("Gibps", BitRateUnit.GibibitPerSecond)]
        [InlineData("GiB/s", BitRateUnit.GibibytePerSecond)]
        [InlineData("Gio/s", BitRateUnit.GibioctetPerSecond)]
        [InlineData("Gbit/s", BitRateUnit.GigabitPerSecond)]
        [InlineData("Gbps", BitRateUnit.GigabitPerSecond)]
        [InlineData("GB/s", BitRateUnit.GigabytePerSecond)]
        [InlineData("Go/s", BitRateUnit.GigaoctetPerSecond)]
        [InlineData("Kibit/s", BitRateUnit.KibibitPerSecond)]
        [InlineData("Kibps", BitRateUnit.KibibitPerSecond)]
        [InlineData("KiB/s", BitRateUnit.KibibytePerSecond)]
        [InlineData("Kio/s", BitRateUnit.KibioctetPerSecond)]
        [InlineData("kbit/s", BitRateUnit.KilobitPerSecond)]
        [InlineData("kbps", BitRateUnit.KilobitPerSecond)]
        [InlineData("kB/s", BitRateUnit.KilobytePerSecond)]
        [InlineData("ko/s", BitRateUnit.KilooctetPerSecond)]
        [InlineData("Mibit/s", BitRateUnit.MebibitPerSecond)]
        [InlineData("Mibps", BitRateUnit.MebibitPerSecond)]
        [InlineData("MiB/s", BitRateUnit.MebibytePerSecond)]
        [InlineData("Mio/s", BitRateUnit.MebioctetPerSecond)]
        [InlineData("Mbit/s", BitRateUnit.MegabitPerSecond)]
        [InlineData("Mbps", BitRateUnit.MegabitPerSecond)]
        [InlineData("MB/s", BitRateUnit.MegabytePerSecond)]
        [InlineData("Mo/s", BitRateUnit.MegaoctetPerSecond)]
        [InlineData("o/s", BitRateUnit.OctetPerSecond)]
        [InlineData("Pibit/s", BitRateUnit.PebibitPerSecond)]
        [InlineData("Pibps", BitRateUnit.PebibitPerSecond)]
        [InlineData("PiB/s", BitRateUnit.PebibytePerSecond)]
        [InlineData("Pio/s", BitRateUnit.PebioctetPerSecond)]
        [InlineData("Pbit/s", BitRateUnit.PetabitPerSecond)]
        [InlineData("Pbps", BitRateUnit.PetabitPerSecond)]
        [InlineData("PB/s", BitRateUnit.PetabytePerSecond)]
        [InlineData("Po/s", BitRateUnit.PetaoctetPerSecond)]
        [InlineData("Tibit/s", BitRateUnit.TebibitPerSecond)]
        [InlineData("Tibps", BitRateUnit.TebibitPerSecond)]
        [InlineData("TiB/s", BitRateUnit.TebibytePerSecond)]
        [InlineData("Tio/s", BitRateUnit.TebioctetPerSecond)]
        [InlineData("Tbit/s", BitRateUnit.TerabitPerSecond)]
        [InlineData("Tbps", BitRateUnit.TerabitPerSecond)]
        [InlineData("TB/s", BitRateUnit.TerabytePerSecond)]
        [InlineData("To/s", BitRateUnit.TeraoctetPerSecond)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, BitRateUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            BitRateUnit parsedUnit = BitRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("bit/s", BitRateUnit.BitPerSecond)]
        [InlineData("bps", BitRateUnit.BitPerSecond)]
        [InlineData("B/s", BitRateUnit.BytePerSecond)]
        [InlineData("Ebit/s", BitRateUnit.ExabitPerSecond)]
        [InlineData("Ebps", BitRateUnit.ExabitPerSecond)]
        [InlineData("EB/s", BitRateUnit.ExabytePerSecond)]
        [InlineData("Eo/s", BitRateUnit.ExaoctetPerSecond)]
        [InlineData("Eibit/s", BitRateUnit.ExbibitPerSecond)]
        [InlineData("Eibps", BitRateUnit.ExbibitPerSecond)]
        [InlineData("EiB/s", BitRateUnit.ExbibytePerSecond)]
        [InlineData("Eio/s", BitRateUnit.ExbioctetPerSecond)]
        [InlineData("Gibit/s", BitRateUnit.GibibitPerSecond)]
        [InlineData("Gibps", BitRateUnit.GibibitPerSecond)]
        [InlineData("GiB/s", BitRateUnit.GibibytePerSecond)]
        [InlineData("Gio/s", BitRateUnit.GibioctetPerSecond)]
        [InlineData("Gbit/s", BitRateUnit.GigabitPerSecond)]
        [InlineData("Gbps", BitRateUnit.GigabitPerSecond)]
        [InlineData("GB/s", BitRateUnit.GigabytePerSecond)]
        [InlineData("Go/s", BitRateUnit.GigaoctetPerSecond)]
        [InlineData("Kibit/s", BitRateUnit.KibibitPerSecond)]
        [InlineData("Kibps", BitRateUnit.KibibitPerSecond)]
        [InlineData("KiB/s", BitRateUnit.KibibytePerSecond)]
        [InlineData("Kio/s", BitRateUnit.KibioctetPerSecond)]
        [InlineData("kbit/s", BitRateUnit.KilobitPerSecond)]
        [InlineData("kbps", BitRateUnit.KilobitPerSecond)]
        [InlineData("kB/s", BitRateUnit.KilobytePerSecond)]
        [InlineData("ko/s", BitRateUnit.KilooctetPerSecond)]
        [InlineData("Mibit/s", BitRateUnit.MebibitPerSecond)]
        [InlineData("Mibps", BitRateUnit.MebibitPerSecond)]
        [InlineData("MiB/s", BitRateUnit.MebibytePerSecond)]
        [InlineData("Mio/s", BitRateUnit.MebioctetPerSecond)]
        [InlineData("Mbit/s", BitRateUnit.MegabitPerSecond)]
        [InlineData("Mbps", BitRateUnit.MegabitPerSecond)]
        [InlineData("MB/s", BitRateUnit.MegabytePerSecond)]
        [InlineData("Mo/s", BitRateUnit.MegaoctetPerSecond)]
        [InlineData("o/s", BitRateUnit.OctetPerSecond)]
        [InlineData("Pibit/s", BitRateUnit.PebibitPerSecond)]
        [InlineData("Pibps", BitRateUnit.PebibitPerSecond)]
        [InlineData("PiB/s", BitRateUnit.PebibytePerSecond)]
        [InlineData("Pio/s", BitRateUnit.PebioctetPerSecond)]
        [InlineData("Pbit/s", BitRateUnit.PetabitPerSecond)]
        [InlineData("Pbps", BitRateUnit.PetabitPerSecond)]
        [InlineData("PB/s", BitRateUnit.PetabytePerSecond)]
        [InlineData("Po/s", BitRateUnit.PetaoctetPerSecond)]
        [InlineData("Tibit/s", BitRateUnit.TebibitPerSecond)]
        [InlineData("Tibps", BitRateUnit.TebibitPerSecond)]
        [InlineData("TiB/s", BitRateUnit.TebibytePerSecond)]
        [InlineData("Tio/s", BitRateUnit.TebioctetPerSecond)]
        [InlineData("Tbit/s", BitRateUnit.TerabitPerSecond)]
        [InlineData("Tbps", BitRateUnit.TerabitPerSecond)]
        [InlineData("TB/s", BitRateUnit.TerabytePerSecond)]
        [InlineData("To/s", BitRateUnit.TeraoctetPerSecond)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, BitRateUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            BitRateUnit parsedUnit = BitRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "bit/s", BitRateUnit.BitPerSecond)]
        [InlineData("en-US", "bps", BitRateUnit.BitPerSecond)]
        [InlineData("en-US", "B/s", BitRateUnit.BytePerSecond)]
        [InlineData("en-US", "Ebit/s", BitRateUnit.ExabitPerSecond)]
        [InlineData("en-US", "Ebps", BitRateUnit.ExabitPerSecond)]
        [InlineData("en-US", "EB/s", BitRateUnit.ExabytePerSecond)]
        [InlineData("en-US", "Eo/s", BitRateUnit.ExaoctetPerSecond)]
        [InlineData("en-US", "Eibit/s", BitRateUnit.ExbibitPerSecond)]
        [InlineData("en-US", "Eibps", BitRateUnit.ExbibitPerSecond)]
        [InlineData("en-US", "EiB/s", BitRateUnit.ExbibytePerSecond)]
        [InlineData("en-US", "Eio/s", BitRateUnit.ExbioctetPerSecond)]
        [InlineData("en-US", "Gibit/s", BitRateUnit.GibibitPerSecond)]
        [InlineData("en-US", "Gibps", BitRateUnit.GibibitPerSecond)]
        [InlineData("en-US", "GiB/s", BitRateUnit.GibibytePerSecond)]
        [InlineData("en-US", "Gio/s", BitRateUnit.GibioctetPerSecond)]
        [InlineData("en-US", "Gbit/s", BitRateUnit.GigabitPerSecond)]
        [InlineData("en-US", "Gbps", BitRateUnit.GigabitPerSecond)]
        [InlineData("en-US", "GB/s", BitRateUnit.GigabytePerSecond)]
        [InlineData("en-US", "Go/s", BitRateUnit.GigaoctetPerSecond)]
        [InlineData("en-US", "Kibit/s", BitRateUnit.KibibitPerSecond)]
        [InlineData("en-US", "Kibps", BitRateUnit.KibibitPerSecond)]
        [InlineData("en-US", "KiB/s", BitRateUnit.KibibytePerSecond)]
        [InlineData("en-US", "Kio/s", BitRateUnit.KibioctetPerSecond)]
        [InlineData("en-US", "kbit/s", BitRateUnit.KilobitPerSecond)]
        [InlineData("en-US", "kbps", BitRateUnit.KilobitPerSecond)]
        [InlineData("en-US", "kB/s", BitRateUnit.KilobytePerSecond)]
        [InlineData("en-US", "ko/s", BitRateUnit.KilooctetPerSecond)]
        [InlineData("en-US", "Mibit/s", BitRateUnit.MebibitPerSecond)]
        [InlineData("en-US", "Mibps", BitRateUnit.MebibitPerSecond)]
        [InlineData("en-US", "MiB/s", BitRateUnit.MebibytePerSecond)]
        [InlineData("en-US", "Mio/s", BitRateUnit.MebioctetPerSecond)]
        [InlineData("en-US", "Mbit/s", BitRateUnit.MegabitPerSecond)]
        [InlineData("en-US", "Mbps", BitRateUnit.MegabitPerSecond)]
        [InlineData("en-US", "MB/s", BitRateUnit.MegabytePerSecond)]
        [InlineData("en-US", "Mo/s", BitRateUnit.MegaoctetPerSecond)]
        [InlineData("en-US", "o/s", BitRateUnit.OctetPerSecond)]
        [InlineData("en-US", "Pibit/s", BitRateUnit.PebibitPerSecond)]
        [InlineData("en-US", "Pibps", BitRateUnit.PebibitPerSecond)]
        [InlineData("en-US", "PiB/s", BitRateUnit.PebibytePerSecond)]
        [InlineData("en-US", "Pio/s", BitRateUnit.PebioctetPerSecond)]
        [InlineData("en-US", "Pbit/s", BitRateUnit.PetabitPerSecond)]
        [InlineData("en-US", "Pbps", BitRateUnit.PetabitPerSecond)]
        [InlineData("en-US", "PB/s", BitRateUnit.PetabytePerSecond)]
        [InlineData("en-US", "Po/s", BitRateUnit.PetaoctetPerSecond)]
        [InlineData("en-US", "Tibit/s", BitRateUnit.TebibitPerSecond)]
        [InlineData("en-US", "Tibps", BitRateUnit.TebibitPerSecond)]
        [InlineData("en-US", "TiB/s", BitRateUnit.TebibytePerSecond)]
        [InlineData("en-US", "Tio/s", BitRateUnit.TebioctetPerSecond)]
        [InlineData("en-US", "Tbit/s", BitRateUnit.TerabitPerSecond)]
        [InlineData("en-US", "Tbps", BitRateUnit.TerabitPerSecond)]
        [InlineData("en-US", "TB/s", BitRateUnit.TerabytePerSecond)]
        [InlineData("en-US", "To/s", BitRateUnit.TeraoctetPerSecond)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, BitRateUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            BitRateUnit parsedUnit = BitRate.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "bit/s", BitRateUnit.BitPerSecond)]
        [InlineData("en-US", "bps", BitRateUnit.BitPerSecond)]
        [InlineData("en-US", "B/s", BitRateUnit.BytePerSecond)]
        [InlineData("en-US", "Ebit/s", BitRateUnit.ExabitPerSecond)]
        [InlineData("en-US", "Ebps", BitRateUnit.ExabitPerSecond)]
        [InlineData("en-US", "EB/s", BitRateUnit.ExabytePerSecond)]
        [InlineData("en-US", "Eo/s", BitRateUnit.ExaoctetPerSecond)]
        [InlineData("en-US", "Eibit/s", BitRateUnit.ExbibitPerSecond)]
        [InlineData("en-US", "Eibps", BitRateUnit.ExbibitPerSecond)]
        [InlineData("en-US", "EiB/s", BitRateUnit.ExbibytePerSecond)]
        [InlineData("en-US", "Eio/s", BitRateUnit.ExbioctetPerSecond)]
        [InlineData("en-US", "Gibit/s", BitRateUnit.GibibitPerSecond)]
        [InlineData("en-US", "Gibps", BitRateUnit.GibibitPerSecond)]
        [InlineData("en-US", "GiB/s", BitRateUnit.GibibytePerSecond)]
        [InlineData("en-US", "Gio/s", BitRateUnit.GibioctetPerSecond)]
        [InlineData("en-US", "Gbit/s", BitRateUnit.GigabitPerSecond)]
        [InlineData("en-US", "Gbps", BitRateUnit.GigabitPerSecond)]
        [InlineData("en-US", "GB/s", BitRateUnit.GigabytePerSecond)]
        [InlineData("en-US", "Go/s", BitRateUnit.GigaoctetPerSecond)]
        [InlineData("en-US", "Kibit/s", BitRateUnit.KibibitPerSecond)]
        [InlineData("en-US", "Kibps", BitRateUnit.KibibitPerSecond)]
        [InlineData("en-US", "KiB/s", BitRateUnit.KibibytePerSecond)]
        [InlineData("en-US", "Kio/s", BitRateUnit.KibioctetPerSecond)]
        [InlineData("en-US", "kbit/s", BitRateUnit.KilobitPerSecond)]
        [InlineData("en-US", "kbps", BitRateUnit.KilobitPerSecond)]
        [InlineData("en-US", "kB/s", BitRateUnit.KilobytePerSecond)]
        [InlineData("en-US", "ko/s", BitRateUnit.KilooctetPerSecond)]
        [InlineData("en-US", "Mibit/s", BitRateUnit.MebibitPerSecond)]
        [InlineData("en-US", "Mibps", BitRateUnit.MebibitPerSecond)]
        [InlineData("en-US", "MiB/s", BitRateUnit.MebibytePerSecond)]
        [InlineData("en-US", "Mio/s", BitRateUnit.MebioctetPerSecond)]
        [InlineData("en-US", "Mbit/s", BitRateUnit.MegabitPerSecond)]
        [InlineData("en-US", "Mbps", BitRateUnit.MegabitPerSecond)]
        [InlineData("en-US", "MB/s", BitRateUnit.MegabytePerSecond)]
        [InlineData("en-US", "Mo/s", BitRateUnit.MegaoctetPerSecond)]
        [InlineData("en-US", "o/s", BitRateUnit.OctetPerSecond)]
        [InlineData("en-US", "Pibit/s", BitRateUnit.PebibitPerSecond)]
        [InlineData("en-US", "Pibps", BitRateUnit.PebibitPerSecond)]
        [InlineData("en-US", "PiB/s", BitRateUnit.PebibytePerSecond)]
        [InlineData("en-US", "Pio/s", BitRateUnit.PebioctetPerSecond)]
        [InlineData("en-US", "Pbit/s", BitRateUnit.PetabitPerSecond)]
        [InlineData("en-US", "Pbps", BitRateUnit.PetabitPerSecond)]
        [InlineData("en-US", "PB/s", BitRateUnit.PetabytePerSecond)]
        [InlineData("en-US", "Po/s", BitRateUnit.PetaoctetPerSecond)]
        [InlineData("en-US", "Tibit/s", BitRateUnit.TebibitPerSecond)]
        [InlineData("en-US", "Tibps", BitRateUnit.TebibitPerSecond)]
        [InlineData("en-US", "TiB/s", BitRateUnit.TebibytePerSecond)]
        [InlineData("en-US", "Tio/s", BitRateUnit.TebioctetPerSecond)]
        [InlineData("en-US", "Tbit/s", BitRateUnit.TerabitPerSecond)]
        [InlineData("en-US", "Tbps", BitRateUnit.TerabitPerSecond)]
        [InlineData("en-US", "TB/s", BitRateUnit.TerabytePerSecond)]
        [InlineData("en-US", "To/s", BitRateUnit.TeraoctetPerSecond)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, BitRateUnit expectedUnit)
        {
            BitRateUnit parsedUnit = BitRate.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("bit/s", BitRateUnit.BitPerSecond)]
        [InlineData("bps", BitRateUnit.BitPerSecond)]
        [InlineData("B/s", BitRateUnit.BytePerSecond)]
        [InlineData("Ebit/s", BitRateUnit.ExabitPerSecond)]
        [InlineData("Ebps", BitRateUnit.ExabitPerSecond)]
        [InlineData("EB/s", BitRateUnit.ExabytePerSecond)]
        [InlineData("Eo/s", BitRateUnit.ExaoctetPerSecond)]
        [InlineData("Eibit/s", BitRateUnit.ExbibitPerSecond)]
        [InlineData("Eibps", BitRateUnit.ExbibitPerSecond)]
        [InlineData("EiB/s", BitRateUnit.ExbibytePerSecond)]
        [InlineData("Eio/s", BitRateUnit.ExbioctetPerSecond)]
        [InlineData("Gibit/s", BitRateUnit.GibibitPerSecond)]
        [InlineData("Gibps", BitRateUnit.GibibitPerSecond)]
        [InlineData("GiB/s", BitRateUnit.GibibytePerSecond)]
        [InlineData("Gio/s", BitRateUnit.GibioctetPerSecond)]
        [InlineData("Gbit/s", BitRateUnit.GigabitPerSecond)]
        [InlineData("Gbps", BitRateUnit.GigabitPerSecond)]
        [InlineData("GB/s", BitRateUnit.GigabytePerSecond)]
        [InlineData("Go/s", BitRateUnit.GigaoctetPerSecond)]
        [InlineData("Kibit/s", BitRateUnit.KibibitPerSecond)]
        [InlineData("Kibps", BitRateUnit.KibibitPerSecond)]
        [InlineData("KiB/s", BitRateUnit.KibibytePerSecond)]
        [InlineData("Kio/s", BitRateUnit.KibioctetPerSecond)]
        [InlineData("kbit/s", BitRateUnit.KilobitPerSecond)]
        [InlineData("kbps", BitRateUnit.KilobitPerSecond)]
        [InlineData("kB/s", BitRateUnit.KilobytePerSecond)]
        [InlineData("ko/s", BitRateUnit.KilooctetPerSecond)]
        [InlineData("Mibit/s", BitRateUnit.MebibitPerSecond)]
        [InlineData("Mibps", BitRateUnit.MebibitPerSecond)]
        [InlineData("MiB/s", BitRateUnit.MebibytePerSecond)]
        [InlineData("Mio/s", BitRateUnit.MebioctetPerSecond)]
        [InlineData("Mbit/s", BitRateUnit.MegabitPerSecond)]
        [InlineData("Mbps", BitRateUnit.MegabitPerSecond)]
        [InlineData("MB/s", BitRateUnit.MegabytePerSecond)]
        [InlineData("Mo/s", BitRateUnit.MegaoctetPerSecond)]
        [InlineData("o/s", BitRateUnit.OctetPerSecond)]
        [InlineData("Pibit/s", BitRateUnit.PebibitPerSecond)]
        [InlineData("Pibps", BitRateUnit.PebibitPerSecond)]
        [InlineData("PiB/s", BitRateUnit.PebibytePerSecond)]
        [InlineData("Pio/s", BitRateUnit.PebioctetPerSecond)]
        [InlineData("Pbit/s", BitRateUnit.PetabitPerSecond)]
        [InlineData("Pbps", BitRateUnit.PetabitPerSecond)]
        [InlineData("PB/s", BitRateUnit.PetabytePerSecond)]
        [InlineData("Po/s", BitRateUnit.PetaoctetPerSecond)]
        [InlineData("Tibit/s", BitRateUnit.TebibitPerSecond)]
        [InlineData("Tibps", BitRateUnit.TebibitPerSecond)]
        [InlineData("TiB/s", BitRateUnit.TebibytePerSecond)]
        [InlineData("Tio/s", BitRateUnit.TebioctetPerSecond)]
        [InlineData("Tbit/s", BitRateUnit.TerabitPerSecond)]
        [InlineData("Tbps", BitRateUnit.TerabitPerSecond)]
        [InlineData("TB/s", BitRateUnit.TerabytePerSecond)]
        [InlineData("To/s", BitRateUnit.TeraoctetPerSecond)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, BitRateUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(BitRate.TryParseUnit(abbreviation, out BitRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("bit/s", BitRateUnit.BitPerSecond)]
        [InlineData("bps", BitRateUnit.BitPerSecond)]
        [InlineData("B/s", BitRateUnit.BytePerSecond)]
        [InlineData("Ebit/s", BitRateUnit.ExabitPerSecond)]
        [InlineData("Ebps", BitRateUnit.ExabitPerSecond)]
        [InlineData("EB/s", BitRateUnit.ExabytePerSecond)]
        [InlineData("Eo/s", BitRateUnit.ExaoctetPerSecond)]
        [InlineData("Eibit/s", BitRateUnit.ExbibitPerSecond)]
        [InlineData("Eibps", BitRateUnit.ExbibitPerSecond)]
        [InlineData("EiB/s", BitRateUnit.ExbibytePerSecond)]
        [InlineData("Eio/s", BitRateUnit.ExbioctetPerSecond)]
        [InlineData("Gibit/s", BitRateUnit.GibibitPerSecond)]
        [InlineData("Gibps", BitRateUnit.GibibitPerSecond)]
        [InlineData("GiB/s", BitRateUnit.GibibytePerSecond)]
        [InlineData("Gio/s", BitRateUnit.GibioctetPerSecond)]
        [InlineData("Gbit/s", BitRateUnit.GigabitPerSecond)]
        [InlineData("Gbps", BitRateUnit.GigabitPerSecond)]
        [InlineData("GB/s", BitRateUnit.GigabytePerSecond)]
        [InlineData("Go/s", BitRateUnit.GigaoctetPerSecond)]
        [InlineData("Kibit/s", BitRateUnit.KibibitPerSecond)]
        [InlineData("Kibps", BitRateUnit.KibibitPerSecond)]
        [InlineData("KiB/s", BitRateUnit.KibibytePerSecond)]
        [InlineData("Kio/s", BitRateUnit.KibioctetPerSecond)]
        [InlineData("kbit/s", BitRateUnit.KilobitPerSecond)]
        [InlineData("kbps", BitRateUnit.KilobitPerSecond)]
        [InlineData("kB/s", BitRateUnit.KilobytePerSecond)]
        [InlineData("ko/s", BitRateUnit.KilooctetPerSecond)]
        [InlineData("Mibit/s", BitRateUnit.MebibitPerSecond)]
        [InlineData("Mibps", BitRateUnit.MebibitPerSecond)]
        [InlineData("MiB/s", BitRateUnit.MebibytePerSecond)]
        [InlineData("Mio/s", BitRateUnit.MebioctetPerSecond)]
        [InlineData("Mbit/s", BitRateUnit.MegabitPerSecond)]
        [InlineData("Mbps", BitRateUnit.MegabitPerSecond)]
        [InlineData("MB/s", BitRateUnit.MegabytePerSecond)]
        [InlineData("Mo/s", BitRateUnit.MegaoctetPerSecond)]
        [InlineData("o/s", BitRateUnit.OctetPerSecond)]
        [InlineData("Pibit/s", BitRateUnit.PebibitPerSecond)]
        [InlineData("Pibps", BitRateUnit.PebibitPerSecond)]
        [InlineData("PiB/s", BitRateUnit.PebibytePerSecond)]
        [InlineData("Pio/s", BitRateUnit.PebioctetPerSecond)]
        [InlineData("Pbit/s", BitRateUnit.PetabitPerSecond)]
        [InlineData("Pbps", BitRateUnit.PetabitPerSecond)]
        [InlineData("PB/s", BitRateUnit.PetabytePerSecond)]
        [InlineData("Po/s", BitRateUnit.PetaoctetPerSecond)]
        [InlineData("Tibit/s", BitRateUnit.TebibitPerSecond)]
        [InlineData("Tibps", BitRateUnit.TebibitPerSecond)]
        [InlineData("TiB/s", BitRateUnit.TebibytePerSecond)]
        [InlineData("Tio/s", BitRateUnit.TebioctetPerSecond)]
        [InlineData("Tbit/s", BitRateUnit.TerabitPerSecond)]
        [InlineData("Tbps", BitRateUnit.TerabitPerSecond)]
        [InlineData("TB/s", BitRateUnit.TerabytePerSecond)]
        [InlineData("To/s", BitRateUnit.TeraoctetPerSecond)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, BitRateUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(BitRate.TryParseUnit(abbreviation, out BitRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "bit/s", BitRateUnit.BitPerSecond)]
        [InlineData("en-US", "bps", BitRateUnit.BitPerSecond)]
        [InlineData("en-US", "B/s", BitRateUnit.BytePerSecond)]
        [InlineData("en-US", "Ebit/s", BitRateUnit.ExabitPerSecond)]
        [InlineData("en-US", "Ebps", BitRateUnit.ExabitPerSecond)]
        [InlineData("en-US", "EB/s", BitRateUnit.ExabytePerSecond)]
        [InlineData("en-US", "Eo/s", BitRateUnit.ExaoctetPerSecond)]
        [InlineData("en-US", "Eibit/s", BitRateUnit.ExbibitPerSecond)]
        [InlineData("en-US", "Eibps", BitRateUnit.ExbibitPerSecond)]
        [InlineData("en-US", "EiB/s", BitRateUnit.ExbibytePerSecond)]
        [InlineData("en-US", "Eio/s", BitRateUnit.ExbioctetPerSecond)]
        [InlineData("en-US", "Gibit/s", BitRateUnit.GibibitPerSecond)]
        [InlineData("en-US", "Gibps", BitRateUnit.GibibitPerSecond)]
        [InlineData("en-US", "GiB/s", BitRateUnit.GibibytePerSecond)]
        [InlineData("en-US", "Gio/s", BitRateUnit.GibioctetPerSecond)]
        [InlineData("en-US", "Gbit/s", BitRateUnit.GigabitPerSecond)]
        [InlineData("en-US", "Gbps", BitRateUnit.GigabitPerSecond)]
        [InlineData("en-US", "GB/s", BitRateUnit.GigabytePerSecond)]
        [InlineData("en-US", "Go/s", BitRateUnit.GigaoctetPerSecond)]
        [InlineData("en-US", "Kibit/s", BitRateUnit.KibibitPerSecond)]
        [InlineData("en-US", "Kibps", BitRateUnit.KibibitPerSecond)]
        [InlineData("en-US", "KiB/s", BitRateUnit.KibibytePerSecond)]
        [InlineData("en-US", "Kio/s", BitRateUnit.KibioctetPerSecond)]
        [InlineData("en-US", "kbit/s", BitRateUnit.KilobitPerSecond)]
        [InlineData("en-US", "kbps", BitRateUnit.KilobitPerSecond)]
        [InlineData("en-US", "kB/s", BitRateUnit.KilobytePerSecond)]
        [InlineData("en-US", "ko/s", BitRateUnit.KilooctetPerSecond)]
        [InlineData("en-US", "Mibit/s", BitRateUnit.MebibitPerSecond)]
        [InlineData("en-US", "Mibps", BitRateUnit.MebibitPerSecond)]
        [InlineData("en-US", "MiB/s", BitRateUnit.MebibytePerSecond)]
        [InlineData("en-US", "Mio/s", BitRateUnit.MebioctetPerSecond)]
        [InlineData("en-US", "Mbit/s", BitRateUnit.MegabitPerSecond)]
        [InlineData("en-US", "Mbps", BitRateUnit.MegabitPerSecond)]
        [InlineData("en-US", "MB/s", BitRateUnit.MegabytePerSecond)]
        [InlineData("en-US", "Mo/s", BitRateUnit.MegaoctetPerSecond)]
        [InlineData("en-US", "o/s", BitRateUnit.OctetPerSecond)]
        [InlineData("en-US", "Pibit/s", BitRateUnit.PebibitPerSecond)]
        [InlineData("en-US", "Pibps", BitRateUnit.PebibitPerSecond)]
        [InlineData("en-US", "PiB/s", BitRateUnit.PebibytePerSecond)]
        [InlineData("en-US", "Pio/s", BitRateUnit.PebioctetPerSecond)]
        [InlineData("en-US", "Pbit/s", BitRateUnit.PetabitPerSecond)]
        [InlineData("en-US", "Pbps", BitRateUnit.PetabitPerSecond)]
        [InlineData("en-US", "PB/s", BitRateUnit.PetabytePerSecond)]
        [InlineData("en-US", "Po/s", BitRateUnit.PetaoctetPerSecond)]
        [InlineData("en-US", "Tibit/s", BitRateUnit.TebibitPerSecond)]
        [InlineData("en-US", "Tibps", BitRateUnit.TebibitPerSecond)]
        [InlineData("en-US", "TiB/s", BitRateUnit.TebibytePerSecond)]
        [InlineData("en-US", "Tio/s", BitRateUnit.TebioctetPerSecond)]
        [InlineData("en-US", "Tbit/s", BitRateUnit.TerabitPerSecond)]
        [InlineData("en-US", "Tbps", BitRateUnit.TerabitPerSecond)]
        [InlineData("en-US", "TB/s", BitRateUnit.TerabytePerSecond)]
        [InlineData("en-US", "To/s", BitRateUnit.TeraoctetPerSecond)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, BitRateUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(BitRate.TryParseUnit(abbreviation, out BitRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "bit/s", BitRateUnit.BitPerSecond)]
        [InlineData("en-US", "bps", BitRateUnit.BitPerSecond)]
        [InlineData("en-US", "B/s", BitRateUnit.BytePerSecond)]
        [InlineData("en-US", "Ebit/s", BitRateUnit.ExabitPerSecond)]
        [InlineData("en-US", "Ebps", BitRateUnit.ExabitPerSecond)]
        [InlineData("en-US", "EB/s", BitRateUnit.ExabytePerSecond)]
        [InlineData("en-US", "Eo/s", BitRateUnit.ExaoctetPerSecond)]
        [InlineData("en-US", "Eibit/s", BitRateUnit.ExbibitPerSecond)]
        [InlineData("en-US", "Eibps", BitRateUnit.ExbibitPerSecond)]
        [InlineData("en-US", "EiB/s", BitRateUnit.ExbibytePerSecond)]
        [InlineData("en-US", "Eio/s", BitRateUnit.ExbioctetPerSecond)]
        [InlineData("en-US", "Gibit/s", BitRateUnit.GibibitPerSecond)]
        [InlineData("en-US", "Gibps", BitRateUnit.GibibitPerSecond)]
        [InlineData("en-US", "GiB/s", BitRateUnit.GibibytePerSecond)]
        [InlineData("en-US", "Gio/s", BitRateUnit.GibioctetPerSecond)]
        [InlineData("en-US", "Gbit/s", BitRateUnit.GigabitPerSecond)]
        [InlineData("en-US", "Gbps", BitRateUnit.GigabitPerSecond)]
        [InlineData("en-US", "GB/s", BitRateUnit.GigabytePerSecond)]
        [InlineData("en-US", "Go/s", BitRateUnit.GigaoctetPerSecond)]
        [InlineData("en-US", "Kibit/s", BitRateUnit.KibibitPerSecond)]
        [InlineData("en-US", "Kibps", BitRateUnit.KibibitPerSecond)]
        [InlineData("en-US", "KiB/s", BitRateUnit.KibibytePerSecond)]
        [InlineData("en-US", "Kio/s", BitRateUnit.KibioctetPerSecond)]
        [InlineData("en-US", "kbit/s", BitRateUnit.KilobitPerSecond)]
        [InlineData("en-US", "kbps", BitRateUnit.KilobitPerSecond)]
        [InlineData("en-US", "kB/s", BitRateUnit.KilobytePerSecond)]
        [InlineData("en-US", "ko/s", BitRateUnit.KilooctetPerSecond)]
        [InlineData("en-US", "Mibit/s", BitRateUnit.MebibitPerSecond)]
        [InlineData("en-US", "Mibps", BitRateUnit.MebibitPerSecond)]
        [InlineData("en-US", "MiB/s", BitRateUnit.MebibytePerSecond)]
        [InlineData("en-US", "Mio/s", BitRateUnit.MebioctetPerSecond)]
        [InlineData("en-US", "Mbit/s", BitRateUnit.MegabitPerSecond)]
        [InlineData("en-US", "Mbps", BitRateUnit.MegabitPerSecond)]
        [InlineData("en-US", "MB/s", BitRateUnit.MegabytePerSecond)]
        [InlineData("en-US", "Mo/s", BitRateUnit.MegaoctetPerSecond)]
        [InlineData("en-US", "o/s", BitRateUnit.OctetPerSecond)]
        [InlineData("en-US", "Pibit/s", BitRateUnit.PebibitPerSecond)]
        [InlineData("en-US", "Pibps", BitRateUnit.PebibitPerSecond)]
        [InlineData("en-US", "PiB/s", BitRateUnit.PebibytePerSecond)]
        [InlineData("en-US", "Pio/s", BitRateUnit.PebioctetPerSecond)]
        [InlineData("en-US", "Pbit/s", BitRateUnit.PetabitPerSecond)]
        [InlineData("en-US", "Pbps", BitRateUnit.PetabitPerSecond)]
        [InlineData("en-US", "PB/s", BitRateUnit.PetabytePerSecond)]
        [InlineData("en-US", "Po/s", BitRateUnit.PetaoctetPerSecond)]
        [InlineData("en-US", "Tibit/s", BitRateUnit.TebibitPerSecond)]
        [InlineData("en-US", "Tibps", BitRateUnit.TebibitPerSecond)]
        [InlineData("en-US", "TiB/s", BitRateUnit.TebibytePerSecond)]
        [InlineData("en-US", "Tio/s", BitRateUnit.TebioctetPerSecond)]
        [InlineData("en-US", "Tbit/s", BitRateUnit.TerabitPerSecond)]
        [InlineData("en-US", "Tbps", BitRateUnit.TerabitPerSecond)]
        [InlineData("en-US", "TB/s", BitRateUnit.TerabytePerSecond)]
        [InlineData("en-US", "To/s", BitRateUnit.TeraoctetPerSecond)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, BitRateUnit expectedUnit)
        {
            Assert.True(BitRate.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out BitRateUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", BitRateUnit.BitPerSecond, "bit/s")]
        [InlineData("en-US", BitRateUnit.BytePerSecond, "B/s")]
        [InlineData("en-US", BitRateUnit.ExabitPerSecond, "Ebit/s")]
        [InlineData("en-US", BitRateUnit.ExabytePerSecond, "EB/s")]
        [InlineData("en-US", BitRateUnit.ExaoctetPerSecond, "Eo/s")]
        [InlineData("en-US", BitRateUnit.ExbibitPerSecond, "Eibit/s")]
        [InlineData("en-US", BitRateUnit.ExbibytePerSecond, "EiB/s")]
        [InlineData("en-US", BitRateUnit.ExbioctetPerSecond, "Eio/s")]
        [InlineData("en-US", BitRateUnit.GibibitPerSecond, "Gibit/s")]
        [InlineData("en-US", BitRateUnit.GibibytePerSecond, "GiB/s")]
        [InlineData("en-US", BitRateUnit.GibioctetPerSecond, "Gio/s")]
        [InlineData("en-US", BitRateUnit.GigabitPerSecond, "Gbit/s")]
        [InlineData("en-US", BitRateUnit.GigabytePerSecond, "GB/s")]
        [InlineData("en-US", BitRateUnit.GigaoctetPerSecond, "Go/s")]
        [InlineData("en-US", BitRateUnit.KibibitPerSecond, "Kibit/s")]
        [InlineData("en-US", BitRateUnit.KibibytePerSecond, "KiB/s")]
        [InlineData("en-US", BitRateUnit.KibioctetPerSecond, "Kio/s")]
        [InlineData("en-US", BitRateUnit.KilobitPerSecond, "kbit/s")]
        [InlineData("en-US", BitRateUnit.KilobytePerSecond, "kB/s")]
        [InlineData("en-US", BitRateUnit.KilooctetPerSecond, "ko/s")]
        [InlineData("en-US", BitRateUnit.MebibitPerSecond, "Mibit/s")]
        [InlineData("en-US", BitRateUnit.MebibytePerSecond, "MiB/s")]
        [InlineData("en-US", BitRateUnit.MebioctetPerSecond, "Mio/s")]
        [InlineData("en-US", BitRateUnit.MegabitPerSecond, "Mbit/s")]
        [InlineData("en-US", BitRateUnit.MegabytePerSecond, "MB/s")]
        [InlineData("en-US", BitRateUnit.MegaoctetPerSecond, "Mo/s")]
        [InlineData("en-US", BitRateUnit.OctetPerSecond, "o/s")]
        [InlineData("en-US", BitRateUnit.PebibitPerSecond, "Pibit/s")]
        [InlineData("en-US", BitRateUnit.PebibytePerSecond, "PiB/s")]
        [InlineData("en-US", BitRateUnit.PebioctetPerSecond, "Pio/s")]
        [InlineData("en-US", BitRateUnit.PetabitPerSecond, "Pbit/s")]
        [InlineData("en-US", BitRateUnit.PetabytePerSecond, "PB/s")]
        [InlineData("en-US", BitRateUnit.PetaoctetPerSecond, "Po/s")]
        [InlineData("en-US", BitRateUnit.TebibitPerSecond, "Tibit/s")]
        [InlineData("en-US", BitRateUnit.TebibytePerSecond, "TiB/s")]
        [InlineData("en-US", BitRateUnit.TebioctetPerSecond, "Tio/s")]
        [InlineData("en-US", BitRateUnit.TerabitPerSecond, "Tbit/s")]
        [InlineData("en-US", BitRateUnit.TerabytePerSecond, "TB/s")]
        [InlineData("en-US", BitRateUnit.TeraoctetPerSecond, "To/s")]
        public void GetAbbreviationForCulture(string culture, BitRateUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = BitRate.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(BitRate.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = BitRate.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(BitRateUnit unit)
        {
            var inBaseUnits = BitRate.From(1.0, BitRate.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(BitRateUnit unit)
        {
            var quantity = BitRate.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(BitRateUnit unit)
        {
            Assert.All(BitRate.Units.Where(u => u != BitRate.BaseUnit), fromUnit =>
            {
                var quantity = BitRate.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(BitRateUnit unit)
        {
            var quantity = default(BitRate);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(BitRateUnit unit)
        {
            var quantity = BitRate.From(3, BitRate.BaseUnit);
            BitRate expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<BitRateUnit> quantityToConvert = quantity;
                IQuantity<BitRateUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            BitRate bitpersecond = BitRate.FromBitsPerSecond(3);
            Assert.Equal(3, BitRate.FromBitsPerSecond(bitpersecond.BitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromBytesPerSecond(bitpersecond.BytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromExabitsPerSecond(bitpersecond.ExabitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromExabytesPerSecond(bitpersecond.ExabytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromExaoctetsPerSecond(bitpersecond.ExaoctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromExbibitsPerSecond(bitpersecond.ExbibitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromExbibytesPerSecond(bitpersecond.ExbibytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromExbioctetsPerSecond(bitpersecond.ExbioctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromGibibitsPerSecond(bitpersecond.GibibitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromGibibytesPerSecond(bitpersecond.GibibytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromGibioctetsPerSecond(bitpersecond.GibioctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromGigabitsPerSecond(bitpersecond.GigabitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromGigabytesPerSecond(bitpersecond.GigabytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromGigaoctetsPerSecond(bitpersecond.GigaoctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromKibibitsPerSecond(bitpersecond.KibibitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromKibibytesPerSecond(bitpersecond.KibibytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromKibioctetsPerSecond(bitpersecond.KibioctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromKilobitsPerSecond(bitpersecond.KilobitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromKilobytesPerSecond(bitpersecond.KilobytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromKilooctetsPerSecond(bitpersecond.KilooctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromMebibitsPerSecond(bitpersecond.MebibitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromMebibytesPerSecond(bitpersecond.MebibytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromMebioctetsPerSecond(bitpersecond.MebioctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromMegabitsPerSecond(bitpersecond.MegabitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromMegabytesPerSecond(bitpersecond.MegabytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromMegaoctetsPerSecond(bitpersecond.MegaoctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromOctetsPerSecond(bitpersecond.OctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromPebibitsPerSecond(bitpersecond.PebibitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromPebibytesPerSecond(bitpersecond.PebibytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromPebioctetsPerSecond(bitpersecond.PebioctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromPetabitsPerSecond(bitpersecond.PetabitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromPetabytesPerSecond(bitpersecond.PetabytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromPetaoctetsPerSecond(bitpersecond.PetaoctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromTebibitsPerSecond(bitpersecond.TebibitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromTebibytesPerSecond(bitpersecond.TebibytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromTebioctetsPerSecond(bitpersecond.TebioctetsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromTerabitsPerSecond(bitpersecond.TerabitsPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromTerabytesPerSecond(bitpersecond.TerabytesPerSecond).BitsPerSecond);
            Assert.Equal(3, BitRate.FromTeraoctetsPerSecond(bitpersecond.TeraoctetsPerSecond).BitsPerSecond);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            BitRate v = BitRate.FromBitsPerSecond(1);
            Assert.Equal(-1, -v.BitsPerSecond);
            Assert.Equal(2, (BitRate.FromBitsPerSecond(3) - v).BitsPerSecond);
            Assert.Equal(2, (v + v).BitsPerSecond);
            Assert.Equal(10, (v * 10).BitsPerSecond);
            Assert.Equal(10, (10 * v).BitsPerSecond);
            Assert.Equal(2, (BitRate.FromBitsPerSecond(10) / 5).BitsPerSecond);
            Assert.Equal(2, BitRate.FromBitsPerSecond(10) / BitRate.FromBitsPerSecond(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            BitRate oneBitPerSecond = BitRate.FromBitsPerSecond(1);
            BitRate twoBitsPerSecond = BitRate.FromBitsPerSecond(2);

            Assert.True(oneBitPerSecond < twoBitsPerSecond);
            Assert.True(oneBitPerSecond <= twoBitsPerSecond);
            Assert.True(twoBitsPerSecond > oneBitPerSecond);
            Assert.True(twoBitsPerSecond >= oneBitPerSecond);

            Assert.False(oneBitPerSecond > twoBitsPerSecond);
            Assert.False(oneBitPerSecond >= twoBitsPerSecond);
            Assert.False(twoBitsPerSecond < oneBitPerSecond);
            Assert.False(twoBitsPerSecond <= oneBitPerSecond);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            BitRate bitpersecond = BitRate.FromBitsPerSecond(1);
            Assert.Equal(0, bitpersecond.CompareTo(bitpersecond));
            Assert.True(bitpersecond.CompareTo(BitRate.Zero) > 0);
            Assert.True(BitRate.Zero.CompareTo(bitpersecond) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            BitRate bitpersecond = BitRate.FromBitsPerSecond(1);
            Assert.Throws<ArgumentException>(() => bitpersecond.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            BitRate bitpersecond = BitRate.FromBitsPerSecond(1);
            Assert.Throws<ArgumentNullException>(() => bitpersecond.CompareTo(null));
        }

        [Theory]
        [InlineData(1, BitRateUnit.BitPerSecond, 1, BitRateUnit.BitPerSecond, true)]  // Same value and unit.
        [InlineData(1, BitRateUnit.BitPerSecond, 2, BitRateUnit.BitPerSecond, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, BitRateUnit unitA, double valueB, BitRateUnit unitB, bool expectEqual)
        {
            var a = new BitRate(valueA, unitA);
            var b = new BitRate(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = BitRate.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            BitRate bitpersecond = BitRate.FromBitsPerSecond(1);
            Assert.False(bitpersecond.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            BitRate bitpersecond = BitRate.FromBitsPerSecond(1);
            Assert.False(bitpersecond.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = BitRate.FromBitsPerSecond(firstValue);
            var otherQuantity = BitRate.FromBitsPerSecond(secondValue);
            BitRate maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, BitRate.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = BitRate.FromBitsPerSecond(1);
            var negativeTolerance = BitRate.FromBitsPerSecond(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<BitRateUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(BitRate.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(BitRate.Info.Units, BitRate.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, BitRate.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 bit/s", new BitRate(1, BitRateUnit.BitPerSecond).ToString());
            Assert.Equal("1 B/s", new BitRate(1, BitRateUnit.BytePerSecond).ToString());
            Assert.Equal("1 Ebit/s", new BitRate(1, BitRateUnit.ExabitPerSecond).ToString());
            Assert.Equal("1 EB/s", new BitRate(1, BitRateUnit.ExabytePerSecond).ToString());
            Assert.Equal("1 Eo/s", new BitRate(1, BitRateUnit.ExaoctetPerSecond).ToString());
            Assert.Equal("1 Eibit/s", new BitRate(1, BitRateUnit.ExbibitPerSecond).ToString());
            Assert.Equal("1 EiB/s", new BitRate(1, BitRateUnit.ExbibytePerSecond).ToString());
            Assert.Equal("1 Eio/s", new BitRate(1, BitRateUnit.ExbioctetPerSecond).ToString());
            Assert.Equal("1 Gibit/s", new BitRate(1, BitRateUnit.GibibitPerSecond).ToString());
            Assert.Equal("1 GiB/s", new BitRate(1, BitRateUnit.GibibytePerSecond).ToString());
            Assert.Equal("1 Gio/s", new BitRate(1, BitRateUnit.GibioctetPerSecond).ToString());
            Assert.Equal("1 Gbit/s", new BitRate(1, BitRateUnit.GigabitPerSecond).ToString());
            Assert.Equal("1 GB/s", new BitRate(1, BitRateUnit.GigabytePerSecond).ToString());
            Assert.Equal("1 Go/s", new BitRate(1, BitRateUnit.GigaoctetPerSecond).ToString());
            Assert.Equal("1 Kibit/s", new BitRate(1, BitRateUnit.KibibitPerSecond).ToString());
            Assert.Equal("1 KiB/s", new BitRate(1, BitRateUnit.KibibytePerSecond).ToString());
            Assert.Equal("1 Kio/s", new BitRate(1, BitRateUnit.KibioctetPerSecond).ToString());
            Assert.Equal("1 kbit/s", new BitRate(1, BitRateUnit.KilobitPerSecond).ToString());
            Assert.Equal("1 kB/s", new BitRate(1, BitRateUnit.KilobytePerSecond).ToString());
            Assert.Equal("1 ko/s", new BitRate(1, BitRateUnit.KilooctetPerSecond).ToString());
            Assert.Equal("1 Mibit/s", new BitRate(1, BitRateUnit.MebibitPerSecond).ToString());
            Assert.Equal("1 MiB/s", new BitRate(1, BitRateUnit.MebibytePerSecond).ToString());
            Assert.Equal("1 Mio/s", new BitRate(1, BitRateUnit.MebioctetPerSecond).ToString());
            Assert.Equal("1 Mbit/s", new BitRate(1, BitRateUnit.MegabitPerSecond).ToString());
            Assert.Equal("1 MB/s", new BitRate(1, BitRateUnit.MegabytePerSecond).ToString());
            Assert.Equal("1 Mo/s", new BitRate(1, BitRateUnit.MegaoctetPerSecond).ToString());
            Assert.Equal("1 o/s", new BitRate(1, BitRateUnit.OctetPerSecond).ToString());
            Assert.Equal("1 Pibit/s", new BitRate(1, BitRateUnit.PebibitPerSecond).ToString());
            Assert.Equal("1 PiB/s", new BitRate(1, BitRateUnit.PebibytePerSecond).ToString());
            Assert.Equal("1 Pio/s", new BitRate(1, BitRateUnit.PebioctetPerSecond).ToString());
            Assert.Equal("1 Pbit/s", new BitRate(1, BitRateUnit.PetabitPerSecond).ToString());
            Assert.Equal("1 PB/s", new BitRate(1, BitRateUnit.PetabytePerSecond).ToString());
            Assert.Equal("1 Po/s", new BitRate(1, BitRateUnit.PetaoctetPerSecond).ToString());
            Assert.Equal("1 Tibit/s", new BitRate(1, BitRateUnit.TebibitPerSecond).ToString());
            Assert.Equal("1 TiB/s", new BitRate(1, BitRateUnit.TebibytePerSecond).ToString());
            Assert.Equal("1 Tio/s", new BitRate(1, BitRateUnit.TebioctetPerSecond).ToString());
            Assert.Equal("1 Tbit/s", new BitRate(1, BitRateUnit.TerabitPerSecond).ToString());
            Assert.Equal("1 TB/s", new BitRate(1, BitRateUnit.TerabytePerSecond).ToString());
            Assert.Equal("1 To/s", new BitRate(1, BitRateUnit.TeraoctetPerSecond).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 bit/s", new BitRate(1, BitRateUnit.BitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 B/s", new BitRate(1, BitRateUnit.BytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Ebit/s", new BitRate(1, BitRateUnit.ExabitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 EB/s", new BitRate(1, BitRateUnit.ExabytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Eo/s", new BitRate(1, BitRateUnit.ExaoctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Eibit/s", new BitRate(1, BitRateUnit.ExbibitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 EiB/s", new BitRate(1, BitRateUnit.ExbibytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Eio/s", new BitRate(1, BitRateUnit.ExbioctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Gibit/s", new BitRate(1, BitRateUnit.GibibitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 GiB/s", new BitRate(1, BitRateUnit.GibibytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Gio/s", new BitRate(1, BitRateUnit.GibioctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Gbit/s", new BitRate(1, BitRateUnit.GigabitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 GB/s", new BitRate(1, BitRateUnit.GigabytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Go/s", new BitRate(1, BitRateUnit.GigaoctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Kibit/s", new BitRate(1, BitRateUnit.KibibitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 KiB/s", new BitRate(1, BitRateUnit.KibibytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Kio/s", new BitRate(1, BitRateUnit.KibioctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kbit/s", new BitRate(1, BitRateUnit.KilobitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 kB/s", new BitRate(1, BitRateUnit.KilobytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 ko/s", new BitRate(1, BitRateUnit.KilooctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Mibit/s", new BitRate(1, BitRateUnit.MebibitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 MiB/s", new BitRate(1, BitRateUnit.MebibytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Mio/s", new BitRate(1, BitRateUnit.MebioctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Mbit/s", new BitRate(1, BitRateUnit.MegabitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 MB/s", new BitRate(1, BitRateUnit.MegabytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Mo/s", new BitRate(1, BitRateUnit.MegaoctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 o/s", new BitRate(1, BitRateUnit.OctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Pibit/s", new BitRate(1, BitRateUnit.PebibitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 PiB/s", new BitRate(1, BitRateUnit.PebibytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Pio/s", new BitRate(1, BitRateUnit.PebioctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Pbit/s", new BitRate(1, BitRateUnit.PetabitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 PB/s", new BitRate(1, BitRateUnit.PetabytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Po/s", new BitRate(1, BitRateUnit.PetaoctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Tibit/s", new BitRate(1, BitRateUnit.TebibitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 TiB/s", new BitRate(1, BitRateUnit.TebibytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 Tio/s", new BitRate(1, BitRateUnit.TebioctetPerSecond).ToString(swedishCulture));
            Assert.Equal("1 Tbit/s", new BitRate(1, BitRateUnit.TerabitPerSecond).ToString(swedishCulture));
            Assert.Equal("1 TB/s", new BitRate(1, BitRateUnit.TerabytePerSecond).ToString(swedishCulture));
            Assert.Equal("1 To/s", new BitRate(1, BitRateUnit.TeraoctetPerSecond).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 bit/s", new BitRate(0.123456, BitRateUnit.BitPerSecond).ToString("s1"));
            Assert.Equal("0.12 bit/s", new BitRate(0.123456, BitRateUnit.BitPerSecond).ToString("s2"));
            Assert.Equal("0.123 bit/s", new BitRate(0.123456, BitRateUnit.BitPerSecond).ToString("s3"));
            Assert.Equal("0.1235 bit/s", new BitRate(0.123456, BitRateUnit.BitPerSecond).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 bit/s", new BitRate(0.123456, BitRateUnit.BitPerSecond).ToString("s1", culture));
            Assert.Equal("0.12 bit/s", new BitRate(0.123456, BitRateUnit.BitPerSecond).ToString("s2", culture));
            Assert.Equal("0.123 bit/s", new BitRate(0.123456, BitRateUnit.BitPerSecond).ToString("s3", culture));
            Assert.Equal("0.1235 bit/s", new BitRate(0.123456, BitRateUnit.BitPerSecond).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = BitRate.FromBitsPerSecond(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = BitRate.FromBitsPerSecond(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = BitRate.FromBitsPerSecond(1.0);
            var expected = Comparison.GetHashCode(typeof(BitRate), quantity.As(BitRate.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = BitRate.FromBitsPerSecond(value);
            Assert.Equal(BitRate.FromBitsPerSecond(-value), -quantity);
        }
    }
}
