//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Area.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class AreaTestsBase : QuantityTestsBase
    {
        protected abstract double AcresInOneSquareMeter { get; }
        protected abstract double HectaresInOneSquareMeter { get; }
        protected abstract double SquareCentimetersInOneSquareMeter { get; }
        protected abstract double SquareDecimetersInOneSquareMeter { get; }
        protected abstract double SquareFeetInOneSquareMeter { get; }
        protected abstract double SquareInchesInOneSquareMeter { get; }
        protected abstract double SquareKilometersInOneSquareMeter { get; }
        protected abstract double SquareMetersInOneSquareMeter { get; }
        protected abstract double SquareMicrometersInOneSquareMeter { get; }
        protected abstract double SquareMilesInOneSquareMeter { get; }
        protected abstract double SquareMillimetersInOneSquareMeter { get; }
        protected abstract double SquareNauticalMilesInOneSquareMeter { get; }
        protected abstract double SquareYardsInOneSquareMeter { get; }
        protected abstract double UsSurveySquareFeetInOneSquareMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double AcresTolerance { get { return 1e-5; } }
        protected virtual double HectaresTolerance { get { return 1e-5; } }
        protected virtual double SquareCentimetersTolerance { get { return 1e-5; } }
        protected virtual double SquareDecimetersTolerance { get { return 1e-5; } }
        protected virtual double SquareFeetTolerance { get { return 1e-5; } }
        protected virtual double SquareInchesTolerance { get { return 1e-5; } }
        protected virtual double SquareKilometersTolerance { get { return 1e-5; } }
        protected virtual double SquareMetersTolerance { get { return 1e-5; } }
        protected virtual double SquareMicrometersTolerance { get { return 1e-5; } }
        protected virtual double SquareMilesTolerance { get { return 1e-5; } }
        protected virtual double SquareMillimetersTolerance { get { return 1e-5; } }
        protected virtual double SquareNauticalMilesTolerance { get { return 1e-5; } }
        protected virtual double SquareYardsTolerance { get { return 1e-5; } }
        protected virtual double UsSurveySquareFeetTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(AreaUnit unit)
        {
            return unit switch
            {
                AreaUnit.Acre => (AcresInOneSquareMeter, AcresTolerance),
                AreaUnit.Hectare => (HectaresInOneSquareMeter, HectaresTolerance),
                AreaUnit.SquareCentimeter => (SquareCentimetersInOneSquareMeter, SquareCentimetersTolerance),
                AreaUnit.SquareDecimeter => (SquareDecimetersInOneSquareMeter, SquareDecimetersTolerance),
                AreaUnit.SquareFoot => (SquareFeetInOneSquareMeter, SquareFeetTolerance),
                AreaUnit.SquareInch => (SquareInchesInOneSquareMeter, SquareInchesTolerance),
                AreaUnit.SquareKilometer => (SquareKilometersInOneSquareMeter, SquareKilometersTolerance),
                AreaUnit.SquareMeter => (SquareMetersInOneSquareMeter, SquareMetersTolerance),
                AreaUnit.SquareMicrometer => (SquareMicrometersInOneSquareMeter, SquareMicrometersTolerance),
                AreaUnit.SquareMile => (SquareMilesInOneSquareMeter, SquareMilesTolerance),
                AreaUnit.SquareMillimeter => (SquareMillimetersInOneSquareMeter, SquareMillimetersTolerance),
                AreaUnit.SquareNauticalMile => (SquareNauticalMilesInOneSquareMeter, SquareNauticalMilesTolerance),
                AreaUnit.SquareYard => (SquareYardsInOneSquareMeter, SquareYardsTolerance),
                AreaUnit.UsSurveySquareFoot => (UsSurveySquareFeetInOneSquareMeter, UsSurveySquareFeetTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { AreaUnit.Acre },
            new object[] { AreaUnit.Hectare },
            new object[] { AreaUnit.SquareCentimeter },
            new object[] { AreaUnit.SquareDecimeter },
            new object[] { AreaUnit.SquareFoot },
            new object[] { AreaUnit.SquareInch },
            new object[] { AreaUnit.SquareKilometer },
            new object[] { AreaUnit.SquareMeter },
            new object[] { AreaUnit.SquareMicrometer },
            new object[] { AreaUnit.SquareMile },
            new object[] { AreaUnit.SquareMillimeter },
            new object[] { AreaUnit.SquareNauticalMile },
            new object[] { AreaUnit.SquareYard },
            new object[] { AreaUnit.UsSurveySquareFoot },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Area();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(AreaUnit.SquareMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Area(double.PositiveInfinity, AreaUnit.SquareMeter));
            var exception2 = Record.Exception(() => new Area(double.NegativeInfinity, AreaUnit.SquareMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Area(double.NaN, AreaUnit.SquareMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Area(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Area(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Area(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Area_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Area(1, AreaUnit.SquareMeter);

            QuantityInfo<AreaUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Area.Zero, quantityInfo.Zero);
            Assert.Equal("Area", quantityInfo.Name);

            var units = Enum.GetValues<AreaUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void SquareMeterToAreaUnits()
        {
            Area squaremeter = Area.FromSquareMeters(1);
            AssertEx.EqualTolerance(AcresInOneSquareMeter, squaremeter.Acres, AcresTolerance);
            AssertEx.EqualTolerance(HectaresInOneSquareMeter, squaremeter.Hectares, HectaresTolerance);
            AssertEx.EqualTolerance(SquareCentimetersInOneSquareMeter, squaremeter.SquareCentimeters, SquareCentimetersTolerance);
            AssertEx.EqualTolerance(SquareDecimetersInOneSquareMeter, squaremeter.SquareDecimeters, SquareDecimetersTolerance);
            AssertEx.EqualTolerance(SquareFeetInOneSquareMeter, squaremeter.SquareFeet, SquareFeetTolerance);
            AssertEx.EqualTolerance(SquareInchesInOneSquareMeter, squaremeter.SquareInches, SquareInchesTolerance);
            AssertEx.EqualTolerance(SquareKilometersInOneSquareMeter, squaremeter.SquareKilometers, SquareKilometersTolerance);
            AssertEx.EqualTolerance(SquareMetersInOneSquareMeter, squaremeter.SquareMeters, SquareMetersTolerance);
            AssertEx.EqualTolerance(SquareMicrometersInOneSquareMeter, squaremeter.SquareMicrometers, SquareMicrometersTolerance);
            AssertEx.EqualTolerance(SquareMilesInOneSquareMeter, squaremeter.SquareMiles, SquareMilesTolerance);
            AssertEx.EqualTolerance(SquareMillimetersInOneSquareMeter, squaremeter.SquareMillimeters, SquareMillimetersTolerance);
            AssertEx.EqualTolerance(SquareNauticalMilesInOneSquareMeter, squaremeter.SquareNauticalMiles, SquareNauticalMilesTolerance);
            AssertEx.EqualTolerance(SquareYardsInOneSquareMeter, squaremeter.SquareYards, SquareYardsTolerance);
            AssertEx.EqualTolerance(UsSurveySquareFeetInOneSquareMeter, squaremeter.UsSurveySquareFeet, UsSurveySquareFeetTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Area.From(1, AreaUnit.Acre);
            AssertEx.EqualTolerance(1, quantity00.Acres, AcresTolerance);
            Assert.Equal(AreaUnit.Acre, quantity00.Unit);

            var quantity01 = Area.From(1, AreaUnit.Hectare);
            AssertEx.EqualTolerance(1, quantity01.Hectares, HectaresTolerance);
            Assert.Equal(AreaUnit.Hectare, quantity01.Unit);

            var quantity02 = Area.From(1, AreaUnit.SquareCentimeter);
            AssertEx.EqualTolerance(1, quantity02.SquareCentimeters, SquareCentimetersTolerance);
            Assert.Equal(AreaUnit.SquareCentimeter, quantity02.Unit);

            var quantity03 = Area.From(1, AreaUnit.SquareDecimeter);
            AssertEx.EqualTolerance(1, quantity03.SquareDecimeters, SquareDecimetersTolerance);
            Assert.Equal(AreaUnit.SquareDecimeter, quantity03.Unit);

            var quantity04 = Area.From(1, AreaUnit.SquareFoot);
            AssertEx.EqualTolerance(1, quantity04.SquareFeet, SquareFeetTolerance);
            Assert.Equal(AreaUnit.SquareFoot, quantity04.Unit);

            var quantity05 = Area.From(1, AreaUnit.SquareInch);
            AssertEx.EqualTolerance(1, quantity05.SquareInches, SquareInchesTolerance);
            Assert.Equal(AreaUnit.SquareInch, quantity05.Unit);

            var quantity06 = Area.From(1, AreaUnit.SquareKilometer);
            AssertEx.EqualTolerance(1, quantity06.SquareKilometers, SquareKilometersTolerance);
            Assert.Equal(AreaUnit.SquareKilometer, quantity06.Unit);

            var quantity07 = Area.From(1, AreaUnit.SquareMeter);
            AssertEx.EqualTolerance(1, quantity07.SquareMeters, SquareMetersTolerance);
            Assert.Equal(AreaUnit.SquareMeter, quantity07.Unit);

            var quantity08 = Area.From(1, AreaUnit.SquareMicrometer);
            AssertEx.EqualTolerance(1, quantity08.SquareMicrometers, SquareMicrometersTolerance);
            Assert.Equal(AreaUnit.SquareMicrometer, quantity08.Unit);

            var quantity09 = Area.From(1, AreaUnit.SquareMile);
            AssertEx.EqualTolerance(1, quantity09.SquareMiles, SquareMilesTolerance);
            Assert.Equal(AreaUnit.SquareMile, quantity09.Unit);

            var quantity10 = Area.From(1, AreaUnit.SquareMillimeter);
            AssertEx.EqualTolerance(1, quantity10.SquareMillimeters, SquareMillimetersTolerance);
            Assert.Equal(AreaUnit.SquareMillimeter, quantity10.Unit);

            var quantity11 = Area.From(1, AreaUnit.SquareNauticalMile);
            AssertEx.EqualTolerance(1, quantity11.SquareNauticalMiles, SquareNauticalMilesTolerance);
            Assert.Equal(AreaUnit.SquareNauticalMile, quantity11.Unit);

            var quantity12 = Area.From(1, AreaUnit.SquareYard);
            AssertEx.EqualTolerance(1, quantity12.SquareYards, SquareYardsTolerance);
            Assert.Equal(AreaUnit.SquareYard, quantity12.Unit);

            var quantity13 = Area.From(1, AreaUnit.UsSurveySquareFoot);
            AssertEx.EqualTolerance(1, quantity13.UsSurveySquareFeet, UsSurveySquareFeetTolerance);
            Assert.Equal(AreaUnit.UsSurveySquareFoot, quantity13.Unit);

        }

        [Fact]
        public void FromSquareMeters_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Area.FromSquareMeters(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Area.FromSquareMeters(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromSquareMeters_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Area.FromSquareMeters(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var squaremeter = Area.FromSquareMeters(1);
            AssertEx.EqualTolerance(AcresInOneSquareMeter, squaremeter.As(AreaUnit.Acre), AcresTolerance);
            AssertEx.EqualTolerance(HectaresInOneSquareMeter, squaremeter.As(AreaUnit.Hectare), HectaresTolerance);
            AssertEx.EqualTolerance(SquareCentimetersInOneSquareMeter, squaremeter.As(AreaUnit.SquareCentimeter), SquareCentimetersTolerance);
            AssertEx.EqualTolerance(SquareDecimetersInOneSquareMeter, squaremeter.As(AreaUnit.SquareDecimeter), SquareDecimetersTolerance);
            AssertEx.EqualTolerance(SquareFeetInOneSquareMeter, squaremeter.As(AreaUnit.SquareFoot), SquareFeetTolerance);
            AssertEx.EqualTolerance(SquareInchesInOneSquareMeter, squaremeter.As(AreaUnit.SquareInch), SquareInchesTolerance);
            AssertEx.EqualTolerance(SquareKilometersInOneSquareMeter, squaremeter.As(AreaUnit.SquareKilometer), SquareKilometersTolerance);
            AssertEx.EqualTolerance(SquareMetersInOneSquareMeter, squaremeter.As(AreaUnit.SquareMeter), SquareMetersTolerance);
            AssertEx.EqualTolerance(SquareMicrometersInOneSquareMeter, squaremeter.As(AreaUnit.SquareMicrometer), SquareMicrometersTolerance);
            AssertEx.EqualTolerance(SquareMilesInOneSquareMeter, squaremeter.As(AreaUnit.SquareMile), SquareMilesTolerance);
            AssertEx.EqualTolerance(SquareMillimetersInOneSquareMeter, squaremeter.As(AreaUnit.SquareMillimeter), SquareMillimetersTolerance);
            AssertEx.EqualTolerance(SquareNauticalMilesInOneSquareMeter, squaremeter.As(AreaUnit.SquareNauticalMile), SquareNauticalMilesTolerance);
            AssertEx.EqualTolerance(SquareYardsInOneSquareMeter, squaremeter.As(AreaUnit.SquareYard), SquareYardsTolerance);
            AssertEx.EqualTolerance(UsSurveySquareFeetInOneSquareMeter, squaremeter.As(AreaUnit.UsSurveySquareFoot), UsSurveySquareFeetTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Area.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Area(value: 1, unit: Area.BaseUnit);
            var expectedValue = quantity.As(Area.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Area(value: 1, unit: Area.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Area(value: 1, unit: Area.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Area(value: 1, unit: Area.BaseUnit);
            var expectedUnit = Area.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Area quantityToConvert = quantity;

                Area convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<AreaUnit> quantityToConvert = quantity;

                IQuantity<AreaUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Area(value: 1, unit: Area.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<AreaUnit> quantity = new Area(value: 1, unit: Area.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Area(value: 1, unit: Area.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Area(value: 1, unit: Area.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<AreaUnit> quantity = new Area(value: 1, unit: Area.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Area(value: 1, unit: Area.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 ac", AreaUnit.Acre, 4.2)]
        [InlineData("en-US", "4.2 ha", AreaUnit.Hectare, 4.2)]
        [InlineData("en-US", "4.2 cm²", AreaUnit.SquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 dm²", AreaUnit.SquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 ft²", AreaUnit.SquareFoot, 4.2)]
        [InlineData("en-US", "4.2 in²", AreaUnit.SquareInch, 4.2)]
        [InlineData("en-US", "4.2 km²", AreaUnit.SquareKilometer, 4.2)]
        [InlineData("en-US", "4.2 m²", AreaUnit.SquareMeter, 4.2)]
        [InlineData("en-US", "4.2 µm²", AreaUnit.SquareMicrometer, 4.2)]
        [InlineData("en-US", "4.2 mi²", AreaUnit.SquareMile, 4.2)]
        [InlineData("en-US", "4.2 mm²", AreaUnit.SquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 nmi²", AreaUnit.SquareNauticalMile, 4.2)]
        [InlineData("en-US", "4.2 yd²", AreaUnit.SquareYard, 4.2)]
        [InlineData("en-US", "4.2 ft² (US)", AreaUnit.UsSurveySquareFoot, 4.2)]
        [InlineData("ru-RU", "4,2 акр", AreaUnit.Acre, 4.2)]
        [InlineData("ru-RU", "4,2 га", AreaUnit.Hectare, 4.2)]
        [InlineData("ru-RU", "4,2 см²", AreaUnit.SquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дм²", AreaUnit.SquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 фут²", AreaUnit.SquareFoot, 4.2)]
        [InlineData("ru-RU", "4,2 дюйм²", AreaUnit.SquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 км²", AreaUnit.SquareKilometer, 4.2)]
        [InlineData("ru-RU", "4,2 м²", AreaUnit.SquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкм²", AreaUnit.SquareMicrometer, 4.2)]
        [InlineData("ru-RU", "4,2 миля²", AreaUnit.SquareMile, 4.2)]
        [InlineData("ru-RU", "4,2 мм²", AreaUnit.SquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 морск.миля²", AreaUnit.SquareNauticalMile, 4.2)]
        [InlineData("ru-RU", "4,2 ярд²", AreaUnit.SquareYard, 4.2)]
        [InlineData("ru-RU", "4,2 фут² (US)", AreaUnit.UsSurveySquareFoot, 4.2)]
        [InlineData("zh-CN", "4.2 平方厘米", AreaUnit.SquareCentimeter, 4.2)]
        [InlineData("zh-CN", "4.2 平方分米", AreaUnit.SquareDecimeter, 4.2)]
        [InlineData("zh-CN", "4.2 平方英尺", AreaUnit.SquareFoot, 4.2)]
        [InlineData("zh-CN", "4.2 平方英寸", AreaUnit.SquareInch, 4.2)]
        [InlineData("zh-CN", "4.2 平方公里", AreaUnit.SquareKilometer, 4.2)]
        [InlineData("zh-CN", "4.2 平方米", AreaUnit.SquareMeter, 4.2)]
        [InlineData("zh-CN", "4.2 平方微米", AreaUnit.SquareMicrometer, 4.2)]
        [InlineData("zh-CN", "4.2 平方英里", AreaUnit.SquareMile, 4.2)]
        [InlineData("zh-CN", "4.2 平方毫米", AreaUnit.SquareMillimeter, 4.2)]
        [InlineData("zh-CN", "4.2 平方海里", AreaUnit.SquareNauticalMile, 4.2)]
        [InlineData("zh-CN", "4.2 平方码", AreaUnit.SquareYard, 4.2)]
        public void Parse(string culture, string quantityString, AreaUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Area.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("zh-CN", "1 英亩")] // [Acre, Hectare] 
        public void ParseWithAmbiguousAbbreviation(string culture, string quantityString)
        {
            Assert.Throws<AmbiguousUnitParseException>(() => Area.Parse(quantityString, CultureInfo.GetCultureInfo(culture)));
        }

        [Theory]
        [InlineData("en-US", "4.2 ac", AreaUnit.Acre, 4.2)]
        [InlineData("en-US", "4.2 ha", AreaUnit.Hectare, 4.2)]
        [InlineData("en-US", "4.2 cm²", AreaUnit.SquareCentimeter, 4.2)]
        [InlineData("en-US", "4.2 dm²", AreaUnit.SquareDecimeter, 4.2)]
        [InlineData("en-US", "4.2 ft²", AreaUnit.SquareFoot, 4.2)]
        [InlineData("en-US", "4.2 in²", AreaUnit.SquareInch, 4.2)]
        [InlineData("en-US", "4.2 km²", AreaUnit.SquareKilometer, 4.2)]
        [InlineData("en-US", "4.2 m²", AreaUnit.SquareMeter, 4.2)]
        [InlineData("en-US", "4.2 µm²", AreaUnit.SquareMicrometer, 4.2)]
        [InlineData("en-US", "4.2 mi²", AreaUnit.SquareMile, 4.2)]
        [InlineData("en-US", "4.2 mm²", AreaUnit.SquareMillimeter, 4.2)]
        [InlineData("en-US", "4.2 nmi²", AreaUnit.SquareNauticalMile, 4.2)]
        [InlineData("en-US", "4.2 yd²", AreaUnit.SquareYard, 4.2)]
        [InlineData("en-US", "4.2 ft² (US)", AreaUnit.UsSurveySquareFoot, 4.2)]
        [InlineData("ru-RU", "4,2 акр", AreaUnit.Acre, 4.2)]
        [InlineData("ru-RU", "4,2 га", AreaUnit.Hectare, 4.2)]
        [InlineData("ru-RU", "4,2 см²", AreaUnit.SquareCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 дм²", AreaUnit.SquareDecimeter, 4.2)]
        [InlineData("ru-RU", "4,2 фут²", AreaUnit.SquareFoot, 4.2)]
        [InlineData("ru-RU", "4,2 дюйм²", AreaUnit.SquareInch, 4.2)]
        [InlineData("ru-RU", "4,2 км²", AreaUnit.SquareKilometer, 4.2)]
        [InlineData("ru-RU", "4,2 м²", AreaUnit.SquareMeter, 4.2)]
        [InlineData("ru-RU", "4,2 мкм²", AreaUnit.SquareMicrometer, 4.2)]
        [InlineData("ru-RU", "4,2 миля²", AreaUnit.SquareMile, 4.2)]
        [InlineData("ru-RU", "4,2 мм²", AreaUnit.SquareMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 морск.миля²", AreaUnit.SquareNauticalMile, 4.2)]
        [InlineData("ru-RU", "4,2 ярд²", AreaUnit.SquareYard, 4.2)]
        [InlineData("ru-RU", "4,2 фут² (US)", AreaUnit.UsSurveySquareFoot, 4.2)]
        [InlineData("zh-CN", "4.2 平方厘米", AreaUnit.SquareCentimeter, 4.2)]
        [InlineData("zh-CN", "4.2 平方分米", AreaUnit.SquareDecimeter, 4.2)]
        [InlineData("zh-CN", "4.2 平方英尺", AreaUnit.SquareFoot, 4.2)]
        [InlineData("zh-CN", "4.2 平方英寸", AreaUnit.SquareInch, 4.2)]
        [InlineData("zh-CN", "4.2 平方公里", AreaUnit.SquareKilometer, 4.2)]
        [InlineData("zh-CN", "4.2 平方米", AreaUnit.SquareMeter, 4.2)]
        [InlineData("zh-CN", "4.2 平方微米", AreaUnit.SquareMicrometer, 4.2)]
        [InlineData("zh-CN", "4.2 平方英里", AreaUnit.SquareMile, 4.2)]
        [InlineData("zh-CN", "4.2 平方毫米", AreaUnit.SquareMillimeter, 4.2)]
        [InlineData("zh-CN", "4.2 平方海里", AreaUnit.SquareNauticalMile, 4.2)]
        [InlineData("zh-CN", "4.2 平方码", AreaUnit.SquareYard, 4.2)]
        public void TryParse(string culture, string quantityString, AreaUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Area.TryParse(quantityString, out Area parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("zh-CN", "1 英亩")] // [Acre, Hectare] 
        public void TryParseWithAmbiguousAbbreviation(string culture, string quantityString)
        {
            Assert.False(Area.TryParse(quantityString, CultureInfo.GetCultureInfo(culture), out _));
        }

        [Theory]
        [InlineData("ac", AreaUnit.Acre)]
        [InlineData("ha", AreaUnit.Hectare)]
        [InlineData("cm²", AreaUnit.SquareCentimeter)]
        [InlineData("dm²", AreaUnit.SquareDecimeter)]
        [InlineData("ft²", AreaUnit.SquareFoot)]
        [InlineData("in²", AreaUnit.SquareInch)]
        [InlineData("km²", AreaUnit.SquareKilometer)]
        [InlineData("m²", AreaUnit.SquareMeter)]
        [InlineData("µm²", AreaUnit.SquareMicrometer)]
        [InlineData("mi²", AreaUnit.SquareMile)]
        [InlineData("mm²", AreaUnit.SquareMillimeter)]
        [InlineData("nmi²", AreaUnit.SquareNauticalMile)]
        [InlineData("yd²", AreaUnit.SquareYard)]
        [InlineData("ft² (US)", AreaUnit.UsSurveySquareFoot)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AreaUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            AreaUnit parsedUnit = Area.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("ac", AreaUnit.Acre)]
        [InlineData("ha", AreaUnit.Hectare)]
        [InlineData("cm²", AreaUnit.SquareCentimeter)]
        [InlineData("dm²", AreaUnit.SquareDecimeter)]
        [InlineData("ft²", AreaUnit.SquareFoot)]
        [InlineData("in²", AreaUnit.SquareInch)]
        [InlineData("km²", AreaUnit.SquareKilometer)]
        [InlineData("m²", AreaUnit.SquareMeter)]
        [InlineData("µm²", AreaUnit.SquareMicrometer)]
        [InlineData("mi²", AreaUnit.SquareMile)]
        [InlineData("mm²", AreaUnit.SquareMillimeter)]
        [InlineData("nmi²", AreaUnit.SquareNauticalMile)]
        [InlineData("yd²", AreaUnit.SquareYard)]
        [InlineData("ft² (US)", AreaUnit.UsSurveySquareFoot)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AreaUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            AreaUnit parsedUnit = Area.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "ac", AreaUnit.Acre)]
        [InlineData("en-US", "ha", AreaUnit.Hectare)]
        [InlineData("en-US", "cm²", AreaUnit.SquareCentimeter)]
        [InlineData("en-US", "dm²", AreaUnit.SquareDecimeter)]
        [InlineData("en-US", "ft²", AreaUnit.SquareFoot)]
        [InlineData("en-US", "in²", AreaUnit.SquareInch)]
        [InlineData("en-US", "km²", AreaUnit.SquareKilometer)]
        [InlineData("en-US", "m²", AreaUnit.SquareMeter)]
        [InlineData("en-US", "µm²", AreaUnit.SquareMicrometer)]
        [InlineData("en-US", "mi²", AreaUnit.SquareMile)]
        [InlineData("en-US", "mm²", AreaUnit.SquareMillimeter)]
        [InlineData("en-US", "nmi²", AreaUnit.SquareNauticalMile)]
        [InlineData("en-US", "yd²", AreaUnit.SquareYard)]
        [InlineData("en-US", "ft² (US)", AreaUnit.UsSurveySquareFoot)]
        [InlineData("ru-RU", "акр", AreaUnit.Acre)]
        [InlineData("ru-RU", "га", AreaUnit.Hectare)]
        [InlineData("ru-RU", "см²", AreaUnit.SquareCentimeter)]
        [InlineData("ru-RU", "дм²", AreaUnit.SquareDecimeter)]
        [InlineData("ru-RU", "фут²", AreaUnit.SquareFoot)]
        [InlineData("ru-RU", "дюйм²", AreaUnit.SquareInch)]
        [InlineData("ru-RU", "км²", AreaUnit.SquareKilometer)]
        [InlineData("ru-RU", "м²", AreaUnit.SquareMeter)]
        [InlineData("ru-RU", "мкм²", AreaUnit.SquareMicrometer)]
        [InlineData("ru-RU", "миля²", AreaUnit.SquareMile)]
        [InlineData("ru-RU", "мм²", AreaUnit.SquareMillimeter)]
        [InlineData("ru-RU", "морск.миля²", AreaUnit.SquareNauticalMile)]
        [InlineData("ru-RU", "ярд²", AreaUnit.SquareYard)]
        [InlineData("ru-RU", "фут² (US)", AreaUnit.UsSurveySquareFoot)]
        [InlineData("zh-CN", "平方厘米", AreaUnit.SquareCentimeter)]
        [InlineData("zh-CN", "平方分米", AreaUnit.SquareDecimeter)]
        [InlineData("zh-CN", "平方英尺", AreaUnit.SquareFoot)]
        [InlineData("zh-CN", "平方英寸", AreaUnit.SquareInch)]
        [InlineData("zh-CN", "平方公里", AreaUnit.SquareKilometer)]
        [InlineData("zh-CN", "平方米", AreaUnit.SquareMeter)]
        [InlineData("zh-CN", "平方微米", AreaUnit.SquareMicrometer)]
        [InlineData("zh-CN", "平方英里", AreaUnit.SquareMile)]
        [InlineData("zh-CN", "平方毫米", AreaUnit.SquareMillimeter)]
        [InlineData("zh-CN", "平方海里", AreaUnit.SquareNauticalMile)]
        [InlineData("zh-CN", "平方码", AreaUnit.SquareYard)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, AreaUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            AreaUnit parsedUnit = Area.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "ac", AreaUnit.Acre)]
        [InlineData("en-US", "ha", AreaUnit.Hectare)]
        [InlineData("en-US", "cm²", AreaUnit.SquareCentimeter)]
        [InlineData("en-US", "dm²", AreaUnit.SquareDecimeter)]
        [InlineData("en-US", "ft²", AreaUnit.SquareFoot)]
        [InlineData("en-US", "in²", AreaUnit.SquareInch)]
        [InlineData("en-US", "km²", AreaUnit.SquareKilometer)]
        [InlineData("en-US", "m²", AreaUnit.SquareMeter)]
        [InlineData("en-US", "µm²", AreaUnit.SquareMicrometer)]
        [InlineData("en-US", "mi²", AreaUnit.SquareMile)]
        [InlineData("en-US", "mm²", AreaUnit.SquareMillimeter)]
        [InlineData("en-US", "nmi²", AreaUnit.SquareNauticalMile)]
        [InlineData("en-US", "yd²", AreaUnit.SquareYard)]
        [InlineData("en-US", "ft² (US)", AreaUnit.UsSurveySquareFoot)]
        [InlineData("ru-RU", "акр", AreaUnit.Acre)]
        [InlineData("ru-RU", "га", AreaUnit.Hectare)]
        [InlineData("ru-RU", "см²", AreaUnit.SquareCentimeter)]
        [InlineData("ru-RU", "дм²", AreaUnit.SquareDecimeter)]
        [InlineData("ru-RU", "фут²", AreaUnit.SquareFoot)]
        [InlineData("ru-RU", "дюйм²", AreaUnit.SquareInch)]
        [InlineData("ru-RU", "км²", AreaUnit.SquareKilometer)]
        [InlineData("ru-RU", "м²", AreaUnit.SquareMeter)]
        [InlineData("ru-RU", "мкм²", AreaUnit.SquareMicrometer)]
        [InlineData("ru-RU", "миля²", AreaUnit.SquareMile)]
        [InlineData("ru-RU", "мм²", AreaUnit.SquareMillimeter)]
        [InlineData("ru-RU", "морск.миля²", AreaUnit.SquareNauticalMile)]
        [InlineData("ru-RU", "ярд²", AreaUnit.SquareYard)]
        [InlineData("ru-RU", "фут² (US)", AreaUnit.UsSurveySquareFoot)]
        [InlineData("zh-CN", "平方厘米", AreaUnit.SquareCentimeter)]
        [InlineData("zh-CN", "平方分米", AreaUnit.SquareDecimeter)]
        [InlineData("zh-CN", "平方英尺", AreaUnit.SquareFoot)]
        [InlineData("zh-CN", "平方英寸", AreaUnit.SquareInch)]
        [InlineData("zh-CN", "平方公里", AreaUnit.SquareKilometer)]
        [InlineData("zh-CN", "平方米", AreaUnit.SquareMeter)]
        [InlineData("zh-CN", "平方微米", AreaUnit.SquareMicrometer)]
        [InlineData("zh-CN", "平方英里", AreaUnit.SquareMile)]
        [InlineData("zh-CN", "平方毫米", AreaUnit.SquareMillimeter)]
        [InlineData("zh-CN", "平方海里", AreaUnit.SquareNauticalMile)]
        [InlineData("zh-CN", "平方码", AreaUnit.SquareYard)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, AreaUnit expectedUnit)
        {
            AreaUnit parsedUnit = Area.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("zh-CN", "英亩")] // [Acre, Hectare]
        public void ParseUnitWithAmbiguousAbbreviation(string culture, string abbreviation)
        {
            Assert.Throws<AmbiguousUnitParseException>(() => Area.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture)));
        }

        [Theory]
        [InlineData("ac", AreaUnit.Acre)]
        [InlineData("ha", AreaUnit.Hectare)]
        [InlineData("cm²", AreaUnit.SquareCentimeter)]
        [InlineData("dm²", AreaUnit.SquareDecimeter)]
        [InlineData("ft²", AreaUnit.SquareFoot)]
        [InlineData("in²", AreaUnit.SquareInch)]
        [InlineData("km²", AreaUnit.SquareKilometer)]
        [InlineData("m²", AreaUnit.SquareMeter)]
        [InlineData("µm²", AreaUnit.SquareMicrometer)]
        [InlineData("mi²", AreaUnit.SquareMile)]
        [InlineData("mm²", AreaUnit.SquareMillimeter)]
        [InlineData("nmi²", AreaUnit.SquareNauticalMile)]
        [InlineData("yd²", AreaUnit.SquareYard)]
        [InlineData("ft² (US)", AreaUnit.UsSurveySquareFoot)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AreaUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Area.TryParseUnit(abbreviation, out AreaUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("ac", AreaUnit.Acre)]
        [InlineData("ha", AreaUnit.Hectare)]
        [InlineData("cm²", AreaUnit.SquareCentimeter)]
        [InlineData("dm²", AreaUnit.SquareDecimeter)]
        [InlineData("ft²", AreaUnit.SquareFoot)]
        [InlineData("in²", AreaUnit.SquareInch)]
        [InlineData("km²", AreaUnit.SquareKilometer)]
        [InlineData("m²", AreaUnit.SquareMeter)]
        [InlineData("µm²", AreaUnit.SquareMicrometer)]
        [InlineData("mi²", AreaUnit.SquareMile)]
        [InlineData("mm²", AreaUnit.SquareMillimeter)]
        [InlineData("nmi²", AreaUnit.SquareNauticalMile)]
        [InlineData("yd²", AreaUnit.SquareYard)]
        [InlineData("ft² (US)", AreaUnit.UsSurveySquareFoot)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AreaUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Area.TryParseUnit(abbreviation, out AreaUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "ac", AreaUnit.Acre)]
        [InlineData("en-US", "ha", AreaUnit.Hectare)]
        [InlineData("en-US", "cm²", AreaUnit.SquareCentimeter)]
        [InlineData("en-US", "dm²", AreaUnit.SquareDecimeter)]
        [InlineData("en-US", "ft²", AreaUnit.SquareFoot)]
        [InlineData("en-US", "in²", AreaUnit.SquareInch)]
        [InlineData("en-US", "km²", AreaUnit.SquareKilometer)]
        [InlineData("en-US", "m²", AreaUnit.SquareMeter)]
        [InlineData("en-US", "µm²", AreaUnit.SquareMicrometer)]
        [InlineData("en-US", "mi²", AreaUnit.SquareMile)]
        [InlineData("en-US", "mm²", AreaUnit.SquareMillimeter)]
        [InlineData("en-US", "nmi²", AreaUnit.SquareNauticalMile)]
        [InlineData("en-US", "yd²", AreaUnit.SquareYard)]
        [InlineData("en-US", "ft² (US)", AreaUnit.UsSurveySquareFoot)]
        [InlineData("ru-RU", "акр", AreaUnit.Acre)]
        [InlineData("ru-RU", "га", AreaUnit.Hectare)]
        [InlineData("ru-RU", "см²", AreaUnit.SquareCentimeter)]
        [InlineData("ru-RU", "дм²", AreaUnit.SquareDecimeter)]
        [InlineData("ru-RU", "фут²", AreaUnit.SquareFoot)]
        [InlineData("ru-RU", "дюйм²", AreaUnit.SquareInch)]
        [InlineData("ru-RU", "км²", AreaUnit.SquareKilometer)]
        [InlineData("ru-RU", "м²", AreaUnit.SquareMeter)]
        [InlineData("ru-RU", "мкм²", AreaUnit.SquareMicrometer)]
        [InlineData("ru-RU", "миля²", AreaUnit.SquareMile)]
        [InlineData("ru-RU", "мм²", AreaUnit.SquareMillimeter)]
        [InlineData("ru-RU", "морск.миля²", AreaUnit.SquareNauticalMile)]
        [InlineData("ru-RU", "ярд²", AreaUnit.SquareYard)]
        [InlineData("ru-RU", "фут² (US)", AreaUnit.UsSurveySquareFoot)]
        [InlineData("zh-CN", "平方厘米", AreaUnit.SquareCentimeter)]
        [InlineData("zh-CN", "平方分米", AreaUnit.SquareDecimeter)]
        [InlineData("zh-CN", "平方英尺", AreaUnit.SquareFoot)]
        [InlineData("zh-CN", "平方英寸", AreaUnit.SquareInch)]
        [InlineData("zh-CN", "平方公里", AreaUnit.SquareKilometer)]
        [InlineData("zh-CN", "平方米", AreaUnit.SquareMeter)]
        [InlineData("zh-CN", "平方微米", AreaUnit.SquareMicrometer)]
        [InlineData("zh-CN", "平方英里", AreaUnit.SquareMile)]
        [InlineData("zh-CN", "平方毫米", AreaUnit.SquareMillimeter)]
        [InlineData("zh-CN", "平方海里", AreaUnit.SquareNauticalMile)]
        [InlineData("zh-CN", "平方码", AreaUnit.SquareYard)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, AreaUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Area.TryParseUnit(abbreviation, out AreaUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "ac", AreaUnit.Acre)]
        [InlineData("en-US", "ha", AreaUnit.Hectare)]
        [InlineData("en-US", "cm²", AreaUnit.SquareCentimeter)]
        [InlineData("en-US", "dm²", AreaUnit.SquareDecimeter)]
        [InlineData("en-US", "ft²", AreaUnit.SquareFoot)]
        [InlineData("en-US", "in²", AreaUnit.SquareInch)]
        [InlineData("en-US", "km²", AreaUnit.SquareKilometer)]
        [InlineData("en-US", "m²", AreaUnit.SquareMeter)]
        [InlineData("en-US", "µm²", AreaUnit.SquareMicrometer)]
        [InlineData("en-US", "mi²", AreaUnit.SquareMile)]
        [InlineData("en-US", "mm²", AreaUnit.SquareMillimeter)]
        [InlineData("en-US", "nmi²", AreaUnit.SquareNauticalMile)]
        [InlineData("en-US", "yd²", AreaUnit.SquareYard)]
        [InlineData("en-US", "ft² (US)", AreaUnit.UsSurveySquareFoot)]
        [InlineData("ru-RU", "акр", AreaUnit.Acre)]
        [InlineData("ru-RU", "га", AreaUnit.Hectare)]
        [InlineData("ru-RU", "см²", AreaUnit.SquareCentimeter)]
        [InlineData("ru-RU", "дм²", AreaUnit.SquareDecimeter)]
        [InlineData("ru-RU", "фут²", AreaUnit.SquareFoot)]
        [InlineData("ru-RU", "дюйм²", AreaUnit.SquareInch)]
        [InlineData("ru-RU", "км²", AreaUnit.SquareKilometer)]
        [InlineData("ru-RU", "м²", AreaUnit.SquareMeter)]
        [InlineData("ru-RU", "мкм²", AreaUnit.SquareMicrometer)]
        [InlineData("ru-RU", "миля²", AreaUnit.SquareMile)]
        [InlineData("ru-RU", "мм²", AreaUnit.SquareMillimeter)]
        [InlineData("ru-RU", "морск.миля²", AreaUnit.SquareNauticalMile)]
        [InlineData("ru-RU", "ярд²", AreaUnit.SquareYard)]
        [InlineData("ru-RU", "фут² (US)", AreaUnit.UsSurveySquareFoot)]
        [InlineData("zh-CN", "平方厘米", AreaUnit.SquareCentimeter)]
        [InlineData("zh-CN", "平方分米", AreaUnit.SquareDecimeter)]
        [InlineData("zh-CN", "平方英尺", AreaUnit.SquareFoot)]
        [InlineData("zh-CN", "平方英寸", AreaUnit.SquareInch)]
        [InlineData("zh-CN", "平方公里", AreaUnit.SquareKilometer)]
        [InlineData("zh-CN", "平方米", AreaUnit.SquareMeter)]
        [InlineData("zh-CN", "平方微米", AreaUnit.SquareMicrometer)]
        [InlineData("zh-CN", "平方英里", AreaUnit.SquareMile)]
        [InlineData("zh-CN", "平方毫米", AreaUnit.SquareMillimeter)]
        [InlineData("zh-CN", "平方海里", AreaUnit.SquareNauticalMile)]
        [InlineData("zh-CN", "平方码", AreaUnit.SquareYard)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, AreaUnit expectedUnit)
        {
            Assert.True(Area.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out AreaUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("zh-CN", "英亩")] // [Acre, Hectare]
        public void TryParseUnitWithAmbiguousAbbreviation(string culture, string abbreviation)
        {
            Assert.False(Area.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out _));
        }

        [Theory]
        [InlineData("en-US", AreaUnit.Acre, "ac")]
        [InlineData("en-US", AreaUnit.Hectare, "ha")]
        [InlineData("en-US", AreaUnit.SquareCentimeter, "cm²")]
        [InlineData("en-US", AreaUnit.SquareDecimeter, "dm²")]
        [InlineData("en-US", AreaUnit.SquareFoot, "ft²")]
        [InlineData("en-US", AreaUnit.SquareInch, "in²")]
        [InlineData("en-US", AreaUnit.SquareKilometer, "km²")]
        [InlineData("en-US", AreaUnit.SquareMeter, "m²")]
        [InlineData("en-US", AreaUnit.SquareMicrometer, "µm²")]
        [InlineData("en-US", AreaUnit.SquareMile, "mi²")]
        [InlineData("en-US", AreaUnit.SquareMillimeter, "mm²")]
        [InlineData("en-US", AreaUnit.SquareNauticalMile, "nmi²")]
        [InlineData("en-US", AreaUnit.SquareYard, "yd²")]
        [InlineData("en-US", AreaUnit.UsSurveySquareFoot, "ft² (US)")]
        [InlineData("ru-RU", AreaUnit.Acre, "акр")]
        [InlineData("ru-RU", AreaUnit.Hectare, "га")]
        [InlineData("ru-RU", AreaUnit.SquareCentimeter, "см²")]
        [InlineData("ru-RU", AreaUnit.SquareDecimeter, "дм²")]
        [InlineData("ru-RU", AreaUnit.SquareFoot, "фут²")]
        [InlineData("ru-RU", AreaUnit.SquareInch, "дюйм²")]
        [InlineData("ru-RU", AreaUnit.SquareKilometer, "км²")]
        [InlineData("ru-RU", AreaUnit.SquareMeter, "м²")]
        [InlineData("ru-RU", AreaUnit.SquareMicrometer, "мкм²")]
        [InlineData("ru-RU", AreaUnit.SquareMile, "миля²")]
        [InlineData("ru-RU", AreaUnit.SquareMillimeter, "мм²")]
        [InlineData("ru-RU", AreaUnit.SquareNauticalMile, "морск.миля²")]
        [InlineData("ru-RU", AreaUnit.SquareYard, "ярд²")]
        [InlineData("ru-RU", AreaUnit.UsSurveySquareFoot, "фут² (US)")]
        [InlineData("zh-CN", AreaUnit.Acre, "英亩")]
        [InlineData("zh-CN", AreaUnit.Hectare, "英亩")]
        [InlineData("zh-CN", AreaUnit.SquareCentimeter, "平方厘米")]
        [InlineData("zh-CN", AreaUnit.SquareDecimeter, "平方分米")]
        [InlineData("zh-CN", AreaUnit.SquareFoot, "平方英尺")]
        [InlineData("zh-CN", AreaUnit.SquareInch, "平方英寸")]
        [InlineData("zh-CN", AreaUnit.SquareKilometer, "平方公里")]
        [InlineData("zh-CN", AreaUnit.SquareMeter, "平方米")]
        [InlineData("zh-CN", AreaUnit.SquareMicrometer, "平方微米")]
        [InlineData("zh-CN", AreaUnit.SquareMile, "平方英里")]
        [InlineData("zh-CN", AreaUnit.SquareMillimeter, "平方毫米")]
        [InlineData("zh-CN", AreaUnit.SquareNauticalMile, "平方海里")]
        [InlineData("zh-CN", AreaUnit.SquareYard, "平方码")]
        public void GetAbbreviationForCulture(string culture, AreaUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Area.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Area.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Area.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(AreaUnit unit)
        {
            var inBaseUnits = Area.From(1.0, Area.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(AreaUnit unit)
        {
            var quantity = Area.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(AreaUnit unit)
        {
            Assert.All(Area.Units.Where(u => u != Area.BaseUnit), fromUnit =>
            {
                var quantity = Area.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(AreaUnit unit)
        {
            var quantity = default(Area);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(AreaUnit unit)
        {
            var quantity = Area.From(3, Area.BaseUnit);
            Area expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<AreaUnit> quantityToConvert = quantity;
                IQuantity<AreaUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Area squaremeter = Area.FromSquareMeters(1);
            AssertEx.EqualTolerance(1, Area.FromAcres(squaremeter.Acres).SquareMeters, AcresTolerance);
            AssertEx.EqualTolerance(1, Area.FromHectares(squaremeter.Hectares).SquareMeters, HectaresTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareCentimeters(squaremeter.SquareCentimeters).SquareMeters, SquareCentimetersTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareDecimeters(squaremeter.SquareDecimeters).SquareMeters, SquareDecimetersTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareFeet(squaremeter.SquareFeet).SquareMeters, SquareFeetTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareInches(squaremeter.SquareInches).SquareMeters, SquareInchesTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareKilometers(squaremeter.SquareKilometers).SquareMeters, SquareKilometersTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareMeters(squaremeter.SquareMeters).SquareMeters, SquareMetersTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareMicrometers(squaremeter.SquareMicrometers).SquareMeters, SquareMicrometersTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareMiles(squaremeter.SquareMiles).SquareMeters, SquareMilesTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareMillimeters(squaremeter.SquareMillimeters).SquareMeters, SquareMillimetersTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareNauticalMiles(squaremeter.SquareNauticalMiles).SquareMeters, SquareNauticalMilesTolerance);
            AssertEx.EqualTolerance(1, Area.FromSquareYards(squaremeter.SquareYards).SquareMeters, SquareYardsTolerance);
            AssertEx.EqualTolerance(1, Area.FromUsSurveySquareFeet(squaremeter.UsSurveySquareFeet).SquareMeters, UsSurveySquareFeetTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Area v = Area.FromSquareMeters(1);
            AssertEx.EqualTolerance(-1, -v.SquareMeters, SquareMetersTolerance);
            AssertEx.EqualTolerance(2, (Area.FromSquareMeters(3)-v).SquareMeters, SquareMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).SquareMeters, SquareMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).SquareMeters, SquareMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).SquareMeters, SquareMetersTolerance);
            AssertEx.EqualTolerance(2, (Area.FromSquareMeters(10)/5).SquareMeters, SquareMetersTolerance);
            AssertEx.EqualTolerance(2, Area.FromSquareMeters(10)/Area.FromSquareMeters(5), SquareMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Area oneSquareMeter = Area.FromSquareMeters(1);
            Area twoSquareMeters = Area.FromSquareMeters(2);

            Assert.True(oneSquareMeter < twoSquareMeters);
            Assert.True(oneSquareMeter <= twoSquareMeters);
            Assert.True(twoSquareMeters > oneSquareMeter);
            Assert.True(twoSquareMeters >= oneSquareMeter);

            Assert.False(oneSquareMeter > twoSquareMeters);
            Assert.False(oneSquareMeter >= twoSquareMeters);
            Assert.False(twoSquareMeters < oneSquareMeter);
            Assert.False(twoSquareMeters <= oneSquareMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Area squaremeter = Area.FromSquareMeters(1);
            Assert.Equal(0, squaremeter.CompareTo(squaremeter));
            Assert.True(squaremeter.CompareTo(Area.Zero) > 0);
            Assert.True(Area.Zero.CompareTo(squaremeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Area squaremeter = Area.FromSquareMeters(1);
            Assert.Throws<ArgumentException>(() => squaremeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Area squaremeter = Area.FromSquareMeters(1);
            Assert.Throws<ArgumentNullException>(() => squaremeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, AreaUnit.SquareMeter, 1, AreaUnit.SquareMeter, true)]  // Same value and unit.
        [InlineData(1, AreaUnit.SquareMeter, 2, AreaUnit.SquareMeter, false)] // Different value.
        [InlineData(2, AreaUnit.SquareMeter, 1, AreaUnit.Acre, false)] // Different value and unit.
        [InlineData(1, AreaUnit.SquareMeter, 1, AreaUnit.Acre, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, AreaUnit unitA, double valueB, AreaUnit unitB, bool expectEqual)
        {
            var a = new Area(valueA, unitA);
            var b = new Area(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Area.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Area.FromSquareMeters(1);
            Assert.True(v.Equals(Area.FromSquareMeters(1), SquareMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Area.Zero, SquareMetersTolerance, ComparisonType.Relative));
            Assert.True(Area.FromSquareMeters(100).Equals(Area.FromSquareMeters(120), 0.3, ComparisonType.Relative));
            Assert.False(Area.FromSquareMeters(100).Equals(Area.FromSquareMeters(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Area.FromSquareMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Area.FromSquareMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Area squaremeter = Area.FromSquareMeters(1);
            Assert.False(squaremeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Area squaremeter = Area.FromSquareMeters(1);
            Assert.False(squaremeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<AreaUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Area.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 ac", new Area(1, AreaUnit.Acre).ToString());
            Assert.Equal("1 ha", new Area(1, AreaUnit.Hectare).ToString());
            Assert.Equal("1 cm²", new Area(1, AreaUnit.SquareCentimeter).ToString());
            Assert.Equal("1 dm²", new Area(1, AreaUnit.SquareDecimeter).ToString());
            Assert.Equal("1 ft²", new Area(1, AreaUnit.SquareFoot).ToString());
            Assert.Equal("1 in²", new Area(1, AreaUnit.SquareInch).ToString());
            Assert.Equal("1 km²", new Area(1, AreaUnit.SquareKilometer).ToString());
            Assert.Equal("1 m²", new Area(1, AreaUnit.SquareMeter).ToString());
            Assert.Equal("1 µm²", new Area(1, AreaUnit.SquareMicrometer).ToString());
            Assert.Equal("1 mi²", new Area(1, AreaUnit.SquareMile).ToString());
            Assert.Equal("1 mm²", new Area(1, AreaUnit.SquareMillimeter).ToString());
            Assert.Equal("1 nmi²", new Area(1, AreaUnit.SquareNauticalMile).ToString());
            Assert.Equal("1 yd²", new Area(1, AreaUnit.SquareYard).ToString());
            Assert.Equal("1 ft² (US)", new Area(1, AreaUnit.UsSurveySquareFoot).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 ac", new Area(1, AreaUnit.Acre).ToString(swedishCulture));
            Assert.Equal("1 ha", new Area(1, AreaUnit.Hectare).ToString(swedishCulture));
            Assert.Equal("1 cm²", new Area(1, AreaUnit.SquareCentimeter).ToString(swedishCulture));
            Assert.Equal("1 dm²", new Area(1, AreaUnit.SquareDecimeter).ToString(swedishCulture));
            Assert.Equal("1 ft²", new Area(1, AreaUnit.SquareFoot).ToString(swedishCulture));
            Assert.Equal("1 in²", new Area(1, AreaUnit.SquareInch).ToString(swedishCulture));
            Assert.Equal("1 km²", new Area(1, AreaUnit.SquareKilometer).ToString(swedishCulture));
            Assert.Equal("1 m²", new Area(1, AreaUnit.SquareMeter).ToString(swedishCulture));
            Assert.Equal("1 µm²", new Area(1, AreaUnit.SquareMicrometer).ToString(swedishCulture));
            Assert.Equal("1 mi²", new Area(1, AreaUnit.SquareMile).ToString(swedishCulture));
            Assert.Equal("1 mm²", new Area(1, AreaUnit.SquareMillimeter).ToString(swedishCulture));
            Assert.Equal("1 nmi²", new Area(1, AreaUnit.SquareNauticalMile).ToString(swedishCulture));
            Assert.Equal("1 yd²", new Area(1, AreaUnit.SquareYard).ToString(swedishCulture));
            Assert.Equal("1 ft² (US)", new Area(1, AreaUnit.UsSurveySquareFoot).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 m²", new Area(0.123456, AreaUnit.SquareMeter).ToString("s1"));
            Assert.Equal("0.12 m²", new Area(0.123456, AreaUnit.SquareMeter).ToString("s2"));
            Assert.Equal("0.123 m²", new Area(0.123456, AreaUnit.SquareMeter).ToString("s3"));
            Assert.Equal("0.1235 m²", new Area(0.123456, AreaUnit.SquareMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 m²", new Area(0.123456, AreaUnit.SquareMeter).ToString("s1", culture));
            Assert.Equal("0.12 m²", new Area(0.123456, AreaUnit.SquareMeter).ToString("s2", culture));
            Assert.Equal("0.123 m²", new Area(0.123456, AreaUnit.SquareMeter).ToString("s3", culture));
            Assert.Equal("0.1235 m²", new Area(0.123456, AreaUnit.SquareMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Area.FromSquareMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Area.FromSquareMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Area.FromSquareMeters(1.0);
            Assert.Equal(new {Area.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Area.FromSquareMeters(value);
            Assert.Equal(Area.FromSquareMeters(-value), -quantity);
        }
    }
}
