//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToIrradiance
{
    /// <summary>
    /// A number to Irradiance Extensions
    /// </summary>
    public static class NumberToIrradianceExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareCentimeter(QuantityValue)" />
            public Irradiance KilowattsPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Irradiance.FromKilowattsPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromKilowattsPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromKilowattsPerSquareMeter(QuantityValue)" />
            public Irradiance KilowattsPerSquareMeter
#if NET7_0_OR_GREATER
                => Irradiance.FromKilowattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromKilowattsPerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareCentimeter(QuantityValue)" />
            public Irradiance MegawattsPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Irradiance.FromMegawattsPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromMegawattsPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromMegawattsPerSquareMeter(QuantityValue)" />
            public Irradiance MegawattsPerSquareMeter
#if NET7_0_OR_GREATER
                => Irradiance.FromMegawattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromMegawattsPerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareCentimeter(QuantityValue)" />
            public Irradiance MicrowattsPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Irradiance.FromMicrowattsPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromMicrowattsPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromMicrowattsPerSquareMeter(QuantityValue)" />
            public Irradiance MicrowattsPerSquareMeter
#if NET7_0_OR_GREATER
                => Irradiance.FromMicrowattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromMicrowattsPerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareCentimeter(QuantityValue)" />
            public Irradiance MilliwattsPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Irradiance.FromMilliwattsPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromMilliwattsPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromMilliwattsPerSquareMeter(QuantityValue)" />
            public Irradiance MilliwattsPerSquareMeter
#if NET7_0_OR_GREATER
                => Irradiance.FromMilliwattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromMilliwattsPerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareCentimeter(QuantityValue)" />
            public Irradiance NanowattsPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Irradiance.FromNanowattsPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromNanowattsPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromNanowattsPerSquareMeter(QuantityValue)" />
            public Irradiance NanowattsPerSquareMeter
#if NET7_0_OR_GREATER
                => Irradiance.FromNanowattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromNanowattsPerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareCentimeter(QuantityValue)" />
            public Irradiance PicowattsPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Irradiance.FromPicowattsPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromPicowattsPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromPicowattsPerSquareMeter(QuantityValue)" />
            public Irradiance PicowattsPerSquareMeter
#if NET7_0_OR_GREATER
                => Irradiance.FromPicowattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromPicowattsPerSquareMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromWattsPerSquareCentimeter(QuantityValue)" />
            public Irradiance WattsPerSquareCentimeter
#if NET7_0_OR_GREATER
                => Irradiance.FromWattsPerSquareCentimeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromWattsPerSquareCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Irradiance.FromWattsPerSquareMeter(QuantityValue)" />
            public Irradiance WattsPerSquareMeter
#if NET7_0_OR_GREATER
                => Irradiance.FromWattsPerSquareMeter(QuantityValue.CreateChecked(value));
#else
                => Irradiance.FromWattsPerSquareMeter(value.ToQuantityValue());
#endif

        }
    }
}
