//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToReciprocalLength;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToReciprocalLengthExtensionsTests
    {
        [Fact]
        public void NumberToInverseCentimetersTest() =>
            Assert.Equal(ReciprocalLength.FromInverseCentimeters(2), 2.InverseCentimeters);

        [Fact]
        public void NumberToInverseFeetTest() =>
            Assert.Equal(ReciprocalLength.FromInverseFeet(2), 2.InverseFeet);

        [Fact]
        public void NumberToInverseInchesTest() =>
            Assert.Equal(ReciprocalLength.FromInverseInches(2), 2.InverseInches);

        [Fact]
        public void NumberToInverseMetersTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMeters(2), 2.InverseMeters);

        [Fact]
        public void NumberToInverseMicroinchesTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMicroinches(2), 2.InverseMicroinches);

        [Fact]
        public void NumberToInverseMilsTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMils(2), 2.InverseMils);

        [Fact]
        public void NumberToInverseMilesTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMiles(2), 2.InverseMiles);

        [Fact]
        public void NumberToInverseMillimetersTest() =>
            Assert.Equal(ReciprocalLength.FromInverseMillimeters(2), 2.InverseMillimeters);

        [Fact]
        public void NumberToInverseUsSurveyFeetTest() =>
            Assert.Equal(ReciprocalLength.FromInverseUsSurveyFeet(2), 2.InverseUsSurveyFeet);

        [Fact]
        public void NumberToInverseYardsTest() =>
            Assert.Equal(ReciprocalLength.FromInverseYards(2), 2.InverseYards);

    }
}
