//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Torque.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class TorqueTestsBase : QuantityTestsBase
    {
        protected abstract double GramForceCentimetersInOneNewtonMeter { get; }
        protected abstract double GramForceMetersInOneNewtonMeter { get; }
        protected abstract double GramForceMillimetersInOneNewtonMeter { get; }
        protected abstract double KilogramForceCentimetersInOneNewtonMeter { get; }
        protected abstract double KilogramForceMetersInOneNewtonMeter { get; }
        protected abstract double KilogramForceMillimetersInOneNewtonMeter { get; }
        protected abstract double KilonewtonCentimetersInOneNewtonMeter { get; }
        protected abstract double KilonewtonMetersInOneNewtonMeter { get; }
        protected abstract double KilonewtonMillimetersInOneNewtonMeter { get; }
        protected abstract double KilopoundForceFeetInOneNewtonMeter { get; }
        protected abstract double KilopoundForceInchesInOneNewtonMeter { get; }
        protected abstract double MeganewtonCentimetersInOneNewtonMeter { get; }
        protected abstract double MeganewtonMetersInOneNewtonMeter { get; }
        protected abstract double MeganewtonMillimetersInOneNewtonMeter { get; }
        protected abstract double MegapoundForceFeetInOneNewtonMeter { get; }
        protected abstract double MegapoundForceInchesInOneNewtonMeter { get; }
        protected abstract double NewtonCentimetersInOneNewtonMeter { get; }
        protected abstract double NewtonMetersInOneNewtonMeter { get; }
        protected abstract double NewtonMillimetersInOneNewtonMeter { get; }
        protected abstract double PoundalFeetInOneNewtonMeter { get; }
        protected abstract double PoundForceFeetInOneNewtonMeter { get; }
        protected abstract double PoundForceInchesInOneNewtonMeter { get; }
        protected abstract double TonneForceCentimetersInOneNewtonMeter { get; }
        protected abstract double TonneForceMetersInOneNewtonMeter { get; }
        protected abstract double TonneForceMillimetersInOneNewtonMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GramForceCentimetersTolerance { get { return 1e-5; } }
        protected virtual double GramForceMetersTolerance { get { return 1e-5; } }
        protected virtual double GramForceMillimetersTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceCentimetersTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMetersTolerance { get { return 1e-5; } }
        protected virtual double KilogramForceMillimetersTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonCentimetersTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMetersTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonMillimetersTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceFeetTolerance { get { return 1e-5; } }
        protected virtual double KilopoundForceInchesTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonCentimetersTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMetersTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonMillimetersTolerance { get { return 1e-5; } }
        protected virtual double MegapoundForceFeetTolerance { get { return 1e-5; } }
        protected virtual double MegapoundForceInchesTolerance { get { return 1e-5; } }
        protected virtual double NewtonCentimetersTolerance { get { return 1e-5; } }
        protected virtual double NewtonMetersTolerance { get { return 1e-5; } }
        protected virtual double NewtonMillimetersTolerance { get { return 1e-5; } }
        protected virtual double PoundalFeetTolerance { get { return 1e-5; } }
        protected virtual double PoundForceFeetTolerance { get { return 1e-5; } }
        protected virtual double PoundForceInchesTolerance { get { return 1e-5; } }
        protected virtual double TonneForceCentimetersTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMetersTolerance { get { return 1e-5; } }
        protected virtual double TonneForceMillimetersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(TorqueUnit unit)
        {
            return unit switch
            {
                TorqueUnit.GramForceCentimeter => (GramForceCentimetersInOneNewtonMeter, GramForceCentimetersTolerance),
                TorqueUnit.GramForceMeter => (GramForceMetersInOneNewtonMeter, GramForceMetersTolerance),
                TorqueUnit.GramForceMillimeter => (GramForceMillimetersInOneNewtonMeter, GramForceMillimetersTolerance),
                TorqueUnit.KilogramForceCentimeter => (KilogramForceCentimetersInOneNewtonMeter, KilogramForceCentimetersTolerance),
                TorqueUnit.KilogramForceMeter => (KilogramForceMetersInOneNewtonMeter, KilogramForceMetersTolerance),
                TorqueUnit.KilogramForceMillimeter => (KilogramForceMillimetersInOneNewtonMeter, KilogramForceMillimetersTolerance),
                TorqueUnit.KilonewtonCentimeter => (KilonewtonCentimetersInOneNewtonMeter, KilonewtonCentimetersTolerance),
                TorqueUnit.KilonewtonMeter => (KilonewtonMetersInOneNewtonMeter, KilonewtonMetersTolerance),
                TorqueUnit.KilonewtonMillimeter => (KilonewtonMillimetersInOneNewtonMeter, KilonewtonMillimetersTolerance),
                TorqueUnit.KilopoundForceFoot => (KilopoundForceFeetInOneNewtonMeter, KilopoundForceFeetTolerance),
                TorqueUnit.KilopoundForceInch => (KilopoundForceInchesInOneNewtonMeter, KilopoundForceInchesTolerance),
                TorqueUnit.MeganewtonCentimeter => (MeganewtonCentimetersInOneNewtonMeter, MeganewtonCentimetersTolerance),
                TorqueUnit.MeganewtonMeter => (MeganewtonMetersInOneNewtonMeter, MeganewtonMetersTolerance),
                TorqueUnit.MeganewtonMillimeter => (MeganewtonMillimetersInOneNewtonMeter, MeganewtonMillimetersTolerance),
                TorqueUnit.MegapoundForceFoot => (MegapoundForceFeetInOneNewtonMeter, MegapoundForceFeetTolerance),
                TorqueUnit.MegapoundForceInch => (MegapoundForceInchesInOneNewtonMeter, MegapoundForceInchesTolerance),
                TorqueUnit.NewtonCentimeter => (NewtonCentimetersInOneNewtonMeter, NewtonCentimetersTolerance),
                TorqueUnit.NewtonMeter => (NewtonMetersInOneNewtonMeter, NewtonMetersTolerance),
                TorqueUnit.NewtonMillimeter => (NewtonMillimetersInOneNewtonMeter, NewtonMillimetersTolerance),
                TorqueUnit.PoundalFoot => (PoundalFeetInOneNewtonMeter, PoundalFeetTolerance),
                TorqueUnit.PoundForceFoot => (PoundForceFeetInOneNewtonMeter, PoundForceFeetTolerance),
                TorqueUnit.PoundForceInch => (PoundForceInchesInOneNewtonMeter, PoundForceInchesTolerance),
                TorqueUnit.TonneForceCentimeter => (TonneForceCentimetersInOneNewtonMeter, TonneForceCentimetersTolerance),
                TorqueUnit.TonneForceMeter => (TonneForceMetersInOneNewtonMeter, TonneForceMetersTolerance),
                TorqueUnit.TonneForceMillimeter => (TonneForceMillimetersInOneNewtonMeter, TonneForceMillimetersTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { TorqueUnit.GramForceCentimeter },
            new object[] { TorqueUnit.GramForceMeter },
            new object[] { TorqueUnit.GramForceMillimeter },
            new object[] { TorqueUnit.KilogramForceCentimeter },
            new object[] { TorqueUnit.KilogramForceMeter },
            new object[] { TorqueUnit.KilogramForceMillimeter },
            new object[] { TorqueUnit.KilonewtonCentimeter },
            new object[] { TorqueUnit.KilonewtonMeter },
            new object[] { TorqueUnit.KilonewtonMillimeter },
            new object[] { TorqueUnit.KilopoundForceFoot },
            new object[] { TorqueUnit.KilopoundForceInch },
            new object[] { TorqueUnit.MeganewtonCentimeter },
            new object[] { TorqueUnit.MeganewtonMeter },
            new object[] { TorqueUnit.MeganewtonMillimeter },
            new object[] { TorqueUnit.MegapoundForceFoot },
            new object[] { TorqueUnit.MegapoundForceInch },
            new object[] { TorqueUnit.NewtonCentimeter },
            new object[] { TorqueUnit.NewtonMeter },
            new object[] { TorqueUnit.NewtonMillimeter },
            new object[] { TorqueUnit.PoundalFoot },
            new object[] { TorqueUnit.PoundForceFoot },
            new object[] { TorqueUnit.PoundForceInch },
            new object[] { TorqueUnit.TonneForceCentimeter },
            new object[] { TorqueUnit.TonneForceMeter },
            new object[] { TorqueUnit.TonneForceMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Torque();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(TorqueUnit.NewtonMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Torque(double.PositiveInfinity, TorqueUnit.NewtonMeter));
            var exception2 = Record.Exception(() => new Torque(double.NegativeInfinity, TorqueUnit.NewtonMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Torque(double.NaN, TorqueUnit.NewtonMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Torque(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Torque(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo.UnitInfos.First(x => x.Value == quantity.Unit).BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Torque(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Torque_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Torque(1, TorqueUnit.NewtonMeter);

            QuantityInfo<TorqueUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Torque.Zero, quantityInfo.Zero);
            Assert.Equal("Torque", quantityInfo.Name);

            var units = Enum.GetValues<TorqueUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void NewtonMeterToTorqueUnits()
        {
            Torque newtonmeter = Torque.FromNewtonMeters(1);
            AssertEx.EqualTolerance(GramForceCentimetersInOneNewtonMeter, newtonmeter.GramForceCentimeters, GramForceCentimetersTolerance);
            AssertEx.EqualTolerance(GramForceMetersInOneNewtonMeter, newtonmeter.GramForceMeters, GramForceMetersTolerance);
            AssertEx.EqualTolerance(GramForceMillimetersInOneNewtonMeter, newtonmeter.GramForceMillimeters, GramForceMillimetersTolerance);
            AssertEx.EqualTolerance(KilogramForceCentimetersInOneNewtonMeter, newtonmeter.KilogramForceCentimeters, KilogramForceCentimetersTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersInOneNewtonMeter, newtonmeter.KilogramForceMeters, KilogramForceMetersTolerance);
            AssertEx.EqualTolerance(KilogramForceMillimetersInOneNewtonMeter, newtonmeter.KilogramForceMillimeters, KilogramForceMillimetersTolerance);
            AssertEx.EqualTolerance(KilonewtonCentimetersInOneNewtonMeter, newtonmeter.KilonewtonCentimeters, KilonewtonCentimetersTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersInOneNewtonMeter, newtonmeter.KilonewtonMeters, KilonewtonMetersTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimetersInOneNewtonMeter, newtonmeter.KilonewtonMillimeters, KilonewtonMillimetersTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetInOneNewtonMeter, newtonmeter.KilopoundForceFeet, KilopoundForceFeetTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesInOneNewtonMeter, newtonmeter.KilopoundForceInches, KilopoundForceInchesTolerance);
            AssertEx.EqualTolerance(MeganewtonCentimetersInOneNewtonMeter, newtonmeter.MeganewtonCentimeters, MeganewtonCentimetersTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersInOneNewtonMeter, newtonmeter.MeganewtonMeters, MeganewtonMetersTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimetersInOneNewtonMeter, newtonmeter.MeganewtonMillimeters, MeganewtonMillimetersTolerance);
            AssertEx.EqualTolerance(MegapoundForceFeetInOneNewtonMeter, newtonmeter.MegapoundForceFeet, MegapoundForceFeetTolerance);
            AssertEx.EqualTolerance(MegapoundForceInchesInOneNewtonMeter, newtonmeter.MegapoundForceInches, MegapoundForceInchesTolerance);
            AssertEx.EqualTolerance(NewtonCentimetersInOneNewtonMeter, newtonmeter.NewtonCentimeters, NewtonCentimetersTolerance);
            AssertEx.EqualTolerance(NewtonMetersInOneNewtonMeter, newtonmeter.NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(NewtonMillimetersInOneNewtonMeter, newtonmeter.NewtonMillimeters, NewtonMillimetersTolerance);
            AssertEx.EqualTolerance(PoundalFeetInOneNewtonMeter, newtonmeter.PoundalFeet, PoundalFeetTolerance);
            AssertEx.EqualTolerance(PoundForceFeetInOneNewtonMeter, newtonmeter.PoundForceFeet, PoundForceFeetTolerance);
            AssertEx.EqualTolerance(PoundForceInchesInOneNewtonMeter, newtonmeter.PoundForceInches, PoundForceInchesTolerance);
            AssertEx.EqualTolerance(TonneForceCentimetersInOneNewtonMeter, newtonmeter.TonneForceCentimeters, TonneForceCentimetersTolerance);
            AssertEx.EqualTolerance(TonneForceMetersInOneNewtonMeter, newtonmeter.TonneForceMeters, TonneForceMetersTolerance);
            AssertEx.EqualTolerance(TonneForceMillimetersInOneNewtonMeter, newtonmeter.TonneForceMillimeters, TonneForceMillimetersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<TorqueUnit>(), unit =>
            {
                var quantity = Torque.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromNewtonMeters_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Torque.FromNewtonMeters(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Torque.FromNewtonMeters(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromNewtonMeters_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Torque.FromNewtonMeters(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var newtonmeter = Torque.FromNewtonMeters(1);
            AssertEx.EqualTolerance(GramForceCentimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.GramForceCentimeter), GramForceCentimetersTolerance);
            AssertEx.EqualTolerance(GramForceMetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.GramForceMeter), GramForceMetersTolerance);
            AssertEx.EqualTolerance(GramForceMillimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.GramForceMillimeter), GramForceMillimetersTolerance);
            AssertEx.EqualTolerance(KilogramForceCentimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.KilogramForceCentimeter), KilogramForceCentimetersTolerance);
            AssertEx.EqualTolerance(KilogramForceMetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.KilogramForceMeter), KilogramForceMetersTolerance);
            AssertEx.EqualTolerance(KilogramForceMillimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.KilogramForceMillimeter), KilogramForceMillimetersTolerance);
            AssertEx.EqualTolerance(KilonewtonCentimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.KilonewtonCentimeter), KilonewtonCentimetersTolerance);
            AssertEx.EqualTolerance(KilonewtonMetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.KilonewtonMeter), KilonewtonMetersTolerance);
            AssertEx.EqualTolerance(KilonewtonMillimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.KilonewtonMillimeter), KilonewtonMillimetersTolerance);
            AssertEx.EqualTolerance(KilopoundForceFeetInOneNewtonMeter, newtonmeter.As(TorqueUnit.KilopoundForceFoot), KilopoundForceFeetTolerance);
            AssertEx.EqualTolerance(KilopoundForceInchesInOneNewtonMeter, newtonmeter.As(TorqueUnit.KilopoundForceInch), KilopoundForceInchesTolerance);
            AssertEx.EqualTolerance(MeganewtonCentimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.MeganewtonCentimeter), MeganewtonCentimetersTolerance);
            AssertEx.EqualTolerance(MeganewtonMetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.MeganewtonMeter), MeganewtonMetersTolerance);
            AssertEx.EqualTolerance(MeganewtonMillimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.MeganewtonMillimeter), MeganewtonMillimetersTolerance);
            AssertEx.EqualTolerance(MegapoundForceFeetInOneNewtonMeter, newtonmeter.As(TorqueUnit.MegapoundForceFoot), MegapoundForceFeetTolerance);
            AssertEx.EqualTolerance(MegapoundForceInchesInOneNewtonMeter, newtonmeter.As(TorqueUnit.MegapoundForceInch), MegapoundForceInchesTolerance);
            AssertEx.EqualTolerance(NewtonCentimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.NewtonCentimeter), NewtonCentimetersTolerance);
            AssertEx.EqualTolerance(NewtonMetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.NewtonMeter), NewtonMetersTolerance);
            AssertEx.EqualTolerance(NewtonMillimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.NewtonMillimeter), NewtonMillimetersTolerance);
            AssertEx.EqualTolerance(PoundalFeetInOneNewtonMeter, newtonmeter.As(TorqueUnit.PoundalFoot), PoundalFeetTolerance);
            AssertEx.EqualTolerance(PoundForceFeetInOneNewtonMeter, newtonmeter.As(TorqueUnit.PoundForceFoot), PoundForceFeetTolerance);
            AssertEx.EqualTolerance(PoundForceInchesInOneNewtonMeter, newtonmeter.As(TorqueUnit.PoundForceInch), PoundForceInchesTolerance);
            AssertEx.EqualTolerance(TonneForceCentimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.TonneForceCentimeter), TonneForceCentimetersTolerance);
            AssertEx.EqualTolerance(TonneForceMetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.TonneForceMeter), TonneForceMetersTolerance);
            AssertEx.EqualTolerance(TonneForceMillimetersInOneNewtonMeter, newtonmeter.As(TorqueUnit.TonneForceMillimeter), TonneForceMillimetersTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Torque.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Torque(value: 1, unit: Torque.BaseUnit);
            var expectedValue = quantity.As(Torque.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Torque(value: 1, unit: Torque.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Torque(value: 1, unit: Torque.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Torque(value: 1, unit: Torque.BaseUnit);
            var expectedUnit = Torque.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Torque quantityToConvert = quantity;

                Torque convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<TorqueUnit> quantityToConvert = quantity;

                IQuantity<TorqueUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Torque(value: 1, unit: Torque.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<TorqueUnit> quantity = new Torque(value: 1, unit: Torque.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Torque(value: 1, unit: Torque.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Torque(value: 1, unit: Torque.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<TorqueUnit> quantity = new Torque(value: 1, unit: Torque.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Torque(value: 1, unit: Torque.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Fact]
        public void Parse()
        {
            try
            {
                var parsed = Torque.Parse("1 gf·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramForceCentimeters, GramForceCentimetersTolerance);
                Assert.Equal(TorqueUnit.GramForceCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 gf·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramForceMeters, GramForceMetersTolerance);
                Assert.Equal(TorqueUnit.GramForceMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 gf·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.GramForceMillimeters, GramForceMillimetersTolerance);
                Assert.Equal(TorqueUnit.GramForceMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 kgf·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceCentimeters, KilogramForceCentimetersTolerance);
                Assert.Equal(TorqueUnit.KilogramForceCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 kgf·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMeters, KilogramForceMetersTolerance);
                Assert.Equal(TorqueUnit.KilogramForceMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 kgf·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMillimeters, KilogramForceMillimetersTolerance);
                Assert.Equal(TorqueUnit.KilogramForceMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 kN·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonCentimeters, KilonewtonCentimetersTolerance);
                Assert.Equal(TorqueUnit.KilonewtonCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 kN·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMeters, KilonewtonMetersTolerance);
                Assert.Equal(TorqueUnit.KilonewtonMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 кН·м", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMeters, KilonewtonMetersTolerance);
                Assert.Equal(TorqueUnit.KilonewtonMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 kN·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMillimeters, KilonewtonMillimetersTolerance);
                Assert.Equal(TorqueUnit.KilonewtonMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 kipf·ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeet, KilopoundForceFeetTolerance);
                Assert.Equal(TorqueUnit.KilopoundForceFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 kipf·in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInches, KilopoundForceInchesTolerance);
                Assert.Equal(TorqueUnit.KilopoundForceInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 MN·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonCentimeters, MeganewtonCentimetersTolerance);
                Assert.Equal(TorqueUnit.MeganewtonCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 MN·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMeters, MeganewtonMetersTolerance);
                Assert.Equal(TorqueUnit.MeganewtonMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 МН·м", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMeters, MeganewtonMetersTolerance);
                Assert.Equal(TorqueUnit.MeganewtonMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 MN·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMillimeters, MeganewtonMillimetersTolerance);
                Assert.Equal(TorqueUnit.MeganewtonMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 Mlbf·ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceFeet, MegapoundForceFeetTolerance);
                Assert.Equal(TorqueUnit.MegapoundForceFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 Mlbf·in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceInches, MegapoundForceInchesTolerance);
                Assert.Equal(TorqueUnit.MegapoundForceInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 N·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonCentimeters, NewtonCentimetersTolerance);
                Assert.Equal(TorqueUnit.NewtonCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 N·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMeters, NewtonMetersTolerance);
                Assert.Equal(TorqueUnit.NewtonMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 Н·м", CultureInfo.GetCultureInfo("ru-RU"));
                AssertEx.EqualTolerance(1, parsed.NewtonMeters, NewtonMetersTolerance);
                Assert.Equal(TorqueUnit.NewtonMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 N·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.NewtonMillimeters, NewtonMillimetersTolerance);
                Assert.Equal(TorqueUnit.NewtonMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 pdl·ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundalFeet, PoundalFeetTolerance);
                Assert.Equal(TorqueUnit.PoundalFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 lbf·ft", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeet, PoundForceFeetTolerance);
                Assert.Equal(TorqueUnit.PoundForceFoot, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 lbf·in", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.PoundForceInches, PoundForceInchesTolerance);
                Assert.Equal(TorqueUnit.PoundForceInch, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 tf·cm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceCentimeters, TonneForceCentimetersTolerance);
                Assert.Equal(TorqueUnit.TonneForceCentimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 tf·m", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMeters, TonneForceMetersTolerance);
                Assert.Equal(TorqueUnit.TonneForceMeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

            try
            {
                var parsed = Torque.Parse("1 tf·mm", CultureInfo.GetCultureInfo("en-US"));
                AssertEx.EqualTolerance(1, parsed.TonneForceMillimeters, TonneForceMillimetersTolerance);
                Assert.Equal(TorqueUnit.TonneForceMillimeter, parsed.Unit);
            } catch (AmbiguousUnitParseException) { /* Some units have the same abbreviations */ }

        }

        [Fact]
        public void TryParse()
        {
            {
                Assert.True(Torque.TryParse("1 gf·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramForceCentimeters, GramForceCentimetersTolerance);
                Assert.Equal(TorqueUnit.GramForceCentimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 gf·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramForceMeters, GramForceMetersTolerance);
                Assert.Equal(TorqueUnit.GramForceMeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 gf·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.GramForceMillimeters, GramForceMillimetersTolerance);
                Assert.Equal(TorqueUnit.GramForceMillimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 kgf·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceCentimeters, KilogramForceCentimetersTolerance);
                Assert.Equal(TorqueUnit.KilogramForceCentimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 kgf·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMeters, KilogramForceMetersTolerance);
                Assert.Equal(TorqueUnit.KilogramForceMeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 kgf·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilogramForceMillimeters, KilogramForceMillimetersTolerance);
                Assert.Equal(TorqueUnit.KilogramForceMillimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 kN·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonCentimeters, KilonewtonCentimetersTolerance);
                Assert.Equal(TorqueUnit.KilonewtonCentimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 kN·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMeters, KilonewtonMetersTolerance);
                Assert.Equal(TorqueUnit.KilonewtonMeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 кН·м", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMeters, KilonewtonMetersTolerance);
                Assert.Equal(TorqueUnit.KilonewtonMeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 kN·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilonewtonMillimeters, KilonewtonMillimetersTolerance);
                Assert.Equal(TorqueUnit.KilonewtonMillimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 kipf·ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceFeet, KilopoundForceFeetTolerance);
                Assert.Equal(TorqueUnit.KilopoundForceFoot, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 kipf·in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.KilopoundForceInches, KilopoundForceInchesTolerance);
                Assert.Equal(TorqueUnit.KilopoundForceInch, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 MN·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonCentimeters, MeganewtonCentimetersTolerance);
                Assert.Equal(TorqueUnit.MeganewtonCentimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 MN·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMeters, MeganewtonMetersTolerance);
                Assert.Equal(TorqueUnit.MeganewtonMeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 МН·м", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMeters, MeganewtonMetersTolerance);
                Assert.Equal(TorqueUnit.MeganewtonMeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 MN·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MeganewtonMillimeters, MeganewtonMillimetersTolerance);
                Assert.Equal(TorqueUnit.MeganewtonMillimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 Mlbf·ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceFeet, MegapoundForceFeetTolerance);
                Assert.Equal(TorqueUnit.MegapoundForceFoot, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 Mlbf·in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.MegapoundForceInches, MegapoundForceInchesTolerance);
                Assert.Equal(TorqueUnit.MegapoundForceInch, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 N·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonCentimeters, NewtonCentimetersTolerance);
                Assert.Equal(TorqueUnit.NewtonCentimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 N·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMeters, NewtonMetersTolerance);
                Assert.Equal(TorqueUnit.NewtonMeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 Н·м", CultureInfo.GetCultureInfo("ru-RU"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMeters, NewtonMetersTolerance);
                Assert.Equal(TorqueUnit.NewtonMeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 N·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.NewtonMillimeters, NewtonMillimetersTolerance);
                Assert.Equal(TorqueUnit.NewtonMillimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 pdl·ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundalFeet, PoundalFeetTolerance);
                Assert.Equal(TorqueUnit.PoundalFoot, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 lbf·ft", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceFeet, PoundForceFeetTolerance);
                Assert.Equal(TorqueUnit.PoundForceFoot, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 lbf·in", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.PoundForceInches, PoundForceInchesTolerance);
                Assert.Equal(TorqueUnit.PoundForceInch, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 tf·cm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceCentimeters, TonneForceCentimetersTolerance);
                Assert.Equal(TorqueUnit.TonneForceCentimeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 tf·m", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMeters, TonneForceMetersTolerance);
                Assert.Equal(TorqueUnit.TonneForceMeter, parsed.Unit);
            }

            {
                Assert.True(Torque.TryParse("1 tf·mm", CultureInfo.GetCultureInfo("en-US"), out var parsed));
                AssertEx.EqualTolerance(1, parsed.TonneForceMillimeters, TonneForceMillimetersTolerance);
                Assert.Equal(TorqueUnit.TonneForceMillimeter, parsed.Unit);
            }

        }

        [Theory]
        [InlineData("gf·cm", TorqueUnit.GramForceCentimeter)]
        [InlineData("gf·m", TorqueUnit.GramForceMeter)]
        [InlineData("gf·mm", TorqueUnit.GramForceMillimeter)]
        [InlineData("kgf·cm", TorqueUnit.KilogramForceCentimeter)]
        [InlineData("kgf·m", TorqueUnit.KilogramForceMeter)]
        [InlineData("kgf·mm", TorqueUnit.KilogramForceMillimeter)]
        [InlineData("kN·cm", TorqueUnit.KilonewtonCentimeter)]
        [InlineData("kN·m", TorqueUnit.KilonewtonMeter)]
        [InlineData("kN·mm", TorqueUnit.KilonewtonMillimeter)]
        [InlineData("kipf·ft", TorqueUnit.KilopoundForceFoot)]
        [InlineData("kipf·in", TorqueUnit.KilopoundForceInch)]
        [InlineData("MN·cm", TorqueUnit.MeganewtonCentimeter)]
        [InlineData("MN·m", TorqueUnit.MeganewtonMeter)]
        [InlineData("MN·mm", TorqueUnit.MeganewtonMillimeter)]
        [InlineData("Mlbf·ft", TorqueUnit.MegapoundForceFoot)]
        [InlineData("Mlbf·in", TorqueUnit.MegapoundForceInch)]
        [InlineData("N·cm", TorqueUnit.NewtonCentimeter)]
        [InlineData("N·m", TorqueUnit.NewtonMeter)]
        [InlineData("N·mm", TorqueUnit.NewtonMillimeter)]
        [InlineData("pdl·ft", TorqueUnit.PoundalFoot)]
        [InlineData("lbf·ft", TorqueUnit.PoundForceFoot)]
        [InlineData("lbf·in", TorqueUnit.PoundForceInch)]
        [InlineData("tf·cm", TorqueUnit.TonneForceCentimeter)]
        [InlineData("tf·m", TorqueUnit.TonneForceMeter)]
        [InlineData("tf·mm", TorqueUnit.TonneForceMillimeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, TorqueUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            TorqueUnit parsedUnit = Torque.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("gf·cm", TorqueUnit.GramForceCentimeter)]
        [InlineData("gf·m", TorqueUnit.GramForceMeter)]
        [InlineData("gf·mm", TorqueUnit.GramForceMillimeter)]
        [InlineData("kgf·cm", TorqueUnit.KilogramForceCentimeter)]
        [InlineData("kgf·m", TorqueUnit.KilogramForceMeter)]
        [InlineData("kgf·mm", TorqueUnit.KilogramForceMillimeter)]
        [InlineData("kN·cm", TorqueUnit.KilonewtonCentimeter)]
        [InlineData("kN·m", TorqueUnit.KilonewtonMeter)]
        [InlineData("kN·mm", TorqueUnit.KilonewtonMillimeter)]
        [InlineData("kipf·ft", TorqueUnit.KilopoundForceFoot)]
        [InlineData("kipf·in", TorqueUnit.KilopoundForceInch)]
        [InlineData("MN·cm", TorqueUnit.MeganewtonCentimeter)]
        [InlineData("MN·m", TorqueUnit.MeganewtonMeter)]
        [InlineData("MN·mm", TorqueUnit.MeganewtonMillimeter)]
        [InlineData("Mlbf·ft", TorqueUnit.MegapoundForceFoot)]
        [InlineData("Mlbf·in", TorqueUnit.MegapoundForceInch)]
        [InlineData("N·cm", TorqueUnit.NewtonCentimeter)]
        [InlineData("N·m", TorqueUnit.NewtonMeter)]
        [InlineData("N·mm", TorqueUnit.NewtonMillimeter)]
        [InlineData("pdl·ft", TorqueUnit.PoundalFoot)]
        [InlineData("lbf·ft", TorqueUnit.PoundForceFoot)]
        [InlineData("lbf·in", TorqueUnit.PoundForceInch)]
        [InlineData("tf·cm", TorqueUnit.TonneForceCentimeter)]
        [InlineData("tf·m", TorqueUnit.TonneForceMeter)]
        [InlineData("tf·mm", TorqueUnit.TonneForceMillimeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, TorqueUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            TorqueUnit parsedUnit = Torque.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "gf·cm", TorqueUnit.GramForceCentimeter)]
        [InlineData("en-US", "gf·m", TorqueUnit.GramForceMeter)]
        [InlineData("en-US", "gf·mm", TorqueUnit.GramForceMillimeter)]
        [InlineData("en-US", "kgf·cm", TorqueUnit.KilogramForceCentimeter)]
        [InlineData("en-US", "kgf·m", TorqueUnit.KilogramForceMeter)]
        [InlineData("en-US", "kgf·mm", TorqueUnit.KilogramForceMillimeter)]
        [InlineData("en-US", "kN·cm", TorqueUnit.KilonewtonCentimeter)]
        [InlineData("en-US", "kN·m", TorqueUnit.KilonewtonMeter)]
        [InlineData("en-US", "kN·mm", TorqueUnit.KilonewtonMillimeter)]
        [InlineData("en-US", "kipf·ft", TorqueUnit.KilopoundForceFoot)]
        [InlineData("en-US", "kipf·in", TorqueUnit.KilopoundForceInch)]
        [InlineData("en-US", "MN·cm", TorqueUnit.MeganewtonCentimeter)]
        [InlineData("en-US", "MN·m", TorqueUnit.MeganewtonMeter)]
        [InlineData("en-US", "MN·mm", TorqueUnit.MeganewtonMillimeter)]
        [InlineData("en-US", "Mlbf·ft", TorqueUnit.MegapoundForceFoot)]
        [InlineData("en-US", "Mlbf·in", TorqueUnit.MegapoundForceInch)]
        [InlineData("en-US", "N·cm", TorqueUnit.NewtonCentimeter)]
        [InlineData("en-US", "N·m", TorqueUnit.NewtonMeter)]
        [InlineData("en-US", "N·mm", TorqueUnit.NewtonMillimeter)]
        [InlineData("en-US", "pdl·ft", TorqueUnit.PoundalFoot)]
        [InlineData("en-US", "lbf·ft", TorqueUnit.PoundForceFoot)]
        [InlineData("en-US", "lbf·in", TorqueUnit.PoundForceInch)]
        [InlineData("en-US", "tf·cm", TorqueUnit.TonneForceCentimeter)]
        [InlineData("en-US", "tf·m", TorqueUnit.TonneForceMeter)]
        [InlineData("en-US", "tf·mm", TorqueUnit.TonneForceMillimeter)]
        [InlineData("ru-RU", "кН·м", TorqueUnit.KilonewtonMeter)]
        [InlineData("ru-RU", "МН·м", TorqueUnit.MeganewtonMeter)]
        [InlineData("ru-RU", "Н·м", TorqueUnit.NewtonMeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, TorqueUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            TorqueUnit parsedUnit = Torque.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "gf·cm", TorqueUnit.GramForceCentimeter)]
        [InlineData("en-US", "gf·m", TorqueUnit.GramForceMeter)]
        [InlineData("en-US", "gf·mm", TorqueUnit.GramForceMillimeter)]
        [InlineData("en-US", "kgf·cm", TorqueUnit.KilogramForceCentimeter)]
        [InlineData("en-US", "kgf·m", TorqueUnit.KilogramForceMeter)]
        [InlineData("en-US", "kgf·mm", TorqueUnit.KilogramForceMillimeter)]
        [InlineData("en-US", "kN·cm", TorqueUnit.KilonewtonCentimeter)]
        [InlineData("en-US", "kN·m", TorqueUnit.KilonewtonMeter)]
        [InlineData("en-US", "kN·mm", TorqueUnit.KilonewtonMillimeter)]
        [InlineData("en-US", "kipf·ft", TorqueUnit.KilopoundForceFoot)]
        [InlineData("en-US", "kipf·in", TorqueUnit.KilopoundForceInch)]
        [InlineData("en-US", "MN·cm", TorqueUnit.MeganewtonCentimeter)]
        [InlineData("en-US", "MN·m", TorqueUnit.MeganewtonMeter)]
        [InlineData("en-US", "MN·mm", TorqueUnit.MeganewtonMillimeter)]
        [InlineData("en-US", "Mlbf·ft", TorqueUnit.MegapoundForceFoot)]
        [InlineData("en-US", "Mlbf·in", TorqueUnit.MegapoundForceInch)]
        [InlineData("en-US", "N·cm", TorqueUnit.NewtonCentimeter)]
        [InlineData("en-US", "N·m", TorqueUnit.NewtonMeter)]
        [InlineData("en-US", "N·mm", TorqueUnit.NewtonMillimeter)]
        [InlineData("en-US", "pdl·ft", TorqueUnit.PoundalFoot)]
        [InlineData("en-US", "lbf·ft", TorqueUnit.PoundForceFoot)]
        [InlineData("en-US", "lbf·in", TorqueUnit.PoundForceInch)]
        [InlineData("en-US", "tf·cm", TorqueUnit.TonneForceCentimeter)]
        [InlineData("en-US", "tf·m", TorqueUnit.TonneForceMeter)]
        [InlineData("en-US", "tf·mm", TorqueUnit.TonneForceMillimeter)]
        [InlineData("ru-RU", "кН·м", TorqueUnit.KilonewtonMeter)]
        [InlineData("ru-RU", "МН·м", TorqueUnit.MeganewtonMeter)]
        [InlineData("ru-RU", "Н·м", TorqueUnit.NewtonMeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, TorqueUnit expectedUnit)
        {
            TorqueUnit parsedUnit = Torque.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("gf·cm", TorqueUnit.GramForceCentimeter)]
        [InlineData("gf·m", TorqueUnit.GramForceMeter)]
        [InlineData("gf·mm", TorqueUnit.GramForceMillimeter)]
        [InlineData("kgf·cm", TorqueUnit.KilogramForceCentimeter)]
        [InlineData("kgf·m", TorqueUnit.KilogramForceMeter)]
        [InlineData("kgf·mm", TorqueUnit.KilogramForceMillimeter)]
        [InlineData("kN·cm", TorqueUnit.KilonewtonCentimeter)]
        [InlineData("kN·m", TorqueUnit.KilonewtonMeter)]
        [InlineData("kN·mm", TorqueUnit.KilonewtonMillimeter)]
        [InlineData("kipf·ft", TorqueUnit.KilopoundForceFoot)]
        [InlineData("kipf·in", TorqueUnit.KilopoundForceInch)]
        [InlineData("MN·cm", TorqueUnit.MeganewtonCentimeter)]
        [InlineData("MN·m", TorqueUnit.MeganewtonMeter)]
        [InlineData("MN·mm", TorqueUnit.MeganewtonMillimeter)]
        [InlineData("Mlbf·ft", TorqueUnit.MegapoundForceFoot)]
        [InlineData("Mlbf·in", TorqueUnit.MegapoundForceInch)]
        [InlineData("N·cm", TorqueUnit.NewtonCentimeter)]
        [InlineData("N·m", TorqueUnit.NewtonMeter)]
        [InlineData("N·mm", TorqueUnit.NewtonMillimeter)]
        [InlineData("pdl·ft", TorqueUnit.PoundalFoot)]
        [InlineData("lbf·ft", TorqueUnit.PoundForceFoot)]
        [InlineData("lbf·in", TorqueUnit.PoundForceInch)]
        [InlineData("tf·cm", TorqueUnit.TonneForceCentimeter)]
        [InlineData("tf·m", TorqueUnit.TonneForceMeter)]
        [InlineData("tf·mm", TorqueUnit.TonneForceMillimeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, TorqueUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Torque.TryParseUnit(abbreviation, out TorqueUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("gf·cm", TorqueUnit.GramForceCentimeter)]
        [InlineData("gf·m", TorqueUnit.GramForceMeter)]
        [InlineData("gf·mm", TorqueUnit.GramForceMillimeter)]
        [InlineData("kgf·cm", TorqueUnit.KilogramForceCentimeter)]
        [InlineData("kgf·m", TorqueUnit.KilogramForceMeter)]
        [InlineData("kgf·mm", TorqueUnit.KilogramForceMillimeter)]
        [InlineData("kN·cm", TorqueUnit.KilonewtonCentimeter)]
        [InlineData("kN·m", TorqueUnit.KilonewtonMeter)]
        [InlineData("kN·mm", TorqueUnit.KilonewtonMillimeter)]
        [InlineData("kipf·ft", TorqueUnit.KilopoundForceFoot)]
        [InlineData("kipf·in", TorqueUnit.KilopoundForceInch)]
        [InlineData("MN·cm", TorqueUnit.MeganewtonCentimeter)]
        [InlineData("MN·m", TorqueUnit.MeganewtonMeter)]
        [InlineData("MN·mm", TorqueUnit.MeganewtonMillimeter)]
        [InlineData("Mlbf·ft", TorqueUnit.MegapoundForceFoot)]
        [InlineData("Mlbf·in", TorqueUnit.MegapoundForceInch)]
        [InlineData("N·cm", TorqueUnit.NewtonCentimeter)]
        [InlineData("N·m", TorqueUnit.NewtonMeter)]
        [InlineData("N·mm", TorqueUnit.NewtonMillimeter)]
        [InlineData("pdl·ft", TorqueUnit.PoundalFoot)]
        [InlineData("lbf·ft", TorqueUnit.PoundForceFoot)]
        [InlineData("lbf·in", TorqueUnit.PoundForceInch)]
        [InlineData("tf·cm", TorqueUnit.TonneForceCentimeter)]
        [InlineData("tf·m", TorqueUnit.TonneForceMeter)]
        [InlineData("tf·mm", TorqueUnit.TonneForceMillimeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, TorqueUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Torque.TryParseUnit(abbreviation, out TorqueUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "gf·cm", TorqueUnit.GramForceCentimeter)]
        [InlineData("en-US", "gf·m", TorqueUnit.GramForceMeter)]
        [InlineData("en-US", "gf·mm", TorqueUnit.GramForceMillimeter)]
        [InlineData("en-US", "kgf·cm", TorqueUnit.KilogramForceCentimeter)]
        [InlineData("en-US", "kgf·m", TorqueUnit.KilogramForceMeter)]
        [InlineData("en-US", "kgf·mm", TorqueUnit.KilogramForceMillimeter)]
        [InlineData("en-US", "kN·cm", TorqueUnit.KilonewtonCentimeter)]
        [InlineData("en-US", "kN·m", TorqueUnit.KilonewtonMeter)]
        [InlineData("en-US", "kN·mm", TorqueUnit.KilonewtonMillimeter)]
        [InlineData("en-US", "kipf·ft", TorqueUnit.KilopoundForceFoot)]
        [InlineData("en-US", "kipf·in", TorqueUnit.KilopoundForceInch)]
        [InlineData("en-US", "MN·cm", TorqueUnit.MeganewtonCentimeter)]
        [InlineData("en-US", "MN·m", TorqueUnit.MeganewtonMeter)]
        [InlineData("en-US", "MN·mm", TorqueUnit.MeganewtonMillimeter)]
        [InlineData("en-US", "Mlbf·ft", TorqueUnit.MegapoundForceFoot)]
        [InlineData("en-US", "Mlbf·in", TorqueUnit.MegapoundForceInch)]
        [InlineData("en-US", "N·cm", TorqueUnit.NewtonCentimeter)]
        [InlineData("en-US", "N·m", TorqueUnit.NewtonMeter)]
        [InlineData("en-US", "N·mm", TorqueUnit.NewtonMillimeter)]
        [InlineData("en-US", "pdl·ft", TorqueUnit.PoundalFoot)]
        [InlineData("en-US", "lbf·ft", TorqueUnit.PoundForceFoot)]
        [InlineData("en-US", "lbf·in", TorqueUnit.PoundForceInch)]
        [InlineData("en-US", "tf·cm", TorqueUnit.TonneForceCentimeter)]
        [InlineData("en-US", "tf·m", TorqueUnit.TonneForceMeter)]
        [InlineData("en-US", "tf·mm", TorqueUnit.TonneForceMillimeter)]
        [InlineData("ru-RU", "кН·м", TorqueUnit.KilonewtonMeter)]
        [InlineData("ru-RU", "МН·м", TorqueUnit.MeganewtonMeter)]
        [InlineData("ru-RU", "Н·м", TorqueUnit.NewtonMeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, TorqueUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Torque.TryParseUnit(abbreviation, out TorqueUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "gf·cm", TorqueUnit.GramForceCentimeter)]
        [InlineData("en-US", "gf·m", TorqueUnit.GramForceMeter)]
        [InlineData("en-US", "gf·mm", TorqueUnit.GramForceMillimeter)]
        [InlineData("en-US", "kgf·cm", TorqueUnit.KilogramForceCentimeter)]
        [InlineData("en-US", "kgf·m", TorqueUnit.KilogramForceMeter)]
        [InlineData("en-US", "kgf·mm", TorqueUnit.KilogramForceMillimeter)]
        [InlineData("en-US", "kN·cm", TorqueUnit.KilonewtonCentimeter)]
        [InlineData("en-US", "kN·m", TorqueUnit.KilonewtonMeter)]
        [InlineData("en-US", "kN·mm", TorqueUnit.KilonewtonMillimeter)]
        [InlineData("en-US", "kipf·ft", TorqueUnit.KilopoundForceFoot)]
        [InlineData("en-US", "kipf·in", TorqueUnit.KilopoundForceInch)]
        [InlineData("en-US", "MN·cm", TorqueUnit.MeganewtonCentimeter)]
        [InlineData("en-US", "MN·m", TorqueUnit.MeganewtonMeter)]
        [InlineData("en-US", "MN·mm", TorqueUnit.MeganewtonMillimeter)]
        [InlineData("en-US", "Mlbf·ft", TorqueUnit.MegapoundForceFoot)]
        [InlineData("en-US", "Mlbf·in", TorqueUnit.MegapoundForceInch)]
        [InlineData("en-US", "N·cm", TorqueUnit.NewtonCentimeter)]
        [InlineData("en-US", "N·m", TorqueUnit.NewtonMeter)]
        [InlineData("en-US", "N·mm", TorqueUnit.NewtonMillimeter)]
        [InlineData("en-US", "pdl·ft", TorqueUnit.PoundalFoot)]
        [InlineData("en-US", "lbf·ft", TorqueUnit.PoundForceFoot)]
        [InlineData("en-US", "lbf·in", TorqueUnit.PoundForceInch)]
        [InlineData("en-US", "tf·cm", TorqueUnit.TonneForceCentimeter)]
        [InlineData("en-US", "tf·m", TorqueUnit.TonneForceMeter)]
        [InlineData("en-US", "tf·mm", TorqueUnit.TonneForceMillimeter)]
        [InlineData("ru-RU", "кН·м", TorqueUnit.KilonewtonMeter)]
        [InlineData("ru-RU", "МН·м", TorqueUnit.MeganewtonMeter)]
        [InlineData("ru-RU", "Н·м", TorqueUnit.NewtonMeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, TorqueUnit expectedUnit)
        {
            Assert.True(Torque.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out TorqueUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(TorqueUnit unit)
        {
            var inBaseUnits = Torque.From(1.0, Torque.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(TorqueUnit unit)
        {
            var quantity = Torque.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(TorqueUnit unit)
        {
            Assert.All(Torque.Units.Where(u => u != Torque.BaseUnit), fromUnit =>
            {
                var quantity = Torque.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(TorqueUnit unit)
        {
            var quantity = default(Torque);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(TorqueUnit unit)
        {
            var quantity = Torque.From(3, Torque.BaseUnit);
            Torque expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<TorqueUnit> quantityToConvert = quantity;
                IQuantity<TorqueUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Torque newtonmeter = Torque.FromNewtonMeters(1);
            AssertEx.EqualTolerance(1, Torque.FromGramForceCentimeters(newtonmeter.GramForceCentimeters).NewtonMeters, GramForceCentimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromGramForceMeters(newtonmeter.GramForceMeters).NewtonMeters, GramForceMetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromGramForceMillimeters(newtonmeter.GramForceMillimeters).NewtonMeters, GramForceMillimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromKilogramForceCentimeters(newtonmeter.KilogramForceCentimeters).NewtonMeters, KilogramForceCentimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromKilogramForceMeters(newtonmeter.KilogramForceMeters).NewtonMeters, KilogramForceMetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromKilogramForceMillimeters(newtonmeter.KilogramForceMillimeters).NewtonMeters, KilogramForceMillimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromKilonewtonCentimeters(newtonmeter.KilonewtonCentimeters).NewtonMeters, KilonewtonCentimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromKilonewtonMeters(newtonmeter.KilonewtonMeters).NewtonMeters, KilonewtonMetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromKilonewtonMillimeters(newtonmeter.KilonewtonMillimeters).NewtonMeters, KilonewtonMillimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromKilopoundForceFeet(newtonmeter.KilopoundForceFeet).NewtonMeters, KilopoundForceFeetTolerance);
            AssertEx.EqualTolerance(1, Torque.FromKilopoundForceInches(newtonmeter.KilopoundForceInches).NewtonMeters, KilopoundForceInchesTolerance);
            AssertEx.EqualTolerance(1, Torque.FromMeganewtonCentimeters(newtonmeter.MeganewtonCentimeters).NewtonMeters, MeganewtonCentimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromMeganewtonMeters(newtonmeter.MeganewtonMeters).NewtonMeters, MeganewtonMetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromMeganewtonMillimeters(newtonmeter.MeganewtonMillimeters).NewtonMeters, MeganewtonMillimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromMegapoundForceFeet(newtonmeter.MegapoundForceFeet).NewtonMeters, MegapoundForceFeetTolerance);
            AssertEx.EqualTolerance(1, Torque.FromMegapoundForceInches(newtonmeter.MegapoundForceInches).NewtonMeters, MegapoundForceInchesTolerance);
            AssertEx.EqualTolerance(1, Torque.FromNewtonCentimeters(newtonmeter.NewtonCentimeters).NewtonMeters, NewtonCentimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromNewtonMeters(newtonmeter.NewtonMeters).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromNewtonMillimeters(newtonmeter.NewtonMillimeters).NewtonMeters, NewtonMillimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromPoundalFeet(newtonmeter.PoundalFeet).NewtonMeters, PoundalFeetTolerance);
            AssertEx.EqualTolerance(1, Torque.FromPoundForceFeet(newtonmeter.PoundForceFeet).NewtonMeters, PoundForceFeetTolerance);
            AssertEx.EqualTolerance(1, Torque.FromPoundForceInches(newtonmeter.PoundForceInches).NewtonMeters, PoundForceInchesTolerance);
            AssertEx.EqualTolerance(1, Torque.FromTonneForceCentimeters(newtonmeter.TonneForceCentimeters).NewtonMeters, TonneForceCentimetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromTonneForceMeters(newtonmeter.TonneForceMeters).NewtonMeters, TonneForceMetersTolerance);
            AssertEx.EqualTolerance(1, Torque.FromTonneForceMillimeters(newtonmeter.TonneForceMillimeters).NewtonMeters, TonneForceMillimetersTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Torque v = Torque.FromNewtonMeters(1);
            AssertEx.EqualTolerance(-1, -v.NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(2, (Torque.FromNewtonMeters(3)-v).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(2, (Torque.FromNewtonMeters(10)/5).NewtonMeters, NewtonMetersTolerance);
            AssertEx.EqualTolerance(2, Torque.FromNewtonMeters(10)/Torque.FromNewtonMeters(5), NewtonMetersTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Torque oneNewtonMeter = Torque.FromNewtonMeters(1);
            Torque twoNewtonMeters = Torque.FromNewtonMeters(2);

            Assert.True(oneNewtonMeter < twoNewtonMeters);
            Assert.True(oneNewtonMeter <= twoNewtonMeters);
            Assert.True(twoNewtonMeters > oneNewtonMeter);
            Assert.True(twoNewtonMeters >= oneNewtonMeter);

            Assert.False(oneNewtonMeter > twoNewtonMeters);
            Assert.False(oneNewtonMeter >= twoNewtonMeters);
            Assert.False(twoNewtonMeters < oneNewtonMeter);
            Assert.False(twoNewtonMeters <= oneNewtonMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Torque newtonmeter = Torque.FromNewtonMeters(1);
            Assert.Equal(0, newtonmeter.CompareTo(newtonmeter));
            Assert.True(newtonmeter.CompareTo(Torque.Zero) > 0);
            Assert.True(Torque.Zero.CompareTo(newtonmeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Torque newtonmeter = Torque.FromNewtonMeters(1);
            Assert.Throws<ArgumentException>(() => newtonmeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Torque newtonmeter = Torque.FromNewtonMeters(1);
            Assert.Throws<ArgumentNullException>(() => newtonmeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, TorqueUnit.NewtonMeter, 1, TorqueUnit.NewtonMeter, true)]  // Same value and unit.
        [InlineData(1, TorqueUnit.NewtonMeter, 2, TorqueUnit.NewtonMeter, false)] // Different value.
        [InlineData(2, TorqueUnit.NewtonMeter, 1, TorqueUnit.GramForceCentimeter, false)] // Different value and unit.
        [InlineData(1, TorqueUnit.NewtonMeter, 1, TorqueUnit.GramForceCentimeter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, TorqueUnit unitA, double valueB, TorqueUnit unitB, bool expectEqual)
        {
            var a = new Torque(valueA, unitA);
            var b = new Torque(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Torque.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void Equals_RelativeTolerance_IsImplemented()
        {
            var v = Torque.FromNewtonMeters(1);
            Assert.True(v.Equals(Torque.FromNewtonMeters(1), NewtonMetersTolerance, ComparisonType.Relative));
            Assert.False(v.Equals(Torque.Zero, NewtonMetersTolerance, ComparisonType.Relative));
            Assert.True(Torque.FromNewtonMeters(100).Equals(Torque.FromNewtonMeters(120), 0.3, ComparisonType.Relative));
            Assert.False(Torque.FromNewtonMeters(100).Equals(Torque.FromNewtonMeters(120), 0.1, ComparisonType.Relative));
        }

        [Fact]
        public void Equals_NegativeRelativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var v = Torque.FromNewtonMeters(1);
            Assert.Throws<ArgumentOutOfRangeException>(() => v.Equals(Torque.FromNewtonMeters(1), -1, ComparisonType.Relative));
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Torque newtonmeter = Torque.FromNewtonMeters(1);
            Assert.False(newtonmeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Torque newtonmeter = Torque.FromNewtonMeters(1);
            Assert.False(newtonmeter.Equals(null));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<TorqueUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Torque.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 gf·cm", new Torque(1, TorqueUnit.GramForceCentimeter).ToString());
            Assert.Equal("1 gf·m", new Torque(1, TorqueUnit.GramForceMeter).ToString());
            Assert.Equal("1 gf·mm", new Torque(1, TorqueUnit.GramForceMillimeter).ToString());
            Assert.Equal("1 kgf·cm", new Torque(1, TorqueUnit.KilogramForceCentimeter).ToString());
            Assert.Equal("1 kgf·m", new Torque(1, TorqueUnit.KilogramForceMeter).ToString());
            Assert.Equal("1 kgf·mm", new Torque(1, TorqueUnit.KilogramForceMillimeter).ToString());
            Assert.Equal("1 kN·cm", new Torque(1, TorqueUnit.KilonewtonCentimeter).ToString());
            Assert.Equal("1 kN·m", new Torque(1, TorqueUnit.KilonewtonMeter).ToString());
            Assert.Equal("1 kN·mm", new Torque(1, TorqueUnit.KilonewtonMillimeter).ToString());
            Assert.Equal("1 kipf·ft", new Torque(1, TorqueUnit.KilopoundForceFoot).ToString());
            Assert.Equal("1 kipf·in", new Torque(1, TorqueUnit.KilopoundForceInch).ToString());
            Assert.Equal("1 MN·cm", new Torque(1, TorqueUnit.MeganewtonCentimeter).ToString());
            Assert.Equal("1 MN·m", new Torque(1, TorqueUnit.MeganewtonMeter).ToString());
            Assert.Equal("1 MN·mm", new Torque(1, TorqueUnit.MeganewtonMillimeter).ToString());
            Assert.Equal("1 Mlbf·ft", new Torque(1, TorqueUnit.MegapoundForceFoot).ToString());
            Assert.Equal("1 Mlbf·in", new Torque(1, TorqueUnit.MegapoundForceInch).ToString());
            Assert.Equal("1 N·cm", new Torque(1, TorqueUnit.NewtonCentimeter).ToString());
            Assert.Equal("1 N·m", new Torque(1, TorqueUnit.NewtonMeter).ToString());
            Assert.Equal("1 N·mm", new Torque(1, TorqueUnit.NewtonMillimeter).ToString());
            Assert.Equal("1 pdl·ft", new Torque(1, TorqueUnit.PoundalFoot).ToString());
            Assert.Equal("1 lbf·ft", new Torque(1, TorqueUnit.PoundForceFoot).ToString());
            Assert.Equal("1 lbf·in", new Torque(1, TorqueUnit.PoundForceInch).ToString());
            Assert.Equal("1 tf·cm", new Torque(1, TorqueUnit.TonneForceCentimeter).ToString());
            Assert.Equal("1 tf·m", new Torque(1, TorqueUnit.TonneForceMeter).ToString());
            Assert.Equal("1 tf·mm", new Torque(1, TorqueUnit.TonneForceMillimeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 gf·cm", new Torque(1, TorqueUnit.GramForceCentimeter).ToString(swedishCulture));
            Assert.Equal("1 gf·m", new Torque(1, TorqueUnit.GramForceMeter).ToString(swedishCulture));
            Assert.Equal("1 gf·mm", new Torque(1, TorqueUnit.GramForceMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·cm", new Torque(1, TorqueUnit.KilogramForceCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·m", new Torque(1, TorqueUnit.KilogramForceMeter).ToString(swedishCulture));
            Assert.Equal("1 kgf·mm", new Torque(1, TorqueUnit.KilogramForceMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kN·cm", new Torque(1, TorqueUnit.KilonewtonCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kN·m", new Torque(1, TorqueUnit.KilonewtonMeter).ToString(swedishCulture));
            Assert.Equal("1 kN·mm", new Torque(1, TorqueUnit.KilonewtonMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kipf·ft", new Torque(1, TorqueUnit.KilopoundForceFoot).ToString(swedishCulture));
            Assert.Equal("1 kipf·in", new Torque(1, TorqueUnit.KilopoundForceInch).ToString(swedishCulture));
            Assert.Equal("1 MN·cm", new Torque(1, TorqueUnit.MeganewtonCentimeter).ToString(swedishCulture));
            Assert.Equal("1 MN·m", new Torque(1, TorqueUnit.MeganewtonMeter).ToString(swedishCulture));
            Assert.Equal("1 MN·mm", new Torque(1, TorqueUnit.MeganewtonMillimeter).ToString(swedishCulture));
            Assert.Equal("1 Mlbf·ft", new Torque(1, TorqueUnit.MegapoundForceFoot).ToString(swedishCulture));
            Assert.Equal("1 Mlbf·in", new Torque(1, TorqueUnit.MegapoundForceInch).ToString(swedishCulture));
            Assert.Equal("1 N·cm", new Torque(1, TorqueUnit.NewtonCentimeter).ToString(swedishCulture));
            Assert.Equal("1 N·m", new Torque(1, TorqueUnit.NewtonMeter).ToString(swedishCulture));
            Assert.Equal("1 N·mm", new Torque(1, TorqueUnit.NewtonMillimeter).ToString(swedishCulture));
            Assert.Equal("1 pdl·ft", new Torque(1, TorqueUnit.PoundalFoot).ToString(swedishCulture));
            Assert.Equal("1 lbf·ft", new Torque(1, TorqueUnit.PoundForceFoot).ToString(swedishCulture));
            Assert.Equal("1 lbf·in", new Torque(1, TorqueUnit.PoundForceInch).ToString(swedishCulture));
            Assert.Equal("1 tf·cm", new Torque(1, TorqueUnit.TonneForceCentimeter).ToString(swedishCulture));
            Assert.Equal("1 tf·m", new Torque(1, TorqueUnit.TonneForceMeter).ToString(swedishCulture));
            Assert.Equal("1 tf·mm", new Torque(1, TorqueUnit.TonneForceMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 N·m", new Torque(0.123456, TorqueUnit.NewtonMeter).ToString("s1"));
            Assert.Equal("0.12 N·m", new Torque(0.123456, TorqueUnit.NewtonMeter).ToString("s2"));
            Assert.Equal("0.123 N·m", new Torque(0.123456, TorqueUnit.NewtonMeter).ToString("s3"));
            Assert.Equal("0.1235 N·m", new Torque(0.123456, TorqueUnit.NewtonMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N·m", new Torque(0.123456, TorqueUnit.NewtonMeter).ToString("s1", culture));
            Assert.Equal("0.12 N·m", new Torque(0.123456, TorqueUnit.NewtonMeter).ToString("s2", culture));
            Assert.Equal("0.123 N·m", new Torque(0.123456, TorqueUnit.NewtonMeter).ToString("s3", culture));
            Assert.Equal("0.1235 N·m", new Torque(0.123456, TorqueUnit.NewtonMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Torque.FromNewtonMeters(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Torque.FromNewtonMeters(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Torque.FromNewtonMeters(1.0);
            Assert.Equal(new {Torque.Info.Name, quantity.Value, quantity.Unit}.GetHashCode(), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Torque.FromNewtonMeters(value);
            Assert.Equal(Torque.FromNewtonMeters(-value), -quantity);
        }
    }
}
