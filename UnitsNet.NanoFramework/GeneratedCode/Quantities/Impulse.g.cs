//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     In classical mechanics, impulse is the integral of a force, F, over the time interval, t, for which it acts. Impulse applied to an object produces an equivalent vector change in its linear momentum, also in the resultant direction.
    /// </summary>
    public struct  Impulse
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ImpulseUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public ImpulseUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Impulse(double value, ImpulseUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Impulse, which is Second. All conversions go via this value.
        /// </summary>
        public static ImpulseUnit BaseUnit { get; } = ImpulseUnit.NewtonSecond;

        /// <summary>
        /// Represents the largest possible value of Impulse.
        /// </summary>
        public static Impulse MaxValue { get; } = new Impulse(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Impulse.
        /// </summary>
        public static Impulse MinValue { get; } = new Impulse(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Impulse Zero { get; } = new Impulse(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.CentinewtonSecond"/>
        /// </summary>
        public double CentinewtonSeconds => As(ImpulseUnit.CentinewtonSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.DecanewtonSecond"/>
        /// </summary>
        public double DecanewtonSeconds => As(ImpulseUnit.DecanewtonSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.DecinewtonSecond"/>
        /// </summary>
        public double DecinewtonSeconds => As(ImpulseUnit.DecinewtonSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.KilogramMeterPerSecond"/>
        /// </summary>
        public double KilogramMetersPerSecond => As(ImpulseUnit.KilogramMeterPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.KilonewtonSecond"/>
        /// </summary>
        public double KilonewtonSeconds => As(ImpulseUnit.KilonewtonSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.MeganewtonSecond"/>
        /// </summary>
        public double MeganewtonSeconds => As(ImpulseUnit.MeganewtonSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.MicronewtonSecond"/>
        /// </summary>
        public double MicronewtonSeconds => As(ImpulseUnit.MicronewtonSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.MillinewtonSecond"/>
        /// </summary>
        public double MillinewtonSeconds => As(ImpulseUnit.MillinewtonSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.NanonewtonSecond"/>
        /// </summary>
        public double NanonewtonSeconds => As(ImpulseUnit.NanonewtonSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.NewtonSecond"/>
        /// </summary>
        public double NewtonSeconds => As(ImpulseUnit.NewtonSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.PoundFootPerSecond"/>
        /// </summary>
        public double PoundFeetPerSecond => As(ImpulseUnit.PoundFootPerSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.PoundForceSecond"/>
        /// </summary>
        public double PoundForceSeconds => As(ImpulseUnit.PoundForceSecond);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ImpulseUnit.SlugFootPerSecond"/>
        /// </summary>
        public double SlugFeetPerSecond => As(ImpulseUnit.SlugFootPerSecond);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.CentinewtonSecond"/>.
        /// </summary>
        public static Impulse FromCentinewtonSeconds(double centinewtonseconds) => new Impulse(centinewtonseconds, ImpulseUnit.CentinewtonSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.DecanewtonSecond"/>.
        /// </summary>
        public static Impulse FromDecanewtonSeconds(double decanewtonseconds) => new Impulse(decanewtonseconds, ImpulseUnit.DecanewtonSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.DecinewtonSecond"/>.
        /// </summary>
        public static Impulse FromDecinewtonSeconds(double decinewtonseconds) => new Impulse(decinewtonseconds, ImpulseUnit.DecinewtonSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.KilogramMeterPerSecond"/>.
        /// </summary>
        public static Impulse FromKilogramMetersPerSecond(double kilogrammeterspersecond) => new Impulse(kilogrammeterspersecond, ImpulseUnit.KilogramMeterPerSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.KilonewtonSecond"/>.
        /// </summary>
        public static Impulse FromKilonewtonSeconds(double kilonewtonseconds) => new Impulse(kilonewtonseconds, ImpulseUnit.KilonewtonSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.MeganewtonSecond"/>.
        /// </summary>
        public static Impulse FromMeganewtonSeconds(double meganewtonseconds) => new Impulse(meganewtonseconds, ImpulseUnit.MeganewtonSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.MicronewtonSecond"/>.
        /// </summary>
        public static Impulse FromMicronewtonSeconds(double micronewtonseconds) => new Impulse(micronewtonseconds, ImpulseUnit.MicronewtonSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.MillinewtonSecond"/>.
        /// </summary>
        public static Impulse FromMillinewtonSeconds(double millinewtonseconds) => new Impulse(millinewtonseconds, ImpulseUnit.MillinewtonSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.NanonewtonSecond"/>.
        /// </summary>
        public static Impulse FromNanonewtonSeconds(double nanonewtonseconds) => new Impulse(nanonewtonseconds, ImpulseUnit.NanonewtonSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.NewtonSecond"/>.
        /// </summary>
        public static Impulse FromNewtonSeconds(double newtonseconds) => new Impulse(newtonseconds, ImpulseUnit.NewtonSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.PoundFootPerSecond"/>.
        /// </summary>
        public static Impulse FromPoundFeetPerSecond(double poundfeetpersecond) => new Impulse(poundfeetpersecond, ImpulseUnit.PoundFootPerSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.PoundForceSecond"/>.
        /// </summary>
        public static Impulse FromPoundForceSeconds(double poundforceseconds) => new Impulse(poundforceseconds, ImpulseUnit.PoundForceSecond);

        /// <summary>
        ///     Creates a <see cref="Impulse"/> from <see cref="ImpulseUnit.SlugFootPerSecond"/>.
        /// </summary>
        public static Impulse FromSlugFeetPerSecond(double slugfeetpersecond) => new Impulse(slugfeetpersecond, ImpulseUnit.SlugFootPerSecond);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ImpulseUnit" /> to <see cref="Impulse" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Impulse unit value.</returns>
        public static Impulse From(double value, ImpulseUnit fromUnit)
        {
            return new Impulse(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(ImpulseUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this Impulse to another Impulse with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A Impulse with the specified unit.</returns>
                public Impulse ToUnit(ImpulseUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new Impulse(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        ImpulseUnit.CentinewtonSecond => (_value) * 1e-2d,
                        ImpulseUnit.DecanewtonSecond => (_value) * 1e1d,
                        ImpulseUnit.DecinewtonSecond => (_value) * 1e-1d,
                        ImpulseUnit.KilogramMeterPerSecond => _value,
                        ImpulseUnit.KilonewtonSecond => (_value) * 1e3d,
                        ImpulseUnit.MeganewtonSecond => (_value) * 1e6d,
                        ImpulseUnit.MicronewtonSecond => (_value) * 1e-6d,
                        ImpulseUnit.MillinewtonSecond => (_value) * 1e-3d,
                        ImpulseUnit.NanonewtonSecond => (_value) * 1e-9d,
                        ImpulseUnit.NewtonSecond => _value,
                        ImpulseUnit.PoundFootPerSecond => _value * (0.45359237 * 0.3048),
                        ImpulseUnit.PoundForceSecond => _value * 0.45359237 * 9.80665,
                        ImpulseUnit.SlugFootPerSecond => _value * (0.45359237 * 9.80665),
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(ImpulseUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        ImpulseUnit.CentinewtonSecond => (baseUnitValue) / 1e-2d,
                        ImpulseUnit.DecanewtonSecond => (baseUnitValue) / 1e1d,
                        ImpulseUnit.DecinewtonSecond => (baseUnitValue) / 1e-1d,
                        ImpulseUnit.KilogramMeterPerSecond => baseUnitValue,
                        ImpulseUnit.KilonewtonSecond => (baseUnitValue) / 1e3d,
                        ImpulseUnit.MeganewtonSecond => (baseUnitValue) / 1e6d,
                        ImpulseUnit.MicronewtonSecond => (baseUnitValue) / 1e-6d,
                        ImpulseUnit.MillinewtonSecond => (baseUnitValue) / 1e-3d,
                        ImpulseUnit.NanonewtonSecond => (baseUnitValue) / 1e-9d,
                        ImpulseUnit.NewtonSecond => baseUnitValue,
                        ImpulseUnit.PoundFootPerSecond => baseUnitValue / (0.45359237 * 0.3048),
                        ImpulseUnit.PoundForceSecond => baseUnitValue / 4.4482216152605,
                        ImpulseUnit.SlugFootPerSecond => baseUnitValue / (0.45359237 * 9.80665),
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

