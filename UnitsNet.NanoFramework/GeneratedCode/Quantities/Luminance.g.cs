//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Luminance
    /// </remarks>
    public struct  Luminance
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly LuminanceUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public LuminanceUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Luminance(double value, LuminanceUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Luminance, which is Second. All conversions go via this value.
        /// </summary>
        public static LuminanceUnit BaseUnit { get; } = LuminanceUnit.CandelaPerSquareMeter;

        /// <summary>
        /// Represents the largest possible value of Luminance.
        /// </summary>
        public static Luminance MaxValue { get; } = new Luminance(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Luminance.
        /// </summary>
        public static Luminance MinValue { get; } = new Luminance(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Luminance Zero { get; } = new Luminance(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CandelaPerSquareFoot"/>
        /// </summary>
        public double CandelasPerSquareFoot => As(LuminanceUnit.CandelaPerSquareFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CandelaPerSquareInch"/>
        /// </summary>
        public double CandelasPerSquareInch => As(LuminanceUnit.CandelaPerSquareInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CandelaPerSquareMeter"/>
        /// </summary>
        public double CandelasPerSquareMeter => As(LuminanceUnit.CandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.CenticandelaPerSquareMeter"/>
        /// </summary>
        public double CenticandelasPerSquareMeter => As(LuminanceUnit.CenticandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.DecicandelaPerSquareMeter"/>
        /// </summary>
        public double DecicandelasPerSquareMeter => As(LuminanceUnit.DecicandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.KilocandelaPerSquareMeter"/>
        /// </summary>
        public double KilocandelasPerSquareMeter => As(LuminanceUnit.KilocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MicrocandelaPerSquareMeter"/>
        /// </summary>
        public double MicrocandelasPerSquareMeter => As(LuminanceUnit.MicrocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.MillicandelaPerSquareMeter"/>
        /// </summary>
        public double MillicandelasPerSquareMeter => As(LuminanceUnit.MillicandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.NanocandelaPerSquareMeter"/>
        /// </summary>
        public double NanocandelasPerSquareMeter => As(LuminanceUnit.NanocandelaPerSquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="LuminanceUnit.Nit"/>
        /// </summary>
        public double Nits => As(LuminanceUnit.Nit);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CandelaPerSquareFoot"/>.
        /// </summary>
        public static Luminance FromCandelasPerSquareFoot(double candelaspersquarefoot) => new Luminance(candelaspersquarefoot, LuminanceUnit.CandelaPerSquareFoot);

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CandelaPerSquareInch"/>.
        /// </summary>
        public static Luminance FromCandelasPerSquareInch(double candelaspersquareinch) => new Luminance(candelaspersquareinch, LuminanceUnit.CandelaPerSquareInch);

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CandelaPerSquareMeter"/>.
        /// </summary>
        public static Luminance FromCandelasPerSquareMeter(double candelaspersquaremeter) => new Luminance(candelaspersquaremeter, LuminanceUnit.CandelaPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.CenticandelaPerSquareMeter"/>.
        /// </summary>
        public static Luminance FromCenticandelasPerSquareMeter(double centicandelaspersquaremeter) => new Luminance(centicandelaspersquaremeter, LuminanceUnit.CenticandelaPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.DecicandelaPerSquareMeter"/>.
        /// </summary>
        public static Luminance FromDecicandelasPerSquareMeter(double decicandelaspersquaremeter) => new Luminance(decicandelaspersquaremeter, LuminanceUnit.DecicandelaPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.KilocandelaPerSquareMeter"/>.
        /// </summary>
        public static Luminance FromKilocandelasPerSquareMeter(double kilocandelaspersquaremeter) => new Luminance(kilocandelaspersquaremeter, LuminanceUnit.KilocandelaPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MicrocandelaPerSquareMeter"/>.
        /// </summary>
        public static Luminance FromMicrocandelasPerSquareMeter(double microcandelaspersquaremeter) => new Luminance(microcandelaspersquaremeter, LuminanceUnit.MicrocandelaPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.MillicandelaPerSquareMeter"/>.
        /// </summary>
        public static Luminance FromMillicandelasPerSquareMeter(double millicandelaspersquaremeter) => new Luminance(millicandelaspersquaremeter, LuminanceUnit.MillicandelaPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.NanocandelaPerSquareMeter"/>.
        /// </summary>
        public static Luminance FromNanocandelasPerSquareMeter(double nanocandelaspersquaremeter) => new Luminance(nanocandelaspersquaremeter, LuminanceUnit.NanocandelaPerSquareMeter);

        /// <summary>
        ///     Creates a <see cref="Luminance"/> from <see cref="LuminanceUnit.Nit"/>.
        /// </summary>
        public static Luminance FromNits(double nits) => new Luminance(nits, LuminanceUnit.Nit);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="LuminanceUnit" /> to <see cref="Luminance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Luminance unit value.</returns>
        public static Luminance From(double value, LuminanceUnit fromUnit)
        {
            return new Luminance(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(LuminanceUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this Luminance to another Luminance with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A Luminance with the specified unit.</returns>
                public Luminance ToUnit(LuminanceUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new Luminance(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        LuminanceUnit.CandelaPerSquareFoot => _value / 9.290304e-2,
                        LuminanceUnit.CandelaPerSquareInch => _value / 0.00064516,
                        LuminanceUnit.CandelaPerSquareMeter => _value,
                        LuminanceUnit.CenticandelaPerSquareMeter => (_value) * 1e-2d,
                        LuminanceUnit.DecicandelaPerSquareMeter => (_value) * 1e-1d,
                        LuminanceUnit.KilocandelaPerSquareMeter => (_value) * 1e3d,
                        LuminanceUnit.MicrocandelaPerSquareMeter => (_value) * 1e-6d,
                        LuminanceUnit.MillicandelaPerSquareMeter => (_value) * 1e-3d,
                        LuminanceUnit.NanocandelaPerSquareMeter => (_value) * 1e-9d,
                        LuminanceUnit.Nit => _value,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(LuminanceUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        LuminanceUnit.CandelaPerSquareFoot => baseUnitValue * 9.290304e-2,
                        LuminanceUnit.CandelaPerSquareInch => baseUnitValue * 0.00064516,
                        LuminanceUnit.CandelaPerSquareMeter => baseUnitValue,
                        LuminanceUnit.CenticandelaPerSquareMeter => (baseUnitValue) / 1e-2d,
                        LuminanceUnit.DecicandelaPerSquareMeter => (baseUnitValue) / 1e-1d,
                        LuminanceUnit.KilocandelaPerSquareMeter => (baseUnitValue) / 1e3d,
                        LuminanceUnit.MicrocandelaPerSquareMeter => (baseUnitValue) / 1e-6d,
                        LuminanceUnit.MillicandelaPerSquareMeter => (baseUnitValue) / 1e-3d,
                        LuminanceUnit.NanocandelaPerSquareMeter => (baseUnitValue) / 1e-9d,
                        LuminanceUnit.Nit => baseUnitValue,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

