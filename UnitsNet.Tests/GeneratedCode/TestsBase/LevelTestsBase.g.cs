//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Level.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LevelTestsBase : QuantityTestsBase
    {
        protected abstract double DecibelsInOneDecibel { get; }
        protected abstract double NepersInOneDecibel { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double DecibelsTolerance { get { return 1e-5; } }
        protected virtual double NepersTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(LevelUnit unit)
        {
            return unit switch
            {
                LevelUnit.Decibel => (DecibelsInOneDecibel, DecibelsTolerance),
                LevelUnit.Neper => (NepersInOneDecibel, NepersTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { LevelUnit.Decibel },
            new object[] { LevelUnit.Neper },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Level();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(LevelUnit.Decibel, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Level(double.PositiveInfinity, LevelUnit.Decibel));
            var exception2 = Record.Exception(() => new Level(double.NegativeInfinity, LevelUnit.Decibel));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Level(double.NaN, LevelUnit.Decibel));

            Assert.Null(exception);
        }

        [Fact]
        public void Level_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            LevelUnit[] unitsOrderedByName = EnumHelper.GetValues<LevelUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new Level(1, LevelUnit.Decibel);

            QuantityInfo<Level, LevelUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Level", quantityInfo.Name);
            Assert.Equal(Level.Zero, quantityInfo.Zero);
            Assert.Equal(Level.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Level.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<LevelUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void LevelInfo_CreateWithCustomUnitInfos()
        {
            LevelUnit[] expectedUnits = [LevelUnit.Decibel];

            Level.LevelInfo quantityInfo = Level.LevelInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Level", quantityInfo.Name);
            Assert.Equal(Level.Zero, quantityInfo.Zero);
            Assert.Equal(Level.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void DecibelToLevelUnits()
        {
            Level decibel = Level.FromDecibels(1);
            AssertEx.EqualTolerance(DecibelsInOneDecibel, decibel.Decibels, DecibelsTolerance);
            AssertEx.EqualTolerance(NepersInOneDecibel, decibel.Nepers, NepersTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<LevelUnit>(), unit =>
            {
                var quantity = Level.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromDecibels_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Level.FromDecibels(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Level.FromDecibels(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromDecibels_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Level.FromDecibels(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var decibel = Level.FromDecibels(1);
            AssertEx.EqualTolerance(DecibelsInOneDecibel, decibel.As(LevelUnit.Decibel), DecibelsTolerance);
            AssertEx.EqualTolerance(NepersInOneDecibel, decibel.As(LevelUnit.Neper), NepersTolerance);
        }

        [Fact]
        public void As_UnitSystem_ReturnsValueInDimensionlessUnit()
        {
            var quantity = new Level(value: 1, unit: LevelUnit.Decibel);

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(quantity.Value, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Level(value: 1, unit: Level.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void ToUnit_UnitSystem_ReturnsValueInDimensionlessUnit()
        {
            Assert.Multiple(() =>
            {
                var quantity = new Level(value: 1, unit: LevelUnit.Decibel);

                Level convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(LevelUnit.Decibel, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<LevelUnit> quantity = new Level(value: 1, unit: LevelUnit.Decibel);

                IQuantity<LevelUnit> convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(LevelUnit.Decibel, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantity = new Level(value: 1, unit: LevelUnit.Decibel);

                IQuantity convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(LevelUnit.Decibel, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Level(value: 1, unit: Level.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<LevelUnit> quantity = new Level(value: 1, unit: Level.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Level(value: 1, unit: Level.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 dB", LevelUnit.Decibel, 4.2)]
        [InlineData("en-US", "4.2 Np", LevelUnit.Neper, 4.2)]
        public void Parse(string culture, string quantityString, LevelUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Level.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 dB", LevelUnit.Decibel, 4.2)]
        [InlineData("en-US", "4.2 Np", LevelUnit.Neper, 4.2)]
        public void TryParse(string culture, string quantityString, LevelUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Level.TryParse(quantityString, out Level parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("dB", LevelUnit.Decibel)]
        [InlineData("Np", LevelUnit.Neper)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, LevelUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            LevelUnit parsedUnit = Level.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("dB", LevelUnit.Decibel)]
        [InlineData("Np", LevelUnit.Neper)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, LevelUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            LevelUnit parsedUnit = Level.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "dB", LevelUnit.Decibel)]
        [InlineData("en-US", "Np", LevelUnit.Neper)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, LevelUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            LevelUnit parsedUnit = Level.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "dB", LevelUnit.Decibel)]
        [InlineData("en-US", "Np", LevelUnit.Neper)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, LevelUnit expectedUnit)
        {
            LevelUnit parsedUnit = Level.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("dB", LevelUnit.Decibel)]
        [InlineData("Np", LevelUnit.Neper)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, LevelUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Level.TryParseUnit(abbreviation, out LevelUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("dB", LevelUnit.Decibel)]
        [InlineData("Np", LevelUnit.Neper)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, LevelUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Level.TryParseUnit(abbreviation, out LevelUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "dB", LevelUnit.Decibel)]
        [InlineData("en-US", "Np", LevelUnit.Neper)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, LevelUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Level.TryParseUnit(abbreviation, out LevelUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "dB", LevelUnit.Decibel)]
        [InlineData("en-US", "Np", LevelUnit.Neper)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, LevelUnit expectedUnit)
        {
            Assert.True(Level.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out LevelUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", LevelUnit.Decibel, "dB")]
        [InlineData("en-US", LevelUnit.Neper, "Np")]
        public void GetAbbreviationForCulture(string culture, LevelUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Level.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Level.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Level.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(LevelUnit unit)
        {
            var inBaseUnits = Level.From(1.0, Level.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(LevelUnit unit)
        {
            var quantity = Level.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(LevelUnit unit)
        {
            Assert.All(Level.Units.Where(u => u != Level.BaseUnit), fromUnit =>
            {
                var quantity = Level.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(LevelUnit unit)
        {
            var quantity = default(Level);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(LevelUnit unit)
        {
            var quantity = Level.From(3, Level.BaseUnit);
            Level expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<LevelUnit> quantityToConvert = quantity;
                IQuantity<LevelUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Level decibel = Level.FromDecibels(3);
            Assert.Equal(3, Level.FromDecibels(decibel.Decibels).Decibels);
            Assert.Equal(3, Level.FromNepers(decibel.Nepers).Decibels);
        }

        [Fact]
        public void LogarithmicArithmeticOperators()
        {
            Level v = Level.FromDecibels(40);
            Assert.Equal(-40, -v.Decibels);
            AssertLogarithmicAddition();
            AssertLogarithmicSubtraction();
            Assert.Equal(50, (v * 10).Decibels);
            Assert.Equal(50, (10 * v).Decibels);
            Assert.Equal(35, (v / 5).Decibels);
            Assert.Equal(35, v / Level.FromDecibels(5));
        }

        protected abstract void AssertLogarithmicAddition();

        protected abstract void AssertLogarithmicSubtraction();

        [Fact]
        public void ComparisonOperators()
        {
            Level oneDecibel = Level.FromDecibels(1);
            Level twoDecibels = Level.FromDecibels(2);

            Assert.True(oneDecibel < twoDecibels);
            Assert.True(oneDecibel <= twoDecibels);
            Assert.True(twoDecibels > oneDecibel);
            Assert.True(twoDecibels >= oneDecibel);

            Assert.False(oneDecibel > twoDecibels);
            Assert.False(oneDecibel >= twoDecibels);
            Assert.False(twoDecibels < oneDecibel);
            Assert.False(twoDecibels <= oneDecibel);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Level decibel = Level.FromDecibels(1);
            Assert.Equal(0, decibel.CompareTo(decibel));
            Assert.True(decibel.CompareTo(Level.Zero) > 0);
            Assert.True(Level.Zero.CompareTo(decibel) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Level decibel = Level.FromDecibels(1);
            Assert.Throws<ArgumentException>(() => decibel.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Level decibel = Level.FromDecibels(1);
            Assert.Throws<ArgumentNullException>(() => decibel.CompareTo(null));
        }

        [Theory]
        [InlineData(1, LevelUnit.Decibel, 1, LevelUnit.Decibel, true)]  // Same value and unit.
        [InlineData(1, LevelUnit.Decibel, 2, LevelUnit.Decibel, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, LevelUnit unitA, double valueB, LevelUnit unitB, bool expectEqual)
        {
            var a = new Level(valueA, unitA);
            var b = new Level(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Level.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Level decibel = Level.FromDecibels(1);
            Assert.False(decibel.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Level decibel = Level.FromDecibels(1);
            Assert.False(decibel.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_Logarithmic_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Level.FromDecibels(firstValue);
            var otherQuantity = Level.FromDecibels(secondValue);
            Level maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Level.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
            // note: it's currently not possible to test this due to the rounding error from (quantity - otherQuantity)
            // Assert.True(quantity.Equals(otherQuantity, maxTolerance));
        }

        [Fact]
        public void Equals_Logarithmic_WithNegativeTolerance_DoesNotThrowArgumentOutOfRangeException()
        {
            // note: unlike with vector quantities- a small tolerance maybe positive in one unit and negative in another
            var quantity = Level.FromDecibels(1);
            var negativeTolerance = Level.FromDecibels(-1);
            Assert.True(quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<LevelUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Level.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Level.Info.Units, Level.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Level.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 dB", new Level(1, LevelUnit.Decibel).ToString());
            Assert.Equal("1 Np", new Level(1, LevelUnit.Neper).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 dB", new Level(1, LevelUnit.Decibel).ToString(swedishCulture));
            Assert.Equal("1 Np", new Level(1, LevelUnit.Neper).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 dB", new Level(0.123456, LevelUnit.Decibel).ToString("s1"));
            Assert.Equal("0.12 dB", new Level(0.123456, LevelUnit.Decibel).ToString("s2"));
            Assert.Equal("0.123 dB", new Level(0.123456, LevelUnit.Decibel).ToString("s3"));
            Assert.Equal("0.1235 dB", new Level(0.123456, LevelUnit.Decibel).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 dB", new Level(0.123456, LevelUnit.Decibel).ToString("s1", culture));
            Assert.Equal("0.12 dB", new Level(0.123456, LevelUnit.Decibel).ToString("s2", culture));
            Assert.Equal("0.123 dB", new Level(0.123456, LevelUnit.Decibel).ToString("s3", culture));
            Assert.Equal("0.1235 dB", new Level(0.123456, LevelUnit.Decibel).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Level.FromDecibels(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Level.FromDecibels(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Level.FromDecibels(1.0);
            var expected = Comparison.GetHashCode(typeof(Level), quantity.As(Level.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Level.FromDecibels(value);
            Assert.Equal(Level.FromDecibels(-value), -quantity);
        }
    }
}
