//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of RadiationExposure.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class RadiationExposureTestsBase : QuantityTestsBase
    {
        protected abstract double CoulombsPerKilogramInOneCoulombPerKilogram { get; }
        protected abstract double MicrocoulombsPerKilogramInOneCoulombPerKilogram { get; }
        protected abstract double MicroroentgensInOneCoulombPerKilogram { get; }
        protected abstract double MillicoulombsPerKilogramInOneCoulombPerKilogram { get; }
        protected abstract double MilliroentgensInOneCoulombPerKilogram { get; }
        protected abstract double NanocoulombsPerKilogramInOneCoulombPerKilogram { get; }
        protected abstract double PicocoulombsPerKilogramInOneCoulombPerKilogram { get; }
        protected abstract double RoentgensInOneCoulombPerKilogram { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CoulombsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MicrocoulombsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MicroroentgensTolerance { get { return 1e-5; } }
        protected virtual double MillicoulombsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double MilliroentgensTolerance { get { return 1e-5; } }
        protected virtual double NanocoulombsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double PicocoulombsPerKilogramTolerance { get { return 1e-5; } }
        protected virtual double RoentgensTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(RadiationExposureUnit unit)
        {
            return unit switch
            {
                RadiationExposureUnit.CoulombPerKilogram => (CoulombsPerKilogramInOneCoulombPerKilogram, CoulombsPerKilogramTolerance),
                RadiationExposureUnit.MicrocoulombPerKilogram => (MicrocoulombsPerKilogramInOneCoulombPerKilogram, MicrocoulombsPerKilogramTolerance),
                RadiationExposureUnit.Microroentgen => (MicroroentgensInOneCoulombPerKilogram, MicroroentgensTolerance),
                RadiationExposureUnit.MillicoulombPerKilogram => (MillicoulombsPerKilogramInOneCoulombPerKilogram, MillicoulombsPerKilogramTolerance),
                RadiationExposureUnit.Milliroentgen => (MilliroentgensInOneCoulombPerKilogram, MilliroentgensTolerance),
                RadiationExposureUnit.NanocoulombPerKilogram => (NanocoulombsPerKilogramInOneCoulombPerKilogram, NanocoulombsPerKilogramTolerance),
                RadiationExposureUnit.PicocoulombPerKilogram => (PicocoulombsPerKilogramInOneCoulombPerKilogram, PicocoulombsPerKilogramTolerance),
                RadiationExposureUnit.Roentgen => (RoentgensInOneCoulombPerKilogram, RoentgensTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { RadiationExposureUnit.CoulombPerKilogram },
            new object[] { RadiationExposureUnit.MicrocoulombPerKilogram },
            new object[] { RadiationExposureUnit.Microroentgen },
            new object[] { RadiationExposureUnit.MillicoulombPerKilogram },
            new object[] { RadiationExposureUnit.Milliroentgen },
            new object[] { RadiationExposureUnit.NanocoulombPerKilogram },
            new object[] { RadiationExposureUnit.PicocoulombPerKilogram },
            new object[] { RadiationExposureUnit.Roentgen },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new RadiationExposure();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(RadiationExposureUnit.CoulombPerKilogram, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new RadiationExposure(double.PositiveInfinity, RadiationExposureUnit.CoulombPerKilogram));
            var exception2 = Record.Exception(() => new RadiationExposure(double.NegativeInfinity, RadiationExposureUnit.CoulombPerKilogram));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new RadiationExposure(double.NaN, RadiationExposureUnit.CoulombPerKilogram));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new RadiationExposure(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new RadiationExposure(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new RadiationExposure(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void RadiationExposure_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            RadiationExposureUnit[] unitsOrderedByName = EnumHelper.GetValues<RadiationExposureUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new RadiationExposure(1, RadiationExposureUnit.CoulombPerKilogram);

            QuantityInfo<RadiationExposure, RadiationExposureUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("RadiationExposure", quantityInfo.Name);
            Assert.Equal(RadiationExposure.Zero, quantityInfo.Zero);
            Assert.Equal(RadiationExposure.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(RadiationExposure.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<RadiationExposureUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void RadiationExposureInfo_CreateWithCustomUnitInfos()
        {
            RadiationExposureUnit[] expectedUnits = [RadiationExposureUnit.CoulombPerKilogram];

            RadiationExposure.RadiationExposureInfo quantityInfo = RadiationExposure.RadiationExposureInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("RadiationExposure", quantityInfo.Name);
            Assert.Equal(RadiationExposure.Zero, quantityInfo.Zero);
            Assert.Equal(RadiationExposure.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void CoulombPerKilogramToRadiationExposureUnits()
        {
            RadiationExposure coulombperkilogram = RadiationExposure.FromCoulombsPerKilogram(1);
            AssertEx.EqualTolerance(CoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.CoulombsPerKilogram, CoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrocoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.MicrocoulombsPerKilogram, MicrocoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(MicroroentgensInOneCoulombPerKilogram, coulombperkilogram.Microroentgens, MicroroentgensTolerance);
            AssertEx.EqualTolerance(MillicoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.MillicoulombsPerKilogram, MillicoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(MilliroentgensInOneCoulombPerKilogram, coulombperkilogram.Milliroentgens, MilliroentgensTolerance);
            AssertEx.EqualTolerance(NanocoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.NanocoulombsPerKilogram, NanocoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(PicocoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.PicocoulombsPerKilogram, PicocoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(RoentgensInOneCoulombPerKilogram, coulombperkilogram.Roentgens, RoentgensTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<RadiationExposureUnit>(), unit =>
            {
                var quantity = RadiationExposure.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromCoulombsPerKilogram_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => RadiationExposure.FromCoulombsPerKilogram(double.PositiveInfinity));
            var exception2 = Record.Exception(() => RadiationExposure.FromCoulombsPerKilogram(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromCoulombsPerKilogram_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => RadiationExposure.FromCoulombsPerKilogram(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var coulombperkilogram = RadiationExposure.FromCoulombsPerKilogram(1);
            AssertEx.EqualTolerance(CoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.As(RadiationExposureUnit.CoulombPerKilogram), CoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(MicrocoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.As(RadiationExposureUnit.MicrocoulombPerKilogram), MicrocoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(MicroroentgensInOneCoulombPerKilogram, coulombperkilogram.As(RadiationExposureUnit.Microroentgen), MicroroentgensTolerance);
            AssertEx.EqualTolerance(MillicoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.As(RadiationExposureUnit.MillicoulombPerKilogram), MillicoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(MilliroentgensInOneCoulombPerKilogram, coulombperkilogram.As(RadiationExposureUnit.Milliroentgen), MilliroentgensTolerance);
            AssertEx.EqualTolerance(NanocoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.As(RadiationExposureUnit.NanocoulombPerKilogram), NanocoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(PicocoulombsPerKilogramInOneCoulombPerKilogram, coulombperkilogram.As(RadiationExposureUnit.PicocoulombPerKilogram), PicocoulombsPerKilogramTolerance);
            AssertEx.EqualTolerance(RoentgensInOneCoulombPerKilogram, coulombperkilogram.As(RadiationExposureUnit.Roentgen), RoentgensTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = RadiationExposure.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
            var expectedValue = quantity.As(RadiationExposure.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
            var expectedUnit = RadiationExposure.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                RadiationExposure quantityToConvert = quantity;

                RadiationExposure convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<RadiationExposureUnit> quantityToConvert = quantity;

                IQuantity<RadiationExposureUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<RadiationExposureUnit> quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<RadiationExposureUnit> quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new RadiationExposure(value: 1, unit: RadiationExposure.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 C/kg", RadiationExposureUnit.CoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 µR", RadiationExposureUnit.Microroentgen, 4.2)]
        [InlineData("en-US", "4.2 mC/kg", RadiationExposureUnit.MillicoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 mR", RadiationExposureUnit.Milliroentgen, 4.2)]
        [InlineData("en-US", "4.2 nC/kg", RadiationExposureUnit.NanocoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 pC/kg", RadiationExposureUnit.PicocoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 R", RadiationExposureUnit.Roentgen, 4.2)]
        public void Parse(string culture, string quantityString, RadiationExposureUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = RadiationExposure.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 C/kg", RadiationExposureUnit.CoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 µR", RadiationExposureUnit.Microroentgen, 4.2)]
        [InlineData("en-US", "4.2 mC/kg", RadiationExposureUnit.MillicoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 mR", RadiationExposureUnit.Milliroentgen, 4.2)]
        [InlineData("en-US", "4.2 nC/kg", RadiationExposureUnit.NanocoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 pC/kg", RadiationExposureUnit.PicocoulombPerKilogram, 4.2)]
        [InlineData("en-US", "4.2 R", RadiationExposureUnit.Roentgen, 4.2)]
        public void TryParse(string culture, string quantityString, RadiationExposureUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(RadiationExposure.TryParse(quantityString, out RadiationExposure parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("C/kg", RadiationExposureUnit.CoulombPerKilogram)]
        [InlineData("µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram)]
        [InlineData("µR", RadiationExposureUnit.Microroentgen)]
        [InlineData("mC/kg", RadiationExposureUnit.MillicoulombPerKilogram)]
        [InlineData("mR", RadiationExposureUnit.Milliroentgen)]
        [InlineData("nC/kg", RadiationExposureUnit.NanocoulombPerKilogram)]
        [InlineData("pC/kg", RadiationExposureUnit.PicocoulombPerKilogram)]
        [InlineData("R", RadiationExposureUnit.Roentgen)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RadiationExposureUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            RadiationExposureUnit parsedUnit = RadiationExposure.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("C/kg", RadiationExposureUnit.CoulombPerKilogram)]
        [InlineData("µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram)]
        [InlineData("µR", RadiationExposureUnit.Microroentgen)]
        [InlineData("mC/kg", RadiationExposureUnit.MillicoulombPerKilogram)]
        [InlineData("mR", RadiationExposureUnit.Milliroentgen)]
        [InlineData("nC/kg", RadiationExposureUnit.NanocoulombPerKilogram)]
        [InlineData("pC/kg", RadiationExposureUnit.PicocoulombPerKilogram)]
        [InlineData("R", RadiationExposureUnit.Roentgen)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RadiationExposureUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            RadiationExposureUnit parsedUnit = RadiationExposure.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "C/kg", RadiationExposureUnit.CoulombPerKilogram)]
        [InlineData("en-US", "µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram)]
        [InlineData("en-US", "µR", RadiationExposureUnit.Microroentgen)]
        [InlineData("en-US", "mC/kg", RadiationExposureUnit.MillicoulombPerKilogram)]
        [InlineData("en-US", "mR", RadiationExposureUnit.Milliroentgen)]
        [InlineData("en-US", "nC/kg", RadiationExposureUnit.NanocoulombPerKilogram)]
        [InlineData("en-US", "pC/kg", RadiationExposureUnit.PicocoulombPerKilogram)]
        [InlineData("en-US", "R", RadiationExposureUnit.Roentgen)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, RadiationExposureUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            RadiationExposureUnit parsedUnit = RadiationExposure.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "C/kg", RadiationExposureUnit.CoulombPerKilogram)]
        [InlineData("en-US", "µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram)]
        [InlineData("en-US", "µR", RadiationExposureUnit.Microroentgen)]
        [InlineData("en-US", "mC/kg", RadiationExposureUnit.MillicoulombPerKilogram)]
        [InlineData("en-US", "mR", RadiationExposureUnit.Milliroentgen)]
        [InlineData("en-US", "nC/kg", RadiationExposureUnit.NanocoulombPerKilogram)]
        [InlineData("en-US", "pC/kg", RadiationExposureUnit.PicocoulombPerKilogram)]
        [InlineData("en-US", "R", RadiationExposureUnit.Roentgen)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, RadiationExposureUnit expectedUnit)
        {
            RadiationExposureUnit parsedUnit = RadiationExposure.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("C/kg", RadiationExposureUnit.CoulombPerKilogram)]
        [InlineData("µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram)]
        [InlineData("µR", RadiationExposureUnit.Microroentgen)]
        [InlineData("mC/kg", RadiationExposureUnit.MillicoulombPerKilogram)]
        [InlineData("mR", RadiationExposureUnit.Milliroentgen)]
        [InlineData("nC/kg", RadiationExposureUnit.NanocoulombPerKilogram)]
        [InlineData("pC/kg", RadiationExposureUnit.PicocoulombPerKilogram)]
        [InlineData("R", RadiationExposureUnit.Roentgen)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, RadiationExposureUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(RadiationExposure.TryParseUnit(abbreviation, out RadiationExposureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("C/kg", RadiationExposureUnit.CoulombPerKilogram)]
        [InlineData("µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram)]
        [InlineData("µR", RadiationExposureUnit.Microroentgen)]
        [InlineData("mC/kg", RadiationExposureUnit.MillicoulombPerKilogram)]
        [InlineData("mR", RadiationExposureUnit.Milliroentgen)]
        [InlineData("nC/kg", RadiationExposureUnit.NanocoulombPerKilogram)]
        [InlineData("pC/kg", RadiationExposureUnit.PicocoulombPerKilogram)]
        [InlineData("R", RadiationExposureUnit.Roentgen)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, RadiationExposureUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(RadiationExposure.TryParseUnit(abbreviation, out RadiationExposureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "C/kg", RadiationExposureUnit.CoulombPerKilogram)]
        [InlineData("en-US", "µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram)]
        [InlineData("en-US", "µR", RadiationExposureUnit.Microroentgen)]
        [InlineData("en-US", "mC/kg", RadiationExposureUnit.MillicoulombPerKilogram)]
        [InlineData("en-US", "mR", RadiationExposureUnit.Milliroentgen)]
        [InlineData("en-US", "nC/kg", RadiationExposureUnit.NanocoulombPerKilogram)]
        [InlineData("en-US", "pC/kg", RadiationExposureUnit.PicocoulombPerKilogram)]
        [InlineData("en-US", "R", RadiationExposureUnit.Roentgen)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, RadiationExposureUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(RadiationExposure.TryParseUnit(abbreviation, out RadiationExposureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "C/kg", RadiationExposureUnit.CoulombPerKilogram)]
        [InlineData("en-US", "µC/kg", RadiationExposureUnit.MicrocoulombPerKilogram)]
        [InlineData("en-US", "µR", RadiationExposureUnit.Microroentgen)]
        [InlineData("en-US", "mC/kg", RadiationExposureUnit.MillicoulombPerKilogram)]
        [InlineData("en-US", "mR", RadiationExposureUnit.Milliroentgen)]
        [InlineData("en-US", "nC/kg", RadiationExposureUnit.NanocoulombPerKilogram)]
        [InlineData("en-US", "pC/kg", RadiationExposureUnit.PicocoulombPerKilogram)]
        [InlineData("en-US", "R", RadiationExposureUnit.Roentgen)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, RadiationExposureUnit expectedUnit)
        {
            Assert.True(RadiationExposure.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out RadiationExposureUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", RadiationExposureUnit.CoulombPerKilogram, "C/kg")]
        [InlineData("en-US", RadiationExposureUnit.MicrocoulombPerKilogram, "µC/kg")]
        [InlineData("en-US", RadiationExposureUnit.Microroentgen, "µR")]
        [InlineData("en-US", RadiationExposureUnit.MillicoulombPerKilogram, "mC/kg")]
        [InlineData("en-US", RadiationExposureUnit.Milliroentgen, "mR")]
        [InlineData("en-US", RadiationExposureUnit.NanocoulombPerKilogram, "nC/kg")]
        [InlineData("en-US", RadiationExposureUnit.PicocoulombPerKilogram, "pC/kg")]
        [InlineData("en-US", RadiationExposureUnit.Roentgen, "R")]
        public void GetAbbreviationForCulture(string culture, RadiationExposureUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = RadiationExposure.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(RadiationExposure.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = RadiationExposure.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(RadiationExposureUnit unit)
        {
            var inBaseUnits = RadiationExposure.From(1.0, RadiationExposure.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(RadiationExposureUnit unit)
        {
            var quantity = RadiationExposure.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(RadiationExposureUnit unit)
        {
            Assert.All(RadiationExposure.Units.Where(u => u != RadiationExposure.BaseUnit), fromUnit =>
            {
                var quantity = RadiationExposure.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(RadiationExposureUnit unit)
        {
            var quantity = default(RadiationExposure);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(RadiationExposureUnit unit)
        {
            var quantity = RadiationExposure.From(3, RadiationExposure.BaseUnit);
            RadiationExposure expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<RadiationExposureUnit> quantityToConvert = quantity;
                IQuantity<RadiationExposureUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            RadiationExposure coulombperkilogram = RadiationExposure.FromCoulombsPerKilogram(3);
            Assert.Equal(3, RadiationExposure.FromCoulombsPerKilogram(coulombperkilogram.CoulombsPerKilogram).CoulombsPerKilogram);
            Assert.Equal(3, RadiationExposure.FromMicrocoulombsPerKilogram(coulombperkilogram.MicrocoulombsPerKilogram).CoulombsPerKilogram);
            Assert.Equal(3, RadiationExposure.FromMicroroentgens(coulombperkilogram.Microroentgens).CoulombsPerKilogram);
            Assert.Equal(3, RadiationExposure.FromMillicoulombsPerKilogram(coulombperkilogram.MillicoulombsPerKilogram).CoulombsPerKilogram);
            Assert.Equal(3, RadiationExposure.FromMilliroentgens(coulombperkilogram.Milliroentgens).CoulombsPerKilogram);
            Assert.Equal(3, RadiationExposure.FromNanocoulombsPerKilogram(coulombperkilogram.NanocoulombsPerKilogram).CoulombsPerKilogram);
            Assert.Equal(3, RadiationExposure.FromPicocoulombsPerKilogram(coulombperkilogram.PicocoulombsPerKilogram).CoulombsPerKilogram);
            Assert.Equal(3, RadiationExposure.FromRoentgens(coulombperkilogram.Roentgens).CoulombsPerKilogram);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            RadiationExposure v = RadiationExposure.FromCoulombsPerKilogram(1);
            Assert.Equal(-1, -v.CoulombsPerKilogram);
            Assert.Equal(2, (RadiationExposure.FromCoulombsPerKilogram(3) - v).CoulombsPerKilogram);
            Assert.Equal(2, (v + v).CoulombsPerKilogram);
            Assert.Equal(10, (v * 10).CoulombsPerKilogram);
            Assert.Equal(10, (10 * v).CoulombsPerKilogram);
            Assert.Equal(2, (RadiationExposure.FromCoulombsPerKilogram(10) / 5).CoulombsPerKilogram);
            Assert.Equal(2, RadiationExposure.FromCoulombsPerKilogram(10) / RadiationExposure.FromCoulombsPerKilogram(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            RadiationExposure oneCoulombPerKilogram = RadiationExposure.FromCoulombsPerKilogram(1);
            RadiationExposure twoCoulombsPerKilogram = RadiationExposure.FromCoulombsPerKilogram(2);

            Assert.True(oneCoulombPerKilogram < twoCoulombsPerKilogram);
            Assert.True(oneCoulombPerKilogram <= twoCoulombsPerKilogram);
            Assert.True(twoCoulombsPerKilogram > oneCoulombPerKilogram);
            Assert.True(twoCoulombsPerKilogram >= oneCoulombPerKilogram);

            Assert.False(oneCoulombPerKilogram > twoCoulombsPerKilogram);
            Assert.False(oneCoulombPerKilogram >= twoCoulombsPerKilogram);
            Assert.False(twoCoulombsPerKilogram < oneCoulombPerKilogram);
            Assert.False(twoCoulombsPerKilogram <= oneCoulombPerKilogram);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            RadiationExposure coulombperkilogram = RadiationExposure.FromCoulombsPerKilogram(1);
            Assert.Equal(0, coulombperkilogram.CompareTo(coulombperkilogram));
            Assert.True(coulombperkilogram.CompareTo(RadiationExposure.Zero) > 0);
            Assert.True(RadiationExposure.Zero.CompareTo(coulombperkilogram) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            RadiationExposure coulombperkilogram = RadiationExposure.FromCoulombsPerKilogram(1);
            Assert.Throws<ArgumentException>(() => coulombperkilogram.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            RadiationExposure coulombperkilogram = RadiationExposure.FromCoulombsPerKilogram(1);
            Assert.Throws<ArgumentNullException>(() => coulombperkilogram.CompareTo(null));
        }

        [Theory]
        [InlineData(1, RadiationExposureUnit.CoulombPerKilogram, 1, RadiationExposureUnit.CoulombPerKilogram, true)]  // Same value and unit.
        [InlineData(1, RadiationExposureUnit.CoulombPerKilogram, 2, RadiationExposureUnit.CoulombPerKilogram, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, RadiationExposureUnit unitA, double valueB, RadiationExposureUnit unitB, bool expectEqual)
        {
            var a = new RadiationExposure(valueA, unitA);
            var b = new RadiationExposure(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = RadiationExposure.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            RadiationExposure coulombperkilogram = RadiationExposure.FromCoulombsPerKilogram(1);
            Assert.False(coulombperkilogram.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            RadiationExposure coulombperkilogram = RadiationExposure.FromCoulombsPerKilogram(1);
            Assert.False(coulombperkilogram.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = RadiationExposure.FromCoulombsPerKilogram(firstValue);
            var otherQuantity = RadiationExposure.FromCoulombsPerKilogram(secondValue);
            RadiationExposure maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, RadiationExposure.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = RadiationExposure.FromCoulombsPerKilogram(1);
            var negativeTolerance = RadiationExposure.FromCoulombsPerKilogram(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<RadiationExposureUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(RadiationExposure.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(RadiationExposure.Info.Units, RadiationExposure.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, RadiationExposure.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 C/kg", new RadiationExposure(1, RadiationExposureUnit.CoulombPerKilogram).ToString());
            Assert.Equal("1 µC/kg", new RadiationExposure(1, RadiationExposureUnit.MicrocoulombPerKilogram).ToString());
            Assert.Equal("1 µR", new RadiationExposure(1, RadiationExposureUnit.Microroentgen).ToString());
            Assert.Equal("1 mC/kg", new RadiationExposure(1, RadiationExposureUnit.MillicoulombPerKilogram).ToString());
            Assert.Equal("1 mR", new RadiationExposure(1, RadiationExposureUnit.Milliroentgen).ToString());
            Assert.Equal("1 nC/kg", new RadiationExposure(1, RadiationExposureUnit.NanocoulombPerKilogram).ToString());
            Assert.Equal("1 pC/kg", new RadiationExposure(1, RadiationExposureUnit.PicocoulombPerKilogram).ToString());
            Assert.Equal("1 R", new RadiationExposure(1, RadiationExposureUnit.Roentgen).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 C/kg", new RadiationExposure(1, RadiationExposureUnit.CoulombPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 µC/kg", new RadiationExposure(1, RadiationExposureUnit.MicrocoulombPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 µR", new RadiationExposure(1, RadiationExposureUnit.Microroentgen).ToString(swedishCulture));
            Assert.Equal("1 mC/kg", new RadiationExposure(1, RadiationExposureUnit.MillicoulombPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 mR", new RadiationExposure(1, RadiationExposureUnit.Milliroentgen).ToString(swedishCulture));
            Assert.Equal("1 nC/kg", new RadiationExposure(1, RadiationExposureUnit.NanocoulombPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 pC/kg", new RadiationExposure(1, RadiationExposureUnit.PicocoulombPerKilogram).ToString(swedishCulture));
            Assert.Equal("1 R", new RadiationExposure(1, RadiationExposureUnit.Roentgen).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 C/kg", new RadiationExposure(0.123456, RadiationExposureUnit.CoulombPerKilogram).ToString("s1"));
            Assert.Equal("0.12 C/kg", new RadiationExposure(0.123456, RadiationExposureUnit.CoulombPerKilogram).ToString("s2"));
            Assert.Equal("0.123 C/kg", new RadiationExposure(0.123456, RadiationExposureUnit.CoulombPerKilogram).ToString("s3"));
            Assert.Equal("0.1235 C/kg", new RadiationExposure(0.123456, RadiationExposureUnit.CoulombPerKilogram).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 C/kg", new RadiationExposure(0.123456, RadiationExposureUnit.CoulombPerKilogram).ToString("s1", culture));
            Assert.Equal("0.12 C/kg", new RadiationExposure(0.123456, RadiationExposureUnit.CoulombPerKilogram).ToString("s2", culture));
            Assert.Equal("0.123 C/kg", new RadiationExposure(0.123456, RadiationExposureUnit.CoulombPerKilogram).ToString("s3", culture));
            Assert.Equal("0.1235 C/kg", new RadiationExposure(0.123456, RadiationExposureUnit.CoulombPerKilogram).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = RadiationExposure.FromCoulombsPerKilogram(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = RadiationExposure.FromCoulombsPerKilogram(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = RadiationExposure.FromCoulombsPerKilogram(1.0);
            var expected = Comparison.GetHashCode(typeof(RadiationExposure), quantity.As(RadiationExposure.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = RadiationExposure.FromCoulombsPerKilogram(value);
            Assert.Equal(RadiationExposure.FromCoulombsPerKilogram(-value), -quantity);
        }
    }
}
