//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToBitRate
{
    /// <summary>
    /// A number to BitRate Extensions
    /// </summary>
    public static class NumberToBitRateExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="BitRate.FromBitsPerSecond(double)" />
            public BitRate BitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromBitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromBitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromBytesPerSecond(double)" />
            public BitRate BytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromBytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromBytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromExabitsPerSecond(double)" />
            public BitRate ExabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExabitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromExabitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromExabytesPerSecond(double)" />
            public BitRate ExabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExabytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromExabytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromExaoctetsPerSecond(double)" />
            public BitRate ExaoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExaoctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromExaoctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromExbibitsPerSecond(double)" />
            public BitRate ExbibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExbibitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromExbibitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromExbibytesPerSecond(double)" />
            public BitRate ExbibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExbibytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromExbibytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromExbioctetsPerSecond(double)" />
            public BitRate ExbioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromExbioctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromExbioctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromGibibitsPerSecond(double)" />
            public BitRate GibibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGibibitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromGibibitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromGibibytesPerSecond(double)" />
            public BitRate GibibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGibibytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromGibibytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromGibioctetsPerSecond(double)" />
            public BitRate GibioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGibioctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromGibioctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromGigabitsPerSecond(double)" />
            public BitRate GigabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGigabitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromGigabitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromGigabytesPerSecond(double)" />
            public BitRate GigabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGigabytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromGigabytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromGigaoctetsPerSecond(double)" />
            public BitRate GigaoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromGigaoctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromGigaoctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromKibibitsPerSecond(double)" />
            public BitRate KibibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKibibitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromKibibitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromKibibytesPerSecond(double)" />
            public BitRate KibibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKibibytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromKibibytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromKibioctetsPerSecond(double)" />
            public BitRate KibioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKibioctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromKibioctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromKilobitsPerSecond(double)" />
            public BitRate KilobitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKilobitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromKilobitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromKilobytesPerSecond(double)" />
            public BitRate KilobytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKilobytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromKilobytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromKilooctetsPerSecond(double)" />
            public BitRate KilooctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromKilooctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromKilooctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromMebibitsPerSecond(double)" />
            public BitRate MebibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMebibitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromMebibitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromMebibytesPerSecond(double)" />
            public BitRate MebibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMebibytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromMebibytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromMebioctetsPerSecond(double)" />
            public BitRate MebioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMebioctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromMebioctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromMegabitsPerSecond(double)" />
            public BitRate MegabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMegabitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromMegabitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromMegabytesPerSecond(double)" />
            public BitRate MegabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMegabytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromMegabytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromMegaoctetsPerSecond(double)" />
            public BitRate MegaoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromMegaoctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromMegaoctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromOctetsPerSecond(double)" />
            public BitRate OctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromOctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromOctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromPebibitsPerSecond(double)" />
            public BitRate PebibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPebibitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromPebibitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromPebibytesPerSecond(double)" />
            public BitRate PebibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPebibytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromPebibytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromPebioctetsPerSecond(double)" />
            public BitRate PebioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPebioctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromPebioctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromPetabitsPerSecond(double)" />
            public BitRate PetabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPetabitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromPetabitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromPetabytesPerSecond(double)" />
            public BitRate PetabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPetabytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromPetabytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromPetaoctetsPerSecond(double)" />
            public BitRate PetaoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromPetaoctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromPetaoctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromTebibitsPerSecond(double)" />
            public BitRate TebibitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTebibitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromTebibitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromTebibytesPerSecond(double)" />
            public BitRate TebibytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTebibytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromTebibytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromTebioctetsPerSecond(double)" />
            public BitRate TebioctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTebioctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromTebioctetsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromTerabitsPerSecond(double)" />
            public BitRate TerabitsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTerabitsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromTerabitsPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromTerabytesPerSecond(double)" />
            public BitRate TerabytesPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTerabytesPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromTerabytesPerSecond(value.ToDouble(null));
#endif

            /// <inheritdoc cref="BitRate.FromTeraoctetsPerSecond(double)" />
            public BitRate TeraoctetsPerSecond
#if NET7_0_OR_GREATER
                => BitRate.FromTeraoctetsPerSecond(double.CreateChecked(value));
#else
                => BitRate.FromTeraoctetsPerSecond(value.ToDouble(null));
#endif

        }
    }
}
