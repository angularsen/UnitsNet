//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Angle.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class AngleTestsBase : QuantityTestsBase
    {
        protected abstract double ArcminutesInOneRadian { get; }
        protected abstract double ArcsecondsInOneRadian { get; }
        protected abstract double CentiradiansInOneRadian { get; }
        protected abstract double DeciradiansInOneRadian { get; }
        protected abstract double DegreesInOneRadian { get; }
        protected abstract double GradiansInOneRadian { get; }
        protected abstract double MicrodegreesInOneRadian { get; }
        protected abstract double MicroradiansInOneRadian { get; }
        protected abstract double MillidegreesInOneRadian { get; }
        protected abstract double MilliradiansInOneRadian { get; }
        protected abstract double NanodegreesInOneRadian { get; }
        protected abstract double NanoradiansInOneRadian { get; }
        protected abstract double NatoMilsInOneRadian { get; }
        protected abstract double RadiansInOneRadian { get; }
        protected abstract double RevolutionsInOneRadian { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double ArcminutesTolerance { get { return 1e-5; } }
        protected virtual double ArcsecondsTolerance { get { return 1e-5; } }
        protected virtual double CentiradiansTolerance { get { return 1e-5; } }
        protected virtual double DeciradiansTolerance { get { return 1e-5; } }
        protected virtual double DegreesTolerance { get { return 1e-5; } }
        protected virtual double GradiansTolerance { get { return 1e-5; } }
        protected virtual double MicrodegreesTolerance { get { return 1e-5; } }
        protected virtual double MicroradiansTolerance { get { return 1e-5; } }
        protected virtual double MillidegreesTolerance { get { return 1e-5; } }
        protected virtual double MilliradiansTolerance { get { return 1e-5; } }
        protected virtual double NanodegreesTolerance { get { return 1e-5; } }
        protected virtual double NanoradiansTolerance { get { return 1e-5; } }
        protected virtual double NatoMilsTolerance { get { return 1e-5; } }
        protected virtual double RadiansTolerance { get { return 1e-5; } }
        protected virtual double RevolutionsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(AngleUnit unit)
        {
            return unit switch
            {
                AngleUnit.Arcminute => (ArcminutesInOneRadian, ArcminutesTolerance),
                AngleUnit.Arcsecond => (ArcsecondsInOneRadian, ArcsecondsTolerance),
                AngleUnit.Centiradian => (CentiradiansInOneRadian, CentiradiansTolerance),
                AngleUnit.Deciradian => (DeciradiansInOneRadian, DeciradiansTolerance),
                AngleUnit.Degree => (DegreesInOneRadian, DegreesTolerance),
                AngleUnit.Gradian => (GradiansInOneRadian, GradiansTolerance),
                AngleUnit.Microdegree => (MicrodegreesInOneRadian, MicrodegreesTolerance),
                AngleUnit.Microradian => (MicroradiansInOneRadian, MicroradiansTolerance),
                AngleUnit.Millidegree => (MillidegreesInOneRadian, MillidegreesTolerance),
                AngleUnit.Milliradian => (MilliradiansInOneRadian, MilliradiansTolerance),
                AngleUnit.Nanodegree => (NanodegreesInOneRadian, NanodegreesTolerance),
                AngleUnit.Nanoradian => (NanoradiansInOneRadian, NanoradiansTolerance),
                AngleUnit.NatoMil => (NatoMilsInOneRadian, NatoMilsTolerance),
                AngleUnit.Radian => (RadiansInOneRadian, RadiansTolerance),
                AngleUnit.Revolution => (RevolutionsInOneRadian, RevolutionsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { AngleUnit.Arcminute },
            new object[] { AngleUnit.Arcsecond },
            new object[] { AngleUnit.Centiradian },
            new object[] { AngleUnit.Deciradian },
            new object[] { AngleUnit.Degree },
            new object[] { AngleUnit.Gradian },
            new object[] { AngleUnit.Microdegree },
            new object[] { AngleUnit.Microradian },
            new object[] { AngleUnit.Millidegree },
            new object[] { AngleUnit.Milliradian },
            new object[] { AngleUnit.Nanodegree },
            new object[] { AngleUnit.Nanoradian },
            new object[] { AngleUnit.NatoMil },
            new object[] { AngleUnit.Radian },
            new object[] { AngleUnit.Revolution },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Angle();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(AngleUnit.Radian, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Angle(double.PositiveInfinity, AngleUnit.Radian));
            var exception2 = Record.Exception(() => new Angle(double.NegativeInfinity, AngleUnit.Radian));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Angle(double.NaN, AngleUnit.Radian));

            Assert.Null(exception);
        }

        [Fact]
        public void Angle_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            var quantity = new Angle(1, AngleUnit.Radian);

            QuantityInfo<AngleUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal(Angle.Zero, quantityInfo.Zero);
            Assert.Equal("Angle", quantityInfo.Name);

            var units = Enum.GetValues<AngleUnit>().OrderBy(x => x.ToString()).ToArray();
            var unitNames = units.Select(x => x.ToString());
        }

        [Fact]
        public void RadianToAngleUnits()
        {
            Angle radian = Angle.FromRadians(1);
            AssertEx.EqualTolerance(ArcminutesInOneRadian, radian.Arcminutes, ArcminutesTolerance);
            AssertEx.EqualTolerance(ArcsecondsInOneRadian, radian.Arcseconds, ArcsecondsTolerance);
            AssertEx.EqualTolerance(CentiradiansInOneRadian, radian.Centiradians, CentiradiansTolerance);
            AssertEx.EqualTolerance(DeciradiansInOneRadian, radian.Deciradians, DeciradiansTolerance);
            AssertEx.EqualTolerance(DegreesInOneRadian, radian.Degrees, DegreesTolerance);
            AssertEx.EqualTolerance(GradiansInOneRadian, radian.Gradians, GradiansTolerance);
            AssertEx.EqualTolerance(MicrodegreesInOneRadian, radian.Microdegrees, MicrodegreesTolerance);
            AssertEx.EqualTolerance(MicroradiansInOneRadian, radian.Microradians, MicroradiansTolerance);
            AssertEx.EqualTolerance(MillidegreesInOneRadian, radian.Millidegrees, MillidegreesTolerance);
            AssertEx.EqualTolerance(MilliradiansInOneRadian, radian.Milliradians, MilliradiansTolerance);
            AssertEx.EqualTolerance(NanodegreesInOneRadian, radian.Nanodegrees, NanodegreesTolerance);
            AssertEx.EqualTolerance(NanoradiansInOneRadian, radian.Nanoradians, NanoradiansTolerance);
            AssertEx.EqualTolerance(NatoMilsInOneRadian, radian.NatoMils, NatoMilsTolerance);
            AssertEx.EqualTolerance(RadiansInOneRadian, radian.Radians, RadiansTolerance);
            AssertEx.EqualTolerance(RevolutionsInOneRadian, radian.Revolutions, RevolutionsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            var quantity00 = Angle.From(1, AngleUnit.Arcminute);
            AssertEx.EqualTolerance(1, quantity00.Arcminutes, ArcminutesTolerance);
            Assert.Equal(AngleUnit.Arcminute, quantity00.Unit);

            var quantity01 = Angle.From(1, AngleUnit.Arcsecond);
            AssertEx.EqualTolerance(1, quantity01.Arcseconds, ArcsecondsTolerance);
            Assert.Equal(AngleUnit.Arcsecond, quantity01.Unit);

            var quantity02 = Angle.From(1, AngleUnit.Centiradian);
            AssertEx.EqualTolerance(1, quantity02.Centiradians, CentiradiansTolerance);
            Assert.Equal(AngleUnit.Centiradian, quantity02.Unit);

            var quantity03 = Angle.From(1, AngleUnit.Deciradian);
            AssertEx.EqualTolerance(1, quantity03.Deciradians, DeciradiansTolerance);
            Assert.Equal(AngleUnit.Deciradian, quantity03.Unit);

            var quantity04 = Angle.From(1, AngleUnit.Degree);
            AssertEx.EqualTolerance(1, quantity04.Degrees, DegreesTolerance);
            Assert.Equal(AngleUnit.Degree, quantity04.Unit);

            var quantity05 = Angle.From(1, AngleUnit.Gradian);
            AssertEx.EqualTolerance(1, quantity05.Gradians, GradiansTolerance);
            Assert.Equal(AngleUnit.Gradian, quantity05.Unit);

            var quantity06 = Angle.From(1, AngleUnit.Microdegree);
            AssertEx.EqualTolerance(1, quantity06.Microdegrees, MicrodegreesTolerance);
            Assert.Equal(AngleUnit.Microdegree, quantity06.Unit);

            var quantity07 = Angle.From(1, AngleUnit.Microradian);
            AssertEx.EqualTolerance(1, quantity07.Microradians, MicroradiansTolerance);
            Assert.Equal(AngleUnit.Microradian, quantity07.Unit);

            var quantity08 = Angle.From(1, AngleUnit.Millidegree);
            AssertEx.EqualTolerance(1, quantity08.Millidegrees, MillidegreesTolerance);
            Assert.Equal(AngleUnit.Millidegree, quantity08.Unit);

            var quantity09 = Angle.From(1, AngleUnit.Milliradian);
            AssertEx.EqualTolerance(1, quantity09.Milliradians, MilliradiansTolerance);
            Assert.Equal(AngleUnit.Milliradian, quantity09.Unit);

            var quantity10 = Angle.From(1, AngleUnit.Nanodegree);
            AssertEx.EqualTolerance(1, quantity10.Nanodegrees, NanodegreesTolerance);
            Assert.Equal(AngleUnit.Nanodegree, quantity10.Unit);

            var quantity11 = Angle.From(1, AngleUnit.Nanoradian);
            AssertEx.EqualTolerance(1, quantity11.Nanoradians, NanoradiansTolerance);
            Assert.Equal(AngleUnit.Nanoradian, quantity11.Unit);

            var quantity12 = Angle.From(1, AngleUnit.NatoMil);
            AssertEx.EqualTolerance(1, quantity12.NatoMils, NatoMilsTolerance);
            Assert.Equal(AngleUnit.NatoMil, quantity12.Unit);

            var quantity13 = Angle.From(1, AngleUnit.Radian);
            AssertEx.EqualTolerance(1, quantity13.Radians, RadiansTolerance);
            Assert.Equal(AngleUnit.Radian, quantity13.Unit);

            var quantity14 = Angle.From(1, AngleUnit.Revolution);
            AssertEx.EqualTolerance(1, quantity14.Revolutions, RevolutionsTolerance);
            Assert.Equal(AngleUnit.Revolution, quantity14.Unit);

        }

        [Fact]
        public void FromRadians_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Angle.FromRadians(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Angle.FromRadians(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromRadians_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Angle.FromRadians(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var radian = Angle.FromRadians(1);
            AssertEx.EqualTolerance(ArcminutesInOneRadian, radian.As(AngleUnit.Arcminute), ArcminutesTolerance);
            AssertEx.EqualTolerance(ArcsecondsInOneRadian, radian.As(AngleUnit.Arcsecond), ArcsecondsTolerance);
            AssertEx.EqualTolerance(CentiradiansInOneRadian, radian.As(AngleUnit.Centiradian), CentiradiansTolerance);
            AssertEx.EqualTolerance(DeciradiansInOneRadian, radian.As(AngleUnit.Deciradian), DeciradiansTolerance);
            AssertEx.EqualTolerance(DegreesInOneRadian, radian.As(AngleUnit.Degree), DegreesTolerance);
            AssertEx.EqualTolerance(GradiansInOneRadian, radian.As(AngleUnit.Gradian), GradiansTolerance);
            AssertEx.EqualTolerance(MicrodegreesInOneRadian, radian.As(AngleUnit.Microdegree), MicrodegreesTolerance);
            AssertEx.EqualTolerance(MicroradiansInOneRadian, radian.As(AngleUnit.Microradian), MicroradiansTolerance);
            AssertEx.EqualTolerance(MillidegreesInOneRadian, radian.As(AngleUnit.Millidegree), MillidegreesTolerance);
            AssertEx.EqualTolerance(MilliradiansInOneRadian, radian.As(AngleUnit.Milliradian), MilliradiansTolerance);
            AssertEx.EqualTolerance(NanodegreesInOneRadian, radian.As(AngleUnit.Nanodegree), NanodegreesTolerance);
            AssertEx.EqualTolerance(NanoradiansInOneRadian, radian.As(AngleUnit.Nanoradian), NanoradiansTolerance);
            AssertEx.EqualTolerance(NatoMilsInOneRadian, radian.As(AngleUnit.NatoMil), NatoMilsTolerance);
            AssertEx.EqualTolerance(RadiansInOneRadian, radian.As(AngleUnit.Radian), RadiansTolerance);
            AssertEx.EqualTolerance(RevolutionsInOneRadian, radian.As(AngleUnit.Revolution), RevolutionsTolerance);
        }

        [Fact]
        public void As_UnitSystem_ReturnsValueInDimensionlessUnit()
        {
            var quantity = new Angle(value: 1, unit: AngleUnit.Radian);

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(quantity.Value, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Angle(value: 1, unit: Angle.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void ToUnitSystem_ReturnsValueInDimensionlessUnit()
        {
            Assert.Multiple(() =>
            {
                var quantity = new Angle(value: 1, unit: AngleUnit.Radian);

                Angle convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(AngleUnit.Radian, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<AngleUnit> quantity = new Angle(value: 1, unit: AngleUnit.Radian);

                IQuantity<AngleUnit> convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(AngleUnit.Radian, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantity = new Angle(value: 1, unit: AngleUnit.Radian);

                IQuantity convertedQuantity = quantity.ToUnit(UnitSystem.SI);

                Assert.Equal(AngleUnit.Radian, convertedQuantity.Unit);
                Assert.Equal(quantity.Value, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Angle(value: 1, unit: Angle.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<AngleUnit> quantity = new Angle(value: 1, unit: Angle.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Angle(value: 1, unit: Angle.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 '", AngleUnit.Arcminute, 4.2)]
        [InlineData("en-US", "4.2 arcmin", AngleUnit.Arcminute, 4.2)]
        [InlineData("en-US", "4.2 amin", AngleUnit.Arcminute, 4.2)]
        [InlineData("en-US", "4.2 min", AngleUnit.Arcminute, 4.2)]
        [InlineData("en-US", "4.2 ″", AngleUnit.Arcsecond, 4.2)]
        [InlineData("en-US", "4.2 arcsec", AngleUnit.Arcsecond, 4.2)]
        [InlineData("en-US", "4.2 asec", AngleUnit.Arcsecond, 4.2)]
        [InlineData("en-US", "4.2 sec", AngleUnit.Arcsecond, 4.2)]
        [InlineData("en-US", "4.2 crad", AngleUnit.Centiradian, 4.2)]
        [InlineData("en-US", "4.2 drad", AngleUnit.Deciradian, 4.2)]
        [InlineData("en-US", "4.2 °", AngleUnit.Degree, 4.2)]
        [InlineData("en-US", "4.2 deg", AngleUnit.Degree, 4.2)]
        [InlineData("en-US", "4.2 g", AngleUnit.Gradian, 4.2)]
        [InlineData("en-US", "4.2 µ°", AngleUnit.Microdegree, 4.2)]
        [InlineData("en-US", "4.2 µdeg", AngleUnit.Microdegree, 4.2)]
        [InlineData("en-US", "4.2 µrad", AngleUnit.Microradian, 4.2)]
        [InlineData("en-US", "4.2 m°", AngleUnit.Millidegree, 4.2)]
        [InlineData("en-US", "4.2 mdeg", AngleUnit.Millidegree, 4.2)]
        [InlineData("en-US", "4.2 mrad", AngleUnit.Milliradian, 4.2)]
        [InlineData("en-US", "4.2 n°", AngleUnit.Nanodegree, 4.2)]
        [InlineData("en-US", "4.2 ndeg", AngleUnit.Nanodegree, 4.2)]
        [InlineData("en-US", "4.2 nrad", AngleUnit.Nanoradian, 4.2)]
        [InlineData("en-US", "4.2 mil", AngleUnit.NatoMil, 4.2)]
        [InlineData("en-US", "4.2 rad", AngleUnit.Radian, 4.2)]
        [InlineData("en-US", "4.2 r", AngleUnit.Revolution, 4.2)]
        [InlineData("ru-RU", "4,2 срад", AngleUnit.Centiradian, 4.2)]
        [InlineData("ru-RU", "4,2 драд", AngleUnit.Deciradian, 4.2)]
        [InlineData("ru-RU", "4,2 °", AngleUnit.Degree, 4.2)]
        [InlineData("ru-RU", "4,2 g", AngleUnit.Gradian, 4.2)]
        [InlineData("ru-RU", "4,2 мк°", AngleUnit.Microdegree, 4.2)]
        [InlineData("ru-RU", "4,2 мкрад", AngleUnit.Microradian, 4.2)]
        [InlineData("ru-RU", "4,2 м°", AngleUnit.Millidegree, 4.2)]
        [InlineData("ru-RU", "4,2 мрад", AngleUnit.Milliradian, 4.2)]
        [InlineData("ru-RU", "4,2 н°", AngleUnit.Nanodegree, 4.2)]
        [InlineData("ru-RU", "4,2 нрад", AngleUnit.Nanoradian, 4.2)]
        [InlineData("ru-RU", "4,2 рад", AngleUnit.Radian, 4.2)]
        [InlineData("ru-RU", "4,2 r", AngleUnit.Revolution, 4.2)]
        public void Parse(string culture, string quantityString, AngleUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Angle.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 '", AngleUnit.Arcminute, 4.2)]
        [InlineData("en-US", "4.2 arcmin", AngleUnit.Arcminute, 4.2)]
        [InlineData("en-US", "4.2 amin", AngleUnit.Arcminute, 4.2)]
        [InlineData("en-US", "4.2 min", AngleUnit.Arcminute, 4.2)]
        [InlineData("en-US", "4.2 ″", AngleUnit.Arcsecond, 4.2)]
        [InlineData("en-US", "4.2 arcsec", AngleUnit.Arcsecond, 4.2)]
        [InlineData("en-US", "4.2 asec", AngleUnit.Arcsecond, 4.2)]
        [InlineData("en-US", "4.2 sec", AngleUnit.Arcsecond, 4.2)]
        [InlineData("en-US", "4.2 crad", AngleUnit.Centiradian, 4.2)]
        [InlineData("en-US", "4.2 drad", AngleUnit.Deciradian, 4.2)]
        [InlineData("en-US", "4.2 °", AngleUnit.Degree, 4.2)]
        [InlineData("en-US", "4.2 deg", AngleUnit.Degree, 4.2)]
        [InlineData("en-US", "4.2 g", AngleUnit.Gradian, 4.2)]
        [InlineData("en-US", "4.2 µ°", AngleUnit.Microdegree, 4.2)]
        [InlineData("en-US", "4.2 µdeg", AngleUnit.Microdegree, 4.2)]
        [InlineData("en-US", "4.2 µrad", AngleUnit.Microradian, 4.2)]
        [InlineData("en-US", "4.2 m°", AngleUnit.Millidegree, 4.2)]
        [InlineData("en-US", "4.2 mdeg", AngleUnit.Millidegree, 4.2)]
        [InlineData("en-US", "4.2 mrad", AngleUnit.Milliradian, 4.2)]
        [InlineData("en-US", "4.2 n°", AngleUnit.Nanodegree, 4.2)]
        [InlineData("en-US", "4.2 ndeg", AngleUnit.Nanodegree, 4.2)]
        [InlineData("en-US", "4.2 nrad", AngleUnit.Nanoradian, 4.2)]
        [InlineData("en-US", "4.2 mil", AngleUnit.NatoMil, 4.2)]
        [InlineData("en-US", "4.2 rad", AngleUnit.Radian, 4.2)]
        [InlineData("en-US", "4.2 r", AngleUnit.Revolution, 4.2)]
        [InlineData("ru-RU", "4,2 срад", AngleUnit.Centiradian, 4.2)]
        [InlineData("ru-RU", "4,2 драд", AngleUnit.Deciradian, 4.2)]
        [InlineData("ru-RU", "4,2 °", AngleUnit.Degree, 4.2)]
        [InlineData("ru-RU", "4,2 g", AngleUnit.Gradian, 4.2)]
        [InlineData("ru-RU", "4,2 мк°", AngleUnit.Microdegree, 4.2)]
        [InlineData("ru-RU", "4,2 мкрад", AngleUnit.Microradian, 4.2)]
        [InlineData("ru-RU", "4,2 м°", AngleUnit.Millidegree, 4.2)]
        [InlineData("ru-RU", "4,2 мрад", AngleUnit.Milliradian, 4.2)]
        [InlineData("ru-RU", "4,2 н°", AngleUnit.Nanodegree, 4.2)]
        [InlineData("ru-RU", "4,2 нрад", AngleUnit.Nanoradian, 4.2)]
        [InlineData("ru-RU", "4,2 рад", AngleUnit.Radian, 4.2)]
        [InlineData("ru-RU", "4,2 r", AngleUnit.Revolution, 4.2)]
        public void TryParse(string culture, string quantityString, AngleUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Angle.TryParse(quantityString, out Angle parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("'", AngleUnit.Arcminute)]
        [InlineData("arcmin", AngleUnit.Arcminute)]
        [InlineData("amin", AngleUnit.Arcminute)]
        [InlineData("min", AngleUnit.Arcminute)]
        [InlineData("″", AngleUnit.Arcsecond)]
        [InlineData("arcsec", AngleUnit.Arcsecond)]
        [InlineData("asec", AngleUnit.Arcsecond)]
        [InlineData("sec", AngleUnit.Arcsecond)]
        [InlineData("crad", AngleUnit.Centiradian)]
        [InlineData("drad", AngleUnit.Deciradian)]
        [InlineData("°", AngleUnit.Degree)]
        [InlineData("deg", AngleUnit.Degree)]
        [InlineData("g", AngleUnit.Gradian)]
        [InlineData("µ°", AngleUnit.Microdegree)]
        [InlineData("µdeg", AngleUnit.Microdegree)]
        [InlineData("µrad", AngleUnit.Microradian)]
        [InlineData("m°", AngleUnit.Millidegree)]
        [InlineData("mdeg", AngleUnit.Millidegree)]
        [InlineData("mrad", AngleUnit.Milliradian)]
        [InlineData("n°", AngleUnit.Nanodegree)]
        [InlineData("ndeg", AngleUnit.Nanodegree)]
        [InlineData("nrad", AngleUnit.Nanoradian)]
        [InlineData("mil", AngleUnit.NatoMil)]
        [InlineData("rad", AngleUnit.Radian)]
        [InlineData("r", AngleUnit.Revolution)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AngleUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            AngleUnit parsedUnit = Angle.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("'", AngleUnit.Arcminute)]
        [InlineData("arcmin", AngleUnit.Arcminute)]
        [InlineData("amin", AngleUnit.Arcminute)]
        [InlineData("min", AngleUnit.Arcminute)]
        [InlineData("″", AngleUnit.Arcsecond)]
        [InlineData("arcsec", AngleUnit.Arcsecond)]
        [InlineData("asec", AngleUnit.Arcsecond)]
        [InlineData("sec", AngleUnit.Arcsecond)]
        [InlineData("crad", AngleUnit.Centiradian)]
        [InlineData("drad", AngleUnit.Deciradian)]
        [InlineData("°", AngleUnit.Degree)]
        [InlineData("deg", AngleUnit.Degree)]
        [InlineData("g", AngleUnit.Gradian)]
        [InlineData("µ°", AngleUnit.Microdegree)]
        [InlineData("µdeg", AngleUnit.Microdegree)]
        [InlineData("µrad", AngleUnit.Microradian)]
        [InlineData("m°", AngleUnit.Millidegree)]
        [InlineData("mdeg", AngleUnit.Millidegree)]
        [InlineData("mrad", AngleUnit.Milliradian)]
        [InlineData("n°", AngleUnit.Nanodegree)]
        [InlineData("ndeg", AngleUnit.Nanodegree)]
        [InlineData("nrad", AngleUnit.Nanoradian)]
        [InlineData("mil", AngleUnit.NatoMil)]
        [InlineData("rad", AngleUnit.Radian)]
        [InlineData("r", AngleUnit.Revolution)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AngleUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            AngleUnit parsedUnit = Angle.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "'", AngleUnit.Arcminute)]
        [InlineData("en-US", "arcmin", AngleUnit.Arcminute)]
        [InlineData("en-US", "amin", AngleUnit.Arcminute)]
        [InlineData("en-US", "min", AngleUnit.Arcminute)]
        [InlineData("en-US", "″", AngleUnit.Arcsecond)]
        [InlineData("en-US", "arcsec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "asec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "sec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "crad", AngleUnit.Centiradian)]
        [InlineData("en-US", "drad", AngleUnit.Deciradian)]
        [InlineData("en-US", "°", AngleUnit.Degree)]
        [InlineData("en-US", "deg", AngleUnit.Degree)]
        [InlineData("en-US", "g", AngleUnit.Gradian)]
        [InlineData("en-US", "µ°", AngleUnit.Microdegree)]
        [InlineData("en-US", "µdeg", AngleUnit.Microdegree)]
        [InlineData("en-US", "µrad", AngleUnit.Microradian)]
        [InlineData("en-US", "m°", AngleUnit.Millidegree)]
        [InlineData("en-US", "mdeg", AngleUnit.Millidegree)]
        [InlineData("en-US", "mrad", AngleUnit.Milliradian)]
        [InlineData("en-US", "n°", AngleUnit.Nanodegree)]
        [InlineData("en-US", "ndeg", AngleUnit.Nanodegree)]
        [InlineData("en-US", "nrad", AngleUnit.Nanoradian)]
        [InlineData("en-US", "mil", AngleUnit.NatoMil)]
        [InlineData("en-US", "rad", AngleUnit.Radian)]
        [InlineData("en-US", "r", AngleUnit.Revolution)]
        [InlineData("ru-RU", "срад", AngleUnit.Centiradian)]
        [InlineData("ru-RU", "драд", AngleUnit.Deciradian)]
        [InlineData("ru-RU", "°", AngleUnit.Degree)]
        [InlineData("ru-RU", "g", AngleUnit.Gradian)]
        [InlineData("ru-RU", "мк°", AngleUnit.Microdegree)]
        [InlineData("ru-RU", "мкрад", AngleUnit.Microradian)]
        [InlineData("ru-RU", "м°", AngleUnit.Millidegree)]
        [InlineData("ru-RU", "мрад", AngleUnit.Milliradian)]
        [InlineData("ru-RU", "н°", AngleUnit.Nanodegree)]
        [InlineData("ru-RU", "нрад", AngleUnit.Nanoradian)]
        [InlineData("ru-RU", "рад", AngleUnit.Radian)]
        [InlineData("ru-RU", "r", AngleUnit.Revolution)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, AngleUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            AngleUnit parsedUnit = Angle.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "'", AngleUnit.Arcminute)]
        [InlineData("en-US", "arcmin", AngleUnit.Arcminute)]
        [InlineData("en-US", "amin", AngleUnit.Arcminute)]
        [InlineData("en-US", "min", AngleUnit.Arcminute)]
        [InlineData("en-US", "″", AngleUnit.Arcsecond)]
        [InlineData("en-US", "arcsec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "asec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "sec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "crad", AngleUnit.Centiradian)]
        [InlineData("en-US", "drad", AngleUnit.Deciradian)]
        [InlineData("en-US", "°", AngleUnit.Degree)]
        [InlineData("en-US", "deg", AngleUnit.Degree)]
        [InlineData("en-US", "g", AngleUnit.Gradian)]
        [InlineData("en-US", "µ°", AngleUnit.Microdegree)]
        [InlineData("en-US", "µdeg", AngleUnit.Microdegree)]
        [InlineData("en-US", "µrad", AngleUnit.Microradian)]
        [InlineData("en-US", "m°", AngleUnit.Millidegree)]
        [InlineData("en-US", "mdeg", AngleUnit.Millidegree)]
        [InlineData("en-US", "mrad", AngleUnit.Milliradian)]
        [InlineData("en-US", "n°", AngleUnit.Nanodegree)]
        [InlineData("en-US", "ndeg", AngleUnit.Nanodegree)]
        [InlineData("en-US", "nrad", AngleUnit.Nanoradian)]
        [InlineData("en-US", "mil", AngleUnit.NatoMil)]
        [InlineData("en-US", "rad", AngleUnit.Radian)]
        [InlineData("en-US", "r", AngleUnit.Revolution)]
        [InlineData("ru-RU", "срад", AngleUnit.Centiradian)]
        [InlineData("ru-RU", "драд", AngleUnit.Deciradian)]
        [InlineData("ru-RU", "°", AngleUnit.Degree)]
        [InlineData("ru-RU", "g", AngleUnit.Gradian)]
        [InlineData("ru-RU", "мк°", AngleUnit.Microdegree)]
        [InlineData("ru-RU", "мкрад", AngleUnit.Microradian)]
        [InlineData("ru-RU", "м°", AngleUnit.Millidegree)]
        [InlineData("ru-RU", "мрад", AngleUnit.Milliradian)]
        [InlineData("ru-RU", "н°", AngleUnit.Nanodegree)]
        [InlineData("ru-RU", "нрад", AngleUnit.Nanoradian)]
        [InlineData("ru-RU", "рад", AngleUnit.Radian)]
        [InlineData("ru-RU", "r", AngleUnit.Revolution)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, AngleUnit expectedUnit)
        {
            AngleUnit parsedUnit = Angle.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("'", AngleUnit.Arcminute)]
        [InlineData("arcmin", AngleUnit.Arcminute)]
        [InlineData("amin", AngleUnit.Arcminute)]
        [InlineData("min", AngleUnit.Arcminute)]
        [InlineData("″", AngleUnit.Arcsecond)]
        [InlineData("arcsec", AngleUnit.Arcsecond)]
        [InlineData("asec", AngleUnit.Arcsecond)]
        [InlineData("sec", AngleUnit.Arcsecond)]
        [InlineData("crad", AngleUnit.Centiradian)]
        [InlineData("drad", AngleUnit.Deciradian)]
        [InlineData("°", AngleUnit.Degree)]
        [InlineData("deg", AngleUnit.Degree)]
        [InlineData("g", AngleUnit.Gradian)]
        [InlineData("µ°", AngleUnit.Microdegree)]
        [InlineData("µdeg", AngleUnit.Microdegree)]
        [InlineData("µrad", AngleUnit.Microradian)]
        [InlineData("m°", AngleUnit.Millidegree)]
        [InlineData("mdeg", AngleUnit.Millidegree)]
        [InlineData("mrad", AngleUnit.Milliradian)]
        [InlineData("n°", AngleUnit.Nanodegree)]
        [InlineData("ndeg", AngleUnit.Nanodegree)]
        [InlineData("nrad", AngleUnit.Nanoradian)]
        [InlineData("mil", AngleUnit.NatoMil)]
        [InlineData("rad", AngleUnit.Radian)]
        [InlineData("r", AngleUnit.Revolution)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, AngleUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Angle.TryParseUnit(abbreviation, out AngleUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("'", AngleUnit.Arcminute)]
        [InlineData("arcmin", AngleUnit.Arcminute)]
        [InlineData("amin", AngleUnit.Arcminute)]
        [InlineData("min", AngleUnit.Arcminute)]
        [InlineData("″", AngleUnit.Arcsecond)]
        [InlineData("arcsec", AngleUnit.Arcsecond)]
        [InlineData("asec", AngleUnit.Arcsecond)]
        [InlineData("sec", AngleUnit.Arcsecond)]
        [InlineData("crad", AngleUnit.Centiradian)]
        [InlineData("drad", AngleUnit.Deciradian)]
        [InlineData("°", AngleUnit.Degree)]
        [InlineData("deg", AngleUnit.Degree)]
        [InlineData("g", AngleUnit.Gradian)]
        [InlineData("µ°", AngleUnit.Microdegree)]
        [InlineData("µdeg", AngleUnit.Microdegree)]
        [InlineData("µrad", AngleUnit.Microradian)]
        [InlineData("m°", AngleUnit.Millidegree)]
        [InlineData("mdeg", AngleUnit.Millidegree)]
        [InlineData("mrad", AngleUnit.Milliradian)]
        [InlineData("n°", AngleUnit.Nanodegree)]
        [InlineData("ndeg", AngleUnit.Nanodegree)]
        [InlineData("nrad", AngleUnit.Nanoradian)]
        [InlineData("mil", AngleUnit.NatoMil)]
        [InlineData("rad", AngleUnit.Radian)]
        [InlineData("r", AngleUnit.Revolution)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, AngleUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Angle.TryParseUnit(abbreviation, out AngleUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "'", AngleUnit.Arcminute)]
        [InlineData("en-US", "arcmin", AngleUnit.Arcminute)]
        [InlineData("en-US", "amin", AngleUnit.Arcminute)]
        [InlineData("en-US", "min", AngleUnit.Arcminute)]
        [InlineData("en-US", "″", AngleUnit.Arcsecond)]
        [InlineData("en-US", "arcsec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "asec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "sec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "crad", AngleUnit.Centiradian)]
        [InlineData("en-US", "drad", AngleUnit.Deciradian)]
        [InlineData("en-US", "°", AngleUnit.Degree)]
        [InlineData("en-US", "deg", AngleUnit.Degree)]
        [InlineData("en-US", "g", AngleUnit.Gradian)]
        [InlineData("en-US", "µ°", AngleUnit.Microdegree)]
        [InlineData("en-US", "µdeg", AngleUnit.Microdegree)]
        [InlineData("en-US", "µrad", AngleUnit.Microradian)]
        [InlineData("en-US", "m°", AngleUnit.Millidegree)]
        [InlineData("en-US", "mdeg", AngleUnit.Millidegree)]
        [InlineData("en-US", "mrad", AngleUnit.Milliradian)]
        [InlineData("en-US", "n°", AngleUnit.Nanodegree)]
        [InlineData("en-US", "ndeg", AngleUnit.Nanodegree)]
        [InlineData("en-US", "nrad", AngleUnit.Nanoradian)]
        [InlineData("en-US", "mil", AngleUnit.NatoMil)]
        [InlineData("en-US", "rad", AngleUnit.Radian)]
        [InlineData("en-US", "r", AngleUnit.Revolution)]
        [InlineData("ru-RU", "срад", AngleUnit.Centiradian)]
        [InlineData("ru-RU", "драд", AngleUnit.Deciradian)]
        [InlineData("ru-RU", "°", AngleUnit.Degree)]
        [InlineData("ru-RU", "g", AngleUnit.Gradian)]
        [InlineData("ru-RU", "мк°", AngleUnit.Microdegree)]
        [InlineData("ru-RU", "мкрад", AngleUnit.Microradian)]
        [InlineData("ru-RU", "м°", AngleUnit.Millidegree)]
        [InlineData("ru-RU", "мрад", AngleUnit.Milliradian)]
        [InlineData("ru-RU", "н°", AngleUnit.Nanodegree)]
        [InlineData("ru-RU", "нрад", AngleUnit.Nanoradian)]
        [InlineData("ru-RU", "рад", AngleUnit.Radian)]
        [InlineData("ru-RU", "r", AngleUnit.Revolution)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, AngleUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Angle.TryParseUnit(abbreviation, out AngleUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "'", AngleUnit.Arcminute)]
        [InlineData("en-US", "arcmin", AngleUnit.Arcminute)]
        [InlineData("en-US", "amin", AngleUnit.Arcminute)]
        [InlineData("en-US", "min", AngleUnit.Arcminute)]
        [InlineData("en-US", "″", AngleUnit.Arcsecond)]
        [InlineData("en-US", "arcsec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "asec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "sec", AngleUnit.Arcsecond)]
        [InlineData("en-US", "crad", AngleUnit.Centiradian)]
        [InlineData("en-US", "drad", AngleUnit.Deciradian)]
        [InlineData("en-US", "°", AngleUnit.Degree)]
        [InlineData("en-US", "deg", AngleUnit.Degree)]
        [InlineData("en-US", "g", AngleUnit.Gradian)]
        [InlineData("en-US", "µ°", AngleUnit.Microdegree)]
        [InlineData("en-US", "µdeg", AngleUnit.Microdegree)]
        [InlineData("en-US", "µrad", AngleUnit.Microradian)]
        [InlineData("en-US", "m°", AngleUnit.Millidegree)]
        [InlineData("en-US", "mdeg", AngleUnit.Millidegree)]
        [InlineData("en-US", "mrad", AngleUnit.Milliradian)]
        [InlineData("en-US", "n°", AngleUnit.Nanodegree)]
        [InlineData("en-US", "ndeg", AngleUnit.Nanodegree)]
        [InlineData("en-US", "nrad", AngleUnit.Nanoradian)]
        [InlineData("en-US", "mil", AngleUnit.NatoMil)]
        [InlineData("en-US", "rad", AngleUnit.Radian)]
        [InlineData("en-US", "r", AngleUnit.Revolution)]
        [InlineData("ru-RU", "срад", AngleUnit.Centiradian)]
        [InlineData("ru-RU", "драд", AngleUnit.Deciradian)]
        [InlineData("ru-RU", "°", AngleUnit.Degree)]
        [InlineData("ru-RU", "g", AngleUnit.Gradian)]
        [InlineData("ru-RU", "мк°", AngleUnit.Microdegree)]
        [InlineData("ru-RU", "мкрад", AngleUnit.Microradian)]
        [InlineData("ru-RU", "м°", AngleUnit.Millidegree)]
        [InlineData("ru-RU", "мрад", AngleUnit.Milliradian)]
        [InlineData("ru-RU", "н°", AngleUnit.Nanodegree)]
        [InlineData("ru-RU", "нрад", AngleUnit.Nanoradian)]
        [InlineData("ru-RU", "рад", AngleUnit.Radian)]
        [InlineData("ru-RU", "r", AngleUnit.Revolution)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, AngleUnit expectedUnit)
        {
            Assert.True(Angle.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out AngleUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", AngleUnit.Arcminute, "'")]
        [InlineData("en-US", AngleUnit.Arcsecond, "″")]
        [InlineData("en-US", AngleUnit.Centiradian, "crad")]
        [InlineData("en-US", AngleUnit.Deciradian, "drad")]
        [InlineData("en-US", AngleUnit.Degree, "°")]
        [InlineData("en-US", AngleUnit.Gradian, "g")]
        [InlineData("en-US", AngleUnit.Microdegree, "µ°")]
        [InlineData("en-US", AngleUnit.Microradian, "µrad")]
        [InlineData("en-US", AngleUnit.Millidegree, "m°")]
        [InlineData("en-US", AngleUnit.Milliradian, "mrad")]
        [InlineData("en-US", AngleUnit.Nanodegree, "n°")]
        [InlineData("en-US", AngleUnit.Nanoradian, "nrad")]
        [InlineData("en-US", AngleUnit.NatoMil, "mil")]
        [InlineData("en-US", AngleUnit.Radian, "rad")]
        [InlineData("en-US", AngleUnit.Revolution, "r")]
        [InlineData("ru-RU", AngleUnit.Centiradian, "срад")]
        [InlineData("ru-RU", AngleUnit.Deciradian, "драд")]
        [InlineData("ru-RU", AngleUnit.Degree, "°")]
        [InlineData("ru-RU", AngleUnit.Gradian, "g")]
        [InlineData("ru-RU", AngleUnit.Microdegree, "мк°")]
        [InlineData("ru-RU", AngleUnit.Microradian, "мкрад")]
        [InlineData("ru-RU", AngleUnit.Millidegree, "м°")]
        [InlineData("ru-RU", AngleUnit.Milliradian, "мрад")]
        [InlineData("ru-RU", AngleUnit.Nanodegree, "н°")]
        [InlineData("ru-RU", AngleUnit.Nanoradian, "нрад")]
        [InlineData("ru-RU", AngleUnit.Radian, "рад")]
        [InlineData("ru-RU", AngleUnit.Revolution, "r")]
        public void GetAbbreviationForCulture(string culture, AngleUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Angle.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Angle.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Angle.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(AngleUnit unit)
        {
            var inBaseUnits = Angle.From(1.0, Angle.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(AngleUnit unit)
        {
            var quantity = Angle.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(AngleUnit unit)
        {
            Assert.All(Angle.Units.Where(u => u != Angle.BaseUnit), fromUnit =>
            {
                var quantity = Angle.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(AngleUnit unit)
        {
            var quantity = default(Angle);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(AngleUnit unit)
        {
            var quantity = Angle.From(3, Angle.BaseUnit);
            Angle expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<AngleUnit> quantityToConvert = quantity;
                IQuantity<AngleUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Angle radian = Angle.FromRadians(1);
            AssertEx.EqualTolerance(1, Angle.FromArcminutes(radian.Arcminutes).Radians, ArcminutesTolerance);
            AssertEx.EqualTolerance(1, Angle.FromArcseconds(radian.Arcseconds).Radians, ArcsecondsTolerance);
            AssertEx.EqualTolerance(1, Angle.FromCentiradians(radian.Centiradians).Radians, CentiradiansTolerance);
            AssertEx.EqualTolerance(1, Angle.FromDeciradians(radian.Deciradians).Radians, DeciradiansTolerance);
            AssertEx.EqualTolerance(1, Angle.FromDegrees(radian.Degrees).Radians, DegreesTolerance);
            AssertEx.EqualTolerance(1, Angle.FromGradians(radian.Gradians).Radians, GradiansTolerance);
            AssertEx.EqualTolerance(1, Angle.FromMicrodegrees(radian.Microdegrees).Radians, MicrodegreesTolerance);
            AssertEx.EqualTolerance(1, Angle.FromMicroradians(radian.Microradians).Radians, MicroradiansTolerance);
            AssertEx.EqualTolerance(1, Angle.FromMillidegrees(radian.Millidegrees).Radians, MillidegreesTolerance);
            AssertEx.EqualTolerance(1, Angle.FromMilliradians(radian.Milliradians).Radians, MilliradiansTolerance);
            AssertEx.EqualTolerance(1, Angle.FromNanodegrees(radian.Nanodegrees).Radians, NanodegreesTolerance);
            AssertEx.EqualTolerance(1, Angle.FromNanoradians(radian.Nanoradians).Radians, NanoradiansTolerance);
            AssertEx.EqualTolerance(1, Angle.FromNatoMils(radian.NatoMils).Radians, NatoMilsTolerance);
            AssertEx.EqualTolerance(1, Angle.FromRadians(radian.Radians).Radians, RadiansTolerance);
            AssertEx.EqualTolerance(1, Angle.FromRevolutions(radian.Revolutions).Radians, RevolutionsTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Angle v = Angle.FromRadians(1);
            AssertEx.EqualTolerance(-1, -v.Radians, RadiansTolerance);
            AssertEx.EqualTolerance(2, (Angle.FromRadians(3)-v).Radians, RadiansTolerance);
            AssertEx.EqualTolerance(2, (v + v).Radians, RadiansTolerance);
            AssertEx.EqualTolerance(10, (v*10).Radians, RadiansTolerance);
            AssertEx.EqualTolerance(10, (10*v).Radians, RadiansTolerance);
            AssertEx.EqualTolerance(2, (Angle.FromRadians(10)/5).Radians, RadiansTolerance);
            AssertEx.EqualTolerance(2, Angle.FromRadians(10)/Angle.FromRadians(5), RadiansTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            Angle oneRadian = Angle.FromRadians(1);
            Angle twoRadians = Angle.FromRadians(2);

            Assert.True(oneRadian < twoRadians);
            Assert.True(oneRadian <= twoRadians);
            Assert.True(twoRadians > oneRadian);
            Assert.True(twoRadians >= oneRadian);

            Assert.False(oneRadian > twoRadians);
            Assert.False(oneRadian >= twoRadians);
            Assert.False(twoRadians < oneRadian);
            Assert.False(twoRadians <= oneRadian);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Angle radian = Angle.FromRadians(1);
            Assert.Equal(0, radian.CompareTo(radian));
            Assert.True(radian.CompareTo(Angle.Zero) > 0);
            Assert.True(Angle.Zero.CompareTo(radian) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Angle radian = Angle.FromRadians(1);
            Assert.Throws<ArgumentException>(() => radian.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Angle radian = Angle.FromRadians(1);
            Assert.Throws<ArgumentNullException>(() => radian.CompareTo(null));
        }

        [Theory]
        [InlineData(1, AngleUnit.Radian, 1, AngleUnit.Radian, true)]  // Same value and unit.
        [InlineData(1, AngleUnit.Radian, 2, AngleUnit.Radian, false)] // Different value.
        [InlineData(2, AngleUnit.Radian, 1, AngleUnit.Arcminute, false)] // Different value and unit.
        [InlineData(1, AngleUnit.Radian, 1, AngleUnit.Arcminute, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, AngleUnit unitA, double valueB, AngleUnit unitB, bool expectEqual)
        {
            var a = new Angle(valueA, unitA);
            var b = new Angle(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Angle.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Angle radian = Angle.FromRadians(1);
            Assert.False(radian.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Angle radian = Angle.FromRadians(1);
            Assert.False(radian.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Angle.FromRadians(firstValue);
            var otherQuantity = Angle.FromRadians(secondValue);
            Angle maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, Angle.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Angle.FromRadians(1);
            var negativeTolerance = Angle.FromRadians(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<AngleUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Angle.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 '", new Angle(1, AngleUnit.Arcminute).ToString());
            Assert.Equal("1 ″", new Angle(1, AngleUnit.Arcsecond).ToString());
            Assert.Equal("1 crad", new Angle(1, AngleUnit.Centiradian).ToString());
            Assert.Equal("1 drad", new Angle(1, AngleUnit.Deciradian).ToString());
            Assert.Equal("1 °", new Angle(1, AngleUnit.Degree).ToString());
            Assert.Equal("1 g", new Angle(1, AngleUnit.Gradian).ToString());
            Assert.Equal("1 µ°", new Angle(1, AngleUnit.Microdegree).ToString());
            Assert.Equal("1 µrad", new Angle(1, AngleUnit.Microradian).ToString());
            Assert.Equal("1 m°", new Angle(1, AngleUnit.Millidegree).ToString());
            Assert.Equal("1 mrad", new Angle(1, AngleUnit.Milliradian).ToString());
            Assert.Equal("1 n°", new Angle(1, AngleUnit.Nanodegree).ToString());
            Assert.Equal("1 nrad", new Angle(1, AngleUnit.Nanoradian).ToString());
            Assert.Equal("1 mil", new Angle(1, AngleUnit.NatoMil).ToString());
            Assert.Equal("1 rad", new Angle(1, AngleUnit.Radian).ToString());
            Assert.Equal("1 r", new Angle(1, AngleUnit.Revolution).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 '", new Angle(1, AngleUnit.Arcminute).ToString(swedishCulture));
            Assert.Equal("1 ″", new Angle(1, AngleUnit.Arcsecond).ToString(swedishCulture));
            Assert.Equal("1 crad", new Angle(1, AngleUnit.Centiradian).ToString(swedishCulture));
            Assert.Equal("1 drad", new Angle(1, AngleUnit.Deciradian).ToString(swedishCulture));
            Assert.Equal("1 °", new Angle(1, AngleUnit.Degree).ToString(swedishCulture));
            Assert.Equal("1 g", new Angle(1, AngleUnit.Gradian).ToString(swedishCulture));
            Assert.Equal("1 µ°", new Angle(1, AngleUnit.Microdegree).ToString(swedishCulture));
            Assert.Equal("1 µrad", new Angle(1, AngleUnit.Microradian).ToString(swedishCulture));
            Assert.Equal("1 m°", new Angle(1, AngleUnit.Millidegree).ToString(swedishCulture));
            Assert.Equal("1 mrad", new Angle(1, AngleUnit.Milliradian).ToString(swedishCulture));
            Assert.Equal("1 n°", new Angle(1, AngleUnit.Nanodegree).ToString(swedishCulture));
            Assert.Equal("1 nrad", new Angle(1, AngleUnit.Nanoradian).ToString(swedishCulture));
            Assert.Equal("1 mil", new Angle(1, AngleUnit.NatoMil).ToString(swedishCulture));
            Assert.Equal("1 rad", new Angle(1, AngleUnit.Radian).ToString(swedishCulture));
            Assert.Equal("1 r", new Angle(1, AngleUnit.Revolution).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 rad", new Angle(0.123456, AngleUnit.Radian).ToString("s1"));
            Assert.Equal("0.12 rad", new Angle(0.123456, AngleUnit.Radian).ToString("s2"));
            Assert.Equal("0.123 rad", new Angle(0.123456, AngleUnit.Radian).ToString("s3"));
            Assert.Equal("0.1235 rad", new Angle(0.123456, AngleUnit.Radian).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 rad", new Angle(0.123456, AngleUnit.Radian).ToString("s1", culture));
            Assert.Equal("0.12 rad", new Angle(0.123456, AngleUnit.Radian).ToString("s2", culture));
            Assert.Equal("0.123 rad", new Angle(0.123456, AngleUnit.Radian).ToString("s3", culture));
            Assert.Equal("0.1235 rad", new Angle(0.123456, AngleUnit.Radian).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Angle.FromRadians(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Angle.FromRadians(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Angle.FromRadians(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Angle.FromRadians(value);
            Assert.Equal(Angle.FromRadians(-value), -quantity);
        }
    }
}
