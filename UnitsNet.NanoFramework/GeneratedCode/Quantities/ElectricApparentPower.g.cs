//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Power engineers measure apparent power as the magnitude of the vector sum of active and reactive power. It is the product of the root mean square voltage (in volts) and the root mean square current (in amperes).
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/AC_power#Active,_reactive,_apparent,_and_complex_power_in_sinusoidal_steady-state
    /// </remarks>
    public struct  ElectricApparentPower
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ElectricApparentPowerUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public ElectricApparentPowerUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public ElectricApparentPower(double value, ElectricApparentPowerUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of ElectricApparentPower, which is Second. All conversions go via this value.
        /// </summary>
        public static ElectricApparentPowerUnit BaseUnit { get; } = ElectricApparentPowerUnit.Voltampere;

        /// <summary>
        /// Represents the largest possible value of ElectricApparentPower.
        /// </summary>
        public static ElectricApparentPower MaxValue { get; } = new ElectricApparentPower(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of ElectricApparentPower.
        /// </summary>
        public static ElectricApparentPower MinValue { get; } = new ElectricApparentPower(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static ElectricApparentPower Zero { get; } = new ElectricApparentPower(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricApparentPowerUnit.Gigavoltampere"/>
        /// </summary>
        public double Gigavoltamperes => As(ElectricApparentPowerUnit.Gigavoltampere);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricApparentPowerUnit.Kilovoltampere"/>
        /// </summary>
        public double Kilovoltamperes => As(ElectricApparentPowerUnit.Kilovoltampere);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricApparentPowerUnit.Megavoltampere"/>
        /// </summary>
        public double Megavoltamperes => As(ElectricApparentPowerUnit.Megavoltampere);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricApparentPowerUnit.Microvoltampere"/>
        /// </summary>
        public double Microvoltamperes => As(ElectricApparentPowerUnit.Microvoltampere);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricApparentPowerUnit.Millivoltampere"/>
        /// </summary>
        public double Millivoltamperes => As(ElectricApparentPowerUnit.Millivoltampere);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricApparentPowerUnit.Voltampere"/>
        /// </summary>
        public double Voltamperes => As(ElectricApparentPowerUnit.Voltampere);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ElectricApparentPower"/> from <see cref="ElectricApparentPowerUnit.Gigavoltampere"/>.
        /// </summary>
        public static ElectricApparentPower FromGigavoltamperes(double gigavoltamperes) => new ElectricApparentPower(gigavoltamperes, ElectricApparentPowerUnit.Gigavoltampere);

        /// <summary>
        ///     Creates a <see cref="ElectricApparentPower"/> from <see cref="ElectricApparentPowerUnit.Kilovoltampere"/>.
        /// </summary>
        public static ElectricApparentPower FromKilovoltamperes(double kilovoltamperes) => new ElectricApparentPower(kilovoltamperes, ElectricApparentPowerUnit.Kilovoltampere);

        /// <summary>
        ///     Creates a <see cref="ElectricApparentPower"/> from <see cref="ElectricApparentPowerUnit.Megavoltampere"/>.
        /// </summary>
        public static ElectricApparentPower FromMegavoltamperes(double megavoltamperes) => new ElectricApparentPower(megavoltamperes, ElectricApparentPowerUnit.Megavoltampere);

        /// <summary>
        ///     Creates a <see cref="ElectricApparentPower"/> from <see cref="ElectricApparentPowerUnit.Microvoltampere"/>.
        /// </summary>
        public static ElectricApparentPower FromMicrovoltamperes(double microvoltamperes) => new ElectricApparentPower(microvoltamperes, ElectricApparentPowerUnit.Microvoltampere);

        /// <summary>
        ///     Creates a <see cref="ElectricApparentPower"/> from <see cref="ElectricApparentPowerUnit.Millivoltampere"/>.
        /// </summary>
        public static ElectricApparentPower FromMillivoltamperes(double millivoltamperes) => new ElectricApparentPower(millivoltamperes, ElectricApparentPowerUnit.Millivoltampere);

        /// <summary>
        ///     Creates a <see cref="ElectricApparentPower"/> from <see cref="ElectricApparentPowerUnit.Voltampere"/>.
        /// </summary>
        public static ElectricApparentPower FromVoltamperes(double voltamperes) => new ElectricApparentPower(voltamperes, ElectricApparentPowerUnit.Voltampere);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricApparentPowerUnit" /> to <see cref="ElectricApparentPower" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricApparentPower unit value.</returns>
        public static ElectricApparentPower From(double value, ElectricApparentPowerUnit fromUnit)
        {
            return new ElectricApparentPower(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(ElectricApparentPowerUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this ElectricApparentPower to another ElectricApparentPower with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A ElectricApparentPower with the specified unit.</returns>
                public ElectricApparentPower ToUnit(ElectricApparentPowerUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new ElectricApparentPower(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        ElectricApparentPowerUnit.Gigavoltampere => (_value) * 1e9d,
                        ElectricApparentPowerUnit.Kilovoltampere => (_value) * 1e3d,
                        ElectricApparentPowerUnit.Megavoltampere => (_value) * 1e6d,
                        ElectricApparentPowerUnit.Microvoltampere => (_value) * 1e-6d,
                        ElectricApparentPowerUnit.Millivoltampere => (_value) * 1e-3d,
                        ElectricApparentPowerUnit.Voltampere => _value,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(ElectricApparentPowerUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        ElectricApparentPowerUnit.Gigavoltampere => (baseUnitValue) / 1e9d,
                        ElectricApparentPowerUnit.Kilovoltampere => (baseUnitValue) / 1e3d,
                        ElectricApparentPowerUnit.Megavoltampere => (baseUnitValue) / 1e6d,
                        ElectricApparentPowerUnit.Microvoltampere => (baseUnitValue) / 1e-6d,
                        ElectricApparentPowerUnit.Millivoltampere => (baseUnitValue) / 1e-3d,
                        ElectricApparentPowerUnit.Voltampere => baseUnitValue,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

