//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToImpulse
{
    /// <summary>
    /// A number to Impulse Extensions
    /// </summary>
    public static class NumberToImpulseExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Impulse.FromCentinewtonSeconds(QuantityValue)" />
            public Impulse CentinewtonSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromCentinewtonSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromCentinewtonSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromDecanewtonSeconds(QuantityValue)" />
            public Impulse DecanewtonSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromDecanewtonSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromDecanewtonSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromDecinewtonSeconds(QuantityValue)" />
            public Impulse DecinewtonSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromDecinewtonSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromDecinewtonSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromKilogramMetersPerSecond(QuantityValue)" />
            public Impulse KilogramMetersPerSecond
#if NET7_0_OR_GREATER
                => Impulse.FromKilogramMetersPerSecond(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromKilogramMetersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromKilonewtonSeconds(QuantityValue)" />
            public Impulse KilonewtonSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromKilonewtonSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromKilonewtonSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromMeganewtonSeconds(QuantityValue)" />
            public Impulse MeganewtonSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromMeganewtonSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromMeganewtonSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromMicronewtonSeconds(QuantityValue)" />
            public Impulse MicronewtonSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromMicronewtonSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromMicronewtonSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromMillinewtonSeconds(QuantityValue)" />
            public Impulse MillinewtonSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromMillinewtonSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromMillinewtonSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromNanonewtonSeconds(QuantityValue)" />
            public Impulse NanonewtonSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromNanonewtonSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromNanonewtonSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromNewtonSeconds(QuantityValue)" />
            public Impulse NewtonSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromNewtonSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromNewtonSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromPoundFeetPerSecond(QuantityValue)" />
            public Impulse PoundFeetPerSecond
#if NET7_0_OR_GREATER
                => Impulse.FromPoundFeetPerSecond(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromPoundFeetPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromPoundForceSeconds(QuantityValue)" />
            public Impulse PoundForceSeconds
#if NET7_0_OR_GREATER
                => Impulse.FromPoundForceSeconds(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromPoundForceSeconds(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Impulse.FromSlugFeetPerSecond(QuantityValue)" />
            public Impulse SlugFeetPerSecond
#if NET7_0_OR_GREATER
                => Impulse.FromSlugFeetPerSecond(QuantityValue.CreateChecked(value));
#else
                => Impulse.FromSlugFeetPerSecond(value.ToQuantityValue());
#endif

        }
    }
}
