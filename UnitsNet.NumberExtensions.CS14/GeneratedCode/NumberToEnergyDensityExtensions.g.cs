//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToEnergyDensity
{
    /// <summary>
    /// A number to EnergyDensity Extensions
    /// </summary>
    public static class NumberToEnergyDensityExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="EnergyDensity.FromGigajoulesPerCubicMeter(double)" />
            public EnergyDensity GigajoulesPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromGigajoulesPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromGigajoulesPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromGigawattHoursPerCubicMeter(double)" />
            public EnergyDensity GigawattHoursPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromGigawattHoursPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromGigawattHoursPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromJoulesPerCubicMeter(double)" />
            public EnergyDensity JoulesPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromJoulesPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromJoulesPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromKilojoulesPerCubicMeter(double)" />
            public EnergyDensity KilojoulesPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromKilojoulesPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromKilojoulesPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromKilowattHoursPerCubicMeter(double)" />
            public EnergyDensity KilowattHoursPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromKilowattHoursPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromKilowattHoursPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromMegajoulesPerCubicMeter(double)" />
            public EnergyDensity MegajoulesPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromMegajoulesPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromMegajoulesPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromMegawattHoursPerCubicMeter(double)" />
            public EnergyDensity MegawattHoursPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromMegawattHoursPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromMegawattHoursPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromPetajoulesPerCubicMeter(double)" />
            public EnergyDensity PetajoulesPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromPetajoulesPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromPetajoulesPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromPetawattHoursPerCubicMeter(double)" />
            public EnergyDensity PetawattHoursPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromPetawattHoursPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromPetawattHoursPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromTerajoulesPerCubicMeter(double)" />
            public EnergyDensity TerajoulesPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromTerajoulesPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromTerajoulesPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromTerawattHoursPerCubicMeter(double)" />
            public EnergyDensity TerawattHoursPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromTerawattHoursPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromTerawattHoursPerCubicMeter(value.ToDouble(null));
#endif

            /// <inheritdoc cref="EnergyDensity.FromWattHoursPerCubicMeter(double)" />
            public EnergyDensity WattHoursPerCubicMeter
#if NET7_0_OR_GREATER
                => EnergyDensity.FromWattHoursPerCubicMeter(double.CreateChecked(value));
#else
                => EnergyDensity.FromWattHoursPerCubicMeter(value.ToDouble(null));
#endif

        }
    }
}
