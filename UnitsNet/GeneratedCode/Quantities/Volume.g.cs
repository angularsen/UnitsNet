//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System.Globalization;
using System.Resources;
using System.Runtime.Serialization;
using UnitsNet.Debug;

#nullable enable

// ReSharper disable once CheckNamespace

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    [DataContract]
    [DebuggerDisplay(QuantityDebugProxy.DisplayFormat)]
    [DebuggerTypeProxy(typeof(QuantityDebugProxy))]
    public readonly partial struct Volume :
        IArithmeticQuantity<Volume, VolumeUnit>,
#if NET7_0_OR_GREATER
        IMultiplyOperators<Volume, Molarity, AmountOfSubstance>,
        IMultiplyOperators<Volume, ReciprocalLength, Area>,
        IDivisionOperators<Volume, Length, Area>,
        IMultiplyOperators<Volume, Length, AreaMomentOfInertia>,
        IDivisionOperators<Volume, VolumeFlow, Duration>,
        IMultiplyOperators<Volume, EnergyDensity, Energy>,
        IMultiplyOperators<Volume, ReciprocalArea, Length>,
        IDivisionOperators<Volume, Area, Length>,
        IMultiplyOperators<Volume, Density, Mass>,
        IMultiplyOperators<Volume, MassConcentration, Mass>,
        IDivisionOperators<Volume, SpecificVolume, Mass>,
        IDivisionOperators<Volume, Mass, SpecificVolume>,
        IDivisionOperators<Volume, Duration, VolumeFlow>,
#endif
#if NET7_0_OR_GREATER
        IComparisonOperators<Volume, Volume, bool>,
        IParsable<Volume>,
#endif
        IComparable,
        IComparable<Volume>,
        IEquatable<Volume>,
        IFormattable
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Value", Order = 1, EmitDefaultValue = false)]
        private readonly QuantityValue _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        [DataMember(Name = "Unit", Order = 2, EmitDefaultValue = false)]
        private readonly VolumeUnit? _unit;

        /// <summary>
        ///     Provides detailed information about the <see cref="Volume"/> quantity, including its name, base unit, unit mappings, base dimensions, and conversion functions.
        /// </summary>
        public sealed class VolumeInfo: QuantityInfo<Volume, VolumeUnit>
        {
            /// <inheritdoc />
            public VolumeInfo(string name, VolumeUnit baseUnit, IEnumerable<IUnitDefinition<VolumeUnit>> unitMappings, Volume zero, BaseDimensions baseDimensions,
                QuantityFromDelegate<Volume, VolumeUnit> fromDelegate, ResourceManager? unitAbbreviations)
                : base(name, baseUnit, unitMappings, zero, baseDimensions, fromDelegate, unitAbbreviations)
            {
            }

            /// <inheritdoc />
            public VolumeInfo(string name, VolumeUnit baseUnit, IEnumerable<IUnitDefinition<VolumeUnit>> unitMappings, Volume zero, BaseDimensions baseDimensions)
                : this(name, baseUnit, unitMappings, zero, baseDimensions, Volume.From, new ResourceManager("UnitsNet.GeneratedCode.Resources.Volume", typeof(Volume).Assembly))
            {
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="VolumeInfo"/> class with the default settings for the Volume quantity.
            /// </summary>
            /// <returns>A new instance of the <see cref="VolumeInfo"/> class with the default settings.</returns>
            public static VolumeInfo CreateDefault()
            {
                return new VolumeInfo(nameof(Volume), DefaultBaseUnit, GetDefaultMappings(), new Volume(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     Creates a new instance of the <see cref="VolumeInfo"/> class with the default settings for the Volume quantity and a callback for customizing the default unit mappings.
            /// </summary>
            /// <param name="customizeUnits">
            ///     A callback function for customizing the default unit mappings.
            /// </param>
            /// <returns>
            ///     A new instance of the <see cref="VolumeInfo"/> class with the default settings.
            /// </returns>
            public static VolumeInfo CreateDefault(Func<IEnumerable<UnitDefinition<VolumeUnit>>, IEnumerable<IUnitDefinition<VolumeUnit>>> customizeUnits)
            {
                return new VolumeInfo(nameof(Volume), DefaultBaseUnit, customizeUnits(GetDefaultMappings()), new Volume(0, DefaultBaseUnit), DefaultBaseDimensions);
            }

            /// <summary>
            ///     The <see cref="BaseDimensions" /> for <see cref="Volume"/> is L^3.
            /// </summary>
            public static BaseDimensions DefaultBaseDimensions { get; } = new BaseDimensions(3, 0, 0, 0, 0, 0, 0);

            /// <summary>
            ///     The default base unit of Volume is CubicMeter. All conversions, as defined in the <see cref="GetDefaultMappings"/>, go via this value.
            /// </summary>
            public static VolumeUnit DefaultBaseUnit { get; } = VolumeUnit.CubicMeter;

            /// <summary>
            ///     Retrieves the default mappings for <see cref="VolumeUnit"/>.
            /// </summary>
            /// <returns>An <see cref="IEnumerable{T}"/> of <see cref="UnitDefinition{VolumeUnit}"/> representing the default unit mappings for Volume.</returns>
            public static IEnumerable<UnitDefinition<VolumeUnit>> GetDefaultMappings()
            {
                yield return new (VolumeUnit.AcreFoot, "AcreFoot", "AcreFeet", BaseUnits.Undefined,
                     new QuantityValue(48828125, 60228605349)             
                );
                yield return new (VolumeUnit.AuTablespoon, "AuTablespoon", "AuTablespoons", BaseUnits.Undefined,
                     50000             
                );
                yield return new (VolumeUnit.BoardFoot, "BoardFoot", "BoardFeet", BaseUnits.Undefined,
                     new QuantityValue(7812500000, 18435447)             
                );
                yield return new (VolumeUnit.Centiliter, "Centiliter", "Centiliters", BaseUnits.Undefined,
                     100000             
                );
                yield return new (VolumeUnit.CubicCentimeter, "CubicCentimeter", "CubicCentimeters", new BaseUnits(length: LengthUnit.Centimeter),
                     1000000             
                );
                yield return new (VolumeUnit.CubicDecimeter, "CubicDecimeter", "CubicDecimeters", new BaseUnits(length: LengthUnit.Decimeter),
                     1000             
                );
                yield return new (VolumeUnit.CubicFoot, "CubicFoot", "CubicFeet", new BaseUnits(length: LengthUnit.Foot),
                     new QuantityValue(1953125000, 55306341)             
                );
                yield return new (VolumeUnit.CubicHectometer, "CubicHectometer", "CubicHectometers", new BaseUnits(length: LengthUnit.Hectometer),
                     new QuantityValue(1, 1000000)             
                );
                yield return new (VolumeUnit.CubicInch, "CubicInch", "CubicInches", new BaseUnits(length: LengthUnit.Inch),
                     new QuantityValue(125000000000, 2048383)             
                );
                yield return new (VolumeUnit.CubicKilometer, "CubicKilometer", "CubicKilometers", new BaseUnits(length: LengthUnit.Kilometer),
                     new QuantityValue(1, 1000000000)             
                );
                yield return new (VolumeUnit.CubicMeter, "CubicMeter", "CubicMeters", new BaseUnits(length: LengthUnit.Meter));
                yield return new (VolumeUnit.CubicMicrometer, "CubicMicrometer", "CubicMicrometers", new BaseUnits(length: LengthUnit.Micrometer),
                     1000000000000000000             
                );
                yield return new (VolumeUnit.CubicMile, "CubicMile", "CubicMiles", new BaseUnits(length: LengthUnit.Mile),
                     new QuantityValue(1953125, 8140980127813632)             
                );
                yield return new (VolumeUnit.CubicMillimeter, "CubicMillimeter", "CubicMillimeters", new BaseUnits(length: LengthUnit.Millimeter),
                     1000000000             
                );
                yield return new (VolumeUnit.CubicYard, "CubicYard", "CubicYards", new BaseUnits(length: LengthUnit.Yard),
                     new QuantityValue(1953125000, 1493271207)             
                );
                yield return new (VolumeUnit.Decaliter, "Decaliter", "Decaliters", BaseUnits.Undefined,
                     100             
                );
                yield return new (VolumeUnit.DecausGallon, "DecausGallon", "DecausGallons", BaseUnits.Undefined,
                     new QuantityValue(12500000000, 473176473)             
                );
                yield return new (VolumeUnit.Deciliter, "Deciliter", "Deciliters", BaseUnits.Undefined,
                     10000             
                );
                yield return new (VolumeUnit.DeciusGallon, "DeciusGallon", "DeciusGallons", BaseUnits.Undefined,
                     new QuantityValue(1250000000000, 473176473)             
                );
                yield return new (VolumeUnit.HectocubicFoot, "HectocubicFoot", "HectocubicFeet", BaseUnits.Undefined,
                     new QuantityValue(19531250, 55306341)             
                );
                yield return new (VolumeUnit.HectocubicMeter, "HectocubicMeter", "HectocubicMeters", BaseUnits.Undefined,
                     new QuantityValue(1, 100)             
                );
                yield return new (VolumeUnit.Hectoliter, "Hectoliter", "Hectoliters", BaseUnits.Undefined,
                     10             
                );
                yield return new (VolumeUnit.HectousGallon, "HectousGallon", "HectousGallons", BaseUnits.Undefined,
                     new QuantityValue(1250000000, 473176473)             
                );
                yield return new (VolumeUnit.ImperialBeerBarrel, "ImperialBeerBarrel", "ImperialBeerBarrels", BaseUnits.Undefined,
                     new QuantityValue(25000000, 4091481)             
                );
                yield return new (VolumeUnit.ImperialGallon, "ImperialGallon", "ImperialGallons", BaseUnits.Undefined,
                     new QuantityValue(100000000, 454609)             
                );
                yield return new (VolumeUnit.ImperialOunce, "ImperialOunce", "ImperialOunces", BaseUnits.Undefined,
                     new QuantityValue(16000000000, 454609)             
                );
                yield return new (VolumeUnit.ImperialPint, "ImperialPint", "ImperialPints", BaseUnits.Undefined,
                     new QuantityValue(800000000, 454609)             
                );
                yield return new (VolumeUnit.ImperialQuart, "ImperialQuart", "ImperialQuarts", BaseUnits.Undefined,
                     new QuantityValue(400000000, 454609)             
                );
                yield return new (VolumeUnit.KilocubicFoot, "KilocubicFoot", "KilocubicFeet", BaseUnits.Undefined,
                     new QuantityValue(1953125, 55306341)             
                );
                yield return new (VolumeUnit.KilocubicMeter, "KilocubicMeter", "KilocubicMeters", new BaseUnits(length: LengthUnit.Decameter),
                     new QuantityValue(1, 1000)             
                );
                yield return new (VolumeUnit.KiloimperialGallon, "KiloimperialGallon", "KiloimperialGallons", BaseUnits.Undefined,
                     new QuantityValue(100000, 454609)             
                );
                yield return new (VolumeUnit.Kiloliter, "Kiloliter", "Kiloliters", new BaseUnits(length: LengthUnit.Meter),
                     1             
                );
                yield return new (VolumeUnit.KilousGallon, "KilousGallon", "KilousGallons", BaseUnits.Undefined,
                     new QuantityValue(125000000, 473176473)             
                );
                yield return new (VolumeUnit.Liter, "Liter", "Liters", new BaseUnits(length: LengthUnit.Decimeter),
                     1000             
                );
                yield return new (VolumeUnit.MegacubicFoot, "MegacubicFoot", "MegacubicFeet", BaseUnits.Undefined,
                     new QuantityValue(15625, 442450728)             
                );
                yield return new (VolumeUnit.MegaimperialGallon, "MegaimperialGallon", "MegaimperialGallons", BaseUnits.Undefined,
                     new QuantityValue(100, 454609)             
                );
                yield return new (VolumeUnit.Megaliter, "Megaliter", "Megaliters", new BaseUnits(length: LengthUnit.Decameter),
                     new QuantityValue(1, 1000)             
                );
                yield return new (VolumeUnit.MegausGallon, "MegausGallon", "MegausGallons", BaseUnits.Undefined,
                     new QuantityValue(125000, 473176473)             
                );
                yield return new (VolumeUnit.MetricCup, "MetricCup", "MetricCups", BaseUnits.Undefined,
                     4000             
                );
                yield return new (VolumeUnit.MetricTablespoon, "MetricTablespoon", "MetricTablespoons", BaseUnits.Undefined,
                     new QuantityValue(200000, 3)             
                );
                yield return new (VolumeUnit.MetricTeaspoon, "MetricTeaspoon", "MetricTeaspoons", BaseUnits.Undefined,
                     200000             
                );
                yield return new (VolumeUnit.Microliter, "Microliter", "Microliters", new BaseUnits(length: LengthUnit.Millimeter),
                     1000000000             
                );
                yield return new (VolumeUnit.Milliliter, "Milliliter", "Milliliters", new BaseUnits(length: LengthUnit.Centimeter),
                     1000000             
                );
                yield return new (VolumeUnit.Nanoliter, "Nanoliter", "Nanoliters", BaseUnits.Undefined,
                     1000000000000             
                );
                yield return new (VolumeUnit.OilBarrel, "OilBarrel", "OilBarrels", BaseUnits.Undefined,
                     new QuantityValue(62500000000, 9936705933)             
                );
                yield return new (VolumeUnit.UkTablespoon, "UkTablespoon", "UkTablespoons", BaseUnits.Undefined,
                     new QuantityValue(200000, 3)             
                );
                yield return new (VolumeUnit.UsBeerBarrel, "UsBeerBarrel", "UsBeerBarrels", BaseUnits.Undefined,
                     new QuantityValue(125000000000, 14668470663)             
                );
                yield return new (VolumeUnit.UsCustomaryCup, "UsCustomaryCup", "UsCustomaryCups", BaseUnits.Undefined,
                     new QuantityValue(2000000000000, 473176473)             
                );
                yield return new (VolumeUnit.UsGallon, "UsGallon", "UsGallons", BaseUnits.Undefined,
                     new QuantityValue(125000000000, 473176473)             
                );
                yield return new (VolumeUnit.UsLegalCup, "UsLegalCup", "UsLegalCups", BaseUnits.Undefined,
                     new QuantityValue(12500, 3)             
                );
                yield return new (VolumeUnit.UsOunce, "UsOunce", "UsOunces", BaseUnits.Undefined,
                     new QuantityValue(16000000000000, 473176473)             
                );
                yield return new (VolumeUnit.UsPint, "UsPint", "UsPints", BaseUnits.Undefined,
                     new QuantityValue(1000000000000, 473176473)             
                );
                yield return new (VolumeUnit.UsQuart, "UsQuart", "UsQuarts", BaseUnits.Undefined,
                     new QuantityValue(500000000000, 473176473)             
                );
                yield return new (VolumeUnit.UsTablespoon, "UsTablespoon", "UsTablespoons", BaseUnits.Undefined,
                     new QuantityValue(32000000000000, 473176473)             
                );
                yield return new (VolumeUnit.UsTeaspoon, "UsTeaspoon", "UsTeaspoons", BaseUnits.Undefined,
                     new QuantityValue(32000000000000, 157725491)             
                );
            }
        }

        static Volume()
        {
            Info = UnitsNetSetup.CreateQuantityInfo(VolumeInfo.CreateDefault);
        }

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Volume(QuantityValue value, VolumeUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        /// Creates an instance of the quantity with the given numeric value in units compatible with the given <see cref="UnitSystem"/>.
        /// If multiple compatible units were found, the first match is used.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unitSystem">The unit system to create the quantity with.</param>
        /// <exception cref="ArgumentNullException">The given <see cref="UnitSystem"/> is null.</exception>
        /// <exception cref="ArgumentException">No unit was found for the given <see cref="UnitSystem"/>.</exception>
        public Volume(QuantityValue value, UnitSystem unitSystem)
        {
            _value = value;
            _unit = Info.GetDefaultUnit(unitSystem);
        }

        #region Static Properties

        /// <summary>
        ///     The <see cref="UnitConverter" /> containing the default generated conversion functions for <see cref="Volume" /> instances.
        /// </summary>
        [Obsolete("Replaced by UnitConverter.Default")]
        public static UnitConverter DefaultConversionFunctions => UnitConverter.Default;

        /// <inheritdoc cref="IQuantity.QuantityInfo"/>
        public static QuantityInfo<Volume, VolumeUnit> Info { get; }

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public static BaseDimensions BaseDimensions => Info.BaseDimensions;

        /// <summary>
        ///     The base unit of Volume, which is CubicMeter. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit => Info.BaseUnitInfo.Value;

        /// <summary>
        ///     All units of measurement for the Volume quantity.
        /// </summary>
        public static IReadOnlyCollection<VolumeUnit> Units => Info.Units;

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit CubicMeter.
        /// </summary>
        public static Volume Zero => Info.Zero;

        #endregion

        #region Properties

        /// <inheritdoc />
        public QuantityValue Value => _value;

        /// <inheritdoc />
        public VolumeUnit Unit => _unit.GetValueOrDefault(BaseUnit);

        /// <inheritdoc />
        public QuantityInfo<Volume, VolumeUnit> QuantityInfo => Info;

        /// <summary>
        ///     The <see cref="BaseDimensions" /> of this quantity.
        /// </summary>
        public BaseDimensions Dimensions => Volume.BaseDimensions;

        #region Explicit implementations

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        Enum IQuantity.Unit => Unit;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        UnitKey IQuantity.UnitKey => UnitKey.ForUnit(Unit);

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo IQuantity.QuantityInfo => Info;

        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        QuantityInfo<VolumeUnit> IQuantity<VolumeUnit>.QuantityInfo => Info;

#if NETSTANDARD2_0
        [DebuggerBrowsable(DebuggerBrowsableState.Never)]
        IQuantityInstanceInfo<Volume> IQuantityOfType<Volume>.QuantityInfo => Info;
#endif

        #endregion

        #endregion

        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.AcreFoot"/>
        /// </summary>
        public QuantityValue AcreFeet => this.As(VolumeUnit.AcreFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.AuTablespoon"/>
        /// </summary>
        public QuantityValue AuTablespoons => this.As(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.BoardFoot"/>
        /// </summary>
        public QuantityValue BoardFeet => this.As(VolumeUnit.BoardFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Centiliter"/>
        /// </summary>
        public QuantityValue Centiliters => this.As(VolumeUnit.Centiliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicCentimeter"/>
        /// </summary>
        public QuantityValue CubicCentimeters => this.As(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicDecimeter"/>
        /// </summary>
        public QuantityValue CubicDecimeters => this.As(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicFoot"/>
        /// </summary>
        public QuantityValue CubicFeet => this.As(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicHectometer"/>
        /// </summary>
        public QuantityValue CubicHectometers => this.As(VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicInch"/>
        /// </summary>
        public QuantityValue CubicInches => this.As(VolumeUnit.CubicInch);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicKilometer"/>
        /// </summary>
        public QuantityValue CubicKilometers => this.As(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicMeter"/>
        /// </summary>
        public QuantityValue CubicMeters => this.As(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicMicrometer"/>
        /// </summary>
        public QuantityValue CubicMicrometers => this.As(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicMile"/>
        /// </summary>
        public QuantityValue CubicMiles => this.As(VolumeUnit.CubicMile);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicMillimeter"/>
        /// </summary>
        public QuantityValue CubicMillimeters => this.As(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.CubicYard"/>
        /// </summary>
        public QuantityValue CubicYards => this.As(VolumeUnit.CubicYard);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Decaliter"/>
        /// </summary>
        public QuantityValue Decaliters => this.As(VolumeUnit.Decaliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.DecausGallon"/>
        /// </summary>
        public QuantityValue DecausGallons => this.As(VolumeUnit.DecausGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Deciliter"/>
        /// </summary>
        public QuantityValue Deciliters => this.As(VolumeUnit.Deciliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.DeciusGallon"/>
        /// </summary>
        public QuantityValue DeciusGallons => this.As(VolumeUnit.DeciusGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.HectocubicFoot"/>
        /// </summary>
        public QuantityValue HectocubicFeet => this.As(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.HectocubicMeter"/>
        /// </summary>
        public QuantityValue HectocubicMeters => this.As(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Hectoliter"/>
        /// </summary>
        public QuantityValue Hectoliters => this.As(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.HectousGallon"/>
        /// </summary>
        public QuantityValue HectousGallons => this.As(VolumeUnit.HectousGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.ImperialBeerBarrel"/>
        /// </summary>
        public QuantityValue ImperialBeerBarrels => this.As(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.ImperialGallon"/>
        /// </summary>
        public QuantityValue ImperialGallons => this.As(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.ImperialOunce"/>
        /// </summary>
        public QuantityValue ImperialOunces => this.As(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.ImperialPint"/>
        /// </summary>
        public QuantityValue ImperialPints => this.As(VolumeUnit.ImperialPint);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.ImperialQuart"/>
        /// </summary>
        public QuantityValue ImperialQuarts => this.As(VolumeUnit.ImperialQuart);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.KilocubicFoot"/>
        /// </summary>
        public QuantityValue KilocubicFeet => this.As(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.KilocubicMeter"/>
        /// </summary>
        public QuantityValue KilocubicMeters => this.As(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.KiloimperialGallon"/>
        /// </summary>
        public QuantityValue KiloimperialGallons => this.As(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Kiloliter"/>
        /// </summary>
        public QuantityValue Kiloliters => this.As(VolumeUnit.Kiloliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.KilousGallon"/>
        /// </summary>
        public QuantityValue KilousGallons => this.As(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Liter"/>
        /// </summary>
        public QuantityValue Liters => this.As(VolumeUnit.Liter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.MegacubicFoot"/>
        /// </summary>
        public QuantityValue MegacubicFeet => this.As(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.MegaimperialGallon"/>
        /// </summary>
        public QuantityValue MegaimperialGallons => this.As(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Megaliter"/>
        /// </summary>
        public QuantityValue Megaliters => this.As(VolumeUnit.Megaliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.MegausGallon"/>
        /// </summary>
        public QuantityValue MegausGallons => this.As(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.MetricCup"/>
        /// </summary>
        public QuantityValue MetricCups => this.As(VolumeUnit.MetricCup);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.MetricTablespoon"/>
        /// </summary>
        public QuantityValue MetricTablespoons => this.As(VolumeUnit.MetricTablespoon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.MetricTeaspoon"/>
        /// </summary>
        public QuantityValue MetricTeaspoons => this.As(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Microliter"/>
        /// </summary>
        public QuantityValue Microliters => this.As(VolumeUnit.Microliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Milliliter"/>
        /// </summary>
        public QuantityValue Milliliters => this.As(VolumeUnit.Milliliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.Nanoliter"/>
        /// </summary>
        public QuantityValue Nanoliters => this.As(VolumeUnit.Nanoliter);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.OilBarrel"/>
        /// </summary>
        public QuantityValue OilBarrels => this.As(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UkTablespoon"/>
        /// </summary>
        public QuantityValue UkTablespoons => this.As(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UsBeerBarrel"/>
        /// </summary>
        public QuantityValue UsBeerBarrels => this.As(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UsCustomaryCup"/>
        /// </summary>
        public QuantityValue UsCustomaryCups => this.As(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UsGallon"/>
        /// </summary>
        public QuantityValue UsGallons => this.As(VolumeUnit.UsGallon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UsLegalCup"/>
        /// </summary>
        public QuantityValue UsLegalCups => this.As(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UsOunce"/>
        /// </summary>
        public QuantityValue UsOunces => this.As(VolumeUnit.UsOunce);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UsPint"/>
        /// </summary>
        public QuantityValue UsPints => this.As(VolumeUnit.UsPint);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UsQuart"/>
        /// </summary>
        public QuantityValue UsQuarts => this.As(VolumeUnit.UsQuart);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UsTablespoon"/>
        /// </summary>
        public QuantityValue UsTablespoons => this.As(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Gets a <see cref="QuantityValue"/> value of this quantity converted into <see cref="VolumeUnit.UsTeaspoon"/>
        /// </summary>
        public QuantityValue UsTeaspoons => this.As(VolumeUnit.UsTeaspoon);

        #endregion

        #region Static Methods

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        public static string GetAbbreviation(VolumeUnit unit)
        {
            return GetAbbreviation(unit, null);
        }

        /// <summary>
        ///     Get unit abbreviation string.
        /// </summary>
        /// <param name="unit">Unit to get abbreviation for.</param>
        /// <returns>Unit abbreviation string.</returns>
        /// <param name="provider">Format to use for localization. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static string GetAbbreviation(VolumeUnit unit, IFormatProvider? provider)
        {
            return UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit, provider);
        }

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AcreFoot"/>.
        /// </summary>
        public static Volume FromAcreFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.AcreFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AuTablespoon"/>.
        /// </summary>
        public static Volume FromAuTablespoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.AuTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.BoardFoot"/>.
        /// </summary>
        public static Volume FromBoardFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.BoardFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Centiliter"/>.
        /// </summary>
        public static Volume FromCentiliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Centiliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicCentimeter"/>.
        /// </summary>
        public static Volume FromCubicCentimeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicCentimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicDecimeter"/>.
        /// </summary>
        public static Volume FromCubicDecimeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicDecimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicFoot"/>.
        /// </summary>
        public static Volume FromCubicFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicHectometer"/>.
        /// </summary>
        public static Volume FromCubicHectometers(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicHectometer);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicInch"/>.
        /// </summary>
        public static Volume FromCubicInches(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicInch);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicKilometer"/>.
        /// </summary>
        public static Volume FromCubicKilometers(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicKilometer);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMeter"/>.
        /// </summary>
        public static Volume FromCubicMeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMicrometer"/>.
        /// </summary>
        public static Volume FromCubicMicrometers(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicMicrometer);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMile"/>.
        /// </summary>
        public static Volume FromCubicMiles(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicMile);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMillimeter"/>.
        /// </summary>
        public static Volume FromCubicMillimeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicMillimeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicYard"/>.
        /// </summary>
        public static Volume FromCubicYards(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.CubicYard);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Decaliter"/>.
        /// </summary>
        public static Volume FromDecaliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Decaliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DecausGallon"/>.
        /// </summary>
        public static Volume FromDecausGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.DecausGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Deciliter"/>.
        /// </summary>
        public static Volume FromDeciliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Deciliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DeciusGallon"/>.
        /// </summary>
        public static Volume FromDeciusGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.DeciusGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicFoot"/>.
        /// </summary>
        public static Volume FromHectocubicFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.HectocubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicMeter"/>.
        /// </summary>
        public static Volume FromHectocubicMeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.HectocubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Hectoliter"/>.
        /// </summary>
        public static Volume FromHectoliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Hectoliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectousGallon"/>.
        /// </summary>
        public static Volume FromHectousGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.HectousGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialBeerBarrel"/>.
        /// </summary>
        public static Volume FromImperialBeerBarrels(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialBeerBarrel);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialGallon"/>.
        /// </summary>
        public static Volume FromImperialGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialOunce"/>.
        /// </summary>
        public static Volume FromImperialOunces(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialOunce);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialPint"/>.
        /// </summary>
        public static Volume FromImperialPints(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialPint);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialQuart"/>.
        /// </summary>
        public static Volume FromImperialQuarts(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.ImperialQuart);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicFoot"/>.
        /// </summary>
        public static Volume FromKilocubicFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.KilocubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicMeter"/>.
        /// </summary>
        public static Volume FromKilocubicMeters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.KilocubicMeter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KiloimperialGallon"/>.
        /// </summary>
        public static Volume FromKiloimperialGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.KiloimperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Kiloliter"/>.
        /// </summary>
        public static Volume FromKiloliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Kiloliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilousGallon"/>.
        /// </summary>
        public static Volume FromKilousGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.KilousGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Liter"/>.
        /// </summary>
        public static Volume FromLiters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Liter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegacubicFoot"/>.
        /// </summary>
        public static Volume FromMegacubicFeet(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MegacubicFoot);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegaimperialGallon"/>.
        /// </summary>
        public static Volume FromMegaimperialGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MegaimperialGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Megaliter"/>.
        /// </summary>
        public static Volume FromMegaliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Megaliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegausGallon"/>.
        /// </summary>
        public static Volume FromMegausGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MegausGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricCup"/>.
        /// </summary>
        public static Volume FromMetricCups(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MetricCup);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricTablespoon"/>.
        /// </summary>
        public static Volume FromMetricTablespoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MetricTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricTeaspoon"/>.
        /// </summary>
        public static Volume FromMetricTeaspoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.MetricTeaspoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Microliter"/>.
        /// </summary>
        public static Volume FromMicroliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Microliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Milliliter"/>.
        /// </summary>
        public static Volume FromMilliliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Milliliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Nanoliter"/>.
        /// </summary>
        public static Volume FromNanoliters(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.Nanoliter);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.OilBarrel"/>.
        /// </summary>
        public static Volume FromOilBarrels(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.OilBarrel);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UkTablespoon"/>.
        /// </summary>
        public static Volume FromUkTablespoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UkTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsBeerBarrel"/>.
        /// </summary>
        public static Volume FromUsBeerBarrels(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsBeerBarrel);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsCustomaryCup"/>.
        /// </summary>
        public static Volume FromUsCustomaryCups(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsCustomaryCup);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsGallon"/>.
        /// </summary>
        public static Volume FromUsGallons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsGallon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsLegalCup"/>.
        /// </summary>
        public static Volume FromUsLegalCups(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsLegalCup);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsOunce"/>.
        /// </summary>
        public static Volume FromUsOunces(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsOunce);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsPint"/>.
        /// </summary>
        public static Volume FromUsPints(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsPint);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsQuart"/>.
        /// </summary>
        public static Volume FromUsQuarts(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsQuart);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTablespoon"/>.
        /// </summary>
        public static Volume FromUsTablespoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsTablespoon);
        }

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTeaspoon"/>.
        /// </summary>
        public static Volume FromUsTeaspoons(QuantityValue value)
        {
            return new Volume(value, VolumeUnit.UsTeaspoon);
        }

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        public static Volume From(QuantityValue value, VolumeUnit fromUnit)
        {
            return new Volume(value, fromUnit);
        }

        #endregion

        #region Static Parse Methods

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        public static Volume Parse(string str)
        {
            return Parse(str, null);
        }

        /// <summary>
        ///     Parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="ArgumentException">
        ///     Expected string to have one or two pairs of quantity and unit in the format
        ///     "&lt;quantity&gt; &lt;unit&gt;". Eg. "5.5 m" or "1ft 2in"
        /// </exception>
        /// <exception cref="AmbiguousUnitParseException">
        ///     More than one unit is represented by the specified unit abbreviation.
        ///     Example: Volume.Parse("1 cup") will throw, because it can refer to any of
        ///     <see cref="VolumeUnit.MetricCup" />, <see cref="VolumeUnit.UsLegalCup" /> and <see cref="VolumeUnit.UsCustomaryCup" />.
        /// </exception>
        /// <exception cref="UnitsNetException">
        ///     If anything else goes wrong, typically due to a bug or unhandled case.
        ///     We wrap exceptions in <see cref="UnitsNetException" /> to allow you to distinguish
        ///     Units.NET exceptions from other exceptions.
        /// </exception>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static Volume Parse(string str, IFormatProvider? provider)
        {
            return QuantityParser.Default.Parse<Volume, VolumeUnit>(str, provider, From);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        public static bool TryParse([NotNullWhen(true)]string? str, out Volume result)
        {
            return TryParse(str, null, out result);
        }

        /// <summary>
        ///     Try to parse a string with one or two quantities of the format "&lt;quantity&gt; &lt;unit&gt;".
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="result">Resulting unit quantity if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.Parse("5.5 m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing number and unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParse([NotNullWhen(true)]string? str, IFormatProvider? provider, out Volume result)
        {
            return QuantityParser.Default.TryParse<Volume, VolumeUnit>(str, provider, From, out result);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str)
        {
            return ParseUnit(str, null);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        /// <example>
        ///     Length.ParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <exception cref="ArgumentNullException">The value of 'str' cannot be null. </exception>
        /// <exception cref="UnitsNetException">Error parsing string.</exception>
        public static VolumeUnit ParseUnit(string str, IFormatProvider? provider)
        {
            return UnitParser.Default.Parse(str, Info.UnitInfos, provider).Value;
        }

        /// <inheritdoc cref="TryParseUnit(string,IFormatProvider?,out UnitsNet.Units.VolumeUnit)"/>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, out VolumeUnit unit)
        {
            return TryParseUnit(str, null, out unit);
        }

        /// <summary>
        ///     Parse a unit string.
        /// </summary>
        /// <param name="str">String to parse. Typically in the form: {number} {unit}</param>
        /// <param name="unit">The parsed unit if successful.</param>
        /// <returns>True if successful, otherwise false.</returns>
        /// <example>
        ///     Length.TryParseUnit("m", CultureInfo.GetCultureInfo("en-US"));
        /// </example>
        /// <param name="provider">Format to use when parsing the unit. Defaults to <see cref="CultureInfo.CurrentCulture" /> if null.</param>
        public static bool TryParseUnit([NotNullWhen(true)]string? str, IFormatProvider? provider, out VolumeUnit unit)
        {
            return UnitParser.Default.TryParse(str, Info, provider, out unit);
        }

        #endregion

        #region Arithmetic Operators

        /// <summary>Negate the value.</summary>
        public static Volume operator -(Volume right)
        {
            return new Volume(-right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from adding two <see cref="Volume"/>.</summary>
        public static Volume operator +(Volume left, Volume right)
        {
            return new Volume(left.Value + right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from subtracting two <see cref="Volume"/>.</summary>
        public static Volume operator -(Volume left, Volume right)
        {
            return new Volume(left.Value - right.As(left.Unit), left.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from multiplying value and <see cref="Volume"/>.</summary>
        public static Volume operator *(QuantityValue left, Volume right)
        {
            return new Volume(left * right.Value, right.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from multiplying value and <see cref="Volume"/>.</summary>
        public static Volume operator *(Volume left, QuantityValue right)
        {
            return new Volume(left.Value * right, left.Unit);
        }

        /// <summary>Get <see cref="Volume"/> from dividing <see cref="Volume"/> by value.</summary>
        public static Volume operator /(Volume left, QuantityValue right)
        {
            return new Volume(left.Value / right, left.Unit);
        }

        /// <summary>Get ratio value from dividing <see cref="Volume"/> by <see cref="Volume"/>.</summary>
        public static QuantityValue operator /(Volume left, Volume right)
        {
            return left.CubicMeters / right.CubicMeters;
        }

        #endregion

        #region Relational Operators

        /// <summary>Get <see cref="AmountOfSubstance"/> from <see cref="Volume"/> * <see cref="Molarity"/>.</summary>
        public static AmountOfSubstance operator *(Volume volume, Molarity molarity)
        {
            return AmountOfSubstance.FromMoles(volume.CubicMeters * molarity.MolesPerCubicMeter);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Volume"/> * <see cref="ReciprocalLength"/>.</summary>
        public static Area operator *(Volume volume, ReciprocalLength reciprocalLength)
        {
            return Area.FromSquareMeters(volume.CubicMeters * reciprocalLength.InverseMeters);
        }

        /// <summary>Get <see cref="Area"/> from <see cref="Volume"/> / <see cref="Length"/>.</summary>
        public static Area operator /(Volume volume, Length length)
        {
            return Area.FromSquareMeters(volume.CubicMeters / length.Meters);
        }

        /// <summary>Get <see cref="AreaMomentOfInertia"/> from <see cref="Volume"/> * <see cref="Length"/>.</summary>
        public static AreaMomentOfInertia operator *(Volume volume, Length length)
        {
            return AreaMomentOfInertia.FromMetersToTheFourth(volume.CubicMeters * length.Meters);
        }

        /// <summary>Get <see cref="Duration"/> from <see cref="Volume"/> / <see cref="VolumeFlow"/>.</summary>
        public static Duration operator /(Volume volume, VolumeFlow volumeFlow)
        {
            return Duration.FromSeconds(volume.CubicMeters / volumeFlow.CubicMetersPerSecond);
        }

        /// <summary>Get <see cref="Energy"/> from <see cref="Volume"/> * <see cref="EnergyDensity"/>.</summary>
        public static Energy operator *(Volume volume, EnergyDensity energyDensity)
        {
            return Energy.FromJoules(volume.CubicMeters * energyDensity.JoulesPerCubicMeter);
        }

        /// <summary>Get <see cref="Length"/> from <see cref="Volume"/> * <see cref="ReciprocalArea"/>.</summary>
        public static Length operator *(Volume volume, ReciprocalArea reciprocalArea)
        {
            return Length.FromMeters(volume.CubicMeters * reciprocalArea.InverseSquareMeters);
        }

        /// <summary>Get <see cref="Length"/> from <see cref="Volume"/> / <see cref="Area"/>.</summary>
        public static Length operator /(Volume volume, Area area)
        {
            return Length.FromMeters(volume.CubicMeters / area.SquareMeters);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Volume"/> * <see cref="Density"/>.</summary>
        public static Mass operator *(Volume volume, Density density)
        {
            return Mass.FromKilograms(volume.CubicMeters * density.KilogramsPerCubicMeter);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Volume"/> * <see cref="MassConcentration"/>.</summary>
        public static Mass operator *(Volume volume, MassConcentration massConcentration)
        {
            return Mass.FromKilograms(volume.CubicMeters * massConcentration.KilogramsPerCubicMeter);
        }

        /// <summary>Get <see cref="Mass"/> from <see cref="Volume"/> / <see cref="SpecificVolume"/>.</summary>
        public static Mass operator /(Volume volume, SpecificVolume specificVolume)
        {
            return Mass.FromKilograms(volume.CubicMeters / specificVolume.CubicMetersPerKilogram);
        }

        /// <summary>Get <see cref="SpecificVolume"/> from <see cref="Volume"/> / <see cref="Mass"/>.</summary>
        public static SpecificVolume operator /(Volume volume, Mass mass)
        {
            return SpecificVolume.FromCubicMetersPerKilogram(volume.CubicMeters / mass.Kilograms);
        }

        /// <summary>Get <see cref="VolumeFlow"/> from <see cref="Volume"/> / <see cref="Duration"/>.</summary>
        public static VolumeFlow operator /(Volume volume, Duration duration)
        {
            return VolumeFlow.FromCubicMetersPerSecond(volume.CubicMeters / duration.Seconds);
        }

        #endregion

        #region Equality / IComparable

        /// <summary>Returns true if less or equal to.</summary>
        public static bool operator <=(Volume left, Volume right)
        {
            return left.Value <= right.As(left.Unit);
        }

        /// <summary>Returns true if greater than or equal to.</summary>
        public static bool operator >=(Volume left, Volume right)
        {
            return left.Value >= right.As(left.Unit);
        }

        /// <summary>Returns true if less than.</summary>
        public static bool operator <(Volume left, Volume right)
        {
            return left.Value < right.As(left.Unit);
        }

        /// <summary>Returns true if greater than.</summary>
        public static bool operator >(Volume left, Volume right)
        {
            return left.Value > right.As(left.Unit);
        }

        /// <summary>Indicates strict equality of two <see cref="Volume"/> quantities.</summary>
        public static bool operator ==(Volume left, Volume right)
        {
            return left.Equals(right);
        }

        /// <summary>Indicates strict inequality of two <see cref="Volume"/> quantities.</summary>
        public static bool operator !=(Volume left, Volume right)
        {
            return !(left == right);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Volume"/> quantities.</summary>
        public override bool Equals(object? obj)
        {
            if (obj is not Volume otherQuantity)
                return false;

            return Equals(otherQuantity);
        }

        /// <inheritdoc />
        /// <summary>Indicates strict equality of two <see cref="Volume"/> quantities.</summary>
        public bool Equals(Volume other)
        {
            return _value.Equals(other.As(this.Unit));
        }

        /// <summary>
        ///     Returns the hash code for this instance.
        /// </summary>
        /// <returns>A hash code for the current Volume.</returns>
        public override int GetHashCode()
        {
            return Comparison.GetHashCode(typeof(Volume), this.As(BaseUnit));
        }
        
        /// <inheritdoc  cref="CompareTo(Volume)" />
        /// <param name="obj">An object to compare with this instance.</param>
        /// <exception cref="T:System.ArgumentException">
        ///    <paramref name="obj" /> is not the same type as this instance.
        /// </exception>
        public int CompareTo(object? obj)
        {
            if (obj is not Volume otherQuantity)
                throw obj is null ? new ArgumentNullException(nameof(obj)) : ExceptionHelper.CreateArgumentException<Volume>(obj, nameof(obj));

            return CompareTo(otherQuantity);
        }

        /// <summary>
        ///     Compares the current <see cref="Volume"/> with another <see cref="Volume"/> and returns an integer that indicates
        ///     whether the current instance precedes, follows, or occurs in the same position in the sort order as the other quantity, when converted to the same unit.
        /// </summary>
        /// <param name="other">A quantity to compare with this instance.</param>
        /// <returns>A value that indicates the relative order of the quantities being compared. The return value has these meanings:
        ///     <list type="table">
        ///         <listheader><term> Value</term><description> Meaning</description></listheader>
        ///         <item><term> Less than zero</term><description> This instance precedes <paramref name="other" /> in the sort order.</description></item>
        ///         <item><term> Zero</term><description> This instance occurs in the same position in the sort order as <paramref name="other" />.</description></item>
        ///         <item><term> Greater than zero</term><description> This instance follows <paramref name="other" /> in the sort order.</description></item>
        ///     </list>
        /// </returns>
        public int CompareTo(Volume other)
        {
            return _value.CompareTo(other.As(this.Unit));
        }

        #endregion

        #region Conversion Methods (explicit implementations for netstandard2.0)

#if NETSTANDARD2_0
        QuantityValue IQuantity.As(Enum unit) => UnitConverter.Default.ConvertValue(Value, UnitKey.ForUnit(Unit), unit);

        IQuantity IQuantity.ToUnit(Enum unit) => UnitConverter.Default.ConvertTo(this, unit);

        IQuantity IQuantity.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);

        IQuantity<VolumeUnit> IQuantity<VolumeUnit>.ToUnit(VolumeUnit unit) => this.ToUnit(unit);

        IQuantity<VolumeUnit> IQuantity<VolumeUnit>.ToUnit(UnitSystem unitSystem) => this.ToUnit(unitSystem);
#endif

        #endregion

        #region ToString Methods

        /// <summary>
        ///     Gets the default string representation of value and unit.
        /// </summary>
        /// <returns>String representation.</returns>
        public override string ToString()
        {
            return ToString(null, null);
        }

        /// <inheritdoc cref="QuantityFormatter.Format{TQuantity}(TQuantity, string, IFormatProvider)"/>
        /// <summary>
        /// Gets the string representation of this instance in the specified format string using the specified format provider, or <see cref="CultureInfo.CurrentCulture" /> if null.
        /// </summary>
        public string ToString(string? format, IFormatProvider? provider)
        {
            return QuantityFormatter.Default.Format(this, format, provider);
        }

        #endregion

    }
}
