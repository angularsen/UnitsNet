//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToVolumeFlow
{
    /// <summary>
    /// A number to VolumeFlow Extensions
    /// </summary>
    public static class NumberToVolumeFlowExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerDay(QuantityValue)" />
            public VolumeFlow AcreFeetPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromAcreFeetPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromAcreFeetPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerHour(QuantityValue)" />
            public VolumeFlow AcreFeetPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromAcreFeetPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromAcreFeetPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerMinute(QuantityValue)" />
            public VolumeFlow AcreFeetPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromAcreFeetPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromAcreFeetPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromAcreFeetPerSecond(QuantityValue)" />
            public VolumeFlow AcreFeetPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromAcreFeetPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromAcreFeetPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCentilitersPerDay(QuantityValue)" />
            public VolumeFlow CentilitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCentilitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCentilitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCentilitersPerHour(QuantityValue)" />
            public VolumeFlow CentilitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCentilitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCentilitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCentilitersPerMinute(QuantityValue)" />
            public VolumeFlow CentilitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCentilitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCentilitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCentilitersPerSecond(QuantityValue)" />
            public VolumeFlow CentilitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCentilitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCentilitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicCentimetersPerMinute(QuantityValue)" />
            public VolumeFlow CubicCentimetersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicCentimetersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicCentimetersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicDecimetersPerMinute(QuantityValue)" />
            public VolumeFlow CubicDecimetersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicDecimetersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicDecimetersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerHour(QuantityValue)" />
            public VolumeFlow CubicFeetPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicFeetPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicFeetPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerMinute(QuantityValue)" />
            public VolumeFlow CubicFeetPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicFeetPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicFeetPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicFeetPerSecond(QuantityValue)" />
            public VolumeFlow CubicFeetPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicFeetPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicFeetPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerDay(QuantityValue)" />
            public VolumeFlow CubicMetersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicMetersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicMetersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerHour(QuantityValue)" />
            public VolumeFlow CubicMetersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicMetersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicMetersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerMinute(QuantityValue)" />
            public VolumeFlow CubicMetersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicMetersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicMetersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicMetersPerSecond(QuantityValue)" />
            public VolumeFlow CubicMetersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicMetersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicMetersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicMillimetersPerSecond(QuantityValue)" />
            public VolumeFlow CubicMillimetersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicMillimetersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicMillimetersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerDay(QuantityValue)" />
            public VolumeFlow CubicYardsPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicYardsPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicYardsPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerHour(QuantityValue)" />
            public VolumeFlow CubicYardsPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicYardsPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicYardsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerMinute(QuantityValue)" />
            public VolumeFlow CubicYardsPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicYardsPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicYardsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromCubicYardsPerSecond(QuantityValue)" />
            public VolumeFlow CubicYardsPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromCubicYardsPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromCubicYardsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromDecalitersPerDay(QuantityValue)" />
            public VolumeFlow DecalitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromDecalitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromDecalitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromDecalitersPerHour(QuantityValue)" />
            public VolumeFlow DecalitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromDecalitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromDecalitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromDecalitersPerMinute(QuantityValue)" />
            public VolumeFlow DecalitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromDecalitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromDecalitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromDecalitersPerSecond(QuantityValue)" />
            public VolumeFlow DecalitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromDecalitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromDecalitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromDecilitersPerDay(QuantityValue)" />
            public VolumeFlow DecilitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromDecilitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromDecilitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromDecilitersPerHour(QuantityValue)" />
            public VolumeFlow DecilitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromDecilitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromDecilitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromDecilitersPerMinute(QuantityValue)" />
            public VolumeFlow DecilitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromDecilitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromDecilitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromDecilitersPerSecond(QuantityValue)" />
            public VolumeFlow DecilitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromDecilitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromDecilitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromHectolitersPerDay(QuantityValue)" />
            public VolumeFlow HectolitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromHectolitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromHectolitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromHectolitersPerHour(QuantityValue)" />
            public VolumeFlow HectolitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromHectolitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromHectolitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromHectolitersPerMinute(QuantityValue)" />
            public VolumeFlow HectolitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromHectolitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromHectolitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromHectolitersPerSecond(QuantityValue)" />
            public VolumeFlow HectolitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromHectolitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromHectolitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromKilolitersPerDay(QuantityValue)" />
            public VolumeFlow KilolitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromKilolitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromKilolitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromKilolitersPerHour(QuantityValue)" />
            public VolumeFlow KilolitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromKilolitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromKilolitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromKilolitersPerMinute(QuantityValue)" />
            public VolumeFlow KilolitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromKilolitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromKilolitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromKilolitersPerSecond(QuantityValue)" />
            public VolumeFlow KilolitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromKilolitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromKilolitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromKilousGallonsPerMinute(QuantityValue)" />
            public VolumeFlow KilousGallonsPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromKilousGallonsPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromKilousGallonsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromLitersPerDay(QuantityValue)" />
            public VolumeFlow LitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromLitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromLitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromLitersPerHour(QuantityValue)" />
            public VolumeFlow LitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromLitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromLitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromLitersPerMinute(QuantityValue)" />
            public VolumeFlow LitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromLitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromLitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromLitersPerSecond(QuantityValue)" />
            public VolumeFlow LitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromLitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromLitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMegalitersPerDay(QuantityValue)" />
            public VolumeFlow MegalitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMegalitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMegalitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMegalitersPerHour(QuantityValue)" />
            public VolumeFlow MegalitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMegalitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMegalitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMegalitersPerMinute(QuantityValue)" />
            public VolumeFlow MegalitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMegalitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMegalitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMegalitersPerSecond(QuantityValue)" />
            public VolumeFlow MegalitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMegalitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMegalitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerDay(QuantityValue)" />
            public VolumeFlow MegaukGallonsPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMegaukGallonsPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMegaukGallonsPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMegaukGallonsPerSecond(QuantityValue)" />
            public VolumeFlow MegaukGallonsPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMegaukGallonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMegaukGallonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMegausGallonsPerDay(QuantityValue)" />
            public VolumeFlow MegausGallonsPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMegausGallonsPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMegausGallonsPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerDay(QuantityValue)" />
            public VolumeFlow MicrolitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMicrolitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMicrolitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerHour(QuantityValue)" />
            public VolumeFlow MicrolitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMicrolitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMicrolitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerMinute(QuantityValue)" />
            public VolumeFlow MicrolitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMicrolitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMicrolitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMicrolitersPerSecond(QuantityValue)" />
            public VolumeFlow MicrolitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMicrolitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMicrolitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMillilitersPerDay(QuantityValue)" />
            public VolumeFlow MillilitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMillilitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMillilitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMillilitersPerHour(QuantityValue)" />
            public VolumeFlow MillilitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMillilitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMillilitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMillilitersPerMinute(QuantityValue)" />
            public VolumeFlow MillilitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMillilitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMillilitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMillilitersPerSecond(QuantityValue)" />
            public VolumeFlow MillilitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMillilitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMillilitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromMillionUsGallonsPerDay(QuantityValue)" />
            public VolumeFlow MillionUsGallonsPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromMillionUsGallonsPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromMillionUsGallonsPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromNanolitersPerDay(QuantityValue)" />
            public VolumeFlow NanolitersPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromNanolitersPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromNanolitersPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromNanolitersPerHour(QuantityValue)" />
            public VolumeFlow NanolitersPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromNanolitersPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromNanolitersPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromNanolitersPerMinute(QuantityValue)" />
            public VolumeFlow NanolitersPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromNanolitersPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromNanolitersPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromNanolitersPerSecond(QuantityValue)" />
            public VolumeFlow NanolitersPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromNanolitersPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromNanolitersPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerDay(QuantityValue)" />
            public VolumeFlow OilBarrelsPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromOilBarrelsPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromOilBarrelsPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerHour(QuantityValue)" />
            public VolumeFlow OilBarrelsPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromOilBarrelsPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromOilBarrelsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerMinute(QuantityValue)" />
            public VolumeFlow OilBarrelsPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromOilBarrelsPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromOilBarrelsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromOilBarrelsPerSecond(QuantityValue)" />
            public VolumeFlow OilBarrelsPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromOilBarrelsPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromOilBarrelsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerDay(QuantityValue)" />
            public VolumeFlow UkGallonsPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromUkGallonsPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromUkGallonsPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerHour(QuantityValue)" />
            public VolumeFlow UkGallonsPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromUkGallonsPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromUkGallonsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerMinute(QuantityValue)" />
            public VolumeFlow UkGallonsPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromUkGallonsPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromUkGallonsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromUkGallonsPerSecond(QuantityValue)" />
            public VolumeFlow UkGallonsPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromUkGallonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromUkGallonsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerDay(QuantityValue)" />
            public VolumeFlow UsGallonsPerDay
#if NET7_0_OR_GREATER
                => VolumeFlow.FromUsGallonsPerDay(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromUsGallonsPerDay(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerHour(QuantityValue)" />
            public VolumeFlow UsGallonsPerHour
#if NET7_0_OR_GREATER
                => VolumeFlow.FromUsGallonsPerHour(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromUsGallonsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerMinute(QuantityValue)" />
            public VolumeFlow UsGallonsPerMinute
#if NET7_0_OR_GREATER
                => VolumeFlow.FromUsGallonsPerMinute(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromUsGallonsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="VolumeFlow.FromUsGallonsPerSecond(QuantityValue)" />
            public VolumeFlow UsGallonsPerSecond
#if NET7_0_OR_GREATER
                => VolumeFlow.FromUsGallonsPerSecond(QuantityValue.CreateChecked(value));
#else
                => VolumeFlow.FromUsGallonsPerSecond(value.ToQuantityValue());
#endif

        }
    }
}
