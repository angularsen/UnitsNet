//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToPower
{
    /// <summary>
    /// A number to Power Extensions
    /// </summary>
    public static class NumberToPowerExtensions
    {
        /// <inheritdoc cref="Power.FromBoilerHorsepower(double)" />
        public static Power BoilerHorsepower<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromBoilerHorsepower(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromBoilerHorsepower(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromBritishThermalUnitsPerHour(double)" />
        public static Power BritishThermalUnitsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromBritishThermalUnitsPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromBritishThermalUnitsPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromCaloriesPerHour(double)" />
        public static Power CaloriesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromCaloriesPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromCaloriesPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromDecawatts(double)" />
        public static Power Decawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromDecawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromDecawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromDeciwatts(double)" />
        public static Power Deciwatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromDeciwatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromDeciwatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromElectricalHorsepower(double)" />
        public static Power ElectricalHorsepower<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromElectricalHorsepower(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromElectricalHorsepower(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromFemtowatts(double)" />
        public static Power Femtowatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromFemtowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromFemtowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromGigacaloriesPerHour(double)" />
        public static Power GigacaloriesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromGigacaloriesPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromGigacaloriesPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromGigajoulesPerHour(double)" />
        public static Power GigajoulesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromGigajoulesPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromGigajoulesPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromGigawatts(double)" />
        public static Power Gigawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromGigawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromGigawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromHydraulicHorsepower(double)" />
        public static Power HydraulicHorsepower<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromHydraulicHorsepower(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromHydraulicHorsepower(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromJoulesPerHour(double)" />
        public static Power JoulesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromJoulesPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromJoulesPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromKilobritishThermalUnitsPerHour(double)" />
        public static Power KilobritishThermalUnitsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromKilobritishThermalUnitsPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromKilobritishThermalUnitsPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromKilocaloriesPerHour(double)" />
        public static Power KilocaloriesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromKilocaloriesPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromKilocaloriesPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromKilojoulesPerHour(double)" />
        public static Power KilojoulesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromKilojoulesPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromKilojoulesPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromKilowatts(double)" />
        public static Power Kilowatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromKilowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromKilowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromMechanicalHorsepower(double)" />
        public static Power MechanicalHorsepower<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromMechanicalHorsepower(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromMechanicalHorsepower(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromMegabritishThermalUnitsPerHour(double)" />
        public static Power MegabritishThermalUnitsPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromMegabritishThermalUnitsPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromMegabritishThermalUnitsPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromMegacaloriesPerHour(double)" />
        public static Power MegacaloriesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromMegacaloriesPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromMegacaloriesPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromMegajoulesPerHour(double)" />
        public static Power MegajoulesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromMegajoulesPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromMegajoulesPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromMegawatts(double)" />
        public static Power Megawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromMegawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromMegawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromMetricHorsepower(double)" />
        public static Power MetricHorsepower<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromMetricHorsepower(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromMetricHorsepower(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromMicrowatts(double)" />
        public static Power Microwatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromMicrowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromMicrowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromMillijoulesPerHour(double)" />
        public static Power MillijoulesPerHour<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromMillijoulesPerHour(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromMillijoulesPerHour(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromMilliwatts(double)" />
        public static Power Milliwatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromMilliwatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromMilliwatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromNanowatts(double)" />
        public static Power Nanowatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromNanowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromNanowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromPetawatts(double)" />
        public static Power Petawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromPetawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromPetawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromPicowatts(double)" />
        public static Power Picowatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromPicowatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromPicowatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromTerawatts(double)" />
        public static Power Terawatts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromTerawatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromTerawatts(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromTonsOfRefrigeration(double)" />
        public static Power TonsOfRefrigeration<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromTonsOfRefrigeration(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromTonsOfRefrigeration(value.ToDouble(null));
#endif

        /// <inheritdoc cref="Power.FromWatts(double)" />
        public static Power Watts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => Power.FromWatts(double.CreateChecked(value));
#else
            , IConvertible
            => Power.FromWatts(value.ToDouble(null));
#endif

    }
}
