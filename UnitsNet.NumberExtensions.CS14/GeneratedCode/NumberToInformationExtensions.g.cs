//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToInformation
{
    /// <summary>
    /// A number to Information Extensions
    /// </summary>
    public static class NumberToInformationExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Information.FromBits(QuantityValue)" />
            public Information Bits
#if NET7_0_OR_GREATER
                => Information.FromBits(QuantityValue.CreateChecked(value));
#else
                => Information.FromBits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromBytes(QuantityValue)" />
            public Information Bytes
#if NET7_0_OR_GREATER
                => Information.FromBytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromBytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromExabits(QuantityValue)" />
            public Information Exabits
#if NET7_0_OR_GREATER
                => Information.FromExabits(QuantityValue.CreateChecked(value));
#else
                => Information.FromExabits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromExabytes(QuantityValue)" />
            public Information Exabytes
#if NET7_0_OR_GREATER
                => Information.FromExabytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromExabytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromExaoctets(QuantityValue)" />
            public Information Exaoctets
#if NET7_0_OR_GREATER
                => Information.FromExaoctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromExaoctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromExbibits(QuantityValue)" />
            public Information Exbibits
#if NET7_0_OR_GREATER
                => Information.FromExbibits(QuantityValue.CreateChecked(value));
#else
                => Information.FromExbibits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromExbibytes(QuantityValue)" />
            public Information Exbibytes
#if NET7_0_OR_GREATER
                => Information.FromExbibytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromExbibytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromExbioctets(QuantityValue)" />
            public Information Exbioctets
#if NET7_0_OR_GREATER
                => Information.FromExbioctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromExbioctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromGibibits(QuantityValue)" />
            public Information Gibibits
#if NET7_0_OR_GREATER
                => Information.FromGibibits(QuantityValue.CreateChecked(value));
#else
                => Information.FromGibibits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromGibibytes(QuantityValue)" />
            public Information Gibibytes
#if NET7_0_OR_GREATER
                => Information.FromGibibytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromGibibytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromGibioctets(QuantityValue)" />
            public Information Gibioctets
#if NET7_0_OR_GREATER
                => Information.FromGibioctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromGibioctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromGigabits(QuantityValue)" />
            public Information Gigabits
#if NET7_0_OR_GREATER
                => Information.FromGigabits(QuantityValue.CreateChecked(value));
#else
                => Information.FromGigabits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromGigabytes(QuantityValue)" />
            public Information Gigabytes
#if NET7_0_OR_GREATER
                => Information.FromGigabytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromGigabytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromGigaoctets(QuantityValue)" />
            public Information Gigaoctets
#if NET7_0_OR_GREATER
                => Information.FromGigaoctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromGigaoctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromKibibits(QuantityValue)" />
            public Information Kibibits
#if NET7_0_OR_GREATER
                => Information.FromKibibits(QuantityValue.CreateChecked(value));
#else
                => Information.FromKibibits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromKibibytes(QuantityValue)" />
            public Information Kibibytes
#if NET7_0_OR_GREATER
                => Information.FromKibibytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromKibibytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromKibioctets(QuantityValue)" />
            public Information Kibioctets
#if NET7_0_OR_GREATER
                => Information.FromKibioctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromKibioctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromKilobits(QuantityValue)" />
            public Information Kilobits
#if NET7_0_OR_GREATER
                => Information.FromKilobits(QuantityValue.CreateChecked(value));
#else
                => Information.FromKilobits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromKilobytes(QuantityValue)" />
            public Information Kilobytes
#if NET7_0_OR_GREATER
                => Information.FromKilobytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromKilobytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromKilooctets(QuantityValue)" />
            public Information Kilooctets
#if NET7_0_OR_GREATER
                => Information.FromKilooctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromKilooctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromMebibits(QuantityValue)" />
            public Information Mebibits
#if NET7_0_OR_GREATER
                => Information.FromMebibits(QuantityValue.CreateChecked(value));
#else
                => Information.FromMebibits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromMebibytes(QuantityValue)" />
            public Information Mebibytes
#if NET7_0_OR_GREATER
                => Information.FromMebibytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromMebibytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromMebioctets(QuantityValue)" />
            public Information Mebioctets
#if NET7_0_OR_GREATER
                => Information.FromMebioctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromMebioctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromMegabits(QuantityValue)" />
            public Information Megabits
#if NET7_0_OR_GREATER
                => Information.FromMegabits(QuantityValue.CreateChecked(value));
#else
                => Information.FromMegabits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromMegabytes(QuantityValue)" />
            public Information Megabytes
#if NET7_0_OR_GREATER
                => Information.FromMegabytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromMegabytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromMegaoctets(QuantityValue)" />
            public Information Megaoctets
#if NET7_0_OR_GREATER
                => Information.FromMegaoctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromMegaoctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromOctets(QuantityValue)" />
            public Information Octets
#if NET7_0_OR_GREATER
                => Information.FromOctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromOctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromPebibits(QuantityValue)" />
            public Information Pebibits
#if NET7_0_OR_GREATER
                => Information.FromPebibits(QuantityValue.CreateChecked(value));
#else
                => Information.FromPebibits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromPebibytes(QuantityValue)" />
            public Information Pebibytes
#if NET7_0_OR_GREATER
                => Information.FromPebibytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromPebibytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromPebioctets(QuantityValue)" />
            public Information Pebioctets
#if NET7_0_OR_GREATER
                => Information.FromPebioctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromPebioctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromPetabits(QuantityValue)" />
            public Information Petabits
#if NET7_0_OR_GREATER
                => Information.FromPetabits(QuantityValue.CreateChecked(value));
#else
                => Information.FromPetabits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromPetabytes(QuantityValue)" />
            public Information Petabytes
#if NET7_0_OR_GREATER
                => Information.FromPetabytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromPetabytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromPetaoctets(QuantityValue)" />
            public Information Petaoctets
#if NET7_0_OR_GREATER
                => Information.FromPetaoctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromPetaoctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromTebibits(QuantityValue)" />
            public Information Tebibits
#if NET7_0_OR_GREATER
                => Information.FromTebibits(QuantityValue.CreateChecked(value));
#else
                => Information.FromTebibits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromTebibytes(QuantityValue)" />
            public Information Tebibytes
#if NET7_0_OR_GREATER
                => Information.FromTebibytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromTebibytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromTebioctets(QuantityValue)" />
            public Information Tebioctets
#if NET7_0_OR_GREATER
                => Information.FromTebioctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromTebioctets(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromTerabits(QuantityValue)" />
            public Information Terabits
#if NET7_0_OR_GREATER
                => Information.FromTerabits(QuantityValue.CreateChecked(value));
#else
                => Information.FromTerabits(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromTerabytes(QuantityValue)" />
            public Information Terabytes
#if NET7_0_OR_GREATER
                => Information.FromTerabytes(QuantityValue.CreateChecked(value));
#else
                => Information.FromTerabytes(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="Information.FromTeraoctets(QuantityValue)" />
            public Information Teraoctets
#if NET7_0_OR_GREATER
                => Information.FromTeraoctets(QuantityValue.CreateChecked(value));
#else
                => Information.FromTeraoctets(value.ToQuantityValue());
#endif

        }
    }
}
