//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Volume is the quantity of three-dimensional space enclosed by some closed boundary, for example, the space that a substance (solid, liquid, gas, or plasma) or shape occupies or contains.[1] Volume is often quantified numerically using the SI derived unit, the cubic metre. The volume of a container is generally understood to be the capacity of the container, i. e. the amount of fluid (gas or liquid) that the container could hold, rather than the amount of space the container itself displaces.
    /// </summary>
    public struct  Volume
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly VolumeUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public VolumeUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public Volume(double value, VolumeUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of Volume, which is Second. All conversions go via this value.
        /// </summary>
        public static VolumeUnit BaseUnit { get; } = VolumeUnit.CubicMeter;

        /// <summary>
        /// Represents the largest possible value of Volume.
        /// </summary>
        public static Volume MaxValue { get; } = new Volume(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of Volume.
        /// </summary>
        public static Volume MinValue { get; } = new Volume(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static Volume Zero { get; } = new Volume(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.AcreFoot"/>
        /// </summary>
        public double AcreFeet => As(VolumeUnit.AcreFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.AuTablespoon"/>
        /// </summary>
        public double AuTablespoons => As(VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.BoardFoot"/>
        /// </summary>
        public double BoardFeet => As(VolumeUnit.BoardFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Centiliter"/>
        /// </summary>
        public double Centiliters => As(VolumeUnit.Centiliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicCentimeter"/>
        /// </summary>
        public double CubicCentimeters => As(VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicDecimeter"/>
        /// </summary>
        public double CubicDecimeters => As(VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicFoot"/>
        /// </summary>
        public double CubicFeet => As(VolumeUnit.CubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicHectometer"/>
        /// </summary>
        public double CubicHectometers => As(VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicInch"/>
        /// </summary>
        public double CubicInches => As(VolumeUnit.CubicInch);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicKilometer"/>
        /// </summary>
        public double CubicKilometers => As(VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMeter"/>
        /// </summary>
        public double CubicMeters => As(VolumeUnit.CubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMicrometer"/>
        /// </summary>
        public double CubicMicrometers => As(VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMile"/>
        /// </summary>
        public double CubicMiles => As(VolumeUnit.CubicMile);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicMillimeter"/>
        /// </summary>
        public double CubicMillimeters => As(VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.CubicYard"/>
        /// </summary>
        public double CubicYards => As(VolumeUnit.CubicYard);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Decaliter"/>
        /// </summary>
        public double Decaliters => As(VolumeUnit.Decaliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.DecausGallon"/>
        /// </summary>
        public double DecausGallons => As(VolumeUnit.DecausGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Deciliter"/>
        /// </summary>
        public double Deciliters => As(VolumeUnit.Deciliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.DeciusGallon"/>
        /// </summary>
        public double DeciusGallons => As(VolumeUnit.DeciusGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.HectocubicFoot"/>
        /// </summary>
        public double HectocubicFeet => As(VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.HectocubicMeter"/>
        /// </summary>
        public double HectocubicMeters => As(VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Hectoliter"/>
        /// </summary>
        public double Hectoliters => As(VolumeUnit.Hectoliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.HectousGallon"/>
        /// </summary>
        public double HectousGallons => As(VolumeUnit.HectousGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialBeerBarrel"/>
        /// </summary>
        public double ImperialBeerBarrels => As(VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialGallon"/>
        /// </summary>
        public double ImperialGallons => As(VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialOunce"/>
        /// </summary>
        public double ImperialOunces => As(VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialPint"/>
        /// </summary>
        public double ImperialPints => As(VolumeUnit.ImperialPint);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.ImperialQuart"/>
        /// </summary>
        public double ImperialQuarts => As(VolumeUnit.ImperialQuart);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KilocubicFoot"/>
        /// </summary>
        public double KilocubicFeet => As(VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KilocubicMeter"/>
        /// </summary>
        public double KilocubicMeters => As(VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KiloimperialGallon"/>
        /// </summary>
        public double KiloimperialGallons => As(VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Kiloliter"/>
        /// </summary>
        public double Kiloliters => As(VolumeUnit.Kiloliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.KilousGallon"/>
        /// </summary>
        public double KilousGallons => As(VolumeUnit.KilousGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Liter"/>
        /// </summary>
        public double Liters => As(VolumeUnit.Liter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MegacubicFoot"/>
        /// </summary>
        public double MegacubicFeet => As(VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MegaimperialGallon"/>
        /// </summary>
        public double MegaimperialGallons => As(VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Megaliter"/>
        /// </summary>
        public double Megaliters => As(VolumeUnit.Megaliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MegausGallon"/>
        /// </summary>
        public double MegausGallons => As(VolumeUnit.MegausGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MetricCup"/>
        /// </summary>
        public double MetricCups => As(VolumeUnit.MetricCup);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.MetricTeaspoon"/>
        /// </summary>
        public double MetricTeaspoons => As(VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Microliter"/>
        /// </summary>
        public double Microliters => As(VolumeUnit.Microliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Milliliter"/>
        /// </summary>
        public double Milliliters => As(VolumeUnit.Milliliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.Nanoliter"/>
        /// </summary>
        public double Nanoliters => As(VolumeUnit.Nanoliter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.OilBarrel"/>
        /// </summary>
        public double OilBarrels => As(VolumeUnit.OilBarrel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UkTablespoon"/>
        /// </summary>
        public double UkTablespoons => As(VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsBeerBarrel"/>
        /// </summary>
        public double UsBeerBarrels => As(VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsCustomaryCup"/>
        /// </summary>
        public double UsCustomaryCups => As(VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsGallon"/>
        /// </summary>
        public double UsGallons => As(VolumeUnit.UsGallon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsLegalCup"/>
        /// </summary>
        public double UsLegalCups => As(VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsOunce"/>
        /// </summary>
        public double UsOunces => As(VolumeUnit.UsOunce);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsPint"/>
        /// </summary>
        public double UsPints => As(VolumeUnit.UsPint);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsQuart"/>
        /// </summary>
        public double UsQuarts => As(VolumeUnit.UsQuart);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsTablespoon"/>
        /// </summary>
        public double UsTablespoons => As(VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="VolumeUnit.UsTeaspoon"/>
        /// </summary>
        public double UsTeaspoons => As(VolumeUnit.UsTeaspoon);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AcreFoot"/>.
        /// </summary>
        public static Volume FromAcreFeet(double acrefeet) => new Volume(acrefeet, VolumeUnit.AcreFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.AuTablespoon"/>.
        /// </summary>
        public static Volume FromAuTablespoons(double autablespoons) => new Volume(autablespoons, VolumeUnit.AuTablespoon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.BoardFoot"/>.
        /// </summary>
        public static Volume FromBoardFeet(double boardfeet) => new Volume(boardfeet, VolumeUnit.BoardFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Centiliter"/>.
        /// </summary>
        public static Volume FromCentiliters(double centiliters) => new Volume(centiliters, VolumeUnit.Centiliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicCentimeter"/>.
        /// </summary>
        public static Volume FromCubicCentimeters(double cubiccentimeters) => new Volume(cubiccentimeters, VolumeUnit.CubicCentimeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicDecimeter"/>.
        /// </summary>
        public static Volume FromCubicDecimeters(double cubicdecimeters) => new Volume(cubicdecimeters, VolumeUnit.CubicDecimeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicFoot"/>.
        /// </summary>
        public static Volume FromCubicFeet(double cubicfeet) => new Volume(cubicfeet, VolumeUnit.CubicFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicHectometer"/>.
        /// </summary>
        public static Volume FromCubicHectometers(double cubichectometers) => new Volume(cubichectometers, VolumeUnit.CubicHectometer);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicInch"/>.
        /// </summary>
        public static Volume FromCubicInches(double cubicinches) => new Volume(cubicinches, VolumeUnit.CubicInch);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicKilometer"/>.
        /// </summary>
        public static Volume FromCubicKilometers(double cubickilometers) => new Volume(cubickilometers, VolumeUnit.CubicKilometer);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMeter"/>.
        /// </summary>
        public static Volume FromCubicMeters(double cubicmeters) => new Volume(cubicmeters, VolumeUnit.CubicMeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMicrometer"/>.
        /// </summary>
        public static Volume FromCubicMicrometers(double cubicmicrometers) => new Volume(cubicmicrometers, VolumeUnit.CubicMicrometer);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMile"/>.
        /// </summary>
        public static Volume FromCubicMiles(double cubicmiles) => new Volume(cubicmiles, VolumeUnit.CubicMile);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicMillimeter"/>.
        /// </summary>
        public static Volume FromCubicMillimeters(double cubicmillimeters) => new Volume(cubicmillimeters, VolumeUnit.CubicMillimeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.CubicYard"/>.
        /// </summary>
        public static Volume FromCubicYards(double cubicyards) => new Volume(cubicyards, VolumeUnit.CubicYard);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Decaliter"/>.
        /// </summary>
        public static Volume FromDecaliters(double decaliters) => new Volume(decaliters, VolumeUnit.Decaliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DecausGallon"/>.
        /// </summary>
        public static Volume FromDecausGallons(double decausgallons) => new Volume(decausgallons, VolumeUnit.DecausGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Deciliter"/>.
        /// </summary>
        public static Volume FromDeciliters(double deciliters) => new Volume(deciliters, VolumeUnit.Deciliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.DeciusGallon"/>.
        /// </summary>
        public static Volume FromDeciusGallons(double deciusgallons) => new Volume(deciusgallons, VolumeUnit.DeciusGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicFoot"/>.
        /// </summary>
        public static Volume FromHectocubicFeet(double hectocubicfeet) => new Volume(hectocubicfeet, VolumeUnit.HectocubicFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectocubicMeter"/>.
        /// </summary>
        public static Volume FromHectocubicMeters(double hectocubicmeters) => new Volume(hectocubicmeters, VolumeUnit.HectocubicMeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Hectoliter"/>.
        /// </summary>
        public static Volume FromHectoliters(double hectoliters) => new Volume(hectoliters, VolumeUnit.Hectoliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.HectousGallon"/>.
        /// </summary>
        public static Volume FromHectousGallons(double hectousgallons) => new Volume(hectousgallons, VolumeUnit.HectousGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialBeerBarrel"/>.
        /// </summary>
        public static Volume FromImperialBeerBarrels(double imperialbeerbarrels) => new Volume(imperialbeerbarrels, VolumeUnit.ImperialBeerBarrel);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialGallon"/>.
        /// </summary>
        public static Volume FromImperialGallons(double imperialgallons) => new Volume(imperialgallons, VolumeUnit.ImperialGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialOunce"/>.
        /// </summary>
        public static Volume FromImperialOunces(double imperialounces) => new Volume(imperialounces, VolumeUnit.ImperialOunce);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialPint"/>.
        /// </summary>
        public static Volume FromImperialPints(double imperialpints) => new Volume(imperialpints, VolumeUnit.ImperialPint);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.ImperialQuart"/>.
        /// </summary>
        public static Volume FromImperialQuarts(double imperialquarts) => new Volume(imperialquarts, VolumeUnit.ImperialQuart);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicFoot"/>.
        /// </summary>
        public static Volume FromKilocubicFeet(double kilocubicfeet) => new Volume(kilocubicfeet, VolumeUnit.KilocubicFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilocubicMeter"/>.
        /// </summary>
        public static Volume FromKilocubicMeters(double kilocubicmeters) => new Volume(kilocubicmeters, VolumeUnit.KilocubicMeter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KiloimperialGallon"/>.
        /// </summary>
        public static Volume FromKiloimperialGallons(double kiloimperialgallons) => new Volume(kiloimperialgallons, VolumeUnit.KiloimperialGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Kiloliter"/>.
        /// </summary>
        public static Volume FromKiloliters(double kiloliters) => new Volume(kiloliters, VolumeUnit.Kiloliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.KilousGallon"/>.
        /// </summary>
        public static Volume FromKilousGallons(double kilousgallons) => new Volume(kilousgallons, VolumeUnit.KilousGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Liter"/>.
        /// </summary>
        public static Volume FromLiters(double liters) => new Volume(liters, VolumeUnit.Liter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegacubicFoot"/>.
        /// </summary>
        public static Volume FromMegacubicFeet(double megacubicfeet) => new Volume(megacubicfeet, VolumeUnit.MegacubicFoot);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegaimperialGallon"/>.
        /// </summary>
        public static Volume FromMegaimperialGallons(double megaimperialgallons) => new Volume(megaimperialgallons, VolumeUnit.MegaimperialGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Megaliter"/>.
        /// </summary>
        public static Volume FromMegaliters(double megaliters) => new Volume(megaliters, VolumeUnit.Megaliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MegausGallon"/>.
        /// </summary>
        public static Volume FromMegausGallons(double megausgallons) => new Volume(megausgallons, VolumeUnit.MegausGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricCup"/>.
        /// </summary>
        public static Volume FromMetricCups(double metriccups) => new Volume(metriccups, VolumeUnit.MetricCup);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.MetricTeaspoon"/>.
        /// </summary>
        public static Volume FromMetricTeaspoons(double metricteaspoons) => new Volume(metricteaspoons, VolumeUnit.MetricTeaspoon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Microliter"/>.
        /// </summary>
        public static Volume FromMicroliters(double microliters) => new Volume(microliters, VolumeUnit.Microliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Milliliter"/>.
        /// </summary>
        public static Volume FromMilliliters(double milliliters) => new Volume(milliliters, VolumeUnit.Milliliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.Nanoliter"/>.
        /// </summary>
        public static Volume FromNanoliters(double nanoliters) => new Volume(nanoliters, VolumeUnit.Nanoliter);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.OilBarrel"/>.
        /// </summary>
        public static Volume FromOilBarrels(double oilbarrels) => new Volume(oilbarrels, VolumeUnit.OilBarrel);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UkTablespoon"/>.
        /// </summary>
        public static Volume FromUkTablespoons(double uktablespoons) => new Volume(uktablespoons, VolumeUnit.UkTablespoon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsBeerBarrel"/>.
        /// </summary>
        public static Volume FromUsBeerBarrels(double usbeerbarrels) => new Volume(usbeerbarrels, VolumeUnit.UsBeerBarrel);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsCustomaryCup"/>.
        /// </summary>
        public static Volume FromUsCustomaryCups(double uscustomarycups) => new Volume(uscustomarycups, VolumeUnit.UsCustomaryCup);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsGallon"/>.
        /// </summary>
        public static Volume FromUsGallons(double usgallons) => new Volume(usgallons, VolumeUnit.UsGallon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsLegalCup"/>.
        /// </summary>
        public static Volume FromUsLegalCups(double uslegalcups) => new Volume(uslegalcups, VolumeUnit.UsLegalCup);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsOunce"/>.
        /// </summary>
        public static Volume FromUsOunces(double usounces) => new Volume(usounces, VolumeUnit.UsOunce);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsPint"/>.
        /// </summary>
        public static Volume FromUsPints(double uspints) => new Volume(uspints, VolumeUnit.UsPint);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsQuart"/>.
        /// </summary>
        public static Volume FromUsQuarts(double usquarts) => new Volume(usquarts, VolumeUnit.UsQuart);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTablespoon"/>.
        /// </summary>
        public static Volume FromUsTablespoons(double ustablespoons) => new Volume(ustablespoons, VolumeUnit.UsTablespoon);

        /// <summary>
        ///     Creates a <see cref="Volume"/> from <see cref="VolumeUnit.UsTeaspoon"/>.
        /// </summary>
        public static Volume FromUsTeaspoons(double usteaspoons) => new Volume(usteaspoons, VolumeUnit.UsTeaspoon);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="VolumeUnit" /> to <see cref="Volume" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>Volume unit value.</returns>
        public static Volume From(double value, VolumeUnit fromUnit)
        {
            return new Volume(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(VolumeUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this Volume to another Volume with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A Volume with the specified unit.</returns>
                public Volume ToUnit(VolumeUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new Volume(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        VolumeUnit.AcreFoot => _value * 1233.48183754752,
                        VolumeUnit.AuTablespoon => _value * 2e-5,
                        VolumeUnit.BoardFoot => _value * (0.028316846592 / 12),
                        VolumeUnit.Centiliter => (_value / 1e3) * 1e-2d,
                        VolumeUnit.CubicCentimeter => _value / 1e6,
                        VolumeUnit.CubicDecimeter => _value / 1e3,
                        VolumeUnit.CubicFoot => _value * 0.028316846592,
                        VolumeUnit.CubicHectometer => _value * 1e6,
                        VolumeUnit.CubicInch => _value * 1.6387064e-5,
                        VolumeUnit.CubicKilometer => _value * 1e9,
                        VolumeUnit.CubicMeter => _value,
                        VolumeUnit.CubicMicrometer => _value / 1e18,
                        VolumeUnit.CubicMile => _value * 4.168181825440579584e9,
                        VolumeUnit.CubicMillimeter => _value / 1e9,
                        VolumeUnit.CubicYard => _value * 0.764554857984,
                        VolumeUnit.Decaliter => (_value / 1e3) * 1e1d,
                        VolumeUnit.DecausGallon => (_value * 0.003785411784) * 1e1d,
                        VolumeUnit.Deciliter => (_value / 1e3) * 1e-1d,
                        VolumeUnit.DeciusGallon => (_value * 0.003785411784) * 1e-1d,
                        VolumeUnit.HectocubicFoot => (_value * 0.028316846592) * 1e2d,
                        VolumeUnit.HectocubicMeter => (_value) * 1e2d,
                        VolumeUnit.Hectoliter => (_value / 1e3) * 1e2d,
                        VolumeUnit.HectousGallon => (_value * 0.003785411784) * 1e2d,
                        VolumeUnit.ImperialBeerBarrel => _value * 0.16365924,
                        VolumeUnit.ImperialGallon => _value * 0.00454609,
                        VolumeUnit.ImperialOunce => _value * 2.84130625e-5,
                        VolumeUnit.ImperialPint => _value * 5.6826125e-4,
                        VolumeUnit.ImperialQuart => _value * 1.1365225e-3,
                        VolumeUnit.KilocubicFoot => (_value * 0.028316846592) * 1e3d,
                        VolumeUnit.KilocubicMeter => (_value) * 1e3d,
                        VolumeUnit.KiloimperialGallon => (_value * 0.00454609) * 1e3d,
                        VolumeUnit.Kiloliter => (_value / 1e3) * 1e3d,
                        VolumeUnit.KilousGallon => (_value * 0.003785411784) * 1e3d,
                        VolumeUnit.Liter => _value / 1e3,
                        VolumeUnit.MegacubicFoot => (_value * 0.028316846592) * 1e6d,
                        VolumeUnit.MegaimperialGallon => (_value * 0.00454609) * 1e6d,
                        VolumeUnit.Megaliter => (_value / 1e3) * 1e6d,
                        VolumeUnit.MegausGallon => (_value * 0.003785411784) * 1e6d,
                        VolumeUnit.MetricCup => _value * 0.00025,
                        VolumeUnit.MetricTeaspoon => _value * 0.5e-5,
                        VolumeUnit.Microliter => (_value / 1e3) * 1e-6d,
                        VolumeUnit.Milliliter => (_value / 1e3) * 1e-3d,
                        VolumeUnit.Nanoliter => (_value / 1e3) * 1e-9d,
                        VolumeUnit.OilBarrel => _value * 0.158987294928,
                        VolumeUnit.UkTablespoon => _value * 1.5e-5,
                        VolumeUnit.UsBeerBarrel => _value * 0.117347765304,
                        VolumeUnit.UsCustomaryCup => _value * 0.0002365882365,
                        VolumeUnit.UsGallon => _value * 0.003785411784,
                        VolumeUnit.UsLegalCup => _value * 0.00024,
                        VolumeUnit.UsOunce => _value * 2.95735295625e-5,
                        VolumeUnit.UsPint => _value * 4.73176473e-4,
                        VolumeUnit.UsQuart => _value * 9.46352946e-4,
                        VolumeUnit.UsTablespoon => _value * 1.478676478125e-5,
                        VolumeUnit.UsTeaspoon => _value * 4.92892159375e-6,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(VolumeUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        VolumeUnit.AcreFoot => baseUnitValue / 1233.48183754752,
                        VolumeUnit.AuTablespoon => baseUnitValue / 2e-5,
                        VolumeUnit.BoardFoot => baseUnitValue / (0.028316846592 / 12),
                        VolumeUnit.Centiliter => (baseUnitValue * 1e3) / 1e-2d,
                        VolumeUnit.CubicCentimeter => baseUnitValue * 1e6,
                        VolumeUnit.CubicDecimeter => baseUnitValue * 1e3,
                        VolumeUnit.CubicFoot => baseUnitValue / 0.028316846592,
                        VolumeUnit.CubicHectometer => baseUnitValue / 1e6,
                        VolumeUnit.CubicInch => baseUnitValue / 1.6387064e-5,
                        VolumeUnit.CubicKilometer => baseUnitValue / 1e9,
                        VolumeUnit.CubicMeter => baseUnitValue,
                        VolumeUnit.CubicMicrometer => baseUnitValue * 1e18,
                        VolumeUnit.CubicMile => baseUnitValue / 4.168181825440579584e9,
                        VolumeUnit.CubicMillimeter => baseUnitValue * 1e9,
                        VolumeUnit.CubicYard => baseUnitValue / 0.764554857984,
                        VolumeUnit.Decaliter => (baseUnitValue * 1e3) / 1e1d,
                        VolumeUnit.DecausGallon => (baseUnitValue / 0.003785411784) / 1e1d,
                        VolumeUnit.Deciliter => (baseUnitValue * 1e3) / 1e-1d,
                        VolumeUnit.DeciusGallon => (baseUnitValue / 0.003785411784) / 1e-1d,
                        VolumeUnit.HectocubicFoot => (baseUnitValue / 0.028316846592) / 1e2d,
                        VolumeUnit.HectocubicMeter => (baseUnitValue) / 1e2d,
                        VolumeUnit.Hectoliter => (baseUnitValue * 1e3) / 1e2d,
                        VolumeUnit.HectousGallon => (baseUnitValue / 0.003785411784) / 1e2d,
                        VolumeUnit.ImperialBeerBarrel => baseUnitValue / 0.16365924,
                        VolumeUnit.ImperialGallon => baseUnitValue / 0.00454609,
                        VolumeUnit.ImperialOunce => baseUnitValue / 2.84130625e-5,
                        VolumeUnit.ImperialPint => baseUnitValue / 5.6826125e-4,
                        VolumeUnit.ImperialQuart => baseUnitValue / 1.1365225e-3,
                        VolumeUnit.KilocubicFoot => (baseUnitValue / 0.028316846592) / 1e3d,
                        VolumeUnit.KilocubicMeter => (baseUnitValue) / 1e3d,
                        VolumeUnit.KiloimperialGallon => (baseUnitValue / 0.00454609) / 1e3d,
                        VolumeUnit.Kiloliter => (baseUnitValue * 1e3) / 1e3d,
                        VolumeUnit.KilousGallon => (baseUnitValue / 0.003785411784) / 1e3d,
                        VolumeUnit.Liter => baseUnitValue * 1e3,
                        VolumeUnit.MegacubicFoot => (baseUnitValue / 0.028316846592) / 1e6d,
                        VolumeUnit.MegaimperialGallon => (baseUnitValue / 0.00454609) / 1e6d,
                        VolumeUnit.Megaliter => (baseUnitValue * 1e3) / 1e6d,
                        VolumeUnit.MegausGallon => (baseUnitValue / 0.003785411784) / 1e6d,
                        VolumeUnit.MetricCup => baseUnitValue / 0.00025,
                        VolumeUnit.MetricTeaspoon => baseUnitValue / 0.5e-5,
                        VolumeUnit.Microliter => (baseUnitValue * 1e3) / 1e-6d,
                        VolumeUnit.Milliliter => (baseUnitValue * 1e3) / 1e-3d,
                        VolumeUnit.Nanoliter => (baseUnitValue * 1e3) / 1e-9d,
                        VolumeUnit.OilBarrel => baseUnitValue / 0.158987294928,
                        VolumeUnit.UkTablespoon => baseUnitValue / 1.5e-5,
                        VolumeUnit.UsBeerBarrel => baseUnitValue / 0.117347765304,
                        VolumeUnit.UsCustomaryCup => baseUnitValue / 0.0002365882365,
                        VolumeUnit.UsGallon => baseUnitValue / 0.003785411784,
                        VolumeUnit.UsLegalCup => baseUnitValue / 0.00024,
                        VolumeUnit.UsOunce => baseUnitValue / 2.95735295625e-5,
                        VolumeUnit.UsPint => baseUnitValue / 4.73176473e-4,
                        VolumeUnit.UsQuart => baseUnitValue / 9.46352946e-4,
                        VolumeUnit.UsTablespoon => baseUnitValue / 1.478676478125e-5,
                        VolumeUnit.UsTeaspoon => baseUnitValue / 4.92892159375e-6,
                        _ => throw new NotImplementedException($"Can not convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

