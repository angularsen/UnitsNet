//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToInformation;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToInformationExtensionsTests
    {
        [Fact]
        public void NumberToBitsTest() =>
            Assert.Equal(Information.FromBits(2), 2.Bits);

        [Fact]
        public void NumberToBytesTest() =>
            Assert.Equal(Information.FromBytes(2), 2.Bytes);

        [Fact]
        public void NumberToExabitsTest() =>
            Assert.Equal(Information.FromExabits(2), 2.Exabits);

        [Fact]
        public void NumberToExabytesTest() =>
            Assert.Equal(Information.FromExabytes(2), 2.Exabytes);

        [Fact]
        public void NumberToExaoctetsTest() =>
            Assert.Equal(Information.FromExaoctets(2), 2.Exaoctets);

        [Fact]
        public void NumberToExbibitsTest() =>
            Assert.Equal(Information.FromExbibits(2), 2.Exbibits);

        [Fact]
        public void NumberToExbibytesTest() =>
            Assert.Equal(Information.FromExbibytes(2), 2.Exbibytes);

        [Fact]
        public void NumberToExbioctetsTest() =>
            Assert.Equal(Information.FromExbioctets(2), 2.Exbioctets);

        [Fact]
        public void NumberToGibibitsTest() =>
            Assert.Equal(Information.FromGibibits(2), 2.Gibibits);

        [Fact]
        public void NumberToGibibytesTest() =>
            Assert.Equal(Information.FromGibibytes(2), 2.Gibibytes);

        [Fact]
        public void NumberToGibioctetsTest() =>
            Assert.Equal(Information.FromGibioctets(2), 2.Gibioctets);

        [Fact]
        public void NumberToGigabitsTest() =>
            Assert.Equal(Information.FromGigabits(2), 2.Gigabits);

        [Fact]
        public void NumberToGigabytesTest() =>
            Assert.Equal(Information.FromGigabytes(2), 2.Gigabytes);

        [Fact]
        public void NumberToGigaoctetsTest() =>
            Assert.Equal(Information.FromGigaoctets(2), 2.Gigaoctets);

        [Fact]
        public void NumberToKibibitsTest() =>
            Assert.Equal(Information.FromKibibits(2), 2.Kibibits);

        [Fact]
        public void NumberToKibibytesTest() =>
            Assert.Equal(Information.FromKibibytes(2), 2.Kibibytes);

        [Fact]
        public void NumberToKibioctetsTest() =>
            Assert.Equal(Information.FromKibioctets(2), 2.Kibioctets);

        [Fact]
        public void NumberToKilobitsTest() =>
            Assert.Equal(Information.FromKilobits(2), 2.Kilobits);

        [Fact]
        public void NumberToKilobytesTest() =>
            Assert.Equal(Information.FromKilobytes(2), 2.Kilobytes);

        [Fact]
        public void NumberToKilooctetsTest() =>
            Assert.Equal(Information.FromKilooctets(2), 2.Kilooctets);

        [Fact]
        public void NumberToMebibitsTest() =>
            Assert.Equal(Information.FromMebibits(2), 2.Mebibits);

        [Fact]
        public void NumberToMebibytesTest() =>
            Assert.Equal(Information.FromMebibytes(2), 2.Mebibytes);

        [Fact]
        public void NumberToMebioctetsTest() =>
            Assert.Equal(Information.FromMebioctets(2), 2.Mebioctets);

        [Fact]
        public void NumberToMegabitsTest() =>
            Assert.Equal(Information.FromMegabits(2), 2.Megabits);

        [Fact]
        public void NumberToMegabytesTest() =>
            Assert.Equal(Information.FromMegabytes(2), 2.Megabytes);

        [Fact]
        public void NumberToMegaoctetsTest() =>
            Assert.Equal(Information.FromMegaoctets(2), 2.Megaoctets);

        [Fact]
        public void NumberToOctetsTest() =>
            Assert.Equal(Information.FromOctets(2), 2.Octets);

        [Fact]
        public void NumberToPebibitsTest() =>
            Assert.Equal(Information.FromPebibits(2), 2.Pebibits);

        [Fact]
        public void NumberToPebibytesTest() =>
            Assert.Equal(Information.FromPebibytes(2), 2.Pebibytes);

        [Fact]
        public void NumberToPebioctetsTest() =>
            Assert.Equal(Information.FromPebioctets(2), 2.Pebioctets);

        [Fact]
        public void NumberToPetabitsTest() =>
            Assert.Equal(Information.FromPetabits(2), 2.Petabits);

        [Fact]
        public void NumberToPetabytesTest() =>
            Assert.Equal(Information.FromPetabytes(2), 2.Petabytes);

        [Fact]
        public void NumberToPetaoctetsTest() =>
            Assert.Equal(Information.FromPetaoctets(2), 2.Petaoctets);

        [Fact]
        public void NumberToTebibitsTest() =>
            Assert.Equal(Information.FromTebibits(2), 2.Tebibits);

        [Fact]
        public void NumberToTebibytesTest() =>
            Assert.Equal(Information.FromTebibytes(2), 2.Tebibytes);

        [Fact]
        public void NumberToTebioctetsTest() =>
            Assert.Equal(Information.FromTebioctets(2), 2.Tebioctets);

        [Fact]
        public void NumberToTerabitsTest() =>
            Assert.Equal(Information.FromTerabits(2), 2.Terabits);

        [Fact]
        public void NumberToTerabytesTest() =>
            Assert.Equal(Information.FromTerabytes(2), 2.Terabytes);

        [Fact]
        public void NumberToTeraoctetsTest() =>
            Assert.Equal(Information.FromTeraoctets(2), 2.Teraoctets);

    }
}
