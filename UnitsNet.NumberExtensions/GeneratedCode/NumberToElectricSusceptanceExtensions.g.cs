//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricSusceptance
{
    /// <summary>
    /// A number to ElectricSusceptance Extensions
    /// </summary>
    public static class NumberToElectricSusceptanceExtensions
    {
        /// <inheritdoc cref="ElectricSusceptance.FromGigamhos(double)" />
        public static ElectricSusceptance Gigamhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromGigamhos(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromGigamhos(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromGigasiemens(double)" />
        public static ElectricSusceptance Gigasiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromGigasiemens(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromGigasiemens(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromKilomhos(double)" />
        public static ElectricSusceptance Kilomhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromKilomhos(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromKilomhos(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromKilosiemens(double)" />
        public static ElectricSusceptance Kilosiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromKilosiemens(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromKilosiemens(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromMegamhos(double)" />
        public static ElectricSusceptance Megamhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromMegamhos(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromMegamhos(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromMegasiemens(double)" />
        public static ElectricSusceptance Megasiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromMegasiemens(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromMegasiemens(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromMhos(double)" />
        public static ElectricSusceptance Mhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromMhos(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromMhos(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromMicromhos(double)" />
        public static ElectricSusceptance Micromhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromMicromhos(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromMicromhos(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromMicrosiemens(double)" />
        public static ElectricSusceptance Microsiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromMicrosiemens(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromMicrosiemens(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromMillimhos(double)" />
        public static ElectricSusceptance Millimhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromMillimhos(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromMillimhos(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromMillisiemens(double)" />
        public static ElectricSusceptance Millisiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromMillisiemens(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromMillisiemens(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromNanomhos(double)" />
        public static ElectricSusceptance Nanomhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromNanomhos(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromNanomhos(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromNanosiemens(double)" />
        public static ElectricSusceptance Nanosiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromNanosiemens(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromNanosiemens(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromSiemens(double)" />
        public static ElectricSusceptance Siemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromSiemens(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromSiemens(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromTeramhos(double)" />
        public static ElectricSusceptance Teramhos<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromTeramhos(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromTeramhos(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricSusceptance.FromTerasiemens(double)" />
        public static ElectricSusceptance Terasiemens<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricSusceptance.FromTerasiemens(double.CreateChecked(value));
#else
            => ElectricSusceptance.FromTerasiemens(Convert.ToDouble(value));
#endif

    }
}
