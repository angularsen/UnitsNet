//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricConductance
{
    /// <summary>
    /// A number to ElectricConductance Extensions
    /// </summary>
    public static class NumberToElectricConductanceExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="ElectricConductance.FromGigamhos(double)" />
            public ElectricConductance Gigamhos
#if NET7_0_OR_GREATER
                => ElectricConductance.FromGigamhos(double.CreateChecked(value));
#else
                => ElectricConductance.FromGigamhos(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromGigasiemens(double)" />
            public ElectricConductance Gigasiemens
#if NET7_0_OR_GREATER
                => ElectricConductance.FromGigasiemens(double.CreateChecked(value));
#else
                => ElectricConductance.FromGigasiemens(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromKilomhos(double)" />
            public ElectricConductance Kilomhos
#if NET7_0_OR_GREATER
                => ElectricConductance.FromKilomhos(double.CreateChecked(value));
#else
                => ElectricConductance.FromKilomhos(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromKilosiemens(double)" />
            public ElectricConductance Kilosiemens
#if NET7_0_OR_GREATER
                => ElectricConductance.FromKilosiemens(double.CreateChecked(value));
#else
                => ElectricConductance.FromKilosiemens(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromMegamhos(double)" />
            public ElectricConductance Megamhos
#if NET7_0_OR_GREATER
                => ElectricConductance.FromMegamhos(double.CreateChecked(value));
#else
                => ElectricConductance.FromMegamhos(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromMegasiemens(double)" />
            public ElectricConductance Megasiemens
#if NET7_0_OR_GREATER
                => ElectricConductance.FromMegasiemens(double.CreateChecked(value));
#else
                => ElectricConductance.FromMegasiemens(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromMhos(double)" />
            public ElectricConductance Mhos
#if NET7_0_OR_GREATER
                => ElectricConductance.FromMhos(double.CreateChecked(value));
#else
                => ElectricConductance.FromMhos(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromMicromhos(double)" />
            public ElectricConductance Micromhos
#if NET7_0_OR_GREATER
                => ElectricConductance.FromMicromhos(double.CreateChecked(value));
#else
                => ElectricConductance.FromMicromhos(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromMicrosiemens(double)" />
            public ElectricConductance Microsiemens
#if NET7_0_OR_GREATER
                => ElectricConductance.FromMicrosiemens(double.CreateChecked(value));
#else
                => ElectricConductance.FromMicrosiemens(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromMillimhos(double)" />
            public ElectricConductance Millimhos
#if NET7_0_OR_GREATER
                => ElectricConductance.FromMillimhos(double.CreateChecked(value));
#else
                => ElectricConductance.FromMillimhos(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromMillisiemens(double)" />
            public ElectricConductance Millisiemens
#if NET7_0_OR_GREATER
                => ElectricConductance.FromMillisiemens(double.CreateChecked(value));
#else
                => ElectricConductance.FromMillisiemens(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromNanomhos(double)" />
            public ElectricConductance Nanomhos
#if NET7_0_OR_GREATER
                => ElectricConductance.FromNanomhos(double.CreateChecked(value));
#else
                => ElectricConductance.FromNanomhos(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromNanosiemens(double)" />
            public ElectricConductance Nanosiemens
#if NET7_0_OR_GREATER
                => ElectricConductance.FromNanosiemens(double.CreateChecked(value));
#else
                => ElectricConductance.FromNanosiemens(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromSiemens(double)" />
            public ElectricConductance Siemens
#if NET7_0_OR_GREATER
                => ElectricConductance.FromSiemens(double.CreateChecked(value));
#else
                => ElectricConductance.FromSiemens(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromTeramhos(double)" />
            public ElectricConductance Teramhos
#if NET7_0_OR_GREATER
                => ElectricConductance.FromTeramhos(double.CreateChecked(value));
#else
                => ElectricConductance.FromTeramhos(value.ToDouble(null));
#endif

            /// <inheritdoc cref="ElectricConductance.FromTerasiemens(double)" />
            public ElectricConductance Terasiemens
#if NET7_0_OR_GREATER
                => ElectricConductance.FromTerasiemens(double.CreateChecked(value));
#else
                => ElectricConductance.FromTerasiemens(value.ToDouble(null));
#endif

        }
    }
}
