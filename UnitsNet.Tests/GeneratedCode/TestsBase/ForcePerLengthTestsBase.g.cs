//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of ForcePerLength.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class ForcePerLengthTestsBase : QuantityTestsBase
    {
        protected abstract double CentinewtonsPerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double CentinewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double CentinewtonsPerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double DecanewtonsPerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double DecanewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double DecanewtonsPerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double DecinewtonsPerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double DecinewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double DecinewtonsPerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double KilogramsForcePerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double KilogramsForcePerMeterInOneNewtonPerMeter { get; }
        protected abstract double KilogramsForcePerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double KilonewtonsPerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double KilonewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double KilonewtonsPerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double KilopoundsForcePerFootInOneNewtonPerMeter { get; }
        protected abstract double KilopoundsForcePerInchInOneNewtonPerMeter { get; }
        protected abstract double MeganewtonsPerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double MeganewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double MeganewtonsPerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double MicronewtonsPerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double MicronewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double MicronewtonsPerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double MillinewtonsPerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double MillinewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double MillinewtonsPerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double NanonewtonsPerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double NanonewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double NanonewtonsPerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double NewtonsPerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double NewtonsPerMeterInOneNewtonPerMeter { get; }
        protected abstract double NewtonsPerMillimeterInOneNewtonPerMeter { get; }
        protected abstract double PoundsForcePerFootInOneNewtonPerMeter { get; }
        protected abstract double PoundsForcePerInchInOneNewtonPerMeter { get; }
        protected abstract double PoundsForcePerYardInOneNewtonPerMeter { get; }
        protected abstract double TonnesForcePerCentimeterInOneNewtonPerMeter { get; }
        protected abstract double TonnesForcePerMeterInOneNewtonPerMeter { get; }
        protected abstract double TonnesForcePerMillimeterInOneNewtonPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double CentinewtonsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double CentinewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double CentinewtonsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double DecanewtonsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double DecinewtonsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilogramsForcePerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilonewtonsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerFootTolerance { get { return 1e-5; } }
        protected virtual double KilopoundsForcePerInchTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MeganewtonsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MicronewtonsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MillinewtonsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NanonewtonsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double NewtonsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerFootTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerInchTolerance { get { return 1e-5; } }
        protected virtual double PoundsForcePerYardTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerMeterTolerance { get { return 1e-5; } }
        protected virtual double TonnesForcePerMillimeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(ForcePerLengthUnit unit)
        {
            return unit switch
            {
                ForcePerLengthUnit.CentinewtonPerCentimeter => (CentinewtonsPerCentimeterInOneNewtonPerMeter, CentinewtonsPerCentimeterTolerance),
                ForcePerLengthUnit.CentinewtonPerMeter => (CentinewtonsPerMeterInOneNewtonPerMeter, CentinewtonsPerMeterTolerance),
                ForcePerLengthUnit.CentinewtonPerMillimeter => (CentinewtonsPerMillimeterInOneNewtonPerMeter, CentinewtonsPerMillimeterTolerance),
                ForcePerLengthUnit.DecanewtonPerCentimeter => (DecanewtonsPerCentimeterInOneNewtonPerMeter, DecanewtonsPerCentimeterTolerance),
                ForcePerLengthUnit.DecanewtonPerMeter => (DecanewtonsPerMeterInOneNewtonPerMeter, DecanewtonsPerMeterTolerance),
                ForcePerLengthUnit.DecanewtonPerMillimeter => (DecanewtonsPerMillimeterInOneNewtonPerMeter, DecanewtonsPerMillimeterTolerance),
                ForcePerLengthUnit.DecinewtonPerCentimeter => (DecinewtonsPerCentimeterInOneNewtonPerMeter, DecinewtonsPerCentimeterTolerance),
                ForcePerLengthUnit.DecinewtonPerMeter => (DecinewtonsPerMeterInOneNewtonPerMeter, DecinewtonsPerMeterTolerance),
                ForcePerLengthUnit.DecinewtonPerMillimeter => (DecinewtonsPerMillimeterInOneNewtonPerMeter, DecinewtonsPerMillimeterTolerance),
                ForcePerLengthUnit.KilogramForcePerCentimeter => (KilogramsForcePerCentimeterInOneNewtonPerMeter, KilogramsForcePerCentimeterTolerance),
                ForcePerLengthUnit.KilogramForcePerMeter => (KilogramsForcePerMeterInOneNewtonPerMeter, KilogramsForcePerMeterTolerance),
                ForcePerLengthUnit.KilogramForcePerMillimeter => (KilogramsForcePerMillimeterInOneNewtonPerMeter, KilogramsForcePerMillimeterTolerance),
                ForcePerLengthUnit.KilonewtonPerCentimeter => (KilonewtonsPerCentimeterInOneNewtonPerMeter, KilonewtonsPerCentimeterTolerance),
                ForcePerLengthUnit.KilonewtonPerMeter => (KilonewtonsPerMeterInOneNewtonPerMeter, KilonewtonsPerMeterTolerance),
                ForcePerLengthUnit.KilonewtonPerMillimeter => (KilonewtonsPerMillimeterInOneNewtonPerMeter, KilonewtonsPerMillimeterTolerance),
                ForcePerLengthUnit.KilopoundForcePerFoot => (KilopoundsForcePerFootInOneNewtonPerMeter, KilopoundsForcePerFootTolerance),
                ForcePerLengthUnit.KilopoundForcePerInch => (KilopoundsForcePerInchInOneNewtonPerMeter, KilopoundsForcePerInchTolerance),
                ForcePerLengthUnit.MeganewtonPerCentimeter => (MeganewtonsPerCentimeterInOneNewtonPerMeter, MeganewtonsPerCentimeterTolerance),
                ForcePerLengthUnit.MeganewtonPerMeter => (MeganewtonsPerMeterInOneNewtonPerMeter, MeganewtonsPerMeterTolerance),
                ForcePerLengthUnit.MeganewtonPerMillimeter => (MeganewtonsPerMillimeterInOneNewtonPerMeter, MeganewtonsPerMillimeterTolerance),
                ForcePerLengthUnit.MicronewtonPerCentimeter => (MicronewtonsPerCentimeterInOneNewtonPerMeter, MicronewtonsPerCentimeterTolerance),
                ForcePerLengthUnit.MicronewtonPerMeter => (MicronewtonsPerMeterInOneNewtonPerMeter, MicronewtonsPerMeterTolerance),
                ForcePerLengthUnit.MicronewtonPerMillimeter => (MicronewtonsPerMillimeterInOneNewtonPerMeter, MicronewtonsPerMillimeterTolerance),
                ForcePerLengthUnit.MillinewtonPerCentimeter => (MillinewtonsPerCentimeterInOneNewtonPerMeter, MillinewtonsPerCentimeterTolerance),
                ForcePerLengthUnit.MillinewtonPerMeter => (MillinewtonsPerMeterInOneNewtonPerMeter, MillinewtonsPerMeterTolerance),
                ForcePerLengthUnit.MillinewtonPerMillimeter => (MillinewtonsPerMillimeterInOneNewtonPerMeter, MillinewtonsPerMillimeterTolerance),
                ForcePerLengthUnit.NanonewtonPerCentimeter => (NanonewtonsPerCentimeterInOneNewtonPerMeter, NanonewtonsPerCentimeterTolerance),
                ForcePerLengthUnit.NanonewtonPerMeter => (NanonewtonsPerMeterInOneNewtonPerMeter, NanonewtonsPerMeterTolerance),
                ForcePerLengthUnit.NanonewtonPerMillimeter => (NanonewtonsPerMillimeterInOneNewtonPerMeter, NanonewtonsPerMillimeterTolerance),
                ForcePerLengthUnit.NewtonPerCentimeter => (NewtonsPerCentimeterInOneNewtonPerMeter, NewtonsPerCentimeterTolerance),
                ForcePerLengthUnit.NewtonPerMeter => (NewtonsPerMeterInOneNewtonPerMeter, NewtonsPerMeterTolerance),
                ForcePerLengthUnit.NewtonPerMillimeter => (NewtonsPerMillimeterInOneNewtonPerMeter, NewtonsPerMillimeterTolerance),
                ForcePerLengthUnit.PoundForcePerFoot => (PoundsForcePerFootInOneNewtonPerMeter, PoundsForcePerFootTolerance),
                ForcePerLengthUnit.PoundForcePerInch => (PoundsForcePerInchInOneNewtonPerMeter, PoundsForcePerInchTolerance),
                ForcePerLengthUnit.PoundForcePerYard => (PoundsForcePerYardInOneNewtonPerMeter, PoundsForcePerYardTolerance),
                ForcePerLengthUnit.TonneForcePerCentimeter => (TonnesForcePerCentimeterInOneNewtonPerMeter, TonnesForcePerCentimeterTolerance),
                ForcePerLengthUnit.TonneForcePerMeter => (TonnesForcePerMeterInOneNewtonPerMeter, TonnesForcePerMeterTolerance),
                ForcePerLengthUnit.TonneForcePerMillimeter => (TonnesForcePerMillimeterInOneNewtonPerMeter, TonnesForcePerMillimeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { ForcePerLengthUnit.CentinewtonPerCentimeter },
            new object[] { ForcePerLengthUnit.CentinewtonPerMeter },
            new object[] { ForcePerLengthUnit.CentinewtonPerMillimeter },
            new object[] { ForcePerLengthUnit.DecanewtonPerCentimeter },
            new object[] { ForcePerLengthUnit.DecanewtonPerMeter },
            new object[] { ForcePerLengthUnit.DecanewtonPerMillimeter },
            new object[] { ForcePerLengthUnit.DecinewtonPerCentimeter },
            new object[] { ForcePerLengthUnit.DecinewtonPerMeter },
            new object[] { ForcePerLengthUnit.DecinewtonPerMillimeter },
            new object[] { ForcePerLengthUnit.KilogramForcePerCentimeter },
            new object[] { ForcePerLengthUnit.KilogramForcePerMeter },
            new object[] { ForcePerLengthUnit.KilogramForcePerMillimeter },
            new object[] { ForcePerLengthUnit.KilonewtonPerCentimeter },
            new object[] { ForcePerLengthUnit.KilonewtonPerMeter },
            new object[] { ForcePerLengthUnit.KilonewtonPerMillimeter },
            new object[] { ForcePerLengthUnit.KilopoundForcePerFoot },
            new object[] { ForcePerLengthUnit.KilopoundForcePerInch },
            new object[] { ForcePerLengthUnit.MeganewtonPerCentimeter },
            new object[] { ForcePerLengthUnit.MeganewtonPerMeter },
            new object[] { ForcePerLengthUnit.MeganewtonPerMillimeter },
            new object[] { ForcePerLengthUnit.MicronewtonPerCentimeter },
            new object[] { ForcePerLengthUnit.MicronewtonPerMeter },
            new object[] { ForcePerLengthUnit.MicronewtonPerMillimeter },
            new object[] { ForcePerLengthUnit.MillinewtonPerCentimeter },
            new object[] { ForcePerLengthUnit.MillinewtonPerMeter },
            new object[] { ForcePerLengthUnit.MillinewtonPerMillimeter },
            new object[] { ForcePerLengthUnit.NanonewtonPerCentimeter },
            new object[] { ForcePerLengthUnit.NanonewtonPerMeter },
            new object[] { ForcePerLengthUnit.NanonewtonPerMillimeter },
            new object[] { ForcePerLengthUnit.NewtonPerCentimeter },
            new object[] { ForcePerLengthUnit.NewtonPerMeter },
            new object[] { ForcePerLengthUnit.NewtonPerMillimeter },
            new object[] { ForcePerLengthUnit.PoundForcePerFoot },
            new object[] { ForcePerLengthUnit.PoundForcePerInch },
            new object[] { ForcePerLengthUnit.PoundForcePerYard },
            new object[] { ForcePerLengthUnit.TonneForcePerCentimeter },
            new object[] { ForcePerLengthUnit.TonneForcePerMeter },
            new object[] { ForcePerLengthUnit.TonneForcePerMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new ForcePerLength();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(ForcePerLengthUnit.NewtonPerMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new ForcePerLength(double.PositiveInfinity, ForcePerLengthUnit.NewtonPerMeter));
            var exception2 = Record.Exception(() => new ForcePerLength(double.NegativeInfinity, ForcePerLengthUnit.NewtonPerMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new ForcePerLength(double.NaN, ForcePerLengthUnit.NewtonPerMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new ForcePerLength(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new ForcePerLength(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new ForcePerLength(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void ForcePerLength_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            ForcePerLengthUnit[] unitsOrderedByName = EnumHelper.GetValues<ForcePerLengthUnit>().OrderBy(x => x.ToString(), StringComparer.Ordinal).ToArray();
            var quantity = new ForcePerLength(1, ForcePerLengthUnit.NewtonPerMeter);

            QuantityInfo<ForcePerLength, ForcePerLengthUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("ForcePerLength", quantityInfo.Name);
            Assert.Equal(ForcePerLength.Zero, quantityInfo.Zero);
            Assert.Equal(ForcePerLength.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(ForcePerLength.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<ForcePerLengthUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void NewtonPerMeterToForcePerLengthUnits()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            AssertEx.EqualTolerance(CentinewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.CentinewtonsPerCentimeter, CentinewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(CentinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.CentinewtonsPerMeter, CentinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(CentinewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.CentinewtonsPerMillimeter, CentinewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.DecanewtonsPerCentimeter, DecanewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.DecanewtonsPerMeter, DecanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.DecanewtonsPerMillimeter, DecanewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.DecinewtonsPerCentimeter, DecinewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.DecinewtonsPerMeter, DecinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.DecinewtonsPerMillimeter, DecinewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerCentimeterInOneNewtonPerMeter, newtonpermeter.KilogramsForcePerCentimeter, KilogramsForcePerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerMeterInOneNewtonPerMeter, newtonpermeter.KilogramsForcePerMeter, KilogramsForcePerMeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerMillimeterInOneNewtonPerMeter, newtonpermeter.KilogramsForcePerMillimeter, KilogramsForcePerMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.KilonewtonsPerCentimeter, KilonewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.KilonewtonsPerMeter, KilonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.KilonewtonsPerMillimeter, KilonewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerFootInOneNewtonPerMeter, newtonpermeter.KilopoundsForcePerFoot, KilopoundsForcePerFootTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerInchInOneNewtonPerMeter, newtonpermeter.KilopoundsForcePerInch, KilopoundsForcePerInchTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.MeganewtonsPerCentimeter, MeganewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.MeganewtonsPerMeter, MeganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.MeganewtonsPerMillimeter, MeganewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.MicronewtonsPerCentimeter, MicronewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.MicronewtonsPerMeter, MicronewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.MicronewtonsPerMillimeter, MicronewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.MillinewtonsPerCentimeter, MillinewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.MillinewtonsPerMeter, MillinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.MillinewtonsPerMillimeter, MillinewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.NanonewtonsPerCentimeter, NanonewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.NanonewtonsPerMeter, NanonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.NanonewtonsPerMillimeter, NanonewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.NewtonsPerCentimeter, NewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.NewtonsPerMillimeter, NewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsForcePerFootInOneNewtonPerMeter, newtonpermeter.PoundsForcePerFoot, PoundsForcePerFootTolerance);
            AssertEx.EqualTolerance(PoundsForcePerInchInOneNewtonPerMeter, newtonpermeter.PoundsForcePerInch, PoundsForcePerInchTolerance);
            AssertEx.EqualTolerance(PoundsForcePerYardInOneNewtonPerMeter, newtonpermeter.PoundsForcePerYard, PoundsForcePerYardTolerance);
            AssertEx.EqualTolerance(TonnesForcePerCentimeterInOneNewtonPerMeter, newtonpermeter.TonnesForcePerCentimeter, TonnesForcePerCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerMeterInOneNewtonPerMeter, newtonpermeter.TonnesForcePerMeter, TonnesForcePerMeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerMillimeterInOneNewtonPerMeter, newtonpermeter.TonnesForcePerMillimeter, TonnesForcePerMillimeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<ForcePerLengthUnit>(), unit =>
            {
                var quantity = ForcePerLength.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromNewtonsPerMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => ForcePerLength.FromNewtonsPerMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => ForcePerLength.FromNewtonsPerMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromNewtonsPerMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => ForcePerLength.FromNewtonsPerMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            AssertEx.EqualTolerance(CentinewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.CentinewtonPerCentimeter), CentinewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(CentinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.CentinewtonPerMeter), CentinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(CentinewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.CentinewtonPerMillimeter), CentinewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.DecanewtonPerCentimeter), DecanewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.DecanewtonPerMeter), DecanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(DecanewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.DecanewtonPerMillimeter), DecanewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.DecinewtonPerCentimeter), DecinewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.DecinewtonPerMeter), DecinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(DecinewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.DecinewtonPerMillimeter), DecinewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilogramForcePerCentimeter), KilogramsForcePerCentimeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilogramForcePerMeter), KilogramsForcePerMeterTolerance);
            AssertEx.EqualTolerance(KilogramsForcePerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilogramForcePerMillimeter), KilogramsForcePerMillimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilonewtonPerCentimeter), KilonewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilonewtonPerMeter), KilonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(KilonewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilonewtonPerMillimeter), KilonewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerFootInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilopoundForcePerFoot), KilopoundsForcePerFootTolerance);
            AssertEx.EqualTolerance(KilopoundsForcePerInchInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.KilopoundForcePerInch), KilopoundsForcePerInchTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MeganewtonPerCentimeter), MeganewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MeganewtonPerMeter), MeganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MeganewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MeganewtonPerMillimeter), MeganewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MicronewtonPerCentimeter), MicronewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MicronewtonPerMeter), MicronewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MicronewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MicronewtonPerMillimeter), MicronewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MillinewtonPerCentimeter), MillinewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MillinewtonPerMeter), MillinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(MillinewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.MillinewtonPerMillimeter), MillinewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.NanonewtonPerCentimeter), NanonewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.NanonewtonPerMeter), NanonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(NanonewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.NanonewtonPerMillimeter), NanonewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.NewtonPerCentimeter), NewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.NewtonPerMeter), NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(NewtonsPerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.NewtonPerMillimeter), NewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(PoundsForcePerFootInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.PoundForcePerFoot), PoundsForcePerFootTolerance);
            AssertEx.EqualTolerance(PoundsForcePerInchInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.PoundForcePerInch), PoundsForcePerInchTolerance);
            AssertEx.EqualTolerance(PoundsForcePerYardInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.PoundForcePerYard), PoundsForcePerYardTolerance);
            AssertEx.EqualTolerance(TonnesForcePerCentimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.TonneForcePerCentimeter), TonnesForcePerCentimeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerMeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.TonneForcePerMeter), TonnesForcePerMeterTolerance);
            AssertEx.EqualTolerance(TonnesForcePerMillimeterInOneNewtonPerMeter, newtonpermeter.As(ForcePerLengthUnit.TonneForcePerMillimeter), TonnesForcePerMillimeterTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = ForcePerLength.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
            var expectedValue = quantity.As(ForcePerLength.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
            var expectedUnit = ForcePerLength.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                ForcePerLength quantityToConvert = quantity;

                ForcePerLength convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<ForcePerLengthUnit> quantityToConvert = quantity;

                IQuantity<ForcePerLengthUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<ForcePerLengthUnit> quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<ForcePerLengthUnit> quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new ForcePerLength(value: 1, unit: ForcePerLength.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 cN/m", ForcePerLengthUnit.CentinewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 daN/m", ForcePerLengthUnit.DecanewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 dN/m", ForcePerLengthUnit.DecinewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/m", ForcePerLengthUnit.KilogramForcePerMeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kN/m", ForcePerLengthUnit.KilonewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot, 4.2)]
        [InlineData("en-US", "4.2 kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot, 4.2)]
        [InlineData("en-US", "4.2 k/ft", ForcePerLengthUnit.KilopoundForcePerFoot, 4.2)]
        [InlineData("en-US", "4.2 kipf/in", ForcePerLengthUnit.KilopoundForcePerInch, 4.2)]
        [InlineData("en-US", "4.2 kip/in", ForcePerLengthUnit.KilopoundForcePerInch, 4.2)]
        [InlineData("en-US", "4.2 k/in", ForcePerLengthUnit.KilopoundForcePerInch, 4.2)]
        [InlineData("en-US", "4.2 MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 MN/m", ForcePerLengthUnit.MeganewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 µN/m", ForcePerLengthUnit.MicronewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mN/m", ForcePerLengthUnit.MillinewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 nN/m", ForcePerLengthUnit.NanonewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 N/cm", ForcePerLengthUnit.NewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 N/m", ForcePerLengthUnit.NewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 N/mm", ForcePerLengthUnit.NewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lbf/ft", ForcePerLengthUnit.PoundForcePerFoot, 4.2)]
        [InlineData("en-US", "4.2 lbf/in", ForcePerLengthUnit.PoundForcePerInch, 4.2)]
        [InlineData("en-US", "4.2 lbf/yd", ForcePerLengthUnit.PoundForcePerYard, 4.2)]
        [InlineData("en-US", "4.2 tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 tf/m", ForcePerLengthUnit.TonneForcePerMeter, 4.2)]
        [InlineData("en-US", "4.2 tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/см", ForcePerLengthUnit.KilogramForcePerCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/м", ForcePerLengthUnit.KilogramForcePerMeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/мм", ForcePerLengthUnit.KilogramForcePerMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 тс/см", ForcePerLengthUnit.TonneForcePerCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 тс/м", ForcePerLengthUnit.TonneForcePerMeter, 4.2)]
        [InlineData("ru-RU", "4,2 тс/мм", ForcePerLengthUnit.TonneForcePerMillimeter, 4.2)]
        public void Parse(string culture, string quantityString, ForcePerLengthUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = ForcePerLength.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 cN/m", ForcePerLengthUnit.CentinewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 daN/m", ForcePerLengthUnit.DecanewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 dN/m", ForcePerLengthUnit.DecinewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/m", ForcePerLengthUnit.KilogramForcePerMeter, 4.2)]
        [InlineData("en-US", "4.2 kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kN/m", ForcePerLengthUnit.KilonewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot, 4.2)]
        [InlineData("en-US", "4.2 kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot, 4.2)]
        [InlineData("en-US", "4.2 k/ft", ForcePerLengthUnit.KilopoundForcePerFoot, 4.2)]
        [InlineData("en-US", "4.2 kipf/in", ForcePerLengthUnit.KilopoundForcePerInch, 4.2)]
        [InlineData("en-US", "4.2 kip/in", ForcePerLengthUnit.KilopoundForcePerInch, 4.2)]
        [InlineData("en-US", "4.2 k/in", ForcePerLengthUnit.KilopoundForcePerInch, 4.2)]
        [InlineData("en-US", "4.2 MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 MN/m", ForcePerLengthUnit.MeganewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 µN/m", ForcePerLengthUnit.MicronewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mN/m", ForcePerLengthUnit.MillinewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 nN/m", ForcePerLengthUnit.NanonewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 N/cm", ForcePerLengthUnit.NewtonPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 N/m", ForcePerLengthUnit.NewtonPerMeter, 4.2)]
        [InlineData("en-US", "4.2 N/mm", ForcePerLengthUnit.NewtonPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 lbf/ft", ForcePerLengthUnit.PoundForcePerFoot, 4.2)]
        [InlineData("en-US", "4.2 lbf/in", ForcePerLengthUnit.PoundForcePerInch, 4.2)]
        [InlineData("en-US", "4.2 lbf/yd", ForcePerLengthUnit.PoundForcePerYard, 4.2)]
        [InlineData("en-US", "4.2 tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 tf/m", ForcePerLengthUnit.TonneForcePerMeter, 4.2)]
        [InlineData("en-US", "4.2 tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/см", ForcePerLengthUnit.KilogramForcePerCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/м", ForcePerLengthUnit.KilogramForcePerMeter, 4.2)]
        [InlineData("ru-RU", "4,2 кгс/мм", ForcePerLengthUnit.KilogramForcePerMillimeter, 4.2)]
        [InlineData("ru-RU", "4,2 тс/см", ForcePerLengthUnit.TonneForcePerCentimeter, 4.2)]
        [InlineData("ru-RU", "4,2 тс/м", ForcePerLengthUnit.TonneForcePerMeter, 4.2)]
        [InlineData("ru-RU", "4,2 тс/мм", ForcePerLengthUnit.TonneForcePerMillimeter, 4.2)]
        public void TryParse(string culture, string quantityString, ForcePerLengthUnit expectedUnit, double expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ForcePerLength.TryParse(quantityString, out ForcePerLength parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter)]
        [InlineData("cN/m", ForcePerLengthUnit.CentinewtonPerMeter)]
        [InlineData("cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter)]
        [InlineData("daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter)]
        [InlineData("daN/m", ForcePerLengthUnit.DecanewtonPerMeter)]
        [InlineData("daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter)]
        [InlineData("dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter)]
        [InlineData("dN/m", ForcePerLengthUnit.DecinewtonPerMeter)]
        [InlineData("dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter)]
        [InlineData("kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("kgf/m", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter)]
        [InlineData("kN/m", ForcePerLengthUnit.KilonewtonPerMeter)]
        [InlineData("kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter)]
        [InlineData("kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("k/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("kipf/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("kip/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("k/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter)]
        [InlineData("MN/m", ForcePerLengthUnit.MeganewtonPerMeter)]
        [InlineData("MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter)]
        [InlineData("µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter)]
        [InlineData("µN/m", ForcePerLengthUnit.MicronewtonPerMeter)]
        [InlineData("µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter)]
        [InlineData("mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter)]
        [InlineData("mN/m", ForcePerLengthUnit.MillinewtonPerMeter)]
        [InlineData("mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter)]
        [InlineData("nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter)]
        [InlineData("nN/m", ForcePerLengthUnit.NanonewtonPerMeter)]
        [InlineData("nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter)]
        [InlineData("N/cm", ForcePerLengthUnit.NewtonPerCentimeter)]
        [InlineData("N/m", ForcePerLengthUnit.NewtonPerMeter)]
        [InlineData("N/mm", ForcePerLengthUnit.NewtonPerMillimeter)]
        [InlineData("lbf/ft", ForcePerLengthUnit.PoundForcePerFoot)]
        [InlineData("lbf/in", ForcePerLengthUnit.PoundForcePerInch)]
        [InlineData("lbf/yd", ForcePerLengthUnit.PoundForcePerYard)]
        [InlineData("tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("tf/m", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ForcePerLengthUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            ForcePerLengthUnit parsedUnit = ForcePerLength.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter)]
        [InlineData("cN/m", ForcePerLengthUnit.CentinewtonPerMeter)]
        [InlineData("cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter)]
        [InlineData("daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter)]
        [InlineData("daN/m", ForcePerLengthUnit.DecanewtonPerMeter)]
        [InlineData("daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter)]
        [InlineData("dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter)]
        [InlineData("dN/m", ForcePerLengthUnit.DecinewtonPerMeter)]
        [InlineData("dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter)]
        [InlineData("kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("kgf/m", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter)]
        [InlineData("kN/m", ForcePerLengthUnit.KilonewtonPerMeter)]
        [InlineData("kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter)]
        [InlineData("kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("k/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("kipf/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("kip/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("k/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter)]
        [InlineData("MN/m", ForcePerLengthUnit.MeganewtonPerMeter)]
        [InlineData("MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter)]
        [InlineData("µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter)]
        [InlineData("µN/m", ForcePerLengthUnit.MicronewtonPerMeter)]
        [InlineData("µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter)]
        [InlineData("mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter)]
        [InlineData("mN/m", ForcePerLengthUnit.MillinewtonPerMeter)]
        [InlineData("mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter)]
        [InlineData("nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter)]
        [InlineData("nN/m", ForcePerLengthUnit.NanonewtonPerMeter)]
        [InlineData("nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter)]
        [InlineData("N/cm", ForcePerLengthUnit.NewtonPerCentimeter)]
        [InlineData("N/m", ForcePerLengthUnit.NewtonPerMeter)]
        [InlineData("N/mm", ForcePerLengthUnit.NewtonPerMillimeter)]
        [InlineData("lbf/ft", ForcePerLengthUnit.PoundForcePerFoot)]
        [InlineData("lbf/in", ForcePerLengthUnit.PoundForcePerInch)]
        [InlineData("lbf/yd", ForcePerLengthUnit.PoundForcePerYard)]
        [InlineData("tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("tf/m", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ForcePerLengthUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            ForcePerLengthUnit parsedUnit = ForcePerLength.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter)]
        [InlineData("en-US", "cN/m", ForcePerLengthUnit.CentinewtonPerMeter)]
        [InlineData("en-US", "cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter)]
        [InlineData("en-US", "daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter)]
        [InlineData("en-US", "daN/m", ForcePerLengthUnit.DecanewtonPerMeter)]
        [InlineData("en-US", "daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter)]
        [InlineData("en-US", "dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter)]
        [InlineData("en-US", "dN/m", ForcePerLengthUnit.DecinewtonPerMeter)]
        [InlineData("en-US", "dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter)]
        [InlineData("en-US", "kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("en-US", "kgf/m", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("en-US", "kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("en-US", "kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter)]
        [InlineData("en-US", "kN/m", ForcePerLengthUnit.KilonewtonPerMeter)]
        [InlineData("en-US", "kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter)]
        [InlineData("en-US", "kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "k/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "kipf/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "kip/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "k/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter)]
        [InlineData("en-US", "MN/m", ForcePerLengthUnit.MeganewtonPerMeter)]
        [InlineData("en-US", "MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter)]
        [InlineData("en-US", "µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter)]
        [InlineData("en-US", "µN/m", ForcePerLengthUnit.MicronewtonPerMeter)]
        [InlineData("en-US", "µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter)]
        [InlineData("en-US", "mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter)]
        [InlineData("en-US", "mN/m", ForcePerLengthUnit.MillinewtonPerMeter)]
        [InlineData("en-US", "mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter)]
        [InlineData("en-US", "nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter)]
        [InlineData("en-US", "nN/m", ForcePerLengthUnit.NanonewtonPerMeter)]
        [InlineData("en-US", "nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter)]
        [InlineData("en-US", "N/cm", ForcePerLengthUnit.NewtonPerCentimeter)]
        [InlineData("en-US", "N/m", ForcePerLengthUnit.NewtonPerMeter)]
        [InlineData("en-US", "N/mm", ForcePerLengthUnit.NewtonPerMillimeter)]
        [InlineData("en-US", "lbf/ft", ForcePerLengthUnit.PoundForcePerFoot)]
        [InlineData("en-US", "lbf/in", ForcePerLengthUnit.PoundForcePerInch)]
        [InlineData("en-US", "lbf/yd", ForcePerLengthUnit.PoundForcePerYard)]
        [InlineData("en-US", "tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("en-US", "tf/m", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("en-US", "tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter)]
        [InlineData("ru-RU", "кгс/см", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("ru-RU", "кгс/м", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("ru-RU", "кгс/мм", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("ru-RU", "тс/см", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("ru-RU", "тс/м", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("ru-RU", "тс/мм", ForcePerLengthUnit.TonneForcePerMillimeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, ForcePerLengthUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            ForcePerLengthUnit parsedUnit = ForcePerLength.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter)]
        [InlineData("en-US", "cN/m", ForcePerLengthUnit.CentinewtonPerMeter)]
        [InlineData("en-US", "cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter)]
        [InlineData("en-US", "daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter)]
        [InlineData("en-US", "daN/m", ForcePerLengthUnit.DecanewtonPerMeter)]
        [InlineData("en-US", "daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter)]
        [InlineData("en-US", "dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter)]
        [InlineData("en-US", "dN/m", ForcePerLengthUnit.DecinewtonPerMeter)]
        [InlineData("en-US", "dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter)]
        [InlineData("en-US", "kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("en-US", "kgf/m", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("en-US", "kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("en-US", "kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter)]
        [InlineData("en-US", "kN/m", ForcePerLengthUnit.KilonewtonPerMeter)]
        [InlineData("en-US", "kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter)]
        [InlineData("en-US", "kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "k/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "kipf/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "kip/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "k/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter)]
        [InlineData("en-US", "MN/m", ForcePerLengthUnit.MeganewtonPerMeter)]
        [InlineData("en-US", "MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter)]
        [InlineData("en-US", "µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter)]
        [InlineData("en-US", "µN/m", ForcePerLengthUnit.MicronewtonPerMeter)]
        [InlineData("en-US", "µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter)]
        [InlineData("en-US", "mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter)]
        [InlineData("en-US", "mN/m", ForcePerLengthUnit.MillinewtonPerMeter)]
        [InlineData("en-US", "mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter)]
        [InlineData("en-US", "nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter)]
        [InlineData("en-US", "nN/m", ForcePerLengthUnit.NanonewtonPerMeter)]
        [InlineData("en-US", "nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter)]
        [InlineData("en-US", "N/cm", ForcePerLengthUnit.NewtonPerCentimeter)]
        [InlineData("en-US", "N/m", ForcePerLengthUnit.NewtonPerMeter)]
        [InlineData("en-US", "N/mm", ForcePerLengthUnit.NewtonPerMillimeter)]
        [InlineData("en-US", "lbf/ft", ForcePerLengthUnit.PoundForcePerFoot)]
        [InlineData("en-US", "lbf/in", ForcePerLengthUnit.PoundForcePerInch)]
        [InlineData("en-US", "lbf/yd", ForcePerLengthUnit.PoundForcePerYard)]
        [InlineData("en-US", "tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("en-US", "tf/m", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("en-US", "tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter)]
        [InlineData("ru-RU", "кгс/см", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("ru-RU", "кгс/м", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("ru-RU", "кгс/мм", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("ru-RU", "тс/см", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("ru-RU", "тс/м", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("ru-RU", "тс/мм", ForcePerLengthUnit.TonneForcePerMillimeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, ForcePerLengthUnit expectedUnit)
        {
            ForcePerLengthUnit parsedUnit = ForcePerLength.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter)]
        [InlineData("cN/m", ForcePerLengthUnit.CentinewtonPerMeter)]
        [InlineData("cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter)]
        [InlineData("daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter)]
        [InlineData("daN/m", ForcePerLengthUnit.DecanewtonPerMeter)]
        [InlineData("daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter)]
        [InlineData("dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter)]
        [InlineData("dN/m", ForcePerLengthUnit.DecinewtonPerMeter)]
        [InlineData("dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter)]
        [InlineData("kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("kgf/m", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter)]
        [InlineData("kN/m", ForcePerLengthUnit.KilonewtonPerMeter)]
        [InlineData("kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter)]
        [InlineData("kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("k/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("kipf/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("kip/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("k/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter)]
        [InlineData("MN/m", ForcePerLengthUnit.MeganewtonPerMeter)]
        [InlineData("MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter)]
        [InlineData("µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter)]
        [InlineData("µN/m", ForcePerLengthUnit.MicronewtonPerMeter)]
        [InlineData("µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter)]
        [InlineData("mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter)]
        [InlineData("mN/m", ForcePerLengthUnit.MillinewtonPerMeter)]
        [InlineData("mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter)]
        [InlineData("nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter)]
        [InlineData("nN/m", ForcePerLengthUnit.NanonewtonPerMeter)]
        [InlineData("nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter)]
        [InlineData("N/cm", ForcePerLengthUnit.NewtonPerCentimeter)]
        [InlineData("N/m", ForcePerLengthUnit.NewtonPerMeter)]
        [InlineData("N/mm", ForcePerLengthUnit.NewtonPerMillimeter)]
        [InlineData("lbf/ft", ForcePerLengthUnit.PoundForcePerFoot)]
        [InlineData("lbf/in", ForcePerLengthUnit.PoundForcePerInch)]
        [InlineData("lbf/yd", ForcePerLengthUnit.PoundForcePerYard)]
        [InlineData("tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("tf/m", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, ForcePerLengthUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(ForcePerLength.TryParseUnit(abbreviation, out ForcePerLengthUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter)]
        [InlineData("cN/m", ForcePerLengthUnit.CentinewtonPerMeter)]
        [InlineData("cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter)]
        [InlineData("daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter)]
        [InlineData("daN/m", ForcePerLengthUnit.DecanewtonPerMeter)]
        [InlineData("daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter)]
        [InlineData("dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter)]
        [InlineData("dN/m", ForcePerLengthUnit.DecinewtonPerMeter)]
        [InlineData("dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter)]
        [InlineData("kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("kgf/m", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter)]
        [InlineData("kN/m", ForcePerLengthUnit.KilonewtonPerMeter)]
        [InlineData("kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter)]
        [InlineData("kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("k/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("kipf/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("kip/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("k/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter)]
        [InlineData("MN/m", ForcePerLengthUnit.MeganewtonPerMeter)]
        [InlineData("MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter)]
        [InlineData("µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter)]
        [InlineData("µN/m", ForcePerLengthUnit.MicronewtonPerMeter)]
        [InlineData("µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter)]
        [InlineData("mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter)]
        [InlineData("mN/m", ForcePerLengthUnit.MillinewtonPerMeter)]
        [InlineData("mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter)]
        [InlineData("nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter)]
        [InlineData("nN/m", ForcePerLengthUnit.NanonewtonPerMeter)]
        [InlineData("nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter)]
        [InlineData("N/cm", ForcePerLengthUnit.NewtonPerCentimeter)]
        [InlineData("N/m", ForcePerLengthUnit.NewtonPerMeter)]
        [InlineData("N/mm", ForcePerLengthUnit.NewtonPerMillimeter)]
        [InlineData("lbf/ft", ForcePerLengthUnit.PoundForcePerFoot)]
        [InlineData("lbf/in", ForcePerLengthUnit.PoundForcePerInch)]
        [InlineData("lbf/yd", ForcePerLengthUnit.PoundForcePerYard)]
        [InlineData("tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("tf/m", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, ForcePerLengthUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(ForcePerLength.TryParseUnit(abbreviation, out ForcePerLengthUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter)]
        [InlineData("en-US", "cN/m", ForcePerLengthUnit.CentinewtonPerMeter)]
        [InlineData("en-US", "cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter)]
        [InlineData("en-US", "daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter)]
        [InlineData("en-US", "daN/m", ForcePerLengthUnit.DecanewtonPerMeter)]
        [InlineData("en-US", "daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter)]
        [InlineData("en-US", "dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter)]
        [InlineData("en-US", "dN/m", ForcePerLengthUnit.DecinewtonPerMeter)]
        [InlineData("en-US", "dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter)]
        [InlineData("en-US", "kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("en-US", "kgf/m", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("en-US", "kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("en-US", "kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter)]
        [InlineData("en-US", "kN/m", ForcePerLengthUnit.KilonewtonPerMeter)]
        [InlineData("en-US", "kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter)]
        [InlineData("en-US", "kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "k/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "kipf/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "kip/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "k/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter)]
        [InlineData("en-US", "MN/m", ForcePerLengthUnit.MeganewtonPerMeter)]
        [InlineData("en-US", "MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter)]
        [InlineData("en-US", "µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter)]
        [InlineData("en-US", "µN/m", ForcePerLengthUnit.MicronewtonPerMeter)]
        [InlineData("en-US", "µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter)]
        [InlineData("en-US", "mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter)]
        [InlineData("en-US", "mN/m", ForcePerLengthUnit.MillinewtonPerMeter)]
        [InlineData("en-US", "mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter)]
        [InlineData("en-US", "nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter)]
        [InlineData("en-US", "nN/m", ForcePerLengthUnit.NanonewtonPerMeter)]
        [InlineData("en-US", "nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter)]
        [InlineData("en-US", "N/cm", ForcePerLengthUnit.NewtonPerCentimeter)]
        [InlineData("en-US", "N/m", ForcePerLengthUnit.NewtonPerMeter)]
        [InlineData("en-US", "N/mm", ForcePerLengthUnit.NewtonPerMillimeter)]
        [InlineData("en-US", "lbf/ft", ForcePerLengthUnit.PoundForcePerFoot)]
        [InlineData("en-US", "lbf/in", ForcePerLengthUnit.PoundForcePerInch)]
        [InlineData("en-US", "lbf/yd", ForcePerLengthUnit.PoundForcePerYard)]
        [InlineData("en-US", "tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("en-US", "tf/m", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("en-US", "tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter)]
        [InlineData("ru-RU", "кгс/см", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("ru-RU", "кгс/м", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("ru-RU", "кгс/мм", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("ru-RU", "тс/см", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("ru-RU", "тс/м", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("ru-RU", "тс/мм", ForcePerLengthUnit.TonneForcePerMillimeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, ForcePerLengthUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(ForcePerLength.TryParseUnit(abbreviation, out ForcePerLengthUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "cN/cm", ForcePerLengthUnit.CentinewtonPerCentimeter)]
        [InlineData("en-US", "cN/m", ForcePerLengthUnit.CentinewtonPerMeter)]
        [InlineData("en-US", "cN/mm", ForcePerLengthUnit.CentinewtonPerMillimeter)]
        [InlineData("en-US", "daN/cm", ForcePerLengthUnit.DecanewtonPerCentimeter)]
        [InlineData("en-US", "daN/m", ForcePerLengthUnit.DecanewtonPerMeter)]
        [InlineData("en-US", "daN/mm", ForcePerLengthUnit.DecanewtonPerMillimeter)]
        [InlineData("en-US", "dN/cm", ForcePerLengthUnit.DecinewtonPerCentimeter)]
        [InlineData("en-US", "dN/m", ForcePerLengthUnit.DecinewtonPerMeter)]
        [InlineData("en-US", "dN/mm", ForcePerLengthUnit.DecinewtonPerMillimeter)]
        [InlineData("en-US", "kgf/cm", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("en-US", "kgf/m", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("en-US", "kgf/mm", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("en-US", "kN/cm", ForcePerLengthUnit.KilonewtonPerCentimeter)]
        [InlineData("en-US", "kN/m", ForcePerLengthUnit.KilonewtonPerMeter)]
        [InlineData("en-US", "kN/mm", ForcePerLengthUnit.KilonewtonPerMillimeter)]
        [InlineData("en-US", "kipf/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "kip/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "k/ft", ForcePerLengthUnit.KilopoundForcePerFoot)]
        [InlineData("en-US", "kipf/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "kip/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "k/in", ForcePerLengthUnit.KilopoundForcePerInch)]
        [InlineData("en-US", "MN/cm", ForcePerLengthUnit.MeganewtonPerCentimeter)]
        [InlineData("en-US", "MN/m", ForcePerLengthUnit.MeganewtonPerMeter)]
        [InlineData("en-US", "MN/mm", ForcePerLengthUnit.MeganewtonPerMillimeter)]
        [InlineData("en-US", "µN/cm", ForcePerLengthUnit.MicronewtonPerCentimeter)]
        [InlineData("en-US", "µN/m", ForcePerLengthUnit.MicronewtonPerMeter)]
        [InlineData("en-US", "µN/mm", ForcePerLengthUnit.MicronewtonPerMillimeter)]
        [InlineData("en-US", "mN/cm", ForcePerLengthUnit.MillinewtonPerCentimeter)]
        [InlineData("en-US", "mN/m", ForcePerLengthUnit.MillinewtonPerMeter)]
        [InlineData("en-US", "mN/mm", ForcePerLengthUnit.MillinewtonPerMillimeter)]
        [InlineData("en-US", "nN/cm", ForcePerLengthUnit.NanonewtonPerCentimeter)]
        [InlineData("en-US", "nN/m", ForcePerLengthUnit.NanonewtonPerMeter)]
        [InlineData("en-US", "nN/mm", ForcePerLengthUnit.NanonewtonPerMillimeter)]
        [InlineData("en-US", "N/cm", ForcePerLengthUnit.NewtonPerCentimeter)]
        [InlineData("en-US", "N/m", ForcePerLengthUnit.NewtonPerMeter)]
        [InlineData("en-US", "N/mm", ForcePerLengthUnit.NewtonPerMillimeter)]
        [InlineData("en-US", "lbf/ft", ForcePerLengthUnit.PoundForcePerFoot)]
        [InlineData("en-US", "lbf/in", ForcePerLengthUnit.PoundForcePerInch)]
        [InlineData("en-US", "lbf/yd", ForcePerLengthUnit.PoundForcePerYard)]
        [InlineData("en-US", "tf/cm", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("en-US", "tf/m", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("en-US", "tf/mm", ForcePerLengthUnit.TonneForcePerMillimeter)]
        [InlineData("ru-RU", "кгс/см", ForcePerLengthUnit.KilogramForcePerCentimeter)]
        [InlineData("ru-RU", "кгс/м", ForcePerLengthUnit.KilogramForcePerMeter)]
        [InlineData("ru-RU", "кгс/мм", ForcePerLengthUnit.KilogramForcePerMillimeter)]
        [InlineData("ru-RU", "тс/см", ForcePerLengthUnit.TonneForcePerCentimeter)]
        [InlineData("ru-RU", "тс/м", ForcePerLengthUnit.TonneForcePerMeter)]
        [InlineData("ru-RU", "тс/мм", ForcePerLengthUnit.TonneForcePerMillimeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, ForcePerLengthUnit expectedUnit)
        {
            Assert.True(ForcePerLength.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out ForcePerLengthUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", ForcePerLengthUnit.CentinewtonPerCentimeter, "cN/cm")]
        [InlineData("en-US", ForcePerLengthUnit.CentinewtonPerMeter, "cN/m")]
        [InlineData("en-US", ForcePerLengthUnit.CentinewtonPerMillimeter, "cN/mm")]
        [InlineData("en-US", ForcePerLengthUnit.DecanewtonPerCentimeter, "daN/cm")]
        [InlineData("en-US", ForcePerLengthUnit.DecanewtonPerMeter, "daN/m")]
        [InlineData("en-US", ForcePerLengthUnit.DecanewtonPerMillimeter, "daN/mm")]
        [InlineData("en-US", ForcePerLengthUnit.DecinewtonPerCentimeter, "dN/cm")]
        [InlineData("en-US", ForcePerLengthUnit.DecinewtonPerMeter, "dN/m")]
        [InlineData("en-US", ForcePerLengthUnit.DecinewtonPerMillimeter, "dN/mm")]
        [InlineData("en-US", ForcePerLengthUnit.KilogramForcePerCentimeter, "kgf/cm")]
        [InlineData("en-US", ForcePerLengthUnit.KilogramForcePerMeter, "kgf/m")]
        [InlineData("en-US", ForcePerLengthUnit.KilogramForcePerMillimeter, "kgf/mm")]
        [InlineData("en-US", ForcePerLengthUnit.KilonewtonPerCentimeter, "kN/cm")]
        [InlineData("en-US", ForcePerLengthUnit.KilonewtonPerMeter, "kN/m")]
        [InlineData("en-US", ForcePerLengthUnit.KilonewtonPerMillimeter, "kN/mm")]
        [InlineData("en-US", ForcePerLengthUnit.KilopoundForcePerFoot, "kipf/ft")]
        [InlineData("en-US", ForcePerLengthUnit.KilopoundForcePerInch, "kipf/in")]
        [InlineData("en-US", ForcePerLengthUnit.MeganewtonPerCentimeter, "MN/cm")]
        [InlineData("en-US", ForcePerLengthUnit.MeganewtonPerMeter, "MN/m")]
        [InlineData("en-US", ForcePerLengthUnit.MeganewtonPerMillimeter, "MN/mm")]
        [InlineData("en-US", ForcePerLengthUnit.MicronewtonPerCentimeter, "µN/cm")]
        [InlineData("en-US", ForcePerLengthUnit.MicronewtonPerMeter, "µN/m")]
        [InlineData("en-US", ForcePerLengthUnit.MicronewtonPerMillimeter, "µN/mm")]
        [InlineData("en-US", ForcePerLengthUnit.MillinewtonPerCentimeter, "mN/cm")]
        [InlineData("en-US", ForcePerLengthUnit.MillinewtonPerMeter, "mN/m")]
        [InlineData("en-US", ForcePerLengthUnit.MillinewtonPerMillimeter, "mN/mm")]
        [InlineData("en-US", ForcePerLengthUnit.NanonewtonPerCentimeter, "nN/cm")]
        [InlineData("en-US", ForcePerLengthUnit.NanonewtonPerMeter, "nN/m")]
        [InlineData("en-US", ForcePerLengthUnit.NanonewtonPerMillimeter, "nN/mm")]
        [InlineData("en-US", ForcePerLengthUnit.NewtonPerCentimeter, "N/cm")]
        [InlineData("en-US", ForcePerLengthUnit.NewtonPerMeter, "N/m")]
        [InlineData("en-US", ForcePerLengthUnit.NewtonPerMillimeter, "N/mm")]
        [InlineData("en-US", ForcePerLengthUnit.PoundForcePerFoot, "lbf/ft")]
        [InlineData("en-US", ForcePerLengthUnit.PoundForcePerInch, "lbf/in")]
        [InlineData("en-US", ForcePerLengthUnit.PoundForcePerYard, "lbf/yd")]
        [InlineData("en-US", ForcePerLengthUnit.TonneForcePerCentimeter, "tf/cm")]
        [InlineData("en-US", ForcePerLengthUnit.TonneForcePerMeter, "tf/m")]
        [InlineData("en-US", ForcePerLengthUnit.TonneForcePerMillimeter, "tf/mm")]
        [InlineData("ru-RU", ForcePerLengthUnit.KilogramForcePerCentimeter, "кгс/см")]
        [InlineData("ru-RU", ForcePerLengthUnit.KilogramForcePerMeter, "кгс/м")]
        [InlineData("ru-RU", ForcePerLengthUnit.KilogramForcePerMillimeter, "кгс/мм")]
        [InlineData("ru-RU", ForcePerLengthUnit.TonneForcePerCentimeter, "тс/см")]
        [InlineData("ru-RU", ForcePerLengthUnit.TonneForcePerMeter, "тс/м")]
        [InlineData("ru-RU", ForcePerLengthUnit.TonneForcePerMillimeter, "тс/мм")]
        public void GetAbbreviationForCulture(string culture, ForcePerLengthUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = ForcePerLength.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(ForcePerLength.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = ForcePerLength.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(ForcePerLengthUnit unit)
        {
            var inBaseUnits = ForcePerLength.From(1.0, ForcePerLength.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(ForcePerLengthUnit unit)
        {
            var quantity = ForcePerLength.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(ForcePerLengthUnit unit)
        {
            Assert.All(ForcePerLength.Units.Where(u => u != ForcePerLength.BaseUnit), fromUnit =>
            {
                var quantity = ForcePerLength.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(ForcePerLengthUnit unit)
        {
            var quantity = default(ForcePerLength);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(ForcePerLengthUnit unit)
        {
            var quantity = ForcePerLength.From(3, ForcePerLength.BaseUnit);
            ForcePerLength expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<ForcePerLengthUnit> quantityToConvert = quantity;
                IQuantity<ForcePerLengthUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            AssertEx.EqualTolerance(1, ForcePerLength.FromCentinewtonsPerCentimeter(newtonpermeter.CentinewtonsPerCentimeter).NewtonsPerMeter, CentinewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromCentinewtonsPerMeter(newtonpermeter.CentinewtonsPerMeter).NewtonsPerMeter, CentinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromCentinewtonsPerMillimeter(newtonpermeter.CentinewtonsPerMillimeter).NewtonsPerMeter, CentinewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromDecanewtonsPerCentimeter(newtonpermeter.DecanewtonsPerCentimeter).NewtonsPerMeter, DecanewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromDecanewtonsPerMeter(newtonpermeter.DecanewtonsPerMeter).NewtonsPerMeter, DecanewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromDecanewtonsPerMillimeter(newtonpermeter.DecanewtonsPerMillimeter).NewtonsPerMeter, DecanewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromDecinewtonsPerCentimeter(newtonpermeter.DecinewtonsPerCentimeter).NewtonsPerMeter, DecinewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromDecinewtonsPerMeter(newtonpermeter.DecinewtonsPerMeter).NewtonsPerMeter, DecinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromDecinewtonsPerMillimeter(newtonpermeter.DecinewtonsPerMillimeter).NewtonsPerMeter, DecinewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilogramsForcePerCentimeter(newtonpermeter.KilogramsForcePerCentimeter).NewtonsPerMeter, KilogramsForcePerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilogramsForcePerMeter(newtonpermeter.KilogramsForcePerMeter).NewtonsPerMeter, KilogramsForcePerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilogramsForcePerMillimeter(newtonpermeter.KilogramsForcePerMillimeter).NewtonsPerMeter, KilogramsForcePerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilonewtonsPerCentimeter(newtonpermeter.KilonewtonsPerCentimeter).NewtonsPerMeter, KilonewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilonewtonsPerMeter(newtonpermeter.KilonewtonsPerMeter).NewtonsPerMeter, KilonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilonewtonsPerMillimeter(newtonpermeter.KilonewtonsPerMillimeter).NewtonsPerMeter, KilonewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilopoundsForcePerFoot(newtonpermeter.KilopoundsForcePerFoot).NewtonsPerMeter, KilopoundsForcePerFootTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromKilopoundsForcePerInch(newtonpermeter.KilopoundsForcePerInch).NewtonsPerMeter, KilopoundsForcePerInchTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMeganewtonsPerCentimeter(newtonpermeter.MeganewtonsPerCentimeter).NewtonsPerMeter, MeganewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMeganewtonsPerMeter(newtonpermeter.MeganewtonsPerMeter).NewtonsPerMeter, MeganewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMeganewtonsPerMillimeter(newtonpermeter.MeganewtonsPerMillimeter).NewtonsPerMeter, MeganewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMicronewtonsPerCentimeter(newtonpermeter.MicronewtonsPerCentimeter).NewtonsPerMeter, MicronewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMicronewtonsPerMeter(newtonpermeter.MicronewtonsPerMeter).NewtonsPerMeter, MicronewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMicronewtonsPerMillimeter(newtonpermeter.MicronewtonsPerMillimeter).NewtonsPerMeter, MicronewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMillinewtonsPerCentimeter(newtonpermeter.MillinewtonsPerCentimeter).NewtonsPerMeter, MillinewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMillinewtonsPerMeter(newtonpermeter.MillinewtonsPerMeter).NewtonsPerMeter, MillinewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromMillinewtonsPerMillimeter(newtonpermeter.MillinewtonsPerMillimeter).NewtonsPerMeter, MillinewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromNanonewtonsPerCentimeter(newtonpermeter.NanonewtonsPerCentimeter).NewtonsPerMeter, NanonewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromNanonewtonsPerMeter(newtonpermeter.NanonewtonsPerMeter).NewtonsPerMeter, NanonewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromNanonewtonsPerMillimeter(newtonpermeter.NanonewtonsPerMillimeter).NewtonsPerMeter, NanonewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromNewtonsPerCentimeter(newtonpermeter.NewtonsPerCentimeter).NewtonsPerMeter, NewtonsPerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromNewtonsPerMeter(newtonpermeter.NewtonsPerMeter).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromNewtonsPerMillimeter(newtonpermeter.NewtonsPerMillimeter).NewtonsPerMeter, NewtonsPerMillimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromPoundsForcePerFoot(newtonpermeter.PoundsForcePerFoot).NewtonsPerMeter, PoundsForcePerFootTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromPoundsForcePerInch(newtonpermeter.PoundsForcePerInch).NewtonsPerMeter, PoundsForcePerInchTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromPoundsForcePerYard(newtonpermeter.PoundsForcePerYard).NewtonsPerMeter, PoundsForcePerYardTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromTonnesForcePerCentimeter(newtonpermeter.TonnesForcePerCentimeter).NewtonsPerMeter, TonnesForcePerCentimeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromTonnesForcePerMeter(newtonpermeter.TonnesForcePerMeter).NewtonsPerMeter, TonnesForcePerMeterTolerance);
            AssertEx.EqualTolerance(1, ForcePerLength.FromTonnesForcePerMillimeter(newtonpermeter.TonnesForcePerMillimeter).NewtonsPerMeter, TonnesForcePerMillimeterTolerance);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            ForcePerLength v = ForcePerLength.FromNewtonsPerMeter(1);
            AssertEx.EqualTolerance(-1, -v.NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ForcePerLength.FromNewtonsPerMeter(3)-v).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (v + v).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (v*10).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(10, (10*v).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(2, (ForcePerLength.FromNewtonsPerMeter(10)/5).NewtonsPerMeter, NewtonsPerMeterTolerance);
            AssertEx.EqualTolerance(2, ForcePerLength.FromNewtonsPerMeter(10)/ForcePerLength.FromNewtonsPerMeter(5), NewtonsPerMeterTolerance);
        }

        [Fact]
        public void ComparisonOperators()
        {
            ForcePerLength oneNewtonPerMeter = ForcePerLength.FromNewtonsPerMeter(1);
            ForcePerLength twoNewtonsPerMeter = ForcePerLength.FromNewtonsPerMeter(2);

            Assert.True(oneNewtonPerMeter < twoNewtonsPerMeter);
            Assert.True(oneNewtonPerMeter <= twoNewtonsPerMeter);
            Assert.True(twoNewtonsPerMeter > oneNewtonPerMeter);
            Assert.True(twoNewtonsPerMeter >= oneNewtonPerMeter);

            Assert.False(oneNewtonPerMeter > twoNewtonsPerMeter);
            Assert.False(oneNewtonPerMeter >= twoNewtonsPerMeter);
            Assert.False(twoNewtonsPerMeter < oneNewtonPerMeter);
            Assert.False(twoNewtonsPerMeter <= oneNewtonPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.Equal(0, newtonpermeter.CompareTo(newtonpermeter));
            Assert.True(newtonpermeter.CompareTo(ForcePerLength.Zero) > 0);
            Assert.True(ForcePerLength.Zero.CompareTo(newtonpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.Throws<ArgumentException>(() => newtonpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => newtonpermeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, ForcePerLengthUnit.NewtonPerMeter, 1, ForcePerLengthUnit.NewtonPerMeter, true)]  // Same value and unit.
        [InlineData(1, ForcePerLengthUnit.NewtonPerMeter, 2, ForcePerLengthUnit.NewtonPerMeter, false)] // Different value.
        [InlineData(2, ForcePerLengthUnit.NewtonPerMeter, 1, ForcePerLengthUnit.CentinewtonPerCentimeter, false)] // Different value and unit.
        [InlineData(1, ForcePerLengthUnit.NewtonPerMeter, 1, ForcePerLengthUnit.CentinewtonPerCentimeter, false)] // Different unit.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, ForcePerLengthUnit unitA, double valueB, ForcePerLengthUnit unitB, bool expectEqual)
        {
            var a = new ForcePerLength(valueA, unitA);
            var b = new ForcePerLength(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = ForcePerLength.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.False(newtonpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            ForcePerLength newtonpermeter = ForcePerLength.FromNewtonsPerMeter(1);
            Assert.False(newtonpermeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = ForcePerLength.FromNewtonsPerMeter(firstValue);
            var otherQuantity = ForcePerLength.FromNewtonsPerMeter(secondValue);
            ForcePerLength maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1;
            var smallerTolerance = maxTolerance / 1.1;
            Assert.True(quantity.Equals(quantity, ForcePerLength.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = ForcePerLength.FromNewtonsPerMeter(1);
            var negativeTolerance = ForcePerLength.FromNewtonsPerMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = Enum.GetValues<ForcePerLengthUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(ForcePerLength.BaseDimensions is null);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 cN/cm", new ForcePerLength(1, ForcePerLengthUnit.CentinewtonPerCentimeter).ToString());
            Assert.Equal("1 cN/m", new ForcePerLength(1, ForcePerLengthUnit.CentinewtonPerMeter).ToString());
            Assert.Equal("1 cN/mm", new ForcePerLength(1, ForcePerLengthUnit.CentinewtonPerMillimeter).ToString());
            Assert.Equal("1 daN/cm", new ForcePerLength(1, ForcePerLengthUnit.DecanewtonPerCentimeter).ToString());
            Assert.Equal("1 daN/m", new ForcePerLength(1, ForcePerLengthUnit.DecanewtonPerMeter).ToString());
            Assert.Equal("1 daN/mm", new ForcePerLength(1, ForcePerLengthUnit.DecanewtonPerMillimeter).ToString());
            Assert.Equal("1 dN/cm", new ForcePerLength(1, ForcePerLengthUnit.DecinewtonPerCentimeter).ToString());
            Assert.Equal("1 dN/m", new ForcePerLength(1, ForcePerLengthUnit.DecinewtonPerMeter).ToString());
            Assert.Equal("1 dN/mm", new ForcePerLength(1, ForcePerLengthUnit.DecinewtonPerMillimeter).ToString());
            Assert.Equal("1 kgf/cm", new ForcePerLength(1, ForcePerLengthUnit.KilogramForcePerCentimeter).ToString());
            Assert.Equal("1 kgf/m", new ForcePerLength(1, ForcePerLengthUnit.KilogramForcePerMeter).ToString());
            Assert.Equal("1 kgf/mm", new ForcePerLength(1, ForcePerLengthUnit.KilogramForcePerMillimeter).ToString());
            Assert.Equal("1 kN/cm", new ForcePerLength(1, ForcePerLengthUnit.KilonewtonPerCentimeter).ToString());
            Assert.Equal("1 kN/m", new ForcePerLength(1, ForcePerLengthUnit.KilonewtonPerMeter).ToString());
            Assert.Equal("1 kN/mm", new ForcePerLength(1, ForcePerLengthUnit.KilonewtonPerMillimeter).ToString());
            Assert.Equal("1 kipf/ft", new ForcePerLength(1, ForcePerLengthUnit.KilopoundForcePerFoot).ToString());
            Assert.Equal("1 kipf/in", new ForcePerLength(1, ForcePerLengthUnit.KilopoundForcePerInch).ToString());
            Assert.Equal("1 MN/cm", new ForcePerLength(1, ForcePerLengthUnit.MeganewtonPerCentimeter).ToString());
            Assert.Equal("1 MN/m", new ForcePerLength(1, ForcePerLengthUnit.MeganewtonPerMeter).ToString());
            Assert.Equal("1 MN/mm", new ForcePerLength(1, ForcePerLengthUnit.MeganewtonPerMillimeter).ToString());
            Assert.Equal("1 µN/cm", new ForcePerLength(1, ForcePerLengthUnit.MicronewtonPerCentimeter).ToString());
            Assert.Equal("1 µN/m", new ForcePerLength(1, ForcePerLengthUnit.MicronewtonPerMeter).ToString());
            Assert.Equal("1 µN/mm", new ForcePerLength(1, ForcePerLengthUnit.MicronewtonPerMillimeter).ToString());
            Assert.Equal("1 mN/cm", new ForcePerLength(1, ForcePerLengthUnit.MillinewtonPerCentimeter).ToString());
            Assert.Equal("1 mN/m", new ForcePerLength(1, ForcePerLengthUnit.MillinewtonPerMeter).ToString());
            Assert.Equal("1 mN/mm", new ForcePerLength(1, ForcePerLengthUnit.MillinewtonPerMillimeter).ToString());
            Assert.Equal("1 nN/cm", new ForcePerLength(1, ForcePerLengthUnit.NanonewtonPerCentimeter).ToString());
            Assert.Equal("1 nN/m", new ForcePerLength(1, ForcePerLengthUnit.NanonewtonPerMeter).ToString());
            Assert.Equal("1 nN/mm", new ForcePerLength(1, ForcePerLengthUnit.NanonewtonPerMillimeter).ToString());
            Assert.Equal("1 N/cm", new ForcePerLength(1, ForcePerLengthUnit.NewtonPerCentimeter).ToString());
            Assert.Equal("1 N/m", new ForcePerLength(1, ForcePerLengthUnit.NewtonPerMeter).ToString());
            Assert.Equal("1 N/mm", new ForcePerLength(1, ForcePerLengthUnit.NewtonPerMillimeter).ToString());
            Assert.Equal("1 lbf/ft", new ForcePerLength(1, ForcePerLengthUnit.PoundForcePerFoot).ToString());
            Assert.Equal("1 lbf/in", new ForcePerLength(1, ForcePerLengthUnit.PoundForcePerInch).ToString());
            Assert.Equal("1 lbf/yd", new ForcePerLength(1, ForcePerLengthUnit.PoundForcePerYard).ToString());
            Assert.Equal("1 tf/cm", new ForcePerLength(1, ForcePerLengthUnit.TonneForcePerCentimeter).ToString());
            Assert.Equal("1 tf/m", new ForcePerLength(1, ForcePerLengthUnit.TonneForcePerMeter).ToString());
            Assert.Equal("1 tf/mm", new ForcePerLength(1, ForcePerLengthUnit.TonneForcePerMillimeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 cN/cm", new ForcePerLength(1, ForcePerLengthUnit.CentinewtonPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 cN/m", new ForcePerLength(1, ForcePerLengthUnit.CentinewtonPerMeter).ToString(swedishCulture));
            Assert.Equal("1 cN/mm", new ForcePerLength(1, ForcePerLengthUnit.CentinewtonPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 daN/cm", new ForcePerLength(1, ForcePerLengthUnit.DecanewtonPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 daN/m", new ForcePerLength(1, ForcePerLengthUnit.DecanewtonPerMeter).ToString(swedishCulture));
            Assert.Equal("1 daN/mm", new ForcePerLength(1, ForcePerLengthUnit.DecanewtonPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 dN/cm", new ForcePerLength(1, ForcePerLengthUnit.DecinewtonPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 dN/m", new ForcePerLength(1, ForcePerLengthUnit.DecinewtonPerMeter).ToString(swedishCulture));
            Assert.Equal("1 dN/mm", new ForcePerLength(1, ForcePerLengthUnit.DecinewtonPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf/cm", new ForcePerLength(1, ForcePerLengthUnit.KilogramForcePerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kgf/m", new ForcePerLength(1, ForcePerLengthUnit.KilogramForcePerMeter).ToString(swedishCulture));
            Assert.Equal("1 kgf/mm", new ForcePerLength(1, ForcePerLengthUnit.KilogramForcePerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kN/cm", new ForcePerLength(1, ForcePerLengthUnit.KilonewtonPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kN/m", new ForcePerLength(1, ForcePerLengthUnit.KilonewtonPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kN/mm", new ForcePerLength(1, ForcePerLengthUnit.KilonewtonPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kipf/ft", new ForcePerLength(1, ForcePerLengthUnit.KilopoundForcePerFoot).ToString(swedishCulture));
            Assert.Equal("1 kipf/in", new ForcePerLength(1, ForcePerLengthUnit.KilopoundForcePerInch).ToString(swedishCulture));
            Assert.Equal("1 MN/cm", new ForcePerLength(1, ForcePerLengthUnit.MeganewtonPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 MN/m", new ForcePerLength(1, ForcePerLengthUnit.MeganewtonPerMeter).ToString(swedishCulture));
            Assert.Equal("1 MN/mm", new ForcePerLength(1, ForcePerLengthUnit.MeganewtonPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 µN/cm", new ForcePerLength(1, ForcePerLengthUnit.MicronewtonPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 µN/m", new ForcePerLength(1, ForcePerLengthUnit.MicronewtonPerMeter).ToString(swedishCulture));
            Assert.Equal("1 µN/mm", new ForcePerLength(1, ForcePerLengthUnit.MicronewtonPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 mN/cm", new ForcePerLength(1, ForcePerLengthUnit.MillinewtonPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mN/m", new ForcePerLength(1, ForcePerLengthUnit.MillinewtonPerMeter).ToString(swedishCulture));
            Assert.Equal("1 mN/mm", new ForcePerLength(1, ForcePerLengthUnit.MillinewtonPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 nN/cm", new ForcePerLength(1, ForcePerLengthUnit.NanonewtonPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 nN/m", new ForcePerLength(1, ForcePerLengthUnit.NanonewtonPerMeter).ToString(swedishCulture));
            Assert.Equal("1 nN/mm", new ForcePerLength(1, ForcePerLengthUnit.NanonewtonPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 N/cm", new ForcePerLength(1, ForcePerLengthUnit.NewtonPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 N/m", new ForcePerLength(1, ForcePerLengthUnit.NewtonPerMeter).ToString(swedishCulture));
            Assert.Equal("1 N/mm", new ForcePerLength(1, ForcePerLengthUnit.NewtonPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 lbf/ft", new ForcePerLength(1, ForcePerLengthUnit.PoundForcePerFoot).ToString(swedishCulture));
            Assert.Equal("1 lbf/in", new ForcePerLength(1, ForcePerLengthUnit.PoundForcePerInch).ToString(swedishCulture));
            Assert.Equal("1 lbf/yd", new ForcePerLength(1, ForcePerLengthUnit.PoundForcePerYard).ToString(swedishCulture));
            Assert.Equal("1 tf/cm", new ForcePerLength(1, ForcePerLengthUnit.TonneForcePerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 tf/m", new ForcePerLength(1, ForcePerLengthUnit.TonneForcePerMeter).ToString(swedishCulture));
            Assert.Equal("1 tf/mm", new ForcePerLength(1, ForcePerLengthUnit.TonneForcePerMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 N/m", new ForcePerLength(0.123456, ForcePerLengthUnit.NewtonPerMeter).ToString("s1"));
            Assert.Equal("0.12 N/m", new ForcePerLength(0.123456, ForcePerLengthUnit.NewtonPerMeter).ToString("s2"));
            Assert.Equal("0.123 N/m", new ForcePerLength(0.123456, ForcePerLengthUnit.NewtonPerMeter).ToString("s3"));
            Assert.Equal("0.1235 N/m", new ForcePerLength(0.123456, ForcePerLengthUnit.NewtonPerMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 N/m", new ForcePerLength(0.123456, ForcePerLengthUnit.NewtonPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 N/m", new ForcePerLength(0.123456, ForcePerLengthUnit.NewtonPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 N/m", new ForcePerLength(0.123456, ForcePerLengthUnit.NewtonPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 N/m", new ForcePerLength(0.123456, ForcePerLengthUnit.NewtonPerMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = ForcePerLength.FromNewtonsPerMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = ForcePerLength.FromNewtonsPerMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = ForcePerLength.FromNewtonsPerMeter(1.0);
            Assert.Equal(Comparison.GetHashCode(quantity.Unit, quantity.Value), quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = ForcePerLength.FromNewtonsPerMeter(value);
            Assert.Equal(ForcePerLength.FromNewtonsPerMeter(-value), -quantity);
        }
    }
}
