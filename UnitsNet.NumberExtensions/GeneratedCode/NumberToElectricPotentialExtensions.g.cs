//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricPotential
{
    /// <summary>
    /// A number to ElectricPotential Extensions
    /// </summary>
    public static class NumberToElectricPotentialExtensions
    {
        /// <inheritdoc cref="ElectricPotential.FromKilovolts(double)" />
        public static ElectricPotential Kilovolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricPotential.FromKilovolts(double.CreateChecked(value));
#else
            => ElectricPotential.FromKilovolts(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricPotential.FromMegavolts(double)" />
        public static ElectricPotential Megavolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricPotential.FromMegavolts(double.CreateChecked(value));
#else
            => ElectricPotential.FromMegavolts(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricPotential.FromMicrovolts(double)" />
        public static ElectricPotential Microvolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricPotential.FromMicrovolts(double.CreateChecked(value));
#else
            => ElectricPotential.FromMicrovolts(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricPotential.FromMillivolts(double)" />
        public static ElectricPotential Millivolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricPotential.FromMillivolts(double.CreateChecked(value));
#else
            => ElectricPotential.FromMillivolts(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricPotential.FromNanovolts(double)" />
        public static ElectricPotential Nanovolts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricPotential.FromNanovolts(double.CreateChecked(value));
#else
            => ElectricPotential.FromNanovolts(Convert.ToDouble(value));
#endif

        /// <inheritdoc cref="ElectricPotential.FromVolts(double)" />
        public static ElectricPotential Volts<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => ElectricPotential.FromVolts(double.CreateChecked(value));
#else
            => ElectricPotential.FromVolts(Convert.ToDouble(value));
#endif

    }
}
