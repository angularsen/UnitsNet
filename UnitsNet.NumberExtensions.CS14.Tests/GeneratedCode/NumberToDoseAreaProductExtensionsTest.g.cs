//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToDoseAreaProduct;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToDoseAreaProductExtensionsTests
    {
        [Fact]
        public void NumberToCentigraySquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromCentigraySquareCentimeters(2), 2.CentigraySquareCentimeters);

        [Fact]
        public void NumberToCentigraySquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromCentigraySquareDecimeters(2), 2.CentigraySquareDecimeters);

        [Fact]
        public void NumberToCentigraySquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromCentigraySquareMeters(2), 2.CentigraySquareMeters);

        [Fact]
        public void NumberToCentigraySquareMicrometersTest() =>
            Assert.Equal(DoseAreaProduct.FromCentigraySquareMicrometers(2), 2.CentigraySquareMicrometers);

        [Fact]
        public void NumberToCentigraySquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromCentigraySquareMillimeters(2), 2.CentigraySquareMillimeters);

        [Fact]
        public void NumberToDecigraySquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromDecigraySquareCentimeters(2), 2.DecigraySquareCentimeters);

        [Fact]
        public void NumberToDecigraySquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromDecigraySquareDecimeters(2), 2.DecigraySquareDecimeters);

        [Fact]
        public void NumberToDecigraySquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromDecigraySquareMeters(2), 2.DecigraySquareMeters);

        [Fact]
        public void NumberToDecigraySquareMicrometersTest() =>
            Assert.Equal(DoseAreaProduct.FromDecigraySquareMicrometers(2), 2.DecigraySquareMicrometers);

        [Fact]
        public void NumberToDecigraySquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromDecigraySquareMillimeters(2), 2.DecigraySquareMillimeters);

        [Fact]
        public void NumberToGraySquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromGraySquareCentimeters(2), 2.GraySquareCentimeters);

        [Fact]
        public void NumberToGraySquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromGraySquareDecimeters(2), 2.GraySquareDecimeters);

        [Fact]
        public void NumberToGraySquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromGraySquareMeters(2), 2.GraySquareMeters);

        [Fact]
        public void NumberToGraySquareMicrometersTest() =>
            Assert.Equal(DoseAreaProduct.FromGraySquareMicrometers(2), 2.GraySquareMicrometers);

        [Fact]
        public void NumberToGraySquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromGraySquareMillimeters(2), 2.GraySquareMillimeters);

        [Fact]
        public void NumberToMicrograySquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMicrograySquareCentimeters(2), 2.MicrograySquareCentimeters);

        [Fact]
        public void NumberToMicrograySquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMicrograySquareDecimeters(2), 2.MicrograySquareDecimeters);

        [Fact]
        public void NumberToMicrograySquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMicrograySquareMeters(2), 2.MicrograySquareMeters);

        [Fact]
        public void NumberToMicrograySquareMicrometersTest() =>
            Assert.Equal(DoseAreaProduct.FromMicrograySquareMicrometers(2), 2.MicrograySquareMicrometers);

        [Fact]
        public void NumberToMicrograySquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMicrograySquareMillimeters(2), 2.MicrograySquareMillimeters);

        [Fact]
        public void NumberToMilligraySquareCentimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMilligraySquareCentimeters(2), 2.MilligraySquareCentimeters);

        [Fact]
        public void NumberToMilligraySquareDecimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMilligraySquareDecimeters(2), 2.MilligraySquareDecimeters);

        [Fact]
        public void NumberToMilligraySquareMetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMilligraySquareMeters(2), 2.MilligraySquareMeters);

        [Fact]
        public void NumberToMilligraySquareMicrometersTest() =>
            Assert.Equal(DoseAreaProduct.FromMilligraySquareMicrometers(2), 2.MilligraySquareMicrometers);

        [Fact]
        public void NumberToMilligraySquareMillimetersTest() =>
            Assert.Equal(DoseAreaProduct.FromMilligraySquareMillimeters(2), 2.MilligraySquareMillimeters);

    }
}
