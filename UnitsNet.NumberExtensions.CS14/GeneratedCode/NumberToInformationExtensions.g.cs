//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToInformation
{
    /// <summary>
    /// A number to Information Extensions
    /// </summary>
    public static class NumberToInformationExtensions
    {
        extension<T>(T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="Information.FromBits(double)" />
            public Information Bits
#if NET7_0_OR_GREATER
                => Information.FromBits(double.CreateChecked(value));
#else
                => Information.FromBits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromBytes(double)" />
            public Information Bytes
#if NET7_0_OR_GREATER
                => Information.FromBytes(double.CreateChecked(value));
#else
                => Information.FromBytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromExabits(double)" />
            public Information Exabits
#if NET7_0_OR_GREATER
                => Information.FromExabits(double.CreateChecked(value));
#else
                => Information.FromExabits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromExabytes(double)" />
            public Information Exabytes
#if NET7_0_OR_GREATER
                => Information.FromExabytes(double.CreateChecked(value));
#else
                => Information.FromExabytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromExaoctets(double)" />
            public Information Exaoctets
#if NET7_0_OR_GREATER
                => Information.FromExaoctets(double.CreateChecked(value));
#else
                => Information.FromExaoctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromExbibits(double)" />
            public Information Exbibits
#if NET7_0_OR_GREATER
                => Information.FromExbibits(double.CreateChecked(value));
#else
                => Information.FromExbibits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromExbibytes(double)" />
            public Information Exbibytes
#if NET7_0_OR_GREATER
                => Information.FromExbibytes(double.CreateChecked(value));
#else
                => Information.FromExbibytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromExbioctets(double)" />
            public Information Exbioctets
#if NET7_0_OR_GREATER
                => Information.FromExbioctets(double.CreateChecked(value));
#else
                => Information.FromExbioctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromGibibits(double)" />
            public Information Gibibits
#if NET7_0_OR_GREATER
                => Information.FromGibibits(double.CreateChecked(value));
#else
                => Information.FromGibibits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromGibibytes(double)" />
            public Information Gibibytes
#if NET7_0_OR_GREATER
                => Information.FromGibibytes(double.CreateChecked(value));
#else
                => Information.FromGibibytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromGibioctets(double)" />
            public Information Gibioctets
#if NET7_0_OR_GREATER
                => Information.FromGibioctets(double.CreateChecked(value));
#else
                => Information.FromGibioctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromGigabits(double)" />
            public Information Gigabits
#if NET7_0_OR_GREATER
                => Information.FromGigabits(double.CreateChecked(value));
#else
                => Information.FromGigabits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromGigabytes(double)" />
            public Information Gigabytes
#if NET7_0_OR_GREATER
                => Information.FromGigabytes(double.CreateChecked(value));
#else
                => Information.FromGigabytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromGigaoctets(double)" />
            public Information Gigaoctets
#if NET7_0_OR_GREATER
                => Information.FromGigaoctets(double.CreateChecked(value));
#else
                => Information.FromGigaoctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromKibibits(double)" />
            public Information Kibibits
#if NET7_0_OR_GREATER
                => Information.FromKibibits(double.CreateChecked(value));
#else
                => Information.FromKibibits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromKibibytes(double)" />
            public Information Kibibytes
#if NET7_0_OR_GREATER
                => Information.FromKibibytes(double.CreateChecked(value));
#else
                => Information.FromKibibytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromKibioctets(double)" />
            public Information Kibioctets
#if NET7_0_OR_GREATER
                => Information.FromKibioctets(double.CreateChecked(value));
#else
                => Information.FromKibioctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromKilobits(double)" />
            public Information Kilobits
#if NET7_0_OR_GREATER
                => Information.FromKilobits(double.CreateChecked(value));
#else
                => Information.FromKilobits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromKilobytes(double)" />
            public Information Kilobytes
#if NET7_0_OR_GREATER
                => Information.FromKilobytes(double.CreateChecked(value));
#else
                => Information.FromKilobytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromKilooctets(double)" />
            public Information Kilooctets
#if NET7_0_OR_GREATER
                => Information.FromKilooctets(double.CreateChecked(value));
#else
                => Information.FromKilooctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromMebibits(double)" />
            public Information Mebibits
#if NET7_0_OR_GREATER
                => Information.FromMebibits(double.CreateChecked(value));
#else
                => Information.FromMebibits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromMebibytes(double)" />
            public Information Mebibytes
#if NET7_0_OR_GREATER
                => Information.FromMebibytes(double.CreateChecked(value));
#else
                => Information.FromMebibytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromMebioctets(double)" />
            public Information Mebioctets
#if NET7_0_OR_GREATER
                => Information.FromMebioctets(double.CreateChecked(value));
#else
                => Information.FromMebioctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromMegabits(double)" />
            public Information Megabits
#if NET7_0_OR_GREATER
                => Information.FromMegabits(double.CreateChecked(value));
#else
                => Information.FromMegabits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromMegabytes(double)" />
            public Information Megabytes
#if NET7_0_OR_GREATER
                => Information.FromMegabytes(double.CreateChecked(value));
#else
                => Information.FromMegabytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromMegaoctets(double)" />
            public Information Megaoctets
#if NET7_0_OR_GREATER
                => Information.FromMegaoctets(double.CreateChecked(value));
#else
                => Information.FromMegaoctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromOctets(double)" />
            public Information Octets
#if NET7_0_OR_GREATER
                => Information.FromOctets(double.CreateChecked(value));
#else
                => Information.FromOctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromPebibits(double)" />
            public Information Pebibits
#if NET7_0_OR_GREATER
                => Information.FromPebibits(double.CreateChecked(value));
#else
                => Information.FromPebibits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromPebibytes(double)" />
            public Information Pebibytes
#if NET7_0_OR_GREATER
                => Information.FromPebibytes(double.CreateChecked(value));
#else
                => Information.FromPebibytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromPebioctets(double)" />
            public Information Pebioctets
#if NET7_0_OR_GREATER
                => Information.FromPebioctets(double.CreateChecked(value));
#else
                => Information.FromPebioctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromPetabits(double)" />
            public Information Petabits
#if NET7_0_OR_GREATER
                => Information.FromPetabits(double.CreateChecked(value));
#else
                => Information.FromPetabits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromPetabytes(double)" />
            public Information Petabytes
#if NET7_0_OR_GREATER
                => Information.FromPetabytes(double.CreateChecked(value));
#else
                => Information.FromPetabytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromPetaoctets(double)" />
            public Information Petaoctets
#if NET7_0_OR_GREATER
                => Information.FromPetaoctets(double.CreateChecked(value));
#else
                => Information.FromPetaoctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromTebibits(double)" />
            public Information Tebibits
#if NET7_0_OR_GREATER
                => Information.FromTebibits(double.CreateChecked(value));
#else
                => Information.FromTebibits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromTebibytes(double)" />
            public Information Tebibytes
#if NET7_0_OR_GREATER
                => Information.FromTebibytes(double.CreateChecked(value));
#else
                => Information.FromTebibytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromTebioctets(double)" />
            public Information Tebioctets
#if NET7_0_OR_GREATER
                => Information.FromTebioctets(double.CreateChecked(value));
#else
                => Information.FromTebioctets(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromTerabits(double)" />
            public Information Terabits
#if NET7_0_OR_GREATER
                => Information.FromTerabits(double.CreateChecked(value));
#else
                => Information.FromTerabits(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromTerabytes(double)" />
            public Information Terabytes
#if NET7_0_OR_GREATER
                => Information.FromTerabytes(double.CreateChecked(value));
#else
                => Information.FromTerabytes(value.ToDouble(null));
#endif

            /// <inheritdoc cref="Information.FromTeraoctets(double)" />
            public Information Teraoctets
#if NET7_0_OR_GREATER
                => Information.FromTeraoctets(double.CreateChecked(value));
#else
                => Information.FromTeraoctets(value.ToDouble(null));
#endif

        }
    }
}
