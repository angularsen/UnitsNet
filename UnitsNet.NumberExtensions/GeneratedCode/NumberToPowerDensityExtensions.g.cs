//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToPowerDensity
{
    /// <summary>
    /// A number to PowerDensity Extensions
    /// </summary>
    public static class NumberToPowerDensityExtensions
    {
        /// <inheritdoc cref="PowerDensity.FromDecawattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity DecawattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromDecawattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromDecawattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromDecawattsPerCubicInch(QuantityValue)" />
        public static PowerDensity DecawattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromDecawattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromDecawattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromDecawattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity DecawattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromDecawattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromDecawattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromDecawattsPerLiter(QuantityValue)" />
        public static PowerDensity DecawattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromDecawattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromDecawattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromDeciwattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity DeciwattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromDeciwattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromDeciwattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromDeciwattsPerCubicInch(QuantityValue)" />
        public static PowerDensity DeciwattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromDeciwattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromDeciwattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromDeciwattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity DeciwattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromDeciwattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromDeciwattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromDeciwattsPerLiter(QuantityValue)" />
        public static PowerDensity DeciwattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromDeciwattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromDeciwattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromGigawattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity GigawattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromGigawattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromGigawattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromGigawattsPerCubicInch(QuantityValue)" />
        public static PowerDensity GigawattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromGigawattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromGigawattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromGigawattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity GigawattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromGigawattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromGigawattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromGigawattsPerLiter(QuantityValue)" />
        public static PowerDensity GigawattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromGigawattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromGigawattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromKilowattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity KilowattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromKilowattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromKilowattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromKilowattsPerCubicInch(QuantityValue)" />
        public static PowerDensity KilowattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromKilowattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromKilowattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromKilowattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity KilowattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromKilowattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromKilowattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromKilowattsPerLiter(QuantityValue)" />
        public static PowerDensity KilowattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromKilowattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromKilowattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMegawattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity MegawattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMegawattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMegawattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMegawattsPerCubicInch(QuantityValue)" />
        public static PowerDensity MegawattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMegawattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMegawattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMegawattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity MegawattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMegawattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMegawattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMegawattsPerLiter(QuantityValue)" />
        public static PowerDensity MegawattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMegawattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMegawattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMicrowattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity MicrowattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMicrowattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMicrowattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMicrowattsPerCubicInch(QuantityValue)" />
        public static PowerDensity MicrowattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMicrowattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMicrowattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMicrowattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity MicrowattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMicrowattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMicrowattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMicrowattsPerLiter(QuantityValue)" />
        public static PowerDensity MicrowattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMicrowattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMicrowattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMilliwattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity MilliwattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMilliwattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMilliwattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMilliwattsPerCubicInch(QuantityValue)" />
        public static PowerDensity MilliwattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMilliwattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMilliwattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMilliwattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity MilliwattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMilliwattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMilliwattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromMilliwattsPerLiter(QuantityValue)" />
        public static PowerDensity MilliwattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromMilliwattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromMilliwattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromNanowattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity NanowattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromNanowattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromNanowattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromNanowattsPerCubicInch(QuantityValue)" />
        public static PowerDensity NanowattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromNanowattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromNanowattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromNanowattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity NanowattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromNanowattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromNanowattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromNanowattsPerLiter(QuantityValue)" />
        public static PowerDensity NanowattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromNanowattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromNanowattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromPicowattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity PicowattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromPicowattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromPicowattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromPicowattsPerCubicInch(QuantityValue)" />
        public static PowerDensity PicowattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromPicowattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromPicowattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromPicowattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity PicowattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromPicowattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromPicowattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromPicowattsPerLiter(QuantityValue)" />
        public static PowerDensity PicowattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromPicowattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromPicowattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromTerawattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity TerawattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromTerawattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromTerawattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromTerawattsPerCubicInch(QuantityValue)" />
        public static PowerDensity TerawattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromTerawattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromTerawattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromTerawattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity TerawattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromTerawattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromTerawattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromTerawattsPerLiter(QuantityValue)" />
        public static PowerDensity TerawattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromTerawattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromTerawattsPerLiter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromWattsPerCubicFoot(QuantityValue)" />
        public static PowerDensity WattsPerCubicFoot<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromWattsPerCubicFoot(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromWattsPerCubicFoot(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromWattsPerCubicInch(QuantityValue)" />
        public static PowerDensity WattsPerCubicInch<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromWattsPerCubicInch(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromWattsPerCubicInch(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromWattsPerCubicMeter(QuantityValue)" />
        public static PowerDensity WattsPerCubicMeter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromWattsPerCubicMeter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromWattsPerCubicMeter(value.ToQuantityValue());
#endif

        /// <inheritdoc cref="PowerDensity.FromWattsPerLiter(QuantityValue)" />
        public static PowerDensity WattsPerLiter<T>(this T value)
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
            => PowerDensity.FromWattsPerLiter(QuantityValue.CreateChecked(value));
#else
            , IConvertible
            => PowerDensity.FromWattsPerLiter(value.ToQuantityValue());
#endif

    }
}
