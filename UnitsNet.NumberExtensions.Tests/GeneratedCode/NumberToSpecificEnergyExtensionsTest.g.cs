//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using UnitsNet.NumberExtensions.NumberToSpecificEnergy;
using Xunit;

namespace UnitsNet.Tests
{
    public class NumberToSpecificEnergyExtensionsTests
    {
        [Fact]
        public void NumberToBtuPerPoundTest() =>
            Assert.Equal(SpecificEnergy.FromBtuPerPound(2), 2.BtuPerPound());

        [Fact]
        public void NumberToCaloriesPerGramTest() =>
            Assert.Equal(SpecificEnergy.FromCaloriesPerGram(2), 2.CaloriesPerGram());

        [Fact]
        public void NumberToGigawattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromGigawattDaysPerKilogram(2), 2.GigawattDaysPerKilogram());

        [Fact]
        public void NumberToGigawattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy.FromGigawattDaysPerShortTon(2), 2.GigawattDaysPerShortTon());

        [Fact]
        public void NumberToGigawattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy.FromGigawattDaysPerTonne(2), 2.GigawattDaysPerTonne());

        [Fact]
        public void NumberToGigawattHoursPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromGigawattHoursPerKilogram(2), 2.GigawattHoursPerKilogram());

        [Fact]
        public void NumberToGigawattHoursPerPoundTest() =>
            Assert.Equal(SpecificEnergy.FromGigawattHoursPerPound(2), 2.GigawattHoursPerPound());

        [Fact]
        public void NumberToJoulesPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromJoulesPerKilogram(2), 2.JoulesPerKilogram());

        [Fact]
        public void NumberToKilocaloriesPerGramTest() =>
            Assert.Equal(SpecificEnergy.FromKilocaloriesPerGram(2), 2.KilocaloriesPerGram());

        [Fact]
        public void NumberToKilojoulesPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromKilojoulesPerKilogram(2), 2.KilojoulesPerKilogram());

        [Fact]
        public void NumberToKilowattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromKilowattDaysPerKilogram(2), 2.KilowattDaysPerKilogram());

        [Fact]
        public void NumberToKilowattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy.FromKilowattDaysPerShortTon(2), 2.KilowattDaysPerShortTon());

        [Fact]
        public void NumberToKilowattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy.FromKilowattDaysPerTonne(2), 2.KilowattDaysPerTonne());

        [Fact]
        public void NumberToKilowattHoursPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromKilowattHoursPerKilogram(2), 2.KilowattHoursPerKilogram());

        [Fact]
        public void NumberToKilowattHoursPerPoundTest() =>
            Assert.Equal(SpecificEnergy.FromKilowattHoursPerPound(2), 2.KilowattHoursPerPound());

        [Fact]
        public void NumberToMegajoulesPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromMegajoulesPerKilogram(2), 2.MegajoulesPerKilogram());

        [Fact]
        public void NumberToMegajoulesPerTonneTest() =>
            Assert.Equal(SpecificEnergy.FromMegajoulesPerTonne(2), 2.MegajoulesPerTonne());

        [Fact]
        public void NumberToMegawattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromMegawattDaysPerKilogram(2), 2.MegawattDaysPerKilogram());

        [Fact]
        public void NumberToMegawattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy.FromMegawattDaysPerShortTon(2), 2.MegawattDaysPerShortTon());

        [Fact]
        public void NumberToMegawattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy.FromMegawattDaysPerTonne(2), 2.MegawattDaysPerTonne());

        [Fact]
        public void NumberToMegawattHoursPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromMegawattHoursPerKilogram(2), 2.MegawattHoursPerKilogram());

        [Fact]
        public void NumberToMegawattHoursPerPoundTest() =>
            Assert.Equal(SpecificEnergy.FromMegawattHoursPerPound(2), 2.MegawattHoursPerPound());

        [Fact]
        public void NumberToTerawattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromTerawattDaysPerKilogram(2), 2.TerawattDaysPerKilogram());

        [Fact]
        public void NumberToTerawattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy.FromTerawattDaysPerShortTon(2), 2.TerawattDaysPerShortTon());

        [Fact]
        public void NumberToTerawattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy.FromTerawattDaysPerTonne(2), 2.TerawattDaysPerTonne());

        [Fact]
        public void NumberToWattDaysPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromWattDaysPerKilogram(2), 2.WattDaysPerKilogram());

        [Fact]
        public void NumberToWattDaysPerShortTonTest() =>
            Assert.Equal(SpecificEnergy.FromWattDaysPerShortTon(2), 2.WattDaysPerShortTon());

        [Fact]
        public void NumberToWattDaysPerTonneTest() =>
            Assert.Equal(SpecificEnergy.FromWattDaysPerTonne(2), 2.WattDaysPerTonne());

        [Fact]
        public void NumberToWattHoursPerKilogramTest() =>
            Assert.Equal(SpecificEnergy.FromWattHoursPerKilogram(2), 2.WattHoursPerKilogram());

        [Fact]
        public void NumberToWattHoursPerPoundTest() =>
            Assert.Equal(SpecificEnergy.FromWattHoursPerPound(2), 2.WattHoursPerPound());

    }
}
