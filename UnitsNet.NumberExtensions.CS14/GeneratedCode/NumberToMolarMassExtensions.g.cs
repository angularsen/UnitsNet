//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToMolarMass
{
    /// <summary>
    /// A number to MolarMass Extensions
    /// </summary>
    public static class NumberToMolarMassExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="MolarMass.FromCentigramsPerMole(QuantityValue)" />
            public MolarMass CentigramsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromCentigramsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromCentigramsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromDecagramsPerMole(QuantityValue)" />
            public MolarMass DecagramsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromDecagramsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromDecagramsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromDecigramsPerMole(QuantityValue)" />
            public MolarMass DecigramsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromDecigramsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromDecigramsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromGramsPerMole(QuantityValue)" />
            public MolarMass GramsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromGramsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromGramsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromHectogramsPerMole(QuantityValue)" />
            public MolarMass HectogramsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromHectogramsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromHectogramsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromKilogramsPerKilomole(QuantityValue)" />
            public MolarMass KilogramsPerKilomole
#if NET7_0_OR_GREATER
                => MolarMass.FromKilogramsPerKilomole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromKilogramsPerKilomole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromKilogramsPerMole(QuantityValue)" />
            public MolarMass KilogramsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromKilogramsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromKilogramsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromKilopoundsPerMole(QuantityValue)" />
            public MolarMass KilopoundsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromKilopoundsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromKilopoundsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromMegapoundsPerMole(QuantityValue)" />
            public MolarMass MegapoundsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromMegapoundsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromMegapoundsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromMicrogramsPerMole(QuantityValue)" />
            public MolarMass MicrogramsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromMicrogramsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromMicrogramsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromMilligramsPerMole(QuantityValue)" />
            public MolarMass MilligramsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromMilligramsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromMilligramsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromNanogramsPerMole(QuantityValue)" />
            public MolarMass NanogramsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromNanogramsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromNanogramsPerMole(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="MolarMass.FromPoundsPerMole(QuantityValue)" />
            public MolarMass PoundsPerMole
#if NET7_0_OR_GREATER
                => MolarMass.FromPoundsPerMole(QuantityValue.CreateChecked(value));
#else
                => MolarMass.FromPoundsPerMole(value.ToQuantityValue());
#endif

        }
    }
}
