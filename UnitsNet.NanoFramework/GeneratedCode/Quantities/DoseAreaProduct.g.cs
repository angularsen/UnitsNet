//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     It is defined as the absorbed dose multiplied by the area irradiated.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Dose_area_product
    /// </remarks>
    public struct  DoseAreaProduct
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly DoseAreaProductUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public DoseAreaProductUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public DoseAreaProduct(double value, DoseAreaProductUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of DoseAreaProduct, which is Second. All conversions go via this value.
        /// </summary>
        public static DoseAreaProductUnit BaseUnit { get; } = DoseAreaProductUnit.GraySquareMeter;

        /// <summary>
        /// Represents the largest possible value of DoseAreaProduct.
        /// </summary>
        public static DoseAreaProduct MaxValue { get; } = new DoseAreaProduct(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of DoseAreaProduct.
        /// </summary>
        public static DoseAreaProduct MinValue { get; } = new DoseAreaProduct(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static DoseAreaProduct Zero { get; } = new DoseAreaProduct(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.CentigraySquareCentimeter"/>
        /// </summary>
        public double CentigraySquareCentimeters => As(DoseAreaProductUnit.CentigraySquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.CentigraySquareDecimeter"/>
        /// </summary>
        public double CentigraySquareDecimeters => As(DoseAreaProductUnit.CentigraySquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.CentigraySquareMeter"/>
        /// </summary>
        public double CentigraySquareMeters => As(DoseAreaProductUnit.CentigraySquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.CentigraySquareMicrometer"/>
        /// </summary>
        public double CentigraySquareMicrometers => As(DoseAreaProductUnit.CentigraySquareMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.CentigraySquareMillimeter"/>
        /// </summary>
        public double CentigraySquareMillimeters => As(DoseAreaProductUnit.CentigraySquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.DecigraySquareCentimeter"/>
        /// </summary>
        public double DecigraySquareCentimeters => As(DoseAreaProductUnit.DecigraySquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.DecigraySquareDecimeter"/>
        /// </summary>
        public double DecigraySquareDecimeters => As(DoseAreaProductUnit.DecigraySquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.DecigraySquareMeter"/>
        /// </summary>
        public double DecigraySquareMeters => As(DoseAreaProductUnit.DecigraySquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.DecigraySquareMicrometer"/>
        /// </summary>
        public double DecigraySquareMicrometers => As(DoseAreaProductUnit.DecigraySquareMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.DecigraySquareMillimeter"/>
        /// </summary>
        public double DecigraySquareMillimeters => As(DoseAreaProductUnit.DecigraySquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.GraySquareCentimeter"/>
        /// </summary>
        public double GraySquareCentimeters => As(DoseAreaProductUnit.GraySquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.GraySquareDecimeter"/>
        /// </summary>
        public double GraySquareDecimeters => As(DoseAreaProductUnit.GraySquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.GraySquareMeter"/>
        /// </summary>
        public double GraySquareMeters => As(DoseAreaProductUnit.GraySquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.GraySquareMicrometer"/>
        /// </summary>
        public double GraySquareMicrometers => As(DoseAreaProductUnit.GraySquareMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.GraySquareMillimeter"/>
        /// </summary>
        public double GraySquareMillimeters => As(DoseAreaProductUnit.GraySquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MicrograySquareCentimeter"/>
        /// </summary>
        public double MicrograySquareCentimeters => As(DoseAreaProductUnit.MicrograySquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MicrograySquareDecimeter"/>
        /// </summary>
        public double MicrograySquareDecimeters => As(DoseAreaProductUnit.MicrograySquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MicrograySquareMeter"/>
        /// </summary>
        public double MicrograySquareMeters => As(DoseAreaProductUnit.MicrograySquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MicrograySquareMicrometer"/>
        /// </summary>
        public double MicrograySquareMicrometers => As(DoseAreaProductUnit.MicrograySquareMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MicrograySquareMillimeter"/>
        /// </summary>
        public double MicrograySquareMillimeters => As(DoseAreaProductUnit.MicrograySquareMillimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MilligraySquareCentimeter"/>
        /// </summary>
        public double MilligraySquareCentimeters => As(DoseAreaProductUnit.MilligraySquareCentimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MilligraySquareDecimeter"/>
        /// </summary>
        public double MilligraySquareDecimeters => As(DoseAreaProductUnit.MilligraySquareDecimeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MilligraySquareMeter"/>
        /// </summary>
        public double MilligraySquareMeters => As(DoseAreaProductUnit.MilligraySquareMeter);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MilligraySquareMicrometer"/>
        /// </summary>
        public double MilligraySquareMicrometers => As(DoseAreaProductUnit.MilligraySquareMicrometer);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="DoseAreaProductUnit.MilligraySquareMillimeter"/>
        /// </summary>
        public double MilligraySquareMillimeters => As(DoseAreaProductUnit.MilligraySquareMillimeter);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.CentigraySquareCentimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromCentigraySquareCentimeters(double centigraysquarecentimeters) => new DoseAreaProduct(centigraysquarecentimeters, DoseAreaProductUnit.CentigraySquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.CentigraySquareDecimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromCentigraySquareDecimeters(double centigraysquaredecimeters) => new DoseAreaProduct(centigraysquaredecimeters, DoseAreaProductUnit.CentigraySquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.CentigraySquareMeter"/>.
        /// </summary>
        public static DoseAreaProduct FromCentigraySquareMeters(double centigraysquaremeters) => new DoseAreaProduct(centigraysquaremeters, DoseAreaProductUnit.CentigraySquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.CentigraySquareMicrometer"/>.
        /// </summary>
        public static DoseAreaProduct FromCentigraySquareMicrometers(double centigraysquaremicrometers) => new DoseAreaProduct(centigraysquaremicrometers, DoseAreaProductUnit.CentigraySquareMicrometer);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.CentigraySquareMillimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromCentigraySquareMillimeters(double centigraysquaremillimeters) => new DoseAreaProduct(centigraysquaremillimeters, DoseAreaProductUnit.CentigraySquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.DecigraySquareCentimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromDecigraySquareCentimeters(double decigraysquarecentimeters) => new DoseAreaProduct(decigraysquarecentimeters, DoseAreaProductUnit.DecigraySquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.DecigraySquareDecimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromDecigraySquareDecimeters(double decigraysquaredecimeters) => new DoseAreaProduct(decigraysquaredecimeters, DoseAreaProductUnit.DecigraySquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.DecigraySquareMeter"/>.
        /// </summary>
        public static DoseAreaProduct FromDecigraySquareMeters(double decigraysquaremeters) => new DoseAreaProduct(decigraysquaremeters, DoseAreaProductUnit.DecigraySquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.DecigraySquareMicrometer"/>.
        /// </summary>
        public static DoseAreaProduct FromDecigraySquareMicrometers(double decigraysquaremicrometers) => new DoseAreaProduct(decigraysquaremicrometers, DoseAreaProductUnit.DecigraySquareMicrometer);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.DecigraySquareMillimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromDecigraySquareMillimeters(double decigraysquaremillimeters) => new DoseAreaProduct(decigraysquaremillimeters, DoseAreaProductUnit.DecigraySquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.GraySquareCentimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromGraySquareCentimeters(double graysquarecentimeters) => new DoseAreaProduct(graysquarecentimeters, DoseAreaProductUnit.GraySquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.GraySquareDecimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromGraySquareDecimeters(double graysquaredecimeters) => new DoseAreaProduct(graysquaredecimeters, DoseAreaProductUnit.GraySquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.GraySquareMeter"/>.
        /// </summary>
        public static DoseAreaProduct FromGraySquareMeters(double graysquaremeters) => new DoseAreaProduct(graysquaremeters, DoseAreaProductUnit.GraySquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.GraySquareMicrometer"/>.
        /// </summary>
        public static DoseAreaProduct FromGraySquareMicrometers(double graysquaremicrometers) => new DoseAreaProduct(graysquaremicrometers, DoseAreaProductUnit.GraySquareMicrometer);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.GraySquareMillimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromGraySquareMillimeters(double graysquaremillimeters) => new DoseAreaProduct(graysquaremillimeters, DoseAreaProductUnit.GraySquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MicrograySquareCentimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromMicrograySquareCentimeters(double micrograysquarecentimeters) => new DoseAreaProduct(micrograysquarecentimeters, DoseAreaProductUnit.MicrograySquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MicrograySquareDecimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromMicrograySquareDecimeters(double micrograysquaredecimeters) => new DoseAreaProduct(micrograysquaredecimeters, DoseAreaProductUnit.MicrograySquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MicrograySquareMeter"/>.
        /// </summary>
        public static DoseAreaProduct FromMicrograySquareMeters(double micrograysquaremeters) => new DoseAreaProduct(micrograysquaremeters, DoseAreaProductUnit.MicrograySquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MicrograySquareMicrometer"/>.
        /// </summary>
        public static DoseAreaProduct FromMicrograySquareMicrometers(double micrograysquaremicrometers) => new DoseAreaProduct(micrograysquaremicrometers, DoseAreaProductUnit.MicrograySquareMicrometer);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MicrograySquareMillimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromMicrograySquareMillimeters(double micrograysquaremillimeters) => new DoseAreaProduct(micrograysquaremillimeters, DoseAreaProductUnit.MicrograySquareMillimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MilligraySquareCentimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromMilligraySquareCentimeters(double milligraysquarecentimeters) => new DoseAreaProduct(milligraysquarecentimeters, DoseAreaProductUnit.MilligraySquareCentimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MilligraySquareDecimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromMilligraySquareDecimeters(double milligraysquaredecimeters) => new DoseAreaProduct(milligraysquaredecimeters, DoseAreaProductUnit.MilligraySquareDecimeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MilligraySquareMeter"/>.
        /// </summary>
        public static DoseAreaProduct FromMilligraySquareMeters(double milligraysquaremeters) => new DoseAreaProduct(milligraysquaremeters, DoseAreaProductUnit.MilligraySquareMeter);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MilligraySquareMicrometer"/>.
        /// </summary>
        public static DoseAreaProduct FromMilligraySquareMicrometers(double milligraysquaremicrometers) => new DoseAreaProduct(milligraysquaremicrometers, DoseAreaProductUnit.MilligraySquareMicrometer);

        /// <summary>
        ///     Creates a <see cref="DoseAreaProduct"/> from <see cref="DoseAreaProductUnit.MilligraySquareMillimeter"/>.
        /// </summary>
        public static DoseAreaProduct FromMilligraySquareMillimeters(double milligraysquaremillimeters) => new DoseAreaProduct(milligraysquaremillimeters, DoseAreaProductUnit.MilligraySquareMillimeter);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="DoseAreaProductUnit" /> to <see cref="DoseAreaProduct" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>DoseAreaProduct unit value.</returns>
        public static DoseAreaProduct From(double value, DoseAreaProductUnit fromUnit)
        {
            return new DoseAreaProduct(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(DoseAreaProductUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this DoseAreaProduct to another DoseAreaProduct with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A DoseAreaProduct with the specified unit.</returns>
                public DoseAreaProduct ToUnit(DoseAreaProductUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new DoseAreaProduct(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        DoseAreaProductUnit.CentigraySquareCentimeter => (_value / 10000) * 1e-2d,
                        DoseAreaProductUnit.CentigraySquareDecimeter => (_value / 100) * 1e-2d,
                        DoseAreaProductUnit.CentigraySquareMeter => (_value) * 1e-2d,
                        DoseAreaProductUnit.CentigraySquareMicrometer => (_value / 1000000000000) * 1e-2d,
                        DoseAreaProductUnit.CentigraySquareMillimeter => (_value / 1000000) * 1e-2d,
                        DoseAreaProductUnit.DecigraySquareCentimeter => (_value / 10000) * 1e-1d,
                        DoseAreaProductUnit.DecigraySquareDecimeter => (_value / 100) * 1e-1d,
                        DoseAreaProductUnit.DecigraySquareMeter => (_value) * 1e-1d,
                        DoseAreaProductUnit.DecigraySquareMicrometer => (_value / 1000000000000) * 1e-1d,
                        DoseAreaProductUnit.DecigraySquareMillimeter => (_value / 1000000) * 1e-1d,
                        DoseAreaProductUnit.GraySquareCentimeter => _value / 10000,
                        DoseAreaProductUnit.GraySquareDecimeter => _value / 100,
                        DoseAreaProductUnit.GraySquareMeter => _value,
                        DoseAreaProductUnit.GraySquareMicrometer => _value / 1000000000000,
                        DoseAreaProductUnit.GraySquareMillimeter => _value / 1000000,
                        DoseAreaProductUnit.MicrograySquareCentimeter => (_value / 10000) * 1e-6d,
                        DoseAreaProductUnit.MicrograySquareDecimeter => (_value / 100) * 1e-6d,
                        DoseAreaProductUnit.MicrograySquareMeter => (_value) * 1e-6d,
                        DoseAreaProductUnit.MicrograySquareMicrometer => (_value / 1000000000000) * 1e-6d,
                        DoseAreaProductUnit.MicrograySquareMillimeter => (_value / 1000000) * 1e-6d,
                        DoseAreaProductUnit.MilligraySquareCentimeter => (_value / 10000) * 1e-3d,
                        DoseAreaProductUnit.MilligraySquareDecimeter => (_value / 100) * 1e-3d,
                        DoseAreaProductUnit.MilligraySquareMeter => (_value) * 1e-3d,
                        DoseAreaProductUnit.MilligraySquareMicrometer => (_value / 1000000000000) * 1e-3d,
                        DoseAreaProductUnit.MilligraySquareMillimeter => (_value / 1000000) * 1e-3d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(DoseAreaProductUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        DoseAreaProductUnit.CentigraySquareCentimeter => (baseUnitValue * 10000) / 1e-2d,
                        DoseAreaProductUnit.CentigraySquareDecimeter => (baseUnitValue * 100) / 1e-2d,
                        DoseAreaProductUnit.CentigraySquareMeter => (baseUnitValue) / 1e-2d,
                        DoseAreaProductUnit.CentigraySquareMicrometer => (baseUnitValue * 1000000000000) / 1e-2d,
                        DoseAreaProductUnit.CentigraySquareMillimeter => (baseUnitValue * 1000000) / 1e-2d,
                        DoseAreaProductUnit.DecigraySquareCentimeter => (baseUnitValue * 10000) / 1e-1d,
                        DoseAreaProductUnit.DecigraySquareDecimeter => (baseUnitValue * 100) / 1e-1d,
                        DoseAreaProductUnit.DecigraySquareMeter => (baseUnitValue) / 1e-1d,
                        DoseAreaProductUnit.DecigraySquareMicrometer => (baseUnitValue * 1000000000000) / 1e-1d,
                        DoseAreaProductUnit.DecigraySquareMillimeter => (baseUnitValue * 1000000) / 1e-1d,
                        DoseAreaProductUnit.GraySquareCentimeter => baseUnitValue * 10000,
                        DoseAreaProductUnit.GraySquareDecimeter => baseUnitValue * 100,
                        DoseAreaProductUnit.GraySquareMeter => baseUnitValue,
                        DoseAreaProductUnit.GraySquareMicrometer => baseUnitValue * 1000000000000,
                        DoseAreaProductUnit.GraySquareMillimeter => baseUnitValue * 1000000,
                        DoseAreaProductUnit.MicrograySquareCentimeter => (baseUnitValue * 10000) / 1e-6d,
                        DoseAreaProductUnit.MicrograySquareDecimeter => (baseUnitValue * 100) / 1e-6d,
                        DoseAreaProductUnit.MicrograySquareMeter => (baseUnitValue) / 1e-6d,
                        DoseAreaProductUnit.MicrograySquareMicrometer => (baseUnitValue * 1000000000000) / 1e-6d,
                        DoseAreaProductUnit.MicrograySquareMillimeter => (baseUnitValue * 1000000) / 1e-6d,
                        DoseAreaProductUnit.MilligraySquareCentimeter => (baseUnitValue * 10000) / 1e-3d,
                        DoseAreaProductUnit.MilligraySquareDecimeter => (baseUnitValue * 100) / 1e-3d,
                        DoseAreaProductUnit.MilligraySquareMeter => (baseUnitValue) / 1e-3d,
                        DoseAreaProductUnit.MilligraySquareMicrometer => (baseUnitValue * 1000000000000) / 1e-3d,
                        DoseAreaProductUnit.MilligraySquareMillimeter => (baseUnitValue * 1000000) / 1e-3d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

