//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToTemperatureChangeRate
{
    /// <summary>
    /// A number to TemperatureChangeRate Extensions
    /// </summary>
    public static class NumberToTemperatureChangeRateExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="TemperatureChangeRate.FromCentidegreesCelsiusPerSecond(QuantityValue)" />
            public TemperatureChangeRate CentidegreesCelsiusPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromCentidegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromCentidegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDecadegreesCelsiusPerSecond(QuantityValue)" />
            public TemperatureChangeRate DecadegreesCelsiusPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDecadegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDecadegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDecidegreesCelsiusPerSecond(QuantityValue)" />
            public TemperatureChangeRate DecidegreesCelsiusPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDecidegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDecidegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDegreesCelsiusPerHour(QuantityValue)" />
            public TemperatureChangeRate DegreesCelsiusPerHour
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDegreesCelsiusPerHour(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDegreesCelsiusPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDegreesCelsiusPerMinute(QuantityValue)" />
            public TemperatureChangeRate DegreesCelsiusPerMinute
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDegreesCelsiusPerMinute(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDegreesCelsiusPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDegreesCelsiusPerSecond(QuantityValue)" />
            public TemperatureChangeRate DegreesCelsiusPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDegreesFahrenheitPerHour(QuantityValue)" />
            public TemperatureChangeRate DegreesFahrenheitPerHour
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDegreesFahrenheitPerHour(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDegreesFahrenheitPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDegreesFahrenheitPerMinute(QuantityValue)" />
            public TemperatureChangeRate DegreesFahrenheitPerMinute
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDegreesFahrenheitPerMinute(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDegreesFahrenheitPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDegreesFahrenheitPerSecond(QuantityValue)" />
            public TemperatureChangeRate DegreesFahrenheitPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDegreesFahrenheitPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDegreesFahrenheitPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDegreesKelvinPerHour(QuantityValue)" />
            public TemperatureChangeRate DegreesKelvinPerHour
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDegreesKelvinPerHour(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDegreesKelvinPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDegreesKelvinPerMinute(QuantityValue)" />
            public TemperatureChangeRate DegreesKelvinPerMinute
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDegreesKelvinPerMinute(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDegreesKelvinPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromDegreesKelvinPerSecond(QuantityValue)" />
            public TemperatureChangeRate DegreesKelvinPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromDegreesKelvinPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromDegreesKelvinPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromHectodegreesCelsiusPerSecond(QuantityValue)" />
            public TemperatureChangeRate HectodegreesCelsiusPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromHectodegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromHectodegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromKilodegreesCelsiusPerSecond(QuantityValue)" />
            public TemperatureChangeRate KilodegreesCelsiusPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromKilodegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromKilodegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromMicrodegreesCelsiusPerSecond(QuantityValue)" />
            public TemperatureChangeRate MicrodegreesCelsiusPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromMicrodegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromMicrodegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromMillidegreesCelsiusPerSecond(QuantityValue)" />
            public TemperatureChangeRate MillidegreesCelsiusPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromMillidegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromMillidegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="TemperatureChangeRate.FromNanodegreesCelsiusPerSecond(QuantityValue)" />
            public TemperatureChangeRate NanodegreesCelsiusPerSecond
#if NET7_0_OR_GREATER
                => TemperatureChangeRate.FromNanodegreesCelsiusPerSecond(QuantityValue.CreateChecked(value));
#else
                => TemperatureChangeRate.FromNanodegreesCelsiusPerSecond(value.ToQuantityValue());
#endif

        }
    }
}
