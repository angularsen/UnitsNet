//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToElectricPotentialChangeRate
{
    /// <summary>
    /// A number to ElectricPotentialChangeRate Extensions
    /// </summary>
    public static class NumberToElectricPotentialChangeRateExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="ElectricPotentialChangeRate.FromKilovoltsPerHour(QuantityValue)" />
            public ElectricPotentialChangeRate KilovoltsPerHour
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromKilovoltsPerHour(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromKilovoltsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromKilovoltsPerMicrosecond(QuantityValue)" />
            public ElectricPotentialChangeRate KilovoltsPerMicrosecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromKilovoltsPerMicrosecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromKilovoltsPerMicrosecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromKilovoltsPerMinute(QuantityValue)" />
            public ElectricPotentialChangeRate KilovoltsPerMinute
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromKilovoltsPerMinute(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromKilovoltsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromKilovoltsPerSecond(QuantityValue)" />
            public ElectricPotentialChangeRate KilovoltsPerSecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromKilovoltsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromKilovoltsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMegavoltsPerHour(QuantityValue)" />
            public ElectricPotentialChangeRate MegavoltsPerHour
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMegavoltsPerHour(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMegavoltsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMegavoltsPerMicrosecond(QuantityValue)" />
            public ElectricPotentialChangeRate MegavoltsPerMicrosecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMegavoltsPerMicrosecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMegavoltsPerMicrosecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMegavoltsPerMinute(QuantityValue)" />
            public ElectricPotentialChangeRate MegavoltsPerMinute
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMegavoltsPerMinute(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMegavoltsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMegavoltsPerSecond(QuantityValue)" />
            public ElectricPotentialChangeRate MegavoltsPerSecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMegavoltsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMegavoltsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMicrovoltsPerHour(QuantityValue)" />
            public ElectricPotentialChangeRate MicrovoltsPerHour
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMicrovoltsPerHour(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMicrovoltsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMicrovoltsPerMicrosecond(QuantityValue)" />
            public ElectricPotentialChangeRate MicrovoltsPerMicrosecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMicrovoltsPerMicrosecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMicrovoltsPerMicrosecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMicrovoltsPerMinute(QuantityValue)" />
            public ElectricPotentialChangeRate MicrovoltsPerMinute
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMicrovoltsPerMinute(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMicrovoltsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMicrovoltsPerSecond(QuantityValue)" />
            public ElectricPotentialChangeRate MicrovoltsPerSecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMicrovoltsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMicrovoltsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMillivoltsPerHour(QuantityValue)" />
            public ElectricPotentialChangeRate MillivoltsPerHour
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMillivoltsPerHour(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMillivoltsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMillivoltsPerMicrosecond(QuantityValue)" />
            public ElectricPotentialChangeRate MillivoltsPerMicrosecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMillivoltsPerMicrosecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMillivoltsPerMicrosecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMillivoltsPerMinute(QuantityValue)" />
            public ElectricPotentialChangeRate MillivoltsPerMinute
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMillivoltsPerMinute(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMillivoltsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromMillivoltsPerSecond(QuantityValue)" />
            public ElectricPotentialChangeRate MillivoltsPerSecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromMillivoltsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromMillivoltsPerSecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromVoltsPerHour(QuantityValue)" />
            public ElectricPotentialChangeRate VoltsPerHour
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromVoltsPerHour(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromVoltsPerHour(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromVoltsPerMicrosecond(QuantityValue)" />
            public ElectricPotentialChangeRate VoltsPerMicrosecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromVoltsPerMicrosecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromVoltsPerMicrosecond(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromVoltsPerMinute(QuantityValue)" />
            public ElectricPotentialChangeRate VoltsPerMinute
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromVoltsPerMinute(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromVoltsPerMinute(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="ElectricPotentialChangeRate.FromVoltsPerSecond(QuantityValue)" />
            public ElectricPotentialChangeRate VoltsPerSecond
#if NET7_0_OR_GREATER
                => ElectricPotentialChangeRate.FromVoltsPerSecond(QuantityValue.CreateChecked(value));
#else
                => ElectricPotentialChangeRate.FromVoltsPerSecond(value.ToQuantityValue());
#endif

        }
    }
}
