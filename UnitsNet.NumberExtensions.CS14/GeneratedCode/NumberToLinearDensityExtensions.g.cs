//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;

#if NET7_0_OR_GREATER
using System.Numerics;
#endif

#nullable enable

namespace UnitsNet.NumberExtensions.NumberToLinearDensity
{
    /// <summary>
    /// A number to LinearDensity Extensions
    /// </summary>
    public static class NumberToLinearDensityExtensions
    {
#pragma warning disable CS1591
        extension<T>(T value)
#pragma warning restore CS1591
            where T : notnull
#if NET7_0_OR_GREATER
            , INumber<T>
#else
            , IConvertible
#endif
        {
            /// <inheritdoc cref="LinearDensity.FromGramsPerCentimeter(QuantityValue)" />
            public LinearDensity GramsPerCentimeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromGramsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromGramsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromGramsPerFoot(QuantityValue)" />
            public LinearDensity GramsPerFoot
#if NET7_0_OR_GREATER
                => LinearDensity.FromGramsPerFoot(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromGramsPerFoot(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromGramsPerMeter(QuantityValue)" />
            public LinearDensity GramsPerMeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromGramsPerMeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromGramsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromGramsPerMillimeter(QuantityValue)" />
            public LinearDensity GramsPerMillimeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromGramsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromGramsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromKilogramsPerCentimeter(QuantityValue)" />
            public LinearDensity KilogramsPerCentimeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromKilogramsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromKilogramsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromKilogramsPerFoot(QuantityValue)" />
            public LinearDensity KilogramsPerFoot
#if NET7_0_OR_GREATER
                => LinearDensity.FromKilogramsPerFoot(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromKilogramsPerFoot(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromKilogramsPerMeter(QuantityValue)" />
            public LinearDensity KilogramsPerMeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromKilogramsPerMeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromKilogramsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromKilogramsPerMillimeter(QuantityValue)" />
            public LinearDensity KilogramsPerMillimeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromKilogramsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromKilogramsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromMicrogramsPerCentimeter(QuantityValue)" />
            public LinearDensity MicrogramsPerCentimeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromMicrogramsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromMicrogramsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromMicrogramsPerFoot(QuantityValue)" />
            public LinearDensity MicrogramsPerFoot
#if NET7_0_OR_GREATER
                => LinearDensity.FromMicrogramsPerFoot(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromMicrogramsPerFoot(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromMicrogramsPerMeter(QuantityValue)" />
            public LinearDensity MicrogramsPerMeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromMicrogramsPerMeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromMicrogramsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromMicrogramsPerMillimeter(QuantityValue)" />
            public LinearDensity MicrogramsPerMillimeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromMicrogramsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromMicrogramsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromMilligramsPerCentimeter(QuantityValue)" />
            public LinearDensity MilligramsPerCentimeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromMilligramsPerCentimeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromMilligramsPerCentimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromMilligramsPerFoot(QuantityValue)" />
            public LinearDensity MilligramsPerFoot
#if NET7_0_OR_GREATER
                => LinearDensity.FromMilligramsPerFoot(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromMilligramsPerFoot(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromMilligramsPerMeter(QuantityValue)" />
            public LinearDensity MilligramsPerMeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromMilligramsPerMeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromMilligramsPerMeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromMilligramsPerMillimeter(QuantityValue)" />
            public LinearDensity MilligramsPerMillimeter
#if NET7_0_OR_GREATER
                => LinearDensity.FromMilligramsPerMillimeter(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromMilligramsPerMillimeter(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromPoundsPerFoot(QuantityValue)" />
            public LinearDensity PoundsPerFoot
#if NET7_0_OR_GREATER
                => LinearDensity.FromPoundsPerFoot(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromPoundsPerFoot(value.ToQuantityValue());
#endif

            /// <inheritdoc cref="LinearDensity.FromPoundsPerInch(QuantityValue)" />
            public LinearDensity PoundsPerInch
#if NET7_0_OR_GREATER
                => LinearDensity.FromPoundsPerInch(QuantityValue.CreateChecked(value));
#else
                => LinearDensity.FromPoundsPerInch(value.ToQuantityValue());
#endif

        }
    }
}
