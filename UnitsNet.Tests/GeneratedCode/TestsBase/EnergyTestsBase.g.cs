//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Energy.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class EnergyTestsBase : QuantityTestsBase
    {
        protected abstract double BritishThermalUnitsInOneJoule { get; }
        protected abstract double CaloriesInOneJoule { get; }
        protected abstract double DecathermsEcInOneJoule { get; }
        protected abstract double DecathermsImperialInOneJoule { get; }
        protected abstract double DecathermsUsInOneJoule { get; }
        protected abstract double ElectronVoltsInOneJoule { get; }
        protected abstract double ErgsInOneJoule { get; }
        protected abstract double FootPoundsInOneJoule { get; }
        protected abstract double GigabritishThermalUnitsInOneJoule { get; }
        protected abstract double GigaelectronVoltsInOneJoule { get; }
        protected abstract double GigajoulesInOneJoule { get; }
        protected abstract double GigawattDaysInOneJoule { get; }
        protected abstract double GigawattHoursInOneJoule { get; }
        protected abstract double HorsepowerHoursInOneJoule { get; }
        protected abstract double JoulesInOneJoule { get; }
        protected abstract double KilobritishThermalUnitsInOneJoule { get; }
        protected abstract double KilocaloriesInOneJoule { get; }
        protected abstract double KiloelectronVoltsInOneJoule { get; }
        protected abstract double KilojoulesInOneJoule { get; }
        protected abstract double KilowattDaysInOneJoule { get; }
        protected abstract double KilowattHoursInOneJoule { get; }
        protected abstract double MegabritishThermalUnitsInOneJoule { get; }
        protected abstract double MegacaloriesInOneJoule { get; }
        protected abstract double MegaelectronVoltsInOneJoule { get; }
        protected abstract double MegajoulesInOneJoule { get; }
        protected abstract double MegawattDaysInOneJoule { get; }
        protected abstract double MegawattHoursInOneJoule { get; }
        protected abstract double MicrojoulesInOneJoule { get; }
        protected abstract double MillijoulesInOneJoule { get; }
        protected abstract double NanojoulesInOneJoule { get; }
        protected abstract double PetajoulesInOneJoule { get; }
        protected abstract double TeraelectronVoltsInOneJoule { get; }
        protected abstract double TerajoulesInOneJoule { get; }
        protected abstract double TerawattDaysInOneJoule { get; }
        protected abstract double TerawattHoursInOneJoule { get; }
        protected abstract double ThermsEcInOneJoule { get; }
        protected abstract double ThermsImperialInOneJoule { get; }
        protected abstract double ThermsUsInOneJoule { get; }
        protected abstract double WattDaysInOneJoule { get; }
        protected abstract double WattHoursInOneJoule { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double CaloriesTolerance { get { return 1e-5; } }
        protected virtual double DecathermsEcTolerance { get { return 1e-5; } }
        protected virtual double DecathermsImperialTolerance { get { return 1e-5; } }
        protected virtual double DecathermsUsTolerance { get { return 1e-5; } }
        protected virtual double ElectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double ErgsTolerance { get { return 1e-5; } }
        protected virtual double FootPoundsTolerance { get { return 1e-5; } }
        protected virtual double GigabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double GigaelectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double GigajoulesTolerance { get { return 1e-5; } }
        protected virtual double GigawattDaysTolerance { get { return 1e-5; } }
        protected virtual double GigawattHoursTolerance { get { return 1e-5; } }
        protected virtual double HorsepowerHoursTolerance { get { return 1e-5; } }
        protected virtual double JoulesTolerance { get { return 1e-5; } }
        protected virtual double KilobritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double KilocaloriesTolerance { get { return 1e-5; } }
        protected virtual double KiloelectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesTolerance { get { return 1e-5; } }
        protected virtual double KilowattDaysTolerance { get { return 1e-5; } }
        protected virtual double KilowattHoursTolerance { get { return 1e-5; } }
        protected virtual double MegabritishThermalUnitsTolerance { get { return 1e-5; } }
        protected virtual double MegacaloriesTolerance { get { return 1e-5; } }
        protected virtual double MegaelectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesTolerance { get { return 1e-5; } }
        protected virtual double MegawattDaysTolerance { get { return 1e-5; } }
        protected virtual double MegawattHoursTolerance { get { return 1e-5; } }
        protected virtual double MicrojoulesTolerance { get { return 1e-5; } }
        protected virtual double MillijoulesTolerance { get { return 1e-5; } }
        protected virtual double NanojoulesTolerance { get { return 1e-5; } }
        protected virtual double PetajoulesTolerance { get { return 1e-5; } }
        protected virtual double TeraelectronVoltsTolerance { get { return 1e-5; } }
        protected virtual double TerajoulesTolerance { get { return 1e-5; } }
        protected virtual double TerawattDaysTolerance { get { return 1e-5; } }
        protected virtual double TerawattHoursTolerance { get { return 1e-5; } }
        protected virtual double ThermsEcTolerance { get { return 1e-5; } }
        protected virtual double ThermsImperialTolerance { get { return 1e-5; } }
        protected virtual double ThermsUsTolerance { get { return 1e-5; } }
        protected virtual double WattDaysTolerance { get { return 1e-5; } }
        protected virtual double WattHoursTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(EnergyUnit unit)
        {
            return unit switch
            {
                EnergyUnit.BritishThermalUnit => (BritishThermalUnitsInOneJoule, BritishThermalUnitsTolerance),
                EnergyUnit.Calorie => (CaloriesInOneJoule, CaloriesTolerance),
                EnergyUnit.DecathermEc => (DecathermsEcInOneJoule, DecathermsEcTolerance),
                EnergyUnit.DecathermImperial => (DecathermsImperialInOneJoule, DecathermsImperialTolerance),
                EnergyUnit.DecathermUs => (DecathermsUsInOneJoule, DecathermsUsTolerance),
                EnergyUnit.ElectronVolt => (ElectronVoltsInOneJoule, ElectronVoltsTolerance),
                EnergyUnit.Erg => (ErgsInOneJoule, ErgsTolerance),
                EnergyUnit.FootPound => (FootPoundsInOneJoule, FootPoundsTolerance),
                EnergyUnit.GigabritishThermalUnit => (GigabritishThermalUnitsInOneJoule, GigabritishThermalUnitsTolerance),
                EnergyUnit.GigaelectronVolt => (GigaelectronVoltsInOneJoule, GigaelectronVoltsTolerance),
                EnergyUnit.Gigajoule => (GigajoulesInOneJoule, GigajoulesTolerance),
                EnergyUnit.GigawattDay => (GigawattDaysInOneJoule, GigawattDaysTolerance),
                EnergyUnit.GigawattHour => (GigawattHoursInOneJoule, GigawattHoursTolerance),
                EnergyUnit.HorsepowerHour => (HorsepowerHoursInOneJoule, HorsepowerHoursTolerance),
                EnergyUnit.Joule => (JoulesInOneJoule, JoulesTolerance),
                EnergyUnit.KilobritishThermalUnit => (KilobritishThermalUnitsInOneJoule, KilobritishThermalUnitsTolerance),
                EnergyUnit.Kilocalorie => (KilocaloriesInOneJoule, KilocaloriesTolerance),
                EnergyUnit.KiloelectronVolt => (KiloelectronVoltsInOneJoule, KiloelectronVoltsTolerance),
                EnergyUnit.Kilojoule => (KilojoulesInOneJoule, KilojoulesTolerance),
                EnergyUnit.KilowattDay => (KilowattDaysInOneJoule, KilowattDaysTolerance),
                EnergyUnit.KilowattHour => (KilowattHoursInOneJoule, KilowattHoursTolerance),
                EnergyUnit.MegabritishThermalUnit => (MegabritishThermalUnitsInOneJoule, MegabritishThermalUnitsTolerance),
                EnergyUnit.Megacalorie => (MegacaloriesInOneJoule, MegacaloriesTolerance),
                EnergyUnit.MegaelectronVolt => (MegaelectronVoltsInOneJoule, MegaelectronVoltsTolerance),
                EnergyUnit.Megajoule => (MegajoulesInOneJoule, MegajoulesTolerance),
                EnergyUnit.MegawattDay => (MegawattDaysInOneJoule, MegawattDaysTolerance),
                EnergyUnit.MegawattHour => (MegawattHoursInOneJoule, MegawattHoursTolerance),
                EnergyUnit.Microjoule => (MicrojoulesInOneJoule, MicrojoulesTolerance),
                EnergyUnit.Millijoule => (MillijoulesInOneJoule, MillijoulesTolerance),
                EnergyUnit.Nanojoule => (NanojoulesInOneJoule, NanojoulesTolerance),
                EnergyUnit.Petajoule => (PetajoulesInOneJoule, PetajoulesTolerance),
                EnergyUnit.TeraelectronVolt => (TeraelectronVoltsInOneJoule, TeraelectronVoltsTolerance),
                EnergyUnit.Terajoule => (TerajoulesInOneJoule, TerajoulesTolerance),
                EnergyUnit.TerawattDay => (TerawattDaysInOneJoule, TerawattDaysTolerance),
                EnergyUnit.TerawattHour => (TerawattHoursInOneJoule, TerawattHoursTolerance),
                EnergyUnit.ThermEc => (ThermsEcInOneJoule, ThermsEcTolerance),
                EnergyUnit.ThermImperial => (ThermsImperialInOneJoule, ThermsImperialTolerance),
                EnergyUnit.ThermUs => (ThermsUsInOneJoule, ThermsUsTolerance),
                EnergyUnit.WattDay => (WattDaysInOneJoule, WattDaysTolerance),
                EnergyUnit.WattHour => (WattHoursInOneJoule, WattHoursTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { EnergyUnit.BritishThermalUnit },
            new object[] { EnergyUnit.Calorie },
            new object[] { EnergyUnit.DecathermEc },
            new object[] { EnergyUnit.DecathermImperial },
            new object[] { EnergyUnit.DecathermUs },
            new object[] { EnergyUnit.ElectronVolt },
            new object[] { EnergyUnit.Erg },
            new object[] { EnergyUnit.FootPound },
            new object[] { EnergyUnit.GigabritishThermalUnit },
            new object[] { EnergyUnit.GigaelectronVolt },
            new object[] { EnergyUnit.Gigajoule },
            new object[] { EnergyUnit.GigawattDay },
            new object[] { EnergyUnit.GigawattHour },
            new object[] { EnergyUnit.HorsepowerHour },
            new object[] { EnergyUnit.Joule },
            new object[] { EnergyUnit.KilobritishThermalUnit },
            new object[] { EnergyUnit.Kilocalorie },
            new object[] { EnergyUnit.KiloelectronVolt },
            new object[] { EnergyUnit.Kilojoule },
            new object[] { EnergyUnit.KilowattDay },
            new object[] { EnergyUnit.KilowattHour },
            new object[] { EnergyUnit.MegabritishThermalUnit },
            new object[] { EnergyUnit.Megacalorie },
            new object[] { EnergyUnit.MegaelectronVolt },
            new object[] { EnergyUnit.Megajoule },
            new object[] { EnergyUnit.MegawattDay },
            new object[] { EnergyUnit.MegawattHour },
            new object[] { EnergyUnit.Microjoule },
            new object[] { EnergyUnit.Millijoule },
            new object[] { EnergyUnit.Nanojoule },
            new object[] { EnergyUnit.Petajoule },
            new object[] { EnergyUnit.TeraelectronVolt },
            new object[] { EnergyUnit.Terajoule },
            new object[] { EnergyUnit.TerawattDay },
            new object[] { EnergyUnit.TerawattHour },
            new object[] { EnergyUnit.ThermEc },
            new object[] { EnergyUnit.ThermImperial },
            new object[] { EnergyUnit.ThermUs },
            new object[] { EnergyUnit.WattDay },
            new object[] { EnergyUnit.WattHour },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Energy();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(EnergyUnit.Joule, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Energy(double.PositiveInfinity, EnergyUnit.Joule));
            var exception2 = Record.Exception(() => new Energy(double.NegativeInfinity, EnergyUnit.Joule));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Energy(double.NaN, EnergyUnit.Joule));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Energy(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Energy(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Energy(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Energy_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            EnergyUnit[] unitsOrderedByName = EnumHelper.GetValues<EnergyUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new Energy(1, EnergyUnit.Joule);

            QuantityInfo<Energy, EnergyUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Energy", quantityInfo.Name);
            Assert.Equal(Energy.Zero, quantityInfo.Zero);
            Assert.Equal(Energy.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Energy.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<EnergyUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void EnergyInfo_CreateWithCustomUnitInfos()
        {
            EnergyUnit[] expectedUnits = [EnergyUnit.Joule];

            Energy.EnergyInfo quantityInfo = Energy.EnergyInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Energy", quantityInfo.Name);
            Assert.Equal(Energy.Zero, quantityInfo.Zero);
            Assert.Equal(Energy.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void JouleToEnergyUnits()
        {
            Energy joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, joule.BritishThermalUnits, BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(CaloriesInOneJoule, joule.Calories, CaloriesTolerance);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, joule.DecathermsEc, DecathermsEcTolerance);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, joule.DecathermsImperial, DecathermsImperialTolerance);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, joule.DecathermsUs, DecathermsUsTolerance);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, joule.ElectronVolts, ElectronVoltsTolerance);
            AssertEx.EqualTolerance(ErgsInOneJoule, joule.Ergs, ErgsTolerance);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, joule.FootPounds, FootPoundsTolerance);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, joule.GigabritishThermalUnits, GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(GigaelectronVoltsInOneJoule, joule.GigaelectronVolts, GigaelectronVoltsTolerance);
            AssertEx.EqualTolerance(GigajoulesInOneJoule, joule.Gigajoules, GigajoulesTolerance);
            AssertEx.EqualTolerance(GigawattDaysInOneJoule, joule.GigawattDays, GigawattDaysTolerance);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, joule.GigawattHours, GigawattHoursTolerance);
            AssertEx.EqualTolerance(HorsepowerHoursInOneJoule, joule.HorsepowerHours, HorsepowerHoursTolerance);
            AssertEx.EqualTolerance(JoulesInOneJoule, joule.Joules, JoulesTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, joule.KilobritishThermalUnits, KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, joule.Kilocalories, KilocaloriesTolerance);
            AssertEx.EqualTolerance(KiloelectronVoltsInOneJoule, joule.KiloelectronVolts, KiloelectronVoltsTolerance);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, joule.Kilojoules, KilojoulesTolerance);
            AssertEx.EqualTolerance(KilowattDaysInOneJoule, joule.KilowattDays, KilowattDaysTolerance);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, joule.KilowattHours, KilowattHoursTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, joule.MegabritishThermalUnits, MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(MegacaloriesInOneJoule, joule.Megacalories, MegacaloriesTolerance);
            AssertEx.EqualTolerance(MegaelectronVoltsInOneJoule, joule.MegaelectronVolts, MegaelectronVoltsTolerance);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, joule.Megajoules, MegajoulesTolerance);
            AssertEx.EqualTolerance(MegawattDaysInOneJoule, joule.MegawattDays, MegawattDaysTolerance);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, joule.MegawattHours, MegawattHoursTolerance);
            AssertEx.EqualTolerance(MicrojoulesInOneJoule, joule.Microjoules, MicrojoulesTolerance);
            AssertEx.EqualTolerance(MillijoulesInOneJoule, joule.Millijoules, MillijoulesTolerance);
            AssertEx.EqualTolerance(NanojoulesInOneJoule, joule.Nanojoules, NanojoulesTolerance);
            AssertEx.EqualTolerance(PetajoulesInOneJoule, joule.Petajoules, PetajoulesTolerance);
            AssertEx.EqualTolerance(TeraelectronVoltsInOneJoule, joule.TeraelectronVolts, TeraelectronVoltsTolerance);
            AssertEx.EqualTolerance(TerajoulesInOneJoule, joule.Terajoules, TerajoulesTolerance);
            AssertEx.EqualTolerance(TerawattDaysInOneJoule, joule.TerawattDays, TerawattDaysTolerance);
            AssertEx.EqualTolerance(TerawattHoursInOneJoule, joule.TerawattHours, TerawattHoursTolerance);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, joule.ThermsEc, ThermsEcTolerance);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, joule.ThermsImperial, ThermsImperialTolerance);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, joule.ThermsUs, ThermsUsTolerance);
            AssertEx.EqualTolerance(WattDaysInOneJoule, joule.WattDays, WattDaysTolerance);
            AssertEx.EqualTolerance(WattHoursInOneJoule, joule.WattHours, WattHoursTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<EnergyUnit>(), unit =>
            {
                var quantity = Energy.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromJoules_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Energy.FromJoules(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Energy.FromJoules(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromJoules_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Energy.FromJoules(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var joule = Energy.FromJoules(1);
            AssertEx.EqualTolerance(BritishThermalUnitsInOneJoule, joule.As(EnergyUnit.BritishThermalUnit), BritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(CaloriesInOneJoule, joule.As(EnergyUnit.Calorie), CaloriesTolerance);
            AssertEx.EqualTolerance(DecathermsEcInOneJoule, joule.As(EnergyUnit.DecathermEc), DecathermsEcTolerance);
            AssertEx.EqualTolerance(DecathermsImperialInOneJoule, joule.As(EnergyUnit.DecathermImperial), DecathermsImperialTolerance);
            AssertEx.EqualTolerance(DecathermsUsInOneJoule, joule.As(EnergyUnit.DecathermUs), DecathermsUsTolerance);
            AssertEx.EqualTolerance(ElectronVoltsInOneJoule, joule.As(EnergyUnit.ElectronVolt), ElectronVoltsTolerance);
            AssertEx.EqualTolerance(ErgsInOneJoule, joule.As(EnergyUnit.Erg), ErgsTolerance);
            AssertEx.EqualTolerance(FootPoundsInOneJoule, joule.As(EnergyUnit.FootPound), FootPoundsTolerance);
            AssertEx.EqualTolerance(GigabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.GigabritishThermalUnit), GigabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(GigaelectronVoltsInOneJoule, joule.As(EnergyUnit.GigaelectronVolt), GigaelectronVoltsTolerance);
            AssertEx.EqualTolerance(GigajoulesInOneJoule, joule.As(EnergyUnit.Gigajoule), GigajoulesTolerance);
            AssertEx.EqualTolerance(GigawattDaysInOneJoule, joule.As(EnergyUnit.GigawattDay), GigawattDaysTolerance);
            AssertEx.EqualTolerance(GigawattHoursInOneJoule, joule.As(EnergyUnit.GigawattHour), GigawattHoursTolerance);
            AssertEx.EqualTolerance(HorsepowerHoursInOneJoule, joule.As(EnergyUnit.HorsepowerHour), HorsepowerHoursTolerance);
            AssertEx.EqualTolerance(JoulesInOneJoule, joule.As(EnergyUnit.Joule), JoulesTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsInOneJoule, joule.As(EnergyUnit.KilobritishThermalUnit), KilobritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(KilocaloriesInOneJoule, joule.As(EnergyUnit.Kilocalorie), KilocaloriesTolerance);
            AssertEx.EqualTolerance(KiloelectronVoltsInOneJoule, joule.As(EnergyUnit.KiloelectronVolt), KiloelectronVoltsTolerance);
            AssertEx.EqualTolerance(KilojoulesInOneJoule, joule.As(EnergyUnit.Kilojoule), KilojoulesTolerance);
            AssertEx.EqualTolerance(KilowattDaysInOneJoule, joule.As(EnergyUnit.KilowattDay), KilowattDaysTolerance);
            AssertEx.EqualTolerance(KilowattHoursInOneJoule, joule.As(EnergyUnit.KilowattHour), KilowattHoursTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsInOneJoule, joule.As(EnergyUnit.MegabritishThermalUnit), MegabritishThermalUnitsTolerance);
            AssertEx.EqualTolerance(MegacaloriesInOneJoule, joule.As(EnergyUnit.Megacalorie), MegacaloriesTolerance);
            AssertEx.EqualTolerance(MegaelectronVoltsInOneJoule, joule.As(EnergyUnit.MegaelectronVolt), MegaelectronVoltsTolerance);
            AssertEx.EqualTolerance(MegajoulesInOneJoule, joule.As(EnergyUnit.Megajoule), MegajoulesTolerance);
            AssertEx.EqualTolerance(MegawattDaysInOneJoule, joule.As(EnergyUnit.MegawattDay), MegawattDaysTolerance);
            AssertEx.EqualTolerance(MegawattHoursInOneJoule, joule.As(EnergyUnit.MegawattHour), MegawattHoursTolerance);
            AssertEx.EqualTolerance(MicrojoulesInOneJoule, joule.As(EnergyUnit.Microjoule), MicrojoulesTolerance);
            AssertEx.EqualTolerance(MillijoulesInOneJoule, joule.As(EnergyUnit.Millijoule), MillijoulesTolerance);
            AssertEx.EqualTolerance(NanojoulesInOneJoule, joule.As(EnergyUnit.Nanojoule), NanojoulesTolerance);
            AssertEx.EqualTolerance(PetajoulesInOneJoule, joule.As(EnergyUnit.Petajoule), PetajoulesTolerance);
            AssertEx.EqualTolerance(TeraelectronVoltsInOneJoule, joule.As(EnergyUnit.TeraelectronVolt), TeraelectronVoltsTolerance);
            AssertEx.EqualTolerance(TerajoulesInOneJoule, joule.As(EnergyUnit.Terajoule), TerajoulesTolerance);
            AssertEx.EqualTolerance(TerawattDaysInOneJoule, joule.As(EnergyUnit.TerawattDay), TerawattDaysTolerance);
            AssertEx.EqualTolerance(TerawattHoursInOneJoule, joule.As(EnergyUnit.TerawattHour), TerawattHoursTolerance);
            AssertEx.EqualTolerance(ThermsEcInOneJoule, joule.As(EnergyUnit.ThermEc), ThermsEcTolerance);
            AssertEx.EqualTolerance(ThermsImperialInOneJoule, joule.As(EnergyUnit.ThermImperial), ThermsImperialTolerance);
            AssertEx.EqualTolerance(ThermsUsInOneJoule, joule.As(EnergyUnit.ThermUs), ThermsUsTolerance);
            AssertEx.EqualTolerance(WattDaysInOneJoule, joule.As(EnergyUnit.WattDay), WattDaysTolerance);
            AssertEx.EqualTolerance(WattHoursInOneJoule, joule.As(EnergyUnit.WattHour), WattHoursTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Energy.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Energy(value: 1, unit: Energy.BaseUnit);
            var expectedValue = quantity.As(Energy.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Energy(value: 1, unit: Energy.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Energy(value: 1, unit: Energy.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Energy(value: 1, unit: Energy.BaseUnit);
            var expectedUnit = Energy.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Energy quantityToConvert = quantity;

                Energy convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<EnergyUnit> quantityToConvert = quantity;

                IQuantity<EnergyUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Energy(value: 1, unit: Energy.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<EnergyUnit> quantity = new Energy(value: 1, unit: Energy.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Energy(value: 1, unit: Energy.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Energy(value: 1, unit: Energy.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<EnergyUnit> quantity = new Energy(value: 1, unit: Energy.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Energy(value: 1, unit: Energy.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 BTU", EnergyUnit.BritishThermalUnit, 4.2)]
        [InlineData("en-US", "4.2 cal", EnergyUnit.Calorie, 4.2)]
        [InlineData("en-US", "4.2 Dth (E.C.)", EnergyUnit.DecathermEc, 4.2)]
        [InlineData("en-US", "4.2 Dth (imp.)", EnergyUnit.DecathermImperial, 4.2)]
        [InlineData("en-US", "4.2 Dth (U.S.)", EnergyUnit.DecathermUs, 4.2)]
        [InlineData("en-US", "4.2 eV", EnergyUnit.ElectronVolt, 4.2)]
        [InlineData("en-US", "4.2 erg", EnergyUnit.Erg, 4.2)]
        [InlineData("en-US", "4.2 ft·lb", EnergyUnit.FootPound, 4.2)]
        [InlineData("en-US", "4.2 GBTU", EnergyUnit.GigabritishThermalUnit, 4.2)]
        [InlineData("en-US", "4.2 GeV", EnergyUnit.GigaelectronVolt, 4.2)]
        [InlineData("en-US", "4.2 GJ", EnergyUnit.Gigajoule, 4.2)]
        [InlineData("en-US", "4.2 GWd", EnergyUnit.GigawattDay, 4.2)]
        [InlineData("en-US", "4.2 GWh", EnergyUnit.GigawattHour, 4.2)]
        [InlineData("en-US", "4.2 hp·h", EnergyUnit.HorsepowerHour, 4.2)]
        [InlineData("en-US", "4.2 J", EnergyUnit.Joule, 4.2)]
        [InlineData("en-US", "4.2 kBTU", EnergyUnit.KilobritishThermalUnit, 4.2)]
        [InlineData("en-US", "4.2 kcal", EnergyUnit.Kilocalorie, 4.2)]
        [InlineData("en-US", "4.2 keV", EnergyUnit.KiloelectronVolt, 4.2)]
        [InlineData("en-US", "4.2 kJ", EnergyUnit.Kilojoule, 4.2)]
        [InlineData("en-US", "4.2 kWd", EnergyUnit.KilowattDay, 4.2)]
        [InlineData("en-US", "4.2 kWh", EnergyUnit.KilowattHour, 4.2)]
        [InlineData("en-US", "4.2 MBTU", EnergyUnit.MegabritishThermalUnit, 4.2)]
        [InlineData("en-US", "4.2 Mcal", EnergyUnit.Megacalorie, 4.2)]
        [InlineData("en-US", "4.2 MeV", EnergyUnit.MegaelectronVolt, 4.2)]
        [InlineData("en-US", "4.2 MJ", EnergyUnit.Megajoule, 4.2)]
        [InlineData("en-US", "4.2 MWd", EnergyUnit.MegawattDay, 4.2)]
        [InlineData("en-US", "4.2 MWh", EnergyUnit.MegawattHour, 4.2)]
        [InlineData("en-US", "4.2 µJ", EnergyUnit.Microjoule, 4.2)]
        [InlineData("en-US", "4.2 mJ", EnergyUnit.Millijoule, 4.2)]
        [InlineData("en-US", "4.2 nJ", EnergyUnit.Nanojoule, 4.2)]
        [InlineData("en-US", "4.2 PJ", EnergyUnit.Petajoule, 4.2)]
        [InlineData("en-US", "4.2 TeV", EnergyUnit.TeraelectronVolt, 4.2)]
        [InlineData("en-US", "4.2 TJ", EnergyUnit.Terajoule, 4.2)]
        [InlineData("en-US", "4.2 TWd", EnergyUnit.TerawattDay, 4.2)]
        [InlineData("en-US", "4.2 TWh", EnergyUnit.TerawattHour, 4.2)]
        [InlineData("en-US", "4.2 th (E.C.)", EnergyUnit.ThermEc, 4.2)]
        [InlineData("en-US", "4.2 th (imp.)", EnergyUnit.ThermImperial, 4.2)]
        [InlineData("en-US", "4.2 th (U.S.)", EnergyUnit.ThermUs, 4.2)]
        [InlineData("en-US", "4.2 Wd", EnergyUnit.WattDay, 4.2)]
        [InlineData("en-US", "4.2 Wh", EnergyUnit.WattHour, 4.2)]
        [InlineData("ru-RU", "4,2 Европейский декатерм", EnergyUnit.DecathermEc, 4.2)]
        [InlineData("ru-RU", "4,2 Английский декатерм", EnergyUnit.DecathermImperial, 4.2)]
        [InlineData("ru-RU", "4,2 Американский декатерм", EnergyUnit.DecathermUs, 4.2)]
        [InlineData("ru-RU", "4,2 эВ", EnergyUnit.ElectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 ГэВ", EnergyUnit.GigaelectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 ГВт/д", EnergyUnit.GigawattDay, 4.2)]
        [InlineData("ru-RU", "4,2 ГВт/ч", EnergyUnit.GigawattHour, 4.2)]
        [InlineData("ru-RU", "4,2 кэВ", EnergyUnit.KiloelectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 кВт/д", EnergyUnit.KilowattDay, 4.2)]
        [InlineData("ru-RU", "4,2 кВт/ч", EnergyUnit.KilowattHour, 4.2)]
        [InlineData("ru-RU", "4,2 МэВ", EnergyUnit.MegaelectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 МВт/д", EnergyUnit.MegawattDay, 4.2)]
        [InlineData("ru-RU", "4,2 МВт/ч", EnergyUnit.MegawattHour, 4.2)]
        [InlineData("ru-RU", "4,2 ТэВ", EnergyUnit.TeraelectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 ТВт/д", EnergyUnit.TerawattDay, 4.2)]
        [InlineData("ru-RU", "4,2 ТВт/ч", EnergyUnit.TerawattHour, 4.2)]
        [InlineData("ru-RU", "4,2 Европейский терм", EnergyUnit.ThermEc, 4.2)]
        [InlineData("ru-RU", "4,2 Английский терм", EnergyUnit.ThermImperial, 4.2)]
        [InlineData("ru-RU", "4,2 Американский терм", EnergyUnit.ThermUs, 4.2)]
        [InlineData("ru-RU", "4,2 Вт/д", EnergyUnit.WattDay, 4.2)]
        [InlineData("ru-RU", "4,2 Вт/ч", EnergyUnit.WattHour, 4.2)]
        public void Parse(string culture, string quantityString, EnergyUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Energy.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 BTU", EnergyUnit.BritishThermalUnit, 4.2)]
        [InlineData("en-US", "4.2 cal", EnergyUnit.Calorie, 4.2)]
        [InlineData("en-US", "4.2 Dth (E.C.)", EnergyUnit.DecathermEc, 4.2)]
        [InlineData("en-US", "4.2 Dth (imp.)", EnergyUnit.DecathermImperial, 4.2)]
        [InlineData("en-US", "4.2 Dth (U.S.)", EnergyUnit.DecathermUs, 4.2)]
        [InlineData("en-US", "4.2 eV", EnergyUnit.ElectronVolt, 4.2)]
        [InlineData("en-US", "4.2 erg", EnergyUnit.Erg, 4.2)]
        [InlineData("en-US", "4.2 ft·lb", EnergyUnit.FootPound, 4.2)]
        [InlineData("en-US", "4.2 GBTU", EnergyUnit.GigabritishThermalUnit, 4.2)]
        [InlineData("en-US", "4.2 GeV", EnergyUnit.GigaelectronVolt, 4.2)]
        [InlineData("en-US", "4.2 GJ", EnergyUnit.Gigajoule, 4.2)]
        [InlineData("en-US", "4.2 GWd", EnergyUnit.GigawattDay, 4.2)]
        [InlineData("en-US", "4.2 GWh", EnergyUnit.GigawattHour, 4.2)]
        [InlineData("en-US", "4.2 hp·h", EnergyUnit.HorsepowerHour, 4.2)]
        [InlineData("en-US", "4.2 J", EnergyUnit.Joule, 4.2)]
        [InlineData("en-US", "4.2 kBTU", EnergyUnit.KilobritishThermalUnit, 4.2)]
        [InlineData("en-US", "4.2 kcal", EnergyUnit.Kilocalorie, 4.2)]
        [InlineData("en-US", "4.2 keV", EnergyUnit.KiloelectronVolt, 4.2)]
        [InlineData("en-US", "4.2 kJ", EnergyUnit.Kilojoule, 4.2)]
        [InlineData("en-US", "4.2 kWd", EnergyUnit.KilowattDay, 4.2)]
        [InlineData("en-US", "4.2 kWh", EnergyUnit.KilowattHour, 4.2)]
        [InlineData("en-US", "4.2 MBTU", EnergyUnit.MegabritishThermalUnit, 4.2)]
        [InlineData("en-US", "4.2 Mcal", EnergyUnit.Megacalorie, 4.2)]
        [InlineData("en-US", "4.2 MeV", EnergyUnit.MegaelectronVolt, 4.2)]
        [InlineData("en-US", "4.2 MJ", EnergyUnit.Megajoule, 4.2)]
        [InlineData("en-US", "4.2 MWd", EnergyUnit.MegawattDay, 4.2)]
        [InlineData("en-US", "4.2 MWh", EnergyUnit.MegawattHour, 4.2)]
        [InlineData("en-US", "4.2 µJ", EnergyUnit.Microjoule, 4.2)]
        [InlineData("en-US", "4.2 mJ", EnergyUnit.Millijoule, 4.2)]
        [InlineData("en-US", "4.2 nJ", EnergyUnit.Nanojoule, 4.2)]
        [InlineData("en-US", "4.2 PJ", EnergyUnit.Petajoule, 4.2)]
        [InlineData("en-US", "4.2 TeV", EnergyUnit.TeraelectronVolt, 4.2)]
        [InlineData("en-US", "4.2 TJ", EnergyUnit.Terajoule, 4.2)]
        [InlineData("en-US", "4.2 TWd", EnergyUnit.TerawattDay, 4.2)]
        [InlineData("en-US", "4.2 TWh", EnergyUnit.TerawattHour, 4.2)]
        [InlineData("en-US", "4.2 th (E.C.)", EnergyUnit.ThermEc, 4.2)]
        [InlineData("en-US", "4.2 th (imp.)", EnergyUnit.ThermImperial, 4.2)]
        [InlineData("en-US", "4.2 th (U.S.)", EnergyUnit.ThermUs, 4.2)]
        [InlineData("en-US", "4.2 Wd", EnergyUnit.WattDay, 4.2)]
        [InlineData("en-US", "4.2 Wh", EnergyUnit.WattHour, 4.2)]
        [InlineData("ru-RU", "4,2 Европейский декатерм", EnergyUnit.DecathermEc, 4.2)]
        [InlineData("ru-RU", "4,2 Английский декатерм", EnergyUnit.DecathermImperial, 4.2)]
        [InlineData("ru-RU", "4,2 Американский декатерм", EnergyUnit.DecathermUs, 4.2)]
        [InlineData("ru-RU", "4,2 эВ", EnergyUnit.ElectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 ГэВ", EnergyUnit.GigaelectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 ГВт/д", EnergyUnit.GigawattDay, 4.2)]
        [InlineData("ru-RU", "4,2 ГВт/ч", EnergyUnit.GigawattHour, 4.2)]
        [InlineData("ru-RU", "4,2 кэВ", EnergyUnit.KiloelectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 кВт/д", EnergyUnit.KilowattDay, 4.2)]
        [InlineData("ru-RU", "4,2 кВт/ч", EnergyUnit.KilowattHour, 4.2)]
        [InlineData("ru-RU", "4,2 МэВ", EnergyUnit.MegaelectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 МВт/д", EnergyUnit.MegawattDay, 4.2)]
        [InlineData("ru-RU", "4,2 МВт/ч", EnergyUnit.MegawattHour, 4.2)]
        [InlineData("ru-RU", "4,2 ТэВ", EnergyUnit.TeraelectronVolt, 4.2)]
        [InlineData("ru-RU", "4,2 ТВт/д", EnergyUnit.TerawattDay, 4.2)]
        [InlineData("ru-RU", "4,2 ТВт/ч", EnergyUnit.TerawattHour, 4.2)]
        [InlineData("ru-RU", "4,2 Европейский терм", EnergyUnit.ThermEc, 4.2)]
        [InlineData("ru-RU", "4,2 Английский терм", EnergyUnit.ThermImperial, 4.2)]
        [InlineData("ru-RU", "4,2 Американский терм", EnergyUnit.ThermUs, 4.2)]
        [InlineData("ru-RU", "4,2 Вт/д", EnergyUnit.WattDay, 4.2)]
        [InlineData("ru-RU", "4,2 Вт/ч", EnergyUnit.WattHour, 4.2)]
        public void TryParse(string culture, string quantityString, EnergyUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Energy.TryParse(quantityString, out Energy parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("BTU", EnergyUnit.BritishThermalUnit)]
        [InlineData("cal", EnergyUnit.Calorie)]
        [InlineData("Dth (E.C.)", EnergyUnit.DecathermEc)]
        [InlineData("Dth (imp.)", EnergyUnit.DecathermImperial)]
        [InlineData("Dth (U.S.)", EnergyUnit.DecathermUs)]
        [InlineData("eV", EnergyUnit.ElectronVolt)]
        [InlineData("erg", EnergyUnit.Erg)]
        [InlineData("ft·lb", EnergyUnit.FootPound)]
        [InlineData("GBTU", EnergyUnit.GigabritishThermalUnit)]
        [InlineData("GeV", EnergyUnit.GigaelectronVolt)]
        [InlineData("GJ", EnergyUnit.Gigajoule)]
        [InlineData("GWd", EnergyUnit.GigawattDay)]
        [InlineData("GWh", EnergyUnit.GigawattHour)]
        [InlineData("hp·h", EnergyUnit.HorsepowerHour)]
        [InlineData("J", EnergyUnit.Joule)]
        [InlineData("kBTU", EnergyUnit.KilobritishThermalUnit)]
        [InlineData("kcal", EnergyUnit.Kilocalorie)]
        [InlineData("keV", EnergyUnit.KiloelectronVolt)]
        [InlineData("kJ", EnergyUnit.Kilojoule)]
        [InlineData("kWd", EnergyUnit.KilowattDay)]
        [InlineData("kWh", EnergyUnit.KilowattHour)]
        [InlineData("MBTU", EnergyUnit.MegabritishThermalUnit)]
        [InlineData("Mcal", EnergyUnit.Megacalorie)]
        [InlineData("MeV", EnergyUnit.MegaelectronVolt)]
        [InlineData("MJ", EnergyUnit.Megajoule)]
        [InlineData("MWd", EnergyUnit.MegawattDay)]
        [InlineData("MWh", EnergyUnit.MegawattHour)]
        [InlineData("µJ", EnergyUnit.Microjoule)]
        [InlineData("mJ", EnergyUnit.Millijoule)]
        [InlineData("nJ", EnergyUnit.Nanojoule)]
        [InlineData("PJ", EnergyUnit.Petajoule)]
        [InlineData("TeV", EnergyUnit.TeraelectronVolt)]
        [InlineData("TJ", EnergyUnit.Terajoule)]
        [InlineData("TWd", EnergyUnit.TerawattDay)]
        [InlineData("TWh", EnergyUnit.TerawattHour)]
        [InlineData("th (E.C.)", EnergyUnit.ThermEc)]
        [InlineData("th (imp.)", EnergyUnit.ThermImperial)]
        [InlineData("th (U.S.)", EnergyUnit.ThermUs)]
        [InlineData("Wd", EnergyUnit.WattDay)]
        [InlineData("Wh", EnergyUnit.WattHour)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, EnergyUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            EnergyUnit parsedUnit = Energy.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("BTU", EnergyUnit.BritishThermalUnit)]
        [InlineData("cal", EnergyUnit.Calorie)]
        [InlineData("Dth (E.C.)", EnergyUnit.DecathermEc)]
        [InlineData("Dth (imp.)", EnergyUnit.DecathermImperial)]
        [InlineData("Dth (U.S.)", EnergyUnit.DecathermUs)]
        [InlineData("eV", EnergyUnit.ElectronVolt)]
        [InlineData("erg", EnergyUnit.Erg)]
        [InlineData("ft·lb", EnergyUnit.FootPound)]
        [InlineData("GBTU", EnergyUnit.GigabritishThermalUnit)]
        [InlineData("GeV", EnergyUnit.GigaelectronVolt)]
        [InlineData("GJ", EnergyUnit.Gigajoule)]
        [InlineData("GWd", EnergyUnit.GigawattDay)]
        [InlineData("GWh", EnergyUnit.GigawattHour)]
        [InlineData("hp·h", EnergyUnit.HorsepowerHour)]
        [InlineData("J", EnergyUnit.Joule)]
        [InlineData("kBTU", EnergyUnit.KilobritishThermalUnit)]
        [InlineData("kcal", EnergyUnit.Kilocalorie)]
        [InlineData("keV", EnergyUnit.KiloelectronVolt)]
        [InlineData("kJ", EnergyUnit.Kilojoule)]
        [InlineData("kWd", EnergyUnit.KilowattDay)]
        [InlineData("kWh", EnergyUnit.KilowattHour)]
        [InlineData("MBTU", EnergyUnit.MegabritishThermalUnit)]
        [InlineData("Mcal", EnergyUnit.Megacalorie)]
        [InlineData("MeV", EnergyUnit.MegaelectronVolt)]
        [InlineData("MJ", EnergyUnit.Megajoule)]
        [InlineData("MWd", EnergyUnit.MegawattDay)]
        [InlineData("MWh", EnergyUnit.MegawattHour)]
        [InlineData("µJ", EnergyUnit.Microjoule)]
        [InlineData("mJ", EnergyUnit.Millijoule)]
        [InlineData("nJ", EnergyUnit.Nanojoule)]
        [InlineData("PJ", EnergyUnit.Petajoule)]
        [InlineData("TeV", EnergyUnit.TeraelectronVolt)]
        [InlineData("TJ", EnergyUnit.Terajoule)]
        [InlineData("TWd", EnergyUnit.TerawattDay)]
        [InlineData("TWh", EnergyUnit.TerawattHour)]
        [InlineData("th (E.C.)", EnergyUnit.ThermEc)]
        [InlineData("th (imp.)", EnergyUnit.ThermImperial)]
        [InlineData("th (U.S.)", EnergyUnit.ThermUs)]
        [InlineData("Wd", EnergyUnit.WattDay)]
        [InlineData("Wh", EnergyUnit.WattHour)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, EnergyUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            EnergyUnit parsedUnit = Energy.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "BTU", EnergyUnit.BritishThermalUnit)]
        [InlineData("en-US", "cal", EnergyUnit.Calorie)]
        [InlineData("en-US", "Dth (E.C.)", EnergyUnit.DecathermEc)]
        [InlineData("en-US", "Dth (imp.)", EnergyUnit.DecathermImperial)]
        [InlineData("en-US", "Dth (U.S.)", EnergyUnit.DecathermUs)]
        [InlineData("en-US", "eV", EnergyUnit.ElectronVolt)]
        [InlineData("en-US", "erg", EnergyUnit.Erg)]
        [InlineData("en-US", "ft·lb", EnergyUnit.FootPound)]
        [InlineData("en-US", "GBTU", EnergyUnit.GigabritishThermalUnit)]
        [InlineData("en-US", "GeV", EnergyUnit.GigaelectronVolt)]
        [InlineData("en-US", "GJ", EnergyUnit.Gigajoule)]
        [InlineData("en-US", "GWd", EnergyUnit.GigawattDay)]
        [InlineData("en-US", "GWh", EnergyUnit.GigawattHour)]
        [InlineData("en-US", "hp·h", EnergyUnit.HorsepowerHour)]
        [InlineData("en-US", "J", EnergyUnit.Joule)]
        [InlineData("en-US", "kBTU", EnergyUnit.KilobritishThermalUnit)]
        [InlineData("en-US", "kcal", EnergyUnit.Kilocalorie)]
        [InlineData("en-US", "keV", EnergyUnit.KiloelectronVolt)]
        [InlineData("en-US", "kJ", EnergyUnit.Kilojoule)]
        [InlineData("en-US", "kWd", EnergyUnit.KilowattDay)]
        [InlineData("en-US", "kWh", EnergyUnit.KilowattHour)]
        [InlineData("en-US", "MBTU", EnergyUnit.MegabritishThermalUnit)]
        [InlineData("en-US", "Mcal", EnergyUnit.Megacalorie)]
        [InlineData("en-US", "MeV", EnergyUnit.MegaelectronVolt)]
        [InlineData("en-US", "MJ", EnergyUnit.Megajoule)]
        [InlineData("en-US", "MWd", EnergyUnit.MegawattDay)]
        [InlineData("en-US", "MWh", EnergyUnit.MegawattHour)]
        [InlineData("en-US", "µJ", EnergyUnit.Microjoule)]
        [InlineData("en-US", "mJ", EnergyUnit.Millijoule)]
        [InlineData("en-US", "nJ", EnergyUnit.Nanojoule)]
        [InlineData("en-US", "PJ", EnergyUnit.Petajoule)]
        [InlineData("en-US", "TeV", EnergyUnit.TeraelectronVolt)]
        [InlineData("en-US", "TJ", EnergyUnit.Terajoule)]
        [InlineData("en-US", "TWd", EnergyUnit.TerawattDay)]
        [InlineData("en-US", "TWh", EnergyUnit.TerawattHour)]
        [InlineData("en-US", "th (E.C.)", EnergyUnit.ThermEc)]
        [InlineData("en-US", "th (imp.)", EnergyUnit.ThermImperial)]
        [InlineData("en-US", "th (U.S.)", EnergyUnit.ThermUs)]
        [InlineData("en-US", "Wd", EnergyUnit.WattDay)]
        [InlineData("en-US", "Wh", EnergyUnit.WattHour)]
        [InlineData("ru-RU", "Европейский декатерм", EnergyUnit.DecathermEc)]
        [InlineData("ru-RU", "Английский декатерм", EnergyUnit.DecathermImperial)]
        [InlineData("ru-RU", "Американский декатерм", EnergyUnit.DecathermUs)]
        [InlineData("ru-RU", "эВ", EnergyUnit.ElectronVolt)]
        [InlineData("ru-RU", "ГэВ", EnergyUnit.GigaelectronVolt)]
        [InlineData("ru-RU", "ГВт/д", EnergyUnit.GigawattDay)]
        [InlineData("ru-RU", "ГВт/ч", EnergyUnit.GigawattHour)]
        [InlineData("ru-RU", "кэВ", EnergyUnit.KiloelectronVolt)]
        [InlineData("ru-RU", "кВт/д", EnergyUnit.KilowattDay)]
        [InlineData("ru-RU", "кВт/ч", EnergyUnit.KilowattHour)]
        [InlineData("ru-RU", "МэВ", EnergyUnit.MegaelectronVolt)]
        [InlineData("ru-RU", "МВт/д", EnergyUnit.MegawattDay)]
        [InlineData("ru-RU", "МВт/ч", EnergyUnit.MegawattHour)]
        [InlineData("ru-RU", "ТэВ", EnergyUnit.TeraelectronVolt)]
        [InlineData("ru-RU", "ТВт/д", EnergyUnit.TerawattDay)]
        [InlineData("ru-RU", "ТВт/ч", EnergyUnit.TerawattHour)]
        [InlineData("ru-RU", "Европейский терм", EnergyUnit.ThermEc)]
        [InlineData("ru-RU", "Английский терм", EnergyUnit.ThermImperial)]
        [InlineData("ru-RU", "Американский терм", EnergyUnit.ThermUs)]
        [InlineData("ru-RU", "Вт/д", EnergyUnit.WattDay)]
        [InlineData("ru-RU", "Вт/ч", EnergyUnit.WattHour)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, EnergyUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            EnergyUnit parsedUnit = Energy.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "BTU", EnergyUnit.BritishThermalUnit)]
        [InlineData("en-US", "cal", EnergyUnit.Calorie)]
        [InlineData("en-US", "Dth (E.C.)", EnergyUnit.DecathermEc)]
        [InlineData("en-US", "Dth (imp.)", EnergyUnit.DecathermImperial)]
        [InlineData("en-US", "Dth (U.S.)", EnergyUnit.DecathermUs)]
        [InlineData("en-US", "eV", EnergyUnit.ElectronVolt)]
        [InlineData("en-US", "erg", EnergyUnit.Erg)]
        [InlineData("en-US", "ft·lb", EnergyUnit.FootPound)]
        [InlineData("en-US", "GBTU", EnergyUnit.GigabritishThermalUnit)]
        [InlineData("en-US", "GeV", EnergyUnit.GigaelectronVolt)]
        [InlineData("en-US", "GJ", EnergyUnit.Gigajoule)]
        [InlineData("en-US", "GWd", EnergyUnit.GigawattDay)]
        [InlineData("en-US", "GWh", EnergyUnit.GigawattHour)]
        [InlineData("en-US", "hp·h", EnergyUnit.HorsepowerHour)]
        [InlineData("en-US", "J", EnergyUnit.Joule)]
        [InlineData("en-US", "kBTU", EnergyUnit.KilobritishThermalUnit)]
        [InlineData("en-US", "kcal", EnergyUnit.Kilocalorie)]
        [InlineData("en-US", "keV", EnergyUnit.KiloelectronVolt)]
        [InlineData("en-US", "kJ", EnergyUnit.Kilojoule)]
        [InlineData("en-US", "kWd", EnergyUnit.KilowattDay)]
        [InlineData("en-US", "kWh", EnergyUnit.KilowattHour)]
        [InlineData("en-US", "MBTU", EnergyUnit.MegabritishThermalUnit)]
        [InlineData("en-US", "Mcal", EnergyUnit.Megacalorie)]
        [InlineData("en-US", "MeV", EnergyUnit.MegaelectronVolt)]
        [InlineData("en-US", "MJ", EnergyUnit.Megajoule)]
        [InlineData("en-US", "MWd", EnergyUnit.MegawattDay)]
        [InlineData("en-US", "MWh", EnergyUnit.MegawattHour)]
        [InlineData("en-US", "µJ", EnergyUnit.Microjoule)]
        [InlineData("en-US", "mJ", EnergyUnit.Millijoule)]
        [InlineData("en-US", "nJ", EnergyUnit.Nanojoule)]
        [InlineData("en-US", "PJ", EnergyUnit.Petajoule)]
        [InlineData("en-US", "TeV", EnergyUnit.TeraelectronVolt)]
        [InlineData("en-US", "TJ", EnergyUnit.Terajoule)]
        [InlineData("en-US", "TWd", EnergyUnit.TerawattDay)]
        [InlineData("en-US", "TWh", EnergyUnit.TerawattHour)]
        [InlineData("en-US", "th (E.C.)", EnergyUnit.ThermEc)]
        [InlineData("en-US", "th (imp.)", EnergyUnit.ThermImperial)]
        [InlineData("en-US", "th (U.S.)", EnergyUnit.ThermUs)]
        [InlineData("en-US", "Wd", EnergyUnit.WattDay)]
        [InlineData("en-US", "Wh", EnergyUnit.WattHour)]
        [InlineData("ru-RU", "Европейский декатерм", EnergyUnit.DecathermEc)]
        [InlineData("ru-RU", "Английский декатерм", EnergyUnit.DecathermImperial)]
        [InlineData("ru-RU", "Американский декатерм", EnergyUnit.DecathermUs)]
        [InlineData("ru-RU", "эВ", EnergyUnit.ElectronVolt)]
        [InlineData("ru-RU", "ГэВ", EnergyUnit.GigaelectronVolt)]
        [InlineData("ru-RU", "ГВт/д", EnergyUnit.GigawattDay)]
        [InlineData("ru-RU", "ГВт/ч", EnergyUnit.GigawattHour)]
        [InlineData("ru-RU", "кэВ", EnergyUnit.KiloelectronVolt)]
        [InlineData("ru-RU", "кВт/д", EnergyUnit.KilowattDay)]
        [InlineData("ru-RU", "кВт/ч", EnergyUnit.KilowattHour)]
        [InlineData("ru-RU", "МэВ", EnergyUnit.MegaelectronVolt)]
        [InlineData("ru-RU", "МВт/д", EnergyUnit.MegawattDay)]
        [InlineData("ru-RU", "МВт/ч", EnergyUnit.MegawattHour)]
        [InlineData("ru-RU", "ТэВ", EnergyUnit.TeraelectronVolt)]
        [InlineData("ru-RU", "ТВт/д", EnergyUnit.TerawattDay)]
        [InlineData("ru-RU", "ТВт/ч", EnergyUnit.TerawattHour)]
        [InlineData("ru-RU", "Европейский терм", EnergyUnit.ThermEc)]
        [InlineData("ru-RU", "Английский терм", EnergyUnit.ThermImperial)]
        [InlineData("ru-RU", "Американский терм", EnergyUnit.ThermUs)]
        [InlineData("ru-RU", "Вт/д", EnergyUnit.WattDay)]
        [InlineData("ru-RU", "Вт/ч", EnergyUnit.WattHour)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, EnergyUnit expectedUnit)
        {
            EnergyUnit parsedUnit = Energy.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("BTU", EnergyUnit.BritishThermalUnit)]
        [InlineData("cal", EnergyUnit.Calorie)]
        [InlineData("Dth (E.C.)", EnergyUnit.DecathermEc)]
        [InlineData("Dth (imp.)", EnergyUnit.DecathermImperial)]
        [InlineData("Dth (U.S.)", EnergyUnit.DecathermUs)]
        [InlineData("eV", EnergyUnit.ElectronVolt)]
        [InlineData("erg", EnergyUnit.Erg)]
        [InlineData("ft·lb", EnergyUnit.FootPound)]
        [InlineData("GBTU", EnergyUnit.GigabritishThermalUnit)]
        [InlineData("GeV", EnergyUnit.GigaelectronVolt)]
        [InlineData("GJ", EnergyUnit.Gigajoule)]
        [InlineData("GWd", EnergyUnit.GigawattDay)]
        [InlineData("GWh", EnergyUnit.GigawattHour)]
        [InlineData("hp·h", EnergyUnit.HorsepowerHour)]
        [InlineData("J", EnergyUnit.Joule)]
        [InlineData("kBTU", EnergyUnit.KilobritishThermalUnit)]
        [InlineData("kcal", EnergyUnit.Kilocalorie)]
        [InlineData("keV", EnergyUnit.KiloelectronVolt)]
        [InlineData("kJ", EnergyUnit.Kilojoule)]
        [InlineData("kWd", EnergyUnit.KilowattDay)]
        [InlineData("kWh", EnergyUnit.KilowattHour)]
        [InlineData("MBTU", EnergyUnit.MegabritishThermalUnit)]
        [InlineData("Mcal", EnergyUnit.Megacalorie)]
        [InlineData("MeV", EnergyUnit.MegaelectronVolt)]
        [InlineData("MJ", EnergyUnit.Megajoule)]
        [InlineData("MWd", EnergyUnit.MegawattDay)]
        [InlineData("MWh", EnergyUnit.MegawattHour)]
        [InlineData("µJ", EnergyUnit.Microjoule)]
        [InlineData("mJ", EnergyUnit.Millijoule)]
        [InlineData("nJ", EnergyUnit.Nanojoule)]
        [InlineData("PJ", EnergyUnit.Petajoule)]
        [InlineData("TeV", EnergyUnit.TeraelectronVolt)]
        [InlineData("TJ", EnergyUnit.Terajoule)]
        [InlineData("TWd", EnergyUnit.TerawattDay)]
        [InlineData("TWh", EnergyUnit.TerawattHour)]
        [InlineData("th (E.C.)", EnergyUnit.ThermEc)]
        [InlineData("th (imp.)", EnergyUnit.ThermImperial)]
        [InlineData("th (U.S.)", EnergyUnit.ThermUs)]
        [InlineData("Wd", EnergyUnit.WattDay)]
        [InlineData("Wh", EnergyUnit.WattHour)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, EnergyUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Energy.TryParseUnit(abbreviation, out EnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("BTU", EnergyUnit.BritishThermalUnit)]
        [InlineData("cal", EnergyUnit.Calorie)]
        [InlineData("Dth (E.C.)", EnergyUnit.DecathermEc)]
        [InlineData("Dth (imp.)", EnergyUnit.DecathermImperial)]
        [InlineData("Dth (U.S.)", EnergyUnit.DecathermUs)]
        [InlineData("eV", EnergyUnit.ElectronVolt)]
        [InlineData("erg", EnergyUnit.Erg)]
        [InlineData("ft·lb", EnergyUnit.FootPound)]
        [InlineData("GBTU", EnergyUnit.GigabritishThermalUnit)]
        [InlineData("GeV", EnergyUnit.GigaelectronVolt)]
        [InlineData("GJ", EnergyUnit.Gigajoule)]
        [InlineData("GWd", EnergyUnit.GigawattDay)]
        [InlineData("GWh", EnergyUnit.GigawattHour)]
        [InlineData("hp·h", EnergyUnit.HorsepowerHour)]
        [InlineData("J", EnergyUnit.Joule)]
        [InlineData("kBTU", EnergyUnit.KilobritishThermalUnit)]
        [InlineData("kcal", EnergyUnit.Kilocalorie)]
        [InlineData("keV", EnergyUnit.KiloelectronVolt)]
        [InlineData("kJ", EnergyUnit.Kilojoule)]
        [InlineData("kWd", EnergyUnit.KilowattDay)]
        [InlineData("kWh", EnergyUnit.KilowattHour)]
        [InlineData("MBTU", EnergyUnit.MegabritishThermalUnit)]
        [InlineData("Mcal", EnergyUnit.Megacalorie)]
        [InlineData("MeV", EnergyUnit.MegaelectronVolt)]
        [InlineData("MJ", EnergyUnit.Megajoule)]
        [InlineData("MWd", EnergyUnit.MegawattDay)]
        [InlineData("MWh", EnergyUnit.MegawattHour)]
        [InlineData("µJ", EnergyUnit.Microjoule)]
        [InlineData("mJ", EnergyUnit.Millijoule)]
        [InlineData("nJ", EnergyUnit.Nanojoule)]
        [InlineData("PJ", EnergyUnit.Petajoule)]
        [InlineData("TeV", EnergyUnit.TeraelectronVolt)]
        [InlineData("TJ", EnergyUnit.Terajoule)]
        [InlineData("TWd", EnergyUnit.TerawattDay)]
        [InlineData("TWh", EnergyUnit.TerawattHour)]
        [InlineData("th (E.C.)", EnergyUnit.ThermEc)]
        [InlineData("th (imp.)", EnergyUnit.ThermImperial)]
        [InlineData("th (U.S.)", EnergyUnit.ThermUs)]
        [InlineData("Wd", EnergyUnit.WattDay)]
        [InlineData("Wh", EnergyUnit.WattHour)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, EnergyUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Energy.TryParseUnit(abbreviation, out EnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "BTU", EnergyUnit.BritishThermalUnit)]
        [InlineData("en-US", "cal", EnergyUnit.Calorie)]
        [InlineData("en-US", "Dth (E.C.)", EnergyUnit.DecathermEc)]
        [InlineData("en-US", "Dth (imp.)", EnergyUnit.DecathermImperial)]
        [InlineData("en-US", "Dth (U.S.)", EnergyUnit.DecathermUs)]
        [InlineData("en-US", "eV", EnergyUnit.ElectronVolt)]
        [InlineData("en-US", "erg", EnergyUnit.Erg)]
        [InlineData("en-US", "ft·lb", EnergyUnit.FootPound)]
        [InlineData("en-US", "GBTU", EnergyUnit.GigabritishThermalUnit)]
        [InlineData("en-US", "GeV", EnergyUnit.GigaelectronVolt)]
        [InlineData("en-US", "GJ", EnergyUnit.Gigajoule)]
        [InlineData("en-US", "GWd", EnergyUnit.GigawattDay)]
        [InlineData("en-US", "GWh", EnergyUnit.GigawattHour)]
        [InlineData("en-US", "hp·h", EnergyUnit.HorsepowerHour)]
        [InlineData("en-US", "J", EnergyUnit.Joule)]
        [InlineData("en-US", "kBTU", EnergyUnit.KilobritishThermalUnit)]
        [InlineData("en-US", "kcal", EnergyUnit.Kilocalorie)]
        [InlineData("en-US", "keV", EnergyUnit.KiloelectronVolt)]
        [InlineData("en-US", "kJ", EnergyUnit.Kilojoule)]
        [InlineData("en-US", "kWd", EnergyUnit.KilowattDay)]
        [InlineData("en-US", "kWh", EnergyUnit.KilowattHour)]
        [InlineData("en-US", "MBTU", EnergyUnit.MegabritishThermalUnit)]
        [InlineData("en-US", "Mcal", EnergyUnit.Megacalorie)]
        [InlineData("en-US", "MeV", EnergyUnit.MegaelectronVolt)]
        [InlineData("en-US", "MJ", EnergyUnit.Megajoule)]
        [InlineData("en-US", "MWd", EnergyUnit.MegawattDay)]
        [InlineData("en-US", "MWh", EnergyUnit.MegawattHour)]
        [InlineData("en-US", "µJ", EnergyUnit.Microjoule)]
        [InlineData("en-US", "mJ", EnergyUnit.Millijoule)]
        [InlineData("en-US", "nJ", EnergyUnit.Nanojoule)]
        [InlineData("en-US", "PJ", EnergyUnit.Petajoule)]
        [InlineData("en-US", "TeV", EnergyUnit.TeraelectronVolt)]
        [InlineData("en-US", "TJ", EnergyUnit.Terajoule)]
        [InlineData("en-US", "TWd", EnergyUnit.TerawattDay)]
        [InlineData("en-US", "TWh", EnergyUnit.TerawattHour)]
        [InlineData("en-US", "th (E.C.)", EnergyUnit.ThermEc)]
        [InlineData("en-US", "th (imp.)", EnergyUnit.ThermImperial)]
        [InlineData("en-US", "th (U.S.)", EnergyUnit.ThermUs)]
        [InlineData("en-US", "Wd", EnergyUnit.WattDay)]
        [InlineData("en-US", "Wh", EnergyUnit.WattHour)]
        [InlineData("ru-RU", "Европейский декатерм", EnergyUnit.DecathermEc)]
        [InlineData("ru-RU", "Английский декатерм", EnergyUnit.DecathermImperial)]
        [InlineData("ru-RU", "Американский декатерм", EnergyUnit.DecathermUs)]
        [InlineData("ru-RU", "эВ", EnergyUnit.ElectronVolt)]
        [InlineData("ru-RU", "ГэВ", EnergyUnit.GigaelectronVolt)]
        [InlineData("ru-RU", "ГВт/д", EnergyUnit.GigawattDay)]
        [InlineData("ru-RU", "ГВт/ч", EnergyUnit.GigawattHour)]
        [InlineData("ru-RU", "кэВ", EnergyUnit.KiloelectronVolt)]
        [InlineData("ru-RU", "кВт/д", EnergyUnit.KilowattDay)]
        [InlineData("ru-RU", "кВт/ч", EnergyUnit.KilowattHour)]
        [InlineData("ru-RU", "МэВ", EnergyUnit.MegaelectronVolt)]
        [InlineData("ru-RU", "МВт/д", EnergyUnit.MegawattDay)]
        [InlineData("ru-RU", "МВт/ч", EnergyUnit.MegawattHour)]
        [InlineData("ru-RU", "ТэВ", EnergyUnit.TeraelectronVolt)]
        [InlineData("ru-RU", "ТВт/д", EnergyUnit.TerawattDay)]
        [InlineData("ru-RU", "ТВт/ч", EnergyUnit.TerawattHour)]
        [InlineData("ru-RU", "Европейский терм", EnergyUnit.ThermEc)]
        [InlineData("ru-RU", "Английский терм", EnergyUnit.ThermImperial)]
        [InlineData("ru-RU", "Американский терм", EnergyUnit.ThermUs)]
        [InlineData("ru-RU", "Вт/д", EnergyUnit.WattDay)]
        [InlineData("ru-RU", "Вт/ч", EnergyUnit.WattHour)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, EnergyUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Energy.TryParseUnit(abbreviation, out EnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "BTU", EnergyUnit.BritishThermalUnit)]
        [InlineData("en-US", "cal", EnergyUnit.Calorie)]
        [InlineData("en-US", "Dth (E.C.)", EnergyUnit.DecathermEc)]
        [InlineData("en-US", "Dth (imp.)", EnergyUnit.DecathermImperial)]
        [InlineData("en-US", "Dth (U.S.)", EnergyUnit.DecathermUs)]
        [InlineData("en-US", "eV", EnergyUnit.ElectronVolt)]
        [InlineData("en-US", "erg", EnergyUnit.Erg)]
        [InlineData("en-US", "ft·lb", EnergyUnit.FootPound)]
        [InlineData("en-US", "GBTU", EnergyUnit.GigabritishThermalUnit)]
        [InlineData("en-US", "GeV", EnergyUnit.GigaelectronVolt)]
        [InlineData("en-US", "GJ", EnergyUnit.Gigajoule)]
        [InlineData("en-US", "GWd", EnergyUnit.GigawattDay)]
        [InlineData("en-US", "GWh", EnergyUnit.GigawattHour)]
        [InlineData("en-US", "hp·h", EnergyUnit.HorsepowerHour)]
        [InlineData("en-US", "J", EnergyUnit.Joule)]
        [InlineData("en-US", "kBTU", EnergyUnit.KilobritishThermalUnit)]
        [InlineData("en-US", "kcal", EnergyUnit.Kilocalorie)]
        [InlineData("en-US", "keV", EnergyUnit.KiloelectronVolt)]
        [InlineData("en-US", "kJ", EnergyUnit.Kilojoule)]
        [InlineData("en-US", "kWd", EnergyUnit.KilowattDay)]
        [InlineData("en-US", "kWh", EnergyUnit.KilowattHour)]
        [InlineData("en-US", "MBTU", EnergyUnit.MegabritishThermalUnit)]
        [InlineData("en-US", "Mcal", EnergyUnit.Megacalorie)]
        [InlineData("en-US", "MeV", EnergyUnit.MegaelectronVolt)]
        [InlineData("en-US", "MJ", EnergyUnit.Megajoule)]
        [InlineData("en-US", "MWd", EnergyUnit.MegawattDay)]
        [InlineData("en-US", "MWh", EnergyUnit.MegawattHour)]
        [InlineData("en-US", "µJ", EnergyUnit.Microjoule)]
        [InlineData("en-US", "mJ", EnergyUnit.Millijoule)]
        [InlineData("en-US", "nJ", EnergyUnit.Nanojoule)]
        [InlineData("en-US", "PJ", EnergyUnit.Petajoule)]
        [InlineData("en-US", "TeV", EnergyUnit.TeraelectronVolt)]
        [InlineData("en-US", "TJ", EnergyUnit.Terajoule)]
        [InlineData("en-US", "TWd", EnergyUnit.TerawattDay)]
        [InlineData("en-US", "TWh", EnergyUnit.TerawattHour)]
        [InlineData("en-US", "th (E.C.)", EnergyUnit.ThermEc)]
        [InlineData("en-US", "th (imp.)", EnergyUnit.ThermImperial)]
        [InlineData("en-US", "th (U.S.)", EnergyUnit.ThermUs)]
        [InlineData("en-US", "Wd", EnergyUnit.WattDay)]
        [InlineData("en-US", "Wh", EnergyUnit.WattHour)]
        [InlineData("ru-RU", "Европейский декатерм", EnergyUnit.DecathermEc)]
        [InlineData("ru-RU", "Английский декатерм", EnergyUnit.DecathermImperial)]
        [InlineData("ru-RU", "Американский декатерм", EnergyUnit.DecathermUs)]
        [InlineData("ru-RU", "эВ", EnergyUnit.ElectronVolt)]
        [InlineData("ru-RU", "ГэВ", EnergyUnit.GigaelectronVolt)]
        [InlineData("ru-RU", "ГВт/д", EnergyUnit.GigawattDay)]
        [InlineData("ru-RU", "ГВт/ч", EnergyUnit.GigawattHour)]
        [InlineData("ru-RU", "кэВ", EnergyUnit.KiloelectronVolt)]
        [InlineData("ru-RU", "кВт/д", EnergyUnit.KilowattDay)]
        [InlineData("ru-RU", "кВт/ч", EnergyUnit.KilowattHour)]
        [InlineData("ru-RU", "МэВ", EnergyUnit.MegaelectronVolt)]
        [InlineData("ru-RU", "МВт/д", EnergyUnit.MegawattDay)]
        [InlineData("ru-RU", "МВт/ч", EnergyUnit.MegawattHour)]
        [InlineData("ru-RU", "ТэВ", EnergyUnit.TeraelectronVolt)]
        [InlineData("ru-RU", "ТВт/д", EnergyUnit.TerawattDay)]
        [InlineData("ru-RU", "ТВт/ч", EnergyUnit.TerawattHour)]
        [InlineData("ru-RU", "Европейский терм", EnergyUnit.ThermEc)]
        [InlineData("ru-RU", "Английский терм", EnergyUnit.ThermImperial)]
        [InlineData("ru-RU", "Американский терм", EnergyUnit.ThermUs)]
        [InlineData("ru-RU", "Вт/д", EnergyUnit.WattDay)]
        [InlineData("ru-RU", "Вт/ч", EnergyUnit.WattHour)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, EnergyUnit expectedUnit)
        {
            Assert.True(Energy.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out EnergyUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", EnergyUnit.BritishThermalUnit, "BTU")]
        [InlineData("en-US", EnergyUnit.Calorie, "cal")]
        [InlineData("en-US", EnergyUnit.DecathermEc, "Dth (E.C.)")]
        [InlineData("en-US", EnergyUnit.DecathermImperial, "Dth (imp.)")]
        [InlineData("en-US", EnergyUnit.DecathermUs, "Dth (U.S.)")]
        [InlineData("en-US", EnergyUnit.ElectronVolt, "eV")]
        [InlineData("en-US", EnergyUnit.Erg, "erg")]
        [InlineData("en-US", EnergyUnit.FootPound, "ft·lb")]
        [InlineData("en-US", EnergyUnit.GigabritishThermalUnit, "GBTU")]
        [InlineData("en-US", EnergyUnit.GigaelectronVolt, "GeV")]
        [InlineData("en-US", EnergyUnit.Gigajoule, "GJ")]
        [InlineData("en-US", EnergyUnit.GigawattDay, "GWd")]
        [InlineData("en-US", EnergyUnit.GigawattHour, "GWh")]
        [InlineData("en-US", EnergyUnit.HorsepowerHour, "hp·h")]
        [InlineData("en-US", EnergyUnit.Joule, "J")]
        [InlineData("en-US", EnergyUnit.KilobritishThermalUnit, "kBTU")]
        [InlineData("en-US", EnergyUnit.Kilocalorie, "kcal")]
        [InlineData("en-US", EnergyUnit.KiloelectronVolt, "keV")]
        [InlineData("en-US", EnergyUnit.Kilojoule, "kJ")]
        [InlineData("en-US", EnergyUnit.KilowattDay, "kWd")]
        [InlineData("en-US", EnergyUnit.KilowattHour, "kWh")]
        [InlineData("en-US", EnergyUnit.MegabritishThermalUnit, "MBTU")]
        [InlineData("en-US", EnergyUnit.Megacalorie, "Mcal")]
        [InlineData("en-US", EnergyUnit.MegaelectronVolt, "MeV")]
        [InlineData("en-US", EnergyUnit.Megajoule, "MJ")]
        [InlineData("en-US", EnergyUnit.MegawattDay, "MWd")]
        [InlineData("en-US", EnergyUnit.MegawattHour, "MWh")]
        [InlineData("en-US", EnergyUnit.Microjoule, "µJ")]
        [InlineData("en-US", EnergyUnit.Millijoule, "mJ")]
        [InlineData("en-US", EnergyUnit.Nanojoule, "nJ")]
        [InlineData("en-US", EnergyUnit.Petajoule, "PJ")]
        [InlineData("en-US", EnergyUnit.TeraelectronVolt, "TeV")]
        [InlineData("en-US", EnergyUnit.Terajoule, "TJ")]
        [InlineData("en-US", EnergyUnit.TerawattDay, "TWd")]
        [InlineData("en-US", EnergyUnit.TerawattHour, "TWh")]
        [InlineData("en-US", EnergyUnit.ThermEc, "th (E.C.)")]
        [InlineData("en-US", EnergyUnit.ThermImperial, "th (imp.)")]
        [InlineData("en-US", EnergyUnit.ThermUs, "th (U.S.)")]
        [InlineData("en-US", EnergyUnit.WattDay, "Wd")]
        [InlineData("en-US", EnergyUnit.WattHour, "Wh")]
        [InlineData("ru-RU", EnergyUnit.DecathermEc, "Европейский декатерм")]
        [InlineData("ru-RU", EnergyUnit.DecathermImperial, "Английский декатерм")]
        [InlineData("ru-RU", EnergyUnit.DecathermUs, "Американский декатерм")]
        [InlineData("ru-RU", EnergyUnit.ElectronVolt, "эВ")]
        [InlineData("ru-RU", EnergyUnit.GigaelectronVolt, "ГэВ")]
        [InlineData("ru-RU", EnergyUnit.GigawattDay, "ГВт/д")]
        [InlineData("ru-RU", EnergyUnit.GigawattHour, "ГВт/ч")]
        [InlineData("ru-RU", EnergyUnit.KiloelectronVolt, "кэВ")]
        [InlineData("ru-RU", EnergyUnit.KilowattDay, "кВт/д")]
        [InlineData("ru-RU", EnergyUnit.KilowattHour, "кВт/ч")]
        [InlineData("ru-RU", EnergyUnit.MegaelectronVolt, "МэВ")]
        [InlineData("ru-RU", EnergyUnit.MegawattDay, "МВт/д")]
        [InlineData("ru-RU", EnergyUnit.MegawattHour, "МВт/ч")]
        [InlineData("ru-RU", EnergyUnit.TeraelectronVolt, "ТэВ")]
        [InlineData("ru-RU", EnergyUnit.TerawattDay, "ТВт/д")]
        [InlineData("ru-RU", EnergyUnit.TerawattHour, "ТВт/ч")]
        [InlineData("ru-RU", EnergyUnit.ThermEc, "Европейский терм")]
        [InlineData("ru-RU", EnergyUnit.ThermImperial, "Английский терм")]
        [InlineData("ru-RU", EnergyUnit.ThermUs, "Американский терм")]
        [InlineData("ru-RU", EnergyUnit.WattDay, "Вт/д")]
        [InlineData("ru-RU", EnergyUnit.WattHour, "Вт/ч")]
        public void GetAbbreviationForCulture(string culture, EnergyUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Energy.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Energy.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Energy.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(EnergyUnit unit)
        {
            var inBaseUnits = Energy.From(1.0, Energy.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(EnergyUnit unit)
        {
            var quantity = Energy.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(EnergyUnit unit)
        {
            Assert.All(Energy.Units.Where(u => u != Energy.BaseUnit), fromUnit =>
            {
                var quantity = Energy.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(EnergyUnit unit)
        {
            var quantity = default(Energy);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(EnergyUnit unit)
        {
            var quantity = Energy.From(3, Energy.BaseUnit);
            Energy expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<EnergyUnit> quantityToConvert = quantity;
                IQuantity<EnergyUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Energy joule = Energy.FromJoules(3);
            Assert.Equal(3, Energy.FromBritishThermalUnits(joule.BritishThermalUnits).Joules);
            Assert.Equal(3, Energy.FromCalories(joule.Calories).Joules);
            Assert.Equal(3, Energy.FromDecathermsEc(joule.DecathermsEc).Joules);
            Assert.Equal(3, Energy.FromDecathermsImperial(joule.DecathermsImperial).Joules);
            Assert.Equal(3, Energy.FromDecathermsUs(joule.DecathermsUs).Joules);
            Assert.Equal(3, Energy.FromElectronVolts(joule.ElectronVolts).Joules);
            Assert.Equal(3, Energy.FromErgs(joule.Ergs).Joules);
            Assert.Equal(3, Energy.FromFootPounds(joule.FootPounds).Joules);
            Assert.Equal(3, Energy.FromGigabritishThermalUnits(joule.GigabritishThermalUnits).Joules);
            Assert.Equal(3, Energy.FromGigaelectronVolts(joule.GigaelectronVolts).Joules);
            Assert.Equal(3, Energy.FromGigajoules(joule.Gigajoules).Joules);
            Assert.Equal(3, Energy.FromGigawattDays(joule.GigawattDays).Joules);
            Assert.Equal(3, Energy.FromGigawattHours(joule.GigawattHours).Joules);
            Assert.Equal(3, Energy.FromHorsepowerHours(joule.HorsepowerHours).Joules);
            Assert.Equal(3, Energy.FromJoules(joule.Joules).Joules);
            Assert.Equal(3, Energy.FromKilobritishThermalUnits(joule.KilobritishThermalUnits).Joules);
            Assert.Equal(3, Energy.FromKilocalories(joule.Kilocalories).Joules);
            Assert.Equal(3, Energy.FromKiloelectronVolts(joule.KiloelectronVolts).Joules);
            Assert.Equal(3, Energy.FromKilojoules(joule.Kilojoules).Joules);
            Assert.Equal(3, Energy.FromKilowattDays(joule.KilowattDays).Joules);
            Assert.Equal(3, Energy.FromKilowattHours(joule.KilowattHours).Joules);
            Assert.Equal(3, Energy.FromMegabritishThermalUnits(joule.MegabritishThermalUnits).Joules);
            Assert.Equal(3, Energy.FromMegacalories(joule.Megacalories).Joules);
            Assert.Equal(3, Energy.FromMegaelectronVolts(joule.MegaelectronVolts).Joules);
            Assert.Equal(3, Energy.FromMegajoules(joule.Megajoules).Joules);
            Assert.Equal(3, Energy.FromMegawattDays(joule.MegawattDays).Joules);
            Assert.Equal(3, Energy.FromMegawattHours(joule.MegawattHours).Joules);
            Assert.Equal(3, Energy.FromMicrojoules(joule.Microjoules).Joules);
            Assert.Equal(3, Energy.FromMillijoules(joule.Millijoules).Joules);
            Assert.Equal(3, Energy.FromNanojoules(joule.Nanojoules).Joules);
            Assert.Equal(3, Energy.FromPetajoules(joule.Petajoules).Joules);
            Assert.Equal(3, Energy.FromTeraelectronVolts(joule.TeraelectronVolts).Joules);
            Assert.Equal(3, Energy.FromTerajoules(joule.Terajoules).Joules);
            Assert.Equal(3, Energy.FromTerawattDays(joule.TerawattDays).Joules);
            Assert.Equal(3, Energy.FromTerawattHours(joule.TerawattHours).Joules);
            Assert.Equal(3, Energy.FromThermsEc(joule.ThermsEc).Joules);
            Assert.Equal(3, Energy.FromThermsImperial(joule.ThermsImperial).Joules);
            Assert.Equal(3, Energy.FromThermsUs(joule.ThermsUs).Joules);
            Assert.Equal(3, Energy.FromWattDays(joule.WattDays).Joules);
            Assert.Equal(3, Energy.FromWattHours(joule.WattHours).Joules);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Energy v = Energy.FromJoules(1);
            Assert.Equal(-1, -v.Joules);
            Assert.Equal(2, (Energy.FromJoules(3) - v).Joules);
            Assert.Equal(2, (v + v).Joules);
            Assert.Equal(10, (v * 10).Joules);
            Assert.Equal(10, (10 * v).Joules);
            Assert.Equal(2, (Energy.FromJoules(10) / 5).Joules);
            Assert.Equal(2, Energy.FromJoules(10) / Energy.FromJoules(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Energy oneJoule = Energy.FromJoules(1);
            Energy twoJoules = Energy.FromJoules(2);

            Assert.True(oneJoule < twoJoules);
            Assert.True(oneJoule <= twoJoules);
            Assert.True(twoJoules > oneJoule);
            Assert.True(twoJoules >= oneJoule);

            Assert.False(oneJoule > twoJoules);
            Assert.False(oneJoule >= twoJoules);
            Assert.False(twoJoules < oneJoule);
            Assert.False(twoJoules <= oneJoule);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Equal(0, joule.CompareTo(joule));
            Assert.True(joule.CompareTo(Energy.Zero) > 0);
            Assert.True(Energy.Zero.CompareTo(joule) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Throws<ArgumentException>(() => joule.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.Throws<ArgumentNullException>(() => joule.CompareTo(null));
        }

        [Theory]
        [InlineData(1, EnergyUnit.Joule, 1, EnergyUnit.Joule, true)]  // Same value and unit.
        [InlineData(1, EnergyUnit.Joule, 2, EnergyUnit.Joule, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, EnergyUnit unitA, double valueB, EnergyUnit unitB, bool expectEqual)
        {
            var a = new Energy(valueA, unitA);
            var b = new Energy(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Energy.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.False(joule.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Energy joule = Energy.FromJoules(1);
            Assert.False(joule.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Energy.FromJoules(firstValue);
            var otherQuantity = Energy.FromJoules(secondValue);
            Energy maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Energy.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Energy.FromJoules(1);
            var negativeTolerance = Energy.FromJoules(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<EnergyUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Energy.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Energy.Info.Units, Energy.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Energy.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 BTU", new Energy(1, EnergyUnit.BritishThermalUnit).ToString());
            Assert.Equal("1 cal", new Energy(1, EnergyUnit.Calorie).ToString());
            Assert.Equal("1 Dth (E.C.)", new Energy(1, EnergyUnit.DecathermEc).ToString());
            Assert.Equal("1 Dth (imp.)", new Energy(1, EnergyUnit.DecathermImperial).ToString());
            Assert.Equal("1 Dth (U.S.)", new Energy(1, EnergyUnit.DecathermUs).ToString());
            Assert.Equal("1 eV", new Energy(1, EnergyUnit.ElectronVolt).ToString());
            Assert.Equal("1 erg", new Energy(1, EnergyUnit.Erg).ToString());
            Assert.Equal("1 ft·lb", new Energy(1, EnergyUnit.FootPound).ToString());
            Assert.Equal("1 GBTU", new Energy(1, EnergyUnit.GigabritishThermalUnit).ToString());
            Assert.Equal("1 GeV", new Energy(1, EnergyUnit.GigaelectronVolt).ToString());
            Assert.Equal("1 GJ", new Energy(1, EnergyUnit.Gigajoule).ToString());
            Assert.Equal("1 GWd", new Energy(1, EnergyUnit.GigawattDay).ToString());
            Assert.Equal("1 GWh", new Energy(1, EnergyUnit.GigawattHour).ToString());
            Assert.Equal("1 hp·h", new Energy(1, EnergyUnit.HorsepowerHour).ToString());
            Assert.Equal("1 J", new Energy(1, EnergyUnit.Joule).ToString());
            Assert.Equal("1 kBTU", new Energy(1, EnergyUnit.KilobritishThermalUnit).ToString());
            Assert.Equal("1 kcal", new Energy(1, EnergyUnit.Kilocalorie).ToString());
            Assert.Equal("1 keV", new Energy(1, EnergyUnit.KiloelectronVolt).ToString());
            Assert.Equal("1 kJ", new Energy(1, EnergyUnit.Kilojoule).ToString());
            Assert.Equal("1 kWd", new Energy(1, EnergyUnit.KilowattDay).ToString());
            Assert.Equal("1 kWh", new Energy(1, EnergyUnit.KilowattHour).ToString());
            Assert.Equal("1 MBTU", new Energy(1, EnergyUnit.MegabritishThermalUnit).ToString());
            Assert.Equal("1 Mcal", new Energy(1, EnergyUnit.Megacalorie).ToString());
            Assert.Equal("1 MeV", new Energy(1, EnergyUnit.MegaelectronVolt).ToString());
            Assert.Equal("1 MJ", new Energy(1, EnergyUnit.Megajoule).ToString());
            Assert.Equal("1 MWd", new Energy(1, EnergyUnit.MegawattDay).ToString());
            Assert.Equal("1 MWh", new Energy(1, EnergyUnit.MegawattHour).ToString());
            Assert.Equal("1 µJ", new Energy(1, EnergyUnit.Microjoule).ToString());
            Assert.Equal("1 mJ", new Energy(1, EnergyUnit.Millijoule).ToString());
            Assert.Equal("1 nJ", new Energy(1, EnergyUnit.Nanojoule).ToString());
            Assert.Equal("1 PJ", new Energy(1, EnergyUnit.Petajoule).ToString());
            Assert.Equal("1 TeV", new Energy(1, EnergyUnit.TeraelectronVolt).ToString());
            Assert.Equal("1 TJ", new Energy(1, EnergyUnit.Terajoule).ToString());
            Assert.Equal("1 TWd", new Energy(1, EnergyUnit.TerawattDay).ToString());
            Assert.Equal("1 TWh", new Energy(1, EnergyUnit.TerawattHour).ToString());
            Assert.Equal("1 th (E.C.)", new Energy(1, EnergyUnit.ThermEc).ToString());
            Assert.Equal("1 th (imp.)", new Energy(1, EnergyUnit.ThermImperial).ToString());
            Assert.Equal("1 th (U.S.)", new Energy(1, EnergyUnit.ThermUs).ToString());
            Assert.Equal("1 Wd", new Energy(1, EnergyUnit.WattDay).ToString());
            Assert.Equal("1 Wh", new Energy(1, EnergyUnit.WattHour).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 BTU", new Energy(1, EnergyUnit.BritishThermalUnit).ToString(swedishCulture));
            Assert.Equal("1 cal", new Energy(1, EnergyUnit.Calorie).ToString(swedishCulture));
            Assert.Equal("1 Dth (E.C.)", new Energy(1, EnergyUnit.DecathermEc).ToString(swedishCulture));
            Assert.Equal("1 Dth (imp.)", new Energy(1, EnergyUnit.DecathermImperial).ToString(swedishCulture));
            Assert.Equal("1 Dth (U.S.)", new Energy(1, EnergyUnit.DecathermUs).ToString(swedishCulture));
            Assert.Equal("1 eV", new Energy(1, EnergyUnit.ElectronVolt).ToString(swedishCulture));
            Assert.Equal("1 erg", new Energy(1, EnergyUnit.Erg).ToString(swedishCulture));
            Assert.Equal("1 ft·lb", new Energy(1, EnergyUnit.FootPound).ToString(swedishCulture));
            Assert.Equal("1 GBTU", new Energy(1, EnergyUnit.GigabritishThermalUnit).ToString(swedishCulture));
            Assert.Equal("1 GeV", new Energy(1, EnergyUnit.GigaelectronVolt).ToString(swedishCulture));
            Assert.Equal("1 GJ", new Energy(1, EnergyUnit.Gigajoule).ToString(swedishCulture));
            Assert.Equal("1 GWd", new Energy(1, EnergyUnit.GigawattDay).ToString(swedishCulture));
            Assert.Equal("1 GWh", new Energy(1, EnergyUnit.GigawattHour).ToString(swedishCulture));
            Assert.Equal("1 hp·h", new Energy(1, EnergyUnit.HorsepowerHour).ToString(swedishCulture));
            Assert.Equal("1 J", new Energy(1, EnergyUnit.Joule).ToString(swedishCulture));
            Assert.Equal("1 kBTU", new Energy(1, EnergyUnit.KilobritishThermalUnit).ToString(swedishCulture));
            Assert.Equal("1 kcal", new Energy(1, EnergyUnit.Kilocalorie).ToString(swedishCulture));
            Assert.Equal("1 keV", new Energy(1, EnergyUnit.KiloelectronVolt).ToString(swedishCulture));
            Assert.Equal("1 kJ", new Energy(1, EnergyUnit.Kilojoule).ToString(swedishCulture));
            Assert.Equal("1 kWd", new Energy(1, EnergyUnit.KilowattDay).ToString(swedishCulture));
            Assert.Equal("1 kWh", new Energy(1, EnergyUnit.KilowattHour).ToString(swedishCulture));
            Assert.Equal("1 MBTU", new Energy(1, EnergyUnit.MegabritishThermalUnit).ToString(swedishCulture));
            Assert.Equal("1 Mcal", new Energy(1, EnergyUnit.Megacalorie).ToString(swedishCulture));
            Assert.Equal("1 MeV", new Energy(1, EnergyUnit.MegaelectronVolt).ToString(swedishCulture));
            Assert.Equal("1 MJ", new Energy(1, EnergyUnit.Megajoule).ToString(swedishCulture));
            Assert.Equal("1 MWd", new Energy(1, EnergyUnit.MegawattDay).ToString(swedishCulture));
            Assert.Equal("1 MWh", new Energy(1, EnergyUnit.MegawattHour).ToString(swedishCulture));
            Assert.Equal("1 µJ", new Energy(1, EnergyUnit.Microjoule).ToString(swedishCulture));
            Assert.Equal("1 mJ", new Energy(1, EnergyUnit.Millijoule).ToString(swedishCulture));
            Assert.Equal("1 nJ", new Energy(1, EnergyUnit.Nanojoule).ToString(swedishCulture));
            Assert.Equal("1 PJ", new Energy(1, EnergyUnit.Petajoule).ToString(swedishCulture));
            Assert.Equal("1 TeV", new Energy(1, EnergyUnit.TeraelectronVolt).ToString(swedishCulture));
            Assert.Equal("1 TJ", new Energy(1, EnergyUnit.Terajoule).ToString(swedishCulture));
            Assert.Equal("1 TWd", new Energy(1, EnergyUnit.TerawattDay).ToString(swedishCulture));
            Assert.Equal("1 TWh", new Energy(1, EnergyUnit.TerawattHour).ToString(swedishCulture));
            Assert.Equal("1 th (E.C.)", new Energy(1, EnergyUnit.ThermEc).ToString(swedishCulture));
            Assert.Equal("1 th (imp.)", new Energy(1, EnergyUnit.ThermImperial).ToString(swedishCulture));
            Assert.Equal("1 th (U.S.)", new Energy(1, EnergyUnit.ThermUs).ToString(swedishCulture));
            Assert.Equal("1 Wd", new Energy(1, EnergyUnit.WattDay).ToString(swedishCulture));
            Assert.Equal("1 Wh", new Energy(1, EnergyUnit.WattHour).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s1"));
            Assert.Equal("0.12 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s2"));
            Assert.Equal("0.123 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s3"));
            Assert.Equal("0.1235 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s1", culture));
            Assert.Equal("0.12 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s2", culture));
            Assert.Equal("0.123 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s3", culture));
            Assert.Equal("0.1235 J", new Energy(0.123456, EnergyUnit.Joule).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Energy.FromJoules(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Energy.FromJoules(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Energy.FromJoules(1.0);
            var expected = Comparison.GetHashCode(typeof(Energy), quantity.As(Energy.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Energy.FromJoules(value);
            Assert.Equal(Energy.FromJoules(-value), -quantity);
        }
    }
}
