//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of LinearPowerDensity.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class LinearPowerDensityTestsBase : QuantityTestsBase
    {
        protected abstract double GigawattsPerCentimeterInOneWattPerMeter { get; }
        protected abstract double GigawattsPerFootInOneWattPerMeter { get; }
        protected abstract double GigawattsPerInchInOneWattPerMeter { get; }
        protected abstract double GigawattsPerMeterInOneWattPerMeter { get; }
        protected abstract double GigawattsPerMillimeterInOneWattPerMeter { get; }
        protected abstract double KilowattsPerCentimeterInOneWattPerMeter { get; }
        protected abstract double KilowattsPerFootInOneWattPerMeter { get; }
        protected abstract double KilowattsPerInchInOneWattPerMeter { get; }
        protected abstract double KilowattsPerMeterInOneWattPerMeter { get; }
        protected abstract double KilowattsPerMillimeterInOneWattPerMeter { get; }
        protected abstract double MegawattsPerCentimeterInOneWattPerMeter { get; }
        protected abstract double MegawattsPerFootInOneWattPerMeter { get; }
        protected abstract double MegawattsPerInchInOneWattPerMeter { get; }
        protected abstract double MegawattsPerMeterInOneWattPerMeter { get; }
        protected abstract double MegawattsPerMillimeterInOneWattPerMeter { get; }
        protected abstract double MilliwattsPerCentimeterInOneWattPerMeter { get; }
        protected abstract double MilliwattsPerFootInOneWattPerMeter { get; }
        protected abstract double MilliwattsPerInchInOneWattPerMeter { get; }
        protected abstract double MilliwattsPerMeterInOneWattPerMeter { get; }
        protected abstract double MilliwattsPerMillimeterInOneWattPerMeter { get; }
        protected abstract double WattsPerCentimeterInOneWattPerMeter { get; }
        protected abstract double WattsPerFootInOneWattPerMeter { get; }
        protected abstract double WattsPerInchInOneWattPerMeter { get; }
        protected abstract double WattsPerMeterInOneWattPerMeter { get; }
        protected abstract double WattsPerMillimeterInOneWattPerMeter { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double GigawattsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double GigawattsPerFootTolerance { get { return 1e-5; } }
        protected virtual double GigawattsPerInchTolerance { get { return 1e-5; } }
        protected virtual double GigawattsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double GigawattsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerFootTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerInchTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double KilowattsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerFootTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerInchTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MegawattsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerFootTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerInchTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsPerMillimeterTolerance { get { return 1e-5; } }
        protected virtual double WattsPerCentimeterTolerance { get { return 1e-5; } }
        protected virtual double WattsPerFootTolerance { get { return 1e-5; } }
        protected virtual double WattsPerInchTolerance { get { return 1e-5; } }
        protected virtual double WattsPerMeterTolerance { get { return 1e-5; } }
        protected virtual double WattsPerMillimeterTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(LinearPowerDensityUnit unit)
        {
            return unit switch
            {
                LinearPowerDensityUnit.GigawattPerCentimeter => (GigawattsPerCentimeterInOneWattPerMeter, GigawattsPerCentimeterTolerance),
                LinearPowerDensityUnit.GigawattPerFoot => (GigawattsPerFootInOneWattPerMeter, GigawattsPerFootTolerance),
                LinearPowerDensityUnit.GigawattPerInch => (GigawattsPerInchInOneWattPerMeter, GigawattsPerInchTolerance),
                LinearPowerDensityUnit.GigawattPerMeter => (GigawattsPerMeterInOneWattPerMeter, GigawattsPerMeterTolerance),
                LinearPowerDensityUnit.GigawattPerMillimeter => (GigawattsPerMillimeterInOneWattPerMeter, GigawattsPerMillimeterTolerance),
                LinearPowerDensityUnit.KilowattPerCentimeter => (KilowattsPerCentimeterInOneWattPerMeter, KilowattsPerCentimeterTolerance),
                LinearPowerDensityUnit.KilowattPerFoot => (KilowattsPerFootInOneWattPerMeter, KilowattsPerFootTolerance),
                LinearPowerDensityUnit.KilowattPerInch => (KilowattsPerInchInOneWattPerMeter, KilowattsPerInchTolerance),
                LinearPowerDensityUnit.KilowattPerMeter => (KilowattsPerMeterInOneWattPerMeter, KilowattsPerMeterTolerance),
                LinearPowerDensityUnit.KilowattPerMillimeter => (KilowattsPerMillimeterInOneWattPerMeter, KilowattsPerMillimeterTolerance),
                LinearPowerDensityUnit.MegawattPerCentimeter => (MegawattsPerCentimeterInOneWattPerMeter, MegawattsPerCentimeterTolerance),
                LinearPowerDensityUnit.MegawattPerFoot => (MegawattsPerFootInOneWattPerMeter, MegawattsPerFootTolerance),
                LinearPowerDensityUnit.MegawattPerInch => (MegawattsPerInchInOneWattPerMeter, MegawattsPerInchTolerance),
                LinearPowerDensityUnit.MegawattPerMeter => (MegawattsPerMeterInOneWattPerMeter, MegawattsPerMeterTolerance),
                LinearPowerDensityUnit.MegawattPerMillimeter => (MegawattsPerMillimeterInOneWattPerMeter, MegawattsPerMillimeterTolerance),
                LinearPowerDensityUnit.MilliwattPerCentimeter => (MilliwattsPerCentimeterInOneWattPerMeter, MilliwattsPerCentimeterTolerance),
                LinearPowerDensityUnit.MilliwattPerFoot => (MilliwattsPerFootInOneWattPerMeter, MilliwattsPerFootTolerance),
                LinearPowerDensityUnit.MilliwattPerInch => (MilliwattsPerInchInOneWattPerMeter, MilliwattsPerInchTolerance),
                LinearPowerDensityUnit.MilliwattPerMeter => (MilliwattsPerMeterInOneWattPerMeter, MilliwattsPerMeterTolerance),
                LinearPowerDensityUnit.MilliwattPerMillimeter => (MilliwattsPerMillimeterInOneWattPerMeter, MilliwattsPerMillimeterTolerance),
                LinearPowerDensityUnit.WattPerCentimeter => (WattsPerCentimeterInOneWattPerMeter, WattsPerCentimeterTolerance),
                LinearPowerDensityUnit.WattPerFoot => (WattsPerFootInOneWattPerMeter, WattsPerFootTolerance),
                LinearPowerDensityUnit.WattPerInch => (WattsPerInchInOneWattPerMeter, WattsPerInchTolerance),
                LinearPowerDensityUnit.WattPerMeter => (WattsPerMeterInOneWattPerMeter, WattsPerMeterTolerance),
                LinearPowerDensityUnit.WattPerMillimeter => (WattsPerMillimeterInOneWattPerMeter, WattsPerMillimeterTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { LinearPowerDensityUnit.GigawattPerCentimeter },
            new object[] { LinearPowerDensityUnit.GigawattPerFoot },
            new object[] { LinearPowerDensityUnit.GigawattPerInch },
            new object[] { LinearPowerDensityUnit.GigawattPerMeter },
            new object[] { LinearPowerDensityUnit.GigawattPerMillimeter },
            new object[] { LinearPowerDensityUnit.KilowattPerCentimeter },
            new object[] { LinearPowerDensityUnit.KilowattPerFoot },
            new object[] { LinearPowerDensityUnit.KilowattPerInch },
            new object[] { LinearPowerDensityUnit.KilowattPerMeter },
            new object[] { LinearPowerDensityUnit.KilowattPerMillimeter },
            new object[] { LinearPowerDensityUnit.MegawattPerCentimeter },
            new object[] { LinearPowerDensityUnit.MegawattPerFoot },
            new object[] { LinearPowerDensityUnit.MegawattPerInch },
            new object[] { LinearPowerDensityUnit.MegawattPerMeter },
            new object[] { LinearPowerDensityUnit.MegawattPerMillimeter },
            new object[] { LinearPowerDensityUnit.MilliwattPerCentimeter },
            new object[] { LinearPowerDensityUnit.MilliwattPerFoot },
            new object[] { LinearPowerDensityUnit.MilliwattPerInch },
            new object[] { LinearPowerDensityUnit.MilliwattPerMeter },
            new object[] { LinearPowerDensityUnit.MilliwattPerMillimeter },
            new object[] { LinearPowerDensityUnit.WattPerCentimeter },
            new object[] { LinearPowerDensityUnit.WattPerFoot },
            new object[] { LinearPowerDensityUnit.WattPerInch },
            new object[] { LinearPowerDensityUnit.WattPerMeter },
            new object[] { LinearPowerDensityUnit.WattPerMillimeter },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new LinearPowerDensity();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(LinearPowerDensityUnit.WattPerMeter, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new LinearPowerDensity(double.PositiveInfinity, LinearPowerDensityUnit.WattPerMeter));
            var exception2 = Record.Exception(() => new LinearPowerDensity(double.NegativeInfinity, LinearPowerDensityUnit.WattPerMeter));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new LinearPowerDensity(double.NaN, LinearPowerDensityUnit.WattPerMeter));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new LinearPowerDensity(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new LinearPowerDensity(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new LinearPowerDensity(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void LinearPowerDensity_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            LinearPowerDensityUnit[] unitsOrderedByName = EnumHelper.GetValues<LinearPowerDensityUnit>().OrderBy(x => x.ToString(), StringComparer.OrdinalIgnoreCase).ToArray();
            var quantity = new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerMeter);

            QuantityInfo<LinearPowerDensity, LinearPowerDensityUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("LinearPowerDensity", quantityInfo.Name);
            Assert.Equal(LinearPowerDensity.Zero, quantityInfo.Zero);
            Assert.Equal(LinearPowerDensity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(LinearPowerDensity.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<LinearPowerDensityUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void LinearPowerDensityInfo_CreateWithCustomUnitInfos()
        {
            LinearPowerDensityUnit[] expectedUnits = [LinearPowerDensityUnit.WattPerMeter];

            LinearPowerDensity.LinearPowerDensityInfo quantityInfo = LinearPowerDensity.LinearPowerDensityInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("LinearPowerDensity", quantityInfo.Name);
            Assert.Equal(LinearPowerDensity.Zero, quantityInfo.Zero);
            Assert.Equal(LinearPowerDensity.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void WattPerMeterToLinearPowerDensityUnits()
        {
            LinearPowerDensity wattpermeter = LinearPowerDensity.FromWattsPerMeter(1);
            AssertEx.EqualTolerance(GigawattsPerCentimeterInOneWattPerMeter, wattpermeter.GigawattsPerCentimeter, GigawattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(GigawattsPerFootInOneWattPerMeter, wattpermeter.GigawattsPerFoot, GigawattsPerFootTolerance);
            AssertEx.EqualTolerance(GigawattsPerInchInOneWattPerMeter, wattpermeter.GigawattsPerInch, GigawattsPerInchTolerance);
            AssertEx.EqualTolerance(GigawattsPerMeterInOneWattPerMeter, wattpermeter.GigawattsPerMeter, GigawattsPerMeterTolerance);
            AssertEx.EqualTolerance(GigawattsPerMillimeterInOneWattPerMeter, wattpermeter.GigawattsPerMillimeter, GigawattsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerCentimeterInOneWattPerMeter, wattpermeter.KilowattsPerCentimeter, KilowattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerFootInOneWattPerMeter, wattpermeter.KilowattsPerFoot, KilowattsPerFootTolerance);
            AssertEx.EqualTolerance(KilowattsPerInchInOneWattPerMeter, wattpermeter.KilowattsPerInch, KilowattsPerInchTolerance);
            AssertEx.EqualTolerance(KilowattsPerMeterInOneWattPerMeter, wattpermeter.KilowattsPerMeter, KilowattsPerMeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerMillimeterInOneWattPerMeter, wattpermeter.KilowattsPerMillimeter, KilowattsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerCentimeterInOneWattPerMeter, wattpermeter.MegawattsPerCentimeter, MegawattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerFootInOneWattPerMeter, wattpermeter.MegawattsPerFoot, MegawattsPerFootTolerance);
            AssertEx.EqualTolerance(MegawattsPerInchInOneWattPerMeter, wattpermeter.MegawattsPerInch, MegawattsPerInchTolerance);
            AssertEx.EqualTolerance(MegawattsPerMeterInOneWattPerMeter, wattpermeter.MegawattsPerMeter, MegawattsPerMeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerMillimeterInOneWattPerMeter, wattpermeter.MegawattsPerMillimeter, MegawattsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerCentimeterInOneWattPerMeter, wattpermeter.MilliwattsPerCentimeter, MilliwattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerFootInOneWattPerMeter, wattpermeter.MilliwattsPerFoot, MilliwattsPerFootTolerance);
            AssertEx.EqualTolerance(MilliwattsPerInchInOneWattPerMeter, wattpermeter.MilliwattsPerInch, MilliwattsPerInchTolerance);
            AssertEx.EqualTolerance(MilliwattsPerMeterInOneWattPerMeter, wattpermeter.MilliwattsPerMeter, MilliwattsPerMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerMillimeterInOneWattPerMeter, wattpermeter.MilliwattsPerMillimeter, MilliwattsPerMillimeterTolerance);
            AssertEx.EqualTolerance(WattsPerCentimeterInOneWattPerMeter, wattpermeter.WattsPerCentimeter, WattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(WattsPerFootInOneWattPerMeter, wattpermeter.WattsPerFoot, WattsPerFootTolerance);
            AssertEx.EqualTolerance(WattsPerInchInOneWattPerMeter, wattpermeter.WattsPerInch, WattsPerInchTolerance);
            AssertEx.EqualTolerance(WattsPerMeterInOneWattPerMeter, wattpermeter.WattsPerMeter, WattsPerMeterTolerance);
            AssertEx.EqualTolerance(WattsPerMillimeterInOneWattPerMeter, wattpermeter.WattsPerMillimeter, WattsPerMillimeterTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<LinearPowerDensityUnit>(), unit =>
            {
                var quantity = LinearPowerDensity.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromWattsPerMeter_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => LinearPowerDensity.FromWattsPerMeter(double.PositiveInfinity));
            var exception2 = Record.Exception(() => LinearPowerDensity.FromWattsPerMeter(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromWattsPerMeter_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => LinearPowerDensity.FromWattsPerMeter(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var wattpermeter = LinearPowerDensity.FromWattsPerMeter(1);
            AssertEx.EqualTolerance(GigawattsPerCentimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.GigawattPerCentimeter), GigawattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(GigawattsPerFootInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.GigawattPerFoot), GigawattsPerFootTolerance);
            AssertEx.EqualTolerance(GigawattsPerInchInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.GigawattPerInch), GigawattsPerInchTolerance);
            AssertEx.EqualTolerance(GigawattsPerMeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.GigawattPerMeter), GigawattsPerMeterTolerance);
            AssertEx.EqualTolerance(GigawattsPerMillimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.GigawattPerMillimeter), GigawattsPerMillimeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerCentimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.KilowattPerCentimeter), KilowattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerFootInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.KilowattPerFoot), KilowattsPerFootTolerance);
            AssertEx.EqualTolerance(KilowattsPerInchInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.KilowattPerInch), KilowattsPerInchTolerance);
            AssertEx.EqualTolerance(KilowattsPerMeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.KilowattPerMeter), KilowattsPerMeterTolerance);
            AssertEx.EqualTolerance(KilowattsPerMillimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.KilowattPerMillimeter), KilowattsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerCentimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MegawattPerCentimeter), MegawattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerFootInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MegawattPerFoot), MegawattsPerFootTolerance);
            AssertEx.EqualTolerance(MegawattsPerInchInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MegawattPerInch), MegawattsPerInchTolerance);
            AssertEx.EqualTolerance(MegawattsPerMeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MegawattPerMeter), MegawattsPerMeterTolerance);
            AssertEx.EqualTolerance(MegawattsPerMillimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MegawattPerMillimeter), MegawattsPerMillimeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerCentimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MilliwattPerCentimeter), MilliwattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerFootInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MilliwattPerFoot), MilliwattsPerFootTolerance);
            AssertEx.EqualTolerance(MilliwattsPerInchInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MilliwattPerInch), MilliwattsPerInchTolerance);
            AssertEx.EqualTolerance(MilliwattsPerMeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MilliwattPerMeter), MilliwattsPerMeterTolerance);
            AssertEx.EqualTolerance(MilliwattsPerMillimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.MilliwattPerMillimeter), MilliwattsPerMillimeterTolerance);
            AssertEx.EqualTolerance(WattsPerCentimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.WattPerCentimeter), WattsPerCentimeterTolerance);
            AssertEx.EqualTolerance(WattsPerFootInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.WattPerFoot), WattsPerFootTolerance);
            AssertEx.EqualTolerance(WattsPerInchInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.WattPerInch), WattsPerInchTolerance);
            AssertEx.EqualTolerance(WattsPerMeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.WattPerMeter), WattsPerMeterTolerance);
            AssertEx.EqualTolerance(WattsPerMillimeterInOneWattPerMeter, wattpermeter.As(LinearPowerDensityUnit.WattPerMillimeter), WattsPerMillimeterTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = LinearPowerDensity.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
            var expectedValue = quantity.As(LinearPowerDensity.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
            var expectedUnit = LinearPowerDensity.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                LinearPowerDensity quantityToConvert = quantity;

                LinearPowerDensity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<LinearPowerDensityUnit> quantityToConvert = quantity;

                IQuantity<LinearPowerDensityUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<LinearPowerDensityUnit> quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<LinearPowerDensityUnit> quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new LinearPowerDensity(value: 1, unit: LinearPowerDensity.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 GW/ft", LinearPowerDensityUnit.GigawattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 GW/in", LinearPowerDensityUnit.GigawattPerInch, 4.2)]
        [InlineData("en-US", "4.2 GW/m", LinearPowerDensityUnit.GigawattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kW/ft", LinearPowerDensityUnit.KilowattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 kW/in", LinearPowerDensityUnit.KilowattPerInch, 4.2)]
        [InlineData("en-US", "4.2 kW/m", LinearPowerDensityUnit.KilowattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 MW/ft", LinearPowerDensityUnit.MegawattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 MW/in", LinearPowerDensityUnit.MegawattPerInch, 4.2)]
        [InlineData("en-US", "4.2 MW/m", LinearPowerDensityUnit.MegawattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mW/ft", LinearPowerDensityUnit.MilliwattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 mW/in", LinearPowerDensityUnit.MilliwattPerInch, 4.2)]
        [InlineData("en-US", "4.2 mW/m", LinearPowerDensityUnit.MilliwattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 W/cm", LinearPowerDensityUnit.WattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 W/ft", LinearPowerDensityUnit.WattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 W/in", LinearPowerDensityUnit.WattPerInch, 4.2)]
        [InlineData("en-US", "4.2 W/m", LinearPowerDensityUnit.WattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 W/mm", LinearPowerDensityUnit.WattPerMillimeter, 4.2)]
        public void Parse(string culture, string quantityString, LinearPowerDensityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = LinearPowerDensity.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 GW/ft", LinearPowerDensityUnit.GigawattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 GW/in", LinearPowerDensityUnit.GigawattPerInch, 4.2)]
        [InlineData("en-US", "4.2 GW/m", LinearPowerDensityUnit.GigawattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 kW/ft", LinearPowerDensityUnit.KilowattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 kW/in", LinearPowerDensityUnit.KilowattPerInch, 4.2)]
        [InlineData("en-US", "4.2 kW/m", LinearPowerDensityUnit.KilowattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 MW/ft", LinearPowerDensityUnit.MegawattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 MW/in", LinearPowerDensityUnit.MegawattPerInch, 4.2)]
        [InlineData("en-US", "4.2 MW/m", LinearPowerDensityUnit.MegawattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 mW/ft", LinearPowerDensityUnit.MilliwattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 mW/in", LinearPowerDensityUnit.MilliwattPerInch, 4.2)]
        [InlineData("en-US", "4.2 mW/m", LinearPowerDensityUnit.MilliwattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter, 4.2)]
        [InlineData("en-US", "4.2 W/cm", LinearPowerDensityUnit.WattPerCentimeter, 4.2)]
        [InlineData("en-US", "4.2 W/ft", LinearPowerDensityUnit.WattPerFoot, 4.2)]
        [InlineData("en-US", "4.2 W/in", LinearPowerDensityUnit.WattPerInch, 4.2)]
        [InlineData("en-US", "4.2 W/m", LinearPowerDensityUnit.WattPerMeter, 4.2)]
        [InlineData("en-US", "4.2 W/mm", LinearPowerDensityUnit.WattPerMillimeter, 4.2)]
        public void TryParse(string culture, string quantityString, LinearPowerDensityUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(LinearPowerDensity.TryParse(quantityString, out LinearPowerDensity parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter)]
        [InlineData("GW/ft", LinearPowerDensityUnit.GigawattPerFoot)]
        [InlineData("GW/in", LinearPowerDensityUnit.GigawattPerInch)]
        [InlineData("GW/m", LinearPowerDensityUnit.GigawattPerMeter)]
        [InlineData("GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter)]
        [InlineData("kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter)]
        [InlineData("kW/ft", LinearPowerDensityUnit.KilowattPerFoot)]
        [InlineData("kW/in", LinearPowerDensityUnit.KilowattPerInch)]
        [InlineData("kW/m", LinearPowerDensityUnit.KilowattPerMeter)]
        [InlineData("kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter)]
        [InlineData("MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter)]
        [InlineData("MW/ft", LinearPowerDensityUnit.MegawattPerFoot)]
        [InlineData("MW/in", LinearPowerDensityUnit.MegawattPerInch)]
        [InlineData("MW/m", LinearPowerDensityUnit.MegawattPerMeter)]
        [InlineData("MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter)]
        [InlineData("mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter)]
        [InlineData("mW/ft", LinearPowerDensityUnit.MilliwattPerFoot)]
        [InlineData("mW/in", LinearPowerDensityUnit.MilliwattPerInch)]
        [InlineData("mW/m", LinearPowerDensityUnit.MilliwattPerMeter)]
        [InlineData("mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter)]
        [InlineData("W/cm", LinearPowerDensityUnit.WattPerCentimeter)]
        [InlineData("W/ft", LinearPowerDensityUnit.WattPerFoot)]
        [InlineData("W/in", LinearPowerDensityUnit.WattPerInch)]
        [InlineData("W/m", LinearPowerDensityUnit.WattPerMeter)]
        [InlineData("W/mm", LinearPowerDensityUnit.WattPerMillimeter)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, LinearPowerDensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            LinearPowerDensityUnit parsedUnit = LinearPowerDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter)]
        [InlineData("GW/ft", LinearPowerDensityUnit.GigawattPerFoot)]
        [InlineData("GW/in", LinearPowerDensityUnit.GigawattPerInch)]
        [InlineData("GW/m", LinearPowerDensityUnit.GigawattPerMeter)]
        [InlineData("GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter)]
        [InlineData("kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter)]
        [InlineData("kW/ft", LinearPowerDensityUnit.KilowattPerFoot)]
        [InlineData("kW/in", LinearPowerDensityUnit.KilowattPerInch)]
        [InlineData("kW/m", LinearPowerDensityUnit.KilowattPerMeter)]
        [InlineData("kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter)]
        [InlineData("MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter)]
        [InlineData("MW/ft", LinearPowerDensityUnit.MegawattPerFoot)]
        [InlineData("MW/in", LinearPowerDensityUnit.MegawattPerInch)]
        [InlineData("MW/m", LinearPowerDensityUnit.MegawattPerMeter)]
        [InlineData("MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter)]
        [InlineData("mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter)]
        [InlineData("mW/ft", LinearPowerDensityUnit.MilliwattPerFoot)]
        [InlineData("mW/in", LinearPowerDensityUnit.MilliwattPerInch)]
        [InlineData("mW/m", LinearPowerDensityUnit.MilliwattPerMeter)]
        [InlineData("mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter)]
        [InlineData("W/cm", LinearPowerDensityUnit.WattPerCentimeter)]
        [InlineData("W/ft", LinearPowerDensityUnit.WattPerFoot)]
        [InlineData("W/in", LinearPowerDensityUnit.WattPerInch)]
        [InlineData("W/m", LinearPowerDensityUnit.WattPerMeter)]
        [InlineData("W/mm", LinearPowerDensityUnit.WattPerMillimeter)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, LinearPowerDensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            LinearPowerDensityUnit parsedUnit = LinearPowerDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter)]
        [InlineData("en-US", "GW/ft", LinearPowerDensityUnit.GigawattPerFoot)]
        [InlineData("en-US", "GW/in", LinearPowerDensityUnit.GigawattPerInch)]
        [InlineData("en-US", "GW/m", LinearPowerDensityUnit.GigawattPerMeter)]
        [InlineData("en-US", "GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter)]
        [InlineData("en-US", "kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter)]
        [InlineData("en-US", "kW/ft", LinearPowerDensityUnit.KilowattPerFoot)]
        [InlineData("en-US", "kW/in", LinearPowerDensityUnit.KilowattPerInch)]
        [InlineData("en-US", "kW/m", LinearPowerDensityUnit.KilowattPerMeter)]
        [InlineData("en-US", "kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter)]
        [InlineData("en-US", "MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter)]
        [InlineData("en-US", "MW/ft", LinearPowerDensityUnit.MegawattPerFoot)]
        [InlineData("en-US", "MW/in", LinearPowerDensityUnit.MegawattPerInch)]
        [InlineData("en-US", "MW/m", LinearPowerDensityUnit.MegawattPerMeter)]
        [InlineData("en-US", "MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter)]
        [InlineData("en-US", "mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter)]
        [InlineData("en-US", "mW/ft", LinearPowerDensityUnit.MilliwattPerFoot)]
        [InlineData("en-US", "mW/in", LinearPowerDensityUnit.MilliwattPerInch)]
        [InlineData("en-US", "mW/m", LinearPowerDensityUnit.MilliwattPerMeter)]
        [InlineData("en-US", "mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter)]
        [InlineData("en-US", "W/cm", LinearPowerDensityUnit.WattPerCentimeter)]
        [InlineData("en-US", "W/ft", LinearPowerDensityUnit.WattPerFoot)]
        [InlineData("en-US", "W/in", LinearPowerDensityUnit.WattPerInch)]
        [InlineData("en-US", "W/m", LinearPowerDensityUnit.WattPerMeter)]
        [InlineData("en-US", "W/mm", LinearPowerDensityUnit.WattPerMillimeter)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, LinearPowerDensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            LinearPowerDensityUnit parsedUnit = LinearPowerDensity.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter)]
        [InlineData("en-US", "GW/ft", LinearPowerDensityUnit.GigawattPerFoot)]
        [InlineData("en-US", "GW/in", LinearPowerDensityUnit.GigawattPerInch)]
        [InlineData("en-US", "GW/m", LinearPowerDensityUnit.GigawattPerMeter)]
        [InlineData("en-US", "GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter)]
        [InlineData("en-US", "kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter)]
        [InlineData("en-US", "kW/ft", LinearPowerDensityUnit.KilowattPerFoot)]
        [InlineData("en-US", "kW/in", LinearPowerDensityUnit.KilowattPerInch)]
        [InlineData("en-US", "kW/m", LinearPowerDensityUnit.KilowattPerMeter)]
        [InlineData("en-US", "kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter)]
        [InlineData("en-US", "MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter)]
        [InlineData("en-US", "MW/ft", LinearPowerDensityUnit.MegawattPerFoot)]
        [InlineData("en-US", "MW/in", LinearPowerDensityUnit.MegawattPerInch)]
        [InlineData("en-US", "MW/m", LinearPowerDensityUnit.MegawattPerMeter)]
        [InlineData("en-US", "MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter)]
        [InlineData("en-US", "mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter)]
        [InlineData("en-US", "mW/ft", LinearPowerDensityUnit.MilliwattPerFoot)]
        [InlineData("en-US", "mW/in", LinearPowerDensityUnit.MilliwattPerInch)]
        [InlineData("en-US", "mW/m", LinearPowerDensityUnit.MilliwattPerMeter)]
        [InlineData("en-US", "mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter)]
        [InlineData("en-US", "W/cm", LinearPowerDensityUnit.WattPerCentimeter)]
        [InlineData("en-US", "W/ft", LinearPowerDensityUnit.WattPerFoot)]
        [InlineData("en-US", "W/in", LinearPowerDensityUnit.WattPerInch)]
        [InlineData("en-US", "W/m", LinearPowerDensityUnit.WattPerMeter)]
        [InlineData("en-US", "W/mm", LinearPowerDensityUnit.WattPerMillimeter)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, LinearPowerDensityUnit expectedUnit)
        {
            LinearPowerDensityUnit parsedUnit = LinearPowerDensity.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter)]
        [InlineData("GW/ft", LinearPowerDensityUnit.GigawattPerFoot)]
        [InlineData("GW/in", LinearPowerDensityUnit.GigawattPerInch)]
        [InlineData("GW/m", LinearPowerDensityUnit.GigawattPerMeter)]
        [InlineData("GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter)]
        [InlineData("kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter)]
        [InlineData("kW/ft", LinearPowerDensityUnit.KilowattPerFoot)]
        [InlineData("kW/in", LinearPowerDensityUnit.KilowattPerInch)]
        [InlineData("kW/m", LinearPowerDensityUnit.KilowattPerMeter)]
        [InlineData("kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter)]
        [InlineData("MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter)]
        [InlineData("MW/ft", LinearPowerDensityUnit.MegawattPerFoot)]
        [InlineData("MW/in", LinearPowerDensityUnit.MegawattPerInch)]
        [InlineData("MW/m", LinearPowerDensityUnit.MegawattPerMeter)]
        [InlineData("MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter)]
        [InlineData("mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter)]
        [InlineData("mW/ft", LinearPowerDensityUnit.MilliwattPerFoot)]
        [InlineData("mW/in", LinearPowerDensityUnit.MilliwattPerInch)]
        [InlineData("mW/m", LinearPowerDensityUnit.MilliwattPerMeter)]
        [InlineData("mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter)]
        [InlineData("W/cm", LinearPowerDensityUnit.WattPerCentimeter)]
        [InlineData("W/ft", LinearPowerDensityUnit.WattPerFoot)]
        [InlineData("W/in", LinearPowerDensityUnit.WattPerInch)]
        [InlineData("W/m", LinearPowerDensityUnit.WattPerMeter)]
        [InlineData("W/mm", LinearPowerDensityUnit.WattPerMillimeter)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, LinearPowerDensityUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(LinearPowerDensity.TryParseUnit(abbreviation, out LinearPowerDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter)]
        [InlineData("GW/ft", LinearPowerDensityUnit.GigawattPerFoot)]
        [InlineData("GW/in", LinearPowerDensityUnit.GigawattPerInch)]
        [InlineData("GW/m", LinearPowerDensityUnit.GigawattPerMeter)]
        [InlineData("GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter)]
        [InlineData("kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter)]
        [InlineData("kW/ft", LinearPowerDensityUnit.KilowattPerFoot)]
        [InlineData("kW/in", LinearPowerDensityUnit.KilowattPerInch)]
        [InlineData("kW/m", LinearPowerDensityUnit.KilowattPerMeter)]
        [InlineData("kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter)]
        [InlineData("MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter)]
        [InlineData("MW/ft", LinearPowerDensityUnit.MegawattPerFoot)]
        [InlineData("MW/in", LinearPowerDensityUnit.MegawattPerInch)]
        [InlineData("MW/m", LinearPowerDensityUnit.MegawattPerMeter)]
        [InlineData("MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter)]
        [InlineData("mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter)]
        [InlineData("mW/ft", LinearPowerDensityUnit.MilliwattPerFoot)]
        [InlineData("mW/in", LinearPowerDensityUnit.MilliwattPerInch)]
        [InlineData("mW/m", LinearPowerDensityUnit.MilliwattPerMeter)]
        [InlineData("mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter)]
        [InlineData("W/cm", LinearPowerDensityUnit.WattPerCentimeter)]
        [InlineData("W/ft", LinearPowerDensityUnit.WattPerFoot)]
        [InlineData("W/in", LinearPowerDensityUnit.WattPerInch)]
        [InlineData("W/m", LinearPowerDensityUnit.WattPerMeter)]
        [InlineData("W/mm", LinearPowerDensityUnit.WattPerMillimeter)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, LinearPowerDensityUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(LinearPowerDensity.TryParseUnit(abbreviation, out LinearPowerDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter)]
        [InlineData("en-US", "GW/ft", LinearPowerDensityUnit.GigawattPerFoot)]
        [InlineData("en-US", "GW/in", LinearPowerDensityUnit.GigawattPerInch)]
        [InlineData("en-US", "GW/m", LinearPowerDensityUnit.GigawattPerMeter)]
        [InlineData("en-US", "GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter)]
        [InlineData("en-US", "kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter)]
        [InlineData("en-US", "kW/ft", LinearPowerDensityUnit.KilowattPerFoot)]
        [InlineData("en-US", "kW/in", LinearPowerDensityUnit.KilowattPerInch)]
        [InlineData("en-US", "kW/m", LinearPowerDensityUnit.KilowattPerMeter)]
        [InlineData("en-US", "kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter)]
        [InlineData("en-US", "MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter)]
        [InlineData("en-US", "MW/ft", LinearPowerDensityUnit.MegawattPerFoot)]
        [InlineData("en-US", "MW/in", LinearPowerDensityUnit.MegawattPerInch)]
        [InlineData("en-US", "MW/m", LinearPowerDensityUnit.MegawattPerMeter)]
        [InlineData("en-US", "MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter)]
        [InlineData("en-US", "mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter)]
        [InlineData("en-US", "mW/ft", LinearPowerDensityUnit.MilliwattPerFoot)]
        [InlineData("en-US", "mW/in", LinearPowerDensityUnit.MilliwattPerInch)]
        [InlineData("en-US", "mW/m", LinearPowerDensityUnit.MilliwattPerMeter)]
        [InlineData("en-US", "mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter)]
        [InlineData("en-US", "W/cm", LinearPowerDensityUnit.WattPerCentimeter)]
        [InlineData("en-US", "W/ft", LinearPowerDensityUnit.WattPerFoot)]
        [InlineData("en-US", "W/in", LinearPowerDensityUnit.WattPerInch)]
        [InlineData("en-US", "W/m", LinearPowerDensityUnit.WattPerMeter)]
        [InlineData("en-US", "W/mm", LinearPowerDensityUnit.WattPerMillimeter)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, LinearPowerDensityUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(LinearPowerDensity.TryParseUnit(abbreviation, out LinearPowerDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "GW/cm", LinearPowerDensityUnit.GigawattPerCentimeter)]
        [InlineData("en-US", "GW/ft", LinearPowerDensityUnit.GigawattPerFoot)]
        [InlineData("en-US", "GW/in", LinearPowerDensityUnit.GigawattPerInch)]
        [InlineData("en-US", "GW/m", LinearPowerDensityUnit.GigawattPerMeter)]
        [InlineData("en-US", "GW/mm", LinearPowerDensityUnit.GigawattPerMillimeter)]
        [InlineData("en-US", "kW/cm", LinearPowerDensityUnit.KilowattPerCentimeter)]
        [InlineData("en-US", "kW/ft", LinearPowerDensityUnit.KilowattPerFoot)]
        [InlineData("en-US", "kW/in", LinearPowerDensityUnit.KilowattPerInch)]
        [InlineData("en-US", "kW/m", LinearPowerDensityUnit.KilowattPerMeter)]
        [InlineData("en-US", "kW/mm", LinearPowerDensityUnit.KilowattPerMillimeter)]
        [InlineData("en-US", "MW/cm", LinearPowerDensityUnit.MegawattPerCentimeter)]
        [InlineData("en-US", "MW/ft", LinearPowerDensityUnit.MegawattPerFoot)]
        [InlineData("en-US", "MW/in", LinearPowerDensityUnit.MegawattPerInch)]
        [InlineData("en-US", "MW/m", LinearPowerDensityUnit.MegawattPerMeter)]
        [InlineData("en-US", "MW/mm", LinearPowerDensityUnit.MegawattPerMillimeter)]
        [InlineData("en-US", "mW/cm", LinearPowerDensityUnit.MilliwattPerCentimeter)]
        [InlineData("en-US", "mW/ft", LinearPowerDensityUnit.MilliwattPerFoot)]
        [InlineData("en-US", "mW/in", LinearPowerDensityUnit.MilliwattPerInch)]
        [InlineData("en-US", "mW/m", LinearPowerDensityUnit.MilliwattPerMeter)]
        [InlineData("en-US", "mW/mm", LinearPowerDensityUnit.MilliwattPerMillimeter)]
        [InlineData("en-US", "W/cm", LinearPowerDensityUnit.WattPerCentimeter)]
        [InlineData("en-US", "W/ft", LinearPowerDensityUnit.WattPerFoot)]
        [InlineData("en-US", "W/in", LinearPowerDensityUnit.WattPerInch)]
        [InlineData("en-US", "W/m", LinearPowerDensityUnit.WattPerMeter)]
        [InlineData("en-US", "W/mm", LinearPowerDensityUnit.WattPerMillimeter)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, LinearPowerDensityUnit expectedUnit)
        {
            Assert.True(LinearPowerDensity.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out LinearPowerDensityUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", LinearPowerDensityUnit.GigawattPerCentimeter, "GW/cm")]
        [InlineData("en-US", LinearPowerDensityUnit.GigawattPerFoot, "GW/ft")]
        [InlineData("en-US", LinearPowerDensityUnit.GigawattPerInch, "GW/in")]
        [InlineData("en-US", LinearPowerDensityUnit.GigawattPerMeter, "GW/m")]
        [InlineData("en-US", LinearPowerDensityUnit.GigawattPerMillimeter, "GW/mm")]
        [InlineData("en-US", LinearPowerDensityUnit.KilowattPerCentimeter, "kW/cm")]
        [InlineData("en-US", LinearPowerDensityUnit.KilowattPerFoot, "kW/ft")]
        [InlineData("en-US", LinearPowerDensityUnit.KilowattPerInch, "kW/in")]
        [InlineData("en-US", LinearPowerDensityUnit.KilowattPerMeter, "kW/m")]
        [InlineData("en-US", LinearPowerDensityUnit.KilowattPerMillimeter, "kW/mm")]
        [InlineData("en-US", LinearPowerDensityUnit.MegawattPerCentimeter, "MW/cm")]
        [InlineData("en-US", LinearPowerDensityUnit.MegawattPerFoot, "MW/ft")]
        [InlineData("en-US", LinearPowerDensityUnit.MegawattPerInch, "MW/in")]
        [InlineData("en-US", LinearPowerDensityUnit.MegawattPerMeter, "MW/m")]
        [InlineData("en-US", LinearPowerDensityUnit.MegawattPerMillimeter, "MW/mm")]
        [InlineData("en-US", LinearPowerDensityUnit.MilliwattPerCentimeter, "mW/cm")]
        [InlineData("en-US", LinearPowerDensityUnit.MilliwattPerFoot, "mW/ft")]
        [InlineData("en-US", LinearPowerDensityUnit.MilliwattPerInch, "mW/in")]
        [InlineData("en-US", LinearPowerDensityUnit.MilliwattPerMeter, "mW/m")]
        [InlineData("en-US", LinearPowerDensityUnit.MilliwattPerMillimeter, "mW/mm")]
        [InlineData("en-US", LinearPowerDensityUnit.WattPerCentimeter, "W/cm")]
        [InlineData("en-US", LinearPowerDensityUnit.WattPerFoot, "W/ft")]
        [InlineData("en-US", LinearPowerDensityUnit.WattPerInch, "W/in")]
        [InlineData("en-US", LinearPowerDensityUnit.WattPerMeter, "W/m")]
        [InlineData("en-US", LinearPowerDensityUnit.WattPerMillimeter, "W/mm")]
        public void GetAbbreviationForCulture(string culture, LinearPowerDensityUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = LinearPowerDensity.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(LinearPowerDensity.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = LinearPowerDensity.GetAbbreviation(unit);

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(LinearPowerDensityUnit unit)
        {
            var inBaseUnits = LinearPowerDensity.From(1.0, LinearPowerDensity.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(LinearPowerDensityUnit unit)
        {
            var quantity = LinearPowerDensity.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(LinearPowerDensityUnit unit)
        {
            Assert.All(LinearPowerDensity.Units.Where(u => u != LinearPowerDensity.BaseUnit), fromUnit =>
            {
                var quantity = LinearPowerDensity.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(LinearPowerDensityUnit unit)
        {
            var quantity = default(LinearPowerDensity);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(LinearPowerDensityUnit unit)
        {
            var quantity = LinearPowerDensity.From(3, LinearPowerDensity.BaseUnit);
            LinearPowerDensity expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<LinearPowerDensityUnit> quantityToConvert = quantity;
                IQuantity<LinearPowerDensityUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            LinearPowerDensity wattpermeter = LinearPowerDensity.FromWattsPerMeter(3);
            Assert.Equal(3, LinearPowerDensity.FromGigawattsPerCentimeter(wattpermeter.GigawattsPerCentimeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromGigawattsPerFoot(wattpermeter.GigawattsPerFoot).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromGigawattsPerInch(wattpermeter.GigawattsPerInch).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromGigawattsPerMeter(wattpermeter.GigawattsPerMeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromGigawattsPerMillimeter(wattpermeter.GigawattsPerMillimeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromKilowattsPerCentimeter(wattpermeter.KilowattsPerCentimeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromKilowattsPerFoot(wattpermeter.KilowattsPerFoot).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromKilowattsPerInch(wattpermeter.KilowattsPerInch).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromKilowattsPerMeter(wattpermeter.KilowattsPerMeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromKilowattsPerMillimeter(wattpermeter.KilowattsPerMillimeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMegawattsPerCentimeter(wattpermeter.MegawattsPerCentimeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMegawattsPerFoot(wattpermeter.MegawattsPerFoot).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMegawattsPerInch(wattpermeter.MegawattsPerInch).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMegawattsPerMeter(wattpermeter.MegawattsPerMeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMegawattsPerMillimeter(wattpermeter.MegawattsPerMillimeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMilliwattsPerCentimeter(wattpermeter.MilliwattsPerCentimeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMilliwattsPerFoot(wattpermeter.MilliwattsPerFoot).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMilliwattsPerInch(wattpermeter.MilliwattsPerInch).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMilliwattsPerMeter(wattpermeter.MilliwattsPerMeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromMilliwattsPerMillimeter(wattpermeter.MilliwattsPerMillimeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromWattsPerCentimeter(wattpermeter.WattsPerCentimeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromWattsPerFoot(wattpermeter.WattsPerFoot).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromWattsPerInch(wattpermeter.WattsPerInch).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromWattsPerMeter(wattpermeter.WattsPerMeter).WattsPerMeter);
            Assert.Equal(3, LinearPowerDensity.FromWattsPerMillimeter(wattpermeter.WattsPerMillimeter).WattsPerMeter);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            LinearPowerDensity v = LinearPowerDensity.FromWattsPerMeter(1);
            Assert.Equal(-1, -v.WattsPerMeter);
            Assert.Equal(2, (LinearPowerDensity.FromWattsPerMeter(3) - v).WattsPerMeter);
            Assert.Equal(2, (v + v).WattsPerMeter);
            Assert.Equal(10, (v * 10).WattsPerMeter);
            Assert.Equal(10, (10 * v).WattsPerMeter);
            Assert.Equal(2, (LinearPowerDensity.FromWattsPerMeter(10) / 5).WattsPerMeter);
            Assert.Equal(2, LinearPowerDensity.FromWattsPerMeter(10) / LinearPowerDensity.FromWattsPerMeter(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            LinearPowerDensity oneWattPerMeter = LinearPowerDensity.FromWattsPerMeter(1);
            LinearPowerDensity twoWattsPerMeter = LinearPowerDensity.FromWattsPerMeter(2);

            Assert.True(oneWattPerMeter < twoWattsPerMeter);
            Assert.True(oneWattPerMeter <= twoWattsPerMeter);
            Assert.True(twoWattsPerMeter > oneWattPerMeter);
            Assert.True(twoWattsPerMeter >= oneWattPerMeter);

            Assert.False(oneWattPerMeter > twoWattsPerMeter);
            Assert.False(oneWattPerMeter >= twoWattsPerMeter);
            Assert.False(twoWattsPerMeter < oneWattPerMeter);
            Assert.False(twoWattsPerMeter <= oneWattPerMeter);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            LinearPowerDensity wattpermeter = LinearPowerDensity.FromWattsPerMeter(1);
            Assert.Equal(0, wattpermeter.CompareTo(wattpermeter));
            Assert.True(wattpermeter.CompareTo(LinearPowerDensity.Zero) > 0);
            Assert.True(LinearPowerDensity.Zero.CompareTo(wattpermeter) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            LinearPowerDensity wattpermeter = LinearPowerDensity.FromWattsPerMeter(1);
            Assert.Throws<ArgumentException>(() => wattpermeter.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            LinearPowerDensity wattpermeter = LinearPowerDensity.FromWattsPerMeter(1);
            Assert.Throws<ArgumentNullException>(() => wattpermeter.CompareTo(null));
        }

        [Theory]
        [InlineData(1, LinearPowerDensityUnit.WattPerMeter, 1, LinearPowerDensityUnit.WattPerMeter, true)]  // Same value and unit.
        [InlineData(1, LinearPowerDensityUnit.WattPerMeter, 2, LinearPowerDensityUnit.WattPerMeter, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, LinearPowerDensityUnit unitA, double valueB, LinearPowerDensityUnit unitB, bool expectEqual)
        {
            var a = new LinearPowerDensity(valueA, unitA);
            var b = new LinearPowerDensity(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = LinearPowerDensity.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            LinearPowerDensity wattpermeter = LinearPowerDensity.FromWattsPerMeter(1);
            Assert.False(wattpermeter.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            LinearPowerDensity wattpermeter = LinearPowerDensity.FromWattsPerMeter(1);
            Assert.False(wattpermeter.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = LinearPowerDensity.FromWattsPerMeter(firstValue);
            var otherQuantity = LinearPowerDensity.FromWattsPerMeter(secondValue);
            LinearPowerDensity maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, LinearPowerDensity.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = LinearPowerDensity.FromWattsPerMeter(1);
            var negativeTolerance = LinearPowerDensity.FromWattsPerMeter(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<LinearPowerDensityUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(LinearPowerDensity.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(LinearPowerDensity.Info.Units, LinearPowerDensity.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, LinearPowerDensity.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 GW/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerCentimeter).ToString());
            Assert.Equal("1 GW/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerFoot).ToString());
            Assert.Equal("1 GW/in", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerInch).ToString());
            Assert.Equal("1 GW/m", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerMeter).ToString());
            Assert.Equal("1 GW/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerMillimeter).ToString());
            Assert.Equal("1 kW/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerCentimeter).ToString());
            Assert.Equal("1 kW/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerFoot).ToString());
            Assert.Equal("1 kW/in", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerInch).ToString());
            Assert.Equal("1 kW/m", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerMeter).ToString());
            Assert.Equal("1 kW/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerMillimeter).ToString());
            Assert.Equal("1 MW/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerCentimeter).ToString());
            Assert.Equal("1 MW/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerFoot).ToString());
            Assert.Equal("1 MW/in", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerInch).ToString());
            Assert.Equal("1 MW/m", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerMeter).ToString());
            Assert.Equal("1 MW/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerMillimeter).ToString());
            Assert.Equal("1 mW/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerCentimeter).ToString());
            Assert.Equal("1 mW/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerFoot).ToString());
            Assert.Equal("1 mW/in", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerInch).ToString());
            Assert.Equal("1 mW/m", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerMeter).ToString());
            Assert.Equal("1 mW/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerMillimeter).ToString());
            Assert.Equal("1 W/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerCentimeter).ToString());
            Assert.Equal("1 W/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerFoot).ToString());
            Assert.Equal("1 W/in", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerInch).ToString());
            Assert.Equal("1 W/m", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerMeter).ToString());
            Assert.Equal("1 W/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerMillimeter).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 GW/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 GW/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerFoot).ToString(swedishCulture));
            Assert.Equal("1 GW/in", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerInch).ToString(swedishCulture));
            Assert.Equal("1 GW/m", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerMeter).ToString(swedishCulture));
            Assert.Equal("1 GW/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.GigawattPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 kW/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 kW/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerFoot).ToString(swedishCulture));
            Assert.Equal("1 kW/in", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerInch).ToString(swedishCulture));
            Assert.Equal("1 kW/m", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerMeter).ToString(swedishCulture));
            Assert.Equal("1 kW/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.KilowattPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 MW/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 MW/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerFoot).ToString(swedishCulture));
            Assert.Equal("1 MW/in", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerInch).ToString(swedishCulture));
            Assert.Equal("1 MW/m", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerMeter).ToString(swedishCulture));
            Assert.Equal("1 MW/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.MegawattPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 mW/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 mW/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerFoot).ToString(swedishCulture));
            Assert.Equal("1 mW/in", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerInch).ToString(swedishCulture));
            Assert.Equal("1 mW/m", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerMeter).ToString(swedishCulture));
            Assert.Equal("1 mW/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.MilliwattPerMillimeter).ToString(swedishCulture));
            Assert.Equal("1 W/cm", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerCentimeter).ToString(swedishCulture));
            Assert.Equal("1 W/ft", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerFoot).ToString(swedishCulture));
            Assert.Equal("1 W/in", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerInch).ToString(swedishCulture));
            Assert.Equal("1 W/m", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerMeter).ToString(swedishCulture));
            Assert.Equal("1 W/mm", new LinearPowerDensity(1, LinearPowerDensityUnit.WattPerMillimeter).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 W/m", new LinearPowerDensity(0.123456, LinearPowerDensityUnit.WattPerMeter).ToString("s1"));
            Assert.Equal("0.12 W/m", new LinearPowerDensity(0.123456, LinearPowerDensityUnit.WattPerMeter).ToString("s2"));
            Assert.Equal("0.123 W/m", new LinearPowerDensity(0.123456, LinearPowerDensityUnit.WattPerMeter).ToString("s3"));
            Assert.Equal("0.1235 W/m", new LinearPowerDensity(0.123456, LinearPowerDensityUnit.WattPerMeter).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 W/m", new LinearPowerDensity(0.123456, LinearPowerDensityUnit.WattPerMeter).ToString("s1", culture));
            Assert.Equal("0.12 W/m", new LinearPowerDensity(0.123456, LinearPowerDensityUnit.WattPerMeter).ToString("s2", culture));
            Assert.Equal("0.123 W/m", new LinearPowerDensity(0.123456, LinearPowerDensityUnit.WattPerMeter).ToString("s3", culture));
            Assert.Equal("0.1235 W/m", new LinearPowerDensity(0.123456, LinearPowerDensityUnit.WattPerMeter).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = LinearPowerDensity.FromWattsPerMeter(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = LinearPowerDensity.FromWattsPerMeter(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = LinearPowerDensity.FromWattsPerMeter(1.0);
            var expected = Comparison.GetHashCode(typeof(LinearPowerDensity), quantity.As(LinearPowerDensity.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = LinearPowerDensity.FromWattsPerMeter(value);
            Assert.Equal(LinearPowerDensity.FromWattsPerMeter(-value), -quantity);
        }
    }
}
