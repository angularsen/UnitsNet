//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Capacitance is the capacity of a material object or device to store electric charge.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Capacitance
    /// </remarks>
    public struct  ElectricCapacitance
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ElectricCapacitanceUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public ElectricCapacitanceUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public ElectricCapacitance(double value, ElectricCapacitanceUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of ElectricCapacitance, which is Second. All conversions go via this value.
        /// </summary>
        public static ElectricCapacitanceUnit BaseUnit { get; } = ElectricCapacitanceUnit.Farad;

        /// <summary>
        /// Represents the largest possible value of ElectricCapacitance.
        /// </summary>
        public static ElectricCapacitance MaxValue { get; } = new ElectricCapacitance(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of ElectricCapacitance.
        /// </summary>
        public static ElectricCapacitance MinValue { get; } = new ElectricCapacitance(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static ElectricCapacitance Zero { get; } = new ElectricCapacitance(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricCapacitanceUnit.Farad"/>
        /// </summary>
        public double Farads => As(ElectricCapacitanceUnit.Farad);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricCapacitanceUnit.Kilofarad"/>
        /// </summary>
        public double Kilofarads => As(ElectricCapacitanceUnit.Kilofarad);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricCapacitanceUnit.Megafarad"/>
        /// </summary>
        public double Megafarads => As(ElectricCapacitanceUnit.Megafarad);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricCapacitanceUnit.Microfarad"/>
        /// </summary>
        public double Microfarads => As(ElectricCapacitanceUnit.Microfarad);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricCapacitanceUnit.Millifarad"/>
        /// </summary>
        public double Millifarads => As(ElectricCapacitanceUnit.Millifarad);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricCapacitanceUnit.Nanofarad"/>
        /// </summary>
        public double Nanofarads => As(ElectricCapacitanceUnit.Nanofarad);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricCapacitanceUnit.Picofarad"/>
        /// </summary>
        public double Picofarads => As(ElectricCapacitanceUnit.Picofarad);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ElectricCapacitance"/> from <see cref="ElectricCapacitanceUnit.Farad"/>.
        /// </summary>
        public static ElectricCapacitance FromFarads(double farads) => new ElectricCapacitance(farads, ElectricCapacitanceUnit.Farad);

        /// <summary>
        ///     Creates a <see cref="ElectricCapacitance"/> from <see cref="ElectricCapacitanceUnit.Kilofarad"/>.
        /// </summary>
        public static ElectricCapacitance FromKilofarads(double kilofarads) => new ElectricCapacitance(kilofarads, ElectricCapacitanceUnit.Kilofarad);

        /// <summary>
        ///     Creates a <see cref="ElectricCapacitance"/> from <see cref="ElectricCapacitanceUnit.Megafarad"/>.
        /// </summary>
        public static ElectricCapacitance FromMegafarads(double megafarads) => new ElectricCapacitance(megafarads, ElectricCapacitanceUnit.Megafarad);

        /// <summary>
        ///     Creates a <see cref="ElectricCapacitance"/> from <see cref="ElectricCapacitanceUnit.Microfarad"/>.
        /// </summary>
        public static ElectricCapacitance FromMicrofarads(double microfarads) => new ElectricCapacitance(microfarads, ElectricCapacitanceUnit.Microfarad);

        /// <summary>
        ///     Creates a <see cref="ElectricCapacitance"/> from <see cref="ElectricCapacitanceUnit.Millifarad"/>.
        /// </summary>
        public static ElectricCapacitance FromMillifarads(double millifarads) => new ElectricCapacitance(millifarads, ElectricCapacitanceUnit.Millifarad);

        /// <summary>
        ///     Creates a <see cref="ElectricCapacitance"/> from <see cref="ElectricCapacitanceUnit.Nanofarad"/>.
        /// </summary>
        public static ElectricCapacitance FromNanofarads(double nanofarads) => new ElectricCapacitance(nanofarads, ElectricCapacitanceUnit.Nanofarad);

        /// <summary>
        ///     Creates a <see cref="ElectricCapacitance"/> from <see cref="ElectricCapacitanceUnit.Picofarad"/>.
        /// </summary>
        public static ElectricCapacitance FromPicofarads(double picofarads) => new ElectricCapacitance(picofarads, ElectricCapacitanceUnit.Picofarad);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricCapacitanceUnit" /> to <see cref="ElectricCapacitance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricCapacitance unit value.</returns>
        public static ElectricCapacitance From(double value, ElectricCapacitanceUnit fromUnit)
        {
            return new ElectricCapacitance(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(ElectricCapacitanceUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this ElectricCapacitance to another ElectricCapacitance with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A ElectricCapacitance with the specified unit.</returns>
                public ElectricCapacitance ToUnit(ElectricCapacitanceUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new ElectricCapacitance(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        ElectricCapacitanceUnit.Farad => _value,
                        ElectricCapacitanceUnit.Kilofarad => (_value) * 1e3d,
                        ElectricCapacitanceUnit.Megafarad => (_value) * 1e6d,
                        ElectricCapacitanceUnit.Microfarad => (_value) * 1e-6d,
                        ElectricCapacitanceUnit.Millifarad => (_value) * 1e-3d,
                        ElectricCapacitanceUnit.Nanofarad => (_value) * 1e-9d,
                        ElectricCapacitanceUnit.Picofarad => (_value) * 1e-12d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(ElectricCapacitanceUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        ElectricCapacitanceUnit.Farad => baseUnitValue,
                        ElectricCapacitanceUnit.Kilofarad => (baseUnitValue) / 1e3d,
                        ElectricCapacitanceUnit.Megafarad => (baseUnitValue) / 1e6d,
                        ElectricCapacitanceUnit.Microfarad => (baseUnitValue) / 1e-6d,
                        ElectricCapacitanceUnit.Millifarad => (baseUnitValue) / 1e-3d,
                        ElectricCapacitanceUnit.Nanofarad => (baseUnitValue) / 1e-9d,
                        ElectricCapacitanceUnit.Picofarad => (baseUnitValue) / 1e-12d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

