//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using UnitsNet.Units;

namespace UnitsNet
{
    /// <inheritdoc />
    /// <summary>
    ///     Electrical susceptance is the imaginary part of admittance, where the real part is conductance.
    /// </summary>
    /// <remarks>
    ///     https://en.wikipedia.org/wiki/Electrical_susceptance
    /// </remarks>
    public struct  ElectricSusceptance
    {
        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        private readonly double _value;

        /// <summary>
        ///     The unit this quantity was constructed with.
        /// </summary>
        private readonly ElectricSusceptanceUnit _unit;

        /// <summary>
        ///     The numeric value this quantity was constructed with.
        /// </summary>
        public double Value => _value;

        /// <inheritdoc />
        public ElectricSusceptanceUnit Unit => _unit;

        /// <summary>
        ///     Creates the quantity with the given numeric value and unit.
        /// </summary>
        /// <param name="value">The numeric value to construct this quantity with.</param>
        /// <param name="unit">The unit representation to construct this quantity with.</param>
        public ElectricSusceptance(double value, ElectricSusceptanceUnit unit)
        {
            _value = value;
            _unit = unit;
        }

        /// <summary>
        ///     The base unit of ElectricSusceptance, which is Second. All conversions go via this value.
        /// </summary>
        public static ElectricSusceptanceUnit BaseUnit { get; } = ElectricSusceptanceUnit.Siemens;

        /// <summary>
        /// Represents the largest possible value of ElectricSusceptance.
        /// </summary>
        public static ElectricSusceptance MaxValue { get; } = new ElectricSusceptance(double.MaxValue, BaseUnit);

        /// <summary>
        /// Represents the smallest possible value of ElectricSusceptance.
        /// </summary>
        public static ElectricSusceptance MinValue { get; } = new ElectricSusceptance(double.MinValue, BaseUnit);

        /// <summary>
        ///     Gets an instance of this quantity with a value of 0 in the base unit Second.
        /// </summary>
        public static ElectricSusceptance Zero { get; } = new ElectricSusceptance(0, BaseUnit);
        #region Conversion Properties

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Gigamho"/>
        /// </summary>
        public double Gigamhos => As(ElectricSusceptanceUnit.Gigamho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Gigasiemens"/>
        /// </summary>
        public double Gigasiemens => As(ElectricSusceptanceUnit.Gigasiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Kilomho"/>
        /// </summary>
        public double Kilomhos => As(ElectricSusceptanceUnit.Kilomho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Kilosiemens"/>
        /// </summary>
        public double Kilosiemens => As(ElectricSusceptanceUnit.Kilosiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Megamho"/>
        /// </summary>
        public double Megamhos => As(ElectricSusceptanceUnit.Megamho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Megasiemens"/>
        /// </summary>
        public double Megasiemens => As(ElectricSusceptanceUnit.Megasiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Mho"/>
        /// </summary>
        public double Mhos => As(ElectricSusceptanceUnit.Mho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Micromho"/>
        /// </summary>
        public double Micromhos => As(ElectricSusceptanceUnit.Micromho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Microsiemens"/>
        /// </summary>
        public double Microsiemens => As(ElectricSusceptanceUnit.Microsiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Millimho"/>
        /// </summary>
        public double Millimhos => As(ElectricSusceptanceUnit.Millimho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Millisiemens"/>
        /// </summary>
        public double Millisiemens => As(ElectricSusceptanceUnit.Millisiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Nanomho"/>
        /// </summary>
        public double Nanomhos => As(ElectricSusceptanceUnit.Nanomho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Nanosiemens"/>
        /// </summary>
        public double Nanosiemens => As(ElectricSusceptanceUnit.Nanosiemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Siemens"/>
        /// </summary>
        public double Siemens => As(ElectricSusceptanceUnit.Siemens);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Teramho"/>
        /// </summary>
        public double Teramhos => As(ElectricSusceptanceUnit.Teramho);

        /// <summary>
        ///     Gets a <see cref="double"/> value of this quantity converted into <see cref="ElectricSusceptanceUnit.Terasiemens"/>
        /// </summary>
        public double Terasiemens => As(ElectricSusceptanceUnit.Terasiemens);

        #endregion

        #region Static Factory Methods

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Gigamho"/>.
        /// </summary>
        public static ElectricSusceptance FromGigamhos(double gigamhos) => new ElectricSusceptance(gigamhos, ElectricSusceptanceUnit.Gigamho);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Gigasiemens"/>.
        /// </summary>
        public static ElectricSusceptance FromGigasiemens(double gigasiemens) => new ElectricSusceptance(gigasiemens, ElectricSusceptanceUnit.Gigasiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Kilomho"/>.
        /// </summary>
        public static ElectricSusceptance FromKilomhos(double kilomhos) => new ElectricSusceptance(kilomhos, ElectricSusceptanceUnit.Kilomho);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Kilosiemens"/>.
        /// </summary>
        public static ElectricSusceptance FromKilosiemens(double kilosiemens) => new ElectricSusceptance(kilosiemens, ElectricSusceptanceUnit.Kilosiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Megamho"/>.
        /// </summary>
        public static ElectricSusceptance FromMegamhos(double megamhos) => new ElectricSusceptance(megamhos, ElectricSusceptanceUnit.Megamho);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Megasiemens"/>.
        /// </summary>
        public static ElectricSusceptance FromMegasiemens(double megasiemens) => new ElectricSusceptance(megasiemens, ElectricSusceptanceUnit.Megasiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Mho"/>.
        /// </summary>
        public static ElectricSusceptance FromMhos(double mhos) => new ElectricSusceptance(mhos, ElectricSusceptanceUnit.Mho);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Micromho"/>.
        /// </summary>
        public static ElectricSusceptance FromMicromhos(double micromhos) => new ElectricSusceptance(micromhos, ElectricSusceptanceUnit.Micromho);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Microsiemens"/>.
        /// </summary>
        public static ElectricSusceptance FromMicrosiemens(double microsiemens) => new ElectricSusceptance(microsiemens, ElectricSusceptanceUnit.Microsiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Millimho"/>.
        /// </summary>
        public static ElectricSusceptance FromMillimhos(double millimhos) => new ElectricSusceptance(millimhos, ElectricSusceptanceUnit.Millimho);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Millisiemens"/>.
        /// </summary>
        public static ElectricSusceptance FromMillisiemens(double millisiemens) => new ElectricSusceptance(millisiemens, ElectricSusceptanceUnit.Millisiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Nanomho"/>.
        /// </summary>
        public static ElectricSusceptance FromNanomhos(double nanomhos) => new ElectricSusceptance(nanomhos, ElectricSusceptanceUnit.Nanomho);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Nanosiemens"/>.
        /// </summary>
        public static ElectricSusceptance FromNanosiemens(double nanosiemens) => new ElectricSusceptance(nanosiemens, ElectricSusceptanceUnit.Nanosiemens);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Siemens"/>.
        /// </summary>
        public static ElectricSusceptance FromSiemens(double siemens) => new ElectricSusceptance(siemens, ElectricSusceptanceUnit.Siemens);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Teramho"/>.
        /// </summary>
        public static ElectricSusceptance FromTeramhos(double teramhos) => new ElectricSusceptance(teramhos, ElectricSusceptanceUnit.Teramho);

        /// <summary>
        ///     Creates a <see cref="ElectricSusceptance"/> from <see cref="ElectricSusceptanceUnit.Terasiemens"/>.
        /// </summary>
        public static ElectricSusceptance FromTerasiemens(double terasiemens) => new ElectricSusceptance(terasiemens, ElectricSusceptanceUnit.Terasiemens);

        /// <summary>
        ///     Dynamically convert from value and unit enum <see cref="ElectricSusceptanceUnit" /> to <see cref="ElectricSusceptance" />.
        /// </summary>
        /// <param name="value">Value to convert from.</param>
        /// <param name="fromUnit">Unit to convert from.</param>
        /// <returns>ElectricSusceptance unit value.</returns>
        public static ElectricSusceptance From(double value, ElectricSusceptanceUnit fromUnit)
        {
            return new ElectricSusceptance(value, fromUnit);
        }

        #endregion

                #region Conversion Methods

                /// <summary>
                ///     Convert to the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>Value converted to the specified unit.</returns>
                public double As(ElectricSusceptanceUnit unit) => GetValueAs(unit);

                /// <summary>
                ///     Converts this ElectricSusceptance to another ElectricSusceptance with the unit representation <paramref name="unit" />.
                /// </summary>
                /// <returns>A ElectricSusceptance with the specified unit.</returns>
                public ElectricSusceptance ToUnit(ElectricSusceptanceUnit unit)
                {
                    var convertedValue = GetValueAs(unit);
                    return new ElectricSusceptance(convertedValue, unit);
                }

                /// <summary>
                ///     Converts the current value + unit to the base unit.
                ///     This is typically the first step in converting from one unit to another.
                /// </summary>
                /// <returns>The value in the base unit representation.</returns>
                private double GetValueInBaseUnit()
                {
                    return Unit switch
                    {
                        ElectricSusceptanceUnit.Gigamho => (_value) * 1e9d,
                        ElectricSusceptanceUnit.Gigasiemens => (_value) * 1e9d,
                        ElectricSusceptanceUnit.Kilomho => (_value) * 1e3d,
                        ElectricSusceptanceUnit.Kilosiemens => (_value) * 1e3d,
                        ElectricSusceptanceUnit.Megamho => (_value) * 1e6d,
                        ElectricSusceptanceUnit.Megasiemens => (_value) * 1e6d,
                        ElectricSusceptanceUnit.Mho => _value,
                        ElectricSusceptanceUnit.Micromho => (_value) * 1e-6d,
                        ElectricSusceptanceUnit.Microsiemens => (_value) * 1e-6d,
                        ElectricSusceptanceUnit.Millimho => (_value) * 1e-3d,
                        ElectricSusceptanceUnit.Millisiemens => (_value) * 1e-3d,
                        ElectricSusceptanceUnit.Nanomho => (_value) * 1e-9d,
                        ElectricSusceptanceUnit.Nanosiemens => (_value) * 1e-9d,
                        ElectricSusceptanceUnit.Siemens => _value,
                        ElectricSusceptanceUnit.Teramho => (_value) * 1e12d,
                        ElectricSusceptanceUnit.Terasiemens => (_value) * 1e12d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to base units.")
                    };
                    }

                private double GetValueAs(ElectricSusceptanceUnit unit)
                {
                    if (Unit == unit)
                        return _value;

                    var baseUnitValue = GetValueInBaseUnit();

                    return unit switch
                    {
                        ElectricSusceptanceUnit.Gigamho => (baseUnitValue) / 1e9d,
                        ElectricSusceptanceUnit.Gigasiemens => (baseUnitValue) / 1e9d,
                        ElectricSusceptanceUnit.Kilomho => (baseUnitValue) / 1e3d,
                        ElectricSusceptanceUnit.Kilosiemens => (baseUnitValue) / 1e3d,
                        ElectricSusceptanceUnit.Megamho => (baseUnitValue) / 1e6d,
                        ElectricSusceptanceUnit.Megasiemens => (baseUnitValue) / 1e6d,
                        ElectricSusceptanceUnit.Mho => baseUnitValue,
                        ElectricSusceptanceUnit.Micromho => (baseUnitValue) / 1e-6d,
                        ElectricSusceptanceUnit.Microsiemens => (baseUnitValue) / 1e-6d,
                        ElectricSusceptanceUnit.Millimho => (baseUnitValue) / 1e-3d,
                        ElectricSusceptanceUnit.Millisiemens => (baseUnitValue) / 1e-3d,
                        ElectricSusceptanceUnit.Nanomho => (baseUnitValue) / 1e-9d,
                        ElectricSusceptanceUnit.Nanosiemens => (baseUnitValue) / 1e-9d,
                        ElectricSusceptanceUnit.Siemens => baseUnitValue,
                        ElectricSusceptanceUnit.Teramho => (baseUnitValue) / 1e12d,
                        ElectricSusceptanceUnit.Terasiemens => (baseUnitValue) / 1e12d,
                        _ => throw new NotImplementedException($"Can't convert {Unit} to {unit}.")
                    };
                    }

                #endregion
    }
}

