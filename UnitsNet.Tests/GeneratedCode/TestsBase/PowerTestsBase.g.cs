//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by \generate-code.bat.
//
//     Changes to this file will be lost when the code is regenerated.
//     The build server regenerates the code before each build and a pre-build
//     step will regenerate the code on each local build.
//
//     See https://github.com/angularsen/UnitsNet/wiki/Adding-a-New-Unit for how to add or edit units.
//
//     Add CustomCode\Quantities\MyQuantity.extra.cs files to add code to generated quantities.
//     Add UnitDefinitions\MyQuantity.json and run generate-code.bat to generate new units or quantities.
//
// </auto-generated>
//------------------------------------------------------------------------------

// Licensed under MIT No Attribution, see LICENSE file at the root.
// Copyright 2013 Andreas Gullberg Larsen (andreas.larsen84@gmail.com). Maintained at https://github.com/angularsen/UnitsNet.

using System;
using System.Collections.Generic;
using System.Globalization;
using System.Linq;
using System.Threading;
using UnitsNet.InternalHelpers;
using UnitsNet.Tests.Helpers;
using UnitsNet.Tests.TestsBase;
using UnitsNet.Units;
using Xunit;

// Disable build warning CS1718: Comparison made to same variable; did you mean to compare something else?
#pragma warning disable 1718

// ReSharper disable once CheckNamespace
namespace UnitsNet.Tests
{
    /// <summary>
    /// Test of Power.
    /// </summary>
// ReSharper disable once PartialTypeWithSinglePart
    public abstract partial class PowerTestsBase : QuantityTestsBase
    {
        protected abstract double BoilerHorsepowerInOneWatt { get; }
        protected abstract double BritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double DecawattsInOneWatt { get; }
        protected abstract double DeciwattsInOneWatt { get; }
        protected abstract double ElectricalHorsepowerInOneWatt { get; }
        protected abstract double FemtowattsInOneWatt { get; }
        protected abstract double GigajoulesPerHourInOneWatt { get; }
        protected abstract double GigawattsInOneWatt { get; }
        protected abstract double HydraulicHorsepowerInOneWatt { get; }
        protected abstract double JoulesPerHourInOneWatt { get; }
        protected abstract double KilobritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double KilojoulesPerHourInOneWatt { get; }
        protected abstract double KilowattsInOneWatt { get; }
        protected abstract double MechanicalHorsepowerInOneWatt { get; }
        protected abstract double MegabritishThermalUnitsPerHourInOneWatt { get; }
        protected abstract double MegajoulesPerHourInOneWatt { get; }
        protected abstract double MegawattsInOneWatt { get; }
        protected abstract double MetricHorsepowerInOneWatt { get; }
        protected abstract double MicrowattsInOneWatt { get; }
        protected abstract double MillijoulesPerHourInOneWatt { get; }
        protected abstract double MilliwattsInOneWatt { get; }
        protected abstract double NanowattsInOneWatt { get; }
        protected abstract double PetawattsInOneWatt { get; }
        protected abstract double PicowattsInOneWatt { get; }
        protected abstract double TerawattsInOneWatt { get; }
        protected abstract double TonsOfRefrigerationInOneWatt { get; }
        protected abstract double WattsInOneWatt { get; }

// ReSharper disable VirtualMemberNeverOverriden.Global
        protected virtual double BoilerHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double BritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double DecawattsTolerance { get { return 1e-5; } }
        protected virtual double DeciwattsTolerance { get { return 1e-5; } }
        protected virtual double ElectricalHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double FemtowattsTolerance { get { return 1e-5; } }
        protected virtual double GigajoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double GigawattsTolerance { get { return 1e-5; } }
        protected virtual double HydraulicHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double JoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilobritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilojoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double KilowattsTolerance { get { return 1e-5; } }
        protected virtual double MechanicalHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double MegabritishThermalUnitsPerHourTolerance { get { return 1e-5; } }
        protected virtual double MegajoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MegawattsTolerance { get { return 1e-5; } }
        protected virtual double MetricHorsepowerTolerance { get { return 1e-5; } }
        protected virtual double MicrowattsTolerance { get { return 1e-5; } }
        protected virtual double MillijoulesPerHourTolerance { get { return 1e-5; } }
        protected virtual double MilliwattsTolerance { get { return 1e-5; } }
        protected virtual double NanowattsTolerance { get { return 1e-5; } }
        protected virtual double PetawattsTolerance { get { return 1e-5; } }
        protected virtual double PicowattsTolerance { get { return 1e-5; } }
        protected virtual double TerawattsTolerance { get { return 1e-5; } }
        protected virtual double TonsOfRefrigerationTolerance { get { return 1e-5; } }
        protected virtual double WattsTolerance { get { return 1e-5; } }
// ReSharper restore VirtualMemberNeverOverriden.Global

        protected (double UnitsInBaseUnit, double Tolerence) GetConversionFactor(PowerUnit unit)
        {
            return unit switch
            {
                PowerUnit.BoilerHorsepower => (BoilerHorsepowerInOneWatt, BoilerHorsepowerTolerance),
                PowerUnit.BritishThermalUnitPerHour => (BritishThermalUnitsPerHourInOneWatt, BritishThermalUnitsPerHourTolerance),
                PowerUnit.Decawatt => (DecawattsInOneWatt, DecawattsTolerance),
                PowerUnit.Deciwatt => (DeciwattsInOneWatt, DeciwattsTolerance),
                PowerUnit.ElectricalHorsepower => (ElectricalHorsepowerInOneWatt, ElectricalHorsepowerTolerance),
                PowerUnit.Femtowatt => (FemtowattsInOneWatt, FemtowattsTolerance),
                PowerUnit.GigajoulePerHour => (GigajoulesPerHourInOneWatt, GigajoulesPerHourTolerance),
                PowerUnit.Gigawatt => (GigawattsInOneWatt, GigawattsTolerance),
                PowerUnit.HydraulicHorsepower => (HydraulicHorsepowerInOneWatt, HydraulicHorsepowerTolerance),
                PowerUnit.JoulePerHour => (JoulesPerHourInOneWatt, JoulesPerHourTolerance),
                PowerUnit.KilobritishThermalUnitPerHour => (KilobritishThermalUnitsPerHourInOneWatt, KilobritishThermalUnitsPerHourTolerance),
                PowerUnit.KilojoulePerHour => (KilojoulesPerHourInOneWatt, KilojoulesPerHourTolerance),
                PowerUnit.Kilowatt => (KilowattsInOneWatt, KilowattsTolerance),
                PowerUnit.MechanicalHorsepower => (MechanicalHorsepowerInOneWatt, MechanicalHorsepowerTolerance),
                PowerUnit.MegabritishThermalUnitPerHour => (MegabritishThermalUnitsPerHourInOneWatt, MegabritishThermalUnitsPerHourTolerance),
                PowerUnit.MegajoulePerHour => (MegajoulesPerHourInOneWatt, MegajoulesPerHourTolerance),
                PowerUnit.Megawatt => (MegawattsInOneWatt, MegawattsTolerance),
                PowerUnit.MetricHorsepower => (MetricHorsepowerInOneWatt, MetricHorsepowerTolerance),
                PowerUnit.Microwatt => (MicrowattsInOneWatt, MicrowattsTolerance),
                PowerUnit.MillijoulePerHour => (MillijoulesPerHourInOneWatt, MillijoulesPerHourTolerance),
                PowerUnit.Milliwatt => (MilliwattsInOneWatt, MilliwattsTolerance),
                PowerUnit.Nanowatt => (NanowattsInOneWatt, NanowattsTolerance),
                PowerUnit.Petawatt => (PetawattsInOneWatt, PetawattsTolerance),
                PowerUnit.Picowatt => (PicowattsInOneWatt, PicowattsTolerance),
                PowerUnit.Terawatt => (TerawattsInOneWatt, TerawattsTolerance),
                PowerUnit.TonOfRefrigeration => (TonsOfRefrigerationInOneWatt, TonsOfRefrigerationTolerance),
                PowerUnit.Watt => (WattsInOneWatt, WattsTolerance),
                _ => throw new NotSupportedException()
            };
        }

        public static IEnumerable<object[]> UnitTypes = new List<object[]>
        {
            new object[] { PowerUnit.BoilerHorsepower },
            new object[] { PowerUnit.BritishThermalUnitPerHour },
            new object[] { PowerUnit.Decawatt },
            new object[] { PowerUnit.Deciwatt },
            new object[] { PowerUnit.ElectricalHorsepower },
            new object[] { PowerUnit.Femtowatt },
            new object[] { PowerUnit.GigajoulePerHour },
            new object[] { PowerUnit.Gigawatt },
            new object[] { PowerUnit.HydraulicHorsepower },
            new object[] { PowerUnit.JoulePerHour },
            new object[] { PowerUnit.KilobritishThermalUnitPerHour },
            new object[] { PowerUnit.KilojoulePerHour },
            new object[] { PowerUnit.Kilowatt },
            new object[] { PowerUnit.MechanicalHorsepower },
            new object[] { PowerUnit.MegabritishThermalUnitPerHour },
            new object[] { PowerUnit.MegajoulePerHour },
            new object[] { PowerUnit.Megawatt },
            new object[] { PowerUnit.MetricHorsepower },
            new object[] { PowerUnit.Microwatt },
            new object[] { PowerUnit.MillijoulePerHour },
            new object[] { PowerUnit.Milliwatt },
            new object[] { PowerUnit.Nanowatt },
            new object[] { PowerUnit.Petawatt },
            new object[] { PowerUnit.Picowatt },
            new object[] { PowerUnit.Terawatt },
            new object[] { PowerUnit.TonOfRefrigeration },
            new object[] { PowerUnit.Watt },
        };

        [Fact]
        public void DefaultCtor_ReturnsQuantityWithZeroValueAndBaseUnit()
        {
            var quantity = new Power();
            Assert.Equal(0, quantity.Value);
            Assert.Equal(PowerUnit.Watt, quantity.Unit);
        }

        [Fact]
        public void Ctor_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => new Power(double.PositiveInfinity, PowerUnit.Watt));
            var exception2 = Record.Exception(() => new Power(double.NegativeInfinity, PowerUnit.Watt));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void Ctor_WithNaNValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => new Power(double.NaN, PowerUnit.Watt));

            Assert.Null(exception);
        }

        [Fact]
        public void Ctor_NullAsUnitSystem_ThrowsArgumentNullException()
        {
            Assert.Throws<ArgumentNullException>(() => new Power(value: 1, unitSystem: null));
        }

        [Fact]
        public virtual void Ctor_SIUnitSystem_ReturnsQuantityWithSIUnits()
        {
            var quantity = new Power(value: 1, unitSystem: UnitSystem.SI);
            Assert.Equal(1, quantity.Value);
            Assert.True(quantity.QuantityInfo[quantity.Unit].BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public void Ctor_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => new Power(value: 1, unitSystem: unsupportedUnitSystem));
        }

        [Fact]
        public void Power_QuantityInfo_ReturnsQuantityInfoDescribingQuantity()
        {
            PowerUnit[] unitsOrderedByName = EnumHelper.GetValues<PowerUnit>().OrderBy(x => x.ToString()).ToArray();
            var quantity = new Power(1, PowerUnit.Watt);

            QuantityInfo<Power, PowerUnit> quantityInfo = quantity.QuantityInfo;

            Assert.Equal("Power", quantityInfo.Name);
            Assert.Equal(Power.Zero, quantityInfo.Zero);
            Assert.Equal(Power.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(unitsOrderedByName, quantityInfo.Units);
            Assert.Equal(unitsOrderedByName, quantityInfo.UnitInfos.Select(x => x.Value));
            Assert.Equal(Power.Info, quantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity)quantity).QuantityInfo);
            Assert.Equal(quantityInfo, ((IQuantity<PowerUnit>)quantity).QuantityInfo);
        }

        [Fact]
        public void PowerInfo_CreateWithCustomUnitInfos()
        {
            PowerUnit[] expectedUnits = [PowerUnit.Watt];

            Power.PowerInfo quantityInfo = Power.PowerInfo.CreateDefault(mappings => mappings.SelectUnits(expectedUnits));

            Assert.Equal("Power", quantityInfo.Name);
            Assert.Equal(Power.Zero, quantityInfo.Zero);
            Assert.Equal(Power.BaseUnit, quantityInfo.BaseUnitInfo.Value);
            Assert.Equal(expectedUnits, quantityInfo.Units);
            Assert.Equal(expectedUnits, quantityInfo.UnitInfos.Select(x => x.Value));
        }

        [Fact]
        public void WattToPowerUnits()
        {
            Power watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, watt.BoilerHorsepower, BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, watt.BritishThermalUnitsPerHour, BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(DecawattsInOneWatt, watt.Decawatts, DecawattsTolerance);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, watt.Deciwatts, DeciwattsTolerance);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, watt.ElectricalHorsepower, ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, watt.Femtowatts, FemtowattsTolerance);
            AssertEx.EqualTolerance(GigajoulesPerHourInOneWatt, watt.GigajoulesPerHour, GigajoulesPerHourTolerance);
            AssertEx.EqualTolerance(GigawattsInOneWatt, watt.Gigawatts, GigawattsTolerance);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, watt.HydraulicHorsepower, HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(JoulesPerHourInOneWatt, watt.JoulesPerHour, JoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, watt.KilobritishThermalUnitsPerHour, KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(KilojoulesPerHourInOneWatt, watt.KilojoulesPerHour, KilojoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilowattsInOneWatt, watt.Kilowatts, KilowattsTolerance);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, watt.MechanicalHorsepower, MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsPerHourInOneWatt, watt.MegabritishThermalUnitsPerHour, MegabritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(MegajoulesPerHourInOneWatt, watt.MegajoulesPerHour, MegajoulesPerHourTolerance);
            AssertEx.EqualTolerance(MegawattsInOneWatt, watt.Megawatts, MegawattsTolerance);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, watt.MetricHorsepower, MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, watt.Microwatts, MicrowattsTolerance);
            AssertEx.EqualTolerance(MillijoulesPerHourInOneWatt, watt.MillijoulesPerHour, MillijoulesPerHourTolerance);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, watt.Milliwatts, MilliwattsTolerance);
            AssertEx.EqualTolerance(NanowattsInOneWatt, watt.Nanowatts, NanowattsTolerance);
            AssertEx.EqualTolerance(PetawattsInOneWatt, watt.Petawatts, PetawattsTolerance);
            AssertEx.EqualTolerance(PicowattsInOneWatt, watt.Picowatts, PicowattsTolerance);
            AssertEx.EqualTolerance(TerawattsInOneWatt, watt.Terawatts, TerawattsTolerance);
            AssertEx.EqualTolerance(TonsOfRefrigerationInOneWatt, watt.TonsOfRefrigeration, TonsOfRefrigerationTolerance);
            AssertEx.EqualTolerance(WattsInOneWatt, watt.Watts, WattsTolerance);
        }

        [Fact]
        public void From_ValueAndUnit_ReturnsQuantityWithSameValueAndUnit()
        {
            Assert.All(EnumHelper.GetValues<PowerUnit>(), unit =>
            {
                var quantity = Power.From(1, unit);
                Assert.Equal(1, quantity.Value);
                Assert.Equal(unit, quantity.Unit);
            });
        }

        [Fact]
        public void FromWatts_WithInfinityValue_DoNotThrowsArgumentException()
        {
            var exception1 = Record.Exception(() => Power.FromWatts(double.PositiveInfinity));
            var exception2 = Record.Exception(() => Power.FromWatts(double.NegativeInfinity));

            Assert.Null(exception1);
            Assert.Null(exception2);
        }

        [Fact]
        public void FromWatts_WithNanValue_DoNotThrowsArgumentException()
        {
            var exception = Record.Exception(() => Power.FromWatts(double.NaN));

            Assert.Null(exception);
        }

        [Fact]
        public void As()
        {
            var watt = Power.FromWatts(1);
            AssertEx.EqualTolerance(BoilerHorsepowerInOneWatt, watt.As(PowerUnit.BoilerHorsepower), BoilerHorsepowerTolerance);
            AssertEx.EqualTolerance(BritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.BritishThermalUnitPerHour), BritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(DecawattsInOneWatt, watt.As(PowerUnit.Decawatt), DecawattsTolerance);
            AssertEx.EqualTolerance(DeciwattsInOneWatt, watt.As(PowerUnit.Deciwatt), DeciwattsTolerance);
            AssertEx.EqualTolerance(ElectricalHorsepowerInOneWatt, watt.As(PowerUnit.ElectricalHorsepower), ElectricalHorsepowerTolerance);
            AssertEx.EqualTolerance(FemtowattsInOneWatt, watt.As(PowerUnit.Femtowatt), FemtowattsTolerance);
            AssertEx.EqualTolerance(GigajoulesPerHourInOneWatt, watt.As(PowerUnit.GigajoulePerHour), GigajoulesPerHourTolerance);
            AssertEx.EqualTolerance(GigawattsInOneWatt, watt.As(PowerUnit.Gigawatt), GigawattsTolerance);
            AssertEx.EqualTolerance(HydraulicHorsepowerInOneWatt, watt.As(PowerUnit.HydraulicHorsepower), HydraulicHorsepowerTolerance);
            AssertEx.EqualTolerance(JoulesPerHourInOneWatt, watt.As(PowerUnit.JoulePerHour), JoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilobritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.KilobritishThermalUnitPerHour), KilobritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(KilojoulesPerHourInOneWatt, watt.As(PowerUnit.KilojoulePerHour), KilojoulesPerHourTolerance);
            AssertEx.EqualTolerance(KilowattsInOneWatt, watt.As(PowerUnit.Kilowatt), KilowattsTolerance);
            AssertEx.EqualTolerance(MechanicalHorsepowerInOneWatt, watt.As(PowerUnit.MechanicalHorsepower), MechanicalHorsepowerTolerance);
            AssertEx.EqualTolerance(MegabritishThermalUnitsPerHourInOneWatt, watt.As(PowerUnit.MegabritishThermalUnitPerHour), MegabritishThermalUnitsPerHourTolerance);
            AssertEx.EqualTolerance(MegajoulesPerHourInOneWatt, watt.As(PowerUnit.MegajoulePerHour), MegajoulesPerHourTolerance);
            AssertEx.EqualTolerance(MegawattsInOneWatt, watt.As(PowerUnit.Megawatt), MegawattsTolerance);
            AssertEx.EqualTolerance(MetricHorsepowerInOneWatt, watt.As(PowerUnit.MetricHorsepower), MetricHorsepowerTolerance);
            AssertEx.EqualTolerance(MicrowattsInOneWatt, watt.As(PowerUnit.Microwatt), MicrowattsTolerance);
            AssertEx.EqualTolerance(MillijoulesPerHourInOneWatt, watt.As(PowerUnit.MillijoulePerHour), MillijoulesPerHourTolerance);
            AssertEx.EqualTolerance(MilliwattsInOneWatt, watt.As(PowerUnit.Milliwatt), MilliwattsTolerance);
            AssertEx.EqualTolerance(NanowattsInOneWatt, watt.As(PowerUnit.Nanowatt), NanowattsTolerance);
            AssertEx.EqualTolerance(PetawattsInOneWatt, watt.As(PowerUnit.Petawatt), PetawattsTolerance);
            AssertEx.EqualTolerance(PicowattsInOneWatt, watt.As(PowerUnit.Picowatt), PicowattsTolerance);
            AssertEx.EqualTolerance(TerawattsInOneWatt, watt.As(PowerUnit.Terawatt), TerawattsTolerance);
            AssertEx.EqualTolerance(TonsOfRefrigerationInOneWatt, watt.As(PowerUnit.TonOfRefrigeration), TonsOfRefrigerationTolerance);
            AssertEx.EqualTolerance(WattsInOneWatt, watt.As(PowerUnit.Watt), WattsTolerance);
        }

        [Fact]
        public virtual void BaseUnit_HasSIBase()
        {
            var baseUnitInfo = Power.Info.BaseUnitInfo;
            Assert.True(baseUnitInfo.BaseUnits.IsSubsetOf(UnitSystem.SI.BaseUnits));
        }

        [Fact]
        public virtual void As_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Power(value: 1, unit: Power.BaseUnit);
            var expectedValue = quantity.As(Power.Info.GetDefaultUnit(UnitSystem.SI));

            var convertedValue = quantity.As(UnitSystem.SI);

            Assert.Equal(expectedValue, convertedValue);
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            var quantity = new Power(value: 1, unit: Power.BaseUnit);
            UnitSystem nullUnitSystem = null!;
            Assert.Throws<ArgumentNullException>(() => quantity.As(nullUnitSystem));
        }

        [Fact]
        public void As_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var quantity = new Power(value: 1, unit: Power.BaseUnit);
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Throws<ArgumentException>(() => quantity.As(unsupportedUnitSystem));
        }

        [Fact]
        public virtual void ToUnit_UnitSystem_SI_ReturnsQuantityInSIUnits()
        {
            var quantity = new Power(value: 1, unit: Power.BaseUnit);
            var expectedUnit = Power.Info.GetDefaultUnit(UnitSystem.SI);
            var expectedValue = quantity.As(expectedUnit);

            Assert.Multiple(() =>
            {
                Power quantityToConvert = quantity;

                Power convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity<PowerUnit> quantityToConvert = quantity;

                IQuantity<PowerUnit> convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;

                IQuantity convertedQuantity = quantityToConvert.ToUnit(UnitSystem.SI);

                Assert.Equal(expectedUnit, convertedQuantity.Unit);
                Assert.Equal(expectedValue, convertedQuantity.Value);
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentNullExceptionIfNull()
        {
            UnitSystem nullUnitSystem = null!;
            Assert.Multiple(() =>
            {
                var quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity<PowerUnit> quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentNullException>(() => quantity.ToUnit(nullUnitSystem));
            });
        }

        [Fact]
        public void ToUnit_UnitSystem_ThrowsArgumentExceptionIfNotSupported()
        {
            var unsupportedUnitSystem = new UnitSystem(UnsupportedBaseUnits);
            Assert.Multiple(() =>
            {
                var quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity<PowerUnit> quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            }, () =>
            {
                IQuantity quantity = new Power(value: 1, unit: Power.BaseUnit);
                Assert.Throws<ArgumentException>(() => quantity.ToUnit(unsupportedUnitSystem));
            });
        }

        [Theory]
        [InlineData("en-US", "4.2 hp(S)", PowerUnit.BoilerHorsepower, 4.2)]
        [InlineData("en-US", "4.2 Btu/h", PowerUnit.BritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 Btu/hr", PowerUnit.BritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 daW", PowerUnit.Decawatt, 4.2)]
        [InlineData("en-US", "4.2 dW", PowerUnit.Deciwatt, 4.2)]
        [InlineData("en-US", "4.2 hp(E)", PowerUnit.ElectricalHorsepower, 4.2)]
        [InlineData("en-US", "4.2 fW", PowerUnit.Femtowatt, 4.2)]
        [InlineData("en-US", "4.2 GJ/h", PowerUnit.GigajoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 GW", PowerUnit.Gigawatt, 4.2)]
        [InlineData("en-US", "4.2 hp(H)", PowerUnit.HydraulicHorsepower, 4.2)]
        [InlineData("en-US", "4.2 J/h", PowerUnit.JoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 kBtu/h", PowerUnit.KilobritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 kJ/h", PowerUnit.KilojoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 kW", PowerUnit.Kilowatt, 4.2)]
        [InlineData("en-US", "4.2 hp(I)", PowerUnit.MechanicalHorsepower, 4.2)]
        [InlineData("en-US", "4.2 MBtu/h", PowerUnit.MegabritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 MJ/h", PowerUnit.MegajoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 MW", PowerUnit.Megawatt, 4.2)]
        [InlineData("en-US", "4.2 hp(M)", PowerUnit.MetricHorsepower, 4.2)]
        [InlineData("en-US", "4.2 µW", PowerUnit.Microwatt, 4.2)]
        [InlineData("en-US", "4.2 mJ/h", PowerUnit.MillijoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 mW", PowerUnit.Milliwatt, 4.2)]
        [InlineData("en-US", "4.2 nW", PowerUnit.Nanowatt, 4.2)]
        [InlineData("en-US", "4.2 PW", PowerUnit.Petawatt, 4.2)]
        [InlineData("en-US", "4.2 pW", PowerUnit.Picowatt, 4.2)]
        [InlineData("en-US", "4.2 TW", PowerUnit.Terawatt, 4.2)]
        [InlineData("en-US", "4.2 TR", PowerUnit.TonOfRefrigeration, 4.2)]
        [InlineData("en-US", "4.2 W", PowerUnit.Watt, 4.2)]
        public void Parse(string culture, string quantityString, PowerUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            var parsed = Power.Parse(quantityString);
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("en-US", "4.2 hp(S)", PowerUnit.BoilerHorsepower, 4.2)]
        [InlineData("en-US", "4.2 Btu/h", PowerUnit.BritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 Btu/hr", PowerUnit.BritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 daW", PowerUnit.Decawatt, 4.2)]
        [InlineData("en-US", "4.2 dW", PowerUnit.Deciwatt, 4.2)]
        [InlineData("en-US", "4.2 hp(E)", PowerUnit.ElectricalHorsepower, 4.2)]
        [InlineData("en-US", "4.2 fW", PowerUnit.Femtowatt, 4.2)]
        [InlineData("en-US", "4.2 GJ/h", PowerUnit.GigajoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 GW", PowerUnit.Gigawatt, 4.2)]
        [InlineData("en-US", "4.2 hp(H)", PowerUnit.HydraulicHorsepower, 4.2)]
        [InlineData("en-US", "4.2 J/h", PowerUnit.JoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 kBtu/h", PowerUnit.KilobritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 kJ/h", PowerUnit.KilojoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 kW", PowerUnit.Kilowatt, 4.2)]
        [InlineData("en-US", "4.2 hp(I)", PowerUnit.MechanicalHorsepower, 4.2)]
        [InlineData("en-US", "4.2 MBtu/h", PowerUnit.MegabritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour, 4.2)]
        [InlineData("en-US", "4.2 MJ/h", PowerUnit.MegajoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 MW", PowerUnit.Megawatt, 4.2)]
        [InlineData("en-US", "4.2 hp(M)", PowerUnit.MetricHorsepower, 4.2)]
        [InlineData("en-US", "4.2 µW", PowerUnit.Microwatt, 4.2)]
        [InlineData("en-US", "4.2 mJ/h", PowerUnit.MillijoulePerHour, 4.2)]
        [InlineData("en-US", "4.2 mW", PowerUnit.Milliwatt, 4.2)]
        [InlineData("en-US", "4.2 nW", PowerUnit.Nanowatt, 4.2)]
        [InlineData("en-US", "4.2 PW", PowerUnit.Petawatt, 4.2)]
        [InlineData("en-US", "4.2 pW", PowerUnit.Picowatt, 4.2)]
        [InlineData("en-US", "4.2 TW", PowerUnit.Terawatt, 4.2)]
        [InlineData("en-US", "4.2 TR", PowerUnit.TonOfRefrigeration, 4.2)]
        [InlineData("en-US", "4.2 W", PowerUnit.Watt, 4.2)]
        public void TryParse(string culture, string quantityString, PowerUnit expectedUnit, decimal expectedValue)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Power.TryParse(quantityString, out Power parsed));
            Assert.Equal(expectedUnit, parsed.Unit);
            Assert.Equal(expectedValue, parsed.Value);
        }

        [Theory]
        [InlineData("hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("daW", PowerUnit.Decawatt)]
        [InlineData("dW", PowerUnit.Deciwatt)]
        [InlineData("hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("fW", PowerUnit.Femtowatt)]
        [InlineData("GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("GW", PowerUnit.Gigawatt)]
        [InlineData("hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("J/h", PowerUnit.JoulePerHour)]
        [InlineData("kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("kW", PowerUnit.Kilowatt)]
        [InlineData("hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("MW", PowerUnit.Megawatt)]
        [InlineData("hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("µW", PowerUnit.Microwatt)]
        [InlineData("mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("mW", PowerUnit.Milliwatt)]
        [InlineData("nW", PowerUnit.Nanowatt)]
        [InlineData("PW", PowerUnit.Petawatt)]
        [InlineData("pW", PowerUnit.Picowatt)]
        [InlineData("TW", PowerUnit.Terawatt)]
        [InlineData("TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("W", PowerUnit.Watt)]
        public void ParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PowerUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            PowerUnit parsedUnit = Power.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("daW", PowerUnit.Decawatt)]
        [InlineData("dW", PowerUnit.Deciwatt)]
        [InlineData("hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("fW", PowerUnit.Femtowatt)]
        [InlineData("GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("GW", PowerUnit.Gigawatt)]
        [InlineData("hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("J/h", PowerUnit.JoulePerHour)]
        [InlineData("kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("kW", PowerUnit.Kilowatt)]
        [InlineData("hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("MW", PowerUnit.Megawatt)]
        [InlineData("hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("µW", PowerUnit.Microwatt)]
        [InlineData("mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("mW", PowerUnit.Milliwatt)]
        [InlineData("nW", PowerUnit.Nanowatt)]
        [InlineData("PW", PowerUnit.Petawatt)]
        [InlineData("pW", PowerUnit.Picowatt)]
        [InlineData("TW", PowerUnit.Terawatt)]
        [InlineData("TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("W", PowerUnit.Watt)]
        public void ParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PowerUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            PowerUnit parsedUnit = Power.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("en-US", "Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "daW", PowerUnit.Decawatt)]
        [InlineData("en-US", "dW", PowerUnit.Deciwatt)]
        [InlineData("en-US", "hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("en-US", "fW", PowerUnit.Femtowatt)]
        [InlineData("en-US", "GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("en-US", "GW", PowerUnit.Gigawatt)]
        [InlineData("en-US", "hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("en-US", "J/h", PowerUnit.JoulePerHour)]
        [InlineData("en-US", "kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("en-US", "kW", PowerUnit.Kilowatt)]
        [InlineData("en-US", "hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("en-US", "MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("en-US", "MW", PowerUnit.Megawatt)]
        [InlineData("en-US", "hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("en-US", "µW", PowerUnit.Microwatt)]
        [InlineData("en-US", "mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("en-US", "mW", PowerUnit.Milliwatt)]
        [InlineData("en-US", "nW", PowerUnit.Nanowatt)]
        [InlineData("en-US", "PW", PowerUnit.Petawatt)]
        [InlineData("en-US", "pW", PowerUnit.Picowatt)]
        [InlineData("en-US", "TW", PowerUnit.Terawatt)]
        [InlineData("en-US", "TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("en-US", "W", PowerUnit.Watt)]
        public void ParseUnit_WithCurrentCulture(string culture, string abbreviation, PowerUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            PowerUnit parsedUnit = Power.ParseUnit(abbreviation);
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("en-US", "Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "daW", PowerUnit.Decawatt)]
        [InlineData("en-US", "dW", PowerUnit.Deciwatt)]
        [InlineData("en-US", "hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("en-US", "fW", PowerUnit.Femtowatt)]
        [InlineData("en-US", "GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("en-US", "GW", PowerUnit.Gigawatt)]
        [InlineData("en-US", "hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("en-US", "J/h", PowerUnit.JoulePerHour)]
        [InlineData("en-US", "kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("en-US", "kW", PowerUnit.Kilowatt)]
        [InlineData("en-US", "hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("en-US", "MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("en-US", "MW", PowerUnit.Megawatt)]
        [InlineData("en-US", "hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("en-US", "µW", PowerUnit.Microwatt)]
        [InlineData("en-US", "mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("en-US", "mW", PowerUnit.Milliwatt)]
        [InlineData("en-US", "nW", PowerUnit.Nanowatt)]
        [InlineData("en-US", "PW", PowerUnit.Petawatt)]
        [InlineData("en-US", "pW", PowerUnit.Picowatt)]
        [InlineData("en-US", "TW", PowerUnit.Terawatt)]
        [InlineData("en-US", "TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("en-US", "W", PowerUnit.Watt)]
        public void ParseUnit_WithCulture(string culture, string abbreviation, PowerUnit expectedUnit)
        {
            PowerUnit parsedUnit = Power.ParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("daW", PowerUnit.Decawatt)]
        [InlineData("dW", PowerUnit.Deciwatt)]
        [InlineData("hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("fW", PowerUnit.Femtowatt)]
        [InlineData("GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("GW", PowerUnit.Gigawatt)]
        [InlineData("hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("J/h", PowerUnit.JoulePerHour)]
        [InlineData("kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("kW", PowerUnit.Kilowatt)]
        [InlineData("hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("MW", PowerUnit.Megawatt)]
        [InlineData("hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("µW", PowerUnit.Microwatt)]
        [InlineData("mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("mW", PowerUnit.Milliwatt)]
        [InlineData("nW", PowerUnit.Nanowatt)]
        [InlineData("PW", PowerUnit.Petawatt)]
        [InlineData("pW", PowerUnit.Picowatt)]
        [InlineData("TW", PowerUnit.Terawatt)]
        [InlineData("TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("W", PowerUnit.Watt)]
        public void TryParseUnit_WithUsEnglishCurrentCulture(string abbreviation, PowerUnit expectedUnit)
        {
            // Fallback culture "en-US" is always localized
            using var _ = new CultureScope("en-US");
            Assert.True(Power.TryParseUnit(abbreviation, out PowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("daW", PowerUnit.Decawatt)]
        [InlineData("dW", PowerUnit.Deciwatt)]
        [InlineData("hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("fW", PowerUnit.Femtowatt)]
        [InlineData("GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("GW", PowerUnit.Gigawatt)]
        [InlineData("hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("J/h", PowerUnit.JoulePerHour)]
        [InlineData("kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("kW", PowerUnit.Kilowatt)]
        [InlineData("hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("MW", PowerUnit.Megawatt)]
        [InlineData("hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("µW", PowerUnit.Microwatt)]
        [InlineData("mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("mW", PowerUnit.Milliwatt)]
        [InlineData("nW", PowerUnit.Nanowatt)]
        [InlineData("PW", PowerUnit.Petawatt)]
        [InlineData("pW", PowerUnit.Picowatt)]
        [InlineData("TW", PowerUnit.Terawatt)]
        [InlineData("TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("W", PowerUnit.Watt)]
        public void TryParseUnit_WithUnsupportedCurrentCulture_FallsBackToUsEnglish(string abbreviation, PowerUnit expectedUnit)
        {
            // Currently, no abbreviations are localized for Icelandic, so it should fall back to "en-US" when parsing.
            using var _ = new CultureScope("is-IS");
            Assert.True(Power.TryParseUnit(abbreviation, out PowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("en-US", "Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "daW", PowerUnit.Decawatt)]
        [InlineData("en-US", "dW", PowerUnit.Deciwatt)]
        [InlineData("en-US", "hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("en-US", "fW", PowerUnit.Femtowatt)]
        [InlineData("en-US", "GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("en-US", "GW", PowerUnit.Gigawatt)]
        [InlineData("en-US", "hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("en-US", "J/h", PowerUnit.JoulePerHour)]
        [InlineData("en-US", "kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("en-US", "kW", PowerUnit.Kilowatt)]
        [InlineData("en-US", "hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("en-US", "MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("en-US", "MW", PowerUnit.Megawatt)]
        [InlineData("en-US", "hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("en-US", "µW", PowerUnit.Microwatt)]
        [InlineData("en-US", "mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("en-US", "mW", PowerUnit.Milliwatt)]
        [InlineData("en-US", "nW", PowerUnit.Nanowatt)]
        [InlineData("en-US", "PW", PowerUnit.Petawatt)]
        [InlineData("en-US", "pW", PowerUnit.Picowatt)]
        [InlineData("en-US", "TW", PowerUnit.Terawatt)]
        [InlineData("en-US", "TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("en-US", "W", PowerUnit.Watt)]
        public void TryParseUnit_WithCurrentCulture(string culture, string abbreviation, PowerUnit expectedUnit)
        {
            using var _ = new CultureScope(culture);
            Assert.True(Power.TryParseUnit(abbreviation, out PowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", "hp(S)", PowerUnit.BoilerHorsepower)]
        [InlineData("en-US", "Btu/h", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "Btu/hr", PowerUnit.BritishThermalUnitPerHour)]
        [InlineData("en-US", "daW", PowerUnit.Decawatt)]
        [InlineData("en-US", "dW", PowerUnit.Deciwatt)]
        [InlineData("en-US", "hp(E)", PowerUnit.ElectricalHorsepower)]
        [InlineData("en-US", "fW", PowerUnit.Femtowatt)]
        [InlineData("en-US", "GJ/h", PowerUnit.GigajoulePerHour)]
        [InlineData("en-US", "GW", PowerUnit.Gigawatt)]
        [InlineData("en-US", "hp(H)", PowerUnit.HydraulicHorsepower)]
        [InlineData("en-US", "J/h", PowerUnit.JoulePerHour)]
        [InlineData("en-US", "kBtu/h", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kBtu/hr", PowerUnit.KilobritishThermalUnitPerHour)]
        [InlineData("en-US", "kJ/h", PowerUnit.KilojoulePerHour)]
        [InlineData("en-US", "kW", PowerUnit.Kilowatt)]
        [InlineData("en-US", "hp(I)", PowerUnit.MechanicalHorsepower)]
        [InlineData("en-US", "MBtu/h", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MBtu/hr", PowerUnit.MegabritishThermalUnitPerHour)]
        [InlineData("en-US", "MJ/h", PowerUnit.MegajoulePerHour)]
        [InlineData("en-US", "MW", PowerUnit.Megawatt)]
        [InlineData("en-US", "hp(M)", PowerUnit.MetricHorsepower)]
        [InlineData("en-US", "µW", PowerUnit.Microwatt)]
        [InlineData("en-US", "mJ/h", PowerUnit.MillijoulePerHour)]
        [InlineData("en-US", "mW", PowerUnit.Milliwatt)]
        [InlineData("en-US", "nW", PowerUnit.Nanowatt)]
        [InlineData("en-US", "PW", PowerUnit.Petawatt)]
        [InlineData("en-US", "pW", PowerUnit.Picowatt)]
        [InlineData("en-US", "TW", PowerUnit.Terawatt)]
        [InlineData("en-US", "TR", PowerUnit.TonOfRefrigeration)]
        [InlineData("en-US", "W", PowerUnit.Watt)]
        public void TryParseUnit_WithCulture(string culture, string abbreviation, PowerUnit expectedUnit)
        {
            Assert.True(Power.TryParseUnit(abbreviation, CultureInfo.GetCultureInfo(culture), out PowerUnit parsedUnit));
            Assert.Equal(expectedUnit, parsedUnit);
        }

        [Theory]
        [InlineData("en-US", PowerUnit.BoilerHorsepower, "hp(S)")]
        [InlineData("en-US", PowerUnit.BritishThermalUnitPerHour, "Btu/h")]
        [InlineData("en-US", PowerUnit.Decawatt, "daW")]
        [InlineData("en-US", PowerUnit.Deciwatt, "dW")]
        [InlineData("en-US", PowerUnit.ElectricalHorsepower, "hp(E)")]
        [InlineData("en-US", PowerUnit.Femtowatt, "fW")]
        [InlineData("en-US", PowerUnit.GigajoulePerHour, "GJ/h")]
        [InlineData("en-US", PowerUnit.Gigawatt, "GW")]
        [InlineData("en-US", PowerUnit.HydraulicHorsepower, "hp(H)")]
        [InlineData("en-US", PowerUnit.JoulePerHour, "J/h")]
        [InlineData("en-US", PowerUnit.KilobritishThermalUnitPerHour, "kBtu/h")]
        [InlineData("en-US", PowerUnit.KilojoulePerHour, "kJ/h")]
        [InlineData("en-US", PowerUnit.Kilowatt, "kW")]
        [InlineData("en-US", PowerUnit.MechanicalHorsepower, "hp(I)")]
        [InlineData("en-US", PowerUnit.MegabritishThermalUnitPerHour, "MBtu/h")]
        [InlineData("en-US", PowerUnit.MegajoulePerHour, "MJ/h")]
        [InlineData("en-US", PowerUnit.Megawatt, "MW")]
        [InlineData("en-US", PowerUnit.MetricHorsepower, "hp(M)")]
        [InlineData("en-US", PowerUnit.Microwatt, "µW")]
        [InlineData("en-US", PowerUnit.MillijoulePerHour, "mJ/h")]
        [InlineData("en-US", PowerUnit.Milliwatt, "mW")]
        [InlineData("en-US", PowerUnit.Nanowatt, "nW")]
        [InlineData("en-US", PowerUnit.Petawatt, "PW")]
        [InlineData("en-US", PowerUnit.Picowatt, "pW")]
        [InlineData("en-US", PowerUnit.Terawatt, "TW")]
        [InlineData("en-US", PowerUnit.TonOfRefrigeration, "TR")]
        [InlineData("en-US", PowerUnit.Watt, "W")]
        public void GetAbbreviationForCulture(string culture, PowerUnit unit, string expectedAbbreviation)
        {
            var defaultAbbreviation = Power.GetAbbreviation(unit, CultureInfo.GetCultureInfo(culture)); 
            Assert.Equal(expectedAbbreviation, defaultAbbreviation);
        }

        [Fact]
        public void GetAbbreviationWithDefaultCulture()
        {
            Assert.All(Power.Units, unit =>
            {
                var expectedAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);

                var defaultAbbreviation = Power.GetAbbreviation(unit); 

                Assert.Equal(expectedAbbreviation, defaultAbbreviation);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit(PowerUnit unit)
        {
            var inBaseUnits = Power.From(1.0, Power.BaseUnit);
            var converted = inBaseUnits.ToUnit(unit);

            var conversionFactor = GetConversionFactor(unit);
            AssertEx.EqualTolerance(conversionFactor.UnitsInBaseUnit, converted.Value, conversionFactor.Tolerence);
            Assert.Equal(unit, converted.Unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_WithSameUnits_AreEqual(PowerUnit unit)
        {
            var quantity = Power.From(3.0, unit);
            var toUnitWithSameUnit = quantity.ToUnit(unit);
            Assert.Equal(quantity, toUnitWithSameUnit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromNonBaseUnit_ReturnsQuantityWithGivenUnit(PowerUnit unit)
        {
            Assert.All(Power.Units.Where(u => u != Power.BaseUnit), fromUnit =>
            {
                var quantity = Power.From(3.0, fromUnit);
                var converted = quantity.ToUnit(unit);
                Assert.Equal(converted.Unit, unit);
                Assert.Equal(quantity, converted);
            });
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public virtual void ToUnit_FromDefaultQuantity_ReturnsQuantityWithGivenUnit(PowerUnit unit)
        {
            var quantity = default(Power);
            var converted = quantity.ToUnit(unit);
            Assert.Equal(converted.Unit, unit);
        }

        [Theory]
        [MemberData(nameof(UnitTypes))]
        public void ToUnit_FromIQuantity_ReturnsTheExpectedIQuantity(PowerUnit unit)
        {
            var quantity = Power.From(3, Power.BaseUnit);
            Power expectedQuantity = quantity.ToUnit(unit);
            Assert.Multiple(() =>
            {
                IQuantity<PowerUnit> quantityToConvert = quantity;
                IQuantity<PowerUnit> convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            }, () =>
            {
                IQuantity quantityToConvert = quantity;
                IQuantity convertedQuantity = quantityToConvert.ToUnit(unit);
                Assert.Equal(unit, convertedQuantity.Unit);
                Assert.Equal(expectedQuantity, convertedQuantity);
            });
        }

        [Fact]
        public void ConversionRoundTrip()
        {
            Power watt = Power.FromWatts(3);
            Assert.Equal(3, Power.FromBoilerHorsepower(watt.BoilerHorsepower).Watts);
            Assert.Equal(3, Power.FromBritishThermalUnitsPerHour(watt.BritishThermalUnitsPerHour).Watts);
            Assert.Equal(3, Power.FromDecawatts(watt.Decawatts).Watts);
            Assert.Equal(3, Power.FromDeciwatts(watt.Deciwatts).Watts);
            Assert.Equal(3, Power.FromElectricalHorsepower(watt.ElectricalHorsepower).Watts);
            Assert.Equal(3, Power.FromFemtowatts(watt.Femtowatts).Watts);
            Assert.Equal(3, Power.FromGigajoulesPerHour(watt.GigajoulesPerHour).Watts);
            Assert.Equal(3, Power.FromGigawatts(watt.Gigawatts).Watts);
            Assert.Equal(3, Power.FromHydraulicHorsepower(watt.HydraulicHorsepower).Watts);
            Assert.Equal(3, Power.FromJoulesPerHour(watt.JoulesPerHour).Watts);
            Assert.Equal(3, Power.FromKilobritishThermalUnitsPerHour(watt.KilobritishThermalUnitsPerHour).Watts);
            Assert.Equal(3, Power.FromKilojoulesPerHour(watt.KilojoulesPerHour).Watts);
            Assert.Equal(3, Power.FromKilowatts(watt.Kilowatts).Watts);
            Assert.Equal(3, Power.FromMechanicalHorsepower(watt.MechanicalHorsepower).Watts);
            Assert.Equal(3, Power.FromMegabritishThermalUnitsPerHour(watt.MegabritishThermalUnitsPerHour).Watts);
            Assert.Equal(3, Power.FromMegajoulesPerHour(watt.MegajoulesPerHour).Watts);
            Assert.Equal(3, Power.FromMegawatts(watt.Megawatts).Watts);
            Assert.Equal(3, Power.FromMetricHorsepower(watt.MetricHorsepower).Watts);
            Assert.Equal(3, Power.FromMicrowatts(watt.Microwatts).Watts);
            Assert.Equal(3, Power.FromMillijoulesPerHour(watt.MillijoulesPerHour).Watts);
            Assert.Equal(3, Power.FromMilliwatts(watt.Milliwatts).Watts);
            Assert.Equal(3, Power.FromNanowatts(watt.Nanowatts).Watts);
            Assert.Equal(3, Power.FromPetawatts(watt.Petawatts).Watts);
            Assert.Equal(3, Power.FromPicowatts(watt.Picowatts).Watts);
            Assert.Equal(3, Power.FromTerawatts(watt.Terawatts).Watts);
            Assert.Equal(3, Power.FromTonsOfRefrigeration(watt.TonsOfRefrigeration).Watts);
            Assert.Equal(3, Power.FromWatts(watt.Watts).Watts);
        }

        [Fact]
        public void ArithmeticOperators()
        {
            Power v = Power.FromWatts(1);
            Assert.Equal(-1, -v.Watts);
            Assert.Equal(2, (Power.FromWatts(3) - v).Watts);
            Assert.Equal(2, (v + v).Watts);
            Assert.Equal(10, (v * 10).Watts);
            Assert.Equal(10, (10 * v).Watts);
            Assert.Equal(2, (Power.FromWatts(10) / 5).Watts);
            Assert.Equal(2, Power.FromWatts(10) / Power.FromWatts(5));
        }

        [Fact]
        public void ComparisonOperators()
        {
            Power oneWatt = Power.FromWatts(1);
            Power twoWatts = Power.FromWatts(2);

            Assert.True(oneWatt < twoWatts);
            Assert.True(oneWatt <= twoWatts);
            Assert.True(twoWatts > oneWatt);
            Assert.True(twoWatts >= oneWatt);

            Assert.False(oneWatt > twoWatts);
            Assert.False(oneWatt >= twoWatts);
            Assert.False(twoWatts < oneWatt);
            Assert.False(twoWatts <= oneWatt);
        }

        [Fact]
        public void CompareToIsImplemented()
        {
            Power watt = Power.FromWatts(1);
            Assert.Equal(0, watt.CompareTo(watt));
            Assert.True(watt.CompareTo(Power.Zero) > 0);
            Assert.True(Power.Zero.CompareTo(watt) < 0);
        }

        [Fact]
        public void CompareToThrowsOnTypeMismatch()
        {
            Power watt = Power.FromWatts(1);
            Assert.Throws<ArgumentException>(() => watt.CompareTo(new object()));
        }

        [Fact]
        public void CompareToThrowsOnNull()
        {
            Power watt = Power.FromWatts(1);
            Assert.Throws<ArgumentNullException>(() => watt.CompareTo(null));
        }

        [Theory]
        [InlineData(1, PowerUnit.Watt, 1, PowerUnit.Watt, true)]  // Same value and unit.
        [InlineData(1, PowerUnit.Watt, 2, PowerUnit.Watt, false)] // Different value.
        public void Equals_ReturnsTrue_IfValueAndUnitAreEqual(double valueA, PowerUnit unitA, double valueB, PowerUnit unitB, bool expectEqual)
        {
            var a = new Power(valueA, unitA);
            var b = new Power(valueB, unitB);

            // Operator overloads.
            Assert.Equal(expectEqual, a == b);
            Assert.Equal(expectEqual, b == a);
            Assert.Equal(!expectEqual, a != b);
            Assert.Equal(!expectEqual, b != a);

            // IEquatable<T>
            Assert.Equal(expectEqual, a.Equals(b));
            Assert.Equal(expectEqual, b.Equals(a));

            // IEquatable
            Assert.Equal(expectEqual, a.Equals((object)b));
            Assert.Equal(expectEqual, b.Equals((object)a));
        }

        [Fact]
        public void Equals_Null_ReturnsFalse()
        {
            var a = Power.Zero;

            Assert.False(a.Equals((object)null));

            // "The result of the expression is always 'false'..."
            #pragma warning disable CS8073
            Assert.False(a == null);
            Assert.False(null == a);
            Assert.True(a != null);
            Assert.True(null != a);
            #pragma warning restore CS8073
        }

        [Fact]
        public void EqualsReturnsFalseOnTypeMismatch()
        {
            Power watt = Power.FromWatts(1);
            Assert.False(watt.Equals(new object()));
        }

        [Fact]
        public void EqualsReturnsFalseOnNull()
        {
            Power watt = Power.FromWatts(1);
            Assert.False(watt.Equals(null));
        }

        [Theory]
        [InlineData(1, 2)]
        [InlineData(100, 110)]
        [InlineData(100, 90)]
        public void Equals_WithTolerance(double firstValue, double secondValue)
        {
            var quantity = Power.FromWatts(firstValue);
            var otherQuantity = Power.FromWatts(secondValue);
            Power maxTolerance = quantity > otherQuantity ? quantity - otherQuantity : otherQuantity - quantity;
            var largerTolerance = maxTolerance * 1.1m;
            var smallerTolerance = maxTolerance / 1.1m;
            Assert.True(quantity.Equals(quantity, Power.Zero));
            Assert.True(quantity.Equals(quantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, maxTolerance));
            Assert.True(quantity.Equals(otherQuantity, largerTolerance));
            Assert.False(quantity.Equals(otherQuantity, smallerTolerance));
        }

        [Fact]
        public void Equals_WithNegativeTolerance_ThrowsArgumentOutOfRangeException()
        {
            var quantity = Power.FromWatts(1);
            var negativeTolerance = Power.FromWatts(-1);
            Assert.Throws<ArgumentOutOfRangeException>(() => quantity.Equals(quantity, negativeTolerance));
        }

        [Fact]
        public void HasAtLeastOneAbbreviationSpecified()
        {
            var units = EnumHelper.GetValues<PowerUnit>();
            foreach (var unit in units)
            {
                var defaultAbbreviation = UnitsNetSetup.Default.UnitAbbreviations.GetDefaultAbbreviation(unit);
            }
        }

        [Fact]
        public void BaseDimensionsShouldNeverBeNull()
        {
            Assert.False(Power.BaseDimensions is null);
        }

        [Fact]
        public void Units_ReturnsTheQuantityInfoUnits()
        {
            Assert.Equal(Power.Info.Units, Power.Units);
        }

        [Fact]
        public void DefaultConversionFunctions_ReturnsTheDefaultUnitConverter()
        {
            Assert.Equal(UnitConverter.Default, Power.DefaultConversionFunctions);
        }

        [Fact]
        public void ToString_ReturnsValueAndUnitAbbreviationInCurrentCulture()
        {
            using var _ = new CultureScope("en-US");
            Assert.Equal("1 hp(S)", new Power(1, PowerUnit.BoilerHorsepower).ToString());
            Assert.Equal("1 Btu/h", new Power(1, PowerUnit.BritishThermalUnitPerHour).ToString());
            Assert.Equal("1 daW", new Power(1, PowerUnit.Decawatt).ToString());
            Assert.Equal("1 dW", new Power(1, PowerUnit.Deciwatt).ToString());
            Assert.Equal("1 hp(E)", new Power(1, PowerUnit.ElectricalHorsepower).ToString());
            Assert.Equal("1 fW", new Power(1, PowerUnit.Femtowatt).ToString());
            Assert.Equal("1 GJ/h", new Power(1, PowerUnit.GigajoulePerHour).ToString());
            Assert.Equal("1 GW", new Power(1, PowerUnit.Gigawatt).ToString());
            Assert.Equal("1 hp(H)", new Power(1, PowerUnit.HydraulicHorsepower).ToString());
            Assert.Equal("1 J/h", new Power(1, PowerUnit.JoulePerHour).ToString());
            Assert.Equal("1 kBtu/h", new Power(1, PowerUnit.KilobritishThermalUnitPerHour).ToString());
            Assert.Equal("1 kJ/h", new Power(1, PowerUnit.KilojoulePerHour).ToString());
            Assert.Equal("1 kW", new Power(1, PowerUnit.Kilowatt).ToString());
            Assert.Equal("1 hp(I)", new Power(1, PowerUnit.MechanicalHorsepower).ToString());
            Assert.Equal("1 MBtu/h", new Power(1, PowerUnit.MegabritishThermalUnitPerHour).ToString());
            Assert.Equal("1 MJ/h", new Power(1, PowerUnit.MegajoulePerHour).ToString());
            Assert.Equal("1 MW", new Power(1, PowerUnit.Megawatt).ToString());
            Assert.Equal("1 hp(M)", new Power(1, PowerUnit.MetricHorsepower).ToString());
            Assert.Equal("1 µW", new Power(1, PowerUnit.Microwatt).ToString());
            Assert.Equal("1 mJ/h", new Power(1, PowerUnit.MillijoulePerHour).ToString());
            Assert.Equal("1 mW", new Power(1, PowerUnit.Milliwatt).ToString());
            Assert.Equal("1 nW", new Power(1, PowerUnit.Nanowatt).ToString());
            Assert.Equal("1 PW", new Power(1, PowerUnit.Petawatt).ToString());
            Assert.Equal("1 pW", new Power(1, PowerUnit.Picowatt).ToString());
            Assert.Equal("1 TW", new Power(1, PowerUnit.Terawatt).ToString());
            Assert.Equal("1 TR", new Power(1, PowerUnit.TonOfRefrigeration).ToString());
            Assert.Equal("1 W", new Power(1, PowerUnit.Watt).ToString());
        }

        [Fact]
        public void ToString_WithSwedishCulture_ReturnsUnitAbbreviationForEnglishCultureSinceThereAreNoMappings()
        {
            // Chose this culture, because we don't currently have any abbreviations mapped for that culture and we expect the en-US to be used as fallback.
            var swedishCulture = CultureInfo.GetCultureInfo("sv-SE");

            Assert.Equal("1 hp(S)", new Power(1, PowerUnit.BoilerHorsepower).ToString(swedishCulture));
            Assert.Equal("1 Btu/h", new Power(1, PowerUnit.BritishThermalUnitPerHour).ToString(swedishCulture));
            Assert.Equal("1 daW", new Power(1, PowerUnit.Decawatt).ToString(swedishCulture));
            Assert.Equal("1 dW", new Power(1, PowerUnit.Deciwatt).ToString(swedishCulture));
            Assert.Equal("1 hp(E)", new Power(1, PowerUnit.ElectricalHorsepower).ToString(swedishCulture));
            Assert.Equal("1 fW", new Power(1, PowerUnit.Femtowatt).ToString(swedishCulture));
            Assert.Equal("1 GJ/h", new Power(1, PowerUnit.GigajoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 GW", new Power(1, PowerUnit.Gigawatt).ToString(swedishCulture));
            Assert.Equal("1 hp(H)", new Power(1, PowerUnit.HydraulicHorsepower).ToString(swedishCulture));
            Assert.Equal("1 J/h", new Power(1, PowerUnit.JoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 kBtu/h", new Power(1, PowerUnit.KilobritishThermalUnitPerHour).ToString(swedishCulture));
            Assert.Equal("1 kJ/h", new Power(1, PowerUnit.KilojoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 kW", new Power(1, PowerUnit.Kilowatt).ToString(swedishCulture));
            Assert.Equal("1 hp(I)", new Power(1, PowerUnit.MechanicalHorsepower).ToString(swedishCulture));
            Assert.Equal("1 MBtu/h", new Power(1, PowerUnit.MegabritishThermalUnitPerHour).ToString(swedishCulture));
            Assert.Equal("1 MJ/h", new Power(1, PowerUnit.MegajoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 MW", new Power(1, PowerUnit.Megawatt).ToString(swedishCulture));
            Assert.Equal("1 hp(M)", new Power(1, PowerUnit.MetricHorsepower).ToString(swedishCulture));
            Assert.Equal("1 µW", new Power(1, PowerUnit.Microwatt).ToString(swedishCulture));
            Assert.Equal("1 mJ/h", new Power(1, PowerUnit.MillijoulePerHour).ToString(swedishCulture));
            Assert.Equal("1 mW", new Power(1, PowerUnit.Milliwatt).ToString(swedishCulture));
            Assert.Equal("1 nW", new Power(1, PowerUnit.Nanowatt).ToString(swedishCulture));
            Assert.Equal("1 PW", new Power(1, PowerUnit.Petawatt).ToString(swedishCulture));
            Assert.Equal("1 pW", new Power(1, PowerUnit.Picowatt).ToString(swedishCulture));
            Assert.Equal("1 TW", new Power(1, PowerUnit.Terawatt).ToString(swedishCulture));
            Assert.Equal("1 TR", new Power(1, PowerUnit.TonOfRefrigeration).ToString(swedishCulture));
            Assert.Equal("1 W", new Power(1, PowerUnit.Watt).ToString(swedishCulture));
        }

        [Fact]
        public void ToString_SFormat_FormatsNumberWithGivenDigitsAfterRadixForCurrentCulture()
        {
            var _ = new CultureScope(CultureInfo.InvariantCulture);
            Assert.Equal("0.1 W", new Power(0.123456, PowerUnit.Watt).ToString("s1"));
            Assert.Equal("0.12 W", new Power(0.123456, PowerUnit.Watt).ToString("s2"));
            Assert.Equal("0.123 W", new Power(0.123456, PowerUnit.Watt).ToString("s3"));
            Assert.Equal("0.1235 W", new Power(0.123456, PowerUnit.Watt).ToString("s4"));
        }

        [Fact]
        public void ToString_SFormatAndCulture_FormatsNumberWithGivenDigitsAfterRadixForGivenCulture()
        {
            var culture = CultureInfo.InvariantCulture;
            Assert.Equal("0.1 W", new Power(0.123456, PowerUnit.Watt).ToString("s1", culture));
            Assert.Equal("0.12 W", new Power(0.123456, PowerUnit.Watt).ToString("s2", culture));
            Assert.Equal("0.123 W", new Power(0.123456, PowerUnit.Watt).ToString("s3", culture));
            Assert.Equal("0.1235 W", new Power(0.123456, PowerUnit.Watt).ToString("s4", culture));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("en-US")]
        public void ToString_NullFormat_DefaultsToGeneralFormat(string cultureName)
        {
            var quantity = Power.FromWatts(1.0);
            CultureInfo formatProvider = cultureName == null
                ? null
                : CultureInfo.GetCultureInfo(cultureName);

            Assert.Equal(quantity.ToString("G", formatProvider), quantity.ToString(null, formatProvider));
        }

        [Theory]
        [InlineData(null)]
        [InlineData("g")]
        public void ToString_NullProvider_EqualsCurrentCulture(string format)
        {
            var quantity = Power.FromWatts(1.0);
            Assert.Equal(quantity.ToString(format, CultureInfo.CurrentCulture), quantity.ToString(format, null));
        }

        [Fact]
        public void GetHashCode_Equals()
        {
            var quantity = Power.FromWatts(1.0);
            var expected = Comparison.GetHashCode(typeof(Power), quantity.As(Power.BaseUnit));
            Assert.Equal(expected, quantity.GetHashCode());
        }

        [Theory]
        [InlineData(1.0)]
        [InlineData(-1.0)]
        public void NegationOperator_ReturnsQuantity_WithNegatedValue(double value)
        {
            var quantity = Power.FromWatts(value);
            Assert.Equal(Power.FromWatts(-value), -quantity);
        }
    }
}
